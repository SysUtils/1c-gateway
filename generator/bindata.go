// Code generated by go-bindata. DO NOT EDIT.
// sources:
// static/Client.go (3.021kB)
// static/errors.go (72B)
// static/where.go (766B)

package generator

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticClientGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x96\x51\x6f\xda\x30\x10\xc7\x9f\xf1\xa7\xb8\x59\x53\xe5\x94\x28\x74\x7b\x9c\x84\xa6\x42\x51\x37\x69\xeb\xaa\xd2\x6a\x8f\x93\x1b\x1f\xe0\x35\xd8\xa9\xed\x0c\x31\xc4\x77\x9f\x6c\x93\x34\xa2\xac\x05\x69\x95\xf6\xd0\x17\xc0\x97\xf8\x77\xe7\xbb\x3f\xff\xa4\xe4\xf9\x1d\x9f\x22\x68\xc1\x1d\x27\x44\xce\x4b\x6d\x1c\x30\xd2\xa1\xb7\x4b\x87\x96\x92\x0e\x45\x95\x6b\x21\xd5\xb4\xf7\xd3\x6a\xe5\x03\x53\xe9\x66\xd5\x6d\x96\xeb\x79\xaf\xbc\x9b\xf6\xd0\x18\x6d\xc2\x9d\x52\xf7\xa4\xae\x9c\x2c\xfc\x42\xa1\xeb\xcd\x9c\x2b\xeb\xdf\x95\x29\x28\x49\x08\x71\xcb\x12\x61\x58\x48\x54\x0e\xac\x33\x55\xee\x60\x45\x3a\x95\x45\xa3\xf8\x1c\x7d\x48\xaa\x29\xe9\x94\xdc\xda\x85\x36\xa2\x09\xa0\x12\xa5\x96\x71\x53\x08\xe4\x91\x01\x70\xec\xd3\x64\x11\x49\xd6\x84\x4c\x2a\x95\xc3\x05\x2e\x62\x84\xd5\xe8\x14\x6a\x66\x0a\x5b\xb0\x04\x8e\x37\x15\xad\x48\xc7\xa0\xab\x8c\x82\xa3\x18\x59\x3d\xb5\x3d\x85\xa3\x56\xee\xd5\x7a\xdd\xa4\x67\x79\x8d\x4c\xe0\x1c\xdd\x60\x79\x63\x0a\x56\x1a\x5d\x56\xa6\xd8\x24\x4d\x61\x31\x43\x83\xf0\xdd\x7f\x26\xc0\xea\x68\xe8\x67\xe2\x2b\x29\xb9\xe1\x73\x0b\x1f\xfa\x40\x3f\xbe\x9d\x68\x33\xe7\xae\xef\x87\x70\x44\x49\x73\xb1\xdb\x87\x31\x1a\xc9\x0b\xf9\x1b\x03\x89\x05\x6a\xe2\xcf\x71\x1f\x60\x7e\x7f\xa8\xf2\x02\x17\x57\x78\x5f\xa1\x75\x8c\x9e\x8f\xae\x69\x0a\x79\x56\x9f\xa4\xbb\xa9\xad\x1b\xb1\x29\x28\x59\x24\xa4\x23\x27\x81\xf0\xa6\xef\xd7\xbe\xa4\xba\x3b\x94\x06\x36\xe9\xac\x43\xa2\x6c\x8c\x6e\xc0\xad\xcc\x4f\x2b\x37\x63\x79\xf6\xd0\xb4\x3c\xab\xdb\x16\x4a\xb2\x65\x53\x53\x9e\xc5\x09\x66\x67\x9a\x19\xbc\xdf\x37\xdb\xad\x16\xcb\x14\x7e\x78\x42\x14\x5b\x76\x85\x5c\x9c\x16\x05\xf3\xf4\x6c\xa0\xc5\x32\xa2\xc2\x72\xec\xb8\xab\xec\x50\x0b\xec\xbd\x3b\x39\x81\x7e\x1f\xde\xb7\xc1\xb1\xe7\xcc\x33\x93\x70\xe6\xcd\x81\xda\x59\xb5\xb1\xbe\x75\xac\x7d\x6f\xb2\x73\xd0\x43\x83\xdc\xe1\x48\x39\xe9\x96\x0c\xc3\x17\x48\xe5\xd0\x4c\x78\x8e\xab\x75\x0a\x5e\xfb\x2d\x95\x1f\x34\x74\x3f\x73\xff\x27\x6d\xfa\xe7\x83\xd9\x57\x6e\xec\x8c\x17\x9b\x6c\x7b\xf6\xf0\x19\x6d\x5c\x7e\x1b\x6f\x89\x83\xf6\x68\xb7\x32\x45\x76\xc9\xdd\x6c\x64\x73\x5e\x22\xab\x8f\x92\x34\x8a\x09\x86\x11\x41\x5c\xa0\x61\xbe\xd8\xe4\x55\x43\xfb\x68\xa8\x6d\x15\x51\x3e\x83\xe5\x67\xc1\xa4\xd8\x4f\x32\xad\x5c\x3e\xfd\x5f\x3c\x28\x80\x25\x5a\xb6\x85\x7c\x61\x1f\x3a\xd4\x88\xf6\xd2\xda\xab\x3b\x1d\xee\x4e\x37\xa5\x78\x70\xa7\xba\xa5\x29\x48\xd1\xe8\xe0\xb1\x65\xed\x92\xc3\x7f\x61\x51\xa7\xd7\xc3\x4f\x07\xe8\x86\xb2\x47\x17\xa5\x48\xba\x34\xa1\xaf\xf6\xf5\x4f\x45\x76\x85\x73\xfd\x0b\xe3\xeb\xce\xc3\xab\x4e\x12\x21\xcf\x3d\xde\x9e\x1c\xf9\xd9\xe8\xcb\xe8\x7a\xb4\x73\xe6\xfb\xda\x42\x5b\x5b\x2f\x3c\xae\x83\x47\x55\xa0\x8a\x7d\xf5\xb0\x93\x2d\xd4\xee\xfe\xb7\xe6\x14\x6d\xff\x4f\x00\x00\x00\xff\xff\x41\x0f\x8e\xee\xcd\x0b\x00\x00")

func staticClientGoBytes() ([]byte, error) {
	return bindataRead(
		_staticClientGo,
		"static/Client.go",
	)
}

func staticClientGo() (*asset, error) {
	bytes, err := staticClientGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/Client.go", size: 3021, mode: os.FileMode(0644), modTime: time.Unix(1548671052, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x39, 0xb0, 0x43, 0x44, 0xaa, 0xa4, 0x45, 0x55, 0xbc, 0x76, 0xbd, 0x19, 0x31, 0x5d, 0x4b, 0xee, 0x13, 0x70, 0xa, 0x9d, 0xdd, 0x74, 0x1a, 0x5e, 0x7, 0xe3, 0x58, 0x54, 0x30, 0x0, 0xc0, 0xba}}
	return a, nil
}

var _staticErrorsGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\x4f\x49\x2c\x49\xe4\xe2\xca\xcc\x2d\xc8\x2f\x2a\x51\x50\x4a\x2d\x2a\xca\x2f\x2a\x56\xe2\xe2\x2a\x4b\x2c\x52\x70\x2d\x2a\xf2\xcb\xf7\x2c\x49\xcd\x2d\x56\xb0\x55\x80\xc8\xe8\xf9\xa5\x96\x6b\x28\xf9\xe5\x2b\x64\x82\x84\x95\x34\xb9\x00\x01\x00\x00\xff\xff\xdd\x2e\x33\xa4\x48\x00\x00\x00")

func staticErrorsGoBytes() ([]byte, error) {
	return bindataRead(
		_staticErrorsGo,
		"static/errors.go",
	)
}

func staticErrorsGo() (*asset, error) {
	bytes, err := staticErrorsGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/errors.go", size: 72, mode: os.FileMode(0644), modTime: time.Unix(1548671052, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x49, 0x60, 0xcd, 0x48, 0xf0, 0x27, 0xf2, 0x4b, 0x27, 0x57, 0xca, 0xd6, 0xbe, 0x5e, 0x63, 0xf2, 0x88, 0x26, 0x2e, 0xc9, 0xe2, 0x7e, 0x50, 0x87, 0x96, 0x21, 0x65, 0xac, 0xaf, 0x79, 0x91, 0xb8}}
	return a, nil
}

var _staticWhereGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xcf\x6e\xa3\x30\x10\x87\xcf\x9e\xa7\x98\xb5\x36\x2b\x60\x23\xf6\xbe\x12\xc7\x46\x6a\x2f\xad\x44\xa5\x1e\xaa\x1e\x5c\x18\x12\x2b\x60\xac\x61\x50\x95\x56\x79\xf7\xca\xfc\x69\xd2\x34\x07\x38\x19\xf4\x9b\xef\x63\x66\xec\x4d\xb1\x37\x5b\xc2\xb6\x34\x62\x00\x6c\xe3\x5b\x16\x8c\x40\xe9\xaa\x11\x0d\x4a\x3b\x92\x7f\x3d\xd7\xe1\xd8\x09\x5b\xb7\xed\x34\xc4\x00\x72\xf0\x84\xb7\x1b\x5b\x0b\x31\x5a\x27\xc4\x95\x29\x08\x3f\x40\x3d\xb6\xf9\x90\x8b\x62\x1c\x0b\xe0\x38\xc5\x9f\x76\xc4\x14\x3e\xf6\x85\x8c\x49\x8f\xe1\x49\xac\x13\x50\xf9\xde\xfa\xd3\xdb\x44\x9e\x15\xa0\xee\xb9\x24\x7e\x3d\x60\x32\x41\xd5\xc6\x52\x5d\x76\x88\xcf\x2f\x27\x4d\xd5\xbb\x02\x73\x62\x6b\x6a\xfb\x4e\x83\x2f\x7a\x1b\xac\xc3\x79\xfe\xa3\x20\xf7\x86\x4d\xd3\xe1\xff\x0c\xb5\x06\x50\xb6\xc2\x21\x98\x4e\xe2\x5f\x19\x3a\x5b\x87\xe0\x9c\xfc\x9b\x61\xd5\x48\x9a\x7b\xb6\x4e\xaa\x48\xff\xae\x86\x64\xb6\xea\xfe\xe8\x35\xf6\x5c\xa7\x0f\x46\x76\x37\x5d\x61\x3c\x45\xd1\x39\x2c\x4e\x4f\x33\x89\x63\x50\xc7\x73\xdf\xdc\xd7\x02\x61\x3b\x46\xaf\x1b\x93\x6f\xb8\x1f\x9a\x30\xeb\x05\x0a\x69\x7d\xb6\x2a\x03\x3e\xf9\xaa\xbb\x44\x0d\x8b\x5a\xc0\xea\xf6\xf6\x02\x16\x2a\x2f\x69\xd3\x1a\x97\xf0\xa8\xa6\x42\xae\x77\x3f\x5d\xcd\xf4\xae\xb5\x2e\x3a\x07\xaf\x51\xaf\x51\x4f\x63\x57\x4c\xd2\xb3\xc3\xd1\x00\x47\xf8\x0c\x00\x00\xff\xff\xd1\xb4\x42\xcb\xfe\x02\x00\x00")

func staticWhereGoBytes() ([]byte, error) {
	return bindataRead(
		_staticWhereGo,
		"static/where.go",
	)
}

func staticWhereGo() (*asset, error) {
	bytes, err := staticWhereGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/where.go", size: 766, mode: os.FileMode(0644), modTime: time.Unix(1549365924, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x52, 0xe, 0xbb, 0x8d, 0x9c, 0xa8, 0x98, 0xb8, 0x37, 0x77, 0x1c, 0xe6, 0x51, 0x49, 0xea, 0xa7, 0x7b, 0xc6, 0x5f, 0xc3, 0x85, 0x4f, 0xcf, 0xe0, 0xa3, 0xe5, 0x64, 0x46, 0xca, 0xec, 0x7f, 0x4c}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/Client.go": staticClientGo,

	"static/errors.go": staticErrorsGo,

	"static/where.go": staticWhereGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"Client.go": &bintree{staticClientGo, map[string]*bintree{}},
		"errors.go": &bintree{staticErrorsGo, map[string]*bintree{}},
		"where.go":  &bintree{staticWhereGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
