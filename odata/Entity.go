package odata

import "encoding/json"

type AccumulationRegisterPartiiTovarovVProizvodstve struct {
	Recorder     String                                                  `json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterPartiiTovarovVProizvodstveRowType `json:"RecordSet,omitempty"`
	RecorderType String                                                  `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterPartiiTovarovVProizvodstve) APIEntityType() string {
	return "AccumulationRegister_ПартииТоваровВПроизводстве"
}
func NewAccumulationRegisterPartiiTovarovVProizvodstve(data string, prevError error) (*AccumulationRegisterPartiiTovarovVProizvodstve, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterPartiiTovarovVProizvodstve)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterPartiiTovarovVProizvodstve(entity AccumulationRegisterPartiiTovarovVProizvodstve) (*AccumulationRegisterPartiiTovarovVProizvodstve, error) {
	return NewAccumulationRegisterPartiiTovarovVProizvodstve(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterPartiiTovarovVProizvodstve(key PrimaryAccumulationRegisterPartiiTovarovVProizvodstve, fields []string) (*AccumulationRegisterPartiiTovarovVProizvodstve, error) {
	return NewAccumulationRegisterPartiiTovarovVProizvodstve(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterPartiiTovarovVProizvodstves(where Where) (*[]AccumulationRegisterPartiiTovarovVProizvodstve, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterPartiiTovarovVProizvodstve `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ПартииТоваровВПроизводстве", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterPartiiTovarovVProizvodstve(key PrimaryAccumulationRegisterPartiiTovarovVProizvodstve, entity AccumulationRegisterPartiiTovarovVProizvodstve) (*AccumulationRegisterPartiiTovarovVProizvodstve, error) {
	return NewAccumulationRegisterPartiiTovarovVProizvodstve(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterPartiiTovarovVProizvodstve(key PrimaryAccumulationRegisterPartiiTovarovVProizvodstve) error {
	return c.removeEntity(key)
}

type AccumulationRegisterPartiiTovarovVProizvodstveRecordType struct {
	Recorder                       String    `json:"Recorder,omitempty"`
	Period                         *DateTime `json:"Period,omitempty"`
	LineNumber                     Int64     `json:"LineNumber,omitempty"`
	Active                         *Boolean  `json:"Active,omitempty"`
	RecordType                     *String   `json:"RecordType,omitempty"`
	ProizvodstvennyiUchastokKey    *Guid     `json:"ПроизводственныйУчасток_Key,omitempty"`
	Nomenklatura                   *String   `json:"Номенклатура,omitempty"`
	OrganizatsiiaKey               *Guid     `json:"Организация_Key,omitempty"`
	DogovorKontragentaKey          *Guid     `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOprikhodovaniia        *String   `json:"ДокументОприходования,omitempty"`
	KharakteristikaNomenklaturyKey *Guid     `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid     `json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid     `json:"СерияНоменклатуры_Key,omitempty"`
	Quantity                       *Int64    `json:"Количество,omitempty"`
	Weight                         *Double   `json:"Вес,omitempty"`
	Cost                           *Double   `json:"Стоимость,omitempty"`
	StoimostUpr                    *Double   `json:"СтоимостьУпр,omitempty"`
	StoimostBezNDS                 *Double   `json:"СтоимостьБезНДС,omitempty"`
	OperationCode                  *String   `json:"КодОперации,omitempty"`
	SpisaniePartii                 *Boolean  `json:"СписаниеПартий,omitempty"`
	NomerKorStroki                 *Int64    `json:"НомерКорСтроки,omitempty"`
	RecorderType                   String    `json:"Recorder_Type,omitempty"`
	ItemType                       *String   `json:"Номенклатура_Type,omitempty"`
	DokumentOprikhodovaniiaType    *String   `json:"ДокументОприходования_Type,omitempty"`
}

func (AccumulationRegisterPartiiTovarovVProizvodstveRecordType) APIEntityType() string {
	return "AccumulationRegister_ПартииТоваровВПроизводстве_RecordType"
}
func NewAccumulationRegisterPartiiTovarovVProizvodstveRecordType(data string, prevError error) (*AccumulationRegisterPartiiTovarovVProizvodstveRecordType, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterPartiiTovarovVProizvodstveRecordType)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterPartiiTovarovVProizvodstveRecordType(entity AccumulationRegisterPartiiTovarovVProizvodstveRecordType) (*AccumulationRegisterPartiiTovarovVProizvodstveRecordType, error) {
	return NewAccumulationRegisterPartiiTovarovVProizvodstveRecordType(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterPartiiTovarovVProizvodstveRecordType(key PrimaryAccumulationRegisterPartiiTovarovVProizvodstveRecordType, fields []string) (*AccumulationRegisterPartiiTovarovVProizvodstveRecordType, error) {
	return NewAccumulationRegisterPartiiTovarovVProizvodstveRecordType(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterPartiiTovarovVProizvodstveRecordTypes(where Where) (*[]AccumulationRegisterPartiiTovarovVProizvodstveRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterPartiiTovarovVProizvodstveRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ПартииТоваровВПроизводстве_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterPartiiTovarovVProizvodstveRecordType(key PrimaryAccumulationRegisterPartiiTovarovVProizvodstveRecordType, entity AccumulationRegisterPartiiTovarovVProizvodstveRecordType) (*AccumulationRegisterPartiiTovarovVProizvodstveRecordType, error) {
	return NewAccumulationRegisterPartiiTovarovVProizvodstveRecordType(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterPartiiTovarovVProizvodstveRecordType(key PrimaryAccumulationRegisterPartiiTovarovVProizvodstveRecordType) error {
	return c.removeEntity(key)
}

type AccumulationRegisterVzaimoraschetySPodotchetnymiLitsami struct {
	Recorder     String                                                           `json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRowType `json:"RecordSet,omitempty"`
	RecorderType String                                                           `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterVzaimoraschetySPodotchetnymiLitsami) APIEntityType() string {
	return "AccumulationRegister_ВзаиморасчетыСПодотчетнымиЛицами"
}
func NewAccumulationRegisterVzaimoraschetySPodotchetnymiLitsami(data string, prevError error) (*AccumulationRegisterVzaimoraschetySPodotchetnymiLitsami, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterVzaimoraschetySPodotchetnymiLitsami)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterVzaimoraschetySPodotchetnymiLitsami(entity AccumulationRegisterVzaimoraschetySPodotchetnymiLitsami) (*AccumulationRegisterVzaimoraschetySPodotchetnymiLitsami, error) {
	return NewAccumulationRegisterVzaimoraschetySPodotchetnymiLitsami(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterVzaimoraschetySPodotchetnymiLitsami(key PrimaryAccumulationRegisterVzaimoraschetySPodotchetnymiLitsami, fields []string) (*AccumulationRegisterVzaimoraschetySPodotchetnymiLitsami, error) {
	return NewAccumulationRegisterVzaimoraschetySPodotchetnymiLitsami(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterVzaimoraschetySPodotchetnymiLitsamis(where Where) (*[]AccumulationRegisterVzaimoraschetySPodotchetnymiLitsami, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterVzaimoraschetySPodotchetnymiLitsami `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ВзаиморасчетыСПодотчетнымиЛицами", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterVzaimoraschetySPodotchetnymiLitsami(key PrimaryAccumulationRegisterVzaimoraschetySPodotchetnymiLitsami, entity AccumulationRegisterVzaimoraschetySPodotchetnymiLitsami) (*AccumulationRegisterVzaimoraschetySPodotchetnymiLitsami, error) {
	return NewAccumulationRegisterVzaimoraschetySPodotchetnymiLitsami(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterVzaimoraschetySPodotchetnymiLitsami(key PrimaryAccumulationRegisterVzaimoraschetySPodotchetnymiLitsami) error {
	return c.removeEntity(key)
}

type AccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRecordType struct {
	Recorder               String    `json:"Recorder,omitempty"`
	Period                 *DateTime `json:"Period,omitempty"`
	LineNumber             Int64     `json:"LineNumber,omitempty"`
	Active                 *Boolean  `json:"Active,omitempty"`
	RecordType             *String   `json:"RecordType,omitempty"`
	FizLitsoKey            *Guid     `json:"ФизЛицо_Key,omitempty"`
	ValiutaKey             *Guid     `json:"Валюта_Key,omitempty"`
	RaschetnyiDokument     *String   `json:"РасчетныйДокумент,omitempty"`
	SummaVzaimoraschetov   *Double   `json:"СуммаВзаиморасчетов,omitempty"`
	SummaUpr               *Double   `json:"СуммаУпр,omitempty"`
	RecorderType           String    `json:"Recorder_Type,omitempty"`
	RaschetnyiDokumentType *String   `json:"РасчетныйДокумент_Type,omitempty"`
}

func (AccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRecordType) APIEntityType() string {
	return "AccumulationRegister_ВзаиморасчетыСПодотчетнымиЛицами_RecordType"
}
func NewAccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRecordType(data string, prevError error) (*AccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRecordType, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRecordType)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRecordType(entity AccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRecordType) (*AccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRecordType, error) {
	return NewAccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRecordType(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRecordType(key PrimaryAccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRecordType, fields []string) (*AccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRecordType, error) {
	return NewAccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRecordType(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRecordTypes(where Where) (*[]AccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ВзаиморасчетыСПодотчетнымиЛицами_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRecordType(key PrimaryAccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRecordType, entity AccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRecordType) (*AccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRecordType, error) {
	return NewAccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRecordType(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRecordType(key PrimaryAccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRecordType) error {
	return c.removeEntity(key)
}

type AccumulationRegisterVnutrennieZakazy struct {
	Recorder     String                                        `json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterVnutrennieZakazyRowType `json:"RecordSet,omitempty"`
	RecorderType String                                        `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterVnutrennieZakazy) APIEntityType() string {
	return "AccumulationRegister_ВнутренниеЗаказы"
}
func NewAccumulationRegisterVnutrennieZakazy(data string, prevError error) (*AccumulationRegisterVnutrennieZakazy, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterVnutrennieZakazy)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterVnutrennieZakazy(entity AccumulationRegisterVnutrennieZakazy) (*AccumulationRegisterVnutrennieZakazy, error) {
	return NewAccumulationRegisterVnutrennieZakazy(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterVnutrennieZakazy(key PrimaryAccumulationRegisterVnutrennieZakazy, fields []string) (*AccumulationRegisterVnutrennieZakazy, error) {
	return NewAccumulationRegisterVnutrennieZakazy(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterVnutrennieZakazys(where Where) (*[]AccumulationRegisterVnutrennieZakazy, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterVnutrennieZakazy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ВнутренниеЗаказы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterVnutrennieZakazy(key PrimaryAccumulationRegisterVnutrennieZakazy, entity AccumulationRegisterVnutrennieZakazy) (*AccumulationRegisterVnutrennieZakazy, error) {
	return NewAccumulationRegisterVnutrennieZakazy(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterVnutrennieZakazy(key PrimaryAccumulationRegisterVnutrennieZakazy) error {
	return c.removeEntity(key)
}

type AccumulationRegisterVnutrennieZakazyRecordType struct {
	Recorder                       String    `json:"Recorder,omitempty"`
	Period                         *DateTime `json:"Period,omitempty"`
	LineNumber                     Int64     `json:"LineNumber,omitempty"`
	Active                         *Boolean  `json:"Active,omitempty"`
	RecordType                     *String   `json:"RecordType,omitempty"`
	ItemKey                        *Guid     `json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid     `json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid     `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid     `json:"Размер_Key,omitempty"`
	Zakazchik                      *String   `json:"Заказчик,omitempty"`
	VnutrenniiZakazKey             *Guid     `json:"ВнутреннийЗаказ_Key,omitempty"`
	StatusPartii                   *String   `json:"СтатусПартии,omitempty"`
	Quantity                       *Int64    `json:"Количество,omitempty"`
	Weight                         *Double   `json:"Вес,omitempty"`
	RecorderType                   String    `json:"Recorder_Type,omitempty"`
	ZakazchikType                  *String   `json:"Заказчик_Type,omitempty"`
}

func (AccumulationRegisterVnutrennieZakazyRecordType) APIEntityType() string {
	return "AccumulationRegister_ВнутренниеЗаказы_RecordType"
}
func NewAccumulationRegisterVnutrennieZakazyRecordType(data string, prevError error) (*AccumulationRegisterVnutrennieZakazyRecordType, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterVnutrennieZakazyRecordType)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterVnutrennieZakazyRecordType(entity AccumulationRegisterVnutrennieZakazyRecordType) (*AccumulationRegisterVnutrennieZakazyRecordType, error) {
	return NewAccumulationRegisterVnutrennieZakazyRecordType(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterVnutrennieZakazyRecordType(key PrimaryAccumulationRegisterVnutrennieZakazyRecordType, fields []string) (*AccumulationRegisterVnutrennieZakazyRecordType, error) {
	return NewAccumulationRegisterVnutrennieZakazyRecordType(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterVnutrennieZakazyRecordTypes(where Where) (*[]AccumulationRegisterVnutrennieZakazyRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterVnutrennieZakazyRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ВнутренниеЗаказы_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterVnutrennieZakazyRecordType(key PrimaryAccumulationRegisterVnutrennieZakazyRecordType, entity AccumulationRegisterVnutrennieZakazyRecordType) (*AccumulationRegisterVnutrennieZakazyRecordType, error) {
	return NewAccumulationRegisterVnutrennieZakazyRecordType(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterVnutrennieZakazyRecordType(key PrimaryAccumulationRegisterVnutrennieZakazyRecordType) error {
	return c.removeEntity(key)
}

type AccumulationRegisterDenezhnyeSredstvaKomitenta struct {
	Recorder     String                                                  `json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterDenezhnyeSredstvaKomitentaRowType `json:"RecordSet,omitempty"`
	RecorderType String                                                  `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterDenezhnyeSredstvaKomitenta) APIEntityType() string {
	return "AccumulationRegister_ДенежныеСредстваКомитента"
}
func NewAccumulationRegisterDenezhnyeSredstvaKomitenta(data string, prevError error) (*AccumulationRegisterDenezhnyeSredstvaKomitenta, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterDenezhnyeSredstvaKomitenta)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterDenezhnyeSredstvaKomitenta(entity AccumulationRegisterDenezhnyeSredstvaKomitenta) (*AccumulationRegisterDenezhnyeSredstvaKomitenta, error) {
	return NewAccumulationRegisterDenezhnyeSredstvaKomitenta(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterDenezhnyeSredstvaKomitenta(key PrimaryAccumulationRegisterDenezhnyeSredstvaKomitenta, fields []string) (*AccumulationRegisterDenezhnyeSredstvaKomitenta, error) {
	return NewAccumulationRegisterDenezhnyeSredstvaKomitenta(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterDenezhnyeSredstvaKomitentas(where Where) (*[]AccumulationRegisterDenezhnyeSredstvaKomitenta, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterDenezhnyeSredstvaKomitenta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ДенежныеСредстваКомитента", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterDenezhnyeSredstvaKomitenta(key PrimaryAccumulationRegisterDenezhnyeSredstvaKomitenta, entity AccumulationRegisterDenezhnyeSredstvaKomitenta) (*AccumulationRegisterDenezhnyeSredstvaKomitenta, error) {
	return NewAccumulationRegisterDenezhnyeSredstvaKomitenta(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterDenezhnyeSredstvaKomitenta(key PrimaryAccumulationRegisterDenezhnyeSredstvaKomitenta) error {
	return c.removeEntity(key)
}

type AccumulationRegisterDenezhnyeSredstvaKomitentaRecordType struct {
	Recorder              String    `json:"Recorder,omitempty"`
	Period                *DateTime `json:"Period,omitempty"`
	LineNumber            Int64     `json:"LineNumber,omitempty"`
	Active                *Boolean  `json:"Active,omitempty"`
	RecordType            *String   `json:"RecordType,omitempty"`
	DogovorKontragentaKey *Guid     `json:"ДоговорКонтрагента_Key,omitempty"`
	Sdelka                *String   `json:"Сделка,omitempty"`
	SummaVzaimoraschetov  *Double   `json:"СуммаВзаиморасчетов,omitempty"`
	SummaUpr              *Double   `json:"СуммаУпр,omitempty"`
	RecorderType          String    `json:"Recorder_Type,omitempty"`
	SdelkaType            *String   `json:"Сделка_Type,omitempty"`
}

func (AccumulationRegisterDenezhnyeSredstvaKomitentaRecordType) APIEntityType() string {
	return "AccumulationRegister_ДенежныеСредстваКомитента_RecordType"
}
func NewAccumulationRegisterDenezhnyeSredstvaKomitentaRecordType(data string, prevError error) (*AccumulationRegisterDenezhnyeSredstvaKomitentaRecordType, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterDenezhnyeSredstvaKomitentaRecordType)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterDenezhnyeSredstvaKomitentaRecordType(entity AccumulationRegisterDenezhnyeSredstvaKomitentaRecordType) (*AccumulationRegisterDenezhnyeSredstvaKomitentaRecordType, error) {
	return NewAccumulationRegisterDenezhnyeSredstvaKomitentaRecordType(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterDenezhnyeSredstvaKomitentaRecordType(key PrimaryAccumulationRegisterDenezhnyeSredstvaKomitentaRecordType, fields []string) (*AccumulationRegisterDenezhnyeSredstvaKomitentaRecordType, error) {
	return NewAccumulationRegisterDenezhnyeSredstvaKomitentaRecordType(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterDenezhnyeSredstvaKomitentaRecordTypes(where Where) (*[]AccumulationRegisterDenezhnyeSredstvaKomitentaRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterDenezhnyeSredstvaKomitentaRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ДенежныеСредстваКомитента_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterDenezhnyeSredstvaKomitentaRecordType(key PrimaryAccumulationRegisterDenezhnyeSredstvaKomitentaRecordType, entity AccumulationRegisterDenezhnyeSredstvaKomitentaRecordType) (*AccumulationRegisterDenezhnyeSredstvaKomitentaRecordType, error) {
	return NewAccumulationRegisterDenezhnyeSredstvaKomitentaRecordType(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterDenezhnyeSredstvaKomitentaRecordType(key PrimaryAccumulationRegisterDenezhnyeSredstvaKomitentaRecordType) error {
	return c.removeEntity(key)
}

type AccumulationRegisterZakazyKlientov struct {
	Recorder     String                                      `json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterZakazyKlientovRowType `json:"RecordSet,omitempty"`
	RecorderType String                                      `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterZakazyKlientov) APIEntityType() string {
	return "AccumulationRegister_ЗаказыКлиентов"
}
func NewAccumulationRegisterZakazyKlientov(data string, prevError error) (*AccumulationRegisterZakazyKlientov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterZakazyKlientov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterZakazyKlientov(entity AccumulationRegisterZakazyKlientov) (*AccumulationRegisterZakazyKlientov, error) {
	return NewAccumulationRegisterZakazyKlientov(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterZakazyKlientov(key PrimaryAccumulationRegisterZakazyKlientov, fields []string) (*AccumulationRegisterZakazyKlientov, error) {
	return NewAccumulationRegisterZakazyKlientov(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterZakazyKlientovs(where Where) (*[]AccumulationRegisterZakazyKlientov, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterZakazyKlientov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ЗаказыКлиентов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterZakazyKlientov(key PrimaryAccumulationRegisterZakazyKlientov, entity AccumulationRegisterZakazyKlientov) (*AccumulationRegisterZakazyKlientov, error) {
	return NewAccumulationRegisterZakazyKlientov(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterZakazyKlientov(key PrimaryAccumulationRegisterZakazyKlientov) error {
	return c.removeEntity(key)
}

type AccumulationRegisterZakazyKlientovRecordType struct {
	Recorder        String    `json:"Recorder,omitempty"`
	Period          *DateTime `json:"Period,omitempty"`
	LineNumber      Int64     `json:"LineNumber,omitempty"`
	Active          *Boolean  `json:"Active,omitempty"`
	RecordType      *String   `json:"RecordType,omitempty"`
	ItemKey         *Guid     `json:"Номенклатура_Key,omitempty"`
	SizeKey         *Guid     `json:"Размер_Key,omitempty"`
	ZakazKlientaKey *Guid     `json:"ЗаказКлиента_Key,omitempty"`
	InstanceKey     *Guid     `json:"СерияНоменклатуры_Key,omitempty"`
	Zakazano        *Int64    `json:"Заказано,omitempty"`
	VRezerve        *Int64    `json:"ВРезерве,omitempty"`
	KRazmeshcheniiu *Int64    `json:"КРазмещению,omitempty"`
	ZakazanoVes     *Double   `json:"ЗаказаноВес,omitempty"`
	ZakazanoSumma   *Double   `json:"ЗаказаноСумма,omitempty"`
	RecorderType    String    `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterZakazyKlientovRecordType) APIEntityType() string {
	return "AccumulationRegister_ЗаказыКлиентов_RecordType"
}
func NewAccumulationRegisterZakazyKlientovRecordType(data string, prevError error) (*AccumulationRegisterZakazyKlientovRecordType, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterZakazyKlientovRecordType)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterZakazyKlientovRecordType(entity AccumulationRegisterZakazyKlientovRecordType) (*AccumulationRegisterZakazyKlientovRecordType, error) {
	return NewAccumulationRegisterZakazyKlientovRecordType(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterZakazyKlientovRecordType(key PrimaryAccumulationRegisterZakazyKlientovRecordType, fields []string) (*AccumulationRegisterZakazyKlientovRecordType, error) {
	return NewAccumulationRegisterZakazyKlientovRecordType(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterZakazyKlientovRecordTypes(where Where) (*[]AccumulationRegisterZakazyKlientovRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterZakazyKlientovRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ЗаказыКлиентов_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterZakazyKlientovRecordType(key PrimaryAccumulationRegisterZakazyKlientovRecordType, entity AccumulationRegisterZakazyKlientovRecordType) (*AccumulationRegisterZakazyKlientovRecordType, error) {
	return NewAccumulationRegisterZakazyKlientovRecordType(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterZakazyKlientovRecordType(key PrimaryAccumulationRegisterZakazyKlientovRecordType) error {
	return c.removeEntity(key)
}

type AccumulationRegisterSummyPoFinmonitoringuRoznitsa struct {
	Recorder     String                                                     `json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterSummyPoFinmonitoringuRoznitsaRowType `json:"RecordSet,omitempty"`
	RecorderType String                                                     `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterSummyPoFinmonitoringuRoznitsa) APIEntityType() string {
	return "AccumulationRegister_СуммыПоФинмониторингуРозница"
}
func NewAccumulationRegisterSummyPoFinmonitoringuRoznitsa(data string, prevError error) (*AccumulationRegisterSummyPoFinmonitoringuRoznitsa, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterSummyPoFinmonitoringuRoznitsa)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterSummyPoFinmonitoringuRoznitsa(entity AccumulationRegisterSummyPoFinmonitoringuRoznitsa) (*AccumulationRegisterSummyPoFinmonitoringuRoznitsa, error) {
	return NewAccumulationRegisterSummyPoFinmonitoringuRoznitsa(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterSummyPoFinmonitoringuRoznitsa(key PrimaryAccumulationRegisterSummyPoFinmonitoringuRoznitsa, fields []string) (*AccumulationRegisterSummyPoFinmonitoringuRoznitsa, error) {
	return NewAccumulationRegisterSummyPoFinmonitoringuRoznitsa(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterSummyPoFinmonitoringuRoznitsas(where Where) (*[]AccumulationRegisterSummyPoFinmonitoringuRoznitsa, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterSummyPoFinmonitoringuRoznitsa `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_СуммыПоФинмониторингуРозница", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterSummyPoFinmonitoringuRoznitsa(key PrimaryAccumulationRegisterSummyPoFinmonitoringuRoznitsa, entity AccumulationRegisterSummyPoFinmonitoringuRoznitsa) (*AccumulationRegisterSummyPoFinmonitoringuRoznitsa, error) {
	return NewAccumulationRegisterSummyPoFinmonitoringuRoznitsa(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterSummyPoFinmonitoringuRoznitsa(key PrimaryAccumulationRegisterSummyPoFinmonitoringuRoznitsa) error {
	return c.removeEntity(key)
}

type AccumulationRegisterSummyPoFinmonitoringuRoznitsaRecordType struct {
	Recorder         String    `json:"Recorder,omitempty"`
	Period           *DateTime `json:"Period,omitempty"`
	LineNumber       Int64     `json:"LineNumber,omitempty"`
	Active           *Boolean  `json:"Active,omitempty"`
	RecordType       *String   `json:"RecordType,omitempty"`
	KontragentKey    *Guid     `json:"Контрагент_Key,omitempty"`
	OrganizatsiiaKey *Guid     `json:"Организация_Key,omitempty"`
	SummaPokupok     *Double   `json:"СуммаПокупок,omitempty"`
	SummaSkupki      *Double   `json:"СуммаСкупки,omitempty"`
	RecorderType     String    `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterSummyPoFinmonitoringuRoznitsaRecordType) APIEntityType() string {
	return "AccumulationRegister_СуммыПоФинмониторингуРозница_RecordType"
}
func NewAccumulationRegisterSummyPoFinmonitoringuRoznitsaRecordType(data string, prevError error) (*AccumulationRegisterSummyPoFinmonitoringuRoznitsaRecordType, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterSummyPoFinmonitoringuRoznitsaRecordType)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterSummyPoFinmonitoringuRoznitsaRecordType(entity AccumulationRegisterSummyPoFinmonitoringuRoznitsaRecordType) (*AccumulationRegisterSummyPoFinmonitoringuRoznitsaRecordType, error) {
	return NewAccumulationRegisterSummyPoFinmonitoringuRoznitsaRecordType(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterSummyPoFinmonitoringuRoznitsaRecordType(key PrimaryAccumulationRegisterSummyPoFinmonitoringuRoznitsaRecordType, fields []string) (*AccumulationRegisterSummyPoFinmonitoringuRoznitsaRecordType, error) {
	return NewAccumulationRegisterSummyPoFinmonitoringuRoznitsaRecordType(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterSummyPoFinmonitoringuRoznitsaRecordTypes(where Where) (*[]AccumulationRegisterSummyPoFinmonitoringuRoznitsaRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterSummyPoFinmonitoringuRoznitsaRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_СуммыПоФинмониторингуРозница_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterSummyPoFinmonitoringuRoznitsaRecordType(key PrimaryAccumulationRegisterSummyPoFinmonitoringuRoznitsaRecordType, entity AccumulationRegisterSummyPoFinmonitoringuRoznitsaRecordType) (*AccumulationRegisterSummyPoFinmonitoringuRoznitsaRecordType, error) {
	return NewAccumulationRegisterSummyPoFinmonitoringuRoznitsaRecordType(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterSummyPoFinmonitoringuRoznitsaRecordType(key PrimaryAccumulationRegisterSummyPoFinmonitoringuRoznitsaRecordType) error {
	return c.removeEntity(key)
}

type AccumulationRegisterDenezhnyeSredstvaKPolucheniiu struct {
	Recorder     String                                                     `json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterDenezhnyeSredstvaKPolucheniiuRowType `json:"RecordSet,omitempty"`
	RecorderType String                                                     `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterDenezhnyeSredstvaKPolucheniiu) APIEntityType() string {
	return "AccumulationRegister_ДенежныеСредстваКПолучению"
}
func NewAccumulationRegisterDenezhnyeSredstvaKPolucheniiu(data string, prevError error) (*AccumulationRegisterDenezhnyeSredstvaKPolucheniiu, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterDenezhnyeSredstvaKPolucheniiu)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterDenezhnyeSredstvaKPolucheniiu(entity AccumulationRegisterDenezhnyeSredstvaKPolucheniiu) (*AccumulationRegisterDenezhnyeSredstvaKPolucheniiu, error) {
	return NewAccumulationRegisterDenezhnyeSredstvaKPolucheniiu(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterDenezhnyeSredstvaKPolucheniiu(key PrimaryAccumulationRegisterDenezhnyeSredstvaKPolucheniiu, fields []string) (*AccumulationRegisterDenezhnyeSredstvaKPolucheniiu, error) {
	return NewAccumulationRegisterDenezhnyeSredstvaKPolucheniiu(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterDenezhnyeSredstvaKPolucheniius(where Where) (*[]AccumulationRegisterDenezhnyeSredstvaKPolucheniiu, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterDenezhnyeSredstvaKPolucheniiu `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ДенежныеСредстваКПолучению", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterDenezhnyeSredstvaKPolucheniiu(key PrimaryAccumulationRegisterDenezhnyeSredstvaKPolucheniiu, entity AccumulationRegisterDenezhnyeSredstvaKPolucheniiu) (*AccumulationRegisterDenezhnyeSredstvaKPolucheniiu, error) {
	return NewAccumulationRegisterDenezhnyeSredstvaKPolucheniiu(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterDenezhnyeSredstvaKPolucheniiu(key PrimaryAccumulationRegisterDenezhnyeSredstvaKPolucheniiu) error {
	return c.removeEntity(key)
}

type AccumulationRegisterDenezhnyeSredstvaKPolucheniiuRecordType struct {
	Recorder                 String    `json:"Recorder,omitempty"`
	Period                   *DateTime `json:"Period,omitempty"`
	LineNumber               Int64     `json:"LineNumber,omitempty"`
	Active                   *Boolean  `json:"Active,omitempty"`
	RecordType               *String   `json:"RecordType,omitempty"`
	VidDenezhnykhSredstv     *String   `json:"ВидДенежныхСредств,omitempty"`
	BankovskiiSchetKassa     *String   `json:"БанковскийСчетКасса,omitempty"`
	DokumentPolucheniia      *String   `json:"ДокументПолучения,omitempty"`
	TypeOfMovingMoneyKey     *Guid     `json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	Sum                      *Double   `json:"Сумма,omitempty"`
	SummaUpr                 *Double   `json:"СуммаУпр,omitempty"`
	RecorderType             String    `json:"Recorder_Type,omitempty"`
	BankovskiiSchetKassaType *String   `json:"БанковскийСчетКасса_Type,omitempty"`
	DokumentPolucheniiaType  *String   `json:"ДокументПолучения_Type,omitempty"`
}

func (AccumulationRegisterDenezhnyeSredstvaKPolucheniiuRecordType) APIEntityType() string {
	return "AccumulationRegister_ДенежныеСредстваКПолучению_RecordType"
}
func NewAccumulationRegisterDenezhnyeSredstvaKPolucheniiuRecordType(data string, prevError error) (*AccumulationRegisterDenezhnyeSredstvaKPolucheniiuRecordType, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterDenezhnyeSredstvaKPolucheniiuRecordType)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterDenezhnyeSredstvaKPolucheniiuRecordType(entity AccumulationRegisterDenezhnyeSredstvaKPolucheniiuRecordType) (*AccumulationRegisterDenezhnyeSredstvaKPolucheniiuRecordType, error) {
	return NewAccumulationRegisterDenezhnyeSredstvaKPolucheniiuRecordType(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterDenezhnyeSredstvaKPolucheniiuRecordType(key PrimaryAccumulationRegisterDenezhnyeSredstvaKPolucheniiuRecordType, fields []string) (*AccumulationRegisterDenezhnyeSredstvaKPolucheniiuRecordType, error) {
	return NewAccumulationRegisterDenezhnyeSredstvaKPolucheniiuRecordType(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterDenezhnyeSredstvaKPolucheniiuRecordTypes(where Where) (*[]AccumulationRegisterDenezhnyeSredstvaKPolucheniiuRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterDenezhnyeSredstvaKPolucheniiuRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ДенежныеСредстваКПолучению_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterDenezhnyeSredstvaKPolucheniiuRecordType(key PrimaryAccumulationRegisterDenezhnyeSredstvaKPolucheniiuRecordType, entity AccumulationRegisterDenezhnyeSredstvaKPolucheniiuRecordType) (*AccumulationRegisterDenezhnyeSredstvaKPolucheniiuRecordType, error) {
	return NewAccumulationRegisterDenezhnyeSredstvaKPolucheniiuRecordType(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterDenezhnyeSredstvaKPolucheniiuRecordType(key PrimaryAccumulationRegisterDenezhnyeSredstvaKPolucheniiuRecordType) error {
	return c.removeEntity(key)
}

type AccumulationRegisterProdazhiPoDiskontnymKartam struct {
	Recorder     String                                                  `json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterProdazhiPoDiskontnymKartamRowType `json:"RecordSet,omitempty"`
	RecorderType String                                                  `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterProdazhiPoDiskontnymKartam) APIEntityType() string {
	return "AccumulationRegister_ПродажиПоДисконтнымКартам"
}
func NewAccumulationRegisterProdazhiPoDiskontnymKartam(data string, prevError error) (*AccumulationRegisterProdazhiPoDiskontnymKartam, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterProdazhiPoDiskontnymKartam)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterProdazhiPoDiskontnymKartam(entity AccumulationRegisterProdazhiPoDiskontnymKartam) (*AccumulationRegisterProdazhiPoDiskontnymKartam, error) {
	return NewAccumulationRegisterProdazhiPoDiskontnymKartam(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterProdazhiPoDiskontnymKartam(key PrimaryAccumulationRegisterProdazhiPoDiskontnymKartam, fields []string) (*AccumulationRegisterProdazhiPoDiskontnymKartam, error) {
	return NewAccumulationRegisterProdazhiPoDiskontnymKartam(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterProdazhiPoDiskontnymKartams(where Where) (*[]AccumulationRegisterProdazhiPoDiskontnymKartam, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterProdazhiPoDiskontnymKartam `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ПродажиПоДисконтнымКартам", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterProdazhiPoDiskontnymKartam(key PrimaryAccumulationRegisterProdazhiPoDiskontnymKartam, entity AccumulationRegisterProdazhiPoDiskontnymKartam) (*AccumulationRegisterProdazhiPoDiskontnymKartam, error) {
	return NewAccumulationRegisterProdazhiPoDiskontnymKartam(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterProdazhiPoDiskontnymKartam(key PrimaryAccumulationRegisterProdazhiPoDiskontnymKartam) error {
	return c.removeEntity(key)
}

type AccumulationRegisterProdazhiPoDiskontnymKartamRecordType struct {
	Recorder                       String    `json:"Recorder,omitempty"`
	Period                         *DateTime `json:"Period,omitempty"`
	LineNumber                     Int64     `json:"LineNumber,omitempty"`
	Active                         *Boolean  `json:"Active,omitempty"`
	MemberCardKey                  *Guid     `json:"ДисконтнаяКарта_Key,omitempty"`
	ItemKey                        *Guid     `json:"Номенклатура_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid     `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid     `json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid     `json:"СерияНоменклатуры_Key,omitempty"`
	DokumentProdazhi               *String   `json:"ДокументПродажи,omitempty"`
	Sum                            *Double   `json:"Сумма,omitempty"`
	Quantity                       *Int64    `json:"Количество,omitempty"`
	Weight                         *Double   `json:"Вес,omitempty"`
	RecorderType                   String    `json:"Recorder_Type,omitempty"`
	DokumentProdazhiType           *String   `json:"ДокументПродажи_Type,omitempty"`
}

func (AccumulationRegisterProdazhiPoDiskontnymKartamRecordType) APIEntityType() string {
	return "AccumulationRegister_ПродажиПоДисконтнымКартам_RecordType"
}
func NewAccumulationRegisterProdazhiPoDiskontnymKartamRecordType(data string, prevError error) (*AccumulationRegisterProdazhiPoDiskontnymKartamRecordType, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterProdazhiPoDiskontnymKartamRecordType)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterProdazhiPoDiskontnymKartamRecordType(entity AccumulationRegisterProdazhiPoDiskontnymKartamRecordType) (*AccumulationRegisterProdazhiPoDiskontnymKartamRecordType, error) {
	return NewAccumulationRegisterProdazhiPoDiskontnymKartamRecordType(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterProdazhiPoDiskontnymKartamRecordType(key PrimaryAccumulationRegisterProdazhiPoDiskontnymKartamRecordType, fields []string) (*AccumulationRegisterProdazhiPoDiskontnymKartamRecordType, error) {
	return NewAccumulationRegisterProdazhiPoDiskontnymKartamRecordType(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterProdazhiPoDiskontnymKartamRecordTypes(where Where) (*[]AccumulationRegisterProdazhiPoDiskontnymKartamRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterProdazhiPoDiskontnymKartamRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ПродажиПоДисконтнымКартам_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterProdazhiPoDiskontnymKartamRecordType(key PrimaryAccumulationRegisterProdazhiPoDiskontnymKartamRecordType, entity AccumulationRegisterProdazhiPoDiskontnymKartamRecordType) (*AccumulationRegisterProdazhiPoDiskontnymKartamRecordType, error) {
	return NewAccumulationRegisterProdazhiPoDiskontnymKartamRecordType(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterProdazhiPoDiskontnymKartamRecordType(key PrimaryAccumulationRegisterProdazhiPoDiskontnymKartamRecordType) error {
	return c.removeEntity(key)
}

type AccumulationRegisterTovaryPoluchennye struct {
	Recorder     String                                         `json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterTovaryPoluchennyeRowType `json:"RecordSet,omitempty"`
	RecorderType String                                         `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterTovaryPoluchennye) APIEntityType() string {
	return "AccumulationRegister_ТоварыПолученные"
}
func NewAccumulationRegisterTovaryPoluchennye(data string, prevError error) (*AccumulationRegisterTovaryPoluchennye, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterTovaryPoluchennye)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterTovaryPoluchennye(entity AccumulationRegisterTovaryPoluchennye) (*AccumulationRegisterTovaryPoluchennye, error) {
	return NewAccumulationRegisterTovaryPoluchennye(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterTovaryPoluchennye(key PrimaryAccumulationRegisterTovaryPoluchennye, fields []string) (*AccumulationRegisterTovaryPoluchennye, error) {
	return NewAccumulationRegisterTovaryPoluchennye(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterTovaryPoluchennyes(where Where) (*[]AccumulationRegisterTovaryPoluchennye, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterTovaryPoluchennye `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ТоварыПолученные", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterTovaryPoluchennye(key PrimaryAccumulationRegisterTovaryPoluchennye, entity AccumulationRegisterTovaryPoluchennye) (*AccumulationRegisterTovaryPoluchennye, error) {
	return NewAccumulationRegisterTovaryPoluchennye(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterTovaryPoluchennye(key PrimaryAccumulationRegisterTovaryPoluchennye) error {
	return c.removeEntity(key)
}

type AccumulationRegisterTovaryPoluchennyeRecordType struct {
	Recorder                       String    `json:"Recorder,omitempty"`
	Period                         *DateTime `json:"Period,omitempty"`
	LineNumber                     Int64     `json:"LineNumber,omitempty"`
	Active                         *Boolean  `json:"Active,omitempty"`
	RecordType                     *String   `json:"RecordType,omitempty"`
	ItemKey                        *Guid     `json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid     `json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid     `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid     `json:"Размер_Key,omitempty"`
	DogovorKontragentaKey          *Guid     `json:"ДоговорКонтрагента_Key,omitempty"`
	Sdelka                         *String   `json:"Сделка,omitempty"`
	Quantity                       *Int64    `json:"Количество,omitempty"`
	Weight                         *Double   `json:"Вес,omitempty"`
	SummaVzaimoraschetov           *Double   `json:"СуммаВзаиморасчетов,omitempty"`
	RecorderType                   String    `json:"Recorder_Type,omitempty"`
	SdelkaType                     *String   `json:"Сделка_Type,omitempty"`
}

func (AccumulationRegisterTovaryPoluchennyeRecordType) APIEntityType() string {
	return "AccumulationRegister_ТоварыПолученные_RecordType"
}
func NewAccumulationRegisterTovaryPoluchennyeRecordType(data string, prevError error) (*AccumulationRegisterTovaryPoluchennyeRecordType, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterTovaryPoluchennyeRecordType)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterTovaryPoluchennyeRecordType(entity AccumulationRegisterTovaryPoluchennyeRecordType) (*AccumulationRegisterTovaryPoluchennyeRecordType, error) {
	return NewAccumulationRegisterTovaryPoluchennyeRecordType(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterTovaryPoluchennyeRecordType(key PrimaryAccumulationRegisterTovaryPoluchennyeRecordType, fields []string) (*AccumulationRegisterTovaryPoluchennyeRecordType, error) {
	return NewAccumulationRegisterTovaryPoluchennyeRecordType(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterTovaryPoluchennyeRecordTypes(where Where) (*[]AccumulationRegisterTovaryPoluchennyeRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterTovaryPoluchennyeRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ТоварыПолученные_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterTovaryPoluchennyeRecordType(key PrimaryAccumulationRegisterTovaryPoluchennyeRecordType, entity AccumulationRegisterTovaryPoluchennyeRecordType) (*AccumulationRegisterTovaryPoluchennyeRecordType, error) {
	return NewAccumulationRegisterTovaryPoluchennyeRecordType(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterTovaryPoluchennyeRecordType(key PrimaryAccumulationRegisterTovaryPoluchennyeRecordType) error {
	return c.removeEntity(key)
}

type AccumulationRegisterSvobodnyeOstatki struct {
	Recorder     String                                        `json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterSvobodnyeOstatkiRowType `json:"RecordSet,omitempty"`
	RecorderType String                                        `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterSvobodnyeOstatki) APIEntityType() string {
	return "AccumulationRegister_СвободныеОстатки"
}
func NewAccumulationRegisterSvobodnyeOstatki(data string, prevError error) (*AccumulationRegisterSvobodnyeOstatki, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterSvobodnyeOstatki)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterSvobodnyeOstatki(entity AccumulationRegisterSvobodnyeOstatki) (*AccumulationRegisterSvobodnyeOstatki, error) {
	return NewAccumulationRegisterSvobodnyeOstatki(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterSvobodnyeOstatki(key PrimaryAccumulationRegisterSvobodnyeOstatki, fields []string) (*AccumulationRegisterSvobodnyeOstatki, error) {
	return NewAccumulationRegisterSvobodnyeOstatki(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterSvobodnyeOstatkis(where Where) (*[]AccumulationRegisterSvobodnyeOstatki, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterSvobodnyeOstatki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_СвободныеОстатки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterSvobodnyeOstatki(key PrimaryAccumulationRegisterSvobodnyeOstatki, entity AccumulationRegisterSvobodnyeOstatki) (*AccumulationRegisterSvobodnyeOstatki, error) {
	return NewAccumulationRegisterSvobodnyeOstatki(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterSvobodnyeOstatki(key PrimaryAccumulationRegisterSvobodnyeOstatki) error {
	return c.removeEntity(key)
}

type AccumulationRegisterSvobodnyeOstatkiRecordType struct {
	Recorder      String    `json:"Recorder,omitempty"`
	Period        *DateTime `json:"Period,omitempty"`
	LineNumber    Int64     `json:"LineNumber,omitempty"`
	Active        *Boolean  `json:"Active,omitempty"`
	RecordType    *String   `json:"RecordType,omitempty"`
	ItemKey       *Guid     `json:"Номенклатура_Key,omitempty"`
	SizeKey       *Guid     `json:"Размер_Key,omitempty"`
	DepartmentKey *Guid     `json:"Склад_Key,omitempty"`
	VNalichii     *Int64    `json:"ВНаличии,omitempty"`
	VRezerve      *Int64    `json:"ВРезерве,omitempty"`
	RecorderType  String    `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterSvobodnyeOstatkiRecordType) APIEntityType() string {
	return "AccumulationRegister_СвободныеОстатки_RecordType"
}
func NewAccumulationRegisterSvobodnyeOstatkiRecordType(data string, prevError error) (*AccumulationRegisterSvobodnyeOstatkiRecordType, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterSvobodnyeOstatkiRecordType)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterSvobodnyeOstatkiRecordType(entity AccumulationRegisterSvobodnyeOstatkiRecordType) (*AccumulationRegisterSvobodnyeOstatkiRecordType, error) {
	return NewAccumulationRegisterSvobodnyeOstatkiRecordType(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterSvobodnyeOstatkiRecordType(key PrimaryAccumulationRegisterSvobodnyeOstatkiRecordType, fields []string) (*AccumulationRegisterSvobodnyeOstatkiRecordType, error) {
	return NewAccumulationRegisterSvobodnyeOstatkiRecordType(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterSvobodnyeOstatkiRecordTypes(where Where) (*[]AccumulationRegisterSvobodnyeOstatkiRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterSvobodnyeOstatkiRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_СвободныеОстатки_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterSvobodnyeOstatkiRecordType(key PrimaryAccumulationRegisterSvobodnyeOstatkiRecordType, entity AccumulationRegisterSvobodnyeOstatkiRecordType) (*AccumulationRegisterSvobodnyeOstatkiRecordType, error) {
	return NewAccumulationRegisterSvobodnyeOstatkiRecordType(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterSvobodnyeOstatkiRecordType(key PrimaryAccumulationRegisterSvobodnyeOstatkiRecordType) error {
	return c.removeEntity(key)
}

type AccumulationRegisterSummyVRassrochku struct {
	Recorder     String                                        `json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterSummyVRassrochkuRowType `json:"RecordSet,omitempty"`
	RecorderType String                                        `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterSummyVRassrochku) APIEntityType() string {
	return "AccumulationRegister_СуммыВРассрочку"
}
func NewAccumulationRegisterSummyVRassrochku(data string, prevError error) (*AccumulationRegisterSummyVRassrochku, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterSummyVRassrochku)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterSummyVRassrochku(entity AccumulationRegisterSummyVRassrochku) (*AccumulationRegisterSummyVRassrochku, error) {
	return NewAccumulationRegisterSummyVRassrochku(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterSummyVRassrochku(key PrimaryAccumulationRegisterSummyVRassrochku, fields []string) (*AccumulationRegisterSummyVRassrochku, error) {
	return NewAccumulationRegisterSummyVRassrochku(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterSummyVRassrochkus(where Where) (*[]AccumulationRegisterSummyVRassrochku, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterSummyVRassrochku `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_СуммыВРассрочку", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterSummyVRassrochku(key PrimaryAccumulationRegisterSummyVRassrochku, entity AccumulationRegisterSummyVRassrochku) (*AccumulationRegisterSummyVRassrochku, error) {
	return NewAccumulationRegisterSummyVRassrochku(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterSummyVRassrochku(key PrimaryAccumulationRegisterSummyVRassrochku) error {
	return c.removeEntity(key)
}

type AccumulationRegisterSummyVRassrochkuRecordType struct {
	Recorder             String    `json:"Recorder,omitempty"`
	Period               *DateTime `json:"Period,omitempty"`
	LineNumber           Int64     `json:"LineNumber,omitempty"`
	Active               *Boolean  `json:"Active,omitempty"`
	RecordType           *String   `json:"RecordType,omitempty"`
	OrganizatsiiaKey     *Guid     `json:"Организация_Key,omitempty"`
	DogovorRassrochkiKey *Guid     `json:"ДоговорРассрочки_Key,omitempty"`
	SostavStrokiChekaKey *Guid     `json:"СоставСтрокиЧека_Key,omitempty"`
	Sum                  *Double   `json:"Сумма,omitempty"`
	SummaNDS             *Double   `json:"СуммаНДС,omitempty"`
	RecorderType         String    `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterSummyVRassrochkuRecordType) APIEntityType() string {
	return "AccumulationRegister_СуммыВРассрочку_RecordType"
}
func NewAccumulationRegisterSummyVRassrochkuRecordType(data string, prevError error) (*AccumulationRegisterSummyVRassrochkuRecordType, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterSummyVRassrochkuRecordType)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterSummyVRassrochkuRecordType(entity AccumulationRegisterSummyVRassrochkuRecordType) (*AccumulationRegisterSummyVRassrochkuRecordType, error) {
	return NewAccumulationRegisterSummyVRassrochkuRecordType(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterSummyVRassrochkuRecordType(key PrimaryAccumulationRegisterSummyVRassrochkuRecordType, fields []string) (*AccumulationRegisterSummyVRassrochkuRecordType, error) {
	return NewAccumulationRegisterSummyVRassrochkuRecordType(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterSummyVRassrochkuRecordTypes(where Where) (*[]AccumulationRegisterSummyVRassrochkuRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterSummyVRassrochkuRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_СуммыВРассрочку_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterSummyVRassrochkuRecordType(key PrimaryAccumulationRegisterSummyVRassrochkuRecordType, entity AccumulationRegisterSummyVRassrochkuRecordType) (*AccumulationRegisterSummyVRassrochkuRecordType, error) {
	return NewAccumulationRegisterSummyVRassrochkuRecordType(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterSummyVRassrochkuRecordType(key PrimaryAccumulationRegisterSummyVRassrochkuRecordType) error {
	return c.removeEntity(key)
}

type AccumulationRegisterGrafikPlatezhei struct {
	Recorder     String                                       `json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterGrafikPlatezheiRowType `json:"RecordSet,omitempty"`
	RecorderType String                                       `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterGrafikPlatezhei) APIEntityType() string {
	return "AccumulationRegister_ГрафикПлатежей"
}
func NewAccumulationRegisterGrafikPlatezhei(data string, prevError error) (*AccumulationRegisterGrafikPlatezhei, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterGrafikPlatezhei)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterGrafikPlatezhei(entity AccumulationRegisterGrafikPlatezhei) (*AccumulationRegisterGrafikPlatezhei, error) {
	return NewAccumulationRegisterGrafikPlatezhei(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterGrafikPlatezhei(key PrimaryAccumulationRegisterGrafikPlatezhei, fields []string) (*AccumulationRegisterGrafikPlatezhei, error) {
	return NewAccumulationRegisterGrafikPlatezhei(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterGrafikPlatezheis(where Where) (*[]AccumulationRegisterGrafikPlatezhei, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterGrafikPlatezhei `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ГрафикПлатежей", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterGrafikPlatezhei(key PrimaryAccumulationRegisterGrafikPlatezhei, entity AccumulationRegisterGrafikPlatezhei) (*AccumulationRegisterGrafikPlatezhei, error) {
	return NewAccumulationRegisterGrafikPlatezhei(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterGrafikPlatezhei(key PrimaryAccumulationRegisterGrafikPlatezhei) error {
	return c.removeEntity(key)
}

type AccumulationRegisterGrafikPlatezheiRecordType struct {
	Recorder               String    `json:"Recorder,omitempty"`
	Period                 *DateTime `json:"Period,omitempty"`
	LineNumber             Int64     `json:"LineNumber,omitempty"`
	Active                 *Boolean  `json:"Active,omitempty"`
	RecordType             *String   `json:"RecordType,omitempty"`
	OrganizatsiiaKey       *Guid     `json:"Организация_Key,omitempty"`
	DogovorKontragentaKey  *Guid     `json:"ДоговорКонтрагента_Key,omitempty"`
	VidDogovoraKontragenta *String   `json:"ВидДоговораКонтрагента,omitempty"`
	DataDolga              *DateTime `json:"ДатаДолга,omitempty"`
	Oplacheno              *Double   `json:"Оплачено,omitempty"`
	NachislenDolg          *Double   `json:"НачисленДолг,omitempty"`
	Dolg                   *Double   `json:"Долг,omitempty"`
	Avans                  *Double   `json:"Аванс,omitempty"`
	OplachenoUpr           *Int64    `json:"ОплаченоУпр,omitempty"`
	NachislenDolgUpr       *Double   `json:"НачисленДолгУпр,omitempty"`
	DolgUpr                *Double   `json:"ДолгУпр,omitempty"`
	AvansUpr               *Double   `json:"АвансУпр,omitempty"`
	RecorderType           String    `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterGrafikPlatezheiRecordType) APIEntityType() string {
	return "AccumulationRegister_ГрафикПлатежей_RecordType"
}
func NewAccumulationRegisterGrafikPlatezheiRecordType(data string, prevError error) (*AccumulationRegisterGrafikPlatezheiRecordType, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterGrafikPlatezheiRecordType)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterGrafikPlatezheiRecordType(entity AccumulationRegisterGrafikPlatezheiRecordType) (*AccumulationRegisterGrafikPlatezheiRecordType, error) {
	return NewAccumulationRegisterGrafikPlatezheiRecordType(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterGrafikPlatezheiRecordType(key PrimaryAccumulationRegisterGrafikPlatezheiRecordType, fields []string) (*AccumulationRegisterGrafikPlatezheiRecordType, error) {
	return NewAccumulationRegisterGrafikPlatezheiRecordType(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterGrafikPlatezheiRecordTypes(where Where) (*[]AccumulationRegisterGrafikPlatezheiRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterGrafikPlatezheiRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ГрафикПлатежей_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterGrafikPlatezheiRecordType(key PrimaryAccumulationRegisterGrafikPlatezheiRecordType, entity AccumulationRegisterGrafikPlatezheiRecordType) (*AccumulationRegisterGrafikPlatezheiRecordType, error) {
	return NewAccumulationRegisterGrafikPlatezheiRecordType(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterGrafikPlatezheiRecordType(key PrimaryAccumulationRegisterGrafikPlatezheiRecordType) error {
	return c.removeEntity(key)
}

type AccumulationRegisterRoznichnaiaVyruchka struct {
	Recorder     String                                           `json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterRoznichnaiaVyruchkaRowType `json:"RecordSet,omitempty"`
	RecorderType String                                           `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterRoznichnaiaVyruchka) APIEntityType() string {
	return "AccumulationRegister_РозничнаяВыручка"
}
func NewAccumulationRegisterRoznichnaiaVyruchka(data string, prevError error) (*AccumulationRegisterRoznichnaiaVyruchka, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterRoznichnaiaVyruchka)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterRoznichnaiaVyruchka(entity AccumulationRegisterRoznichnaiaVyruchka) (*AccumulationRegisterRoznichnaiaVyruchka, error) {
	return NewAccumulationRegisterRoznichnaiaVyruchka(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterRoznichnaiaVyruchka(key PrimaryAccumulationRegisterRoznichnaiaVyruchka, fields []string) (*AccumulationRegisterRoznichnaiaVyruchka, error) {
	return NewAccumulationRegisterRoznichnaiaVyruchka(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterRoznichnaiaVyruchkas(where Where) (*[]AccumulationRegisterRoznichnaiaVyruchka, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterRoznichnaiaVyruchka `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_РозничнаяВыручка", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterRoznichnaiaVyruchka(key PrimaryAccumulationRegisterRoznichnaiaVyruchka, entity AccumulationRegisterRoznichnaiaVyruchka) (*AccumulationRegisterRoznichnaiaVyruchka, error) {
	return NewAccumulationRegisterRoznichnaiaVyruchka(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterRoznichnaiaVyruchka(key PrimaryAccumulationRegisterRoznichnaiaVyruchka) error {
	return c.removeEntity(key)
}

type AccumulationRegisterRoznichnaiaVyruchkaRecordType struct {
	Recorder              String    `json:"Recorder,omitempty"`
	Period                *DateTime `json:"Period,omitempty"`
	LineNumber            Int64     `json:"LineNumber,omitempty"`
	Active                *Boolean  `json:"Active,omitempty"`
	RecordType            *String   `json:"RecordType,omitempty"`
	RoznichnaiaTochka     *String   `json:"РозничнаяТочка,omitempty"`
	Sum                   *Double   `json:"Сумма,omitempty"`
	PodrazdelenieKey      *Guid     `json:"Подразделение_Key,omitempty"`
	RecorderType          String    `json:"Recorder_Type,omitempty"`
	RoznichnaiaTochkaType *String   `json:"РозничнаяТочка_Type,omitempty"`
}

func (AccumulationRegisterRoznichnaiaVyruchkaRecordType) APIEntityType() string {
	return "AccumulationRegister_РозничнаяВыручка_RecordType"
}
func NewAccumulationRegisterRoznichnaiaVyruchkaRecordType(data string, prevError error) (*AccumulationRegisterRoznichnaiaVyruchkaRecordType, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterRoznichnaiaVyruchkaRecordType)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterRoznichnaiaVyruchkaRecordType(entity AccumulationRegisterRoznichnaiaVyruchkaRecordType) (*AccumulationRegisterRoznichnaiaVyruchkaRecordType, error) {
	return NewAccumulationRegisterRoznichnaiaVyruchkaRecordType(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterRoznichnaiaVyruchkaRecordType(key PrimaryAccumulationRegisterRoznichnaiaVyruchkaRecordType, fields []string) (*AccumulationRegisterRoznichnaiaVyruchkaRecordType, error) {
	return NewAccumulationRegisterRoznichnaiaVyruchkaRecordType(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterRoznichnaiaVyruchkaRecordTypes(where Where) (*[]AccumulationRegisterRoznichnaiaVyruchkaRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterRoznichnaiaVyruchkaRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_РозничнаяВыручка_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterRoznichnaiaVyruchkaRecordType(key PrimaryAccumulationRegisterRoznichnaiaVyruchkaRecordType, entity AccumulationRegisterRoznichnaiaVyruchkaRecordType) (*AccumulationRegisterRoznichnaiaVyruchkaRecordType, error) {
	return NewAccumulationRegisterRoznichnaiaVyruchkaRecordType(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterRoznichnaiaVyruchkaRecordType(key PrimaryAccumulationRegisterRoznichnaiaVyruchkaRecordType) error {
	return c.removeEntity(key)
}

type AccumulationRegisterTovaryVPuti struct {
	Recorder     String                                   `json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterTovaryVPutiRowType `json:"RecordSet,omitempty"`
	RecorderType String                                   `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterTovaryVPuti) APIEntityType() string {
	return "AccumulationRegister_ТоварыВПути"
}
func NewAccumulationRegisterTovaryVPuti(data string, prevError error) (*AccumulationRegisterTovaryVPuti, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterTovaryVPuti)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterTovaryVPuti(entity AccumulationRegisterTovaryVPuti) (*AccumulationRegisterTovaryVPuti, error) {
	return NewAccumulationRegisterTovaryVPuti(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterTovaryVPuti(key PrimaryAccumulationRegisterTovaryVPuti, fields []string) (*AccumulationRegisterTovaryVPuti, error) {
	return NewAccumulationRegisterTovaryVPuti(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterTovaryVPutis(where Where) (*[]AccumulationRegisterTovaryVPuti, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterTovaryVPuti `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ТоварыВПути", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterTovaryVPuti(key PrimaryAccumulationRegisterTovaryVPuti, entity AccumulationRegisterTovaryVPuti) (*AccumulationRegisterTovaryVPuti, error) {
	return NewAccumulationRegisterTovaryVPuti(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterTovaryVPuti(key PrimaryAccumulationRegisterTovaryVPuti) error {
	return c.removeEntity(key)
}

type AccumulationRegisterTovaryVPutiRecordType struct {
	Recorder                       String    `json:"Recorder,omitempty"`
	Period                         *DateTime `json:"Period,omitempty"`
	LineNumber                     Int64     `json:"LineNumber,omitempty"`
	Active                         *Boolean  `json:"Active,omitempty"`
	RecordType                     *String   `json:"RecordType,omitempty"`
	ItemKey                        *Guid     `json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid     `json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid     `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid     `json:"Размер_Key,omitempty"`
	OrganizatsiiaKey               *Guid     `json:"Организация_Key,omitempty"`
	DepartmentKey                  *Guid     `json:"Склад_Key,omitempty"`
	DogovorKontragentaKey          *Guid     `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOprikhodovaniia        *String   `json:"ДокументОприходования,omitempty"`
	Quantity                       *Int64    `json:"Количество,omitempty"`
	Weight                         *Double   `json:"Вес,omitempty"`
	RecorderType                   String    `json:"Recorder_Type,omitempty"`
	DokumentOprikhodovaniiaType    *String   `json:"ДокументОприходования_Type,omitempty"`
}

func (AccumulationRegisterTovaryVPutiRecordType) APIEntityType() string {
	return "AccumulationRegister_ТоварыВПути_RecordType"
}
func NewAccumulationRegisterTovaryVPutiRecordType(data string, prevError error) (*AccumulationRegisterTovaryVPutiRecordType, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterTovaryVPutiRecordType)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterTovaryVPutiRecordType(entity AccumulationRegisterTovaryVPutiRecordType) (*AccumulationRegisterTovaryVPutiRecordType, error) {
	return NewAccumulationRegisterTovaryVPutiRecordType(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterTovaryVPutiRecordType(key PrimaryAccumulationRegisterTovaryVPutiRecordType, fields []string) (*AccumulationRegisterTovaryVPutiRecordType, error) {
	return NewAccumulationRegisterTovaryVPutiRecordType(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterTovaryVPutiRecordTypes(where Where) (*[]AccumulationRegisterTovaryVPutiRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterTovaryVPutiRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ТоварыВПути_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterTovaryVPutiRecordType(key PrimaryAccumulationRegisterTovaryVPutiRecordType, entity AccumulationRegisterTovaryVPutiRecordType) (*AccumulationRegisterTovaryVPutiRecordType, error) {
	return NewAccumulationRegisterTovaryVPutiRecordType(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterTovaryVPutiRecordType(key PrimaryAccumulationRegisterTovaryVPutiRecordType) error {
	return c.removeEntity(key)
}

type AccumulationRegisterPoteriMetallaVProizvodstve struct {
	Recorder     String                                                  `json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterPoteriMetallaVProizvodstveRowType `json:"RecordSet,omitempty"`
	RecorderType String                                                  `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterPoteriMetallaVProizvodstve) APIEntityType() string {
	return "AccumulationRegister_ПотериМеталлаВПроизводстве"
}
func NewAccumulationRegisterPoteriMetallaVProizvodstve(data string, prevError error) (*AccumulationRegisterPoteriMetallaVProizvodstve, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterPoteriMetallaVProizvodstve)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterPoteriMetallaVProizvodstve(entity AccumulationRegisterPoteriMetallaVProizvodstve) (*AccumulationRegisterPoteriMetallaVProizvodstve, error) {
	return NewAccumulationRegisterPoteriMetallaVProizvodstve(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterPoteriMetallaVProizvodstve(key PrimaryAccumulationRegisterPoteriMetallaVProizvodstve, fields []string) (*AccumulationRegisterPoteriMetallaVProizvodstve, error) {
	return NewAccumulationRegisterPoteriMetallaVProizvodstve(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterPoteriMetallaVProizvodstves(where Where) (*[]AccumulationRegisterPoteriMetallaVProizvodstve, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterPoteriMetallaVProizvodstve `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ПотериМеталлаВПроизводстве", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterPoteriMetallaVProizvodstve(key PrimaryAccumulationRegisterPoteriMetallaVProizvodstve, entity AccumulationRegisterPoteriMetallaVProizvodstve) (*AccumulationRegisterPoteriMetallaVProizvodstve, error) {
	return NewAccumulationRegisterPoteriMetallaVProizvodstve(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterPoteriMetallaVProizvodstve(key PrimaryAccumulationRegisterPoteriMetallaVProizvodstve) error {
	return c.removeEntity(key)
}

type AccumulationRegisterPoteriMetallaVProizvodstveRecordType struct {
	Recorder                    String    `json:"Recorder,omitempty"`
	Period                      *DateTime `json:"Period,omitempty"`
	LineNumber                  Int64     `json:"LineNumber,omitempty"`
	Active                      *Boolean  `json:"Active,omitempty"`
	OrganizatsiiaKey            *Guid     `json:"Организация_Key,omitempty"`
	DogovorKontragentaKey       *Guid     `json:"ДоговорКонтрагента_Key,omitempty"`
	Nomenklatura                *String   `json:"Номенклатура,omitempty"`
	DokumentOprikhodovaniia     *String   `json:"ДокументОприходования,omitempty"`
	VesPoter                    *Double   `json:"ВесПотерь,omitempty"`
	RecorderType                String    `json:"Recorder_Type,omitempty"`
	ItemType                    *String   `json:"Номенклатура_Type,omitempty"`
	DokumentOprikhodovaniiaType *String   `json:"ДокументОприходования_Type,omitempty"`
}

func (AccumulationRegisterPoteriMetallaVProizvodstveRecordType) APIEntityType() string {
	return "AccumulationRegister_ПотериМеталлаВПроизводстве_RecordType"
}
func NewAccumulationRegisterPoteriMetallaVProizvodstveRecordType(data string, prevError error) (*AccumulationRegisterPoteriMetallaVProizvodstveRecordType, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterPoteriMetallaVProizvodstveRecordType)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterPoteriMetallaVProizvodstveRecordType(entity AccumulationRegisterPoteriMetallaVProizvodstveRecordType) (*AccumulationRegisterPoteriMetallaVProizvodstveRecordType, error) {
	return NewAccumulationRegisterPoteriMetallaVProizvodstveRecordType(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterPoteriMetallaVProizvodstveRecordType(key PrimaryAccumulationRegisterPoteriMetallaVProizvodstveRecordType, fields []string) (*AccumulationRegisterPoteriMetallaVProizvodstveRecordType, error) {
	return NewAccumulationRegisterPoteriMetallaVProizvodstveRecordType(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterPoteriMetallaVProizvodstveRecordTypes(where Where) (*[]AccumulationRegisterPoteriMetallaVProizvodstveRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterPoteriMetallaVProizvodstveRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ПотериМеталлаВПроизводстве_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterPoteriMetallaVProizvodstveRecordType(key PrimaryAccumulationRegisterPoteriMetallaVProizvodstveRecordType, entity AccumulationRegisterPoteriMetallaVProizvodstveRecordType) (*AccumulationRegisterPoteriMetallaVProizvodstveRecordType, error) {
	return NewAccumulationRegisterPoteriMetallaVProizvodstveRecordType(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterPoteriMetallaVProizvodstveRecordType(key PrimaryAccumulationRegisterPoteriMetallaVProizvodstveRecordType) error {
	return c.removeEntity(key)
}

type AccumulationRegisterPartiiTovarovNaSkladakh struct {
	Recorder     String                                               `json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterPartiiTovarovNaSkladakhRowType `json:"RecordSet,omitempty"`
	RecorderType String                                               `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterPartiiTovarovNaSkladakh) APIEntityType() string {
	return "AccumulationRegister_ПартииТоваровНаСкладах"
}
func NewAccumulationRegisterPartiiTovarovNaSkladakh(data string, prevError error) (*AccumulationRegisterPartiiTovarovNaSkladakh, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterPartiiTovarovNaSkladakh)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterPartiiTovarovNaSkladakh(entity AccumulationRegisterPartiiTovarovNaSkladakh) (*AccumulationRegisterPartiiTovarovNaSkladakh, error) {
	return NewAccumulationRegisterPartiiTovarovNaSkladakh(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterPartiiTovarovNaSkladakh(key PrimaryAccumulationRegisterPartiiTovarovNaSkladakh, fields []string) (*AccumulationRegisterPartiiTovarovNaSkladakh, error) {
	return NewAccumulationRegisterPartiiTovarovNaSkladakh(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterPartiiTovarovNaSkladakhs(where Where) (*[]AccumulationRegisterPartiiTovarovNaSkladakh, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterPartiiTovarovNaSkladakh `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ПартииТоваровНаСкладах", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterPartiiTovarovNaSkladakh(key PrimaryAccumulationRegisterPartiiTovarovNaSkladakh, entity AccumulationRegisterPartiiTovarovNaSkladakh) (*AccumulationRegisterPartiiTovarovNaSkladakh, error) {
	return NewAccumulationRegisterPartiiTovarovNaSkladakh(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterPartiiTovarovNaSkladakh(key PrimaryAccumulationRegisterPartiiTovarovNaSkladakh) error {
	return c.removeEntity(key)
}

type ProductActionDocument struct {
	Recorder                       String    `json:"Recorder,omitempty"`
	Period                         *DateTime `json:"Period,omitempty"`
	LineNumber                     Int64     `json:"LineNumber,omitempty"`
	Active                         *Boolean  `json:"Active,omitempty"`
	RecordType                     *String   `json:"RecordType,omitempty"`
	ItemKey                        *Guid     `json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid     `json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid     `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid     `json:"Размер_Key,omitempty"`
	OrganizatsiiaKey               *Guid     `json:"Организация_Key,omitempty"`
	DepartmentKey                  *Guid     `json:"Склад_Key,omitempty"`
	DokumentOprikhodovaniia        *String   `json:"ДокументОприходования,omitempty"`
	StatusPartii                   *String   `json:"СтатусПартии,omitempty"`
	KachestvoKey                   *Guid     `json:"Качество_Key,omitempty"`
	Quantity                       *Int64    `json:"Количество,omitempty"`
	Weight                         *Double   `json:"Вес,omitempty"`
	Cost                           *Double   `json:"Стоимость,omitempty"`
	StoimostUpr                    *Double   `json:"СтоимостьУпр,omitempty"`
	StoimostBezNDS                 *Double   `json:"СтоимостьБезНДС,omitempty"`
	OperationCode                  *String   `json:"КодОперации,omitempty"`
	SpisaniePartii                 *Boolean  `json:"СписаниеПартий,omitempty"`
	NomerKorStroki                 *Int64    `json:"НомерКорСтроки,omitempty"`
	RecorderType                   String    `json:"Recorder_Type,omitempty"`
	DokumentOprikhodovaniiaType    *String   `json:"ДокументОприходования_Type,omitempty"`
}

func (ProductActionDocument) APIEntityType() string {
	return "AccumulationRegister_ПартииТоваровНаСкладах_RecordType"
}
func NewProductActionDocument(data string, prevError error) (*ProductActionDocument, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(ProductActionDocument)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateProductActionDocument(entity ProductActionDocument) (*ProductActionDocument, error) {
	return NewProductActionDocument(c.createEntity(entity))
}
func (c *Client) ProductActionDocument(key PrimaryProductActionDocument, fields []string) (*ProductActionDocument, error) {
	return NewProductActionDocument(c.getEntity(key, fields))
}
func (c *Client) ProductActionDocuments(where Where) (*[]ProductActionDocument, error) {
	type ReturnObj struct {
		Value []ProductActionDocument `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ПартииТоваровНаСкладах_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateProductActionDocument(key PrimaryProductActionDocument, entity ProductActionDocument) (*ProductActionDocument, error) {
	return NewProductActionDocument(c.updateEntity(key, entity))
}
func (c *Client) DeleteProductActionDocument(key PrimaryProductActionDocument) error {
	return c.removeEntity(key)
}

type AccumulationRegisterSummyDokumentovDliaObmena struct {
	Recorder     String                                                 `json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterSummyDokumentovDliaObmenaRowType `json:"RecordSet,omitempty"`
	RecorderType String                                                 `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterSummyDokumentovDliaObmena) APIEntityType() string {
	return "AccumulationRegister_СуммыДокументовДляОбмена"
}
func NewAccumulationRegisterSummyDokumentovDliaObmena(data string, prevError error) (*AccumulationRegisterSummyDokumentovDliaObmena, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterSummyDokumentovDliaObmena)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterSummyDokumentovDliaObmena(entity AccumulationRegisterSummyDokumentovDliaObmena) (*AccumulationRegisterSummyDokumentovDliaObmena, error) {
	return NewAccumulationRegisterSummyDokumentovDliaObmena(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterSummyDokumentovDliaObmena(key PrimaryAccumulationRegisterSummyDokumentovDliaObmena, fields []string) (*AccumulationRegisterSummyDokumentovDliaObmena, error) {
	return NewAccumulationRegisterSummyDokumentovDliaObmena(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterSummyDokumentovDliaObmenas(where Where) (*[]AccumulationRegisterSummyDokumentovDliaObmena, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterSummyDokumentovDliaObmena `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_СуммыДокументовДляОбмена", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterSummyDokumentovDliaObmena(key PrimaryAccumulationRegisterSummyDokumentovDliaObmena, entity AccumulationRegisterSummyDokumentovDliaObmena) (*AccumulationRegisterSummyDokumentovDliaObmena, error) {
	return NewAccumulationRegisterSummyDokumentovDliaObmena(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterSummyDokumentovDliaObmena(key PrimaryAccumulationRegisterSummyDokumentovDliaObmena) error {
	return c.removeEntity(key)
}

type AccumulationRegisterSummyDokumentovDliaObmenaRecordType struct {
	Recorder         String    `json:"Recorder,omitempty"`
	Period           *DateTime `json:"Period,omitempty"`
	LineNumber       Int64     `json:"LineNumber,omitempty"`
	Active           *Boolean  `json:"Active,omitempty"`
	RecordType       *String   `json:"RecordType,omitempty"`
	OrganizatsiiaKey *Guid     `json:"Организация_Key,omitempty"`
	DepartmentKey    *Guid     `json:"Склад_Key,omitempty"`
	DokumentKey      *Guid     `json:"Документ_Key,omitempty"`
	Sum              *Double   `json:"Сумма,omitempty"`
	RecorderType     String    `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterSummyDokumentovDliaObmenaRecordType) APIEntityType() string {
	return "AccumulationRegister_СуммыДокументовДляОбмена_RecordType"
}
func NewAccumulationRegisterSummyDokumentovDliaObmenaRecordType(data string, prevError error) (*AccumulationRegisterSummyDokumentovDliaObmenaRecordType, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterSummyDokumentovDliaObmenaRecordType)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterSummyDokumentovDliaObmenaRecordType(entity AccumulationRegisterSummyDokumentovDliaObmenaRecordType) (*AccumulationRegisterSummyDokumentovDliaObmenaRecordType, error) {
	return NewAccumulationRegisterSummyDokumentovDliaObmenaRecordType(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterSummyDokumentovDliaObmenaRecordType(key PrimaryAccumulationRegisterSummyDokumentovDliaObmenaRecordType, fields []string) (*AccumulationRegisterSummyDokumentovDliaObmenaRecordType, error) {
	return NewAccumulationRegisterSummyDokumentovDliaObmenaRecordType(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterSummyDokumentovDliaObmenaRecordTypes(where Where) (*[]AccumulationRegisterSummyDokumentovDliaObmenaRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterSummyDokumentovDliaObmenaRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_СуммыДокументовДляОбмена_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterSummyDokumentovDliaObmenaRecordType(key PrimaryAccumulationRegisterSummyDokumentovDliaObmenaRecordType, entity AccumulationRegisterSummyDokumentovDliaObmenaRecordType) (*AccumulationRegisterSummyDokumentovDliaObmenaRecordType, error) {
	return NewAccumulationRegisterSummyDokumentovDliaObmenaRecordType(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterSummyDokumentovDliaObmenaRecordType(key PrimaryAccumulationRegisterSummyDokumentovDliaObmenaRecordType) error {
	return c.removeEntity(key)
}

type AccumulationRegisterDvizheniiaDenezhnykhSredstv struct {
	Recorder     String                                                   `json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterDvizheniiaDenezhnykhSredstvRowType `json:"RecordSet,omitempty"`
	RecorderType String                                                   `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterDvizheniiaDenezhnykhSredstv) APIEntityType() string {
	return "AccumulationRegister_ДвиженияДенежныхСредств"
}
func NewAccumulationRegisterDvizheniiaDenezhnykhSredstv(data string, prevError error) (*AccumulationRegisterDvizheniiaDenezhnykhSredstv, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterDvizheniiaDenezhnykhSredstv)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterDvizheniiaDenezhnykhSredstv(entity AccumulationRegisterDvizheniiaDenezhnykhSredstv) (*AccumulationRegisterDvizheniiaDenezhnykhSredstv, error) {
	return NewAccumulationRegisterDvizheniiaDenezhnykhSredstv(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterDvizheniiaDenezhnykhSredstv(key PrimaryAccumulationRegisterDvizheniiaDenezhnykhSredstv, fields []string) (*AccumulationRegisterDvizheniiaDenezhnykhSredstv, error) {
	return NewAccumulationRegisterDvizheniiaDenezhnykhSredstv(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterDvizheniiaDenezhnykhSredstvs(where Where) (*[]AccumulationRegisterDvizheniiaDenezhnykhSredstv, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterDvizheniiaDenezhnykhSredstv `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ДвиженияДенежныхСредств", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterDvizheniiaDenezhnykhSredstv(key PrimaryAccumulationRegisterDvizheniiaDenezhnykhSredstv, entity AccumulationRegisterDvizheniiaDenezhnykhSredstv) (*AccumulationRegisterDvizheniiaDenezhnykhSredstv, error) {
	return NewAccumulationRegisterDvizheniiaDenezhnykhSredstv(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterDvizheniiaDenezhnykhSredstv(key PrimaryAccumulationRegisterDvizheniiaDenezhnykhSredstv) error {
	return c.removeEntity(key)
}

type AccumulationRegisterDvizheniiaDenezhnykhSredstvRecordType struct {
	Recorder                          String    `json:"Recorder,omitempty"`
	Period                            *DateTime `json:"Period,omitempty"`
	LineNumber                        Int64     `json:"LineNumber,omitempty"`
	Active                            *Boolean  `json:"Active,omitempty"`
	VidDenezhnykhSredstv              *String   `json:"ВидДенежныхСредств,omitempty"`
	PrikhodRaskhod                    *String   `json:"ПриходРасход,omitempty"`
	BankovskiiSchetKassa              *String   `json:"БанковскийСчетКасса,omitempty"`
	TypeOfMovingMoneyKey              *Guid     `json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	DokumentDvizheniia                *String   `json:"ДокументДвижения,omitempty"`
	Kontragent                        *String   `json:"Контрагент,omitempty"`
	DogovorKontragentaKey             *Guid     `json:"ДоговорКонтрагента_Key,omitempty"`
	Sdelka                            *String   `json:"Сделка,omitempty"`
	ProektKey                         *Guid     `json:"Проект_Key,omitempty"`
	DokumentPlanirovaniiaPlatezha     *String   `json:"ДокументПланированияПлатежа,omitempty"`
	Sum                               *Double   `json:"Сумма,omitempty"`
	SummaUpr                          *Double   `json:"СуммаУпр,omitempty"`
	RecorderType                      String    `json:"Recorder_Type,omitempty"`
	BankovskiiSchetKassaType          *String   `json:"БанковскийСчетКасса_Type,omitempty"`
	DokumentDvizheniiaType            *String   `json:"ДокументДвижения_Type,omitempty"`
	KontragentType                    *String   `json:"Контрагент_Type,omitempty"`
	SdelkaType                        *String   `json:"Сделка_Type,omitempty"`
	DokumentPlanirovaniiaPlatezhaType *String   `json:"ДокументПланированияПлатежа_Type,omitempty"`
}

func (AccumulationRegisterDvizheniiaDenezhnykhSredstvRecordType) APIEntityType() string {
	return "AccumulationRegister_ДвиженияДенежныхСредств_RecordType"
}
func NewAccumulationRegisterDvizheniiaDenezhnykhSredstvRecordType(data string, prevError error) (*AccumulationRegisterDvizheniiaDenezhnykhSredstvRecordType, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterDvizheniiaDenezhnykhSredstvRecordType)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterDvizheniiaDenezhnykhSredstvRecordType(entity AccumulationRegisterDvizheniiaDenezhnykhSredstvRecordType) (*AccumulationRegisterDvizheniiaDenezhnykhSredstvRecordType, error) {
	return NewAccumulationRegisterDvizheniiaDenezhnykhSredstvRecordType(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterDvizheniiaDenezhnykhSredstvRecordType(key PrimaryAccumulationRegisterDvizheniiaDenezhnykhSredstvRecordType, fields []string) (*AccumulationRegisterDvizheniiaDenezhnykhSredstvRecordType, error) {
	return NewAccumulationRegisterDvizheniiaDenezhnykhSredstvRecordType(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterDvizheniiaDenezhnykhSredstvRecordTypes(where Where) (*[]AccumulationRegisterDvizheniiaDenezhnykhSredstvRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterDvizheniiaDenezhnykhSredstvRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ДвиженияДенежныхСредств_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterDvizheniiaDenezhnykhSredstvRecordType(key PrimaryAccumulationRegisterDvizheniiaDenezhnykhSredstvRecordType, entity AccumulationRegisterDvizheniiaDenezhnykhSredstvRecordType) (*AccumulationRegisterDvizheniiaDenezhnykhSredstvRecordType, error) {
	return NewAccumulationRegisterDvizheniiaDenezhnykhSredstvRecordType(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterDvizheniiaDenezhnykhSredstvRecordType(key PrimaryAccumulationRegisterDvizheniiaDenezhnykhSredstvRecordType) error {
	return c.removeEntity(key)
}

type AccumulationRegisterProdazhiPoStatiam struct {
	Recorder     String                                         `json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterProdazhiPoStatiamRowType `json:"RecordSet,omitempty"`
	RecorderType String                                         `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterProdazhiPoStatiam) APIEntityType() string {
	return "AccumulationRegister_ПродажиПоСтатьям"
}
func NewAccumulationRegisterProdazhiPoStatiam(data string, prevError error) (*AccumulationRegisterProdazhiPoStatiam, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterProdazhiPoStatiam)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterProdazhiPoStatiam(entity AccumulationRegisterProdazhiPoStatiam) (*AccumulationRegisterProdazhiPoStatiam, error) {
	return NewAccumulationRegisterProdazhiPoStatiam(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterProdazhiPoStatiam(key PrimaryAccumulationRegisterProdazhiPoStatiam, fields []string) (*AccumulationRegisterProdazhiPoStatiam, error) {
	return NewAccumulationRegisterProdazhiPoStatiam(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterProdazhiPoStatiams(where Where) (*[]AccumulationRegisterProdazhiPoStatiam, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterProdazhiPoStatiam `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ПродажиПоСтатьям", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterProdazhiPoStatiam(key PrimaryAccumulationRegisterProdazhiPoStatiam, entity AccumulationRegisterProdazhiPoStatiam) (*AccumulationRegisterProdazhiPoStatiam, error) {
	return NewAccumulationRegisterProdazhiPoStatiam(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterProdazhiPoStatiam(key PrimaryAccumulationRegisterProdazhiPoStatiam) error {
	return c.removeEntity(key)
}

type AccumulationRegisterProdazhiPoStatiamRecordType struct {
	Recorder         String    `json:"Recorder,omitempty"`
	Period           *DateTime `json:"Period,omitempty"`
	LineNumber       Int64     `json:"LineNumber,omitempty"`
	Active           *Boolean  `json:"Active,omitempty"`
	RecordType       *String   `json:"RecordType,omitempty"`
	OrganizatsiiaKey *Guid     `json:"Организация_Key,omitempty"`
	DepartmentKey    *Guid     `json:"Склад_Key,omitempty"`
	StatiaKey        *Guid     `json:"Статья_Key,omitempty"`
	SummaProdazha    *Double   `json:"СуммаПродажа,omitempty"`
	SummaVozvrat     *Double   `json:"СуммаВозврат,omitempty"`
	RecorderType     String    `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterProdazhiPoStatiamRecordType) APIEntityType() string {
	return "AccumulationRegister_ПродажиПоСтатьям_RecordType"
}
func NewAccumulationRegisterProdazhiPoStatiamRecordType(data string, prevError error) (*AccumulationRegisterProdazhiPoStatiamRecordType, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterProdazhiPoStatiamRecordType)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterProdazhiPoStatiamRecordType(entity AccumulationRegisterProdazhiPoStatiamRecordType) (*AccumulationRegisterProdazhiPoStatiamRecordType, error) {
	return NewAccumulationRegisterProdazhiPoStatiamRecordType(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterProdazhiPoStatiamRecordType(key PrimaryAccumulationRegisterProdazhiPoStatiamRecordType, fields []string) (*AccumulationRegisterProdazhiPoStatiamRecordType, error) {
	return NewAccumulationRegisterProdazhiPoStatiamRecordType(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterProdazhiPoStatiamRecordTypes(where Where) (*[]AccumulationRegisterProdazhiPoStatiamRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterProdazhiPoStatiamRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ПродажиПоСтатьям_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterProdazhiPoStatiamRecordType(key PrimaryAccumulationRegisterProdazhiPoStatiamRecordType, entity AccumulationRegisterProdazhiPoStatiamRecordType) (*AccumulationRegisterProdazhiPoStatiamRecordType, error) {
	return NewAccumulationRegisterProdazhiPoStatiamRecordType(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterProdazhiPoStatiamRecordType(key PrimaryAccumulationRegisterProdazhiPoStatiamRecordType) error {
	return c.removeEntity(key)
}

type InformationRegisterTsenyNomenklatury struct {
	Recorder     String                                        `json:"Recorder,omitempty"`
	RecordSet    []InformationRegisterTsenyNomenklaturyRowType `json:"RecordSet,omitempty"`
	RecorderType String                                        `json:"Recorder_Type,omitempty"`
}

func (InformationRegisterTsenyNomenklatury) APIEntityType() string {
	return "InformationRegister_ЦеныНоменклатуры"
}
func NewInformationRegisterTsenyNomenklatury(data string, prevError error) (*InformationRegisterTsenyNomenklatury, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(InformationRegisterTsenyNomenklatury)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateInformationRegisterTsenyNomenklatury(entity InformationRegisterTsenyNomenklatury) (*InformationRegisterTsenyNomenklatury, error) {
	return NewInformationRegisterTsenyNomenklatury(c.createEntity(entity))
}
func (c *Client) InformationRegisterTsenyNomenklatury(key PrimaryInformationRegisterTsenyNomenklatury, fields []string) (*InformationRegisterTsenyNomenklatury, error) {
	return NewInformationRegisterTsenyNomenklatury(c.getEntity(key, fields))
}
func (c *Client) InformationRegisterTsenyNomenklaturys(where Where) (*[]InformationRegisterTsenyNomenklatury, error) {
	type ReturnObj struct {
		Value []InformationRegisterTsenyNomenklatury `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("InformationRegister_ЦеныНоменклатуры", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateInformationRegisterTsenyNomenklatury(key PrimaryInformationRegisterTsenyNomenklatury, entity InformationRegisterTsenyNomenklatury) (*InformationRegisterTsenyNomenklatury, error) {
	return NewInformationRegisterTsenyNomenklatury(c.updateEntity(key, entity))
}
func (c *Client) DeleteInformationRegisterTsenyNomenklatury(key PrimaryInformationRegisterTsenyNomenklatury) error {
	return c.removeEntity(key)
}

type InformationRegisterTsenyNomenklaturyRecordType struct {
	Recorder                       *String  `json:"Recorder,omitempty"`
	Period                         DateTime `json:"Period,omitempty"`
	LineNumber                     *Int64   `json:"LineNumber,omitempty"`
	Active                         *Boolean `json:"Active,omitempty"`
	TipTsenKey                     Guid     `json:"ТипЦен_Key,omitempty"`
	SegmentNomenklaturyKey         Guid     `json:"СегментНоменклатуры_Key,omitempty"`
	ItemKey                        Guid     `json:"Номенклатура_Key,omitempty"`
	InstanceKey                    Guid     `json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey Guid     `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        Guid     `json:"Размер_Key,omitempty"`
	Cost                           *Double  `json:"Цена,omitempty"`
	ProtsentSkidkiNatsenki         *Double  `json:"ПроцентСкидкиНаценки,omitempty"`
	ValiutaKey                     *Guid    `json:"Валюта_Key,omitempty"`
	EdinitsaIzmereniiaKey          *Guid    `json:"ЕдиницаИзмерения_Key,omitempty"`
	RecorderType                   *String  `json:"Recorder_Type,omitempty"`
}

func (InformationRegisterTsenyNomenklaturyRecordType) APIEntityType() string {
	return "InformationRegister_ЦеныНоменклатуры_RecordType"
}
func NewInformationRegisterTsenyNomenklaturyRecordType(data string, prevError error) (*InformationRegisterTsenyNomenklaturyRecordType, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(InformationRegisterTsenyNomenklaturyRecordType)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateInformationRegisterTsenyNomenklaturyRecordType(entity InformationRegisterTsenyNomenklaturyRecordType) (*InformationRegisterTsenyNomenklaturyRecordType, error) {
	return NewInformationRegisterTsenyNomenklaturyRecordType(c.createEntity(entity))
}
func (c *Client) InformationRegisterTsenyNomenklaturyRecordType(key PrimaryInformationRegisterTsenyNomenklaturyRecordType, fields []string) (*InformationRegisterTsenyNomenklaturyRecordType, error) {
	return NewInformationRegisterTsenyNomenklaturyRecordType(c.getEntity(key, fields))
}
func (c *Client) InformationRegisterTsenyNomenklaturyRecordTypes(where Where) (*[]InformationRegisterTsenyNomenklaturyRecordType, error) {
	type ReturnObj struct {
		Value []InformationRegisterTsenyNomenklaturyRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("InformationRegister_ЦеныНоменклатуры_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateInformationRegisterTsenyNomenklaturyRecordType(key PrimaryInformationRegisterTsenyNomenklaturyRecordType, entity InformationRegisterTsenyNomenklaturyRecordType) (*InformationRegisterTsenyNomenklaturyRecordType, error) {
	return NewInformationRegisterTsenyNomenklaturyRecordType(c.updateEntity(key, entity))
}
func (c *Client) DeleteInformationRegisterTsenyNomenklaturyRecordType(key PrimaryInformationRegisterTsenyNomenklaturyRecordType) error {
	return c.removeEntity(key)
}

type AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitse struct {
	Recorder     String                                                         `json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRowType `json:"RecordSet,omitempty"`
	RecorderType String                                                         `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitse) APIEntityType() string {
	return "AccumulationRegister_СводныеДанныеПоПродажамВРознице"
}
func NewAccumulationRegisterSvodnyeDannyePoProdazhamVRoznitse(data string, prevError error) (*AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitse, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitse)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterSvodnyeDannyePoProdazhamVRoznitse(entity AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitse) (*AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitse, error) {
	return NewAccumulationRegisterSvodnyeDannyePoProdazhamVRoznitse(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitse(key PrimaryAccumulationRegisterSvodnyeDannyePoProdazhamVRoznitse, fields []string) (*AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitse, error) {
	return NewAccumulationRegisterSvodnyeDannyePoProdazhamVRoznitse(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitses(where Where) (*[]AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitse, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitse `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_СводныеДанныеПоПродажамВРознице", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterSvodnyeDannyePoProdazhamVRoznitse(key PrimaryAccumulationRegisterSvodnyeDannyePoProdazhamVRoznitse, entity AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitse) (*AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitse, error) {
	return NewAccumulationRegisterSvodnyeDannyePoProdazhamVRoznitse(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterSvodnyeDannyePoProdazhamVRoznitse(key PrimaryAccumulationRegisterSvodnyeDannyePoProdazhamVRoznitse) error {
	return c.removeEntity(key)
}

type AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRecordType struct {
	Recorder                      String    `json:"Recorder,omitempty"`
	Period                        *DateTime `json:"Period,omitempty"`
	LineNumber                    Int64     `json:"LineNumber,omitempty"`
	Active                        *Boolean  `json:"Active,omitempty"`
	OrganizatsiiaKey              *Guid     `json:"Организация_Key,omitempty"`
	DepartmentKey                 *Guid     `json:"Склад_Key,omitempty"`
	ProdazhnaiaStoimost           *Double   `json:"ПродажнаяСтоимость,omitempty"`
	VsegoSkidki                   *Double   `json:"ВсегоСкидки,omitempty"`
	SkidkiPoDiskontnymKartam      *Double   `json:"СкидкиПоДисконтнымКартам,omitempty"`
	SummaOplatyKartami            *Double   `json:"СуммаОплатыКартами,omitempty"`
	SummaOplatyBankovskimKreditom *Double   `json:"СуммаОплатыБанковскимКредитом,omitempty"`
	SummaVozvrata                 *Double   `json:"СуммаВозврата,omitempty"`
	VesVChekakh                   *Double   `json:"ВесВЧеках,omitempty"`
	KolichestvoChekov             *Int64    `json:"КоличествоЧеков,omitempty"`
	SummaProdazhiSertifikatov     *Double   `json:"СуммаПродажиСертификатов,omitempty"`
	SummaOplatySertifikatami      *Double   `json:"СуммаОплатыСертификатами,omitempty"`
	PogashenoSertifikatami        *Double   `json:"ПогашеноСертификатами,omitempty"`
	SummaOplatyBonusom            *Double   `json:"СуммаОплатыБонусом,omitempty"`
	VesObmena                     *Double   `json:"ВесОбмена,omitempty"`
	SummaObmena                   *Double   `json:"СуммаОбмена,omitempty"`
	VesSkuplennogoTovara          *Double   `json:"ВесСкупленногоТовара,omitempty"`
	VydanoZaSkuplennyiTovar       *Double   `json:"ВыданоЗаСкупленныйТовар,omitempty"`
	KolichestvoIzdelii            *Int64    `json:"КоличествоИзделий,omitempty"`
	SumManualDiscount             *Double   `json:"СуммаРучнойСкидки,omitempty"`
	SumAutoDiscount               *Double   `json:"СуммаАвтоматическойСкидки,omitempty"`
	SummaRassrochki               *Double   `json:"СуммаРассрочки,omitempty"`
	SummaPogasheniiaRassrochki    *Double   `json:"СуммаПогашенияРассрочки,omitempty"`
	SummaOplatyNalichnymi         *Double   `json:"СуммаОплатыНаличными,omitempty"`
	RecorderType                  String    `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRecordType) APIEntityType() string {
	return "AccumulationRegister_СводныеДанныеПоПродажамВРознице_RecordType"
}
func NewAccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRecordType(data string, prevError error) (*AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRecordType, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRecordType)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRecordType(entity AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRecordType) (*AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRecordType, error) {
	return NewAccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRecordType(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRecordType(key PrimaryAccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRecordType, fields []string) (*AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRecordType, error) {
	return NewAccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRecordType(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRecordTypes(where Where) (*[]AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_СводныеДанныеПоПродажамВРознице_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRecordType(key PrimaryAccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRecordType, entity AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRecordType) (*AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRecordType, error) {
	return NewAccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRecordType(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRecordType(key PrimaryAccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRecordType) error {
	return c.removeEntity(key)
}

type AccumulationRegisterDenezhnyeSredstvaVRezerve struct {
	Recorder     String                                                 `json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterDenezhnyeSredstvaVRezerveRowType `json:"RecordSet,omitempty"`
	RecorderType String                                                 `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterDenezhnyeSredstvaVRezerve) APIEntityType() string {
	return "AccumulationRegister_ДенежныеСредстваВРезерве"
}
func NewAccumulationRegisterDenezhnyeSredstvaVRezerve(data string, prevError error) (*AccumulationRegisterDenezhnyeSredstvaVRezerve, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterDenezhnyeSredstvaVRezerve)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterDenezhnyeSredstvaVRezerve(entity AccumulationRegisterDenezhnyeSredstvaVRezerve) (*AccumulationRegisterDenezhnyeSredstvaVRezerve, error) {
	return NewAccumulationRegisterDenezhnyeSredstvaVRezerve(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterDenezhnyeSredstvaVRezerve(key PrimaryAccumulationRegisterDenezhnyeSredstvaVRezerve, fields []string) (*AccumulationRegisterDenezhnyeSredstvaVRezerve, error) {
	return NewAccumulationRegisterDenezhnyeSredstvaVRezerve(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterDenezhnyeSredstvaVRezerves(where Where) (*[]AccumulationRegisterDenezhnyeSredstvaVRezerve, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterDenezhnyeSredstvaVRezerve `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ДенежныеСредстваВРезерве", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterDenezhnyeSredstvaVRezerve(key PrimaryAccumulationRegisterDenezhnyeSredstvaVRezerve, entity AccumulationRegisterDenezhnyeSredstvaVRezerve) (*AccumulationRegisterDenezhnyeSredstvaVRezerve, error) {
	return NewAccumulationRegisterDenezhnyeSredstvaVRezerve(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterDenezhnyeSredstvaVRezerve(key PrimaryAccumulationRegisterDenezhnyeSredstvaVRezerve) error {
	return c.removeEntity(key)
}

type AccumulationRegisterDenezhnyeSredstvaVRezerveRecordType struct {
	Recorder                   String    `json:"Recorder,omitempty"`
	Period                     *DateTime `json:"Period,omitempty"`
	LineNumber                 Int64     `json:"LineNumber,omitempty"`
	Active                     *Boolean  `json:"Active,omitempty"`
	RecordType                 *String   `json:"RecordType,omitempty"`
	VidDenezhnykhSredstv       *String   `json:"ВидДенежныхСредств,omitempty"`
	BankovskiiSchetKassa       *String   `json:"БанковскийСчетКасса,omitempty"`
	DokumentRezervirovaniiaKey *Guid     `json:"ДокументРезервирования_Key,omitempty"`
	Sum                        *Double   `json:"Сумма,omitempty"`
	RecorderType               String    `json:"Recorder_Type,omitempty"`
	BankovskiiSchetKassaType   *String   `json:"БанковскийСчетКасса_Type,omitempty"`
}

func (AccumulationRegisterDenezhnyeSredstvaVRezerveRecordType) APIEntityType() string {
	return "AccumulationRegister_ДенежныеСредстваВРезерве_RecordType"
}
func NewAccumulationRegisterDenezhnyeSredstvaVRezerveRecordType(data string, prevError error) (*AccumulationRegisterDenezhnyeSredstvaVRezerveRecordType, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterDenezhnyeSredstvaVRezerveRecordType)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterDenezhnyeSredstvaVRezerveRecordType(entity AccumulationRegisterDenezhnyeSredstvaVRezerveRecordType) (*AccumulationRegisterDenezhnyeSredstvaVRezerveRecordType, error) {
	return NewAccumulationRegisterDenezhnyeSredstvaVRezerveRecordType(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterDenezhnyeSredstvaVRezerveRecordType(key PrimaryAccumulationRegisterDenezhnyeSredstvaVRezerveRecordType, fields []string) (*AccumulationRegisterDenezhnyeSredstvaVRezerveRecordType, error) {
	return NewAccumulationRegisterDenezhnyeSredstvaVRezerveRecordType(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterDenezhnyeSredstvaVRezerveRecordTypes(where Where) (*[]AccumulationRegisterDenezhnyeSredstvaVRezerveRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterDenezhnyeSredstvaVRezerveRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ДенежныеСредстваВРезерве_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterDenezhnyeSredstvaVRezerveRecordType(key PrimaryAccumulationRegisterDenezhnyeSredstvaVRezerveRecordType, entity AccumulationRegisterDenezhnyeSredstvaVRezerveRecordType) (*AccumulationRegisterDenezhnyeSredstvaVRezerveRecordType, error) {
	return NewAccumulationRegisterDenezhnyeSredstvaVRezerveRecordType(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterDenezhnyeSredstvaVRezerveRecordType(key PrimaryAccumulationRegisterDenezhnyeSredstvaVRezerveRecordType) error {
	return c.removeEntity(key)
}

type AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakh struct {
	Recorder     String                                                                     `json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRowType `json:"RecordSet,omitempty"`
	RecorderType String                                                                     `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakh) APIEntityType() string {
	return "AccumulationRegister_ТоварыВНеавтоматизированныхТорговыхТочках"
}
func NewAccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakh(data string, prevError error) (*AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakh, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakh)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakh(entity AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakh) (*AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakh, error) {
	return NewAccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakh(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakh(key PrimaryAccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakh, fields []string) (*AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakh, error) {
	return NewAccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakh(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhs(where Where) (*[]AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakh, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakh `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ТоварыВНеавтоматизированныхТорговыхТочках", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakh(key PrimaryAccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakh, entity AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakh) (*AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakh, error) {
	return NewAccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakh(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakh(key PrimaryAccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakh) error {
	return c.removeEntity(key)
}

type AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRecordType struct {
	Recorder                       String    `json:"Recorder,omitempty"`
	Period                         *DateTime `json:"Period,omitempty"`
	LineNumber                     Int64     `json:"LineNumber,omitempty"`
	Active                         *Boolean  `json:"Active,omitempty"`
	RecordType                     *String   `json:"RecordType,omitempty"`
	ItemKey                        *Guid     `json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid     `json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid     `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid     `json:"Размер_Key,omitempty"`
	DepartmentKey                  *Guid     `json:"Склад_Key,omitempty"`
	RetailCost                     *Double   `json:"ЦенаВРознице,omitempty"`
	Quantity                       *Int64    `json:"Количество,omitempty"`
	Weight                         *Double   `json:"Вес,omitempty"`
	RecorderType                   String    `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRecordType) APIEntityType() string {
	return "AccumulationRegister_ТоварыВНеавтоматизированныхТорговыхТочках_RecordType"
}
func NewAccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRecordType(data string, prevError error) (*AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRecordType, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRecordType)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRecordType(entity AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRecordType) (*AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRecordType, error) {
	return NewAccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRecordType(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRecordType(key PrimaryAccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRecordType, fields []string) (*AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRecordType, error) {
	return NewAccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRecordType(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRecordTypes(where Where) (*[]AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ТоварыВНеавтоматизированныхТорговыхТочках_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRecordType(key PrimaryAccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRecordType, entity AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRecordType) (*AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRecordType, error) {
	return NewAccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRecordType(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRecordType(key PrimaryAccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRecordType) error {
	return c.removeEntity(key)
}

type AccumulationRegisterDavalcheskiiMetallPoteri struct {
	Recorder     String                                                `json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterDavalcheskiiMetallPoteriRowType `json:"RecordSet,omitempty"`
	RecorderType String                                                `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterDavalcheskiiMetallPoteri) APIEntityType() string {
	return "AccumulationRegister_ДавальческийМеталлПотери"
}
func NewAccumulationRegisterDavalcheskiiMetallPoteri(data string, prevError error) (*AccumulationRegisterDavalcheskiiMetallPoteri, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterDavalcheskiiMetallPoteri)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterDavalcheskiiMetallPoteri(entity AccumulationRegisterDavalcheskiiMetallPoteri) (*AccumulationRegisterDavalcheskiiMetallPoteri, error) {
	return NewAccumulationRegisterDavalcheskiiMetallPoteri(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterDavalcheskiiMetallPoteri(key PrimaryAccumulationRegisterDavalcheskiiMetallPoteri, fields []string) (*AccumulationRegisterDavalcheskiiMetallPoteri, error) {
	return NewAccumulationRegisterDavalcheskiiMetallPoteri(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterDavalcheskiiMetallPoteris(where Where) (*[]AccumulationRegisterDavalcheskiiMetallPoteri, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterDavalcheskiiMetallPoteri `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ДавальческийМеталлПотери", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterDavalcheskiiMetallPoteri(key PrimaryAccumulationRegisterDavalcheskiiMetallPoteri, entity AccumulationRegisterDavalcheskiiMetallPoteri) (*AccumulationRegisterDavalcheskiiMetallPoteri, error) {
	return NewAccumulationRegisterDavalcheskiiMetallPoteri(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterDavalcheskiiMetallPoteri(key PrimaryAccumulationRegisterDavalcheskiiMetallPoteri) error {
	return c.removeEntity(key)
}

type AccumulationRegisterDavalcheskiiMetallPoteriRecordType struct {
	Recorder              String    `json:"Recorder,omitempty"`
	Period                *DateTime `json:"Period,omitempty"`
	LineNumber            Int64     `json:"LineNumber,omitempty"`
	Active                *Boolean  `json:"Active,omitempty"`
	OrganizatsiiaKey      *Guid     `json:"Организация_Key,omitempty"`
	DogovorKontragentaKey *Guid     `json:"ДоговорКонтрагента_Key,omitempty"`
	MetallKey             *Guid     `json:"Металл_Key,omitempty"`
	Weight                *Double   `json:"Вес,omitempty"`
	Protsent              *Double   `json:"Процент,omitempty"`
	RecorderType          String    `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterDavalcheskiiMetallPoteriRecordType) APIEntityType() string {
	return "AccumulationRegister_ДавальческийМеталлПотери_RecordType"
}
func NewAccumulationRegisterDavalcheskiiMetallPoteriRecordType(data string, prevError error) (*AccumulationRegisterDavalcheskiiMetallPoteriRecordType, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterDavalcheskiiMetallPoteriRecordType)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterDavalcheskiiMetallPoteriRecordType(entity AccumulationRegisterDavalcheskiiMetallPoteriRecordType) (*AccumulationRegisterDavalcheskiiMetallPoteriRecordType, error) {
	return NewAccumulationRegisterDavalcheskiiMetallPoteriRecordType(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterDavalcheskiiMetallPoteriRecordType(key PrimaryAccumulationRegisterDavalcheskiiMetallPoteriRecordType, fields []string) (*AccumulationRegisterDavalcheskiiMetallPoteriRecordType, error) {
	return NewAccumulationRegisterDavalcheskiiMetallPoteriRecordType(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterDavalcheskiiMetallPoteriRecordTypes(where Where) (*[]AccumulationRegisterDavalcheskiiMetallPoteriRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterDavalcheskiiMetallPoteriRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ДавальческийМеталлПотери_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterDavalcheskiiMetallPoteriRecordType(key PrimaryAccumulationRegisterDavalcheskiiMetallPoteriRecordType, entity AccumulationRegisterDavalcheskiiMetallPoteriRecordType) (*AccumulationRegisterDavalcheskiiMetallPoteriRecordType, error) {
	return NewAccumulationRegisterDavalcheskiiMetallPoteriRecordType(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterDavalcheskiiMetallPoteriRecordType(key PrimaryAccumulationRegisterDavalcheskiiMetallPoteriRecordType) error {
	return c.removeEntity(key)
}

type InformationRegisterTsenyPoPreiskurantu struct {
	Recorder     String                                          `json:"Recorder,omitempty"`
	RecordSet    []InformationRegisterTsenyPoPreiskurantuRowType `json:"RecordSet,omitempty"`
	RecorderType String                                          `json:"Recorder_Type,omitempty"`
}

func (InformationRegisterTsenyPoPreiskurantu) APIEntityType() string {
	return "InformationRegister_ЦеныПоПрейскуранту"
}
func NewInformationRegisterTsenyPoPreiskurantu(data string, prevError error) (*InformationRegisterTsenyPoPreiskurantu, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(InformationRegisterTsenyPoPreiskurantu)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateInformationRegisterTsenyPoPreiskurantu(entity InformationRegisterTsenyPoPreiskurantu) (*InformationRegisterTsenyPoPreiskurantu, error) {
	return NewInformationRegisterTsenyPoPreiskurantu(c.createEntity(entity))
}
func (c *Client) InformationRegisterTsenyPoPreiskurantu(key PrimaryInformationRegisterTsenyPoPreiskurantu, fields []string) (*InformationRegisterTsenyPoPreiskurantu, error) {
	return NewInformationRegisterTsenyPoPreiskurantu(c.getEntity(key, fields))
}
func (c *Client) InformationRegisterTsenyPoPreiskurantus(where Where) (*[]InformationRegisterTsenyPoPreiskurantu, error) {
	type ReturnObj struct {
		Value []InformationRegisterTsenyPoPreiskurantu `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("InformationRegister_ЦеныПоПрейскуранту", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateInformationRegisterTsenyPoPreiskurantu(key PrimaryInformationRegisterTsenyPoPreiskurantu, entity InformationRegisterTsenyPoPreiskurantu) (*InformationRegisterTsenyPoPreiskurantu, error) {
	return NewInformationRegisterTsenyPoPreiskurantu(c.updateEntity(key, entity))
}
func (c *Client) DeleteInformationRegisterTsenyPoPreiskurantu(key PrimaryInformationRegisterTsenyPoPreiskurantu) error {
	return c.removeEntity(key)
}

type InformationRegisterTsenyPoPreiskurantuRecordType struct {
	Recorder         *String  `json:"Recorder,omitempty"`
	Period           DateTime `json:"Period,omitempty"`
	LineNumber       *Int64   `json:"LineNumber,omitempty"`
	Active           *Boolean `json:"Active,omitempty"`
	KamenKey         Guid     `json:"Камень_Key,omitempty"`
	FormaOgrankiKey  Guid     `json:"ФормаОгранки_Key,omitempty"`
	TsvetKamniaKey   Guid     `json:"ЦветКамня_Key,omitempty"`
	GruppaTsvetaKey  Guid     `json:"ГруппаЦвета_Key,omitempty"`
	GruppaDefektaKey Guid     `json:"ГруппаДефекта_Key,omitempty"`
	RassevKey        Guid     `json:"Рассев_Key,omitempty"`
	Razmer1Ot        Double   `json:"Размер1От,omitempty"`
	Razmer1Do        Double   `json:"Размер1До,omitempty"`
	Cost             *Double  `json:"Цена,omitempty"`
	TipTsenKey       *Guid    `json:"ТипЦен_Key,omitempty"`
	RecorderType     *String  `json:"Recorder_Type,omitempty"`
}

func (InformationRegisterTsenyPoPreiskurantuRecordType) APIEntityType() string {
	return "InformationRegister_ЦеныПоПрейскуранту_RecordType"
}
func NewInformationRegisterTsenyPoPreiskurantuRecordType(data string, prevError error) (*InformationRegisterTsenyPoPreiskurantuRecordType, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(InformationRegisterTsenyPoPreiskurantuRecordType)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateInformationRegisterTsenyPoPreiskurantuRecordType(entity InformationRegisterTsenyPoPreiskurantuRecordType) (*InformationRegisterTsenyPoPreiskurantuRecordType, error) {
	return NewInformationRegisterTsenyPoPreiskurantuRecordType(c.createEntity(entity))
}
func (c *Client) InformationRegisterTsenyPoPreiskurantuRecordType(key PrimaryInformationRegisterTsenyPoPreiskurantuRecordType, fields []string) (*InformationRegisterTsenyPoPreiskurantuRecordType, error) {
	return NewInformationRegisterTsenyPoPreiskurantuRecordType(c.getEntity(key, fields))
}
func (c *Client) InformationRegisterTsenyPoPreiskurantuRecordTypes(where Where) (*[]InformationRegisterTsenyPoPreiskurantuRecordType, error) {
	type ReturnObj struct {
		Value []InformationRegisterTsenyPoPreiskurantuRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("InformationRegister_ЦеныПоПрейскуранту_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateInformationRegisterTsenyPoPreiskurantuRecordType(key PrimaryInformationRegisterTsenyPoPreiskurantuRecordType, entity InformationRegisterTsenyPoPreiskurantuRecordType) (*InformationRegisterTsenyPoPreiskurantuRecordType, error) {
	return NewInformationRegisterTsenyPoPreiskurantuRecordType(c.updateEntity(key, entity))
}
func (c *Client) DeleteInformationRegisterTsenyPoPreiskurantuRecordType(key PrimaryInformationRegisterTsenyPoPreiskurantuRecordType) error {
	return c.removeEntity(key)
}

type AccumulationRegisterTovaryVOtbore struct {
	Recorder     String                                     `json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterTovaryVOtboreRowType `json:"RecordSet,omitempty"`
	RecorderType String                                     `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterTovaryVOtbore) APIEntityType() string {
	return "AccumulationRegister_ТоварыВОтборе"
}
func NewAccumulationRegisterTovaryVOtbore(data string, prevError error) (*AccumulationRegisterTovaryVOtbore, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterTovaryVOtbore)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterTovaryVOtbore(entity AccumulationRegisterTovaryVOtbore) (*AccumulationRegisterTovaryVOtbore, error) {
	return NewAccumulationRegisterTovaryVOtbore(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterTovaryVOtbore(key PrimaryAccumulationRegisterTovaryVOtbore, fields []string) (*AccumulationRegisterTovaryVOtbore, error) {
	return NewAccumulationRegisterTovaryVOtbore(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterTovaryVOtbores(where Where) (*[]AccumulationRegisterTovaryVOtbore, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterTovaryVOtbore `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ТоварыВОтборе", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterTovaryVOtbore(key PrimaryAccumulationRegisterTovaryVOtbore, entity AccumulationRegisterTovaryVOtbore) (*AccumulationRegisterTovaryVOtbore, error) {
	return NewAccumulationRegisterTovaryVOtbore(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterTovaryVOtbore(key PrimaryAccumulationRegisterTovaryVOtbore) error {
	return c.removeEntity(key)
}

type AccumulationRegisterTovaryVOtboreRecordType struct {
	Recorder                       String    `json:"Recorder,omitempty"`
	Period                         *DateTime `json:"Period,omitempty"`
	LineNumber                     Int64     `json:"LineNumber,omitempty"`
	Active                         *Boolean  `json:"Active,omitempty"`
	RecordType                     *String   `json:"RecordType,omitempty"`
	ItemKey                        *Guid     `json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid     `json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid     `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid     `json:"Размер_Key,omitempty"`
	ZakazKlienta                   *String   `json:"ЗаказКлиента,omitempty"`
	DepartmentKey                  *Guid     `json:"Склад_Key,omitempty"`
	KOtboru                        *Int64    `json:"КОтбору,omitempty"`
	Otobrano                       *Int64    `json:"Отобрано,omitempty"`
	OtobranoVes                    *Double   `json:"ОтобраноВес,omitempty"`
	RecorderType                   String    `json:"Recorder_Type,omitempty"`
	ZakazKlientaType               *String   `json:"ЗаказКлиента_Type,omitempty"`
}

func (AccumulationRegisterTovaryVOtboreRecordType) APIEntityType() string {
	return "AccumulationRegister_ТоварыВОтборе_RecordType"
}
func NewAccumulationRegisterTovaryVOtboreRecordType(data string, prevError error) (*AccumulationRegisterTovaryVOtboreRecordType, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterTovaryVOtboreRecordType)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterTovaryVOtboreRecordType(entity AccumulationRegisterTovaryVOtboreRecordType) (*AccumulationRegisterTovaryVOtboreRecordType, error) {
	return NewAccumulationRegisterTovaryVOtboreRecordType(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterTovaryVOtboreRecordType(key PrimaryAccumulationRegisterTovaryVOtboreRecordType, fields []string) (*AccumulationRegisterTovaryVOtboreRecordType, error) {
	return NewAccumulationRegisterTovaryVOtboreRecordType(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterTovaryVOtboreRecordTypes(where Where) (*[]AccumulationRegisterTovaryVOtboreRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterTovaryVOtboreRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ТоварыВОтборе_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterTovaryVOtboreRecordType(key PrimaryAccumulationRegisterTovaryVOtboreRecordType, entity AccumulationRegisterTovaryVOtboreRecordType) (*AccumulationRegisterTovaryVOtboreRecordType, error) {
	return NewAccumulationRegisterTovaryVOtboreRecordType(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterTovaryVOtboreRecordType(key PrimaryAccumulationRegisterTovaryVOtboreRecordType) error {
	return c.removeEntity(key)
}

type AccumulationRegisterRealizovannyeTovary struct {
	Recorder     String                                           `json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterRealizovannyeTovaryRowType `json:"RecordSet,omitempty"`
	RecorderType String                                           `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterRealizovannyeTovary) APIEntityType() string {
	return "AccumulationRegister_РеализованныеТовары"
}
func NewAccumulationRegisterRealizovannyeTovary(data string, prevError error) (*AccumulationRegisterRealizovannyeTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterRealizovannyeTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterRealizovannyeTovary(entity AccumulationRegisterRealizovannyeTovary) (*AccumulationRegisterRealizovannyeTovary, error) {
	return NewAccumulationRegisterRealizovannyeTovary(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterRealizovannyeTovary(key PrimaryAccumulationRegisterRealizovannyeTovary, fields []string) (*AccumulationRegisterRealizovannyeTovary, error) {
	return NewAccumulationRegisterRealizovannyeTovary(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterRealizovannyeTovarys(where Where) (*[]AccumulationRegisterRealizovannyeTovary, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterRealizovannyeTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_РеализованныеТовары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterRealizovannyeTovary(key PrimaryAccumulationRegisterRealizovannyeTovary, entity AccumulationRegisterRealizovannyeTovary) (*AccumulationRegisterRealizovannyeTovary, error) {
	return NewAccumulationRegisterRealizovannyeTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterRealizovannyeTovary(key PrimaryAccumulationRegisterRealizovannyeTovary) error {
	return c.removeEntity(key)
}

type AccumulationRegisterRealizovannyeTovaryRecordType struct {
	Recorder                       String    `json:"Recorder,omitempty"`
	Period                         *DateTime `json:"Period,omitempty"`
	LineNumber                     Int64     `json:"LineNumber,omitempty"`
	Active                         *Boolean  `json:"Active,omitempty"`
	RecordType                     *String   `json:"RecordType,omitempty"`
	ItemKey                        *Guid     `json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid     `json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid     `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid     `json:"Размер_Key,omitempty"`
	DogovorKontragentaKey          *Guid     `json:"ДоговорКонтрагента_Key,omitempty"`
	Sdelka                         *String   `json:"Сделка,omitempty"`
	DokumentPostavki               *String   `json:"ДокументПоставки,omitempty"`
	Quantity                       *Int64    `json:"Количество,omitempty"`
	Weight                         *Double   `json:"Вес,omitempty"`
	Vyruchka                       *Double   `json:"Выручка,omitempty"`
	RecorderType                   String    `json:"Recorder_Type,omitempty"`
	SdelkaType                     *String   `json:"Сделка_Type,omitempty"`
	DokumentPostavkiType           *String   `json:"ДокументПоставки_Type,omitempty"`
}

func (AccumulationRegisterRealizovannyeTovaryRecordType) APIEntityType() string {
	return "AccumulationRegister_РеализованныеТовары_RecordType"
}
func NewAccumulationRegisterRealizovannyeTovaryRecordType(data string, prevError error) (*AccumulationRegisterRealizovannyeTovaryRecordType, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterRealizovannyeTovaryRecordType)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterRealizovannyeTovaryRecordType(entity AccumulationRegisterRealizovannyeTovaryRecordType) (*AccumulationRegisterRealizovannyeTovaryRecordType, error) {
	return NewAccumulationRegisterRealizovannyeTovaryRecordType(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterRealizovannyeTovaryRecordType(key PrimaryAccumulationRegisterRealizovannyeTovaryRecordType, fields []string) (*AccumulationRegisterRealizovannyeTovaryRecordType, error) {
	return NewAccumulationRegisterRealizovannyeTovaryRecordType(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterRealizovannyeTovaryRecordTypes(where Where) (*[]AccumulationRegisterRealizovannyeTovaryRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterRealizovannyeTovaryRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_РеализованныеТовары_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterRealizovannyeTovaryRecordType(key PrimaryAccumulationRegisterRealizovannyeTovaryRecordType, entity AccumulationRegisterRealizovannyeTovaryRecordType) (*AccumulationRegisterRealizovannyeTovaryRecordType, error) {
	return NewAccumulationRegisterRealizovannyeTovaryRecordType(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterRealizovannyeTovaryRecordType(key PrimaryAccumulationRegisterRealizovannyeTovaryRecordType) error {
	return c.removeEntity(key)
}

type AccumulationRegisterDenezhnyeSredstvaKomissionera struct {
	Recorder     String                                                     `json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterDenezhnyeSredstvaKomissioneraRowType `json:"RecordSet,omitempty"`
	RecorderType String                                                     `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterDenezhnyeSredstvaKomissionera) APIEntityType() string {
	return "AccumulationRegister_ДенежныеСредстваКомиссионера"
}
func NewAccumulationRegisterDenezhnyeSredstvaKomissionera(data string, prevError error) (*AccumulationRegisterDenezhnyeSredstvaKomissionera, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterDenezhnyeSredstvaKomissionera)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterDenezhnyeSredstvaKomissionera(entity AccumulationRegisterDenezhnyeSredstvaKomissionera) (*AccumulationRegisterDenezhnyeSredstvaKomissionera, error) {
	return NewAccumulationRegisterDenezhnyeSredstvaKomissionera(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterDenezhnyeSredstvaKomissionera(key PrimaryAccumulationRegisterDenezhnyeSredstvaKomissionera, fields []string) (*AccumulationRegisterDenezhnyeSredstvaKomissionera, error) {
	return NewAccumulationRegisterDenezhnyeSredstvaKomissionera(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterDenezhnyeSredstvaKomissioneras(where Where) (*[]AccumulationRegisterDenezhnyeSredstvaKomissionera, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterDenezhnyeSredstvaKomissionera `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ДенежныеСредстваКомиссионера", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterDenezhnyeSredstvaKomissionera(key PrimaryAccumulationRegisterDenezhnyeSredstvaKomissionera, entity AccumulationRegisterDenezhnyeSredstvaKomissionera) (*AccumulationRegisterDenezhnyeSredstvaKomissionera, error) {
	return NewAccumulationRegisterDenezhnyeSredstvaKomissionera(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterDenezhnyeSredstvaKomissionera(key PrimaryAccumulationRegisterDenezhnyeSredstvaKomissionera) error {
	return c.removeEntity(key)
}

type AccumulationRegisterDenezhnyeSredstvaKomissioneraRecordType struct {
	Recorder              String    `json:"Recorder,omitempty"`
	Period                *DateTime `json:"Period,omitempty"`
	LineNumber            Int64     `json:"LineNumber,omitempty"`
	Active                *Boolean  `json:"Active,omitempty"`
	RecordType            *String   `json:"RecordType,omitempty"`
	DogovorKontragentaKey *Guid     `json:"ДоговорКонтрагента_Key,omitempty"`
	Sdelka                *String   `json:"Сделка,omitempty"`
	SummaVzaimoraschetov  *Double   `json:"СуммаВзаиморасчетов,omitempty"`
	SummaUpr              *Double   `json:"СуммаУпр,omitempty"`
	RecorderType          String    `json:"Recorder_Type,omitempty"`
	SdelkaType            *String   `json:"Сделка_Type,omitempty"`
}

func (AccumulationRegisterDenezhnyeSredstvaKomissioneraRecordType) APIEntityType() string {
	return "AccumulationRegister_ДенежныеСредстваКомиссионера_RecordType"
}
func NewAccumulationRegisterDenezhnyeSredstvaKomissioneraRecordType(data string, prevError error) (*AccumulationRegisterDenezhnyeSredstvaKomissioneraRecordType, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterDenezhnyeSredstvaKomissioneraRecordType)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterDenezhnyeSredstvaKomissioneraRecordType(entity AccumulationRegisterDenezhnyeSredstvaKomissioneraRecordType) (*AccumulationRegisterDenezhnyeSredstvaKomissioneraRecordType, error) {
	return NewAccumulationRegisterDenezhnyeSredstvaKomissioneraRecordType(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterDenezhnyeSredstvaKomissioneraRecordType(key PrimaryAccumulationRegisterDenezhnyeSredstvaKomissioneraRecordType, fields []string) (*AccumulationRegisterDenezhnyeSredstvaKomissioneraRecordType, error) {
	return NewAccumulationRegisterDenezhnyeSredstvaKomissioneraRecordType(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterDenezhnyeSredstvaKomissioneraRecordTypes(where Where) (*[]AccumulationRegisterDenezhnyeSredstvaKomissioneraRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterDenezhnyeSredstvaKomissioneraRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ДенежныеСредстваКомиссионера_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterDenezhnyeSredstvaKomissioneraRecordType(key PrimaryAccumulationRegisterDenezhnyeSredstvaKomissioneraRecordType, entity AccumulationRegisterDenezhnyeSredstvaKomissioneraRecordType) (*AccumulationRegisterDenezhnyeSredstvaKomissioneraRecordType, error) {
	return NewAccumulationRegisterDenezhnyeSredstvaKomissioneraRecordType(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterDenezhnyeSredstvaKomissioneraRecordType(key PrimaryAccumulationRegisterDenezhnyeSredstvaKomissioneraRecordType) error {
	return c.removeEntity(key)
}

type AccumulationRegisterProdazhi1 struct {
	Recorder     String                                 `json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterProdazhi1RowType `json:"RecordSet,omitempty"`
	RecorderType String                                 `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterProdazhi1) APIEntityType() string {
	return "AccumulationRegister_Продажи1"
}
func NewAccumulationRegisterProdazhi1(data string, prevError error) (*AccumulationRegisterProdazhi1, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterProdazhi1)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterProdazhi1(entity AccumulationRegisterProdazhi1) (*AccumulationRegisterProdazhi1, error) {
	return NewAccumulationRegisterProdazhi1(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterProdazhi1(key PrimaryAccumulationRegisterProdazhi1, fields []string) (*AccumulationRegisterProdazhi1, error) {
	return NewAccumulationRegisterProdazhi1(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterProdazhi1s(where Where) (*[]AccumulationRegisterProdazhi1, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterProdazhi1 `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_Продажи1", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterProdazhi1(key PrimaryAccumulationRegisterProdazhi1, entity AccumulationRegisterProdazhi1) (*AccumulationRegisterProdazhi1, error) {
	return NewAccumulationRegisterProdazhi1(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterProdazhi1(key PrimaryAccumulationRegisterProdazhi1) error {
	return c.removeEntity(key)
}

type AccumulationRegisterProdazhi1RecordType struct {
	Recorder                       String    `json:"Recorder,omitempty"`
	Period                         *DateTime `json:"Period,omitempty"`
	LineNumber                     Int64     `json:"LineNumber,omitempty"`
	Active                         *Boolean  `json:"Active,omitempty"`
	ItemKey                        *Guid     `json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid     `json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid     `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid     `json:"Размер_Key,omitempty"`
	OrganizatsiiaKey               *Guid     `json:"Организация_Key,omitempty"`
	DepartmentKey                  *Guid     `json:"Склад_Key,omitempty"`
	DogovorKontragentaKey          *Guid     `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentProdazhi               *String   `json:"ДокументПродажи,omitempty"`
	DokumentOprikhodovaniia        *String   `json:"ДокументОприходования,omitempty"`
	ZakazKlienta                   *String   `json:"ЗаказКлиента,omitempty"`
	ProektKey                      *Guid     `json:"Проект_Key,omitempty"`
	PodrazdelenieKey               *Guid     `json:"Подразделение_Key,omitempty"`
	MetallKey                      *Guid     `json:"Металл_Key,omitempty"`
	TovarnaiaGruppaKey             *Guid     `json:"ТоварнаяГруппа_Key,omitempty"`
	TovarnaiaKategoriiaKey         *Guid     `json:"ТоварнаяКатегория_Key,omitempty"`
	TovarnaiaPozitsiiaKey          *Guid     `json:"ТоварнаяПозиция_Key,omitempty"`
	OrderKey                       *Guid     `json:"КлючПродажи_Key,omitempty"`
	Quantity                       *Int64    `json:"Количество,omitempty"`
	Weight                         *Double   `json:"Вес,omitempty"`
	Cost                           *Double   `json:"Стоимость,omitempty"`
	StoimostBezSkidok              *Double   `json:"СтоимостьБезСкидок,omitempty"`
	StoimostPostuplenie            *Double   `json:"СтоимостьПоступление,omitempty"`
	StoimostUpr                    *Double   `json:"СтоимостьУпр,omitempty"`
	StoimostBezNDS                 *Double   `json:"СтоимостьБезНДС,omitempty"`
	KolichestvoVozvrat             *Int64    `json:"КоличествоВозврат,omitempty"`
	VesVozvrat                     *Double   `json:"ВесВозврат,omitempty"`
	StoimostVozvrat                *Double   `json:"СтоимостьВозврат,omitempty"`
	StoimostBezSkidokVozvrat       *Double   `json:"СтоимостьБезСкидокВозврат,omitempty"`
	StoimostPostuplenieVozvrat     *Double   `json:"СтоимостьПоступлениеВозврат,omitempty"`
	StoimostUprVozvrat             *Double   `json:"СтоимостьУпрВозврат,omitempty"`
	StoimostBezNDSVozvrat          *Double   `json:"СтоимостьБезНДСВозврат,omitempty"`
	SpisaniePartii                 *Boolean  `json:"СписаниеПартий,omitempty"`
	RecorderType                   String    `json:"Recorder_Type,omitempty"`
	DokumentProdazhiType           *String   `json:"ДокументПродажи_Type,omitempty"`
	DokumentOprikhodovaniiaType    *String   `json:"ДокументОприходования_Type,omitempty"`
	ZakazKlientaType               *String   `json:"ЗаказКлиента_Type,omitempty"`
}

func (AccumulationRegisterProdazhi1RecordType) APIEntityType() string {
	return "AccumulationRegister_Продажи1_RecordType"
}
func NewAccumulationRegisterProdazhi1RecordType(data string, prevError error) (*AccumulationRegisterProdazhi1RecordType, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterProdazhi1RecordType)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterProdazhi1RecordType(entity AccumulationRegisterProdazhi1RecordType) (*AccumulationRegisterProdazhi1RecordType, error) {
	return NewAccumulationRegisterProdazhi1RecordType(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterProdazhi1RecordType(key PrimaryAccumulationRegisterProdazhi1RecordType, fields []string) (*AccumulationRegisterProdazhi1RecordType, error) {
	return NewAccumulationRegisterProdazhi1RecordType(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterProdazhi1RecordTypes(where Where) (*[]AccumulationRegisterProdazhi1RecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterProdazhi1RecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_Продажи1_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterProdazhi1RecordType(key PrimaryAccumulationRegisterProdazhi1RecordType, entity AccumulationRegisterProdazhi1RecordType) (*AccumulationRegisterProdazhi1RecordType, error) {
	return NewAccumulationRegisterProdazhi1RecordType(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterProdazhi1RecordType(key PrimaryAccumulationRegisterProdazhi1RecordType) error {
	return c.removeEntity(key)
}

type AccumulationRegisterTovaryNaSkladakhAM struct {
	Recorder     String                                          `json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterTovaryNaSkladakhAMRowType `json:"RecordSet,omitempty"`
	RecorderType String                                          `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterTovaryNaSkladakhAM) APIEntityType() string {
	return "AccumulationRegister_ТоварыНаСкладахАМ"
}
func NewAccumulationRegisterTovaryNaSkladakhAM(data string, prevError error) (*AccumulationRegisterTovaryNaSkladakhAM, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterTovaryNaSkladakhAM)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterTovaryNaSkladakhAM(entity AccumulationRegisterTovaryNaSkladakhAM) (*AccumulationRegisterTovaryNaSkladakhAM, error) {
	return NewAccumulationRegisterTovaryNaSkladakhAM(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterTovaryNaSkladakhAM(key PrimaryAccumulationRegisterTovaryNaSkladakhAM, fields []string) (*AccumulationRegisterTovaryNaSkladakhAM, error) {
	return NewAccumulationRegisterTovaryNaSkladakhAM(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterTovaryNaSkladakhAMs(where Where) (*[]AccumulationRegisterTovaryNaSkladakhAM, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterTovaryNaSkladakhAM `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ТоварыНаСкладахАМ", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterTovaryNaSkladakhAM(key PrimaryAccumulationRegisterTovaryNaSkladakhAM, entity AccumulationRegisterTovaryNaSkladakhAM) (*AccumulationRegisterTovaryNaSkladakhAM, error) {
	return NewAccumulationRegisterTovaryNaSkladakhAM(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterTovaryNaSkladakhAM(key PrimaryAccumulationRegisterTovaryNaSkladakhAM) error {
	return c.removeEntity(key)
}

type AccumulationRegisterTovaryNaSkladakhAMRecordType struct {
	Recorder               String    `json:"Recorder,omitempty"`
	Period                 *DateTime `json:"Period,omitempty"`
	LineNumber             Int64     `json:"LineNumber,omitempty"`
	Active                 *Boolean  `json:"Active,omitempty"`
	RecordType             *String   `json:"RecordType,omitempty"`
	DepartmentKey          *Guid     `json:"Склад_Key,omitempty"`
	MetallKey              *Guid     `json:"Металл_Key,omitempty"`
	TovarnaiaGruppaKey     *Guid     `json:"ТоварнаяГруппа_Key,omitempty"`
	TovarnaiaKategoriiaKey *Guid     `json:"ТоварнаяКатегория_Key,omitempty"`
	TovarnaiaPozitsiiaKey  *Guid     `json:"ТоварнаяПозиция_Key,omitempty"`
	ItemKey                *Guid     `json:"Номенклатура_Key,omitempty"`
	Quantity               *Int64    `json:"Количество,omitempty"`
	Weight                 *Double   `json:"Вес,omitempty"`
	RoznichnaiaStoimost    *Double   `json:"РозничнаяСтоимость,omitempty"`
	RecorderType           String    `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterTovaryNaSkladakhAMRecordType) APIEntityType() string {
	return "AccumulationRegister_ТоварыНаСкладахАМ_RecordType"
}
func NewAccumulationRegisterTovaryNaSkladakhAMRecordType(data string, prevError error) (*AccumulationRegisterTovaryNaSkladakhAMRecordType, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterTovaryNaSkladakhAMRecordType)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterTovaryNaSkladakhAMRecordType(entity AccumulationRegisterTovaryNaSkladakhAMRecordType) (*AccumulationRegisterTovaryNaSkladakhAMRecordType, error) {
	return NewAccumulationRegisterTovaryNaSkladakhAMRecordType(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterTovaryNaSkladakhAMRecordType(key PrimaryAccumulationRegisterTovaryNaSkladakhAMRecordType, fields []string) (*AccumulationRegisterTovaryNaSkladakhAMRecordType, error) {
	return NewAccumulationRegisterTovaryNaSkladakhAMRecordType(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterTovaryNaSkladakhAMRecordTypes(where Where) (*[]AccumulationRegisterTovaryNaSkladakhAMRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterTovaryNaSkladakhAMRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ТоварыНаСкладахАМ_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterTovaryNaSkladakhAMRecordType(key PrimaryAccumulationRegisterTovaryNaSkladakhAMRecordType, entity AccumulationRegisterTovaryNaSkladakhAMRecordType) (*AccumulationRegisterTovaryNaSkladakhAMRecordType, error) {
	return NewAccumulationRegisterTovaryNaSkladakhAMRecordType(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterTovaryNaSkladakhAMRecordType(key PrimaryAccumulationRegisterTovaryNaSkladakhAMRecordType) error {
	return c.removeEntity(key)
}

type AccumulationRegisterSummyPoFinmonitoringu struct {
	Recorder     String                                             `json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterSummyPoFinmonitoringuRowType `json:"RecordSet,omitempty"`
	RecorderType String                                             `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterSummyPoFinmonitoringu) APIEntityType() string {
	return "AccumulationRegister_СуммыПоФинмониторингу"
}
func NewAccumulationRegisterSummyPoFinmonitoringu(data string, prevError error) (*AccumulationRegisterSummyPoFinmonitoringu, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterSummyPoFinmonitoringu)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterSummyPoFinmonitoringu(entity AccumulationRegisterSummyPoFinmonitoringu) (*AccumulationRegisterSummyPoFinmonitoringu, error) {
	return NewAccumulationRegisterSummyPoFinmonitoringu(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterSummyPoFinmonitoringu(key PrimaryAccumulationRegisterSummyPoFinmonitoringu, fields []string) (*AccumulationRegisterSummyPoFinmonitoringu, error) {
	return NewAccumulationRegisterSummyPoFinmonitoringu(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterSummyPoFinmonitoringus(where Where) (*[]AccumulationRegisterSummyPoFinmonitoringu, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterSummyPoFinmonitoringu `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_СуммыПоФинмониторингу", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterSummyPoFinmonitoringu(key PrimaryAccumulationRegisterSummyPoFinmonitoringu, entity AccumulationRegisterSummyPoFinmonitoringu) (*AccumulationRegisterSummyPoFinmonitoringu, error) {
	return NewAccumulationRegisterSummyPoFinmonitoringu(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterSummyPoFinmonitoringu(key PrimaryAccumulationRegisterSummyPoFinmonitoringu) error {
	return c.removeEntity(key)
}

type AccumulationRegisterSummyPoFinmonitoringuRecordType struct {
	Recorder              String    `json:"Recorder,omitempty"`
	Period                *DateTime `json:"Period,omitempty"`
	LineNumber            Int64     `json:"LineNumber,omitempty"`
	Active                *Boolean  `json:"Active,omitempty"`
	RecordType            *String   `json:"RecordType,omitempty"`
	OrganizatsiiaKey      *Guid     `json:"Организация_Key,omitempty"`
	DogovorKontragentaKey *Guid     `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentUcheta        *String   `json:"ДокументУчета,omitempty"`
	SummaOtgruzki         *Double   `json:"СуммаОтгрузки,omitempty"`
	SummaOplaty           *Double   `json:"СуммаОплаты,omitempty"`
	SummaVozvrata         *Double   `json:"СуммаВозврата,omitempty"`
	RecorderType          String    `json:"Recorder_Type,omitempty"`
	DokumentUchetaType    *String   `json:"ДокументУчета_Type,omitempty"`
}

func (AccumulationRegisterSummyPoFinmonitoringuRecordType) APIEntityType() string {
	return "AccumulationRegister_СуммыПоФинмониторингу_RecordType"
}
func NewAccumulationRegisterSummyPoFinmonitoringuRecordType(data string, prevError error) (*AccumulationRegisterSummyPoFinmonitoringuRecordType, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterSummyPoFinmonitoringuRecordType)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterSummyPoFinmonitoringuRecordType(entity AccumulationRegisterSummyPoFinmonitoringuRecordType) (*AccumulationRegisterSummyPoFinmonitoringuRecordType, error) {
	return NewAccumulationRegisterSummyPoFinmonitoringuRecordType(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterSummyPoFinmonitoringuRecordType(key PrimaryAccumulationRegisterSummyPoFinmonitoringuRecordType, fields []string) (*AccumulationRegisterSummyPoFinmonitoringuRecordType, error) {
	return NewAccumulationRegisterSummyPoFinmonitoringuRecordType(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterSummyPoFinmonitoringuRecordTypes(where Where) (*[]AccumulationRegisterSummyPoFinmonitoringuRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterSummyPoFinmonitoringuRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_СуммыПоФинмониторингу_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterSummyPoFinmonitoringuRecordType(key PrimaryAccumulationRegisterSummyPoFinmonitoringuRecordType, entity AccumulationRegisterSummyPoFinmonitoringuRecordType) (*AccumulationRegisterSummyPoFinmonitoringuRecordType, error) {
	return NewAccumulationRegisterSummyPoFinmonitoringuRecordType(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterSummyPoFinmonitoringuRecordType(key PrimaryAccumulationRegisterSummyPoFinmonitoringuRecordType) error {
	return c.removeEntity(key)
}

type InformationRegisterTsenyNomenklaturyKontragentov struct {
	Recorder     String                                                    `json:"Recorder,omitempty"`
	RecordSet    []InformationRegisterTsenyNomenklaturyKontragentovRowType `json:"RecordSet,omitempty"`
	RecorderType String                                                    `json:"Recorder_Type,omitempty"`
}

func (InformationRegisterTsenyNomenklaturyKontragentov) APIEntityType() string {
	return "InformationRegister_ЦеныНоменклатурыКонтрагентов"
}
func NewInformationRegisterTsenyNomenklaturyKontragentov(data string, prevError error) (*InformationRegisterTsenyNomenklaturyKontragentov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(InformationRegisterTsenyNomenklaturyKontragentov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateInformationRegisterTsenyNomenklaturyKontragentov(entity InformationRegisterTsenyNomenklaturyKontragentov) (*InformationRegisterTsenyNomenklaturyKontragentov, error) {
	return NewInformationRegisterTsenyNomenklaturyKontragentov(c.createEntity(entity))
}
func (c *Client) InformationRegisterTsenyNomenklaturyKontragentov(key PrimaryInformationRegisterTsenyNomenklaturyKontragentov, fields []string) (*InformationRegisterTsenyNomenklaturyKontragentov, error) {
	return NewInformationRegisterTsenyNomenklaturyKontragentov(c.getEntity(key, fields))
}
func (c *Client) InformationRegisterTsenyNomenklaturyKontragentovs(where Where) (*[]InformationRegisterTsenyNomenklaturyKontragentov, error) {
	type ReturnObj struct {
		Value []InformationRegisterTsenyNomenklaturyKontragentov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("InformationRegister_ЦеныНоменклатурыКонтрагентов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateInformationRegisterTsenyNomenklaturyKontragentov(key PrimaryInformationRegisterTsenyNomenklaturyKontragentov, entity InformationRegisterTsenyNomenklaturyKontragentov) (*InformationRegisterTsenyNomenklaturyKontragentov, error) {
	return NewInformationRegisterTsenyNomenklaturyKontragentov(c.updateEntity(key, entity))
}
func (c *Client) DeleteInformationRegisterTsenyNomenklaturyKontragentov(key PrimaryInformationRegisterTsenyNomenklaturyKontragentov) error {
	return c.removeEntity(key)
}

type InformationRegisterTsenyNomenklaturyKontragentovRecordType struct {
	Recorder                       *String  `json:"Recorder,omitempty"`
	Period                         DateTime `json:"Period,omitempty"`
	LineNumber                     *Int64   `json:"LineNumber,omitempty"`
	Active                         *Boolean `json:"Active,omitempty"`
	TipTsenKey                     Guid     `json:"ТипЦен_Key,omitempty"`
	ItemKey                        Guid     `json:"Номенклатура_Key,omitempty"`
	InstanceKey                    Guid     `json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey Guid     `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        Guid     `json:"Размер_Key,omitempty"`
	Cost                           *Double  `json:"Цена,omitempty"`
	ValiutaKey                     *Guid    `json:"Валюта_Key,omitempty"`
	EdinitsaIzmereniiaKey          *Guid    `json:"ЕдиницаИзмерения_Key,omitempty"`
	RecorderType                   *String  `json:"Recorder_Type,omitempty"`
}

func (InformationRegisterTsenyNomenklaturyKontragentovRecordType) APIEntityType() string {
	return "InformationRegister_ЦеныНоменклатурыКонтрагентов_RecordType"
}
func NewInformationRegisterTsenyNomenklaturyKontragentovRecordType(data string, prevError error) (*InformationRegisterTsenyNomenklaturyKontragentovRecordType, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(InformationRegisterTsenyNomenklaturyKontragentovRecordType)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateInformationRegisterTsenyNomenklaturyKontragentovRecordType(entity InformationRegisterTsenyNomenklaturyKontragentovRecordType) (*InformationRegisterTsenyNomenklaturyKontragentovRecordType, error) {
	return NewInformationRegisterTsenyNomenklaturyKontragentovRecordType(c.createEntity(entity))
}
func (c *Client) InformationRegisterTsenyNomenklaturyKontragentovRecordType(key PrimaryInformationRegisterTsenyNomenklaturyKontragentovRecordType, fields []string) (*InformationRegisterTsenyNomenklaturyKontragentovRecordType, error) {
	return NewInformationRegisterTsenyNomenklaturyKontragentovRecordType(c.getEntity(key, fields))
}
func (c *Client) InformationRegisterTsenyNomenklaturyKontragentovRecordTypes(where Where) (*[]InformationRegisterTsenyNomenklaturyKontragentovRecordType, error) {
	type ReturnObj struct {
		Value []InformationRegisterTsenyNomenklaturyKontragentovRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("InformationRegister_ЦеныНоменклатурыКонтрагентов_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateInformationRegisterTsenyNomenklaturyKontragentovRecordType(key PrimaryInformationRegisterTsenyNomenklaturyKontragentovRecordType, entity InformationRegisterTsenyNomenklaturyKontragentovRecordType) (*InformationRegisterTsenyNomenklaturyKontragentovRecordType, error) {
	return NewInformationRegisterTsenyNomenklaturyKontragentovRecordType(c.updateEntity(key, entity))
}
func (c *Client) DeleteInformationRegisterTsenyNomenklaturyKontragentovRecordType(key PrimaryInformationRegisterTsenyNomenklaturyKontragentovRecordType) error {
	return c.removeEntity(key)
}

type AccumulationRegisterVzaimoraschetySKontragentami struct {
	Recorder     String                                                    `json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterVzaimoraschetySKontragentamiRowType `json:"RecordSet,omitempty"`
	RecorderType String                                                    `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterVzaimoraschetySKontragentami) APIEntityType() string {
	return "AccumulationRegister_ВзаиморасчетыСКонтрагентами"
}
func NewAccumulationRegisterVzaimoraschetySKontragentami(data string, prevError error) (*AccumulationRegisterVzaimoraschetySKontragentami, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterVzaimoraschetySKontragentami)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterVzaimoraschetySKontragentami(entity AccumulationRegisterVzaimoraschetySKontragentami) (*AccumulationRegisterVzaimoraschetySKontragentami, error) {
	return NewAccumulationRegisterVzaimoraschetySKontragentami(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterVzaimoraschetySKontragentami(key PrimaryAccumulationRegisterVzaimoraschetySKontragentami, fields []string) (*AccumulationRegisterVzaimoraschetySKontragentami, error) {
	return NewAccumulationRegisterVzaimoraschetySKontragentami(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterVzaimoraschetySKontragentamis(where Where) (*[]AccumulationRegisterVzaimoraschetySKontragentami, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterVzaimoraschetySKontragentami `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ВзаиморасчетыСКонтрагентами", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterVzaimoraschetySKontragentami(key PrimaryAccumulationRegisterVzaimoraschetySKontragentami, entity AccumulationRegisterVzaimoraschetySKontragentami) (*AccumulationRegisterVzaimoraschetySKontragentami, error) {
	return NewAccumulationRegisterVzaimoraschetySKontragentami(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterVzaimoraschetySKontragentami(key PrimaryAccumulationRegisterVzaimoraschetySKontragentami) error {
	return c.removeEntity(key)
}

type AccumulationRegisterVzaimoraschetySKontragentamiRecordType struct {
	Recorder              String    `json:"Recorder,omitempty"`
	Period                *DateTime `json:"Period,omitempty"`
	LineNumber            Int64     `json:"LineNumber,omitempty"`
	Active                *Boolean  `json:"Active,omitempty"`
	RecordType            *String   `json:"RecordType,omitempty"`
	DogovorKontragentaKey *Guid     `json:"ДоговорКонтрагента_Key,omitempty"`
	Sdelka                *String   `json:"Сделка,omitempty"`
	SummaVzaimoraschetov  *Double   `json:"СуммаВзаиморасчетов,omitempty"`
	SummaUpr              *Double   `json:"СуммаУпр,omitempty"`
	RecorderType          String    `json:"Recorder_Type,omitempty"`
	SdelkaType            *String   `json:"Сделка_Type,omitempty"`
}

func (AccumulationRegisterVzaimoraschetySKontragentamiRecordType) APIEntityType() string {
	return "AccumulationRegister_ВзаиморасчетыСКонтрагентами_RecordType"
}
func NewAccumulationRegisterVzaimoraschetySKontragentamiRecordType(data string, prevError error) (*AccumulationRegisterVzaimoraschetySKontragentamiRecordType, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterVzaimoraschetySKontragentamiRecordType)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterVzaimoraschetySKontragentamiRecordType(entity AccumulationRegisterVzaimoraschetySKontragentamiRecordType) (*AccumulationRegisterVzaimoraschetySKontragentamiRecordType, error) {
	return NewAccumulationRegisterVzaimoraschetySKontragentamiRecordType(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterVzaimoraschetySKontragentamiRecordType(key PrimaryAccumulationRegisterVzaimoraschetySKontragentamiRecordType, fields []string) (*AccumulationRegisterVzaimoraschetySKontragentamiRecordType, error) {
	return NewAccumulationRegisterVzaimoraschetySKontragentamiRecordType(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterVzaimoraschetySKontragentamiRecordTypes(where Where) (*[]AccumulationRegisterVzaimoraschetySKontragentamiRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterVzaimoraschetySKontragentamiRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ВзаиморасчетыСКонтрагентами_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterVzaimoraschetySKontragentamiRecordType(key PrimaryAccumulationRegisterVzaimoraschetySKontragentamiRecordType, entity AccumulationRegisterVzaimoraschetySKontragentamiRecordType) (*AccumulationRegisterVzaimoraschetySKontragentamiRecordType, error) {
	return NewAccumulationRegisterVzaimoraschetySKontragentamiRecordType(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterVzaimoraschetySKontragentamiRecordType(key PrimaryAccumulationRegisterVzaimoraschetySKontragentamiRecordType) error {
	return c.removeEntity(key)
}

type AccumulationRegisterSummyPokupokPoDiskontnymKartam struct {
	Recorder     String                                                      `json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterSummyPokupokPoDiskontnymKartamRowType `json:"RecordSet,omitempty"`
	RecorderType String                                                      `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterSummyPokupokPoDiskontnymKartam) APIEntityType() string {
	return "AccumulationRegister_СуммыПокупокПоДисконтнымКартам"
}
func NewAccumulationRegisterSummyPokupokPoDiskontnymKartam(data string, prevError error) (*AccumulationRegisterSummyPokupokPoDiskontnymKartam, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterSummyPokupokPoDiskontnymKartam)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterSummyPokupokPoDiskontnymKartam(entity AccumulationRegisterSummyPokupokPoDiskontnymKartam) (*AccumulationRegisterSummyPokupokPoDiskontnymKartam, error) {
	return NewAccumulationRegisterSummyPokupokPoDiskontnymKartam(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterSummyPokupokPoDiskontnymKartam(key PrimaryAccumulationRegisterSummyPokupokPoDiskontnymKartam, fields []string) (*AccumulationRegisterSummyPokupokPoDiskontnymKartam, error) {
	return NewAccumulationRegisterSummyPokupokPoDiskontnymKartam(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterSummyPokupokPoDiskontnymKartams(where Where) (*[]AccumulationRegisterSummyPokupokPoDiskontnymKartam, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterSummyPokupokPoDiskontnymKartam `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_СуммыПокупокПоДисконтнымКартам", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterSummyPokupokPoDiskontnymKartam(key PrimaryAccumulationRegisterSummyPokupokPoDiskontnymKartam, entity AccumulationRegisterSummyPokupokPoDiskontnymKartam) (*AccumulationRegisterSummyPokupokPoDiskontnymKartam, error) {
	return NewAccumulationRegisterSummyPokupokPoDiskontnymKartam(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterSummyPokupokPoDiskontnymKartam(key PrimaryAccumulationRegisterSummyPokupokPoDiskontnymKartam) error {
	return c.removeEntity(key)
}

type AccumulationRegisterSummyPokupokPoDiskontnymKartamRecordType struct {
	Recorder               String    `json:"Recorder,omitempty"`
	Period                 *DateTime `json:"Period,omitempty"`
	LineNumber             Int64     `json:"LineNumber,omitempty"`
	Active                 *Boolean  `json:"Active,omitempty"`
	RecordType             *String   `json:"RecordType,omitempty"`
	MemberCardKey          *Guid     `json:"ДисконтнаяКарта_Key,omitempty"`
	DataSpisaniia          *DateTime `json:"ДатаСписания,omitempty"`
	Sum                    *Double   `json:"Сумма,omitempty"`
	SummaBonusov           *Double   `json:"СуммаБонусов,omitempty"`
	SummaVremennykhBonusov *Double   `json:"СуммаВременныхБонусов,omitempty"`
	RecorderType           String    `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterSummyPokupokPoDiskontnymKartamRecordType) APIEntityType() string {
	return "AccumulationRegister_СуммыПокупокПоДисконтнымКартам_RecordType"
}
func NewAccumulationRegisterSummyPokupokPoDiskontnymKartamRecordType(data string, prevError error) (*AccumulationRegisterSummyPokupokPoDiskontnymKartamRecordType, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterSummyPokupokPoDiskontnymKartamRecordType)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterSummyPokupokPoDiskontnymKartamRecordType(entity AccumulationRegisterSummyPokupokPoDiskontnymKartamRecordType) (*AccumulationRegisterSummyPokupokPoDiskontnymKartamRecordType, error) {
	return NewAccumulationRegisterSummyPokupokPoDiskontnymKartamRecordType(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterSummyPokupokPoDiskontnymKartamRecordType(key PrimaryAccumulationRegisterSummyPokupokPoDiskontnymKartamRecordType, fields []string) (*AccumulationRegisterSummyPokupokPoDiskontnymKartamRecordType, error) {
	return NewAccumulationRegisterSummyPokupokPoDiskontnymKartamRecordType(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterSummyPokupokPoDiskontnymKartamRecordTypes(where Where) (*[]AccumulationRegisterSummyPokupokPoDiskontnymKartamRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterSummyPokupokPoDiskontnymKartamRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_СуммыПокупокПоДисконтнымКартам_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterSummyPokupokPoDiskontnymKartamRecordType(key PrimaryAccumulationRegisterSummyPokupokPoDiskontnymKartamRecordType, entity AccumulationRegisterSummyPokupokPoDiskontnymKartamRecordType) (*AccumulationRegisterSummyPokupokPoDiskontnymKartamRecordType, error) {
	return NewAccumulationRegisterSummyPokupokPoDiskontnymKartamRecordType(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterSummyPokupokPoDiskontnymKartamRecordType(key PrimaryAccumulationRegisterSummyPokupokPoDiskontnymKartamRecordType) error {
	return c.removeEntity(key)
}

type AccumulationRegisterVypolneniePlanaProdazh struct {
	Recorder     String                                              `json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterVypolneniePlanaProdazhRowType `json:"RecordSet,omitempty"`
	RecorderType String                                              `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterVypolneniePlanaProdazh) APIEntityType() string {
	return "AccumulationRegister_ВыполнениеПланаПродаж"
}
func NewAccumulationRegisterVypolneniePlanaProdazh(data string, prevError error) (*AccumulationRegisterVypolneniePlanaProdazh, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterVypolneniePlanaProdazh)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterVypolneniePlanaProdazh(entity AccumulationRegisterVypolneniePlanaProdazh) (*AccumulationRegisterVypolneniePlanaProdazh, error) {
	return NewAccumulationRegisterVypolneniePlanaProdazh(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterVypolneniePlanaProdazh(key PrimaryAccumulationRegisterVypolneniePlanaProdazh, fields []string) (*AccumulationRegisterVypolneniePlanaProdazh, error) {
	return NewAccumulationRegisterVypolneniePlanaProdazh(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterVypolneniePlanaProdazhs(where Where) (*[]AccumulationRegisterVypolneniePlanaProdazh, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterVypolneniePlanaProdazh `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ВыполнениеПланаПродаж", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterVypolneniePlanaProdazh(key PrimaryAccumulationRegisterVypolneniePlanaProdazh, entity AccumulationRegisterVypolneniePlanaProdazh) (*AccumulationRegisterVypolneniePlanaProdazh, error) {
	return NewAccumulationRegisterVypolneniePlanaProdazh(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterVypolneniePlanaProdazh(key PrimaryAccumulationRegisterVypolneniePlanaProdazh) error {
	return c.removeEntity(key)
}

type AccumulationRegisterVypolneniePlanaProdazhRecordType struct {
	Recorder      String    `json:"Recorder,omitempty"`
	Period        *DateTime `json:"Period,omitempty"`
	LineNumber    Int64     `json:"LineNumber,omitempty"`
	Active        *Boolean  `json:"Active,omitempty"`
	DepartmentKey *Guid     `json:"Склад_Key,omitempty"`
	SummaPlan     *Double   `json:"СуммаПлан,omitempty"`
	SummaFakt     *Double   `json:"СуммаФакт,omitempty"`
	RecorderType  String    `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterVypolneniePlanaProdazhRecordType) APIEntityType() string {
	return "AccumulationRegister_ВыполнениеПланаПродаж_RecordType"
}
func NewAccumulationRegisterVypolneniePlanaProdazhRecordType(data string, prevError error) (*AccumulationRegisterVypolneniePlanaProdazhRecordType, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterVypolneniePlanaProdazhRecordType)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterVypolneniePlanaProdazhRecordType(entity AccumulationRegisterVypolneniePlanaProdazhRecordType) (*AccumulationRegisterVypolneniePlanaProdazhRecordType, error) {
	return NewAccumulationRegisterVypolneniePlanaProdazhRecordType(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterVypolneniePlanaProdazhRecordType(key PrimaryAccumulationRegisterVypolneniePlanaProdazhRecordType, fields []string) (*AccumulationRegisterVypolneniePlanaProdazhRecordType, error) {
	return NewAccumulationRegisterVypolneniePlanaProdazhRecordType(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterVypolneniePlanaProdazhRecordTypes(where Where) (*[]AccumulationRegisterVypolneniePlanaProdazhRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterVypolneniePlanaProdazhRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ВыполнениеПланаПродаж_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterVypolneniePlanaProdazhRecordType(key PrimaryAccumulationRegisterVypolneniePlanaProdazhRecordType, entity AccumulationRegisterVypolneniePlanaProdazhRecordType) (*AccumulationRegisterVypolneniePlanaProdazhRecordType, error) {
	return NewAccumulationRegisterVypolneniePlanaProdazhRecordType(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterVypolneniePlanaProdazhRecordType(key PrimaryAccumulationRegisterVypolneniePlanaProdazhRecordType) error {
	return c.removeEntity(key)
}

type AccumulationRegisterDavalcheskiiMetall struct {
	Recorder     String                                          `json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterDavalcheskiiMetallRowType `json:"RecordSet,omitempty"`
	RecorderType String                                          `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterDavalcheskiiMetall) APIEntityType() string {
	return "AccumulationRegister_ДавальческийМеталл"
}
func NewAccumulationRegisterDavalcheskiiMetall(data string, prevError error) (*AccumulationRegisterDavalcheskiiMetall, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterDavalcheskiiMetall)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterDavalcheskiiMetall(entity AccumulationRegisterDavalcheskiiMetall) (*AccumulationRegisterDavalcheskiiMetall, error) {
	return NewAccumulationRegisterDavalcheskiiMetall(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterDavalcheskiiMetall(key PrimaryAccumulationRegisterDavalcheskiiMetall, fields []string) (*AccumulationRegisterDavalcheskiiMetall, error) {
	return NewAccumulationRegisterDavalcheskiiMetall(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterDavalcheskiiMetalls(where Where) (*[]AccumulationRegisterDavalcheskiiMetall, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterDavalcheskiiMetall `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ДавальческийМеталл", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterDavalcheskiiMetall(key PrimaryAccumulationRegisterDavalcheskiiMetall, entity AccumulationRegisterDavalcheskiiMetall) (*AccumulationRegisterDavalcheskiiMetall, error) {
	return NewAccumulationRegisterDavalcheskiiMetall(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterDavalcheskiiMetall(key PrimaryAccumulationRegisterDavalcheskiiMetall) error {
	return c.removeEntity(key)
}

type AccumulationRegisterDavalcheskiiMetallRecordType struct {
	Recorder              String    `json:"Recorder,omitempty"`
	Period                *DateTime `json:"Period,omitempty"`
	LineNumber            Int64     `json:"LineNumber,omitempty"`
	Active                *Boolean  `json:"Active,omitempty"`
	RecordType            *String   `json:"RecordType,omitempty"`
	OrganizatsiiaKey      *Guid     `json:"Организация_Key,omitempty"`
	DogovorKontragentaKey *Guid     `json:"ДоговорКонтрагента_Key,omitempty"`
	MetallKey             *Guid     `json:"Металл_Key,omitempty"`
	Weight                *Double   `json:"Вес,omitempty"`
	RecorderType          String    `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterDavalcheskiiMetallRecordType) APIEntityType() string {
	return "AccumulationRegister_ДавальческийМеталл_RecordType"
}
func NewAccumulationRegisterDavalcheskiiMetallRecordType(data string, prevError error) (*AccumulationRegisterDavalcheskiiMetallRecordType, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterDavalcheskiiMetallRecordType)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterDavalcheskiiMetallRecordType(entity AccumulationRegisterDavalcheskiiMetallRecordType) (*AccumulationRegisterDavalcheskiiMetallRecordType, error) {
	return NewAccumulationRegisterDavalcheskiiMetallRecordType(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterDavalcheskiiMetallRecordType(key PrimaryAccumulationRegisterDavalcheskiiMetallRecordType, fields []string) (*AccumulationRegisterDavalcheskiiMetallRecordType, error) {
	return NewAccumulationRegisterDavalcheskiiMetallRecordType(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterDavalcheskiiMetallRecordTypes(where Where) (*[]AccumulationRegisterDavalcheskiiMetallRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterDavalcheskiiMetallRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ДавальческийМеталл_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterDavalcheskiiMetallRecordType(key PrimaryAccumulationRegisterDavalcheskiiMetallRecordType, entity AccumulationRegisterDavalcheskiiMetallRecordType) (*AccumulationRegisterDavalcheskiiMetallRecordType, error) {
	return NewAccumulationRegisterDavalcheskiiMetallRecordType(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterDavalcheskiiMetallRecordType(key PrimaryAccumulationRegisterDavalcheskiiMetallRecordType) error {
	return c.removeEntity(key)
}

type AccumulationRegisterDenezhnyeSredstva struct {
	Recorder     String                                         `json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterDenezhnyeSredstvaRowType `json:"RecordSet,omitempty"`
	RecorderType String                                         `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterDenezhnyeSredstva) APIEntityType() string {
	return "AccumulationRegister_ДенежныеСредства"
}
func NewAccumulationRegisterDenezhnyeSredstva(data string, prevError error) (*AccumulationRegisterDenezhnyeSredstva, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterDenezhnyeSredstva)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterDenezhnyeSredstva(entity AccumulationRegisterDenezhnyeSredstva) (*AccumulationRegisterDenezhnyeSredstva, error) {
	return NewAccumulationRegisterDenezhnyeSredstva(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterDenezhnyeSredstva(key PrimaryAccumulationRegisterDenezhnyeSredstva, fields []string) (*AccumulationRegisterDenezhnyeSredstva, error) {
	return NewAccumulationRegisterDenezhnyeSredstva(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterDenezhnyeSredstvas(where Where) (*[]AccumulationRegisterDenezhnyeSredstva, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterDenezhnyeSredstva `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ДенежныеСредства", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterDenezhnyeSredstva(key PrimaryAccumulationRegisterDenezhnyeSredstva, entity AccumulationRegisterDenezhnyeSredstva) (*AccumulationRegisterDenezhnyeSredstva, error) {
	return NewAccumulationRegisterDenezhnyeSredstva(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterDenezhnyeSredstva(key PrimaryAccumulationRegisterDenezhnyeSredstva) error {
	return c.removeEntity(key)
}

type AccumulationRegisterDenezhnyeSredstvaRecordType struct {
	Recorder                 String    `json:"Recorder,omitempty"`
	Period                   *DateTime `json:"Period,omitempty"`
	LineNumber               Int64     `json:"LineNumber,omitempty"`
	Active                   *Boolean  `json:"Active,omitempty"`
	RecordType               *String   `json:"RecordType,omitempty"`
	OrganizatsiiaKey         *Guid     `json:"Организация_Key,omitempty"`
	VidDenezhnykhSredstv     *String   `json:"ВидДенежныхСредств,omitempty"`
	BankovskiiSchetKassa     *String   `json:"БанковскийСчетКасса,omitempty"`
	Sum                      *Double   `json:"Сумма,omitempty"`
	SummaUpr                 *Double   `json:"СуммаУпр,omitempty"`
	RecorderType             String    `json:"Recorder_Type,omitempty"`
	BankovskiiSchetKassaType *String   `json:"БанковскийСчетКасса_Type,omitempty"`
}

func (AccumulationRegisterDenezhnyeSredstvaRecordType) APIEntityType() string {
	return "AccumulationRegister_ДенежныеСредства_RecordType"
}
func NewAccumulationRegisterDenezhnyeSredstvaRecordType(data string, prevError error) (*AccumulationRegisterDenezhnyeSredstvaRecordType, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterDenezhnyeSredstvaRecordType)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterDenezhnyeSredstvaRecordType(entity AccumulationRegisterDenezhnyeSredstvaRecordType) (*AccumulationRegisterDenezhnyeSredstvaRecordType, error) {
	return NewAccumulationRegisterDenezhnyeSredstvaRecordType(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterDenezhnyeSredstvaRecordType(key PrimaryAccumulationRegisterDenezhnyeSredstvaRecordType, fields []string) (*AccumulationRegisterDenezhnyeSredstvaRecordType, error) {
	return NewAccumulationRegisterDenezhnyeSredstvaRecordType(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterDenezhnyeSredstvaRecordTypes(where Where) (*[]AccumulationRegisterDenezhnyeSredstvaRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterDenezhnyeSredstvaRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ДенежныеСредства_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterDenezhnyeSredstvaRecordType(key PrimaryAccumulationRegisterDenezhnyeSredstvaRecordType, entity AccumulationRegisterDenezhnyeSredstvaRecordType) (*AccumulationRegisterDenezhnyeSredstvaRecordType, error) {
	return NewAccumulationRegisterDenezhnyeSredstvaRecordType(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterDenezhnyeSredstvaRecordType(key PrimaryAccumulationRegisterDenezhnyeSredstvaRecordType) error {
	return c.removeEntity(key)
}

type AccumulationRegisterTovaryPeredannye struct {
	Recorder     String                                        `json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterTovaryPeredannyeRowType `json:"RecordSet,omitempty"`
	RecorderType String                                        `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterTovaryPeredannye) APIEntityType() string {
	return "AccumulationRegister_ТоварыПереданные"
}
func NewAccumulationRegisterTovaryPeredannye(data string, prevError error) (*AccumulationRegisterTovaryPeredannye, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterTovaryPeredannye)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterTovaryPeredannye(entity AccumulationRegisterTovaryPeredannye) (*AccumulationRegisterTovaryPeredannye, error) {
	return NewAccumulationRegisterTovaryPeredannye(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterTovaryPeredannye(key PrimaryAccumulationRegisterTovaryPeredannye, fields []string) (*AccumulationRegisterTovaryPeredannye, error) {
	return NewAccumulationRegisterTovaryPeredannye(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterTovaryPeredannyes(where Where) (*[]AccumulationRegisterTovaryPeredannye, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterTovaryPeredannye `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ТоварыПереданные", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterTovaryPeredannye(key PrimaryAccumulationRegisterTovaryPeredannye, entity AccumulationRegisterTovaryPeredannye) (*AccumulationRegisterTovaryPeredannye, error) {
	return NewAccumulationRegisterTovaryPeredannye(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterTovaryPeredannye(key PrimaryAccumulationRegisterTovaryPeredannye) error {
	return c.removeEntity(key)
}

type AccumulationRegisterTovaryPeredannyeRecordType struct {
	Recorder                       String    `json:"Recorder,omitempty"`
	Period                         *DateTime `json:"Period,omitempty"`
	LineNumber                     Int64     `json:"LineNumber,omitempty"`
	Active                         *Boolean  `json:"Active,omitempty"`
	RecordType                     *String   `json:"RecordType,omitempty"`
	ItemKey                        *Guid     `json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid     `json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid     `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid     `json:"Размер_Key,omitempty"`
	DogovorKontragentaKey          *Guid     `json:"ДоговорКонтрагента_Key,omitempty"`
	Sdelka                         *String   `json:"Сделка,omitempty"`
	Quantity                       *Int64    `json:"Количество,omitempty"`
	Weight                         *Double   `json:"Вес,omitempty"`
	SummaVzaimoraschetov           *Double   `json:"СуммаВзаиморасчетов,omitempty"`
	RecorderType                   String    `json:"Recorder_Type,omitempty"`
	SdelkaType                     *String   `json:"Сделка_Type,omitempty"`
}

func (AccumulationRegisterTovaryPeredannyeRecordType) APIEntityType() string {
	return "AccumulationRegister_ТоварыПереданные_RecordType"
}
func NewAccumulationRegisterTovaryPeredannyeRecordType(data string, prevError error) (*AccumulationRegisterTovaryPeredannyeRecordType, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterTovaryPeredannyeRecordType)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterTovaryPeredannyeRecordType(entity AccumulationRegisterTovaryPeredannyeRecordType) (*AccumulationRegisterTovaryPeredannyeRecordType, error) {
	return NewAccumulationRegisterTovaryPeredannyeRecordType(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterTovaryPeredannyeRecordType(key PrimaryAccumulationRegisterTovaryPeredannyeRecordType, fields []string) (*AccumulationRegisterTovaryPeredannyeRecordType, error) {
	return NewAccumulationRegisterTovaryPeredannyeRecordType(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterTovaryPeredannyeRecordTypes(where Where) (*[]AccumulationRegisterTovaryPeredannyeRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterTovaryPeredannyeRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ТоварыПереданные_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterTovaryPeredannyeRecordType(key PrimaryAccumulationRegisterTovaryPeredannyeRecordType, entity AccumulationRegisterTovaryPeredannyeRecordType) (*AccumulationRegisterTovaryPeredannyeRecordType, error) {
	return NewAccumulationRegisterTovaryPeredannyeRecordType(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterTovaryPeredannyeRecordType(key PrimaryAccumulationRegisterTovaryPeredannyeRecordType) error {
	return c.removeEntity(key)
}

type AccumulationRegisterDenezhnyeSredstvaKSpisaniiu struct {
	Recorder     String                                                   `json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterDenezhnyeSredstvaKSpisaniiuRowType `json:"RecordSet,omitempty"`
	RecorderType String                                                   `json:"Recorder_Type,omitempty"`
}

func (AccumulationRegisterDenezhnyeSredstvaKSpisaniiu) APIEntityType() string {
	return "AccumulationRegister_ДенежныеСредстваКСписанию"
}
func NewAccumulationRegisterDenezhnyeSredstvaKSpisaniiu(data string, prevError error) (*AccumulationRegisterDenezhnyeSredstvaKSpisaniiu, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterDenezhnyeSredstvaKSpisaniiu)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterDenezhnyeSredstvaKSpisaniiu(entity AccumulationRegisterDenezhnyeSredstvaKSpisaniiu) (*AccumulationRegisterDenezhnyeSredstvaKSpisaniiu, error) {
	return NewAccumulationRegisterDenezhnyeSredstvaKSpisaniiu(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterDenezhnyeSredstvaKSpisaniiu(key PrimaryAccumulationRegisterDenezhnyeSredstvaKSpisaniiu, fields []string) (*AccumulationRegisterDenezhnyeSredstvaKSpisaniiu, error) {
	return NewAccumulationRegisterDenezhnyeSredstvaKSpisaniiu(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterDenezhnyeSredstvaKSpisaniius(where Where) (*[]AccumulationRegisterDenezhnyeSredstvaKSpisaniiu, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterDenezhnyeSredstvaKSpisaniiu `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ДенежныеСредстваКСписанию", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterDenezhnyeSredstvaKSpisaniiu(key PrimaryAccumulationRegisterDenezhnyeSredstvaKSpisaniiu, entity AccumulationRegisterDenezhnyeSredstvaKSpisaniiu) (*AccumulationRegisterDenezhnyeSredstvaKSpisaniiu, error) {
	return NewAccumulationRegisterDenezhnyeSredstvaKSpisaniiu(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterDenezhnyeSredstvaKSpisaniiu(key PrimaryAccumulationRegisterDenezhnyeSredstvaKSpisaniiu) error {
	return c.removeEntity(key)
}

type AccumulationRegisterDenezhnyeSredstvaKSpisaniiuRecordType struct {
	Recorder                 String    `json:"Recorder,omitempty"`
	Period                   *DateTime `json:"Period,omitempty"`
	LineNumber               Int64     `json:"LineNumber,omitempty"`
	Active                   *Boolean  `json:"Active,omitempty"`
	RecordType               *String   `json:"RecordType,omitempty"`
	VidDenezhnykhSredstv     *String   `json:"ВидДенежныхСредств,omitempty"`
	BankovskiiSchetKassa     *String   `json:"БанковскийСчетКасса,omitempty"`
	DokumentSpisaniia        *String   `json:"ДокументСписания,omitempty"`
	TypeOfMovingMoneyKey     *Guid     `json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	Sum                      *Double   `json:"Сумма,omitempty"`
	RecorderType             String    `json:"Recorder_Type,omitempty"`
	BankovskiiSchetKassaType *String   `json:"БанковскийСчетКасса_Type,omitempty"`
	DokumentSpisaniiaType    *String   `json:"ДокументСписания_Type,omitempty"`
}

func (AccumulationRegisterDenezhnyeSredstvaKSpisaniiuRecordType) APIEntityType() string {
	return "AccumulationRegister_ДенежныеСредстваКСписанию_RecordType"
}
func NewAccumulationRegisterDenezhnyeSredstvaKSpisaniiuRecordType(data string, prevError error) (*AccumulationRegisterDenezhnyeSredstvaKSpisaniiuRecordType, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(AccumulationRegisterDenezhnyeSredstvaKSpisaniiuRecordType)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateAccumulationRegisterDenezhnyeSredstvaKSpisaniiuRecordType(entity AccumulationRegisterDenezhnyeSredstvaKSpisaniiuRecordType) (*AccumulationRegisterDenezhnyeSredstvaKSpisaniiuRecordType, error) {
	return NewAccumulationRegisterDenezhnyeSredstvaKSpisaniiuRecordType(c.createEntity(entity))
}
func (c *Client) AccumulationRegisterDenezhnyeSredstvaKSpisaniiuRecordType(key PrimaryAccumulationRegisterDenezhnyeSredstvaKSpisaniiuRecordType, fields []string) (*AccumulationRegisterDenezhnyeSredstvaKSpisaniiuRecordType, error) {
	return NewAccumulationRegisterDenezhnyeSredstvaKSpisaniiuRecordType(c.getEntity(key, fields))
}
func (c *Client) AccumulationRegisterDenezhnyeSredstvaKSpisaniiuRecordTypes(where Where) (*[]AccumulationRegisterDenezhnyeSredstvaKSpisaniiuRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterDenezhnyeSredstvaKSpisaniiuRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ДенежныеСредстваКСписанию_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateAccumulationRegisterDenezhnyeSredstvaKSpisaniiuRecordType(key PrimaryAccumulationRegisterDenezhnyeSredstvaKSpisaniiuRecordType, entity AccumulationRegisterDenezhnyeSredstvaKSpisaniiuRecordType) (*AccumulationRegisterDenezhnyeSredstvaKSpisaniiuRecordType, error) {
	return NewAccumulationRegisterDenezhnyeSredstvaKSpisaniiuRecordType(c.updateEntity(key, entity))
}
func (c *Client) DeleteAccumulationRegisterDenezhnyeSredstvaKSpisaniiuRecordType(key PrimaryAccumulationRegisterDenezhnyeSredstvaKSpisaniiuRecordType) error {
	return c.removeEntity(key)
}

type CatalogDogovoryKontragentov struct {
	Key                                                     Guid      `json:"Ref_Key,omitempty"`
	DataVersion                                             *String   `json:"DataVersion,omitempty"`
	Description                                             *String   `json:"Description,omitempty"`
	Code                                                    *String   `json:"Code,omitempty"`
	OwnerKey                                                *Guid     `json:"Owner_Key,omitempty"`
	ParentKey                                               *Guid     `json:"Parent_Key,omitempty"`
	IsFolder                                                *Boolean  `json:"IsFolder,omitempty"`
	DeletionMark                                            *Boolean  `json:"DeletionMark,omitempty"`
	ValiutaVzaimoraschetovKey                               *Guid     `json:"ВалютаВзаиморасчетов_Key,omitempty"`
	VedenieVzaimoraschetov                                  *String   `json:"ВедениеВзаиморасчетов,omitempty"`
	VidAgentskogoDogovora                                   *String   `json:"ВидАгентскогоДоговора,omitempty"`
	VidVzaimoraschetovKey                                   *Guid     `json:"ВидВзаиморасчетов_Key,omitempty"`
	VidDogovora                                             *String   `json:"ВидДоговора,omitempty"`
	Date                                                    *DateTime `json:"Дата,omitempty"`
	DerzhatRezervBezOplatyOgranichennoeVremia               *Boolean  `json:"ДержатьРезервБезОплатыОграниченноеВремя,omitempty"`
	DopustimaiaSummaZadolzhennosti                          *Double   `json:"ДопустимаяСуммаЗадолженности,omitempty"`
	DopustimoeChisloDneiZadolzhennosti                      *Int64    `json:"ДопустимоеЧислоДнейЗадолженности,omitempty"`
	Comment                                                 *String   `json:"Комментарий,omitempty"`
	KontrolirovatDenezhnyeSredstvaKomitenta                 *Boolean  `json:"КонтролироватьДенежныеСредстваКомитента,omitempty"`
	KontrolirovatOtritsatelnyeOstatkiPoDavalcheskomuMetallu *Boolean  `json:"КонтролироватьОтрицательныеОстаткиПоДавальческомуМеталлу,omitempty"`
	KontrolirovatSummuZadolzhennosti                        *Boolean  `json:"КонтролироватьСуммуЗадолженности,omitempty"`
	KontrolirovatChisloDneiZadolzhennosti                   *Boolean  `json:"КонтролироватьЧислоДнейЗадолженности,omitempty"`
	Number                                                  *String   `json:"Номер,omitempty"`
	OrganizatsiiaKey                                        *Guid     `json:"Организация_Key,omitempty"`
	OtvetstvennyiMenedzherKey                               *Guid     `json:"ОтветственныйМенеджер_Key,omitempty"`
	OtrazhatSummuRealizatsii                                *Boolean  `json:"ОтражатьСуммуРеализации,omitempty"`
	PredostavliatDannyeVFinMonitoring                       *Boolean  `json:"ПредоставлятьДанныеВФинМониторинг,omitempty"`
	PriemNaKomissiiuOtFizicheskogoLitsa                     *Boolean  `json:"ПриемНаКомиссиюОтФизическогоЛица,omitempty"`
	ProtsentKomissionnogoVoznagrazhdeniia                   *Double   `json:"ПроцентКомиссионногоВознаграждения,omitempty"`
	ProtsentPredoplaty                                      *Double   `json:"ПроцентПредоплаты,omitempty"`
	RaschetyVUslovnykhEdinitsakh                            *Boolean  `json:"РасчетыВУсловныхЕдиницах,omitempty"`
	SposobRaschetaKomissionnogoVoznagrazhdeniia             *String   `json:"СпособРасчетаКомиссионногоВознаграждения,omitempty"`
	TipTsen                                                 *String   `json:"ТипЦен,omitempty"`
	UdalitPerekhodPravaSobstvennostiDliaFinMonitoringa      *String   `json:"УдалитьПереходПраваСобственностиДляФинМониторинга,omitempty"`
	UsloviiaOplatyKey                                       *Guid     `json:"УсловияОплаты_Key,omitempty"`
	UchetAgentskogoNDS                                      *Boolean  `json:"УчетАгентскогоНДС,omitempty"`
	ChisloDneiRezervaBezOplaty                              *Int64    `json:"ЧислоДнейРезерваБезОплаты,omitempty"`
	UsloviiaPriemaIzdeliiNaKomissiiuKey                     *Guid     `json:"УсловияПриемаИзделийНаКомиссию_Key,omitempty"`
	DavalcheskiiMetall                                      *Boolean  `json:"ДавальческийМеталл,omitempty"`
	OtsenkaMaterialovVProizvodstvePoSrednei                 *Boolean  `json:"ОценкаМатериаловВПроизводствеПоСредней,omitempty"`
	OtsenkaMaterialovVProizvodstveFIFO                      *Boolean  `json:"ОценкаМатериаловВПроизводствеФИФО,omitempty"`
	BIdentifikator                                          *String   `json:"Б_Идентификатор,omitempty"`
	TipTsenType                                             *String   `json:"ТипЦен_Type,omitempty"`
}

func (CatalogDogovoryKontragentov) APIEntityType() string {
	return "Catalog_ДоговорыКонтрагентов"
}
func NewCatalogDogovoryKontragentov(data string, prevError error) (*CatalogDogovoryKontragentov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogDogovoryKontragentov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogDogovoryKontragentov(entity CatalogDogovoryKontragentov) (*CatalogDogovoryKontragentov, error) {
	return NewCatalogDogovoryKontragentov(c.createEntity(entity))
}
func (c *Client) CatalogDogovoryKontragentov(key PrimaryCatalogDogovoryKontragentov, fields []string) (*CatalogDogovoryKontragentov, error) {
	return NewCatalogDogovoryKontragentov(c.getEntity(key, fields))
}
func (c *Client) CatalogDogovoryKontragentovs(where Where) (*[]CatalogDogovoryKontragentov, error) {
	type ReturnObj struct {
		Value []CatalogDogovoryKontragentov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ДоговорыКонтрагентов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogDogovoryKontragentov(key PrimaryCatalogDogovoryKontragentov, entity CatalogDogovoryKontragentov) (*CatalogDogovoryKontragentov, error) {
	return NewCatalogDogovoryKontragentov(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogDogovoryKontragentov(key PrimaryCatalogDogovoryKontragentov) error {
	return c.removeEntity(key)
}

type Order struct {
	Key                        Guid                                                `json:"Ref_Key,omitempty"`
	DataVersion                *String                                             `json:"DataVersion,omitempty"`
	Number                     *String                                             `json:"Number,omitempty"`
	Date                       *DateTime                                           `json:"Date,omitempty"`
	DeletionMark               *Boolean                                            `json:"DeletionMark,omitempty"`
	Posted                     *Boolean                                            `json:"Posted,omitempty"`
	Weight                     *Double                                             `json:"ВесДокумента,omitempty"`
	OperationType              *String                                             `json:"ВидОперации,omitempty"`
	Zaarkhivirovan             *Boolean                                            `json:"Заархивирован,omitempty"`
	KassaKKMKey                *Guid                                               `json:"КассаККМ_Key,omitempty"`
	KassirKey                  *Guid                                               `json:"Кассир_Key,omitempty"`
	KolichestvoDokumenta       *Int64                                              `json:"КоличествоДокумента,omitempty"`
	Comment                    *String                                             `json:"Комментарий,omitempty"`
	GungNumber                 *Int16                                              `json:"НомерСменыККМ,omitempty"`
	NumberKKT                  *Int16                                              `json:"НомерЧекаККМ,omitempty"`
	OrganizatsiiaKey           *Guid                                               `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey           *Guid                                               `json:"Ответственный_Key,omitempty"`
	DepartmentKey              *Guid                                               `json:"Склад_Key,omitempty"`
	SumOfDocument              *Double                                             `json:"СуммаДокумента,omitempty"`
	SummaOplatyBonusom         *Double                                             `json:"СуммаОплатыБонусом,omitempty"`
	TipDokumenta               *String                                             `json:"ТипДокумента,omitempty"`
	ChekKKMKey                 *Guid                                               `json:"ЧекККМ_Key,omitempty"`
	ChekProbitNaKKM            *Boolean                                            `json:"ЧекПробитНаККМ,omitempty"`
	TsenaVkliuchaetNDS         *Boolean                                            `json:"ЦенаВключаетНДС,omitempty"`
	SkidkiRasschitany          *Boolean                                            `json:"СкидкиРассчитаны,omitempty"`
	DokumentOsnovanie          *String                                             `json:"ДокументОснование,omitempty"`
	MemberCardKey              *Guid                                               `json:"ДисконтнаяКарта_Key,omitempty"`
	OpisanieKarty              *String                                             `json:"ОписаниеКарты,omitempty"`
	Bonusnaia                  *Boolean                                            `json:"Бонусная,omitempty"`
	Pochta                     *String                                             `json:"Почта,omitempty"`
	Telefon                    *String                                             `json:"Телефон,omitempty"`
	Payments                   *[]DocumentChekKKMOplataRowType                     `json:"Оплата,omitempty"`
	OplataSertifikatami        *[]DocumentChekKKMOplataSertifikatamiRowType        `json:"ОплатаСертификатами,omitempty"`
	ProdazhaSertifikatov       *[]DocumentChekKKMProdazhaSertifikatovRowType       `json:"ПродажаСертификатов,omitempty"`
	Goods                      *[]DocumentChekKKMTovaryRowType                     `json:"Товары,omitempty"`
	DokumentyObmena            *[]DocumentChekKKMDokumentyObmenaRowType            `json:"ДокументыОбмена,omitempty"`
	DogovoraRassrochkiProdazha *[]DocumentChekKKMDogovoraRassrochkiProdazhaRowType `json:"ДоговораРассрочкиПродажа,omitempty"`
	DogovoraRassrochkiOplata   *[]DocumentChekKKMDogovoraRassrochkiOplataRowType   `json:"ДоговораРассрочкиОплата,omitempty"`
	OplataBallami              *[]DocumentChekKKMOplataBallamiRowType              `json:"ОплатаБаллами,omitempty"`
	SkidkiNatsenki             *[]DocumentChekKKMSkidkiNatsenkiRowType             `json:"СкидкиНаценки,omitempty"`
	UpravliaemyeSkidki         *[]DocumentChekKKMUpravliaemyeSkidkiRowType         `json:"УправляемыеСкидки,omitempty"`
	Podarki                    *[]DocumentChekKKMPodarkiRowType                    `json:"Подарки,omitempty"`
	Kupony                     *[]DocumentChekKKMKuponyRowType                     `json:"Купоны,omitempty"`
	DokumentOsnovanieType      *String                                             `json:"ДокументОснование_Type,omitempty"`
}

func (Order) APIEntityType() string {
	return "Document_ЧекККМ"
}
func NewOrder(data string, prevError error) (*Order, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(Order)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateOrder(entity Order) (*Order, error) {
	return NewOrder(c.createEntity(entity))
}
func (c *Client) Order(key PrimaryOrder, fields []string) (*Order, error) {
	return NewOrder(c.getEntity(key, fields))
}
func (c *Client) Orders(where Where) (*[]Order, error) {
	type ReturnObj struct {
		Value []Order `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЧекККМ", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateOrder(key PrimaryOrder, entity Order) (*Order, error) {
	return NewOrder(c.updateEntity(key, entity))
}
func (c *Client) DeleteOrder(key PrimaryOrder) error {
	return c.removeEntity(key)
}

type DocumentChekKKMOplata struct {
	Key                     Guid     `json:"Ref_Key,omitempty"`
	LineNumber              Int64    `json:"LineNumber,omitempty"`
	VidOplatyKey            *Guid    `json:"ВидОплаты_Key,omitempty"`
	NomerVidaOplaty         *Int16   `json:"НомерВидаОплаты,omitempty"`
	ProtsentTorgovoiUstupki *Double  `json:"ПроцентТорговойУступки,omitempty"`
	Sum                     *Double  `json:"Сумма,omitempty"`
	SummaTorgovoiUstupki    *Double  `json:"СуммаТорговойУступки,omitempty"`
	Khesh                   *String  `json:"Хэш,omitempty"`
	KartaSberbanka          *Boolean `json:"КартаСбербанка,omitempty"`
	Poslednie4              *String  `json:"Последние4,omitempty"`
	KodRRN                  *String  `json:"КодRRN,omitempty"`
	Identifikator           *String  `json:"Идентификатор,omitempty"`
	TransactionId           *String  `json:"TransactionId,omitempty"`
}

func (DocumentChekKKMOplata) APIEntityType() string {
	return "Document_ЧекККМ_Оплата"
}
func NewDocumentChekKKMOplata(data string, prevError error) (*DocumentChekKKMOplata, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentChekKKMOplata)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentChekKKMOplata(entity DocumentChekKKMOplata) (*DocumentChekKKMOplata, error) {
	return NewDocumentChekKKMOplata(c.createEntity(entity))
}
func (c *Client) DocumentChekKKMOplata(key PrimaryDocumentChekKKMOplata, fields []string) (*DocumentChekKKMOplata, error) {
	return NewDocumentChekKKMOplata(c.getEntity(key, fields))
}
func (c *Client) DocumentChekKKMOplatas(where Where) (*[]DocumentChekKKMOplata, error) {
	type ReturnObj struct {
		Value []DocumentChekKKMOplata `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЧекККМ_Оплата", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentChekKKMOplata(key PrimaryDocumentChekKKMOplata, entity DocumentChekKKMOplata) (*DocumentChekKKMOplata, error) {
	return NewDocumentChekKKMOplata(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentChekKKMOplata(key PrimaryDocumentChekKKMOplata) error {
	return c.removeEntity(key)
}

type DocumentChekKKMOplataSertifikatami struct {
	Key                      Guid    `json:"Ref_Key,omitempty"`
	LineNumber               Int64   `json:"LineNumber,omitempty"`
	SertifikatKey            *Guid   `json:"Сертификат_Key,omitempty"`
	NomerSertifikata         *String `json:"НомерСертификата,omitempty"`
	Sum                      *Double `json:"Сумма,omitempty"`
	SummaPokupkiPogashennaia *Double `json:"СуммаПокупкиПогашенная,omitempty"`
}

func (DocumentChekKKMOplataSertifikatami) APIEntityType() string {
	return "Document_ЧекККМ_ОплатаСертификатами"
}
func NewDocumentChekKKMOplataSertifikatami(data string, prevError error) (*DocumentChekKKMOplataSertifikatami, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentChekKKMOplataSertifikatami)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentChekKKMOplataSertifikatami(entity DocumentChekKKMOplataSertifikatami) (*DocumentChekKKMOplataSertifikatami, error) {
	return NewDocumentChekKKMOplataSertifikatami(c.createEntity(entity))
}
func (c *Client) DocumentChekKKMOplataSertifikatami(key PrimaryDocumentChekKKMOplataSertifikatami, fields []string) (*DocumentChekKKMOplataSertifikatami, error) {
	return NewDocumentChekKKMOplataSertifikatami(c.getEntity(key, fields))
}
func (c *Client) DocumentChekKKMOplataSertifikatamis(where Where) (*[]DocumentChekKKMOplataSertifikatami, error) {
	type ReturnObj struct {
		Value []DocumentChekKKMOplataSertifikatami `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЧекККМ_ОплатаСертификатами", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentChekKKMOplataSertifikatami(key PrimaryDocumentChekKKMOplataSertifikatami, entity DocumentChekKKMOplataSertifikatami) (*DocumentChekKKMOplataSertifikatami, error) {
	return NewDocumentChekKKMOplataSertifikatami(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentChekKKMOplataSertifikatami(key PrimaryDocumentChekKKMOplataSertifikatami) error {
	return c.removeEntity(key)
}

type DocumentChekKKMProdazhaSertifikatov struct {
	Key                                 Guid     `json:"Ref_Key,omitempty"`
	LineNumber                          Int64    `json:"LineNumber,omitempty"`
	SertifikatKey                       *Guid    `json:"Сертификат_Key,omitempty"`
	NomerSertifikata                    *String  `json:"НомерСертификата,omitempty"`
	Sum                                 *Double  `json:"Сумма,omitempty"`
	SrokDeistviiaSertifikataOgranichen  *Boolean `json:"СрокДействияСертификатаОграничен,omitempty"`
	KolichestvoDneiDeistviiaSertifikata *Int64   `json:"КоличествоДнейДействияСертификата,omitempty"`
}

func (DocumentChekKKMProdazhaSertifikatov) APIEntityType() string {
	return "Document_ЧекККМ_ПродажаСертификатов"
}
func NewDocumentChekKKMProdazhaSertifikatov(data string, prevError error) (*DocumentChekKKMProdazhaSertifikatov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentChekKKMProdazhaSertifikatov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentChekKKMProdazhaSertifikatov(entity DocumentChekKKMProdazhaSertifikatov) (*DocumentChekKKMProdazhaSertifikatov, error) {
	return NewDocumentChekKKMProdazhaSertifikatov(c.createEntity(entity))
}
func (c *Client) DocumentChekKKMProdazhaSertifikatov(key PrimaryDocumentChekKKMProdazhaSertifikatov, fields []string) (*DocumentChekKKMProdazhaSertifikatov, error) {
	return NewDocumentChekKKMProdazhaSertifikatov(c.getEntity(key, fields))
}
func (c *Client) DocumentChekKKMProdazhaSertifikatovs(where Where) (*[]DocumentChekKKMProdazhaSertifikatov, error) {
	type ReturnObj struct {
		Value []DocumentChekKKMProdazhaSertifikatov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЧекККМ_ПродажаСертификатов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentChekKKMProdazhaSertifikatov(key PrimaryDocumentChekKKMProdazhaSertifikatov, entity DocumentChekKKMProdazhaSertifikatov) (*DocumentChekKKMProdazhaSertifikatov, error) {
	return NewDocumentChekKKMProdazhaSertifikatov(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentChekKKMProdazhaSertifikatov(key PrimaryDocumentChekKKMProdazhaSertifikatov) error {
	return c.removeEntity(key)
}

type DocumentChekKKMTovary struct {
	Key                                        Guid     `json:"Ref_Key,omitempty"`
	LineNumber                                 Int64    `json:"LineNumber,omitempty"`
	MID                                        *String  `json:"Артикул,omitempty"`
	Weight                                     *Double  `json:"Вес,omitempty"`
	ZnachenieUsloviiaAvtomaticheskoiSkidki     *String  `json:"ЗначениеУсловияАвтоматическойСкидки,omitempty"`
	Quantity                                   *Int64   `json:"Количество,omitempty"`
	ItemKey                                    *Guid    `json:"Номенклатура_Key,omitempty"`
	PercentAutoDiscount                        *Double  `json:"ПроцентАвтоматическойСкидки,omitempty"`
	PercentManualDiscount                      *Double  `json:"ПроцентРучнойСкидки,omitempty"`
	SizeKey                                    *Guid    `json:"Размер_Key,omitempty"`
	RegistratsiiaProdazhi                      *Boolean `json:"РегистрацияПродажи,omitempty"`
	InstanceKey                                *Guid    `json:"СерияНоменклатуры_Key,omitempty"`
	SumManualDiscount                          *Double  `json:"СуммаРучнойСкидки,omitempty"`
	DepartmentKey                              *Guid    `json:"Склад_Key,omitempty"`
	StavkaNDS                                  *String  `json:"СтавкаНДС,omitempty"`
	Sum                                        *Double  `json:"Сумма,omitempty"`
	SummaNDS                                   *Double  `json:"СуммаНДС,omitempty"`
	UslovieAvtomaticheskoiSkidki               *String  `json:"УсловиеАвтоматическойСкидки,omitempty"`
	KharakteristikaNomenklaturyKey             *Guid    `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                                       *Double  `json:"Цена,omitempty"`
	Shtrikhkod                                 *String  `json:"Штрихкод,omitempty"`
	OrderKey                                   *Guid    `json:"КлючПродажи_Key,omitempty"`
	KliuchSviazi                               *Int64   `json:"КлючСвязи,omitempty"`
	ProdazhaPodarka                            *Boolean `json:"ПродажаПодарка,omitempty"`
	SumAutoDiscount                            *Double  `json:"СуммаАвтоматическойСкидки,omitempty"`
	SummaBonusov                               *Double  `json:"СуммаБонусов,omitempty"`
	SostavStrokiDliaRassrochkiKey              *Guid    `json:"СоставСтрокиДляРассрочки_Key,omitempty"`
	Komitent                                   *String  `json:"Комитент,omitempty"`
	TelefonKomitenta                           *String  `json:"ТелефонКомитента,omitempty"`
	INNkomitenta                               *String  `json:"ИННкомитента,omitempty"`
	ZnachenieUsloviiaAvtomaticheskoiSkidkiType *String  `json:"ЗначениеУсловияАвтоматическойСкидки_Type,omitempty"`
}

func (DocumentChekKKMTovary) APIEntityType() string {
	return "Document_ЧекККМ_Товары"
}
func NewDocumentChekKKMTovary(data string, prevError error) (*DocumentChekKKMTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentChekKKMTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentChekKKMTovary(entity DocumentChekKKMTovary) (*DocumentChekKKMTovary, error) {
	return NewDocumentChekKKMTovary(c.createEntity(entity))
}
func (c *Client) DocumentChekKKMTovary(key PrimaryDocumentChekKKMTovary, fields []string) (*DocumentChekKKMTovary, error) {
	return NewDocumentChekKKMTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentChekKKMTovarys(where Where) (*[]DocumentChekKKMTovary, error) {
	type ReturnObj struct {
		Value []DocumentChekKKMTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЧекККМ_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentChekKKMTovary(key PrimaryDocumentChekKKMTovary, entity DocumentChekKKMTovary) (*DocumentChekKKMTovary, error) {
	return NewDocumentChekKKMTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentChekKKMTovary(key PrimaryDocumentChekKKMTovary) error {
	return c.removeEntity(key)
}

type DocumentChekKKMDokumentyObmena struct {
	Key         Guid    `json:"Ref_Key,omitempty"`
	LineNumber  Int64   `json:"LineNumber,omitempty"`
	DokumentKey *Guid   `json:"Документ_Key,omitempty"`
	Sum         *Double `json:"Сумма,omitempty"`
}

func (DocumentChekKKMDokumentyObmena) APIEntityType() string {
	return "Document_ЧекККМ_ДокументыОбмена"
}
func NewDocumentChekKKMDokumentyObmena(data string, prevError error) (*DocumentChekKKMDokumentyObmena, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentChekKKMDokumentyObmena)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentChekKKMDokumentyObmena(entity DocumentChekKKMDokumentyObmena) (*DocumentChekKKMDokumentyObmena, error) {
	return NewDocumentChekKKMDokumentyObmena(c.createEntity(entity))
}
func (c *Client) DocumentChekKKMDokumentyObmena(key PrimaryDocumentChekKKMDokumentyObmena, fields []string) (*DocumentChekKKMDokumentyObmena, error) {
	return NewDocumentChekKKMDokumentyObmena(c.getEntity(key, fields))
}
func (c *Client) DocumentChekKKMDokumentyObmenas(where Where) (*[]DocumentChekKKMDokumentyObmena, error) {
	type ReturnObj struct {
		Value []DocumentChekKKMDokumentyObmena `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЧекККМ_ДокументыОбмена", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentChekKKMDokumentyObmena(key PrimaryDocumentChekKKMDokumentyObmena, entity DocumentChekKKMDokumentyObmena) (*DocumentChekKKMDokumentyObmena, error) {
	return NewDocumentChekKKMDokumentyObmena(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentChekKKMDokumentyObmena(key PrimaryDocumentChekKKMDokumentyObmena) error {
	return c.removeEntity(key)
}

type DocumentChekKKMDogovoraRassrochkiProdazha struct {
	Key                  Guid    `json:"Ref_Key,omitempty"`
	LineNumber           Int64   `json:"LineNumber,omitempty"`
	DogovorRassrochkiKey *Guid   `json:"ДоговорРассрочки_Key,omitempty"`
	Sum                  *Double `json:"Сумма,omitempty"`
}

func (DocumentChekKKMDogovoraRassrochkiProdazha) APIEntityType() string {
	return "Document_ЧекККМ_ДоговораРассрочкиПродажа"
}
func NewDocumentChekKKMDogovoraRassrochkiProdazha(data string, prevError error) (*DocumentChekKKMDogovoraRassrochkiProdazha, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentChekKKMDogovoraRassrochkiProdazha)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentChekKKMDogovoraRassrochkiProdazha(entity DocumentChekKKMDogovoraRassrochkiProdazha) (*DocumentChekKKMDogovoraRassrochkiProdazha, error) {
	return NewDocumentChekKKMDogovoraRassrochkiProdazha(c.createEntity(entity))
}
func (c *Client) DocumentChekKKMDogovoraRassrochkiProdazha(key PrimaryDocumentChekKKMDogovoraRassrochkiProdazha, fields []string) (*DocumentChekKKMDogovoraRassrochkiProdazha, error) {
	return NewDocumentChekKKMDogovoraRassrochkiProdazha(c.getEntity(key, fields))
}
func (c *Client) DocumentChekKKMDogovoraRassrochkiProdazhas(where Where) (*[]DocumentChekKKMDogovoraRassrochkiProdazha, error) {
	type ReturnObj struct {
		Value []DocumentChekKKMDogovoraRassrochkiProdazha `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЧекККМ_ДоговораРассрочкиПродажа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentChekKKMDogovoraRassrochkiProdazha(key PrimaryDocumentChekKKMDogovoraRassrochkiProdazha, entity DocumentChekKKMDogovoraRassrochkiProdazha) (*DocumentChekKKMDogovoraRassrochkiProdazha, error) {
	return NewDocumentChekKKMDogovoraRassrochkiProdazha(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentChekKKMDogovoraRassrochkiProdazha(key PrimaryDocumentChekKKMDogovoraRassrochkiProdazha) error {
	return c.removeEntity(key)
}

type DocumentChekKKMDogovoraRassrochkiOplata struct {
	Key                  Guid    `json:"Ref_Key,omitempty"`
	LineNumber           Int64   `json:"LineNumber,omitempty"`
	DogovorRassrochkiKey *Guid   `json:"ДоговорРассрочки_Key,omitempty"`
	Sum                  *Double `json:"Сумма,omitempty"`
}

func (DocumentChekKKMDogovoraRassrochkiOplata) APIEntityType() string {
	return "Document_ЧекККМ_ДоговораРассрочкиОплата"
}
func NewDocumentChekKKMDogovoraRassrochkiOplata(data string, prevError error) (*DocumentChekKKMDogovoraRassrochkiOplata, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentChekKKMDogovoraRassrochkiOplata)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentChekKKMDogovoraRassrochkiOplata(entity DocumentChekKKMDogovoraRassrochkiOplata) (*DocumentChekKKMDogovoraRassrochkiOplata, error) {
	return NewDocumentChekKKMDogovoraRassrochkiOplata(c.createEntity(entity))
}
func (c *Client) DocumentChekKKMDogovoraRassrochkiOplata(key PrimaryDocumentChekKKMDogovoraRassrochkiOplata, fields []string) (*DocumentChekKKMDogovoraRassrochkiOplata, error) {
	return NewDocumentChekKKMDogovoraRassrochkiOplata(c.getEntity(key, fields))
}
func (c *Client) DocumentChekKKMDogovoraRassrochkiOplatas(where Where) (*[]DocumentChekKKMDogovoraRassrochkiOplata, error) {
	type ReturnObj struct {
		Value []DocumentChekKKMDogovoraRassrochkiOplata `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЧекККМ_ДоговораРассрочкиОплата", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentChekKKMDogovoraRassrochkiOplata(key PrimaryDocumentChekKKMDogovoraRassrochkiOplata, entity DocumentChekKKMDogovoraRassrochkiOplata) (*DocumentChekKKMDogovoraRassrochkiOplata, error) {
	return NewDocumentChekKKMDogovoraRassrochkiOplata(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentChekKKMDogovoraRassrochkiOplata(key PrimaryDocumentChekKKMDogovoraRassrochkiOplata) error {
	return c.removeEntity(key)
}

type DocumentChekKKMOplataBallami struct {
	Key                    Guid    `json:"Ref_Key,omitempty"`
	LineNumber             Int64   `json:"LineNumber,omitempty"`
	Khesh                  *String `json:"Хэш,omitempty"`
	Poslednie4             *String `json:"Последние4,omitempty"`
	Sum                    *Double `json:"Сумма,omitempty"`
	Identifikator          *String `json:"Идентификатор,omitempty"`
	TransactionId          *String `json:"TransactionId,omitempty"`
	TransactionIdSpisaniia *String `json:"TransactionIdСписания,omitempty"`
}

func (DocumentChekKKMOplataBallami) APIEntityType() string {
	return "Document_ЧекККМ_ОплатаБаллами"
}
func NewDocumentChekKKMOplataBallami(data string, prevError error) (*DocumentChekKKMOplataBallami, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentChekKKMOplataBallami)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentChekKKMOplataBallami(entity DocumentChekKKMOplataBallami) (*DocumentChekKKMOplataBallami, error) {
	return NewDocumentChekKKMOplataBallami(c.createEntity(entity))
}
func (c *Client) DocumentChekKKMOplataBallami(key PrimaryDocumentChekKKMOplataBallami, fields []string) (*DocumentChekKKMOplataBallami, error) {
	return NewDocumentChekKKMOplataBallami(c.getEntity(key, fields))
}
func (c *Client) DocumentChekKKMOplataBallamis(where Where) (*[]DocumentChekKKMOplataBallami, error) {
	type ReturnObj struct {
		Value []DocumentChekKKMOplataBallami `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЧекККМ_ОплатаБаллами", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentChekKKMOplataBallami(key PrimaryDocumentChekKKMOplataBallami, entity DocumentChekKKMOplataBallami) (*DocumentChekKKMOplataBallami, error) {
	return NewDocumentChekKKMOplataBallami(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentChekKKMOplataBallami(key PrimaryDocumentChekKKMOplataBallami) error {
	return c.removeEntity(key)
}

type DocumentChekKKMSkidkiNatsenki struct {
	Key               Guid    `json:"Ref_Key,omitempty"`
	LineNumber        Int64   `json:"LineNumber,omitempty"`
	KliuchSviazi      *Int64  `json:"КлючСвязи,omitempty"`
	Sum               *Double `json:"Сумма,omitempty"`
	SkidkaNatsenkaKey *Guid   `json:"СкидкаНаценка_Key,omitempty"`
}

func (DocumentChekKKMSkidkiNatsenki) APIEntityType() string {
	return "Document_ЧекККМ_СкидкиНаценки"
}
func NewDocumentChekKKMSkidkiNatsenki(data string, prevError error) (*DocumentChekKKMSkidkiNatsenki, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentChekKKMSkidkiNatsenki)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentChekKKMSkidkiNatsenki(entity DocumentChekKKMSkidkiNatsenki) (*DocumentChekKKMSkidkiNatsenki, error) {
	return NewDocumentChekKKMSkidkiNatsenki(c.createEntity(entity))
}
func (c *Client) DocumentChekKKMSkidkiNatsenki(key PrimaryDocumentChekKKMSkidkiNatsenki, fields []string) (*DocumentChekKKMSkidkiNatsenki, error) {
	return NewDocumentChekKKMSkidkiNatsenki(c.getEntity(key, fields))
}
func (c *Client) DocumentChekKKMSkidkiNatsenkis(where Where) (*[]DocumentChekKKMSkidkiNatsenki, error) {
	type ReturnObj struct {
		Value []DocumentChekKKMSkidkiNatsenki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЧекККМ_СкидкиНаценки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentChekKKMSkidkiNatsenki(key PrimaryDocumentChekKKMSkidkiNatsenki, entity DocumentChekKKMSkidkiNatsenki) (*DocumentChekKKMSkidkiNatsenki, error) {
	return NewDocumentChekKKMSkidkiNatsenki(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentChekKKMSkidkiNatsenki(key PrimaryDocumentChekKKMSkidkiNatsenki) error {
	return c.removeEntity(key)
}

type DocumentChekKKMUpravliaemyeSkidki struct {
	Key               Guid  `json:"Ref_Key,omitempty"`
	LineNumber        Int64 `json:"LineNumber,omitempty"`
	SkidkaNatsenkaKey *Guid `json:"СкидкаНаценка_Key,omitempty"`
}

func (DocumentChekKKMUpravliaemyeSkidki) APIEntityType() string {
	return "Document_ЧекККМ_УправляемыеСкидки"
}
func NewDocumentChekKKMUpravliaemyeSkidki(data string, prevError error) (*DocumentChekKKMUpravliaemyeSkidki, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentChekKKMUpravliaemyeSkidki)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentChekKKMUpravliaemyeSkidki(entity DocumentChekKKMUpravliaemyeSkidki) (*DocumentChekKKMUpravliaemyeSkidki, error) {
	return NewDocumentChekKKMUpravliaemyeSkidki(c.createEntity(entity))
}
func (c *Client) DocumentChekKKMUpravliaemyeSkidki(key PrimaryDocumentChekKKMUpravliaemyeSkidki, fields []string) (*DocumentChekKKMUpravliaemyeSkidki, error) {
	return NewDocumentChekKKMUpravliaemyeSkidki(c.getEntity(key, fields))
}
func (c *Client) DocumentChekKKMUpravliaemyeSkidkis(where Where) (*[]DocumentChekKKMUpravliaemyeSkidki, error) {
	type ReturnObj struct {
		Value []DocumentChekKKMUpravliaemyeSkidki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЧекККМ_УправляемыеСкидки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentChekKKMUpravliaemyeSkidki(key PrimaryDocumentChekKKMUpravliaemyeSkidki, entity DocumentChekKKMUpravliaemyeSkidki) (*DocumentChekKKMUpravliaemyeSkidki, error) {
	return NewDocumentChekKKMUpravliaemyeSkidki(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentChekKKMUpravliaemyeSkidki(key PrimaryDocumentChekKKMUpravliaemyeSkidki) error {
	return c.removeEntity(key)
}

type DocumentChekKKMPodarki struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	SkidkaNatsenkaKey              *Guid   `json:"СкидкаНаценка_Key,omitempty"`
	ItemKey                        *Guid   `json:"Номенклатура_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	InstanceKey                    *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid   `json:"Размер_Key,omitempty"`
	Quantity                       *Double `json:"Количество,omitempty"`
	Weight                         *Double `json:"Вес,omitempty"`
	Cost                           *Double `json:"Цена,omitempty"`
	Sum                            *Double `json:"Сумма,omitempty"`
	DepartmentKey                  *Guid   `json:"Склад_Key,omitempty"`
	KliuchSviazi                   *Int64  `json:"КлючСвязи,omitempty"`
}

func (DocumentChekKKMPodarki) APIEntityType() string {
	return "Document_ЧекККМ_Подарки"
}
func NewDocumentChekKKMPodarki(data string, prevError error) (*DocumentChekKKMPodarki, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentChekKKMPodarki)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentChekKKMPodarki(entity DocumentChekKKMPodarki) (*DocumentChekKKMPodarki, error) {
	return NewDocumentChekKKMPodarki(c.createEntity(entity))
}
func (c *Client) DocumentChekKKMPodarki(key PrimaryDocumentChekKKMPodarki, fields []string) (*DocumentChekKKMPodarki, error) {
	return NewDocumentChekKKMPodarki(c.getEntity(key, fields))
}
func (c *Client) DocumentChekKKMPodarkis(where Where) (*[]DocumentChekKKMPodarki, error) {
	type ReturnObj struct {
		Value []DocumentChekKKMPodarki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЧекККМ_Подарки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentChekKKMPodarki(key PrimaryDocumentChekKKMPodarki, entity DocumentChekKKMPodarki) (*DocumentChekKKMPodarki, error) {
	return NewDocumentChekKKMPodarki(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentChekKKMPodarki(key PrimaryDocumentChekKKMPodarki) error {
	return c.removeEntity(key)
}

type DocumentChekKKMKupony struct {
	Key          Guid     `json:"Ref_Key,omitempty"`
	LineNumber   Int64    `json:"LineNumber,omitempty"`
	KliuchSviazi *Int64   `json:"КлючСвязи,omitempty"`
	KuponKey     *Guid    `json:"Купон_Key,omitempty"`
	NomerKupona  *String  `json:"НомерКупона,omitempty"`
	Spisyvat     *Boolean `json:"Списывать,omitempty"`
}

func (DocumentChekKKMKupony) APIEntityType() string {
	return "Document_ЧекККМ_Купоны"
}
func NewDocumentChekKKMKupony(data string, prevError error) (*DocumentChekKKMKupony, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentChekKKMKupony)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentChekKKMKupony(entity DocumentChekKKMKupony) (*DocumentChekKKMKupony, error) {
	return NewDocumentChekKKMKupony(c.createEntity(entity))
}
func (c *Client) DocumentChekKKMKupony(key PrimaryDocumentChekKKMKupony, fields []string) (*DocumentChekKKMKupony, error) {
	return NewDocumentChekKKMKupony(c.getEntity(key, fields))
}
func (c *Client) DocumentChekKKMKuponys(where Where) (*[]DocumentChekKKMKupony, error) {
	type ReturnObj struct {
		Value []DocumentChekKKMKupony `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЧекККМ_Купоны", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentChekKKMKupony(key PrimaryDocumentChekKKMKupony, entity DocumentChekKKMKupony) (*DocumentChekKKMKupony, error) {
	return NewDocumentChekKKMKupony(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentChekKKMKupony(key PrimaryDocumentChekKKMKupony) error {
	return c.removeEntity(key)
}

type DocumentPereotsenkaValiutnykhSredstv struct {
	Key                                    Guid      `json:"Ref_Key,omitempty"`
	DataVersion                            *String   `json:"DataVersion,omitempty"`
	Number                                 *String   `json:"Number,omitempty"`
	Date                                   *DateTime `json:"Date,omitempty"`
	DeletionMark                           *Boolean  `json:"DeletionMark,omitempty"`
	Posted                                 *Boolean  `json:"Posted,omitempty"`
	VzaimoraschetySKontragentami           *Boolean  `json:"ВзаиморасчетыСКонтрагентами,omitempty"`
	VzaimoraschetySPodotchetnymiLitsami    *Boolean  `json:"ВзаиморасчетыСПодотчетнымиЛицами,omitempty"`
	DenezhnyeSredstvaVKassakh              *Boolean  `json:"ДенежныеСредстваВКассах,omitempty"`
	DenezhnyeSredstvaNaBankovskikhSchetakh *Boolean  `json:"ДенежныеСредстваНаБанковскихСчетах,omitempty"`
	Comment                                *String   `json:"Комментарий,omitempty"`
	OrganizatsiiaKey                       *Guid     `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                       *Guid     `json:"Ответственный_Key,omitempty"`
	PoVsemOrganizatsiiam                   *Boolean  `json:"ПоВсемОрганизациям,omitempty"`
	PodrazdelenieKey                       *Guid     `json:"Подразделение_Key,omitempty"`
	TipDokumenta                           *String   `json:"ТипДокумента,omitempty"`
}

func (DocumentPereotsenkaValiutnykhSredstv) APIEntityType() string {
	return "Document_ПереоценкаВалютныхСредств"
}
func NewDocumentPereotsenkaValiutnykhSredstv(data string, prevError error) (*DocumentPereotsenkaValiutnykhSredstv, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPereotsenkaValiutnykhSredstv)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPereotsenkaValiutnykhSredstv(entity DocumentPereotsenkaValiutnykhSredstv) (*DocumentPereotsenkaValiutnykhSredstv, error) {
	return NewDocumentPereotsenkaValiutnykhSredstv(c.createEntity(entity))
}
func (c *Client) DocumentPereotsenkaValiutnykhSredstv(key PrimaryDocumentPereotsenkaValiutnykhSredstv, fields []string) (*DocumentPereotsenkaValiutnykhSredstv, error) {
	return NewDocumentPereotsenkaValiutnykhSredstv(c.getEntity(key, fields))
}
func (c *Client) DocumentPereotsenkaValiutnykhSredstvs(where Where) (*[]DocumentPereotsenkaValiutnykhSredstv, error) {
	type ReturnObj struct {
		Value []DocumentPereotsenkaValiutnykhSredstv `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПереоценкаВалютныхСредств", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPereotsenkaValiutnykhSredstv(key PrimaryDocumentPereotsenkaValiutnykhSredstv, entity DocumentPereotsenkaValiutnykhSredstv) (*DocumentPereotsenkaValiutnykhSredstv, error) {
	return NewDocumentPereotsenkaValiutnykhSredstv(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPereotsenkaValiutnykhSredstv(key PrimaryDocumentPereotsenkaValiutnykhSredstv) error {
	return c.removeEntity(key)
}

type CatalogTipySkidokNatsenok struct {
	Key                        Guid                                                   `json:"Ref_Key,omitempty"`
	DataVersion                *String                                                `json:"DataVersion,omitempty"`
	Description                *String                                                `json:"Description,omitempty"`
	Code                       *String                                                `json:"Code,omitempty"`
	DeletionMark               *Boolean                                               `json:"DeletionMark,omitempty"`
	ValiutaKey                 *Guid                                                  `json:"Валюта_Key,omitempty"`
	VidSkidki                  *String                                                `json:"ВидСкидки,omitempty"`
	DliaVseiNomenklatury       *Boolean                                               `json:"ДляВсейНоменклатуры,omitempty"`
	DliaVsekhPoluchatelei      *Boolean                                               `json:"ДляВсехПолучателей,omitempty"`
	ZnachenieUsloviia          *String                                                `json:"ЗначениеУсловия,omitempty"`
	ObshcheeVremiaNachala      *DateTime                                              `json:"ОбщееВремяНачала,omitempty"`
	ObshcheeVremiaOkonchaniia  *DateTime                                              `json:"ОбщееВремяОкончания,omitempty"`
	OgranichenieSkidkiNatsenki *Double                                                `json:"ОграничениеСкидкиНаценки,omitempty"`
	PoDniamNedeli              *Boolean                                               `json:"ПоДнямНедели,omitempty"`
	ProtsentSkidkiNatsenki     *Double                                                `json:"ПроцентСкидкиНаценки,omitempty"`
	Uslovie                    *String                                                `json:"Условие,omitempty"`
	VremiaPoDniamNedeli        *[]CatalogTipySkidokNatsenokVremiaPoDniamNedeliRowType `json:"ВремяПоДнямНедели,omitempty"`
	ZnachenieUsloviiaType      *String                                                `json:"ЗначениеУсловия_Type,omitempty"`
}

func (CatalogTipySkidokNatsenok) APIEntityType() string {
	return "Catalog_ТипыСкидокНаценок"
}
func NewCatalogTipySkidokNatsenok(data string, prevError error) (*CatalogTipySkidokNatsenok, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogTipySkidokNatsenok)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogTipySkidokNatsenok(entity CatalogTipySkidokNatsenok) (*CatalogTipySkidokNatsenok, error) {
	return NewCatalogTipySkidokNatsenok(c.createEntity(entity))
}
func (c *Client) CatalogTipySkidokNatsenok(key PrimaryCatalogTipySkidokNatsenok, fields []string) (*CatalogTipySkidokNatsenok, error) {
	return NewCatalogTipySkidokNatsenok(c.getEntity(key, fields))
}
func (c *Client) CatalogTipySkidokNatsenoks(where Where) (*[]CatalogTipySkidokNatsenok, error) {
	type ReturnObj struct {
		Value []CatalogTipySkidokNatsenok `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ТипыСкидокНаценок", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogTipySkidokNatsenok(key PrimaryCatalogTipySkidokNatsenok, entity CatalogTipySkidokNatsenok) (*CatalogTipySkidokNatsenok, error) {
	return NewCatalogTipySkidokNatsenok(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogTipySkidokNatsenok(key PrimaryCatalogTipySkidokNatsenok) error {
	return c.removeEntity(key)
}

type CatalogTipySkidokNatsenokVremiaPoDniamNedeli struct {
	Key               Guid      `json:"Ref_Key,omitempty"`
	LineNumber        Int64     `json:"LineNumber,omitempty"`
	VremiaNachala     *DateTime `json:"ВремяНачала,omitempty"`
	VremiaOkonchaniia *DateTime `json:"ВремяОкончания,omitempty"`
	Vybran            *Boolean  `json:"Выбран,omitempty"`
	DenNedeli         *String   `json:"ДеньНедели,omitempty"`
}

func (CatalogTipySkidokNatsenokVremiaPoDniamNedeli) APIEntityType() string {
	return "Catalog_ТипыСкидокНаценок_ВремяПоДнямНедели"
}
func NewCatalogTipySkidokNatsenokVremiaPoDniamNedeli(data string, prevError error) (*CatalogTipySkidokNatsenokVremiaPoDniamNedeli, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogTipySkidokNatsenokVremiaPoDniamNedeli)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogTipySkidokNatsenokVremiaPoDniamNedeli(entity CatalogTipySkidokNatsenokVremiaPoDniamNedeli) (*CatalogTipySkidokNatsenokVremiaPoDniamNedeli, error) {
	return NewCatalogTipySkidokNatsenokVremiaPoDniamNedeli(c.createEntity(entity))
}
func (c *Client) CatalogTipySkidokNatsenokVremiaPoDniamNedeli(key PrimaryCatalogTipySkidokNatsenokVremiaPoDniamNedeli, fields []string) (*CatalogTipySkidokNatsenokVremiaPoDniamNedeli, error) {
	return NewCatalogTipySkidokNatsenokVremiaPoDniamNedeli(c.getEntity(key, fields))
}
func (c *Client) CatalogTipySkidokNatsenokVremiaPoDniamNedelis(where Where) (*[]CatalogTipySkidokNatsenokVremiaPoDniamNedeli, error) {
	type ReturnObj struct {
		Value []CatalogTipySkidokNatsenokVremiaPoDniamNedeli `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ТипыСкидокНаценок_ВремяПоДнямНедели", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogTipySkidokNatsenokVremiaPoDniamNedeli(key PrimaryCatalogTipySkidokNatsenokVremiaPoDniamNedeli, entity CatalogTipySkidokNatsenokVremiaPoDniamNedeli) (*CatalogTipySkidokNatsenokVremiaPoDniamNedeli, error) {
	return NewCatalogTipySkidokNatsenokVremiaPoDniamNedeli(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogTipySkidokNatsenokVremiaPoDniamNedeli(key PrimaryCatalogTipySkidokNatsenokVremiaPoDniamNedeli) error {
	return c.removeEntity(key)
}

type CatalogVidyKodirovokiTsepei struct {
	Key                                             Guid                                                                                 `json:"Ref_Key,omitempty"`
	DataVersion                                     *String                                                                              `json:"DataVersion,omitempty"`
	Description                                     *String                                                                              `json:"Description,omitempty"`
	Code                                            *String                                                                              `json:"Code,omitempty"`
	DeletionMark                                    *Boolean                                                                             `json:"DeletionMark,omitempty"`
	IspolzovatDopNastroiki                          *Boolean                                                                             `json:"ИспользоватьДопНастройки,omitempty"`
	PrimerArtikula                                  *String                                                                              `json:"ПримерАртикула,omitempty"`
	NastroikiZapolneniiaBase64Data                  *Binary                                                                              `json:"НастройкиЗаполнения_Base64Data,omitempty"`
	ElementyKodirovki                               *[]CatalogVidyKodirovokiTsepeiElementyKodirovkiRowType                               `json:"ЭлементыКодировки,omitempty"`
	SootvetstvieZnacheniiKodrovkiZnacheniiamSvoistv *[]CatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistvRowType `json:"СоответствиеЗначенийКодровкиЗначениямСвойств,omitempty"`
	NastroikiZapolneniiaType                        *String                                                                              `json:"НастройкиЗаполнения_Type,omitempty"`
	NastroikiZapolneniia                            *Stream                                                                              `json:"НастройкиЗаполнения,omitempty"`
}

func (CatalogVidyKodirovokiTsepei) APIEntityType() string {
	return "Catalog_ВидыКодировокиЦепей"
}
func NewCatalogVidyKodirovokiTsepei(data string, prevError error) (*CatalogVidyKodirovokiTsepei, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogVidyKodirovokiTsepei)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogVidyKodirovokiTsepei(entity CatalogVidyKodirovokiTsepei) (*CatalogVidyKodirovokiTsepei, error) {
	return NewCatalogVidyKodirovokiTsepei(c.createEntity(entity))
}
func (c *Client) CatalogVidyKodirovokiTsepei(key PrimaryCatalogVidyKodirovokiTsepei, fields []string) (*CatalogVidyKodirovokiTsepei, error) {
	return NewCatalogVidyKodirovokiTsepei(c.getEntity(key, fields))
}
func (c *Client) CatalogVidyKodirovokiTsepeis(where Where) (*[]CatalogVidyKodirovokiTsepei, error) {
	type ReturnObj struct {
		Value []CatalogVidyKodirovokiTsepei `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ВидыКодировокиЦепей", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogVidyKodirovokiTsepei(key PrimaryCatalogVidyKodirovokiTsepei, entity CatalogVidyKodirovokiTsepei) (*CatalogVidyKodirovokiTsepei, error) {
	return NewCatalogVidyKodirovokiTsepei(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogVidyKodirovokiTsepei(key PrimaryCatalogVidyKodirovokiTsepei) error {
	return c.removeEntity(key)
}

type CatalogVidyKodirovokiTsepeiElementyKodirovki struct {
	Key                            Guid     `json:"Ref_Key,omitempty"`
	LineNumber                     Int64    `json:"LineNumber,omitempty"`
	NeObiazatelnyiElement          *Boolean `json:"НеОбязательныйЭлемент,omitempty"`
	Element                        *String  `json:"Элемент,omitempty"`
	SvoistvoKey                    *Guid    `json:"Свойство_Key,omitempty"`
	DlinaElementa                  *Int64   `json:"ДлинаЭлемента,omitempty"`
	NomerStrokiTablChasti          *Int64   `json:"НомерСтрокиТаблЧасти,omitempty"`
	PeremennaiaDlina               *Boolean `json:"ПеременнаяДлина,omitempty"`
	ZapolniatSvoistvoVSootvetstvii *Boolean `json:"ЗаполнятьСвойствоВСоответствии,omitempty"`
}

func (CatalogVidyKodirovokiTsepeiElementyKodirovki) APIEntityType() string {
	return "Catalog_ВидыКодировокиЦепей_ЭлементыКодировки"
}
func NewCatalogVidyKodirovokiTsepeiElementyKodirovki(data string, prevError error) (*CatalogVidyKodirovokiTsepeiElementyKodirovki, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogVidyKodirovokiTsepeiElementyKodirovki)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogVidyKodirovokiTsepeiElementyKodirovki(entity CatalogVidyKodirovokiTsepeiElementyKodirovki) (*CatalogVidyKodirovokiTsepeiElementyKodirovki, error) {
	return NewCatalogVidyKodirovokiTsepeiElementyKodirovki(c.createEntity(entity))
}
func (c *Client) CatalogVidyKodirovokiTsepeiElementyKodirovki(key PrimaryCatalogVidyKodirovokiTsepeiElementyKodirovki, fields []string) (*CatalogVidyKodirovokiTsepeiElementyKodirovki, error) {
	return NewCatalogVidyKodirovokiTsepeiElementyKodirovki(c.getEntity(key, fields))
}
func (c *Client) CatalogVidyKodirovokiTsepeiElementyKodirovkis(where Where) (*[]CatalogVidyKodirovokiTsepeiElementyKodirovki, error) {
	type ReturnObj struct {
		Value []CatalogVidyKodirovokiTsepeiElementyKodirovki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ВидыКодировокиЦепей_ЭлементыКодировки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogVidyKodirovokiTsepeiElementyKodirovki(key PrimaryCatalogVidyKodirovokiTsepeiElementyKodirovki, entity CatalogVidyKodirovokiTsepeiElementyKodirovki) (*CatalogVidyKodirovokiTsepeiElementyKodirovki, error) {
	return NewCatalogVidyKodirovokiTsepeiElementyKodirovki(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogVidyKodirovokiTsepeiElementyKodirovki(key PrimaryCatalogVidyKodirovokiTsepeiElementyKodirovki) error {
	return c.removeEntity(key)
}

type CatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistv struct {
	Key                   Guid    `json:"Ref_Key,omitempty"`
	LineNumber            Int64   `json:"LineNumber,omitempty"`
	ZnachenieKodirovki    *String `json:"ЗначениеКодировки,omitempty"`
	ZnachenieSvoistvaKey  *Guid   `json:"ЗначениеСвойства_Key,omitempty"`
	NomerStrokiTablChasti *Int64  `json:"НомерСтрокиТаблЧасти,omitempty"`
	SvoistvoKey           *Guid   `json:"Свойство_Key,omitempty"`
}

func (CatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistv) APIEntityType() string {
	return "Catalog_ВидыКодировокиЦепей_СоответствиеЗначенийКодровкиЗначениямСвойств"
}
func NewCatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistv(data string, prevError error) (*CatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistv, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistv)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistv(entity CatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistv) (*CatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistv, error) {
	return NewCatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistv(c.createEntity(entity))
}
func (c *Client) CatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistv(key PrimaryCatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistv, fields []string) (*CatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistv, error) {
	return NewCatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistv(c.getEntity(key, fields))
}
func (c *Client) CatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistvs(where Where) (*[]CatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistv, error) {
	type ReturnObj struct {
		Value []CatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistv `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ВидыКодировокиЦепей_СоответствиеЗначенийКодровкиЗначениямСвойств", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistv(key PrimaryCatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistv, entity CatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistv) (*CatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistv, error) {
	return NewCatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistv(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistv(key PrimaryCatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistv) error {
	return c.removeEntity(key)
}

type DocumentOtchetKomitentuOProdazhakh struct {
	Key                                         Guid                                                          `json:"Ref_Key,omitempty"`
	DataVersion                                 *String                                                       `json:"DataVersion,omitempty"`
	Number                                      *String                                                       `json:"Number,omitempty"`
	Date                                        *DateTime                                                     `json:"Date,omitempty"`
	DeletionMark                                *Boolean                                                      `json:"DeletionMark,omitempty"`
	Posted                                      *Boolean                                                      `json:"Posted,omitempty"`
	ValiutaDokumentaKey                         *Guid                                                         `json:"ВалютаДокумента_Key,omitempty"`
	Weight                                      *Double                                                       `json:"ВесДокумента,omitempty"`
	DogovorKontragentaKey                       *Guid                                                         `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie                           *String                                                       `json:"ДокументОснование,omitempty"`
	DokumentSozdanVIuTD                         *Boolean                                                      `json:"ДокументСозданВЮТД,omitempty"`
	KolichestvoDokumenta                        *Int64                                                        `json:"КоличествоДокумента,omitempty"`
	Comment                                     *String                                                       `json:"Комментарий,omitempty"`
	KontragentKey                               *Guid                                                         `json:"Контрагент_Key,omitempty"`
	KratnostVzaimoraschetov                     *Int64                                                        `json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov                         *Double                                                       `json:"КурсВзаиморасчетов,omitempty"`
	OrganizatsiiaKey                            *Guid                                                         `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                            *Guid                                                         `json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey                            *Guid                                                         `json:"Подразделение_Key,omitempty"`
	ProtsentKomissionnogoVoznagrazhdeniia       *Double                                                       `json:"ПроцентКомиссионногоВознаграждения,omitempty"`
	Sdelka                                      *String                                                       `json:"Сделка,omitempty"`
	SposobRaschetaKomissionnogoVoznagrazhdeniia *String                                                       `json:"СпособРасчетаКомиссионногоВознаграждения,omitempty"`
	StavkaNDSVoznagrazhdeniia                   *String                                                       `json:"СтавкаНДСВознаграждения,omitempty"`
	SummaVoznagrazhdeniia                       *Double                                                       `json:"СуммаВознаграждения,omitempty"`
	SumOfDocument                               *Double                                                       `json:"СуммаДокумента,omitempty"`
	TipDokumenta                                *String                                                       `json:"ТипДокумента,omitempty"`
	TipTsenKey                                  *Guid                                                         `json:"ТипЦен_Key,omitempty"`
	UderzhatKomissionnoeVoznagrazhdenie         *Boolean                                                      `json:"УдержатьКомиссионноеВознаграждение,omitempty"`
	UsloviiaOplatyKey                           *Guid                                                         `json:"УсловияОплаты_Key,omitempty"`
	KhoziaistvennaiaOperatsiiaKey               *Guid                                                         `json:"ХозяйственнаяОперация_Key,omitempty"`
	DenezhnyeSredstva                           *[]DocumentOtchetKomitentuOProdazhakhDenezhnyeSredstvaRowType `json:"ДенежныеСредства,omitempty"`
	Goods                                       *[]DocumentOtchetKomitentuOProdazhakhTovaryRowType            `json:"Товары,omitempty"`
	DokumentOsnovanieType                       *String                                                       `json:"ДокументОснование_Type,omitempty"`
	SdelkaType                                  *String                                                       `json:"Сделка_Type,omitempty"`
}

func (DocumentOtchetKomitentuOProdazhakh) APIEntityType() string {
	return "Document_ОтчетКомитентуОПродажах"
}
func NewDocumentOtchetKomitentuOProdazhakh(data string, prevError error) (*DocumentOtchetKomitentuOProdazhakh, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentOtchetKomitentuOProdazhakh)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentOtchetKomitentuOProdazhakh(entity DocumentOtchetKomitentuOProdazhakh) (*DocumentOtchetKomitentuOProdazhakh, error) {
	return NewDocumentOtchetKomitentuOProdazhakh(c.createEntity(entity))
}
func (c *Client) DocumentOtchetKomitentuOProdazhakh(key PrimaryDocumentOtchetKomitentuOProdazhakh, fields []string) (*DocumentOtchetKomitentuOProdazhakh, error) {
	return NewDocumentOtchetKomitentuOProdazhakh(c.getEntity(key, fields))
}
func (c *Client) DocumentOtchetKomitentuOProdazhakhs(where Where) (*[]DocumentOtchetKomitentuOProdazhakh, error) {
	type ReturnObj struct {
		Value []DocumentOtchetKomitentuOProdazhakh `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетКомитентуОПродажах", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentOtchetKomitentuOProdazhakh(key PrimaryDocumentOtchetKomitentuOProdazhakh, entity DocumentOtchetKomitentuOProdazhakh) (*DocumentOtchetKomitentuOProdazhakh, error) {
	return NewDocumentOtchetKomitentuOProdazhakh(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentOtchetKomitentuOProdazhakh(key PrimaryDocumentOtchetKomitentuOProdazhakh) error {
	return c.removeEntity(key)
}

type DocumentOtchetKomitentuOProdazhakhDenezhnyeSredstva struct {
	Key                   Guid    `json:"Ref_Key,omitempty"`
	LineNumber            Int64   `json:"LineNumber,omitempty"`
	VidOtchetaPoPlatezham *String `json:"ВидОтчетаПоПлатежам,omitempty"`
	StavkaNDS             *String `json:"СтавкаНДС,omitempty"`
	Sum                   *Double `json:"Сумма,omitempty"`
	SummaNDS              *Double `json:"СуммаНДС,omitempty"`
}

func (DocumentOtchetKomitentuOProdazhakhDenezhnyeSredstva) APIEntityType() string {
	return "Document_ОтчетКомитентуОПродажах_ДенежныеСредства"
}
func NewDocumentOtchetKomitentuOProdazhakhDenezhnyeSredstva(data string, prevError error) (*DocumentOtchetKomitentuOProdazhakhDenezhnyeSredstva, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentOtchetKomitentuOProdazhakhDenezhnyeSredstva)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentOtchetKomitentuOProdazhakhDenezhnyeSredstva(entity DocumentOtchetKomitentuOProdazhakhDenezhnyeSredstva) (*DocumentOtchetKomitentuOProdazhakhDenezhnyeSredstva, error) {
	return NewDocumentOtchetKomitentuOProdazhakhDenezhnyeSredstva(c.createEntity(entity))
}
func (c *Client) DocumentOtchetKomitentuOProdazhakhDenezhnyeSredstva(key PrimaryDocumentOtchetKomitentuOProdazhakhDenezhnyeSredstva, fields []string) (*DocumentOtchetKomitentuOProdazhakhDenezhnyeSredstva, error) {
	return NewDocumentOtchetKomitentuOProdazhakhDenezhnyeSredstva(c.getEntity(key, fields))
}
func (c *Client) DocumentOtchetKomitentuOProdazhakhDenezhnyeSredstvas(where Where) (*[]DocumentOtchetKomitentuOProdazhakhDenezhnyeSredstva, error) {
	type ReturnObj struct {
		Value []DocumentOtchetKomitentuOProdazhakhDenezhnyeSredstva `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетКомитентуОПродажах_ДенежныеСредства", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentOtchetKomitentuOProdazhakhDenezhnyeSredstva(key PrimaryDocumentOtchetKomitentuOProdazhakhDenezhnyeSredstva, entity DocumentOtchetKomitentuOProdazhakhDenezhnyeSredstva) (*DocumentOtchetKomitentuOProdazhakhDenezhnyeSredstva, error) {
	return NewDocumentOtchetKomitentuOProdazhakhDenezhnyeSredstva(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentOtchetKomitentuOProdazhakhDenezhnyeSredstva(key PrimaryDocumentOtchetKomitentuOProdazhakhDenezhnyeSredstva) error {
	return c.removeEntity(key)
}

type DocumentOtchetKomitentuOProdazhakhTovary struct {
	Key                            Guid      `json:"Ref_Key,omitempty"`
	LineNumber                     Int64     `json:"LineNumber,omitempty"`
	Weight                         *Double   `json:"Вес,omitempty"`
	DokumentPostupleniia           *String   `json:"ДокументПоступления,omitempty"`
	Quantity                       *Int64    `json:"Количество,omitempty"`
	ItemKey                        *Guid     `json:"Номенклатура_Key,omitempty"`
	OtchetKomitentuKey             *Guid     `json:"ОтчетКомитенту_Key,omitempty"`
	SizeKey                        *Guid     `json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid     `json:"СерияНоменклатуры_Key,omitempty"`
	Sum                            *Double   `json:"Сумма,omitempty"`
	SummaVoznagrazhdeniia          *Double   `json:"СуммаВознаграждения,omitempty"`
	SummaNDSVoznagrazhdeniia       *Double   `json:"СуммаНДСВознаграждения,omitempty"`
	SummaPostupleniia              *Double   `json:"СуммаПоступления,omitempty"`
	KharakteristikaNomenklaturyKey *Guid     `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Double   `json:"Цена,omitempty"`
	TsenaPostupleniia              *Double   `json:"ЦенаПоступления,omitempty"`
	PokupatelKey                   *Guid     `json:"Покупатель_Key,omitempty"`
	DataRealizatsii                *DateTime `json:"ДатаРеализации,omitempty"`
	DokumentProdazhi               *String   `json:"ДокументПродажи,omitempty"`
	SchetFakturaVystavlennyiKey    *Guid     `json:"СчетФактураВыставленный_Key,omitempty"`
	DokumentPostupleniiaType       *String   `json:"ДокументПоступления_Type,omitempty"`
	DokumentProdazhiType           *String   `json:"ДокументПродажи_Type,omitempty"`
}

func (DocumentOtchetKomitentuOProdazhakhTovary) APIEntityType() string {
	return "Document_ОтчетКомитентуОПродажах_Товары"
}
func NewDocumentOtchetKomitentuOProdazhakhTovary(data string, prevError error) (*DocumentOtchetKomitentuOProdazhakhTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentOtchetKomitentuOProdazhakhTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentOtchetKomitentuOProdazhakhTovary(entity DocumentOtchetKomitentuOProdazhakhTovary) (*DocumentOtchetKomitentuOProdazhakhTovary, error) {
	return NewDocumentOtchetKomitentuOProdazhakhTovary(c.createEntity(entity))
}
func (c *Client) DocumentOtchetKomitentuOProdazhakhTovary(key PrimaryDocumentOtchetKomitentuOProdazhakhTovary, fields []string) (*DocumentOtchetKomitentuOProdazhakhTovary, error) {
	return NewDocumentOtchetKomitentuOProdazhakhTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentOtchetKomitentuOProdazhakhTovarys(where Where) (*[]DocumentOtchetKomitentuOProdazhakhTovary, error) {
	type ReturnObj struct {
		Value []DocumentOtchetKomitentuOProdazhakhTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетКомитентуОПродажах_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentOtchetKomitentuOProdazhakhTovary(key PrimaryDocumentOtchetKomitentuOProdazhakhTovary, entity DocumentOtchetKomitentuOProdazhakhTovary) (*DocumentOtchetKomitentuOProdazhakhTovary, error) {
	return NewDocumentOtchetKomitentuOProdazhakhTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentOtchetKomitentuOProdazhakhTovary(key PrimaryDocumentOtchetKomitentuOProdazhakhTovary) error {
	return c.removeEntity(key)
}

type CatalogKassy struct {
	Key                         Guid     `json:"Ref_Key,omitempty"`
	DataVersion                 *String  `json:"DataVersion,omitempty"`
	Description                 *String  `json:"Description,omitempty"`
	Code                        *String  `json:"Code,omitempty"`
	ParentKey                   *Guid    `json:"Parent_Key,omitempty"`
	IsFolder                    *Boolean `json:"IsFolder,omitempty"`
	DeletionMark                *Boolean `json:"DeletionMark,omitempty"`
	ValiutaDenezhnykhSredstvKey *Guid    `json:"ВалютаДенежныхСредств_Key,omitempty"`
}

func (CatalogKassy) APIEntityType() string {
	return "Catalog_Кассы"
}
func NewCatalogKassy(data string, prevError error) (*CatalogKassy, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogKassy)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogKassy(entity CatalogKassy) (*CatalogKassy, error) {
	return NewCatalogKassy(c.createEntity(entity))
}
func (c *Client) CatalogKassy(key PrimaryCatalogKassy, fields []string) (*CatalogKassy, error) {
	return NewCatalogKassy(c.getEntity(key, fields))
}
func (c *Client) CatalogKassys(where Where) (*[]CatalogKassy, error) {
	type ReturnObj struct {
		Value []CatalogKassy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Кассы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogKassy(key PrimaryCatalogKassy, entity CatalogKassy) (*CatalogKassy, error) {
	return NewCatalogKassy(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogKassy(key PrimaryCatalogKassy) error {
	return c.removeEntity(key)
}

type CatalogKassiry struct {
	Key          Guid     `json:"Ref_Key,omitempty"`
	DataVersion  *String  `json:"DataVersion,omitempty"`
	Description  *String  `json:"Description,omitempty"`
	Code         *String  `json:"Code,omitempty"`
	ParentKey    *Guid    `json:"Parent_Key,omitempty"`
	IsFolder     *Boolean `json:"IsFolder,omitempty"`
	DeletionMark *Boolean `json:"DeletionMark,omitempty"`
	NomerKarty   *String  `json:"НомерКарты,omitempty"`
	Parol        *String  `json:"Пароль,omitempty"`
	FizLitsoKey  *Guid    `json:"ФизЛицо_Key,omitempty"`
	NeRabotaet   *Boolean `json:"НеРаботает,omitempty"`
	KTU          *Double  `json:"КТУ,omitempty"`
}

func (CatalogKassiry) APIEntityType() string {
	return "Catalog_Кассиры"
}
func NewCatalogKassiry(data string, prevError error) (*CatalogKassiry, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogKassiry)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogKassiry(entity CatalogKassiry) (*CatalogKassiry, error) {
	return NewCatalogKassiry(c.createEntity(entity))
}
func (c *Client) CatalogKassiry(key PrimaryCatalogKassiry, fields []string) (*CatalogKassiry, error) {
	return NewCatalogKassiry(c.getEntity(key, fields))
}
func (c *Client) CatalogKassirys(where Where) (*[]CatalogKassiry, error) {
	type ReturnObj struct {
		Value []CatalogKassiry `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Кассиры", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogKassiry(key PrimaryCatalogKassiry, entity CatalogKassiry) (*CatalogKassiry, error) {
	return NewCatalogKassiry(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogKassiry(key PrimaryCatalogKassiry) error {
	return c.removeEntity(key)
}

type DocumentZaiavkaNaPereotsenkuTovarov struct {
	Key                            Guid                                                `json:"Ref_Key,omitempty"`
	DataVersion                    *String                                             `json:"DataVersion,omitempty"`
	Number                         *String                                             `json:"Number,omitempty"`
	Date                           *DateTime                                           `json:"Date,omitempty"`
	DeletionMark                   *Boolean                                            `json:"DeletionMark,omitempty"`
	Posted                         *Boolean                                            `json:"Posted,omitempty"`
	Weight                         *Double                                             `json:"ВесДокумента,omitempty"`
	DokumentSozdanVIuTD            *Boolean                                            `json:"ДокументСозданВЮТД,omitempty"`
	KolichestvoDokumenta           *Int64                                              `json:"КоличествоДокумента,omitempty"`
	Comment                        *String                                             `json:"Комментарий,omitempty"`
	OrganizatsiiaKey               *Guid                                               `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey               *Guid                                               `json:"Ответственный_Key,omitempty"`
	ParametryOtboraBase64Data      *Binary                                             `json:"ПараметрыОтбора_Base64Data,omitempty"`
	PodrazdelenieKey               *Guid                                               `json:"Подразделение_Key,omitempty"`
	DepartmentKey                  *Guid                                               `json:"Склад_Key,omitempty"`
	TipSkidkiNatsenkiKey           *Guid                                               `json:"ТипСкидкиНаценки_Key,omitempty"`
	TipTsenKey                     *Guid                                               `json:"ТипЦен_Key,omitempty"`
	KhoziaistvennaiaOperatsiiaKey  *Guid                                               `json:"ХозяйственнаяОперация_Key,omitempty"`
	NastroikiZapolneniiaBase64Data *Binary                                             `json:"НастройкиЗаполнения_Base64Data,omitempty"`
	Goods                          *[]DocumentZaiavkaNaPereotsenkuTovarovTovaryRowType `json:"Товары,omitempty"`
	ParametryOtboraType            *String                                             `json:"ПараметрыОтбора_Type,omitempty"`
	NastroikiZapolneniiaType       *String                                             `json:"НастройкиЗаполнения_Type,omitempty"`
	ParametryOtbora                *Stream                                             `json:"ПараметрыОтбора,omitempty"`
	NastroikiZapolneniia           *Stream                                             `json:"НастройкиЗаполнения,omitempty"`
}

func (DocumentZaiavkaNaPereotsenkuTovarov) APIEntityType() string {
	return "Document_ЗаявкаНаПереоценкуТоваров"
}
func NewDocumentZaiavkaNaPereotsenkuTovarov(data string, prevError error) (*DocumentZaiavkaNaPereotsenkuTovarov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentZaiavkaNaPereotsenkuTovarov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentZaiavkaNaPereotsenkuTovarov(entity DocumentZaiavkaNaPereotsenkuTovarov) (*DocumentZaiavkaNaPereotsenkuTovarov, error) {
	return NewDocumentZaiavkaNaPereotsenkuTovarov(c.createEntity(entity))
}
func (c *Client) DocumentZaiavkaNaPereotsenkuTovarov(key PrimaryDocumentZaiavkaNaPereotsenkuTovarov, fields []string) (*DocumentZaiavkaNaPereotsenkuTovarov, error) {
	return NewDocumentZaiavkaNaPereotsenkuTovarov(c.getEntity(key, fields))
}
func (c *Client) DocumentZaiavkaNaPereotsenkuTovarovs(where Where) (*[]DocumentZaiavkaNaPereotsenkuTovarov, error) {
	type ReturnObj struct {
		Value []DocumentZaiavkaNaPereotsenkuTovarov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗаявкаНаПереоценкуТоваров", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentZaiavkaNaPereotsenkuTovarov(key PrimaryDocumentZaiavkaNaPereotsenkuTovarov, entity DocumentZaiavkaNaPereotsenkuTovarov) (*DocumentZaiavkaNaPereotsenkuTovarov, error) {
	return NewDocumentZaiavkaNaPereotsenkuTovarov(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentZaiavkaNaPereotsenkuTovarov(key PrimaryDocumentZaiavkaNaPereotsenkuTovarov) error {
	return c.removeEntity(key)
}

type DocumentZaiavkaNaPereotsenkuTovarovTovary struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	Weight                         *Double `json:"Вес,omitempty"`
	Quantity                       *Int64  `json:"Количество,omitempty"`
	ItemKey                        *Guid   `json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid   `json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	RetailCost                     *Double `json:"ЦенаВРознице,omitempty"`
	TsenaVRoznitseGr               *Double `json:"ЦенаВРозницеГр,omitempty"`
	TsenaVRoznitseStaraia          *Double `json:"ЦенаВРозницеСтарая,omitempty"`
}

func (DocumentZaiavkaNaPereotsenkuTovarovTovary) APIEntityType() string {
	return "Document_ЗаявкаНаПереоценкуТоваров_Товары"
}
func NewDocumentZaiavkaNaPereotsenkuTovarovTovary(data string, prevError error) (*DocumentZaiavkaNaPereotsenkuTovarovTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentZaiavkaNaPereotsenkuTovarovTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentZaiavkaNaPereotsenkuTovarovTovary(entity DocumentZaiavkaNaPereotsenkuTovarovTovary) (*DocumentZaiavkaNaPereotsenkuTovarovTovary, error) {
	return NewDocumentZaiavkaNaPereotsenkuTovarovTovary(c.createEntity(entity))
}
func (c *Client) DocumentZaiavkaNaPereotsenkuTovarovTovary(key PrimaryDocumentZaiavkaNaPereotsenkuTovarovTovary, fields []string) (*DocumentZaiavkaNaPereotsenkuTovarovTovary, error) {
	return NewDocumentZaiavkaNaPereotsenkuTovarovTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentZaiavkaNaPereotsenkuTovarovTovarys(where Where) (*[]DocumentZaiavkaNaPereotsenkuTovarovTovary, error) {
	type ReturnObj struct {
		Value []DocumentZaiavkaNaPereotsenkuTovarovTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗаявкаНаПереоценкуТоваров_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentZaiavkaNaPereotsenkuTovarovTovary(key PrimaryDocumentZaiavkaNaPereotsenkuTovarovTovary, entity DocumentZaiavkaNaPereotsenkuTovarovTovary) (*DocumentZaiavkaNaPereotsenkuTovarovTovary, error) {
	return NewDocumentZaiavkaNaPereotsenkuTovarovTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentZaiavkaNaPereotsenkuTovarovTovary(key PrimaryDocumentZaiavkaNaPereotsenkuTovarovTovary) error {
	return c.removeEntity(key)
}

type CatalogProizvodstvennyeUchastki struct {
	Key                     Guid     `json:"Ref_Key,omitempty"`
	DataVersion             *String  `json:"DataVersion,omitempty"`
	Description             *String  `json:"Description,omitempty"`
	Code                    *String  `json:"Code,omitempty"`
	DeletionMark            *Boolean `json:"DeletionMark,omitempty"`
	SobstvennoeProizvodstvo *Boolean `json:"СобственноеПроизводство,omitempty"`
	PoizdelnyiUchet         *Boolean `json:"ПоиздельныйУчет,omitempty"`
	GIPN                    *Boolean `json:"ГИПН,omitempty"`
}

func (CatalogProizvodstvennyeUchastki) APIEntityType() string {
	return "Catalog_ПроизводственныеУчастки"
}
func NewCatalogProizvodstvennyeUchastki(data string, prevError error) (*CatalogProizvodstvennyeUchastki, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogProizvodstvennyeUchastki)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogProizvodstvennyeUchastki(entity CatalogProizvodstvennyeUchastki) (*CatalogProizvodstvennyeUchastki, error) {
	return NewCatalogProizvodstvennyeUchastki(c.createEntity(entity))
}
func (c *Client) CatalogProizvodstvennyeUchastki(key PrimaryCatalogProizvodstvennyeUchastki, fields []string) (*CatalogProizvodstvennyeUchastki, error) {
	return NewCatalogProizvodstvennyeUchastki(c.getEntity(key, fields))
}
func (c *Client) CatalogProizvodstvennyeUchastkis(where Where) (*[]CatalogProizvodstvennyeUchastki, error) {
	type ReturnObj struct {
		Value []CatalogProizvodstvennyeUchastki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ПроизводственныеУчастки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogProizvodstvennyeUchastki(key PrimaryCatalogProizvodstvennyeUchastki, entity CatalogProizvodstvennyeUchastki) (*CatalogProizvodstvennyeUchastki, error) {
	return NewCatalogProizvodstvennyeUchastki(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogProizvodstvennyeUchastki(key PrimaryCatalogProizvodstvennyeUchastki) error {
	return c.removeEntity(key)
}

type DocumentZakrytieZakazovKlientov struct {
	Key              Guid                                            `json:"Ref_Key,omitempty"`
	DataVersion      *String                                         `json:"DataVersion,omitempty"`
	Number           *String                                         `json:"Number,omitempty"`
	Date             *DateTime                                       `json:"Date,omitempty"`
	DeletionMark     *Boolean                                        `json:"DeletionMark,omitempty"`
	Posted           *Boolean                                        `json:"Posted,omitempty"`
	Comment          *String                                         `json:"Комментарий,omitempty"`
	OtvetstvennyiKey *Guid                                           `json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey *Guid                                           `json:"Подразделение_Key,omitempty"`
	TipDokumenta     *String                                         `json:"ТипДокумента,omitempty"`
	Zakazy           *[]DocumentZakrytieZakazovKlientovZakazyRowType `json:"Заказы,omitempty"`
}

func (DocumentZakrytieZakazovKlientov) APIEntityType() string {
	return "Document_ЗакрытиеЗаказовКлиентов"
}
func NewDocumentZakrytieZakazovKlientov(data string, prevError error) (*DocumentZakrytieZakazovKlientov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentZakrytieZakazovKlientov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentZakrytieZakazovKlientov(entity DocumentZakrytieZakazovKlientov) (*DocumentZakrytieZakazovKlientov, error) {
	return NewDocumentZakrytieZakazovKlientov(c.createEntity(entity))
}
func (c *Client) DocumentZakrytieZakazovKlientov(key PrimaryDocumentZakrytieZakazovKlientov, fields []string) (*DocumentZakrytieZakazovKlientov, error) {
	return NewDocumentZakrytieZakazovKlientov(c.getEntity(key, fields))
}
func (c *Client) DocumentZakrytieZakazovKlientovs(where Where) (*[]DocumentZakrytieZakazovKlientov, error) {
	type ReturnObj struct {
		Value []DocumentZakrytieZakazovKlientov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗакрытиеЗаказовКлиентов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentZakrytieZakazovKlientov(key PrimaryDocumentZakrytieZakazovKlientov, entity DocumentZakrytieZakazovKlientov) (*DocumentZakrytieZakazovKlientov, error) {
	return NewDocumentZakrytieZakazovKlientov(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentZakrytieZakazovKlientov(key PrimaryDocumentZakrytieZakazovKlientov) error {
	return c.removeEntity(key)
}

type DocumentZakrytieZakazovKlientovZakazy struct {
	Key                        Guid  `json:"Ref_Key,omitempty"`
	LineNumber                 Int64 `json:"LineNumber,omitempty"`
	ZakazKlientaKey            *Guid `json:"ЗаказКлиента_Key,omitempty"`
	PrichinaZakrytiiaZakazaKey *Guid `json:"ПричинаЗакрытияЗаказа_Key,omitempty"`
}

func (DocumentZakrytieZakazovKlientovZakazy) APIEntityType() string {
	return "Document_ЗакрытиеЗаказовКлиентов_Заказы"
}
func NewDocumentZakrytieZakazovKlientovZakazy(data string, prevError error) (*DocumentZakrytieZakazovKlientovZakazy, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentZakrytieZakazovKlientovZakazy)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentZakrytieZakazovKlientovZakazy(entity DocumentZakrytieZakazovKlientovZakazy) (*DocumentZakrytieZakazovKlientovZakazy, error) {
	return NewDocumentZakrytieZakazovKlientovZakazy(c.createEntity(entity))
}
func (c *Client) DocumentZakrytieZakazovKlientovZakazy(key PrimaryDocumentZakrytieZakazovKlientovZakazy, fields []string) (*DocumentZakrytieZakazovKlientovZakazy, error) {
	return NewDocumentZakrytieZakazovKlientovZakazy(c.getEntity(key, fields))
}
func (c *Client) DocumentZakrytieZakazovKlientovZakazys(where Where) (*[]DocumentZakrytieZakazovKlientovZakazy, error) {
	type ReturnObj struct {
		Value []DocumentZakrytieZakazovKlientovZakazy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗакрытиеЗаказовКлиентов_Заказы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentZakrytieZakazovKlientovZakazy(key PrimaryDocumentZakrytieZakazovKlientovZakazy, entity DocumentZakrytieZakazovKlientovZakazy) (*DocumentZakrytieZakazovKlientovZakazy, error) {
	return NewDocumentZakrytieZakazovKlientovZakazy(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentZakrytieZakazovKlientovZakazy(key PrimaryDocumentZakrytieZakazovKlientovZakazy) error {
	return c.removeEntity(key)
}

type CatalogProekty struct {
	Key              Guid      `json:"Ref_Key,omitempty"`
	DataVersion      *String   `json:"DataVersion,omitempty"`
	Description      *String   `json:"Description,omitempty"`
	Code             *String   `json:"Code,omitempty"`
	ParentKey        *Guid     `json:"Parent_Key,omitempty"`
	IsFolder         *Boolean  `json:"IsFolder,omitempty"`
	DeletionMark     *Boolean  `json:"DeletionMark,omitempty"`
	DataNachala      *DateTime `json:"ДатаНачала,omitempty"`
	DataOkonchaniia  *DateTime `json:"ДатаОкончания,omitempty"`
	Opisanie         *String   `json:"Описание,omitempty"`
	OtvetstvennyiKey *Guid     `json:"Ответственный_Key,omitempty"`
	BIdentifikator   *String   `json:"Б_Идентификатор,omitempty"`
	BNomerVersii     *String   `json:"Б_НомерВерсии,omitempty"`
}

func (CatalogProekty) APIEntityType() string {
	return "Catalog_Проекты"
}
func NewCatalogProekty(data string, prevError error) (*CatalogProekty, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogProekty)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogProekty(entity CatalogProekty) (*CatalogProekty, error) {
	return NewCatalogProekty(c.createEntity(entity))
}
func (c *Client) CatalogProekty(key PrimaryCatalogProekty, fields []string) (*CatalogProekty, error) {
	return NewCatalogProekty(c.getEntity(key, fields))
}
func (c *Client) CatalogProektys(where Where) (*[]CatalogProekty, error) {
	type ReturnObj struct {
		Value []CatalogProekty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Проекты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogProekty(key PrimaryCatalogProekty, entity CatalogProekty) (*CatalogProekty, error) {
	return NewCatalogProekty(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogProekty(key PrimaryCatalogProekty) error {
	return c.removeEntity(key)
}

type DocumentPlatezhnoePoruchenieVkhodiashchee struct {
	Key                          Guid                                                                    `json:"Ref_Key,omitempty"`
	DataVersion                  *String                                                                 `json:"DataVersion,omitempty"`
	Number                       *String                                                                 `json:"Number,omitempty"`
	Date                         *DateTime                                                               `json:"Date,omitempty"`
	DeletionMark                 *Boolean                                                                `json:"DeletionMark,omitempty"`
	Posted                       *Boolean                                                                `json:"Posted,omitempty"`
	ValiutaDokumentaKey          *Guid                                                                   `json:"ВалютаДокумента_Key,omitempty"`
	OperationType                *String                                                                 `json:"ВидОперации,omitempty"`
	DataVkhodiashchegoDokumenta  *DateTime                                                               `json:"ДатаВходящегоДокумента,omitempty"`
	DataOplaty                   *DateTime                                                               `json:"ДатаОплаты,omitempty"`
	DogovorKontragentaKey        *Guid                                                                   `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie            *String                                                                 `json:"ДокументОснование,omitempty"`
	Comment                      *String                                                                 `json:"Комментарий,omitempty"`
	KontragentKey                *Guid                                                                   `json:"Контрагент_Key,omitempty"`
	NomerVkhodiashchegoDokumenta *String                                                                 `json:"НомерВходящегоДокумента,omitempty"`
	Oplacheno                    *Boolean                                                                `json:"Оплачено,omitempty"`
	OrganizatsiiaKey             *Guid                                                                   `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey             *Guid                                                                   `json:"Ответственный_Key,omitempty"`
	OtrazhenoVOperUchete         *Boolean                                                                `json:"ОтраженоВОперУчете,omitempty"`
	PodrazdelenieKey             *Guid                                                                   `json:"Подразделение_Key,omitempty"`
	TypeOfMovingMoneyKey         *Guid                                                                   `json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SumOfDocument                *Double                                                                 `json:"СуммаДокумента,omitempty"`
	SchetKontragentaKey          *Guid                                                                   `json:"СчетКонтрагента_Key,omitempty"`
	SchetOrganizatsiiKey         *Guid                                                                   `json:"СчетОрганизации_Key,omitempty"`
	TipDokumenta                 *String                                                                 `json:"ТипДокумента,omitempty"`
	ChastichnaiaOplata           *Boolean                                                                `json:"ЧастичнаяОплата,omitempty"`
	DokumentSozdanVIuTD          *Boolean                                                                `json:"ДокументСозданВЮТД,omitempty"`
	NaznacheniePlatezha          *String                                                                 `json:"НазначениеПлатежа,omitempty"`
	BDataDokumenta               *DateTime                                                               `json:"Б_ДатаДокумента,omitempty"`
	BIdentifikator               *String                                                                 `json:"Б_Идентификатор,omitempty"`
	ExtendedPayments             *[]DocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezhaRowType `json:"РасшифровкаПлатежа,omitempty"`
	RekvizityKontragenta         *[]DocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragentaRowType `json:"РеквизитыКонтрагента,omitempty"`
	DokumentOsnovanieType        *String                                                                 `json:"ДокументОснование_Type,omitempty"`
}

func (DocumentPlatezhnoePoruchenieVkhodiashchee) APIEntityType() string {
	return "Document_ПлатежноеПоручениеВходящее"
}
func NewDocumentPlatezhnoePoruchenieVkhodiashchee(data string, prevError error) (*DocumentPlatezhnoePoruchenieVkhodiashchee, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPlatezhnoePoruchenieVkhodiashchee)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPlatezhnoePoruchenieVkhodiashchee(entity DocumentPlatezhnoePoruchenieVkhodiashchee) (*DocumentPlatezhnoePoruchenieVkhodiashchee, error) {
	return NewDocumentPlatezhnoePoruchenieVkhodiashchee(c.createEntity(entity))
}
func (c *Client) DocumentPlatezhnoePoruchenieVkhodiashchee(key PrimaryDocumentPlatezhnoePoruchenieVkhodiashchee, fields []string) (*DocumentPlatezhnoePoruchenieVkhodiashchee, error) {
	return NewDocumentPlatezhnoePoruchenieVkhodiashchee(c.getEntity(key, fields))
}
func (c *Client) DocumentPlatezhnoePoruchenieVkhodiashchees(where Where) (*[]DocumentPlatezhnoePoruchenieVkhodiashchee, error) {
	type ReturnObj struct {
		Value []DocumentPlatezhnoePoruchenieVkhodiashchee `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПлатежноеПоручениеВходящее", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPlatezhnoePoruchenieVkhodiashchee(key PrimaryDocumentPlatezhnoePoruchenieVkhodiashchee, entity DocumentPlatezhnoePoruchenieVkhodiashchee) (*DocumentPlatezhnoePoruchenieVkhodiashchee, error) {
	return NewDocumentPlatezhnoePoruchenieVkhodiashchee(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPlatezhnoePoruchenieVkhodiashchee(key PrimaryDocumentPlatezhnoePoruchenieVkhodiashchee) error {
	return c.removeEntity(key)
}

type DocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezha struct {
	Key                              Guid    `json:"Ref_Key,omitempty"`
	LineNumber                       Int64   `json:"LineNumber,omitempty"`
	DogovorKontragentaKey            *Guid   `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentPlanirovaniiaPlatezhaKey *Guid   `json:"ДокументПланированияПлатежа_Key,omitempty"`
	KratnostVzaimoraschetov          *Int64  `json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov              *Double `json:"КурсВзаиморасчетов,omitempty"`
	KursVzaimoraschetovPlan          *Double `json:"КурсВзаиморасчетовПлан,omitempty"`
	ProektKey                        *Guid   `json:"Проект_Key,omitempty"`
	Sdelka                           *String `json:"Сделка,omitempty"`
	StavkaNDS                        *String `json:"СтавкаНДС,omitempty"`
	TypeOfMovingMoneyKey             *Guid   `json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov             *Double `json:"СуммаВзаиморасчетов,omitempty"`
	SummaNDS                         *Double `json:"СуммаНДС,omitempty"`
	Sum                              *Double `json:"СуммаПлатежа,omitempty"`
	SummaPlatezhaPlan                *Double `json:"СуммаПлатежаПлан,omitempty"`
	SdelkaType                       *String `json:"Сделка_Type,omitempty"`
}

func (DocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezha) APIEntityType() string {
	return "Document_ПлатежноеПоручениеВходящее_РасшифровкаПлатежа"
}
func NewDocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezha(data string, prevError error) (*DocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezha, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezha)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezha(entity DocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezha) (*DocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezha, error) {
	return NewDocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezha(c.createEntity(entity))
}
func (c *Client) DocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezha(key PrimaryDocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezha, fields []string) (*DocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezha, error) {
	return NewDocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezha(c.getEntity(key, fields))
}
func (c *Client) DocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezhas(where Where) (*[]DocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezha, error) {
	type ReturnObj struct {
		Value []DocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezha `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПлатежноеПоручениеВходящее_РасшифровкаПлатежа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezha(key PrimaryDocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezha, entity DocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezha) (*DocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezha, error) {
	return NewDocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezha(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezha(key PrimaryDocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezha) error {
	return c.removeEntity(key)
}

type DocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragenta struct {
	Key            Guid    `json:"Ref_Key,omitempty"`
	LineNumber     Int64   `json:"LineNumber,omitempty"`
	Znachenie      *String `json:"Значение,omitempty"`
	Predstavlenie  *String `json:"Представление,omitempty"`
	Rekvizit       *String `json:"Реквизит,omitempty"`
	TipKontragenta *String `json:"ТипКонтрагента,omitempty"`
}

func (DocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragenta) APIEntityType() string {
	return "Document_ПлатежноеПоручениеВходящее_РеквизитыКонтрагента"
}
func NewDocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragenta(data string, prevError error) (*DocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragenta, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragenta)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragenta(entity DocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragenta) (*DocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragenta, error) {
	return NewDocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragenta(c.createEntity(entity))
}
func (c *Client) DocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragenta(key PrimaryDocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragenta, fields []string) (*DocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragenta, error) {
	return NewDocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragenta(c.getEntity(key, fields))
}
func (c *Client) DocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragentas(where Where) (*[]DocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragenta, error) {
	type ReturnObj struct {
		Value []DocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragenta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПлатежноеПоручениеВходящее_РеквизитыКонтрагента", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragenta(key PrimaryDocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragenta, entity DocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragenta) (*DocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragenta, error) {
	return NewDocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragenta(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragenta(key PrimaryDocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragenta) error {
	return c.removeEntity(key)
}

type DocumentVydachaZakaza struct {
	Key                  Guid      `json:"Ref_Key,omitempty"`
	DataVersion          *String   `json:"DataVersion,omitempty"`
	Number               *String   `json:"Number,omitempty"`
	Date                 *DateTime `json:"Date,omitempty"`
	DeletionMark         *Boolean  `json:"DeletionMark,omitempty"`
	Posted               *Boolean  `json:"Posted,omitempty"`
	Weight               *Double   `json:"ВесДокумента,omitempty"`
	KolichestvoDokumenta *Int64    `json:"КоличествоДокумента,omitempty"`
}

func (DocumentVydachaZakaza) APIEntityType() string {
	return "Document_ВыдачаЗаказа"
}
func NewDocumentVydachaZakaza(data string, prevError error) (*DocumentVydachaZakaza, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentVydachaZakaza)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentVydachaZakaza(entity DocumentVydachaZakaza) (*DocumentVydachaZakaza, error) {
	return NewDocumentVydachaZakaza(c.createEntity(entity))
}
func (c *Client) DocumentVydachaZakaza(key PrimaryDocumentVydachaZakaza, fields []string) (*DocumentVydachaZakaza, error) {
	return NewDocumentVydachaZakaza(c.getEntity(key, fields))
}
func (c *Client) DocumentVydachaZakazas(where Where) (*[]DocumentVydachaZakaza, error) {
	type ReturnObj struct {
		Value []DocumentVydachaZakaza `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВыдачаЗаказа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentVydachaZakaza(key PrimaryDocumentVydachaZakaza, entity DocumentVydachaZakaza) (*DocumentVydachaZakaza, error) {
	return NewDocumentVydachaZakaza(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentVydachaZakaza(key PrimaryDocumentVydachaZakaza) error {
	return c.removeEntity(key)
}

type CatalogFormyOgranki struct {
	Key          Guid     `json:"Ref_Key,omitempty"`
	DataVersion  *String  `json:"DataVersion,omitempty"`
	Description  *String  `json:"Description,omitempty"`
	Code         *String  `json:"Code,omitempty"`
	OwnerKey     *Guid    `json:"Owner_Key,omitempty"`
	DeletionMark *Boolean `json:"DeletionMark,omitempty"`
}

func (CatalogFormyOgranki) APIEntityType() string {
	return "Catalog_ФормыОгранки"
}
func NewCatalogFormyOgranki(data string, prevError error) (*CatalogFormyOgranki, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogFormyOgranki)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogFormyOgranki(entity CatalogFormyOgranki) (*CatalogFormyOgranki, error) {
	return NewCatalogFormyOgranki(c.createEntity(entity))
}
func (c *Client) CatalogFormyOgranki(key PrimaryCatalogFormyOgranki, fields []string) (*CatalogFormyOgranki, error) {
	return NewCatalogFormyOgranki(c.getEntity(key, fields))
}
func (c *Client) CatalogFormyOgrankis(where Where) (*[]CatalogFormyOgranki, error) {
	type ReturnObj struct {
		Value []CatalogFormyOgranki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ФормыОгранки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogFormyOgranki(key PrimaryCatalogFormyOgranki, entity CatalogFormyOgranki) (*CatalogFormyOgranki, error) {
	return NewCatalogFormyOgranki(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogFormyOgranki(key PrimaryCatalogFormyOgranki) error {
	return c.removeEntity(key)
}

type CatalogFormatyMagazinov struct {
	Key          Guid     `json:"Ref_Key,omitempty"`
	DataVersion  *String  `json:"DataVersion,omitempty"`
	Description  *String  `json:"Description,omitempty"`
	Code         *String  `json:"Code,omitempty"`
	DeletionMark *Boolean `json:"DeletionMark,omitempty"`
}

func (CatalogFormatyMagazinov) APIEntityType() string {
	return "Catalog_ФорматыМагазинов"
}
func NewCatalogFormatyMagazinov(data string, prevError error) (*CatalogFormatyMagazinov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogFormatyMagazinov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogFormatyMagazinov(entity CatalogFormatyMagazinov) (*CatalogFormatyMagazinov, error) {
	return NewCatalogFormatyMagazinov(c.createEntity(entity))
}
func (c *Client) CatalogFormatyMagazinov(key PrimaryCatalogFormatyMagazinov, fields []string) (*CatalogFormatyMagazinov, error) {
	return NewCatalogFormatyMagazinov(c.getEntity(key, fields))
}
func (c *Client) CatalogFormatyMagazinovs(where Where) (*[]CatalogFormatyMagazinov, error) {
	type ReturnObj struct {
		Value []CatalogFormatyMagazinov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ФорматыМагазинов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogFormatyMagazinov(key PrimaryCatalogFormatyMagazinov, entity CatalogFormatyMagazinov) (*CatalogFormatyMagazinov, error) {
	return NewCatalogFormatyMagazinov(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogFormatyMagazinov(key PrimaryCatalogFormatyMagazinov) error {
	return c.removeEntity(key)
}

type CatalogRabochieMesta struct {
	Key            Guid     `json:"Ref_Key,omitempty"`
	DataVersion    *String  `json:"DataVersion,omitempty"`
	Description    *String  `json:"Description,omitempty"`
	Code           *String  `json:"Code,omitempty"`
	DeletionMark   *Boolean `json:"DeletionMark,omitempty"`
	ImiaKompiutera *String  `json:"ИмяКомпьютера,omitempty"`
	SetevoiPort    *Int64   `json:"СетевойПорт,omitempty"`
}

func (CatalogRabochieMesta) APIEntityType() string {
	return "Catalog_РабочиеМеста"
}
func NewCatalogRabochieMesta(data string, prevError error) (*CatalogRabochieMesta, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogRabochieMesta)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogRabochieMesta(entity CatalogRabochieMesta) (*CatalogRabochieMesta, error) {
	return NewCatalogRabochieMesta(c.createEntity(entity))
}
func (c *Client) CatalogRabochieMesta(key PrimaryCatalogRabochieMesta, fields []string) (*CatalogRabochieMesta, error) {
	return NewCatalogRabochieMesta(c.getEntity(key, fields))
}
func (c *Client) CatalogRabochieMestas(where Where) (*[]CatalogRabochieMesta, error) {
	type ReturnObj struct {
		Value []CatalogRabochieMesta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_РабочиеМеста", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogRabochieMesta(key PrimaryCatalogRabochieMesta, entity CatalogRabochieMesta) (*CatalogRabochieMesta, error) {
	return NewCatalogRabochieMesta(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogRabochieMesta(key PrimaryCatalogRabochieMesta) error {
	return c.removeEntity(key)
}

type CatalogNastroikiVypolneniiaObmena struct {
	Key                                               Guid                                                                                 `json:"Ref_Key,omitempty"`
	DataVersion                                       *String                                                                              `json:"DataVersion,omitempty"`
	Description                                       *String                                                                              `json:"Description,omitempty"`
	Code                                              *String                                                                              `json:"Code,omitempty"`
	DeletionMark                                      *Boolean                                                                             `json:"DeletionMark,omitempty"`
	AdresDliaOtpravkiSoobshcheniiObOshibke            *String                                                                              `json:"АдресДляОтправкиСообщенийОбОшибке,omitempty"`
	VypolniatDeistviiaPodPolnymiPravami               *Boolean                                                                             `json:"ВыполнятьДействияПодПолнымиПравами,omitempty"`
	VypolniatObmenPriZakrytiiSmeny                    *Boolean                                                                             `json:"ВыполнятьОбменПриЗакрытииСмены,omitempty"`
	VypolniatObmenPriPoiavleniiFaila                  *String                                                                              `json:"ВыполнятьОбменПриПоявленииФайла,omitempty"`
	DinamicheskiIzmeniatIntervalMezhduObmenami        *Boolean                                                                             `json:"ДинамическиИзменятьИнтервалМеждуОбменами,omitempty"`
	IspolzovatReglamentnyeZadaniia                    *Boolean                                                                             `json:"ИспользоватьРегламентныеЗадания,omitempty"`
	KazhdoeZavershenieRabotySProgrammoi               *Boolean                                                                             `json:"КаждоеЗавершениеРаботыСПрограммой,omitempty"`
	KazhdyiZapuskProgrammy                            *Boolean                                                                             `json:"КаждыйЗапускПрограммы,omitempty"`
	KatalogProverkiDostupnosti                        *String                                                                              `json:"КаталогПроверкиДоступности,omitempty"`
	KolichestvoElementovVTranzaktsiiNaVygruzkuDannykh *Int64                                                                               `json:"КоличествоЭлементовВТранзакцииНаВыгрузкуДанных,omitempty"`
	KolichestvoElementovVTranzaktsiiNaZagruzkuDannykh *Int64                                                                               `json:"КоличествоЭлементовВТранзакцииНаЗагрузкуДанных,omitempty"`
	Comment                                           *String                                                                              `json:"Комментарий,omitempty"`
	OtvetstvennyiKey                                  *Guid                                                                                `json:"Ответственный_Key,omitempty"`
	ProverkaSertifikatov                              *Boolean                                                                             `json:"ПроверкаСертификатов,omitempty"`
	ReglamentnoeZadanie                               *String                                                                              `json:"РегламентноеЗадание,omitempty"`
	UchetnaiaZapisOtpravkiSoobshcheniiaObOshibkeKey   *Guid                                                                                `json:"УчетнаяЗаписьОтправкиСообщенияОбОшибке_Key,omitempty"`
	NastroikiObmena                                   *[]CatalogNastroikiVypolneniiaObmenaNastroikiObmenaRowType                           `json:"НастройкиОбмена,omitempty"`
	SoobshcheniiaNeIavliaiushchiesiaOshibkami         *[]CatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkamiRowType `json:"СообщенияНеЯвляющиесяОшибками,omitempty"`
}

func (CatalogNastroikiVypolneniiaObmena) APIEntityType() string {
	return "Catalog_НастройкиВыполненияОбмена"
}
func NewCatalogNastroikiVypolneniiaObmena(data string, prevError error) (*CatalogNastroikiVypolneniiaObmena, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogNastroikiVypolneniiaObmena)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogNastroikiVypolneniiaObmena(entity CatalogNastroikiVypolneniiaObmena) (*CatalogNastroikiVypolneniiaObmena, error) {
	return NewCatalogNastroikiVypolneniiaObmena(c.createEntity(entity))
}
func (c *Client) CatalogNastroikiVypolneniiaObmena(key PrimaryCatalogNastroikiVypolneniiaObmena, fields []string) (*CatalogNastroikiVypolneniiaObmena, error) {
	return NewCatalogNastroikiVypolneniiaObmena(c.getEntity(key, fields))
}
func (c *Client) CatalogNastroikiVypolneniiaObmenas(where Where) (*[]CatalogNastroikiVypolneniiaObmena, error) {
	type ReturnObj struct {
		Value []CatalogNastroikiVypolneniiaObmena `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкиВыполненияОбмена", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogNastroikiVypolneniiaObmena(key PrimaryCatalogNastroikiVypolneniiaObmena, entity CatalogNastroikiVypolneniiaObmena) (*CatalogNastroikiVypolneniiaObmena, error) {
	return NewCatalogNastroikiVypolneniiaObmena(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogNastroikiVypolneniiaObmena(key PrimaryCatalogNastroikiVypolneniiaObmena) error {
	return c.removeEntity(key)
}

type CatalogNastroikiVypolneniiaObmenaNastroikiObmena struct {
	Key                      Guid    `json:"Ref_Key,omitempty"`
	LineNumber               Int64   `json:"LineNumber,omitempty"`
	VypolniaemoeDeistvie     *String `json:"ВыполняемоеДействие,omitempty"`
	NastroikaObmenaKey       *Guid   `json:"НастройкаОбмена_Key,omitempty"`
	VypolniaemoeDeistvieType *String `json:"ВыполняемоеДействие_Type,omitempty"`
}

func (CatalogNastroikiVypolneniiaObmenaNastroikiObmena) APIEntityType() string {
	return "Catalog_НастройкиВыполненияОбмена_НастройкиОбмена"
}
func NewCatalogNastroikiVypolneniiaObmenaNastroikiObmena(data string, prevError error) (*CatalogNastroikiVypolneniiaObmenaNastroikiObmena, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogNastroikiVypolneniiaObmenaNastroikiObmena)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogNastroikiVypolneniiaObmenaNastroikiObmena(entity CatalogNastroikiVypolneniiaObmenaNastroikiObmena) (*CatalogNastroikiVypolneniiaObmenaNastroikiObmena, error) {
	return NewCatalogNastroikiVypolneniiaObmenaNastroikiObmena(c.createEntity(entity))
}
func (c *Client) CatalogNastroikiVypolneniiaObmenaNastroikiObmena(key PrimaryCatalogNastroikiVypolneniiaObmenaNastroikiObmena, fields []string) (*CatalogNastroikiVypolneniiaObmenaNastroikiObmena, error) {
	return NewCatalogNastroikiVypolneniiaObmenaNastroikiObmena(c.getEntity(key, fields))
}
func (c *Client) CatalogNastroikiVypolneniiaObmenaNastroikiObmenas(where Where) (*[]CatalogNastroikiVypolneniiaObmenaNastroikiObmena, error) {
	type ReturnObj struct {
		Value []CatalogNastroikiVypolneniiaObmenaNastroikiObmena `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкиВыполненияОбмена_НастройкиОбмена", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogNastroikiVypolneniiaObmenaNastroikiObmena(key PrimaryCatalogNastroikiVypolneniiaObmenaNastroikiObmena, entity CatalogNastroikiVypolneniiaObmenaNastroikiObmena) (*CatalogNastroikiVypolneniiaObmenaNastroikiObmena, error) {
	return NewCatalogNastroikiVypolneniiaObmenaNastroikiObmena(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogNastroikiVypolneniiaObmenaNastroikiObmena(key PrimaryCatalogNastroikiVypolneniiaObmenaNastroikiObmena) error {
	return c.removeEntity(key)
}

type CatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkami struct {
	Key                Guid    `json:"Ref_Key,omitempty"`
	LineNumber         Int64   `json:"LineNumber,omitempty"`
	TekstSoobshcheniia *String `json:"ТекстСообщения,omitempty"`
}

func (CatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkami) APIEntityType() string {
	return "Catalog_НастройкиВыполненияОбмена_СообщенияНеЯвляющиесяОшибками"
}
func NewCatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkami(data string, prevError error) (*CatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkami, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkami)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkami(entity CatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkami) (*CatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkami, error) {
	return NewCatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkami(c.createEntity(entity))
}
func (c *Client) CatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkami(key PrimaryCatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkami, fields []string) (*CatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkami, error) {
	return NewCatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkami(c.getEntity(key, fields))
}
func (c *Client) CatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkamis(where Where) (*[]CatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkami, error) {
	type ReturnObj struct {
		Value []CatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkami `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкиВыполненияОбмена_СообщенияНеЯвляющиесяОшибками", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkami(key PrimaryCatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkami, entity CatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkami) (*CatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkami, error) {
	return NewCatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkami(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkami(key PrimaryCatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkami) error {
	return c.removeEntity(key)
}

type CatalogZnacheniiaSvoistvObieektov struct {
	Key            Guid     `json:"Ref_Key,omitempty"`
	DataVersion    *String  `json:"DataVersion,omitempty"`
	Description    *String  `json:"Description,omitempty"`
	Code           *String  `json:"Code,omitempty"`
	OwnerKey       *Guid    `json:"Owner_Key,omitempty"`
	DeletionMark   *Boolean `json:"DeletionMark,omitempty"`
	BIdentifikator *String  `json:"Б_Идентификатор,omitempty"`
	BNomerVersii   *String  `json:"Б_НомерВерсии,omitempty"`
}

func (CatalogZnacheniiaSvoistvObieektov) APIEntityType() string {
	return "Catalog_ЗначенияСвойствОбъектов"
}
func NewCatalogZnacheniiaSvoistvObieektov(data string, prevError error) (*CatalogZnacheniiaSvoistvObieektov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogZnacheniiaSvoistvObieektov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogZnacheniiaSvoistvObieektov(entity CatalogZnacheniiaSvoistvObieektov) (*CatalogZnacheniiaSvoistvObieektov, error) {
	return NewCatalogZnacheniiaSvoistvObieektov(c.createEntity(entity))
}
func (c *Client) CatalogZnacheniiaSvoistvObieektov(key PrimaryCatalogZnacheniiaSvoistvObieektov, fields []string) (*CatalogZnacheniiaSvoistvObieektov, error) {
	return NewCatalogZnacheniiaSvoistvObieektov(c.getEntity(key, fields))
}
func (c *Client) CatalogZnacheniiaSvoistvObieektovs(where Where) (*[]CatalogZnacheniiaSvoistvObieektov, error) {
	type ReturnObj struct {
		Value []CatalogZnacheniiaSvoistvObieektov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ЗначенияСвойствОбъектов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogZnacheniiaSvoistvObieektov(key PrimaryCatalogZnacheniiaSvoistvObieektov, entity CatalogZnacheniiaSvoistvObieektov) (*CatalogZnacheniiaSvoistvObieektov, error) {
	return NewCatalogZnacheniiaSvoistvObieektov(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogZnacheniiaSvoistvObieektov(key PrimaryCatalogZnacheniiaSvoistvObieektov) error {
	return c.removeEntity(key)
}

type DocumentRealizatsiiaTovarovUslug struct {
	Key                            Guid                                             `json:"Ref_Key,omitempty"`
	DataVersion                    *String                                          `json:"DataVersion,omitempty"`
	Number                         *String                                          `json:"Number,omitempty"`
	Date                           *DateTime                                        `json:"Date,omitempty"`
	DeletionMark                   *Boolean                                         `json:"DeletionMark,omitempty"`
	Posted                         *Boolean                                         `json:"Posted,omitempty"`
	AdresDostavki                  *String                                          `json:"АдресДоставки,omitempty"`
	BankovskiiSchetOrganizatsiiKey *Guid                                            `json:"БанковскийСчетОрганизации_Key,omitempty"`
	ValiutaDokumentaKey            *Guid                                            `json:"ВалютаДокумента_Key,omitempty"`
	Weight                         *Double                                          `json:"ВесДокумента,omitempty"`
	GruzootpravitelKey             *Guid                                            `json:"Грузоотправитель_Key,omitempty"`
	GruzopoluchatelKey             *Guid                                            `json:"Грузополучатель_Key,omitempty"`
	DataPolucheniia                *DateTime                                        `json:"ДатаПолучения,omitempty"`
	DogovorKontragentaKey          *Guid                                            `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie              *String                                          `json:"ДокументОснование,omitempty"`
	DokumentSozdanVIuTD            *Boolean                                         `json:"ДокументСозданВЮТД,omitempty"`
	KolichestvoDokumenta           *Int64                                           `json:"КоличествоДокумента,omitempty"`
	Comment                        *String                                          `json:"Комментарий,omitempty"`
	KontragentKey                  *Guid                                            `json:"Контрагент_Key,omitempty"`
	KratnostVzaimoraschetov        *Int64                                           `json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov            *Double                                          `json:"КурсВзаиморасчетов,omitempty"`
	Natsenka                       *Double                                          `json:"Наценка,omitempty"`
	OrganizatsiiaKey               *Guid                                            `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey               *Guid                                            `json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey               *Guid                                            `json:"Подразделение_Key,omitempty"`
	ProektKey                      *Guid                                            `json:"Проект_Key,omitempty"`
	Sdelka                         *String                                          `json:"Сделка,omitempty"`
	DepartmentKey                  *Guid                                            `json:"Склад_Key,omitempty"`
	SummaVkliuchaetNDS             *Boolean                                         `json:"СуммаВключаетНДС,omitempty"`
	SumOfDocument                  *Double                                          `json:"СуммаДокумента,omitempty"`
	TipDokumenta                   *String                                          `json:"ТипДокумента,omitempty"`
	TipSkidkiNatsenkiKey           *Guid                                            `json:"ТипСкидкиНаценки_Key,omitempty"`
	TipTsenKey                     *Guid                                            `json:"ТипЦен_Key,omitempty"`
	UsloviiaOplatyKey              *Guid                                            `json:"УсловияОплаты_Key,omitempty"`
	UchityvatVesVstavok            *Boolean                                         `json:"УчитыватьВесВставок,omitempty"`
	UchityvatNDS                   *Boolean                                         `json:"УчитыватьНДС,omitempty"`
	KhoziaistvennaiaOperatsiiaKey  *Guid                                            `json:"ХозяйственнаяОперация_Key,omitempty"`
	OtpuskRazreshilKey             *Guid                                            `json:"ОтпускРазрешил_Key,omitempty"`
	OtpuskProizvelKey              *Guid                                            `json:"ОтпускПроизвел_Key,omitempty"`
	DoverennostNomer               *String                                          `json:"ДоверенностьНомер,omitempty"`
	DoverennostData                *DateTime                                        `json:"ДоверенностьДата,omitempty"`
	DoverennostVydana              *String                                          `json:"ДоверенностьВыдана,omitempty"`
	DoverennostCherezKogo          *String                                          `json:"ДоверенностьЧерезКого,omitempty"`
	BDataDokumenta                 *DateTime                                        `json:"Б_ДатаДокумента,omitempty"`
	BIdentifikator                 *String                                          `json:"Б_Идентификатор,omitempty"`
	BNomerVersii                   *String                                          `json:"Б_НомерВерсии,omitempty"`
	Goods                          *[]DocumentRealizatsiiaTovarovUslugTovaryRowType `json:"Товары,omitempty"`
	Uslugi                         *[]DocumentRealizatsiiaTovarovUslugUslugiRowType `json:"Услуги,omitempty"`
	DokumentOsnovanieType          *String                                          `json:"ДокументОснование_Type,omitempty"`
	SdelkaType                     *String                                          `json:"Сделка_Type,omitempty"`
}

func (DocumentRealizatsiiaTovarovUslug) APIEntityType() string {
	return "Document_РеализацияТоваровУслуг"
}
func NewDocumentRealizatsiiaTovarovUslug(data string, prevError error) (*DocumentRealizatsiiaTovarovUslug, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentRealizatsiiaTovarovUslug)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentRealizatsiiaTovarovUslug(entity DocumentRealizatsiiaTovarovUslug) (*DocumentRealizatsiiaTovarovUslug, error) {
	return NewDocumentRealizatsiiaTovarovUslug(c.createEntity(entity))
}
func (c *Client) DocumentRealizatsiiaTovarovUslug(key PrimaryDocumentRealizatsiiaTovarovUslug, fields []string) (*DocumentRealizatsiiaTovarovUslug, error) {
	return NewDocumentRealizatsiiaTovarovUslug(c.getEntity(key, fields))
}
func (c *Client) DocumentRealizatsiiaTovarovUslugs(where Where) (*[]DocumentRealizatsiiaTovarovUslug, error) {
	type ReturnObj struct {
		Value []DocumentRealizatsiiaTovarovUslug `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_РеализацияТоваровУслуг", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentRealizatsiiaTovarovUslug(key PrimaryDocumentRealizatsiiaTovarovUslug, entity DocumentRealizatsiiaTovarovUslug) (*DocumentRealizatsiiaTovarovUslug, error) {
	return NewDocumentRealizatsiiaTovarovUslug(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentRealizatsiiaTovarovUslug(key PrimaryDocumentRealizatsiiaTovarovUslug) error {
	return c.removeEntity(key)
}

type DocumentRealizatsiiaTovarovUslugTovary struct {
	Key                                        Guid    `json:"Ref_Key,omitempty"`
	LineNumber                                 Int64   `json:"LineNumber,omitempty"`
	Weight                                     *Double `json:"Вес,omitempty"`
	ZnachenieUsloviiaAvtomaticheskoiSkidki     *String `json:"ЗначениеУсловияАвтоматическойСкидки,omitempty"`
	KachestvoKey                               *Guid   `json:"Качество_Key,omitempty"`
	Quantity                                   *Int64  `json:"Количество,omitempty"`
	ItemKey                                    *Guid   `json:"Номенклатура_Key,omitempty"`
	PercentAutoDiscount                        *Double `json:"ПроцентАвтоматическойСкидки,omitempty"`
	PercentManualDiscount                      *Double `json:"ПроцентРучнойСкидки,omitempty"`
	SizeKey                                    *Guid   `json:"Размер_Key,omitempty"`
	InstanceKey                                *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	DepartmentKey                              *Guid   `json:"Склад_Key,omitempty"`
	StavkaNDS                                  *String `json:"СтавкаНДС,omitempty"`
	Sum                                        *Double `json:"Сумма,omitempty"`
	SummaNDS                                   *Double `json:"СуммаНДС,omitempty"`
	UslovieAvtomaticheskoiSkidki               *String `json:"УсловиеАвтоматическойСкидки,omitempty"`
	KharakteristikaNomenklaturyKey             *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                                       *Double `json:"Цена,omitempty"`
	SumManualDiscount                          *Double `json:"СуммаРучнойСкидки,omitempty"`
	SumAutoDiscount                            *Double `json:"СуммаАвтоматическойСкидки,omitempty"`
	VesVstavok                                 *Double `json:"ВесВставок,omitempty"`
	ZnachenieUsloviiaAvtomaticheskoiSkidkiType *String `json:"ЗначениеУсловияАвтоматическойСкидки_Type,omitempty"`
}

func (DocumentRealizatsiiaTovarovUslugTovary) APIEntityType() string {
	return "Document_РеализацияТоваровУслуг_Товары"
}
func NewDocumentRealizatsiiaTovarovUslugTovary(data string, prevError error) (*DocumentRealizatsiiaTovarovUslugTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentRealizatsiiaTovarovUslugTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentRealizatsiiaTovarovUslugTovary(entity DocumentRealizatsiiaTovarovUslugTovary) (*DocumentRealizatsiiaTovarovUslugTovary, error) {
	return NewDocumentRealizatsiiaTovarovUslugTovary(c.createEntity(entity))
}
func (c *Client) DocumentRealizatsiiaTovarovUslugTovary(key PrimaryDocumentRealizatsiiaTovarovUslugTovary, fields []string) (*DocumentRealizatsiiaTovarovUslugTovary, error) {
	return NewDocumentRealizatsiiaTovarovUslugTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentRealizatsiiaTovarovUslugTovarys(where Where) (*[]DocumentRealizatsiiaTovarovUslugTovary, error) {
	type ReturnObj struct {
		Value []DocumentRealizatsiiaTovarovUslugTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_РеализацияТоваровУслуг_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentRealizatsiiaTovarovUslugTovary(key PrimaryDocumentRealizatsiiaTovarovUslugTovary, entity DocumentRealizatsiiaTovarovUslugTovary) (*DocumentRealizatsiiaTovarovUslugTovary, error) {
	return NewDocumentRealizatsiiaTovarovUslugTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentRealizatsiiaTovarovUslugTovary(key PrimaryDocumentRealizatsiiaTovarovUslugTovary) error {
	return c.removeEntity(key)
}

type DocumentRealizatsiiaTovarovUslugUslugi struct {
	Key                      Guid    `json:"Ref_Key,omitempty"`
	LineNumber               Int64   `json:"LineNumber,omitempty"`
	Quantity                 *Int64  `json:"Количество,omitempty"`
	ItemKey                  *Guid   `json:"Номенклатура_Key,omitempty"`
	ProtsentOtSummyDokumenta *Double `json:"ПроцентОтСуммыДокумента,omitempty"`
	PercentManualDiscount    *Double `json:"ПроцентРучнойСкидки,omitempty"`
	Soderzhanie              *String `json:"Содержание,omitempty"`
	StavkaNDS                *String `json:"СтавкаНДС,omitempty"`
	Sum                      *Double `json:"Сумма,omitempty"`
	SummaNDS                 *Double `json:"СуммаНДС,omitempty"`
	Cost                     *Double `json:"Цена,omitempty"`
	SumManualDiscount        *Double `json:"СуммаРучнойСкидки,omitempty"`
}

func (DocumentRealizatsiiaTovarovUslugUslugi) APIEntityType() string {
	return "Document_РеализацияТоваровУслуг_Услуги"
}
func NewDocumentRealizatsiiaTovarovUslugUslugi(data string, prevError error) (*DocumentRealizatsiiaTovarovUslugUslugi, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentRealizatsiiaTovarovUslugUslugi)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentRealizatsiiaTovarovUslugUslugi(entity DocumentRealizatsiiaTovarovUslugUslugi) (*DocumentRealizatsiiaTovarovUslugUslugi, error) {
	return NewDocumentRealizatsiiaTovarovUslugUslugi(c.createEntity(entity))
}
func (c *Client) DocumentRealizatsiiaTovarovUslugUslugi(key PrimaryDocumentRealizatsiiaTovarovUslugUslugi, fields []string) (*DocumentRealizatsiiaTovarovUslugUslugi, error) {
	return NewDocumentRealizatsiiaTovarovUslugUslugi(c.getEntity(key, fields))
}
func (c *Client) DocumentRealizatsiiaTovarovUslugUslugis(where Where) (*[]DocumentRealizatsiiaTovarovUslugUslugi, error) {
	type ReturnObj struct {
		Value []DocumentRealizatsiiaTovarovUslugUslugi `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_РеализацияТоваровУслуг_Услуги", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentRealizatsiiaTovarovUslugUslugi(key PrimaryDocumentRealizatsiiaTovarovUslugUslugi, entity DocumentRealizatsiiaTovarovUslugUslugi) (*DocumentRealizatsiiaTovarovUslugUslugi, error) {
	return NewDocumentRealizatsiiaTovarovUslugUslugi(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentRealizatsiiaTovarovUslugUslugi(key PrimaryDocumentRealizatsiiaTovarovUslugUslugi) error {
	return c.removeEntity(key)
}

type DocumentSobytie struct {
	Key                                    Guid                                    `json:"Ref_Key,omitempty"`
	DataVersion                            *String                                 `json:"DataVersion,omitempty"`
	Number                                 *String                                 `json:"Number,omitempty"`
	Date                                   *DateTime                               `json:"Date,omitempty"`
	DeletionMark                           *Boolean                                `json:"DeletionMark,omitempty"`
	Posted                                 *Boolean                                `json:"Posted,omitempty"`
	AdresElektronnoiPochty                 *String                                 `json:"АдресЭлектроннойПочты,omitempty"`
	Vazhnost                               *String                                 `json:"Важность,omitempty"`
	VidObieekta                            *String                                 `json:"ВидОбъекта,omitempty"`
	VidSobytiia                            *String                                 `json:"ВидСобытия,omitempty"`
	VremiaNapominaniia                     *DateTime                               `json:"ВремяНапоминания,omitempty"`
	IstochnikInformatsiiPriObrashcheniiKey *Guid                                   `json:"ИсточникИнформацииПриОбращении_Key,omitempty"`
	Comment                                *String                                 `json:"Комментарий,omitempty"`
	KontaktnoeLitso                        *String                                 `json:"КонтактноеЛицо,omitempty"`
	Kontragent                             *String                                 `json:"Контрагент,omitempty"`
	NapomnitOSobytii                       *Boolean                                `json:"НапомнитьОСобытии,omitempty"`
	NachaloSobytiia                        *DateTime                               `json:"НачалоСобытия,omitempty"`
	OkonchanieSobytiia                     *DateTime                               `json:"ОкончаниеСобытия,omitempty"`
	OpisanieSobytiia                       *String                                 `json:"ОписаниеСобытия,omitempty"`
	Osnovanie                              *String                                 `json:"Основание,omitempty"`
	OtvetstvennyiKey                       *Guid                                   `json:"Ответственный_Key,omitempty"`
	ProektKey                              *Guid                                   `json:"Проект_Key,omitempty"`
	SoderzhanieSobytiia                    *String                                 `json:"СодержаниеСобытия,omitempty"`
	SostoianieSobytiia                     *String                                 `json:"СостояниеСобытия,omitempty"`
	TipSobytiia                            *String                                 `json:"ТипСобытия,omitempty"`
	StoronnieLitsa                         *[]DocumentSobytieStoronnieLitsaRowType `json:"СторонниеЛица,omitempty"`
	KontaktnoeLitsoType                    *String                                 `json:"КонтактноеЛицо_Type,omitempty"`
	KontragentType                         *String                                 `json:"Контрагент_Type,omitempty"`
	OsnovanieType                          *String                                 `json:"Основание_Type,omitempty"`
}

func (DocumentSobytie) APIEntityType() string {
	return "Document_Событие"
}
func NewDocumentSobytie(data string, prevError error) (*DocumentSobytie, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentSobytie)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentSobytie(entity DocumentSobytie) (*DocumentSobytie, error) {
	return NewDocumentSobytie(c.createEntity(entity))
}
func (c *Client) DocumentSobytie(key PrimaryDocumentSobytie, fields []string) (*DocumentSobytie, error) {
	return NewDocumentSobytie(c.getEntity(key, fields))
}
func (c *Client) DocumentSobyties(where Where) (*[]DocumentSobytie, error) {
	type ReturnObj struct {
		Value []DocumentSobytie `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_Событие", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentSobytie(key PrimaryDocumentSobytie, entity DocumentSobytie) (*DocumentSobytie, error) {
	return NewDocumentSobytie(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentSobytie(key PrimaryDocumentSobytie) error {
	return c.removeEntity(key)
}

type DocumentSobytieStoronnieLitsa struct {
	Key           Guid  `json:"Ref_Key,omitempty"`
	LineNumber    Int64 `json:"LineNumber,omitempty"`
	KontragentKey *Guid `json:"Контрагент_Key,omitempty"`
	LitsoKey      *Guid `json:"Лицо_Key,omitempty"`
}

func (DocumentSobytieStoronnieLitsa) APIEntityType() string {
	return "Document_Событие_СторонниеЛица"
}
func NewDocumentSobytieStoronnieLitsa(data string, prevError error) (*DocumentSobytieStoronnieLitsa, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentSobytieStoronnieLitsa)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentSobytieStoronnieLitsa(entity DocumentSobytieStoronnieLitsa) (*DocumentSobytieStoronnieLitsa, error) {
	return NewDocumentSobytieStoronnieLitsa(c.createEntity(entity))
}
func (c *Client) DocumentSobytieStoronnieLitsa(key PrimaryDocumentSobytieStoronnieLitsa, fields []string) (*DocumentSobytieStoronnieLitsa, error) {
	return NewDocumentSobytieStoronnieLitsa(c.getEntity(key, fields))
}
func (c *Client) DocumentSobytieStoronnieLitsas(where Where) (*[]DocumentSobytieStoronnieLitsa, error) {
	type ReturnObj struct {
		Value []DocumentSobytieStoronnieLitsa `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_Событие_СторонниеЛица", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentSobytieStoronnieLitsa(key PrimaryDocumentSobytieStoronnieLitsa, entity DocumentSobytieStoronnieLitsa) (*DocumentSobytieStoronnieLitsa, error) {
	return NewDocumentSobytieStoronnieLitsa(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentSobytieStoronnieLitsa(key PrimaryDocumentSobytieStoronnieLitsa) error {
	return c.removeEntity(key)
}

type CatalogVariantyOtvetovOprosov struct {
	Key                     Guid     `json:"Ref_Key,omitempty"`
	DataVersion             *String  `json:"DataVersion,omitempty"`
	Description             *String  `json:"Description,omitempty"`
	Code                    *String  `json:"Code,omitempty"`
	OwnerKey                *Guid    `json:"Owner_Key,omitempty"`
	DeletionMark            *Boolean `json:"DeletionMark,omitempty"`
	OtsenkaOtveta           *Double  `json:"ОценкаОтвета,omitempty"`
	TrebuetRazvernutyiOtvet *Boolean `json:"ТребуетРазвернутыйОтвет,omitempty"`
}

func (CatalogVariantyOtvetovOprosov) APIEntityType() string {
	return "Catalog_ВариантыОтветовОпросов"
}
func NewCatalogVariantyOtvetovOprosov(data string, prevError error) (*CatalogVariantyOtvetovOprosov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogVariantyOtvetovOprosov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogVariantyOtvetovOprosov(entity CatalogVariantyOtvetovOprosov) (*CatalogVariantyOtvetovOprosov, error) {
	return NewCatalogVariantyOtvetovOprosov(c.createEntity(entity))
}
func (c *Client) CatalogVariantyOtvetovOprosov(key PrimaryCatalogVariantyOtvetovOprosov, fields []string) (*CatalogVariantyOtvetovOprosov, error) {
	return NewCatalogVariantyOtvetovOprosov(c.getEntity(key, fields))
}
func (c *Client) CatalogVariantyOtvetovOprosovs(where Where) (*[]CatalogVariantyOtvetovOprosov, error) {
	type ReturnObj struct {
		Value []CatalogVariantyOtvetovOprosov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ВариантыОтветовОпросов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogVariantyOtvetovOprosov(key PrimaryCatalogVariantyOtvetovOprosov, entity CatalogVariantyOtvetovOprosov) (*CatalogVariantyOtvetovOprosov, error) {
	return NewCatalogVariantyOtvetovOprosov(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogVariantyOtvetovOprosov(key PrimaryCatalogVariantyOtvetovOprosov) error {
	return c.removeEntity(key)
}

type CatalogGruppyPisemElektronnoiPochty struct {
	Key                     Guid     `json:"Ref_Key,omitempty"`
	DataVersion             *String  `json:"DataVersion,omitempty"`
	Description             *String  `json:"Description,omitempty"`
	Code                    *String  `json:"Code,omitempty"`
	OwnerKey                *Guid    `json:"Owner_Key,omitempty"`
	ParentKey               *Guid    `json:"Parent_Key,omitempty"`
	DeletionMark            *Boolean `json:"DeletionMark,omitempty"`
	IspolzovatPredmetyPisem *Boolean `json:"ИспользоватьПредметыПисем,omitempty"`
	Poriadok                *Int64   `json:"Порядок,omitempty"`
}

func (CatalogGruppyPisemElektronnoiPochty) APIEntityType() string {
	return "Catalog_ГруппыПисемЭлектроннойПочты"
}
func NewCatalogGruppyPisemElektronnoiPochty(data string, prevError error) (*CatalogGruppyPisemElektronnoiPochty, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogGruppyPisemElektronnoiPochty)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogGruppyPisemElektronnoiPochty(entity CatalogGruppyPisemElektronnoiPochty) (*CatalogGruppyPisemElektronnoiPochty, error) {
	return NewCatalogGruppyPisemElektronnoiPochty(c.createEntity(entity))
}
func (c *Client) CatalogGruppyPisemElektronnoiPochty(key PrimaryCatalogGruppyPisemElektronnoiPochty, fields []string) (*CatalogGruppyPisemElektronnoiPochty, error) {
	return NewCatalogGruppyPisemElektronnoiPochty(c.getEntity(key, fields))
}
func (c *Client) CatalogGruppyPisemElektronnoiPochtys(where Where) (*[]CatalogGruppyPisemElektronnoiPochty, error) {
	type ReturnObj struct {
		Value []CatalogGruppyPisemElektronnoiPochty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ГруппыПисемЭлектроннойПочты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogGruppyPisemElektronnoiPochty(key PrimaryCatalogGruppyPisemElektronnoiPochty, entity CatalogGruppyPisemElektronnoiPochty) (*CatalogGruppyPisemElektronnoiPochty, error) {
	return NewCatalogGruppyPisemElektronnoiPochty(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogGruppyPisemElektronnoiPochty(key PrimaryCatalogGruppyPisemElektronnoiPochty) error {
	return c.removeEntity(key)
}

type CatalogGruppyPochtovoiRassylki struct {
	Key              Guid     `json:"Ref_Key,omitempty"`
	DataVersion      *String  `json:"DataVersion,omitempty"`
	Description      *String  `json:"Description,omitempty"`
	Code             *String  `json:"Code,omitempty"`
	ParentKey        *Guid    `json:"Parent_Key,omitempty"`
	IsFolder         *Boolean `json:"IsFolder,omitempty"`
	DeletionMark     *Boolean `json:"DeletionMark,omitempty"`
	OtvetstvennyiKey *Guid    `json:"Ответственный_Key,omitempty"`
}

func (CatalogGruppyPochtovoiRassylki) APIEntityType() string {
	return "Catalog_ГруппыПочтовойРассылки"
}
func NewCatalogGruppyPochtovoiRassylki(data string, prevError error) (*CatalogGruppyPochtovoiRassylki, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogGruppyPochtovoiRassylki)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogGruppyPochtovoiRassylki(entity CatalogGruppyPochtovoiRassylki) (*CatalogGruppyPochtovoiRassylki, error) {
	return NewCatalogGruppyPochtovoiRassylki(c.createEntity(entity))
}
func (c *Client) CatalogGruppyPochtovoiRassylki(key PrimaryCatalogGruppyPochtovoiRassylki, fields []string) (*CatalogGruppyPochtovoiRassylki, error) {
	return NewCatalogGruppyPochtovoiRassylki(c.getEntity(key, fields))
}
func (c *Client) CatalogGruppyPochtovoiRassylkis(where Where) (*[]CatalogGruppyPochtovoiRassylki, error) {
	type ReturnObj struct {
		Value []CatalogGruppyPochtovoiRassylki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ГруппыПочтовойРассылки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogGruppyPochtovoiRassylki(key PrimaryCatalogGruppyPochtovoiRassylki, entity CatalogGruppyPochtovoiRassylki) (*CatalogGruppyPochtovoiRassylki, error) {
	return NewCatalogGruppyPochtovoiRassylki(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogGruppyPochtovoiRassylki(key PrimaryCatalogGruppyPochtovoiRassylki) error {
	return c.removeEntity(key)
}

type CatalogNastroikiOtchetov struct {
	Key                             Guid                                                         `json:"Ref_Key,omitempty"`
	DataVersion                     *String                                                      `json:"DataVersion,omitempty"`
	Description                     *String                                                      `json:"Description,omitempty"`
	Code                            *String                                                      `json:"Code,omitempty"`
	ParentKey                       *Guid                                                        `json:"Parent_Key,omitempty"`
	IsFolder                        *Boolean                                                     `json:"IsFolder,omitempty"`
	DeletionMark                    *Boolean                                                     `json:"DeletionMark,omitempty"`
	NaimenovanieOtcheta             *String                                                      `json:"НаименованиеОтчета,omitempty"`
	NastroikaDliaAvtosokhraneniia   *Boolean                                                     `json:"НастройкаДляАвтосохранения,omitempty"`
	NastroikaPoUmolchaniiu          *Boolean                                                     `json:"НастройкаПоУмолчанию,omitempty"`
	NastroikiOtchetaBase64Data      *Binary                                                      `json:"НастройкиОтчета_Base64Data,omitempty"`
	NastroikiPostroiteliaBase64Data *Binary                                                      `json:"НастройкиПостроителя_Base64Data,omitempty"`
	GruppyNastroekIPolzovateli      *[]CatalogNastroikiOtchetovGruppyNastroekIPolzovateliRowType `json:"ГруппыНастроекИПользователи,omitempty"`
	NastroikiOtchetaType            *String                                                      `json:"НастройкиОтчета_Type,omitempty"`
	NastroikiPostroiteliaType       *String                                                      `json:"НастройкиПостроителя_Type,omitempty"`
	NastroikiOtcheta                *Stream                                                      `json:"НастройкиОтчета,omitempty"`
	NastroikiPostroitelia           *Stream                                                      `json:"НастройкиПостроителя,omitempty"`
}

func (CatalogNastroikiOtchetov) APIEntityType() string {
	return "Catalog_НастройкиОтчетов"
}
func NewCatalogNastroikiOtchetov(data string, prevError error) (*CatalogNastroikiOtchetov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogNastroikiOtchetov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogNastroikiOtchetov(entity CatalogNastroikiOtchetov) (*CatalogNastroikiOtchetov, error) {
	return NewCatalogNastroikiOtchetov(c.createEntity(entity))
}
func (c *Client) CatalogNastroikiOtchetov(key PrimaryCatalogNastroikiOtchetov, fields []string) (*CatalogNastroikiOtchetov, error) {
	return NewCatalogNastroikiOtchetov(c.getEntity(key, fields))
}
func (c *Client) CatalogNastroikiOtchetovs(where Where) (*[]CatalogNastroikiOtchetov, error) {
	type ReturnObj struct {
		Value []CatalogNastroikiOtchetov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкиОтчетов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogNastroikiOtchetov(key PrimaryCatalogNastroikiOtchetov, entity CatalogNastroikiOtchetov) (*CatalogNastroikiOtchetov, error) {
	return NewCatalogNastroikiOtchetov(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogNastroikiOtchetov(key PrimaryCatalogNastroikiOtchetov) error {
	return c.removeEntity(key)
}

type CatalogNastroikiOtchetovGruppyNastroekIPolzovateli struct {
	Key         Guid    `json:"Ref_Key,omitempty"`
	LineNumber  Int64   `json:"LineNumber,omitempty"`
	Obieekt     *String `json:"Объект,omitempty"`
	ObieektType *String `json:"Объект_Type,omitempty"`
}

func (CatalogNastroikiOtchetovGruppyNastroekIPolzovateli) APIEntityType() string {
	return "Catalog_НастройкиОтчетов_ГруппыНастроекИПользователи"
}
func NewCatalogNastroikiOtchetovGruppyNastroekIPolzovateli(data string, prevError error) (*CatalogNastroikiOtchetovGruppyNastroekIPolzovateli, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogNastroikiOtchetovGruppyNastroekIPolzovateli)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogNastroikiOtchetovGruppyNastroekIPolzovateli(entity CatalogNastroikiOtchetovGruppyNastroekIPolzovateli) (*CatalogNastroikiOtchetovGruppyNastroekIPolzovateli, error) {
	return NewCatalogNastroikiOtchetovGruppyNastroekIPolzovateli(c.createEntity(entity))
}
func (c *Client) CatalogNastroikiOtchetovGruppyNastroekIPolzovateli(key PrimaryCatalogNastroikiOtchetovGruppyNastroekIPolzovateli, fields []string) (*CatalogNastroikiOtchetovGruppyNastroekIPolzovateli, error) {
	return NewCatalogNastroikiOtchetovGruppyNastroekIPolzovateli(c.getEntity(key, fields))
}
func (c *Client) CatalogNastroikiOtchetovGruppyNastroekIPolzovatelis(where Where) (*[]CatalogNastroikiOtchetovGruppyNastroekIPolzovateli, error) {
	type ReturnObj struct {
		Value []CatalogNastroikiOtchetovGruppyNastroekIPolzovateli `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкиОтчетов_ГруппыНастроекИПользователи", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogNastroikiOtchetovGruppyNastroekIPolzovateli(key PrimaryCatalogNastroikiOtchetovGruppyNastroekIPolzovateli, entity CatalogNastroikiOtchetovGruppyNastroekIPolzovateli) (*CatalogNastroikiOtchetovGruppyNastroekIPolzovateli, error) {
	return NewCatalogNastroikiOtchetovGruppyNastroekIPolzovateli(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogNastroikiOtchetovGruppyNastroekIPolzovateli(key PrimaryCatalogNastroikiOtchetovGruppyNastroekIPolzovateli) error {
	return c.removeEntity(key)
}

type CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartam struct {
	Key                                    Guid                                                               `json:"Ref_Key,omitempty"`
	DataVersion                            *String                                                            `json:"DataVersion,omitempty"`
	Description                            *String                                                            `json:"Description,omitempty"`
	Code                                   *String                                                            `json:"Code,omitempty"`
	DeletionMark                           *Boolean                                                           `json:"DeletionMark,omitempty"`
	Bonusnaia                              *Boolean                                                           `json:"Бонусная,omitempty"`
	SpisyvatBonusyPriVozvrateOtPokupatelia *Boolean                                                           `json:"СписыватьБонусыПриВозвратеОтПокупателя,omitempty"`
	Skidki                                 *[]CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidkiRowType `json:"Скидки,omitempty"`
}

func (CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartam) APIEntityType() string {
	return "Catalog_СхемыНакопительныхСкидокПоДисконтнымКартам"
}
func NewCatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartam(data string, prevError error) (*CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartam, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartam)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartam(entity CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartam) (*CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartam, error) {
	return NewCatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartam(c.createEntity(entity))
}
func (c *Client) CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartam(key PrimaryCatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartam, fields []string) (*CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartam, error) {
	return NewCatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartam(c.getEntity(key, fields))
}
func (c *Client) CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartams(where Where) (*[]CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartam, error) {
	type ReturnObj struct {
		Value []CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartam `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_СхемыНакопительныхСкидокПоДисконтнымКартам", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartam(key PrimaryCatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartam, entity CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartam) (*CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartam, error) {
	return NewCatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartam(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartam(key PrimaryCatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartam) error {
	return c.removeEntity(key)
}

type CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidki struct {
	Key                                             Guid    `json:"Ref_Key,omitempty"`
	LineNumber                                      Int64   `json:"LineNumber,omitempty"`
	Kod                                             *Int16  `json:"Код,omitempty"`
	KonSumma                                        *Double `json:"КонСумма,omitempty"`
	MaksimalnyiProtsentSummyPokupkiPriOplateBonusom *Double `json:"МаксимальныйПроцентСуммыПокупкиПриОплатеБонусом,omitempty"`
	Naimenovanie                                    *String `json:"Наименование,omitempty"`
	NachSumma                                       *Double `json:"НачСумма,omitempty"`
	ProtsentSkidki                                  *Double `json:"ПроцентСкидки,omitempty"`
}

func (CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidki) APIEntityType() string {
	return "Catalog_СхемыНакопительныхСкидокПоДисконтнымКартам_Скидки"
}
func NewCatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidki(data string, prevError error) (*CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidki, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidki)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidki(entity CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidki) (*CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidki, error) {
	return NewCatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidki(c.createEntity(entity))
}
func (c *Client) CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidki(key PrimaryCatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidki, fields []string) (*CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidki, error) {
	return NewCatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidki(c.getEntity(key, fields))
}
func (c *Client) CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidkis(where Where) (*[]CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidki, error) {
	type ReturnObj struct {
		Value []CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_СхемыНакопительныхСкидокПоДисконтнымКартам_Скидки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidki(key PrimaryCatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidki, entity CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidki) (*CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidki, error) {
	return NewCatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidki(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidki(key PrimaryCatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidki) error {
	return c.removeEntity(key)
}

type Department struct {
	Key                                      Guid      `json:"Ref_Key,omitempty"`
	DataVersion                              *String   `json:"DataVersion,omitempty"`
	Description                              *String   `json:"Description,omitempty"`
	Code                                     *String   `json:"Code,omitempty"`
	ParentKey                                *Guid     `json:"Parent_Key,omitempty"`
	IsFolder                                 *Boolean  `json:"IsFolder,omitempty"`
	DeletionMark                             *Boolean  `json:"DeletionMark,omitempty"`
	VidSklada                                *String   `json:"ВидСклада,omitempty"`
	Comment                                  *String   `json:"Комментарий,omitempty"`
	PodrazdelenieKey                         *Guid     `json:"Подразделение_Key,omitempty"`
	RaschetRoznichnykhTsenPoTorgovoiNatsenke *Boolean  `json:"РасчетРозничныхЦенПоТорговойНаценке,omitempty"`
	TipTsenRoznichnoiTorgovliKey             *Guid     `json:"ТипЦенРозничнойТорговли_Key,omitempty"`
	SegmentIskliuchaemoiNomenklaturyKey      *Guid     `json:"СегментИсключаемойНоменклатуры_Key,omitempty"`
	DataOtkrytiia                            *DateTime `json:"ДатаОткрытия,omitempty"`
	KU                                       *Double   `json:"КУ,omitempty"`
	DirektorKey                              *Guid     `json:"Директор_Key,omitempty"`
	RegionKey                                *Guid     `json:"Регион_Key,omitempty"`
	KolichestvoVitrin                        *Int16    `json:"КоличествоВитрин,omitempty"`
	PloshchadVitrin                          *Double   `json:"ПлощадьВитрин,omitempty"`
	PloshchadTorgovaia                       *Double   `json:"ПлощадьТорговая,omitempty"`
	NomerSektsii                             *Int16    `json:"НомерСекции,omitempty"`
	FormatMagazinaKey                        *Guid     `json:"ФорматМагазина_Key,omitempty"`
	BIdentifikator                           *String   `json:"Б_Идентификатор,omitempty"`
	BNomerVersii                             *String   `json:"Б_НомерВерсии,omitempty"`
}

func (Department) APIEntityType() string {
	return "Catalog_Склады"
}
func NewDepartment(data string, prevError error) (*Department, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(Department)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDepartment(entity Department) (*Department, error) {
	return NewDepartment(c.createEntity(entity))
}
func (c *Client) Department(key PrimaryDepartment, fields []string) (*Department, error) {
	return NewDepartment(c.getEntity(key, fields))
}
func (c *Client) Departments(where Where) (*[]Department, error) {
	type ReturnObj struct {
		Value []Department `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Склады", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDepartment(key PrimaryDepartment, entity Department) (*Department, error) {
	return NewDepartment(c.updateEntity(key, entity))
}
func (c *Client) DeleteDepartment(key PrimaryDepartment) error {
	return c.removeEntity(key)
}

type CatalogKodyVidovTovarov struct {
	Key          Guid     `json:"Ref_Key,omitempty"`
	DataVersion  *String  `json:"DataVersion,omitempty"`
	Description  *String  `json:"Description,omitempty"`
	Code         *String  `json:"Code,omitempty"`
	ParentKey    *Guid    `json:"Parent_Key,omitempty"`
	IsFolder     *Boolean `json:"IsFolder,omitempty"`
	DeletionMark *Boolean `json:"DeletionMark,omitempty"`
	KodTNVED     *String  `json:"КодТНВЭД,omitempty"`
	Opisanie     *String  `json:"Описание,omitempty"`
}

func (CatalogKodyVidovTovarov) APIEntityType() string {
	return "Catalog_КодыВидовТоваров"
}
func NewCatalogKodyVidovTovarov(data string, prevError error) (*CatalogKodyVidovTovarov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogKodyVidovTovarov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogKodyVidovTovarov(entity CatalogKodyVidovTovarov) (*CatalogKodyVidovTovarov, error) {
	return NewCatalogKodyVidovTovarov(c.createEntity(entity))
}
func (c *Client) CatalogKodyVidovTovarov(key PrimaryCatalogKodyVidovTovarov, fields []string) (*CatalogKodyVidovTovarov, error) {
	return NewCatalogKodyVidovTovarov(c.getEntity(key, fields))
}
func (c *Client) CatalogKodyVidovTovarovs(where Where) (*[]CatalogKodyVidovTovarov, error) {
	type ReturnObj struct {
		Value []CatalogKodyVidovTovarov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_КодыВидовТоваров", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogKodyVidovTovarov(key PrimaryCatalogKodyVidovTovarov, entity CatalogKodyVidovTovarov) (*CatalogKodyVidovTovarov, error) {
	return NewCatalogKodyVidovTovarov(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogKodyVidovTovarov(key PrimaryCatalogKodyVidovTovarov) error {
	return c.removeEntity(key)
}

type CatalogRassevy struct {
	Key                         Guid     `json:"Ref_Key,omitempty"`
	DataVersion                 *String  `json:"DataVersion,omitempty"`
	Description                 *String  `json:"Description,omitempty"`
	Code                        *String  `json:"Code,omitempty"`
	OwnerKey                    *Guid    `json:"Owner_Key,omitempty"`
	DeletionMark                *Boolean `json:"DeletionMark,omitempty"`
	KolichestvoKamneiV1KarateDo *Double  `json:"КоличествоКамнейВ1КаратеДо,omitempty"`
	KolichestvoKamneiV1KarateOt *Double  `json:"КоличествоКамнейВ1КаратеОт,omitempty"`
}

func (CatalogRassevy) APIEntityType() string {
	return "Catalog_Рассевы"
}
func NewCatalogRassevy(data string, prevError error) (*CatalogRassevy, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogRassevy)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogRassevy(entity CatalogRassevy) (*CatalogRassevy, error) {
	return NewCatalogRassevy(c.createEntity(entity))
}
func (c *Client) CatalogRassevy(key PrimaryCatalogRassevy, fields []string) (*CatalogRassevy, error) {
	return NewCatalogRassevy(c.getEntity(key, fields))
}
func (c *Client) CatalogRassevys(where Where) (*[]CatalogRassevy, error) {
	type ReturnObj struct {
		Value []CatalogRassevy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Рассевы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogRassevy(key PrimaryCatalogRassevy, entity CatalogRassevy) (*CatalogRassevy, error) {
	return NewCatalogRassevy(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogRassevy(key PrimaryCatalogRassevy) error {
	return c.removeEntity(key)
}

type CatalogPrichinyZakrytiiaZakazov struct {
	Key          Guid     `json:"Ref_Key,omitempty"`
	DataVersion  *String  `json:"DataVersion,omitempty"`
	Description  *String  `json:"Description,omitempty"`
	Code         *String  `json:"Code,omitempty"`
	DeletionMark *Boolean `json:"DeletionMark,omitempty"`
}

func (CatalogPrichinyZakrytiiaZakazov) APIEntityType() string {
	return "Catalog_ПричиныЗакрытияЗаказов"
}
func NewCatalogPrichinyZakrytiiaZakazov(data string, prevError error) (*CatalogPrichinyZakrytiiaZakazov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogPrichinyZakrytiiaZakazov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogPrichinyZakrytiiaZakazov(entity CatalogPrichinyZakrytiiaZakazov) (*CatalogPrichinyZakrytiiaZakazov, error) {
	return NewCatalogPrichinyZakrytiiaZakazov(c.createEntity(entity))
}
func (c *Client) CatalogPrichinyZakrytiiaZakazov(key PrimaryCatalogPrichinyZakrytiiaZakazov, fields []string) (*CatalogPrichinyZakrytiiaZakazov, error) {
	return NewCatalogPrichinyZakrytiiaZakazov(c.getEntity(key, fields))
}
func (c *Client) CatalogPrichinyZakrytiiaZakazovs(where Where) (*[]CatalogPrichinyZakrytiiaZakazov, error) {
	type ReturnObj struct {
		Value []CatalogPrichinyZakrytiiaZakazov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ПричиныЗакрытияЗаказов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogPrichinyZakrytiiaZakazov(key PrimaryCatalogPrichinyZakrytiiaZakazov, entity CatalogPrichinyZakrytiiaZakazov) (*CatalogPrichinyZakrytiiaZakazov, error) {
	return NewCatalogPrichinyZakrytiiaZakazov(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogPrichinyZakrytiiaZakazov(key PrimaryCatalogPrichinyZakrytiiaZakazov) error {
	return c.removeEntity(key)
}

type CatalogSegmentyNomenklatury struct {
	Key                               Guid      `json:"Ref_Key,omitempty"`
	DataVersion                       *String   `json:"DataVersion,omitempty"`
	Description                       *String   `json:"Description,omitempty"`
	Code                              *String   `json:"Code,omitempty"`
	DeletionMark                      *Boolean  `json:"DeletionMark,omitempty"`
	SposobFormirovaniia               *String   `json:"СпособФормирования,omitempty"`
	SkhemaKomponovkiDannykhBase64Data *Binary   `json:"СхемаКомпоновкиДанных_Base64Data,omitempty"`
	Opisanie                          *String   `json:"Описание,omitempty"`
	OtvetstvennyiKey                  *Guid     `json:"Ответственный_Key,omitempty"`
	DataSozdaniia                     *DateTime `json:"ДатаСоздания,omitempty"`
	DataOchistki                      *DateTime `json:"ДатаОчистки,omitempty"`
	ImiaShablonaSKD                   *String   `json:"ИмяШаблонаСКД,omitempty"`
	BIdentifikator                    *String   `json:"Б_Идентификатор,omitempty"`
	BNomerVersii                      *String   `json:"Б_НомерВерсии,omitempty"`
	SkhemaKomponovkiDannykhType       *String   `json:"СхемаКомпоновкиДанных_Type,omitempty"`
	SkhemaKomponovkiDannykh           *Stream   `json:"СхемаКомпоновкиДанных,omitempty"`
}

func (CatalogSegmentyNomenklatury) APIEntityType() string {
	return "Catalog_СегментыНоменклатуры"
}
func NewCatalogSegmentyNomenklatury(data string, prevError error) (*CatalogSegmentyNomenklatury, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogSegmentyNomenklatury)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogSegmentyNomenklatury(entity CatalogSegmentyNomenklatury) (*CatalogSegmentyNomenklatury, error) {
	return NewCatalogSegmentyNomenklatury(c.createEntity(entity))
}
func (c *Client) CatalogSegmentyNomenklatury(key PrimaryCatalogSegmentyNomenklatury, fields []string) (*CatalogSegmentyNomenklatury, error) {
	return NewCatalogSegmentyNomenklatury(c.getEntity(key, fields))
}
func (c *Client) CatalogSegmentyNomenklaturys(where Where) (*[]CatalogSegmentyNomenklatury, error) {
	type ReturnObj struct {
		Value []CatalogSegmentyNomenklatury `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_СегментыНоменклатуры", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogSegmentyNomenklatury(key PrimaryCatalogSegmentyNomenklatury, entity CatalogSegmentyNomenklatury) (*CatalogSegmentyNomenklatury, error) {
	return NewCatalogSegmentyNomenklatury(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogSegmentyNomenklatury(key PrimaryCatalogSegmentyNomenklatury) error {
	return c.removeEntity(key)
}

type CatalogSostavStrokiCheka struct {
	Key                 Guid     `json:"Ref_Key,omitempty"`
	DataVersion         *String  `json:"DataVersion,omitempty"`
	Description         *String  `json:"Description,omitempty"`
	Code                *String  `json:"Code,omitempty"`
	DeletionMark        *Boolean `json:"DeletionMark,omitempty"`
	OpisanieDliaPechati *String  `json:"ОписаниеДляПечати,omitempty"`
	Quantity            *Double  `json:"Количество,omitempty"`
	Weight              *Double  `json:"Вес,omitempty"`
	SummaTovara         *Double  `json:"СуммаТовара,omitempty"`
	StavkaNDS           *String  `json:"СтавкаНДС,omitempty"`
	SummaNDS            *Double  `json:"СуммаНДС,omitempty"`
}

func (CatalogSostavStrokiCheka) APIEntityType() string {
	return "Catalog_СоставСтрокиЧека"
}
func NewCatalogSostavStrokiCheka(data string, prevError error) (*CatalogSostavStrokiCheka, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogSostavStrokiCheka)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogSostavStrokiCheka(entity CatalogSostavStrokiCheka) (*CatalogSostavStrokiCheka, error) {
	return NewCatalogSostavStrokiCheka(c.createEntity(entity))
}
func (c *Client) CatalogSostavStrokiCheka(key PrimaryCatalogSostavStrokiCheka, fields []string) (*CatalogSostavStrokiCheka, error) {
	return NewCatalogSostavStrokiCheka(c.getEntity(key, fields))
}
func (c *Client) CatalogSostavStrokiChekas(where Where) (*[]CatalogSostavStrokiCheka, error) {
	type ReturnObj struct {
		Value []CatalogSostavStrokiCheka `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_СоставСтрокиЧека", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogSostavStrokiCheka(key PrimaryCatalogSostavStrokiCheka, entity CatalogSostavStrokiCheka) (*CatalogSostavStrokiCheka, error) {
	return NewCatalogSostavStrokiCheka(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogSostavStrokiCheka(key PrimaryCatalogSostavStrokiCheka) error {
	return c.removeEntity(key)
}

type CatalogUsloviiaPriemaIzdeliiNaKomissiiu struct {
	Key                                       Guid                                                           `json:"Ref_Key,omitempty"`
	DataVersion                               *String                                                        `json:"DataVersion,omitempty"`
	Description                               *String                                                        `json:"Description,omitempty"`
	Code                                      *String                                                        `json:"Code,omitempty"`
	DeletionMark                              *Boolean                                                       `json:"DeletionMark,omitempty"`
	ZaKhranenieUderzhivat                     *Boolean                                                       `json:"ЗаХранениеУдерживать,omitempty"`
	ZaKhranenieStavka                         *Double                                                        `json:"ЗаХранениеСтавка,omitempty"`
	ZaKhranenieSposobRascheta                 *String                                                        `json:"ЗаХранениеСпособРасчета,omitempty"`
	ZaKhranenieDenNachala                     *Int64                                                         `json:"ЗаХранениеДеньНачала,omitempty"`
	ZaKhranenieRaschityvatSDniaNachala        *Boolean                                                       `json:"ЗаХранениеРасчитыватьСДняНачала,omitempty"`
	KomissionnoeVoznagrazhdenieSposobRascheta *String                                                        `json:"КомиссионноеВознаграждениеСпособРасчета,omitempty"`
	KomissionnoeVoznagrazhdenieProtsent       *Double                                                        `json:"КомиссионноеВознаграждениеПроцент,omitempty"`
	GrafikUtsenkiRabochieDni                  *Boolean                                                       `json:"ГрафикУценкиРабочиеДни,omitempty"`
	GrafikUtsenok                             *[]CatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenokRowType `json:"ГрафикУценок,omitempty"`
}

func (CatalogUsloviiaPriemaIzdeliiNaKomissiiu) APIEntityType() string {
	return "Catalog_УсловияПриемаИзделийНаКомиссию"
}
func NewCatalogUsloviiaPriemaIzdeliiNaKomissiiu(data string, prevError error) (*CatalogUsloviiaPriemaIzdeliiNaKomissiiu, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogUsloviiaPriemaIzdeliiNaKomissiiu)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogUsloviiaPriemaIzdeliiNaKomissiiu(entity CatalogUsloviiaPriemaIzdeliiNaKomissiiu) (*CatalogUsloviiaPriemaIzdeliiNaKomissiiu, error) {
	return NewCatalogUsloviiaPriemaIzdeliiNaKomissiiu(c.createEntity(entity))
}
func (c *Client) CatalogUsloviiaPriemaIzdeliiNaKomissiiu(key PrimaryCatalogUsloviiaPriemaIzdeliiNaKomissiiu, fields []string) (*CatalogUsloviiaPriemaIzdeliiNaKomissiiu, error) {
	return NewCatalogUsloviiaPriemaIzdeliiNaKomissiiu(c.getEntity(key, fields))
}
func (c *Client) CatalogUsloviiaPriemaIzdeliiNaKomissiius(where Where) (*[]CatalogUsloviiaPriemaIzdeliiNaKomissiiu, error) {
	type ReturnObj struct {
		Value []CatalogUsloviiaPriemaIzdeliiNaKomissiiu `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_УсловияПриемаИзделийНаКомиссию", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogUsloviiaPriemaIzdeliiNaKomissiiu(key PrimaryCatalogUsloviiaPriemaIzdeliiNaKomissiiu, entity CatalogUsloviiaPriemaIzdeliiNaKomissiiu) (*CatalogUsloviiaPriemaIzdeliiNaKomissiiu, error) {
	return NewCatalogUsloviiaPriemaIzdeliiNaKomissiiu(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogUsloviiaPriemaIzdeliiNaKomissiiu(key PrimaryCatalogUsloviiaPriemaIzdeliiNaKomissiiu) error {
	return c.removeEntity(key)
}

type CatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenok struct {
	Key             Guid    `json:"Ref_Key,omitempty"`
	LineNumber      Int64   `json:"LineNumber,omitempty"`
	UtsenkaProtsent *Double `json:"УценкаПроцент,omitempty"`
	UtsenkaDnei     *Int64  `json:"УценкаДней,omitempty"`
}

func (CatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenok) APIEntityType() string {
	return "Catalog_УсловияПриемаИзделийНаКомиссию_ГрафикУценок"
}
func NewCatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenok(data string, prevError error) (*CatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenok, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenok)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenok(entity CatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenok) (*CatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenok, error) {
	return NewCatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenok(c.createEntity(entity))
}
func (c *Client) CatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenok(key PrimaryCatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenok, fields []string) (*CatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenok, error) {
	return NewCatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenok(c.getEntity(key, fields))
}
func (c *Client) CatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenoks(where Where) (*[]CatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenok, error) {
	type ReturnObj struct {
		Value []CatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenok `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_УсловияПриемаИзделийНаКомиссию_ГрафикУценок", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenok(key PrimaryCatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenok, entity CatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenok) (*CatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenok, error) {
	return NewCatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenok(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenok(key PrimaryCatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenok) error {
	return c.removeEntity(key)
}

type CatalogIstochnikiInformatsiiPriObrashcheniiPokupatelei struct {
	Key          Guid     `json:"Ref_Key,omitempty"`
	DataVersion  *String  `json:"DataVersion,omitempty"`
	Description  *String  `json:"Description,omitempty"`
	Code         *String  `json:"Code,omitempty"`
	DeletionMark *Boolean `json:"DeletionMark,omitempty"`
}

func (CatalogIstochnikiInformatsiiPriObrashcheniiPokupatelei) APIEntityType() string {
	return "Catalog_ИсточникиИнформацииПриОбращенииПокупателей"
}
func NewCatalogIstochnikiInformatsiiPriObrashcheniiPokupatelei(data string, prevError error) (*CatalogIstochnikiInformatsiiPriObrashcheniiPokupatelei, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogIstochnikiInformatsiiPriObrashcheniiPokupatelei)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogIstochnikiInformatsiiPriObrashcheniiPokupatelei(entity CatalogIstochnikiInformatsiiPriObrashcheniiPokupatelei) (*CatalogIstochnikiInformatsiiPriObrashcheniiPokupatelei, error) {
	return NewCatalogIstochnikiInformatsiiPriObrashcheniiPokupatelei(c.createEntity(entity))
}
func (c *Client) CatalogIstochnikiInformatsiiPriObrashcheniiPokupatelei(key PrimaryCatalogIstochnikiInformatsiiPriObrashcheniiPokupatelei, fields []string) (*CatalogIstochnikiInformatsiiPriObrashcheniiPokupatelei, error) {
	return NewCatalogIstochnikiInformatsiiPriObrashcheniiPokupatelei(c.getEntity(key, fields))
}
func (c *Client) CatalogIstochnikiInformatsiiPriObrashcheniiPokupateleis(where Where) (*[]CatalogIstochnikiInformatsiiPriObrashcheniiPokupatelei, error) {
	type ReturnObj struct {
		Value []CatalogIstochnikiInformatsiiPriObrashcheniiPokupatelei `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ИсточникиИнформацииПриОбращенииПокупателей", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogIstochnikiInformatsiiPriObrashcheniiPokupatelei(key PrimaryCatalogIstochnikiInformatsiiPriObrashcheniiPokupatelei, entity CatalogIstochnikiInformatsiiPriObrashcheniiPokupatelei) (*CatalogIstochnikiInformatsiiPriObrashcheniiPokupatelei, error) {
	return NewCatalogIstochnikiInformatsiiPriObrashcheniiPokupatelei(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogIstochnikiInformatsiiPriObrashcheniiPokupatelei(key PrimaryCatalogIstochnikiInformatsiiPriObrashcheniiPokupatelei) error {
	return c.removeEntity(key)
}

type DocumentKorrektirovkaDolga struct {
	Key                         Guid                                           `json:"Ref_Key,omitempty"`
	DataVersion                 *String                                        `json:"DataVersion,omitempty"`
	Number                      *String                                        `json:"Number,omitempty"`
	Date                        *DateTime                                      `json:"Date,omitempty"`
	DeletionMark                *Boolean                                       `json:"DeletionMark,omitempty"`
	Posted                      *Boolean                                       `json:"Posted,omitempty"`
	Comment                     *String                                        `json:"Комментарий,omitempty"`
	KontragentKey               *Guid                                          `json:"Контрагент_Key,omitempty"`
	OrganizatsiiaKey            *Guid                                          `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey            *Guid                                          `json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey            *Guid                                          `json:"Подразделение_Key,omitempty"`
	TipDokumenta                *String                                        `json:"ТипДокумента,omitempty"`
	UvelichenieDolgaKontragenta *Double                                        `json:"УвеличениеДолгаКонтрагента,omitempty"`
	UmenshenieDolgaKontragenta  *Double                                        `json:"УменьшениеДолгаКонтрагента,omitempty"`
	SummyDolga                  *[]DocumentKorrektirovkaDolgaSummyDolgaRowType `json:"СуммыДолга,omitempty"`
}

func (DocumentKorrektirovkaDolga) APIEntityType() string {
	return "Document_КорректировкаДолга"
}
func NewDocumentKorrektirovkaDolga(data string, prevError error) (*DocumentKorrektirovkaDolga, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentKorrektirovkaDolga)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentKorrektirovkaDolga(entity DocumentKorrektirovkaDolga) (*DocumentKorrektirovkaDolga, error) {
	return NewDocumentKorrektirovkaDolga(c.createEntity(entity))
}
func (c *Client) DocumentKorrektirovkaDolga(key PrimaryDocumentKorrektirovkaDolga, fields []string) (*DocumentKorrektirovkaDolga, error) {
	return NewDocumentKorrektirovkaDolga(c.getEntity(key, fields))
}
func (c *Client) DocumentKorrektirovkaDolgas(where Where) (*[]DocumentKorrektirovkaDolga, error) {
	type ReturnObj struct {
		Value []DocumentKorrektirovkaDolga `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_КорректировкаДолга", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentKorrektirovkaDolga(key PrimaryDocumentKorrektirovkaDolga, entity DocumentKorrektirovkaDolga) (*DocumentKorrektirovkaDolga, error) {
	return NewDocumentKorrektirovkaDolga(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentKorrektirovkaDolga(key PrimaryDocumentKorrektirovkaDolga) error {
	return c.removeEntity(key)
}

type DocumentKorrektirovkaDolgaSummyDolga struct {
	Key                         Guid      `json:"Ref_Key,omitempty"`
	LineNumber                  Int64     `json:"LineNumber,omitempty"`
	DataDolga                   *DateTime `json:"ДатаДолга,omitempty"`
	DogovorKontragentaKey       *Guid     `json:"ДоговорКонтрагента_Key,omitempty"`
	KratnostVzaimoraschetov     *Int64    `json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov         *Double   `json:"КурсВзаиморасчетов,omitempty"`
	Sdelka                      *String   `json:"Сделка,omitempty"`
	UvelichenieDolgaKontragenta *Double   `json:"УвеличениеДолгаКонтрагента,omitempty"`
	UmenshenieDolgaKontragenta  *Double   `json:"УменьшениеДолгаКонтрагента,omitempty"`
	SdelkaType                  *String   `json:"Сделка_Type,omitempty"`
}

func (DocumentKorrektirovkaDolgaSummyDolga) APIEntityType() string {
	return "Document_КорректировкаДолга_СуммыДолга"
}
func NewDocumentKorrektirovkaDolgaSummyDolga(data string, prevError error) (*DocumentKorrektirovkaDolgaSummyDolga, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentKorrektirovkaDolgaSummyDolga)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentKorrektirovkaDolgaSummyDolga(entity DocumentKorrektirovkaDolgaSummyDolga) (*DocumentKorrektirovkaDolgaSummyDolga, error) {
	return NewDocumentKorrektirovkaDolgaSummyDolga(c.createEntity(entity))
}
func (c *Client) DocumentKorrektirovkaDolgaSummyDolga(key PrimaryDocumentKorrektirovkaDolgaSummyDolga, fields []string) (*DocumentKorrektirovkaDolgaSummyDolga, error) {
	return NewDocumentKorrektirovkaDolgaSummyDolga(c.getEntity(key, fields))
}
func (c *Client) DocumentKorrektirovkaDolgaSummyDolgas(where Where) (*[]DocumentKorrektirovkaDolgaSummyDolga, error) {
	type ReturnObj struct {
		Value []DocumentKorrektirovkaDolgaSummyDolga `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_КорректировкаДолга_СуммыДолга", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentKorrektirovkaDolgaSummyDolga(key PrimaryDocumentKorrektirovkaDolgaSummyDolga, entity DocumentKorrektirovkaDolgaSummyDolga) (*DocumentKorrektirovkaDolgaSummyDolga, error) {
	return NewDocumentKorrektirovkaDolgaSummyDolga(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentKorrektirovkaDolgaSummyDolga(key PrimaryDocumentKorrektirovkaDolgaSummyDolga) error {
	return c.removeEntity(key)
}

type PayType struct {
	Key                                     Guid     `json:"Ref_Key,omitempty"`
	DataVersion                             *String  `json:"DataVersion,omitempty"`
	Description                             *String  `json:"Description,omitempty"`
	Code                                    *String  `json:"Code,omitempty"`
	ParentKey                               *Guid    `json:"Parent_Key,omitempty"`
	IsFolder                                *Boolean `json:"IsFolder,omitempty"`
	DeletionMark                            *Boolean `json:"DeletionMark,omitempty"`
	BankKreditorKey                         *Guid    `json:"БанкКредитор_Key,omitempty"`
	DogovorVzaimoraschetovBankaKreditoraKey *Guid    `json:"ДоговорВзаиморасчетовБанкаКредитора_Key,omitempty"`
	DogovorEkvairingaKey                    *Guid    `json:"ДоговорЭквайринга_Key,omitempty"`
	NomerKarty                              *String  `json:"НомерКарты,omitempty"`
	ProtsentBankovskoiKomissii              *Double  `json:"ПроцентБанковскойКомиссии,omitempty"`
	TipOplaty                               *String  `json:"ТипОплаты,omitempty"`
	AvtomaticheskiVychitatSummuKomissii     *Boolean `json:"АвтоматическиВычитатьСуммуКомиссии,omitempty"`
}

func (PayType) APIEntityType() string {
	return "Catalog_ВидыОплатЧекаККМ"
}
func NewPayType(data string, prevError error) (*PayType, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(PayType)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreatePayType(entity PayType) (*PayType, error) {
	return NewPayType(c.createEntity(entity))
}
func (c *Client) PayType(key PrimaryPayType, fields []string) (*PayType, error) {
	return NewPayType(c.getEntity(key, fields))
}
func (c *Client) PayTypes(where Where) (*[]PayType, error) {
	type ReturnObj struct {
		Value []PayType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ВидыОплатЧекаККМ", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdatePayType(key PrimaryPayType, entity PayType) (*PayType, error) {
	return NewPayType(c.updateEntity(key, entity))
}
func (c *Client) DeletePayType(key PrimaryPayType) error {
	return c.removeEntity(key)
}

type CatalogKhranilishcheShablonov struct {
	Key               Guid     `json:"Ref_Key,omitempty"`
	DataVersion       *String  `json:"DataVersion,omitempty"`
	Description       *String  `json:"Description,omitempty"`
	Code              *String  `json:"Code,omitempty"`
	DeletionMark      *Boolean `json:"DeletionMark,omitempty"`
	Obieekt           *String  `json:"Объект,omitempty"`
	ShablonBase64Data *Binary  `json:"Шаблон_Base64Data,omitempty"`
	TipShablona       *String  `json:"ТипШаблона,omitempty"`
	ShablonType       *String  `json:"Шаблон_Type,omitempty"`
	Shablon           *Stream  `json:"Шаблон,omitempty"`
}

func (CatalogKhranilishcheShablonov) APIEntityType() string {
	return "Catalog_ХранилищеШаблонов"
}
func NewCatalogKhranilishcheShablonov(data string, prevError error) (*CatalogKhranilishcheShablonov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogKhranilishcheShablonov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogKhranilishcheShablonov(entity CatalogKhranilishcheShablonov) (*CatalogKhranilishcheShablonov, error) {
	return NewCatalogKhranilishcheShablonov(c.createEntity(entity))
}
func (c *Client) CatalogKhranilishcheShablonov(key PrimaryCatalogKhranilishcheShablonov, fields []string) (*CatalogKhranilishcheShablonov, error) {
	return NewCatalogKhranilishcheShablonov(c.getEntity(key, fields))
}
func (c *Client) CatalogKhranilishcheShablonovs(where Where) (*[]CatalogKhranilishcheShablonov, error) {
	type ReturnObj struct {
		Value []CatalogKhranilishcheShablonov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ХранилищеШаблонов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogKhranilishcheShablonov(key PrimaryCatalogKhranilishcheShablonov, entity CatalogKhranilishcheShablonov) (*CatalogKhranilishcheShablonov, error) {
	return NewCatalogKhranilishcheShablonov(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogKhranilishcheShablonov(key PrimaryCatalogKhranilishcheShablonov) error {
	return c.removeEntity(key)
}

type DocumentZaiavkaNaRaskhodovanieSredstv struct {
	Key                                    Guid                                                                `json:"Ref_Key,omitempty"`
	DataVersion                            *String                                                             `json:"DataVersion,omitempty"`
	Number                                 *String                                                             `json:"Number,omitempty"`
	Date                                   *DateTime                                                           `json:"Date,omitempty"`
	DeletionMark                           *Boolean                                                            `json:"DeletionMark,omitempty"`
	Posted                                 *Boolean                                                            `json:"Posted,omitempty"`
	AvtoRazmeshcheniePoZaiavke             *Boolean                                                            `json:"АвтоРазмещениеПоЗаявке,omitempty"`
	AvtoRezervirovaniePoZaiavke            *Boolean                                                            `json:"АвтоРезервированиеПоЗаявке,omitempty"`
	BankovskiiSchetKassa                   *String                                                             `json:"БанковскийСчетКасса,omitempty"`
	ValiutaVzaimoraschetovPodotchetnikaKey *Guid                                                               `json:"ВалютаВзаиморасчетовПодотчетника_Key,omitempty"`
	ValiutaDokumentaKey                    *Guid                                                               `json:"ВалютаДокумента_Key,omitempty"`
	VidVydachiDenezhnykhSredstv            *String                                                             `json:"ВидВыдачиДенежныхСредств,omitempty"`
	OperationType                          *String                                                             `json:"ВидОперации,omitempty"`
	VkliuchatVPlatezhnyiKalendar           *Boolean                                                            `json:"ВключатьВПлатежныйКалендарь,omitempty"`
	DataPogasheniiaAvansa                  *DateTime                                                           `json:"ДатаПогашенияАванса,omitempty"`
	DataRaskhoda                           *DateTime                                                           `json:"ДатаРасхода,omitempty"`
	DokumentOsnovanie                      *String                                                             `json:"ДокументОснование,omitempty"`
	Comment                                *String                                                             `json:"Комментарий,omitempty"`
	KontragentKey                          *Guid                                                               `json:"Контрагент_Key,omitempty"`
	KratnostDokumenta                      *Int64                                                              `json:"КратностьДокумента,omitempty"`
	KursDokumenta                          *Double                                                             `json:"КурсДокумента,omitempty"`
	Nomenklatura                           *String                                                             `json:"Номенклатура,omitempty"`
	Opisanie                               *String                                                             `json:"Описание,omitempty"`
	OrganizatsiiaKey                       *Guid                                                               `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                       *Guid                                                               `json:"Ответственный_Key,omitempty"`
	Poluchatel                             *String                                                             `json:"Получатель,omitempty"`
	RaschetnyiDokumentKey                  *Guid                                                               `json:"РасчетныйДокумент_Key,omitempty"`
	Sostoianie                             *String                                                             `json:"Состояние,omitempty"`
	SumOfDocument                          *Double                                                             `json:"СуммаДокумента,omitempty"`
	TipDokumenta                           *String                                                             `json:"ТипДокумента,omitempty"`
	FormaOplaty                            *String                                                             `json:"ФормаОплаты,omitempty"`
	TsFOKey                                *Guid                                                               `json:"ЦФО_Key,omitempty"`
	ExtendedPayments                       *[]DocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezhaRowType `json:"РасшифровкаПлатежа,omitempty"`
	RazmeshchenieZaiavki                   *[]DocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavkiRowType `json:"РазмещениеЗаявки,omitempty"`
	BankovskiiSchetKassaType               *String                                                             `json:"БанковскийСчетКасса_Type,omitempty"`
	DokumentOsnovanieType                  *String                                                             `json:"ДокументОснование_Type,omitempty"`
	ItemType                               *String                                                             `json:"Номенклатура_Type,omitempty"`
	PoluchatelType                         *String                                                             `json:"Получатель_Type,omitempty"`
}

func (DocumentZaiavkaNaRaskhodovanieSredstv) APIEntityType() string {
	return "Document_ЗаявкаНаРасходованиеСредств"
}
func NewDocumentZaiavkaNaRaskhodovanieSredstv(data string, prevError error) (*DocumentZaiavkaNaRaskhodovanieSredstv, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentZaiavkaNaRaskhodovanieSredstv)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentZaiavkaNaRaskhodovanieSredstv(entity DocumentZaiavkaNaRaskhodovanieSredstv) (*DocumentZaiavkaNaRaskhodovanieSredstv, error) {
	return NewDocumentZaiavkaNaRaskhodovanieSredstv(c.createEntity(entity))
}
func (c *Client) DocumentZaiavkaNaRaskhodovanieSredstv(key PrimaryDocumentZaiavkaNaRaskhodovanieSredstv, fields []string) (*DocumentZaiavkaNaRaskhodovanieSredstv, error) {
	return NewDocumentZaiavkaNaRaskhodovanieSredstv(c.getEntity(key, fields))
}
func (c *Client) DocumentZaiavkaNaRaskhodovanieSredstvs(where Where) (*[]DocumentZaiavkaNaRaskhodovanieSredstv, error) {
	type ReturnObj struct {
		Value []DocumentZaiavkaNaRaskhodovanieSredstv `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗаявкаНаРасходованиеСредств", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentZaiavkaNaRaskhodovanieSredstv(key PrimaryDocumentZaiavkaNaRaskhodovanieSredstv, entity DocumentZaiavkaNaRaskhodovanieSredstv) (*DocumentZaiavkaNaRaskhodovanieSredstv, error) {
	return NewDocumentZaiavkaNaRaskhodovanieSredstv(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentZaiavkaNaRaskhodovanieSredstv(key PrimaryDocumentZaiavkaNaRaskhodovanieSredstv) error {
	return c.removeEntity(key)
}

type DocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezha struct {
	Key                     Guid    `json:"Ref_Key,omitempty"`
	LineNumber              Int64   `json:"LineNumber,omitempty"`
	DogovorKontragentaKey   *Guid   `json:"ДоговорКонтрагента_Key,omitempty"`
	KratnostVzaimoraschetov *Int64  `json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov     *Double `json:"КурсВзаиморасчетов,omitempty"`
	ProektKey               *Guid   `json:"Проект_Key,omitempty"`
	Sdelka                  *String `json:"Сделка,omitempty"`
	TypeOfMovingMoneyKey    *Guid   `json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov    *Double `json:"СуммаВзаиморасчетов,omitempty"`
	Sum                     *Double `json:"СуммаПлатежа,omitempty"`
	SdelkaType              *String `json:"Сделка_Type,omitempty"`
}

func (DocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezha) APIEntityType() string {
	return "Document_ЗаявкаНаРасходованиеСредств_РасшифровкаПлатежа"
}
func NewDocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezha(data string, prevError error) (*DocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezha, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezha)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezha(entity DocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezha) (*DocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezha, error) {
	return NewDocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezha(c.createEntity(entity))
}
func (c *Client) DocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezha(key PrimaryDocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezha, fields []string) (*DocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezha, error) {
	return NewDocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezha(c.getEntity(key, fields))
}
func (c *Client) DocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezhas(where Where) (*[]DocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezha, error) {
	type ReturnObj struct {
		Value []DocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezha `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗаявкаНаРасходованиеСредств_РасшифровкаПлатежа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezha(key PrimaryDocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezha, entity DocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezha) (*DocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezha, error) {
	return NewDocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezha(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezha(key PrimaryDocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezha) error {
	return c.removeEntity(key)
}

type DocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavki struct {
	Key                     Guid    `json:"Ref_Key,omitempty"`
	LineNumber              Int64   `json:"LineNumber,omitempty"`
	MestoRazmeshcheniia     *String `json:"МестоРазмещения,omitempty"`
	Sum                     *Double `json:"СуммаПлатежа,omitempty"`
	MestoRazmeshcheniiaType *String `json:"МестоРазмещения_Type,omitempty"`
}

func (DocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavki) APIEntityType() string {
	return "Document_ЗаявкаНаРасходованиеСредств_РазмещениеЗаявки"
}
func NewDocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavki(data string, prevError error) (*DocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavki, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavki)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavki(entity DocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavki) (*DocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavki, error) {
	return NewDocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavki(c.createEntity(entity))
}
func (c *Client) DocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavki(key PrimaryDocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavki, fields []string) (*DocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavki, error) {
	return NewDocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavki(c.getEntity(key, fields))
}
func (c *Client) DocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavkis(where Where) (*[]DocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavki, error) {
	type ReturnObj struct {
		Value []DocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗаявкаНаРасходованиеСредств_РазмещениеЗаявки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavki(key PrimaryDocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavki, entity DocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavki) (*DocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavki, error) {
	return NewDocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavki(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavki(key PrimaryDocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavki) error {
	return c.removeEntity(key)
}

type DocumentZakrytieZakazovPostavshchikam struct {
	Key              Guid                                                  `json:"Ref_Key,omitempty"`
	DataVersion      *String                                               `json:"DataVersion,omitempty"`
	Number           *String                                               `json:"Number,omitempty"`
	Date             *DateTime                                             `json:"Date,omitempty"`
	DeletionMark     *Boolean                                              `json:"DeletionMark,omitempty"`
	Posted           *Boolean                                              `json:"Posted,omitempty"`
	Comment          *String                                               `json:"Комментарий,omitempty"`
	OtvetstvennyiKey *Guid                                                 `json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey *Guid                                                 `json:"Подразделение_Key,omitempty"`
	TipDokumenta     *String                                               `json:"ТипДокумента,omitempty"`
	Zakazy           *[]DocumentZakrytieZakazovPostavshchikamZakazyRowType `json:"Заказы,omitempty"`
}

func (DocumentZakrytieZakazovPostavshchikam) APIEntityType() string {
	return "Document_ЗакрытиеЗаказовПоставщикам"
}
func NewDocumentZakrytieZakazovPostavshchikam(data string, prevError error) (*DocumentZakrytieZakazovPostavshchikam, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentZakrytieZakazovPostavshchikam)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentZakrytieZakazovPostavshchikam(entity DocumentZakrytieZakazovPostavshchikam) (*DocumentZakrytieZakazovPostavshchikam, error) {
	return NewDocumentZakrytieZakazovPostavshchikam(c.createEntity(entity))
}
func (c *Client) DocumentZakrytieZakazovPostavshchikam(key PrimaryDocumentZakrytieZakazovPostavshchikam, fields []string) (*DocumentZakrytieZakazovPostavshchikam, error) {
	return NewDocumentZakrytieZakazovPostavshchikam(c.getEntity(key, fields))
}
func (c *Client) DocumentZakrytieZakazovPostavshchikams(where Where) (*[]DocumentZakrytieZakazovPostavshchikam, error) {
	type ReturnObj struct {
		Value []DocumentZakrytieZakazovPostavshchikam `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗакрытиеЗаказовПоставщикам", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentZakrytieZakazovPostavshchikam(key PrimaryDocumentZakrytieZakazovPostavshchikam, entity DocumentZakrytieZakazovPostavshchikam) (*DocumentZakrytieZakazovPostavshchikam, error) {
	return NewDocumentZakrytieZakazovPostavshchikam(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentZakrytieZakazovPostavshchikam(key PrimaryDocumentZakrytieZakazovPostavshchikam) error {
	return c.removeEntity(key)
}

type DocumentZakrytieZakazovPostavshchikamZakazy struct {
	Key                        Guid  `json:"Ref_Key,omitempty"`
	LineNumber                 Int64 `json:"LineNumber,omitempty"`
	ZakazPostavshchikuKey      *Guid `json:"ЗаказПоставщику_Key,omitempty"`
	PrichinaZakrytiiaZakazaKey *Guid `json:"ПричинаЗакрытияЗаказа_Key,omitempty"`
}

func (DocumentZakrytieZakazovPostavshchikamZakazy) APIEntityType() string {
	return "Document_ЗакрытиеЗаказовПоставщикам_Заказы"
}
func NewDocumentZakrytieZakazovPostavshchikamZakazy(data string, prevError error) (*DocumentZakrytieZakazovPostavshchikamZakazy, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentZakrytieZakazovPostavshchikamZakazy)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentZakrytieZakazovPostavshchikamZakazy(entity DocumentZakrytieZakazovPostavshchikamZakazy) (*DocumentZakrytieZakazovPostavshchikamZakazy, error) {
	return NewDocumentZakrytieZakazovPostavshchikamZakazy(c.createEntity(entity))
}
func (c *Client) DocumentZakrytieZakazovPostavshchikamZakazy(key PrimaryDocumentZakrytieZakazovPostavshchikamZakazy, fields []string) (*DocumentZakrytieZakazovPostavshchikamZakazy, error) {
	return NewDocumentZakrytieZakazovPostavshchikamZakazy(c.getEntity(key, fields))
}
func (c *Client) DocumentZakrytieZakazovPostavshchikamZakazys(where Where) (*[]DocumentZakrytieZakazovPostavshchikamZakazy, error) {
	type ReturnObj struct {
		Value []DocumentZakrytieZakazovPostavshchikamZakazy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗакрытиеЗаказовПоставщикам_Заказы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentZakrytieZakazovPostavshchikamZakazy(key PrimaryDocumentZakrytieZakazovPostavshchikamZakazy, entity DocumentZakrytieZakazovPostavshchikamZakazy) (*DocumentZakrytieZakazovPostavshchikamZakazy, error) {
	return NewDocumentZakrytieZakazovPostavshchikamZakazy(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentZakrytieZakazovPostavshchikamZakazy(key PrimaryDocumentZakrytieZakazovPostavshchikamZakazy) error {
	return c.removeEntity(key)
}

type CatalogVidyKamnei struct {
	Key          Guid     `json:"Ref_Key,omitempty"`
	DataVersion  *String  `json:"DataVersion,omitempty"`
	Description  *String  `json:"Description,omitempty"`
	Code         *String  `json:"Code,omitempty"`
	DeletionMark *Boolean `json:"DeletionMark,omitempty"`
}

func (CatalogVidyKamnei) APIEntityType() string {
	return "Catalog_ВидыКамней"
}
func NewCatalogVidyKamnei(data string, prevError error) (*CatalogVidyKamnei, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogVidyKamnei)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogVidyKamnei(entity CatalogVidyKamnei) (*CatalogVidyKamnei, error) {
	return NewCatalogVidyKamnei(c.createEntity(entity))
}
func (c *Client) CatalogVidyKamnei(key PrimaryCatalogVidyKamnei, fields []string) (*CatalogVidyKamnei, error) {
	return NewCatalogVidyKamnei(c.getEntity(key, fields))
}
func (c *Client) CatalogVidyKamneis(where Where) (*[]CatalogVidyKamnei, error) {
	type ReturnObj struct {
		Value []CatalogVidyKamnei `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ВидыКамней", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogVidyKamnei(key PrimaryCatalogVidyKamnei, entity CatalogVidyKamnei) (*CatalogVidyKamnei, error) {
	return NewCatalogVidyKamnei(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogVidyKamnei(key PrimaryCatalogVidyKamnei) error {
	return c.removeEntity(key)
}

type DocumentAnketyKlientovDliaFinMonitoringa struct {
	Key                             Guid                                                     `json:"Ref_Key,omitempty"`
	DataVersion                     *String                                                  `json:"DataVersion,omitempty"`
	Number                          *String                                                  `json:"Number,omitempty"`
	Date                            *DateTime                                                `json:"Date,omitempty"`
	DeletionMark                    *Boolean                                                 `json:"DeletionMark,omitempty"`
	Posted                          *Boolean                                                 `json:"Posted,omitempty"`
	OrganizatsiiaKey                *Guid                                                    `json:"Организация_Key,omitempty"`
	StatusProverki                  *Boolean                                                 `json:"СтатусПроверки,omitempty"`
	NomerSoobshcheniia              *Int64                                                   `json:"НомерСообщения,omitempty"`
	DataSoobshcheniia               *DateTime                                                `json:"ДатаСообщения,omitempty"`
	DataPredydushcheiProverki       *DateTime                                                `json:"ДатаПредыдущейПроверки,omitempty"`
	DataNachalaPerioda              *DateTime                                                `json:"ДатаНачалаПериода,omitempty"`
	DataOkonchaniiaPerioda          *DateTime                                                `json:"ДатаОкончанияПериода,omitempty"`
	ObshcheeKolichestvoProverennykh *Int64                                                   `json:"ОбщееКоличествоПроверенных,omitempty"`
	KolichestvoProverennykhIurLits  *Int64                                                   `json:"КоличествоПроверенныхЮрЛиц,omitempty"`
	KolichestvoProverennykhFizLits  *Int64                                                   `json:"КоличествоПроверенныхФизЛиц,omitempty"`
	ObshcheeKolichestvoNaidennykh   *Int64                                                   `json:"ОбщееКоличествоНайденных,omitempty"`
	KolichestvoNaidennykhIurLits    *Int64                                                   `json:"КоличествоНайденныхЮрЛиц,omitempty"`
	KolichestvoNaidennykhFizLits    *Int64                                                   `json:"КоличествоНайденныхФизЛиц,omitempty"`
	VariantProverki                 *Int16                                                   `json:"ВариантПроверки,omitempty"`
	DataPerechnia                   *DateTime                                                `json:"ДатаПеречня,omitempty"`
	PlanovaiaProverka               *Boolean                                                 `json:"ПлановаяПроверка,omitempty"`
	Ankety                          *[]DocumentAnketyKlientovDliaFinMonitoringaAnketyRowType `json:"Анкеты,omitempty"`
}

func (DocumentAnketyKlientovDliaFinMonitoringa) APIEntityType() string {
	return "Document_АнкетыКлиентовДляФинМониторинга"
}
func NewDocumentAnketyKlientovDliaFinMonitoringa(data string, prevError error) (*DocumentAnketyKlientovDliaFinMonitoringa, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentAnketyKlientovDliaFinMonitoringa)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentAnketyKlientovDliaFinMonitoringa(entity DocumentAnketyKlientovDliaFinMonitoringa) (*DocumentAnketyKlientovDliaFinMonitoringa, error) {
	return NewDocumentAnketyKlientovDliaFinMonitoringa(c.createEntity(entity))
}
func (c *Client) DocumentAnketyKlientovDliaFinMonitoringa(key PrimaryDocumentAnketyKlientovDliaFinMonitoringa, fields []string) (*DocumentAnketyKlientovDliaFinMonitoringa, error) {
	return NewDocumentAnketyKlientovDliaFinMonitoringa(c.getEntity(key, fields))
}
func (c *Client) DocumentAnketyKlientovDliaFinMonitoringas(where Where) (*[]DocumentAnketyKlientovDliaFinMonitoringa, error) {
	type ReturnObj struct {
		Value []DocumentAnketyKlientovDliaFinMonitoringa `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_АнкетыКлиентовДляФинМониторинга", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentAnketyKlientovDliaFinMonitoringa(key PrimaryDocumentAnketyKlientovDliaFinMonitoringa, entity DocumentAnketyKlientovDliaFinMonitoringa) (*DocumentAnketyKlientovDliaFinMonitoringa, error) {
	return NewDocumentAnketyKlientovDliaFinMonitoringa(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentAnketyKlientovDliaFinMonitoringa(key PrimaryDocumentAnketyKlientovDliaFinMonitoringa) error {
	return c.removeEntity(key)
}

type DocumentAnketyKlientovDliaFinMonitoringaAnkety struct {
	Key                        Guid     `json:"Ref_Key,omitempty"`
	LineNumber                 Int64    `json:"LineNumber,omitempty"`
	KontragentKey              *Guid    `json:"Контрагент_Key,omitempty"`
	DogovorKontragentaKey      *Guid    `json:"ДоговорКонтрагента_Key,omitempty"`
	VPerechne                  *Boolean `json:"ВПеречне,omitempty"`
	InostrannoePublichnoeLitso *Boolean `json:"ИностранноеПубличноеЛицо,omitempty"`
	DokumentSeriia             *String  `json:"ДокументСерия,omitempty"`
	DokumentNomer              *String  `json:"ДокументНомер,omitempty"`
}

func (DocumentAnketyKlientovDliaFinMonitoringaAnkety) APIEntityType() string {
	return "Document_АнкетыКлиентовДляФинМониторинга_Анкеты"
}
func NewDocumentAnketyKlientovDliaFinMonitoringaAnkety(data string, prevError error) (*DocumentAnketyKlientovDliaFinMonitoringaAnkety, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentAnketyKlientovDliaFinMonitoringaAnkety)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentAnketyKlientovDliaFinMonitoringaAnkety(entity DocumentAnketyKlientovDliaFinMonitoringaAnkety) (*DocumentAnketyKlientovDliaFinMonitoringaAnkety, error) {
	return NewDocumentAnketyKlientovDliaFinMonitoringaAnkety(c.createEntity(entity))
}
func (c *Client) DocumentAnketyKlientovDliaFinMonitoringaAnkety(key PrimaryDocumentAnketyKlientovDliaFinMonitoringaAnkety, fields []string) (*DocumentAnketyKlientovDliaFinMonitoringaAnkety, error) {
	return NewDocumentAnketyKlientovDliaFinMonitoringaAnkety(c.getEntity(key, fields))
}
func (c *Client) DocumentAnketyKlientovDliaFinMonitoringaAnketys(where Where) (*[]DocumentAnketyKlientovDliaFinMonitoringaAnkety, error) {
	type ReturnObj struct {
		Value []DocumentAnketyKlientovDliaFinMonitoringaAnkety `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_АнкетыКлиентовДляФинМониторинга_Анкеты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentAnketyKlientovDliaFinMonitoringaAnkety(key PrimaryDocumentAnketyKlientovDliaFinMonitoringaAnkety, entity DocumentAnketyKlientovDliaFinMonitoringaAnkety) (*DocumentAnketyKlientovDliaFinMonitoringaAnkety, error) {
	return NewDocumentAnketyKlientovDliaFinMonitoringaAnkety(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentAnketyKlientovDliaFinMonitoringaAnkety(key PrimaryDocumentAnketyKlientovDliaFinMonitoringaAnkety) error {
	return c.removeEntity(key)
}

type CatalogDogovoryRassrochki struct {
	Key                          Guid      `json:"Ref_Key,omitempty"`
	DataVersion                  *String   `json:"DataVersion,omitempty"`
	Description                  *String   `json:"Description,omitempty"`
	Code                         *String   `json:"Code,omitempty"`
	OwnerKey                     *Guid     `json:"Owner_Key,omitempty"`
	DeletionMark                 *Boolean  `json:"DeletionMark,omitempty"`
	Date                         *DateTime `json:"Дата,omitempty"`
	Number                       *String   `json:"Номер,omitempty"`
	MesiatsevRassrochki          *Int64    `json:"МесяцевРассрочки,omitempty"`
	SummaEzhemesiachnogoPlatezha *Double   `json:"СуммаЕжемесячногоПлатежа,omitempty"`
	SummaRassrochki              *Double   `json:"СуммаРассрочки,omitempty"`
	SummaPokupki                 *Double   `json:"СуммаПокупки,omitempty"`
	SummaPervonachalnogoVznosa   *Double   `json:"СуммаПервоначальногоВзноса,omitempty"`
}

func (CatalogDogovoryRassrochki) APIEntityType() string {
	return "Catalog_ДоговорыРассрочки"
}
func NewCatalogDogovoryRassrochki(data string, prevError error) (*CatalogDogovoryRassrochki, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogDogovoryRassrochki)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogDogovoryRassrochki(entity CatalogDogovoryRassrochki) (*CatalogDogovoryRassrochki, error) {
	return NewCatalogDogovoryRassrochki(c.createEntity(entity))
}
func (c *Client) CatalogDogovoryRassrochki(key PrimaryCatalogDogovoryRassrochki, fields []string) (*CatalogDogovoryRassrochki, error) {
	return NewCatalogDogovoryRassrochki(c.getEntity(key, fields))
}
func (c *Client) CatalogDogovoryRassrochkis(where Where) (*[]CatalogDogovoryRassrochki, error) {
	type ReturnObj struct {
		Value []CatalogDogovoryRassrochki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ДоговорыРассрочки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogDogovoryRassrochki(key PrimaryCatalogDogovoryRassrochki, entity CatalogDogovoryRassrochki) (*CatalogDogovoryRassrochki, error) {
	return NewCatalogDogovoryRassrochki(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogDogovoryRassrochki(key PrimaryCatalogDogovoryRassrochki) error {
	return c.removeEntity(key)
}

type CatalogSertifikaty struct {
	Key                                 Guid      `json:"Ref_Key,omitempty"`
	DataVersion                         *String   `json:"DataVersion,omitempty"`
	Description                         *String   `json:"Description,omitempty"`
	Code                                *String   `json:"Code,omitempty"`
	DeletionMark                        *Boolean  `json:"DeletionMark,omitempty"`
	KolichestvoDneiDeistviiaSertifikata *Int64    `json:"КоличествоДнейДействияСертификата,omitempty"`
	Comment                             *String   `json:"Комментарий,omitempty"`
	Number                              *String   `json:"Номер,omitempty"`
	ProdazhaPoSvobodnoiTsene            *Boolean  `json:"ПродажаПоСвободнойЦене,omitempty"`
	SrokDeistviia                       *DateTime `json:"СрокДействия,omitempty"`
	SrokDeistviiaSertifikataOgranichen  *Boolean  `json:"СрокДействияСертификатаОграничен,omitempty"`
	Sum                                 *Double   `json:"Сумма,omitempty"`
}

func (CatalogSertifikaty) APIEntityType() string {
	return "Catalog_Сертификаты"
}
func NewCatalogSertifikaty(data string, prevError error) (*CatalogSertifikaty, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogSertifikaty)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogSertifikaty(entity CatalogSertifikaty) (*CatalogSertifikaty, error) {
	return NewCatalogSertifikaty(c.createEntity(entity))
}
func (c *Client) CatalogSertifikaty(key PrimaryCatalogSertifikaty, fields []string) (*CatalogSertifikaty, error) {
	return NewCatalogSertifikaty(c.getEntity(key, fields))
}
func (c *Client) CatalogSertifikatys(where Where) (*[]CatalogSertifikaty, error) {
	type ReturnObj struct {
		Value []CatalogSertifikaty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Сертификаты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogSertifikaty(key PrimaryCatalogSertifikaty, entity CatalogSertifikaty) (*CatalogSertifikaty, error) {
	return NewCatalogSertifikaty(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogSertifikaty(key PrimaryCatalogSertifikaty) error {
	return c.removeEntity(key)
}

type DocumentPostuplenieDavalcheskogoMetalla struct {
	Key                                   Guid      `json:"Ref_Key,omitempty"`
	DataVersion                           *String   `json:"DataVersion,omitempty"`
	Number                                *String   `json:"Number,omitempty"`
	Date                                  *DateTime `json:"Date,omitempty"`
	DeletionMark                          *Boolean  `json:"DeletionMark,omitempty"`
	Posted                                *Boolean  `json:"Posted,omitempty"`
	Weight                                *Double   `json:"Вес,omitempty"`
	DataVkhodiashchegoDokumenta           *DateTime `json:"ДатаВходящегоДокумента,omitempty"`
	DogovorKontragentaKey                 *Guid     `json:"ДоговорКонтрагента_Key,omitempty"`
	Comment                               *String   `json:"Комментарий,omitempty"`
	KontragentKey                         *Guid     `json:"Контрагент_Key,omitempty"`
	MetallKey                             *Guid     `json:"Металл_Key,omitempty"`
	NomenklaturaOprikhodovaniiaMetallaKey *Guid     `json:"НоменклатураОприходованияМеталла_Key,omitempty"`
	NomerVkhodiashchegoDokumenta          *String   `json:"НомерВходящегоДокумента,omitempty"`
	OrganizatsiiaKey                      *Guid     `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                      *Guid     `json:"Ответственный_Key,omitempty"`
	ProbaLoma                             *Double   `json:"ПробаЛома,omitempty"`
	DepartmentKey                         *Guid     `json:"Склад_Key,omitempty"`
	Chistota                              *Boolean  `json:"Чистота,omitempty"`
	PodrazdelenieKey                      *Guid     `json:"Подразделение_Key,omitempty"`
	Cost                                  *Double   `json:"Стоимость,omitempty"`
	SumOfDocument                         *Double   `json:"СуммаДокумента,omitempty"`
}

func (DocumentPostuplenieDavalcheskogoMetalla) APIEntityType() string {
	return "Document_ПоступлениеДавальческогоМеталла"
}
func NewDocumentPostuplenieDavalcheskogoMetalla(data string, prevError error) (*DocumentPostuplenieDavalcheskogoMetalla, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPostuplenieDavalcheskogoMetalla)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPostuplenieDavalcheskogoMetalla(entity DocumentPostuplenieDavalcheskogoMetalla) (*DocumentPostuplenieDavalcheskogoMetalla, error) {
	return NewDocumentPostuplenieDavalcheskogoMetalla(c.createEntity(entity))
}
func (c *Client) DocumentPostuplenieDavalcheskogoMetalla(key PrimaryDocumentPostuplenieDavalcheskogoMetalla, fields []string) (*DocumentPostuplenieDavalcheskogoMetalla, error) {
	return NewDocumentPostuplenieDavalcheskogoMetalla(c.getEntity(key, fields))
}
func (c *Client) DocumentPostuplenieDavalcheskogoMetallas(where Where) (*[]DocumentPostuplenieDavalcheskogoMetalla, error) {
	type ReturnObj struct {
		Value []DocumentPostuplenieDavalcheskogoMetalla `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПоступлениеДавальческогоМеталла", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPostuplenieDavalcheskogoMetalla(key PrimaryDocumentPostuplenieDavalcheskogoMetalla, entity DocumentPostuplenieDavalcheskogoMetalla) (*DocumentPostuplenieDavalcheskogoMetalla, error) {
	return NewDocumentPostuplenieDavalcheskogoMetalla(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPostuplenieDavalcheskogoMetalla(key PrimaryDocumentPostuplenieDavalcheskogoMetalla) error {
	return c.removeEntity(key)
}

type DocumentInkassovoePorucheniePeredannoe struct {
	Key                                  Guid                                                                 `json:"Ref_Key,omitempty"`
	DataVersion                          *String                                                              `json:"DataVersion,omitempty"`
	Number                               *String                                                              `json:"Number,omitempty"`
	Date                                 *DateTime                                                            `json:"Date,omitempty"`
	DeletionMark                         *Boolean                                                             `json:"DeletionMark,omitempty"`
	Posted                               *Boolean                                                             `json:"Posted,omitempty"`
	ValiutaDokumentaKey                  *Guid                                                                `json:"ВалютаДокумента_Key,omitempty"`
	OperationType                        *String                                                              `json:"ВидОперации,omitempty"`
	VidPlatezha                          *String                                                              `json:"ВидПлатежа,omitempty"`
	DataOplaty                           *DateTime                                                            `json:"ДатаОплаты,omitempty"`
	DogovorKontragentaKey                *Guid                                                                `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie                    *String                                                              `json:"ДокументОснование,omitempty"`
	DokumentPlanirovaniiaPostupleniiaKey *Guid                                                                `json:"ДокументПланированияПоступления_Key,omitempty"`
	INNPlatelshchika                     *String                                                              `json:"ИННПлательщика,omitempty"`
	INNPoluchatelia                      *String                                                              `json:"ИННПолучателя,omitempty"`
	Comment                              *String                                                              `json:"Комментарий,omitempty"`
	KontragentKey                        *Guid                                                                `json:"Контрагент_Key,omitempty"`
	KPPPlatelshchika                     *String                                                              `json:"КПППлательщика,omitempty"`
	KPPPoluchatelia                      *String                                                              `json:"КПППолучателя,omitempty"`
	NaznacheniePlatezha                  *String                                                              `json:"НазначениеПлатежа,omitempty"`
	Oplacheno                            *Boolean                                                             `json:"Оплачено,omitempty"`
	OrganizatsiiaKey                     *Guid                                                                `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                     *Guid                                                                `json:"Ответственный_Key,omitempty"`
	OtrazhenoVOperUchete                 *Boolean                                                             `json:"ОтраженоВОперУчете,omitempty"`
	OcherednostPlatezha                  *Int16                                                               `json:"ОчередностьПлатежа,omitempty"`
	TypeOfMovingMoneyKey                 *Guid                                                                `json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SumOfDocument                        *Double                                                              `json:"СуммаДокумента,omitempty"`
	SchetKontragentaKey                  *Guid                                                                `json:"СчетКонтрагента_Key,omitempty"`
	SchetOrganizatsiiKey                 *Guid                                                                `json:"СчетОрганизации_Key,omitempty"`
	TekstPlatelshchika                   *String                                                              `json:"ТекстПлательщика,omitempty"`
	TekstPoluchatelia                    *String                                                              `json:"ТекстПолучателя,omitempty"`
	TipDokumenta                         *String                                                              `json:"ТипДокумента,omitempty"`
	ChastichnaiaOplata                   *Boolean                                                             `json:"ЧастичнаяОплата,omitempty"`
	ExtendedPayments                     *[]DocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezhaRowType `json:"РасшифровкаПлатежа,omitempty"`
	RekvizityKontragenta                 *[]DocumentInkassovoePorucheniePeredannoeRekvizityKontragentaRowType `json:"РеквизитыКонтрагента,omitempty"`
	DokumentOsnovanieType                *String                                                              `json:"ДокументОснование_Type,omitempty"`
}

func (DocumentInkassovoePorucheniePeredannoe) APIEntityType() string {
	return "Document_ИнкассовоеПоручениеПереданное"
}
func NewDocumentInkassovoePorucheniePeredannoe(data string, prevError error) (*DocumentInkassovoePorucheniePeredannoe, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentInkassovoePorucheniePeredannoe)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentInkassovoePorucheniePeredannoe(entity DocumentInkassovoePorucheniePeredannoe) (*DocumentInkassovoePorucheniePeredannoe, error) {
	return NewDocumentInkassovoePorucheniePeredannoe(c.createEntity(entity))
}
func (c *Client) DocumentInkassovoePorucheniePeredannoe(key PrimaryDocumentInkassovoePorucheniePeredannoe, fields []string) (*DocumentInkassovoePorucheniePeredannoe, error) {
	return NewDocumentInkassovoePorucheniePeredannoe(c.getEntity(key, fields))
}
func (c *Client) DocumentInkassovoePorucheniePeredannoes(where Where) (*[]DocumentInkassovoePorucheniePeredannoe, error) {
	type ReturnObj struct {
		Value []DocumentInkassovoePorucheniePeredannoe `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ИнкассовоеПоручениеПереданное", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentInkassovoePorucheniePeredannoe(key PrimaryDocumentInkassovoePorucheniePeredannoe, entity DocumentInkassovoePorucheniePeredannoe) (*DocumentInkassovoePorucheniePeredannoe, error) {
	return NewDocumentInkassovoePorucheniePeredannoe(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentInkassovoePorucheniePeredannoe(key PrimaryDocumentInkassovoePorucheniePeredannoe) error {
	return c.removeEntity(key)
}

type DocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezha struct {
	Key                              Guid    `json:"Ref_Key,omitempty"`
	LineNumber                       Int64   `json:"LineNumber,omitempty"`
	DogovorKontragentaKey            *Guid   `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentPlanirovaniiaPlatezhaKey *Guid   `json:"ДокументПланированияПлатежа_Key,omitempty"`
	KratnostVzaimoraschetov          *Int64  `json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov              *Double `json:"КурсВзаиморасчетов,omitempty"`
	KursVzaimoraschetovPlan          *Double `json:"КурсВзаиморасчетовПлан,omitempty"`
	ProektKey                        *Guid   `json:"Проект_Key,omitempty"`
	Sdelka                           *String `json:"Сделка,omitempty"`
	StavkaNDS                        *String `json:"СтавкаНДС,omitempty"`
	TypeOfMovingMoneyKey             *Guid   `json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov             *Double `json:"СуммаВзаиморасчетов,omitempty"`
	SummaNDS                         *Double `json:"СуммаНДС,omitempty"`
	Sum                              *Double `json:"СуммаПлатежа,omitempty"`
	SummaPlatezhaPlan                *Double `json:"СуммаПлатежаПлан,omitempty"`
	SdelkaType                       *String `json:"Сделка_Type,omitempty"`
}

func (DocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezha) APIEntityType() string {
	return "Document_ИнкассовоеПоручениеПереданное_РасшифровкаПлатежа"
}
func NewDocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezha(data string, prevError error) (*DocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezha, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezha)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezha(entity DocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezha) (*DocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezha, error) {
	return NewDocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezha(c.createEntity(entity))
}
func (c *Client) DocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezha(key PrimaryDocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezha, fields []string) (*DocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezha, error) {
	return NewDocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezha(c.getEntity(key, fields))
}
func (c *Client) DocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezhas(where Where) (*[]DocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezha, error) {
	type ReturnObj struct {
		Value []DocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezha `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ИнкассовоеПоручениеПереданное_РасшифровкаПлатежа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezha(key PrimaryDocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezha, entity DocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezha) (*DocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezha, error) {
	return NewDocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezha(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezha(key PrimaryDocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezha) error {
	return c.removeEntity(key)
}

type DocumentInkassovoePorucheniePeredannoeRekvizityKontragenta struct {
	Key            Guid    `json:"Ref_Key,omitempty"`
	LineNumber     Int64   `json:"LineNumber,omitempty"`
	Znachenie      *String `json:"Значение,omitempty"`
	Predstavlenie  *String `json:"Представление,omitempty"`
	Rekvizit       *String `json:"Реквизит,omitempty"`
	TipKontragenta *String `json:"ТипКонтрагента,omitempty"`
}

func (DocumentInkassovoePorucheniePeredannoeRekvizityKontragenta) APIEntityType() string {
	return "Document_ИнкассовоеПоручениеПереданное_РеквизитыКонтрагента"
}
func NewDocumentInkassovoePorucheniePeredannoeRekvizityKontragenta(data string, prevError error) (*DocumentInkassovoePorucheniePeredannoeRekvizityKontragenta, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentInkassovoePorucheniePeredannoeRekvizityKontragenta)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentInkassovoePorucheniePeredannoeRekvizityKontragenta(entity DocumentInkassovoePorucheniePeredannoeRekvizityKontragenta) (*DocumentInkassovoePorucheniePeredannoeRekvizityKontragenta, error) {
	return NewDocumentInkassovoePorucheniePeredannoeRekvizityKontragenta(c.createEntity(entity))
}
func (c *Client) DocumentInkassovoePorucheniePeredannoeRekvizityKontragenta(key PrimaryDocumentInkassovoePorucheniePeredannoeRekvizityKontragenta, fields []string) (*DocumentInkassovoePorucheniePeredannoeRekvizityKontragenta, error) {
	return NewDocumentInkassovoePorucheniePeredannoeRekvizityKontragenta(c.getEntity(key, fields))
}
func (c *Client) DocumentInkassovoePorucheniePeredannoeRekvizityKontragentas(where Where) (*[]DocumentInkassovoePorucheniePeredannoeRekvizityKontragenta, error) {
	type ReturnObj struct {
		Value []DocumentInkassovoePorucheniePeredannoeRekvizityKontragenta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ИнкассовоеПоручениеПереданное_РеквизитыКонтрагента", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentInkassovoePorucheniePeredannoeRekvizityKontragenta(key PrimaryDocumentInkassovoePorucheniePeredannoeRekvizityKontragenta, entity DocumentInkassovoePorucheniePeredannoeRekvizityKontragenta) (*DocumentInkassovoePorucheniePeredannoeRekvizityKontragenta, error) {
	return NewDocumentInkassovoePorucheniePeredannoeRekvizityKontragenta(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentInkassovoePorucheniePeredannoeRekvizityKontragenta(key PrimaryDocumentInkassovoePorucheniePeredannoeRekvizityKontragenta) error {
	return c.removeEntity(key)
}

type CatalogFormulyDliaRascheta struct {
	Key                       Guid     `json:"Ref_Key,omitempty"`
	DataVersion               *String  `json:"DataVersion,omitempty"`
	Description               *String  `json:"Description,omitempty"`
	Code                      *String  `json:"Code,omitempty"`
	DeletionMark              *Boolean `json:"DeletionMark,omitempty"`
	FormulaRascheta           *String  `json:"ФормулаРасчета,omitempty"`
	ObieektPrimeneniiaFormuly *String  `json:"ОбъектПримененияФормулы,omitempty"`
}

func (CatalogFormulyDliaRascheta) APIEntityType() string {
	return "Catalog_ФормулыДляРасчета"
}
func NewCatalogFormulyDliaRascheta(data string, prevError error) (*CatalogFormulyDliaRascheta, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogFormulyDliaRascheta)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogFormulyDliaRascheta(entity CatalogFormulyDliaRascheta) (*CatalogFormulyDliaRascheta, error) {
	return NewCatalogFormulyDliaRascheta(c.createEntity(entity))
}
func (c *Client) CatalogFormulyDliaRascheta(key PrimaryCatalogFormulyDliaRascheta, fields []string) (*CatalogFormulyDliaRascheta, error) {
	return NewCatalogFormulyDliaRascheta(c.getEntity(key, fields))
}
func (c *Client) CatalogFormulyDliaRaschetas(where Where) (*[]CatalogFormulyDliaRascheta, error) {
	type ReturnObj struct {
		Value []CatalogFormulyDliaRascheta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ФормулыДляРасчета", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogFormulyDliaRascheta(key PrimaryCatalogFormulyDliaRascheta, entity CatalogFormulyDliaRascheta) (*CatalogFormulyDliaRascheta, error) {
	return NewCatalogFormulyDliaRascheta(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogFormulyDliaRascheta(key PrimaryCatalogFormulyDliaRascheta) error {
	return c.removeEntity(key)
}

type CatalogKupony struct {
	Key                                    Guid     `json:"Ref_Key,omitempty"`
	DataVersion                            *String  `json:"DataVersion,omitempty"`
	Description                            *String  `json:"Description,omitempty"`
	Code                                   *String  `json:"Code,omitempty"`
	ParentKey                              *Guid    `json:"Parent_Key,omitempty"`
	IsFolder                               *Boolean `json:"IsFolder,omitempty"`
	DeletionMark                           *Boolean `json:"DeletionMark,omitempty"`
	ProtsentSkidki                         *Double  `json:"ПроцентСкидки,omitempty"`
	SummaSkidki                            *Double  `json:"СуммаСкидки,omitempty"`
	Tirazh                                 *Int64   `json:"Тираж,omitempty"`
	SkidkaSummoi                           *Int16   `json:"СкидкаСуммой,omitempty"`
	IdentifikatorDliaWeb                   *String  `json:"ИдентификаторДляWeb,omitempty"`
	MaksimalnyiProtsentOtSummyPokupki      *Double  `json:"МаксимальныйПроцентОтСуммыПокупки,omitempty"`
	IspolzovanieNeskolkikhKuponovEtogoVida *Boolean `json:"ИспользованиеНесколькихКупоновЭтогоВида,omitempty"`
	IspolzovanieSDrugimiKuponami           *Boolean `json:"ИспользованиеСДругимиКупонами,omitempty"`
}

func (CatalogKupony) APIEntityType() string {
	return "Catalog_Купоны"
}
func NewCatalogKupony(data string, prevError error) (*CatalogKupony, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogKupony)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogKupony(entity CatalogKupony) (*CatalogKupony, error) {
	return NewCatalogKupony(c.createEntity(entity))
}
func (c *Client) CatalogKupony(key PrimaryCatalogKupony, fields []string) (*CatalogKupony, error) {
	return NewCatalogKupony(c.getEntity(key, fields))
}
func (c *Client) CatalogKuponys(where Where) (*[]CatalogKupony, error) {
	type ReturnObj struct {
		Value []CatalogKupony `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Купоны", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogKupony(key PrimaryCatalogKupony, entity CatalogKupony) (*CatalogKupony, error) {
	return NewCatalogKupony(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogKupony(key PrimaryCatalogKupony) error {
	return c.removeEntity(key)
}

type Correcting struct {
	Key                          Guid                                                                                   `json:"Ref_Key,omitempty"`
	DataVersion                  *String                                                                                `json:"DataVersion,omitempty"`
	Number                       *String                                                                                `json:"Number,omitempty"`
	Date                         *DateTime                                                                              `json:"Date,omitempty"`
	DeletionMark                 *Boolean                                                                               `json:"DeletionMark,omitempty"`
	Posted                       *Boolean                                                                               `json:"Posted,omitempty"`
	Comment                      *String                                                                                `json:"Комментарий,omitempty"`
	OtvetstvennyiKey             *Guid                                                                                  `json:"Ответственный_Key,omitempty"`
	TipDokumenta                 *String                                                                                `json:"ТипДокумента,omitempty"`
	TablitsaRegistrovNakopleniia *[]DocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniiaRowType `json:"ТаблицаРегистровНакопления,omitempty"`
}

func (Correcting) APIEntityType() string {
	return "Document_КорректировкаЗаписейРегистровНакопления"
}
func NewCorrecting(data string, prevError error) (*Correcting, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(Correcting)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCorrecting(entity Correcting) (*Correcting, error) {
	return NewCorrecting(c.createEntity(entity))
}
func (c *Client) Correcting(key PrimaryCorrecting, fields []string) (*Correcting, error) {
	return NewCorrecting(c.getEntity(key, fields))
}
func (c *Client) Correctings(where Where) (*[]Correcting, error) {
	type ReturnObj struct {
		Value []Correcting `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_КорректировкаЗаписейРегистровНакопления", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCorrecting(key PrimaryCorrecting, entity Correcting) (*Correcting, error) {
	return NewCorrecting(c.updateEntity(key, entity))
}
func (c *Client) DeleteCorrecting(key PrimaryCorrecting) error {
	return c.removeEntity(key)
}

type DocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniia struct {
	Key           Guid    `json:"Ref_Key,omitempty"`
	LineNumber    Int64   `json:"LineNumber,omitempty"`
	Imia          *String `json:"Имя,omitempty"`
	Predstavlenie *String `json:"Представление,omitempty"`
}

func (DocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniia) APIEntityType() string {
	return "Document_КорректировкаЗаписейРегистровНакопления_ТаблицаРегистровНакопления"
}
func NewDocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniia(data string, prevError error) (*DocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniia, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniia)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniia(entity DocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniia) (*DocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniia, error) {
	return NewDocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniia(c.createEntity(entity))
}
func (c *Client) DocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniia(key PrimaryDocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniia, fields []string) (*DocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniia, error) {
	return NewDocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniia(c.getEntity(key, fields))
}
func (c *Client) DocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniias(where Where) (*[]DocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniia, error) {
	type ReturnObj struct {
		Value []DocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_КорректировкаЗаписейРегистровНакопления_ТаблицаРегистровНакопления", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniia(key PrimaryDocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniia, entity DocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniia) (*DocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniia, error) {
	return NewDocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniia(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniia(key PrimaryDocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniia) error {
	return c.removeEntity(key)
}

type DocumentInternetZakaz struct {
	Key                             Guid                                                `json:"Ref_Key,omitempty"`
	DataVersion                     *String                                             `json:"DataVersion,omitempty"`
	Number                          *String                                             `json:"Number,omitempty"`
	Date                            *DateTime                                           `json:"Date,omitempty"`
	DeletionMark                    *Boolean                                            `json:"DeletionMark,omitempty"`
	Posted                          *Boolean                                            `json:"Posted,omitempty"`
	OrganizatsiiaKey                *Guid                                               `json:"Организация_Key,omitempty"`
	DepartmentKey                   *Guid                                               `json:"Склад_Key,omitempty"`
	AdresDostavki                   *String                                             `json:"АдресДоставки,omitempty"`
	OtvetstvennyiKey                *Guid                                               `json:"Ответственный_Key,omitempty"`
	SumOfDocument                   *Double                                             `json:"СуммаДокумента,omitempty"`
	NomerInternetDokumenta          *String                                             `json:"НомерИнтернетДокумента,omitempty"`
	DataInternetDokumenta           *DateTime                                           `json:"ДатаИнтернетДокумента,omitempty"`
	StatusInternetDokumenta         *String                                             `json:"СтатусИнтернетДокумента,omitempty"`
	UnikalnyiNomerInternetDokumenta *String                                             `json:"УникальныйНомерИнтернетДокумента,omitempty"`
	Telefon                         *String                                             `json:"Телефон,omitempty"`
	FIO                             *String                                             `json:"ФИО,omitempty"`
	KurerKey                        *Guid                                               `json:"Курьер_Key,omitempty"`
	AdresDostavkiKLADR              *String                                             `json:"АдресДоставкиКЛАДР,omitempty"`
	VremiaDostavki                  *String                                             `json:"ВремяДоставки,omitempty"`
	Samovyvoz                       *Boolean                                            `json:"Самовывоз,omitempty"`
	SposobOplaty                    *Boolean                                            `json:"СпособОплаты,omitempty"`
	Comment                         *String                                             `json:"Комментарий,omitempty"`
	Pochta                          *String                                             `json:"Почта,omitempty"`
	BDataDokumenta                  *DateTime                                           `json:"Б_ДатаДокумента,omitempty"`
	BIdentifikator                  *String                                             `json:"Б_Идентификатор,omitempty"`
	BNomerVersii                    *String                                             `json:"Б_НомерВерсии,omitempty"`
	TovaryInternetZakaza            *[]DocumentInternetZakazTovaryInternetZakazaRowType `json:"ТоварыИнтернетЗаказа,omitempty"`
	Goods                           *[]DocumentInternetZakazTovaryRowType               `json:"Товары,omitempty"`
}

func (DocumentInternetZakaz) APIEntityType() string {
	return "Document_ИнтернетЗаказ"
}
func NewDocumentInternetZakaz(data string, prevError error) (*DocumentInternetZakaz, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentInternetZakaz)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentInternetZakaz(entity DocumentInternetZakaz) (*DocumentInternetZakaz, error) {
	return NewDocumentInternetZakaz(c.createEntity(entity))
}
func (c *Client) DocumentInternetZakaz(key PrimaryDocumentInternetZakaz, fields []string) (*DocumentInternetZakaz, error) {
	return NewDocumentInternetZakaz(c.getEntity(key, fields))
}
func (c *Client) DocumentInternetZakazs(where Where) (*[]DocumentInternetZakaz, error) {
	type ReturnObj struct {
		Value []DocumentInternetZakaz `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ИнтернетЗаказ", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentInternetZakaz(key PrimaryDocumentInternetZakaz, entity DocumentInternetZakaz) (*DocumentInternetZakaz, error) {
	return NewDocumentInternetZakaz(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentInternetZakaz(key PrimaryDocumentInternetZakaz) error {
	return c.removeEntity(key)
}

type DocumentInternetZakazTovaryInternetZakaza struct {
	Key                            Guid     `json:"Ref_Key,omitempty"`
	LineNumber                     Int64    `json:"LineNumber,omitempty"`
	ItemKey                        *Guid    `json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid    `json:"Размер_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid    `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	InstanceKey                    *Guid    `json:"СерияНоменклатуры_Key,omitempty"`
	Quantity                       *Int64   `json:"Количество,omitempty"`
	Weight                         *Double  `json:"Вес,omitempty"`
	Cost                           *Double  `json:"Цена,omitempty"`
	Sum                            *Double  `json:"Сумма,omitempty"`
	StavkaNDS                      *String  `json:"СтавкаНДС,omitempty"`
	SummaNDS                       *Double  `json:"СуммаНДС,omitempty"`
	PodobranPolnostiu              *Boolean `json:"ПодобранПолностью,omitempty"`
	Otkaz                          *Boolean `json:"Отказ,omitempty"`
}

func (DocumentInternetZakazTovaryInternetZakaza) APIEntityType() string {
	return "Document_ИнтернетЗаказ_ТоварыИнтернетЗаказа"
}
func NewDocumentInternetZakazTovaryInternetZakaza(data string, prevError error) (*DocumentInternetZakazTovaryInternetZakaza, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentInternetZakazTovaryInternetZakaza)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentInternetZakazTovaryInternetZakaza(entity DocumentInternetZakazTovaryInternetZakaza) (*DocumentInternetZakazTovaryInternetZakaza, error) {
	return NewDocumentInternetZakazTovaryInternetZakaza(c.createEntity(entity))
}
func (c *Client) DocumentInternetZakazTovaryInternetZakaza(key PrimaryDocumentInternetZakazTovaryInternetZakaza, fields []string) (*DocumentInternetZakazTovaryInternetZakaza, error) {
	return NewDocumentInternetZakazTovaryInternetZakaza(c.getEntity(key, fields))
}
func (c *Client) DocumentInternetZakazTovaryInternetZakazas(where Where) (*[]DocumentInternetZakazTovaryInternetZakaza, error) {
	type ReturnObj struct {
		Value []DocumentInternetZakazTovaryInternetZakaza `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ИнтернетЗаказ_ТоварыИнтернетЗаказа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentInternetZakazTovaryInternetZakaza(key PrimaryDocumentInternetZakazTovaryInternetZakaza, entity DocumentInternetZakazTovaryInternetZakaza) (*DocumentInternetZakazTovaryInternetZakaza, error) {
	return NewDocumentInternetZakazTovaryInternetZakaza(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentInternetZakazTovaryInternetZakaza(key PrimaryDocumentInternetZakazTovaryInternetZakaza) error {
	return c.removeEntity(key)
}

type DocumentInternetZakazTovary struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	ItemKey                        *Guid   `json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid   `json:"Размер_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	InstanceKey                    *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	Quantity                       *Int64  `json:"Количество,omitempty"`
	Weight                         *Double `json:"Вес,omitempty"`
	Cost                           *Double `json:"Цена,omitempty"`
	Sum                            *Double `json:"Сумма,omitempty"`
	StavkaNDS                      *String `json:"СтавкаНДС,omitempty"`
	SummaNDS                       *Double `json:"СуммаНДС,omitempty"`
	NomerStrokiZakaza              *Int16  `json:"НомерСтрокиЗаказа,omitempty"`
	DepartmentKey                  *Guid   `json:"Склад_Key,omitempty"`
}

func (DocumentInternetZakazTovary) APIEntityType() string {
	return "Document_ИнтернетЗаказ_Товары"
}
func NewDocumentInternetZakazTovary(data string, prevError error) (*DocumentInternetZakazTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentInternetZakazTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentInternetZakazTovary(entity DocumentInternetZakazTovary) (*DocumentInternetZakazTovary, error) {
	return NewDocumentInternetZakazTovary(c.createEntity(entity))
}
func (c *Client) DocumentInternetZakazTovary(key PrimaryDocumentInternetZakazTovary, fields []string) (*DocumentInternetZakazTovary, error) {
	return NewDocumentInternetZakazTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentInternetZakazTovarys(where Where) (*[]DocumentInternetZakazTovary, error) {
	type ReturnObj struct {
		Value []DocumentInternetZakazTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ИнтернетЗаказ_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentInternetZakazTovary(key PrimaryDocumentInternetZakazTovary, entity DocumentInternetZakazTovary) (*DocumentInternetZakazTovary, error) {
	return NewDocumentInternetZakazTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentInternetZakazTovary(key PrimaryDocumentInternetZakazTovary) error {
	return c.removeEntity(key)
}

type CatalogRegiony struct {
	Key          Guid     `json:"Ref_Key,omitempty"`
	DataVersion  *String  `json:"DataVersion,omitempty"`
	Description  *String  `json:"Description,omitempty"`
	Code         *String  `json:"Code,omitempty"`
	DeletionMark *Boolean `json:"DeletionMark,omitempty"`
}

func (CatalogRegiony) APIEntityType() string {
	return "Catalog_Регионы"
}
func NewCatalogRegiony(data string, prevError error) (*CatalogRegiony, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogRegiony)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogRegiony(entity CatalogRegiony) (*CatalogRegiony, error) {
	return NewCatalogRegiony(c.createEntity(entity))
}
func (c *Client) CatalogRegiony(key PrimaryCatalogRegiony, fields []string) (*CatalogRegiony, error) {
	return NewCatalogRegiony(c.getEntity(key, fields))
}
func (c *Client) CatalogRegionys(where Where) (*[]CatalogRegiony, error) {
	type ReturnObj struct {
		Value []CatalogRegiony `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Регионы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogRegiony(key PrimaryCatalogRegiony, entity CatalogRegiony) (*CatalogRegiony, error) {
	return NewCatalogRegiony(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogRegiony(key PrimaryCatalogRegiony) error {
	return c.removeEntity(key)
}

type SaleJournal struct {
	Key                           Guid                                                                     `json:"Ref_Key,omitempty"`
	DataVersion                   *String                                                                  `json:"DataVersion,omitempty"`
	Number                        *String                                                                  `json:"Number,omitempty"`
	Date                          *DateTime                                                                `json:"Date,omitempty"`
	DeletionMark                  *Boolean                                                                 `json:"DeletionMark,omitempty"`
	Posted                        *Boolean                                                                 `json:"Posted,omitempty"`
	Weight                        *Double                                                                  `json:"ВесДокумента,omitempty"`
	DokumentOsnovanie             *String                                                                  `json:"ДокументОснование,omitempty"`
	DokumentSozdanVIuTD           *Boolean                                                                 `json:"ДокументСозданВЮТД,omitempty"`
	KassaKKMKey                   *Guid                                                                    `json:"КассаККМ_Key,omitempty"`
	KolichestvoDokumenta          *Int64                                                                   `json:"КоличествоДокумента,omitempty"`
	Comment                       *String                                                                  `json:"Комментарий,omitempty"`
	OrganizatsiiaKey              *Guid                                                                    `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey              *Guid                                                                    `json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey              *Guid                                                                    `json:"Подразделение_Key,omitempty"`
	ProektKey                     *Guid                                                                    `json:"Проект_Key,omitempty"`
	DepartmentKey                 *Guid                                                                    `json:"Склад_Key,omitempty"`
	TypeOfMovingMoneyKey          *Guid                                                                    `json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVkliuchaetNDS            *Boolean                                                                 `json:"СуммаВключаетНДС,omitempty"`
	SumOfDocument                 *Double                                                                  `json:"СуммаДокумента,omitempty"`
	TipDokumenta                  *String                                                                  `json:"ТипДокумента,omitempty"`
	UslovieProdazhKey             *Guid                                                                    `json:"УсловиеПродаж_Key,omitempty"`
	UchityvatNDS                  *Boolean                                                                 `json:"УчитыватьНДС,omitempty"`
	KhoziaistvennaiaOperatsiiaKey *Guid                                                                    `json:"ХозяйственнаяОперация_Key,omitempty"`
	Bonusy                        *[]DocumentOtchetORoznichnykhProdazhakhBonusyRowType                     `json:"Бонусы,omitempty"`
	OplataBankovskimiKreditami    *[]DocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditamiRowType `json:"ОплатаБанковскимиКредитами,omitempty"`
	OplataPlatezhnymiKartami      *[]DocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartamiRowType   `json:"ОплатаПлатежнымиКартами,omitempty"`
	OplataSertifikatami           *[]DocumentOtchetORoznichnykhProdazhakhOplataSertifikatamiRowType        `json:"ОплатаСертификатами,omitempty"`
	ProdazhaSertifikatov          *[]DocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatovRowType       `json:"ПродажаСертификатов,omitempty"`
	Goods                         *[]DocumentOtchetORoznichnykhProdazhakhTovaryRowType                     `json:"Товары,omitempty"`
	DogovoraRassrochkiProdazha    *[]DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazhaRowType `json:"ДоговораРассрочкиПродажа,omitempty"`
	DokumentyObmena               *[]DocumentOtchetORoznichnykhProdazhakhDokumentyObmenaRowType            `json:"ДокументыОбмена,omitempty"`
	DogovoraRassrochkiOplata      *[]DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplataRowType   `json:"ДоговораРассрочкиОплата,omitempty"`
	OplataBallami                 *[]DocumentOtchetORoznichnykhProdazhakhOplataBallamiRowType              `json:"ОплатаБаллами,omitempty"`
	SkidkiNatsenki                *[]DocumentOtchetORoznichnykhProdazhakhSkidkiNatsenkiRowType             `json:"СкидкиНаценки,omitempty"`
	Kupony                        *[]DocumentOtchetORoznichnykhProdazhakhKuponyRowType                     `json:"Купоны,omitempty"`
	DokumentOsnovanieType         *String                                                                  `json:"ДокументОснование_Type,omitempty"`
}

func (SaleJournal) APIEntityType() string {
	return "Document_ОтчетОРозничныхПродажах"
}
func NewSaleJournal(data string, prevError error) (*SaleJournal, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(SaleJournal)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateSaleJournal(entity SaleJournal) (*SaleJournal, error) {
	return NewSaleJournal(c.createEntity(entity))
}
func (c *Client) SaleJournal(key PrimarySaleJournal, fields []string) (*SaleJournal, error) {
	return NewSaleJournal(c.getEntity(key, fields))
}
func (c *Client) SaleJournals(where Where) (*[]SaleJournal, error) {
	type ReturnObj struct {
		Value []SaleJournal `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетОРозничныхПродажах", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateSaleJournal(key PrimarySaleJournal, entity SaleJournal) (*SaleJournal, error) {
	return NewSaleJournal(c.updateEntity(key, entity))
}
func (c *Client) DeleteSaleJournal(key PrimarySaleJournal) error {
	return c.removeEntity(key)
}

type DocumentOtchetORoznichnykhProdazhakhBonusy struct {
	Key                                 Guid     `json:"Ref_Key,omitempty"`
	LineNumber                          Int64    `json:"LineNumber,omitempty"`
	MemberCardKey                       *Guid    `json:"ДисконтнаяКарта_Key,omitempty"`
	NomerCheka                          *String  `json:"НомерЧека,omitempty"`
	SummaNachislennogoBonusa            *Double  `json:"СуммаНачисленногоБонуса,omitempty"`
	SummaNachislennogoBonusaRasschitana *Boolean `json:"СуммаНачисленногоБонусаРассчитана,omitempty"`
	SummaOplaty                         *Double  `json:"СуммаОплаты,omitempty"`
	SummaPokupki                        *Double  `json:"СуммаПокупки,omitempty"`
	OrderKey                            *Guid    `json:"КлючПродажи_Key,omitempty"`
	OpisanieKarty                       *String  `json:"ОписаниеКарты,omitempty"`
}

func (DocumentOtchetORoznichnykhProdazhakhBonusy) APIEntityType() string {
	return "Document_ОтчетОРозничныхПродажах_Бонусы"
}
func NewDocumentOtchetORoznichnykhProdazhakhBonusy(data string, prevError error) (*DocumentOtchetORoznichnykhProdazhakhBonusy, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentOtchetORoznichnykhProdazhakhBonusy)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentOtchetORoznichnykhProdazhakhBonusy(entity DocumentOtchetORoznichnykhProdazhakhBonusy) (*DocumentOtchetORoznichnykhProdazhakhBonusy, error) {
	return NewDocumentOtchetORoznichnykhProdazhakhBonusy(c.createEntity(entity))
}
func (c *Client) DocumentOtchetORoznichnykhProdazhakhBonusy(key PrimaryDocumentOtchetORoznichnykhProdazhakhBonusy, fields []string) (*DocumentOtchetORoznichnykhProdazhakhBonusy, error) {
	return NewDocumentOtchetORoznichnykhProdazhakhBonusy(c.getEntity(key, fields))
}
func (c *Client) DocumentOtchetORoznichnykhProdazhakhBonusys(where Where) (*[]DocumentOtchetORoznichnykhProdazhakhBonusy, error) {
	type ReturnObj struct {
		Value []DocumentOtchetORoznichnykhProdazhakhBonusy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетОРозничныхПродажах_Бонусы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentOtchetORoznichnykhProdazhakhBonusy(key PrimaryDocumentOtchetORoznichnykhProdazhakhBonusy, entity DocumentOtchetORoznichnykhProdazhakhBonusy) (*DocumentOtchetORoznichnykhProdazhakhBonusy, error) {
	return NewDocumentOtchetORoznichnykhProdazhakhBonusy(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentOtchetORoznichnykhProdazhakhBonusy(key PrimaryDocumentOtchetORoznichnykhProdazhakhBonusy) error {
	return c.removeEntity(key)
}

type DocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditami struct {
	Key                                     Guid    `json:"Ref_Key,omitempty"`
	LineNumber                              Int64   `json:"LineNumber,omitempty"`
	BankKreditorKey                         *Guid   `json:"БанкКредитор_Key,omitempty"`
	VidOplatyKey                            *Guid   `json:"ВидОплаты_Key,omitempty"`
	DogovorVzaimoraschetovBankaKreditoraKey *Guid   `json:"ДоговорВзаиморасчетовБанкаКредитора_Key,omitempty"`
	NomerCheka                              *String `json:"НомерЧека,omitempty"`
	ProtsentBankovskoiKomissii              *Double `json:"ПроцентБанковскойКомиссии,omitempty"`
	Sum                                     *Double `json:"Сумма,omitempty"`
	SummaBankovskoiKomissii                 *Double `json:"СуммаБанковскойКомиссии,omitempty"`
	OrderKey                                *Guid   `json:"КлючПродажи_Key,omitempty"`
}

func (DocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditami) APIEntityType() string {
	return "Document_ОтчетОРозничныхПродажах_ОплатаБанковскимиКредитами"
}
func NewDocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditami(data string, prevError error) (*DocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditami, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditami)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditami(entity DocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditami) (*DocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditami, error) {
	return NewDocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditami(c.createEntity(entity))
}
func (c *Client) DocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditami(key PrimaryDocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditami, fields []string) (*DocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditami, error) {
	return NewDocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditami(c.getEntity(key, fields))
}
func (c *Client) DocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditamis(where Where) (*[]DocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditami, error) {
	type ReturnObj struct {
		Value []DocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditami `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетОРозничныхПродажах_ОплатаБанковскимиКредитами", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditami(key PrimaryDocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditami, entity DocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditami) (*DocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditami, error) {
	return NewDocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditami(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditami(key PrimaryDocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditami) error {
	return c.removeEntity(key)
}

type DocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartami struct {
	Key                     Guid    `json:"Ref_Key,omitempty"`
	LineNumber              Int64   `json:"LineNumber,omitempty"`
	VidOplatyKey            *Guid   `json:"ВидОплаты_Key,omitempty"`
	NomerCheka              *String `json:"НомерЧека,omitempty"`
	ProtsentTorgovoiUstupki *Double `json:"ПроцентТорговойУступки,omitempty"`
	Sum                     *Double `json:"Сумма,omitempty"`
	SummaTorgovoiUstupki    *Double `json:"СуммаТорговойУступки,omitempty"`
	OrderKey                *Guid   `json:"КлючПродажи_Key,omitempty"`
}

func (DocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartami) APIEntityType() string {
	return "Document_ОтчетОРозничныхПродажах_ОплатаПлатежнымиКартами"
}
func NewDocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartami(data string, prevError error) (*DocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartami, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartami)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartami(entity DocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartami) (*DocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartami, error) {
	return NewDocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartami(c.createEntity(entity))
}
func (c *Client) DocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartami(key PrimaryDocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartami, fields []string) (*DocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartami, error) {
	return NewDocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartami(c.getEntity(key, fields))
}
func (c *Client) DocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartamis(where Where) (*[]DocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartami, error) {
	type ReturnObj struct {
		Value []DocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartami `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетОРозничныхПродажах_ОплатаПлатежнымиКартами", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartami(key PrimaryDocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartami, entity DocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartami) (*DocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartami, error) {
	return NewDocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartami(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartami(key PrimaryDocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartami) error {
	return c.removeEntity(key)
}

type DocumentOtchetORoznichnykhProdazhakhOplataSertifikatami struct {
	Key                                Guid     `json:"Ref_Key,omitempty"`
	LineNumber                         Int64    `json:"LineNumber,omitempty"`
	NomerCheka                         *String  `json:"НомерЧека,omitempty"`
	SertifikatKey                      *Guid    `json:"Сертификат_Key,omitempty"`
	SrokDeistviiaSertifikataOgranichen *Boolean `json:"СрокДействияСертификатаОграничен,omitempty"`
	SummaPokupkiPogashennaia           *Double  `json:"СуммаПокупкиПогашенная,omitempty"`
	SummaSertifikata                   *Double  `json:"СуммаСертификата,omitempty"`
	OrderKey                           *Guid    `json:"КлючПродажи_Key,omitempty"`
	NomerSertifikata                   *String  `json:"НомерСертификата,omitempty"`
}

func (DocumentOtchetORoznichnykhProdazhakhOplataSertifikatami) APIEntityType() string {
	return "Document_ОтчетОРозничныхПродажах_ОплатаСертификатами"
}
func NewDocumentOtchetORoznichnykhProdazhakhOplataSertifikatami(data string, prevError error) (*DocumentOtchetORoznichnykhProdazhakhOplataSertifikatami, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentOtchetORoznichnykhProdazhakhOplataSertifikatami)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentOtchetORoznichnykhProdazhakhOplataSertifikatami(entity DocumentOtchetORoznichnykhProdazhakhOplataSertifikatami) (*DocumentOtchetORoznichnykhProdazhakhOplataSertifikatami, error) {
	return NewDocumentOtchetORoznichnykhProdazhakhOplataSertifikatami(c.createEntity(entity))
}
func (c *Client) DocumentOtchetORoznichnykhProdazhakhOplataSertifikatami(key PrimaryDocumentOtchetORoznichnykhProdazhakhOplataSertifikatami, fields []string) (*DocumentOtchetORoznichnykhProdazhakhOplataSertifikatami, error) {
	return NewDocumentOtchetORoznichnykhProdazhakhOplataSertifikatami(c.getEntity(key, fields))
}
func (c *Client) DocumentOtchetORoznichnykhProdazhakhOplataSertifikatamis(where Where) (*[]DocumentOtchetORoznichnykhProdazhakhOplataSertifikatami, error) {
	type ReturnObj struct {
		Value []DocumentOtchetORoznichnykhProdazhakhOplataSertifikatami `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетОРозничныхПродажах_ОплатаСертификатами", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentOtchetORoznichnykhProdazhakhOplataSertifikatami(key PrimaryDocumentOtchetORoznichnykhProdazhakhOplataSertifikatami, entity DocumentOtchetORoznichnykhProdazhakhOplataSertifikatami) (*DocumentOtchetORoznichnykhProdazhakhOplataSertifikatami, error) {
	return NewDocumentOtchetORoznichnykhProdazhakhOplataSertifikatami(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentOtchetORoznichnykhProdazhakhOplataSertifikatami(key PrimaryDocumentOtchetORoznichnykhProdazhakhOplataSertifikatami) error {
	return c.removeEntity(key)
}

type DocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatov struct {
	Key              Guid    `json:"Ref_Key,omitempty"`
	LineNumber       Int64   `json:"LineNumber,omitempty"`
	NomerCheka       *String `json:"НомерЧека,omitempty"`
	SertifikatKey    *Guid   `json:"Сертификат_Key,omitempty"`
	NomerSertifikata *String `json:"НомерСертификата,omitempty"`
	Sum              *Double `json:"Сумма,omitempty"`
	OrderKey         *Guid   `json:"КлючПродажи_Key,omitempty"`
}

func (DocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatov) APIEntityType() string {
	return "Document_ОтчетОРозничныхПродажах_ПродажаСертификатов"
}
func NewDocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatov(data string, prevError error) (*DocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatov(entity DocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatov) (*DocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatov, error) {
	return NewDocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatov(c.createEntity(entity))
}
func (c *Client) DocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatov(key PrimaryDocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatov, fields []string) (*DocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatov, error) {
	return NewDocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatov(c.getEntity(key, fields))
}
func (c *Client) DocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatovs(where Where) (*[]DocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatov, error) {
	type ReturnObj struct {
		Value []DocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетОРозничныхПродажах_ПродажаСертификатов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatov(key PrimaryDocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatov, entity DocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatov) (*DocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatov, error) {
	return NewDocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatov(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatov(key PrimaryDocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatov) error {
	return c.removeEntity(key)
}

type DocumentOtchetORoznichnykhProdazhakhTovary struct {
	Key                                        Guid    `json:"Ref_Key,omitempty"`
	LineNumber                                 Int64   `json:"LineNumber,omitempty"`
	Weight                                     *Double `json:"Вес,omitempty"`
	MemberCardKey                              *Guid   `json:"ДисконтнаяКарта_Key,omitempty"`
	Kassir                                     *String `json:"Кассир,omitempty"`
	Quantity                                   *Int64  `json:"Количество,omitempty"`
	ItemKey                                    *Guid   `json:"Номенклатура_Key,omitempty"`
	NomerCheka                                 *String `json:"НомерЧека,omitempty"`
	PercentAutoDiscount                        *Double `json:"ПроцентАвтоматическойСкидки,omitempty"`
	PercentManualDiscount                      *Double `json:"ПроцентРучнойСкидки,omitempty"`
	SizeKey                                    *Guid   `json:"Размер_Key,omitempty"`
	InstanceKey                                *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	SumManualDiscount                          *Double `json:"СуммаРучнойСкидки,omitempty"`
	DepartmentKey                              *Guid   `json:"Склад_Key,omitempty"`
	StavkaNDS                                  *String `json:"СтавкаНДС,omitempty"`
	Sum                                        *Double `json:"Сумма,omitempty"`
	SummaNDS                                   *Double `json:"СуммаНДС,omitempty"`
	UslovieAvtomaticheskoiSkidki               *String `json:"УсловиеАвтоматическойСкидки,omitempty"`
	KharakteristikaNomenklaturyKey             *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                                       *Double `json:"Цена,omitempty"`
	OrderKey                                   *Guid   `json:"КлючПродажи_Key,omitempty"`
	SumAutoDiscount                            *Double `json:"СуммаАвтоматическойСкидки,omitempty"`
	KliuchSviazi                               *Int64  `json:"КлючСвязи,omitempty"`
	ZnachenieUsloviiaAvtomaticheskoiSkidki     *String `json:"ЗначениеУсловияАвтоматическойСкидки,omitempty"`
	OpisanieKarty                              *String `json:"ОписаниеКарты,omitempty"`
	SostavStrokiDliaRassrochkiKey              *Guid   `json:"СоставСтрокиДляРассрочки_Key,omitempty"`
	KassirType                                 *String `json:"Кассир_Type,omitempty"`
	ZnachenieUsloviiaAvtomaticheskoiSkidkiType *String `json:"ЗначениеУсловияАвтоматическойСкидки_Type,omitempty"`
}

func (DocumentOtchetORoznichnykhProdazhakhTovary) APIEntityType() string {
	return "Document_ОтчетОРозничныхПродажах_Товары"
}
func NewDocumentOtchetORoznichnykhProdazhakhTovary(data string, prevError error) (*DocumentOtchetORoznichnykhProdazhakhTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentOtchetORoznichnykhProdazhakhTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentOtchetORoznichnykhProdazhakhTovary(entity DocumentOtchetORoznichnykhProdazhakhTovary) (*DocumentOtchetORoznichnykhProdazhakhTovary, error) {
	return NewDocumentOtchetORoznichnykhProdazhakhTovary(c.createEntity(entity))
}
func (c *Client) DocumentOtchetORoznichnykhProdazhakhTovary(key PrimaryDocumentOtchetORoznichnykhProdazhakhTovary, fields []string) (*DocumentOtchetORoznichnykhProdazhakhTovary, error) {
	return NewDocumentOtchetORoznichnykhProdazhakhTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentOtchetORoznichnykhProdazhakhTovarys(where Where) (*[]DocumentOtchetORoznichnykhProdazhakhTovary, error) {
	type ReturnObj struct {
		Value []DocumentOtchetORoznichnykhProdazhakhTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетОРозничныхПродажах_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentOtchetORoznichnykhProdazhakhTovary(key PrimaryDocumentOtchetORoznichnykhProdazhakhTovary, entity DocumentOtchetORoznichnykhProdazhakhTovary) (*DocumentOtchetORoznichnykhProdazhakhTovary, error) {
	return NewDocumentOtchetORoznichnykhProdazhakhTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentOtchetORoznichnykhProdazhakhTovary(key PrimaryDocumentOtchetORoznichnykhProdazhakhTovary) error {
	return c.removeEntity(key)
}

type DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazha struct {
	Key                  Guid    `json:"Ref_Key,omitempty"`
	LineNumber           Int64   `json:"LineNumber,omitempty"`
	NomerCheka           *String `json:"НомерЧека,omitempty"`
	Sum                  *Double `json:"Сумма,omitempty"`
	DogovorRassrochkiKey *Guid   `json:"ДоговорРассрочки_Key,omitempty"`
	OrderKey             *Guid   `json:"КлючПродажи_Key,omitempty"`
}

func (DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazha) APIEntityType() string {
	return "Document_ОтчетОРозничныхПродажах_ДоговораРассрочкиПродажа"
}
func NewDocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazha(data string, prevError error) (*DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazha, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazha)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazha(entity DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazha) (*DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazha, error) {
	return NewDocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazha(c.createEntity(entity))
}
func (c *Client) DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazha(key PrimaryDocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazha, fields []string) (*DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazha, error) {
	return NewDocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazha(c.getEntity(key, fields))
}
func (c *Client) DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazhas(where Where) (*[]DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazha, error) {
	type ReturnObj struct {
		Value []DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazha `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетОРозничныхПродажах_ДоговораРассрочкиПродажа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazha(key PrimaryDocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazha, entity DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazha) (*DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazha, error) {
	return NewDocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazha(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazha(key PrimaryDocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazha) error {
	return c.removeEntity(key)
}

type DocumentOtchetORoznichnykhProdazhakhDokumentyObmena struct {
	Key         Guid    `json:"Ref_Key,omitempty"`
	LineNumber  Int64   `json:"LineNumber,omitempty"`
	DokumentKey *Guid   `json:"Документ_Key,omitempty"`
	Sum         *Double `json:"Сумма,omitempty"`
	NomerCheka  *String `json:"НомерЧека,omitempty"`
	OrderKey    *Guid   `json:"КлючПродажи_Key,omitempty"`
}

func (DocumentOtchetORoznichnykhProdazhakhDokumentyObmena) APIEntityType() string {
	return "Document_ОтчетОРозничныхПродажах_ДокументыОбмена"
}
func NewDocumentOtchetORoznichnykhProdazhakhDokumentyObmena(data string, prevError error) (*DocumentOtchetORoznichnykhProdazhakhDokumentyObmena, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentOtchetORoznichnykhProdazhakhDokumentyObmena)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentOtchetORoznichnykhProdazhakhDokumentyObmena(entity DocumentOtchetORoznichnykhProdazhakhDokumentyObmena) (*DocumentOtchetORoznichnykhProdazhakhDokumentyObmena, error) {
	return NewDocumentOtchetORoznichnykhProdazhakhDokumentyObmena(c.createEntity(entity))
}
func (c *Client) DocumentOtchetORoznichnykhProdazhakhDokumentyObmena(key PrimaryDocumentOtchetORoznichnykhProdazhakhDokumentyObmena, fields []string) (*DocumentOtchetORoznichnykhProdazhakhDokumentyObmena, error) {
	return NewDocumentOtchetORoznichnykhProdazhakhDokumentyObmena(c.getEntity(key, fields))
}
func (c *Client) DocumentOtchetORoznichnykhProdazhakhDokumentyObmenas(where Where) (*[]DocumentOtchetORoznichnykhProdazhakhDokumentyObmena, error) {
	type ReturnObj struct {
		Value []DocumentOtchetORoznichnykhProdazhakhDokumentyObmena `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетОРозничныхПродажах_ДокументыОбмена", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentOtchetORoznichnykhProdazhakhDokumentyObmena(key PrimaryDocumentOtchetORoznichnykhProdazhakhDokumentyObmena, entity DocumentOtchetORoznichnykhProdazhakhDokumentyObmena) (*DocumentOtchetORoznichnykhProdazhakhDokumentyObmena, error) {
	return NewDocumentOtchetORoznichnykhProdazhakhDokumentyObmena(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentOtchetORoznichnykhProdazhakhDokumentyObmena(key PrimaryDocumentOtchetORoznichnykhProdazhakhDokumentyObmena) error {
	return c.removeEntity(key)
}

type DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplata struct {
	Key                  Guid    `json:"Ref_Key,omitempty"`
	LineNumber           Int64   `json:"LineNumber,omitempty"`
	Sum                  *Double `json:"Сумма,omitempty"`
	NomerCheka           *String `json:"НомерЧека,omitempty"`
	DogovorRassrochkiKey *Guid   `json:"ДоговорРассрочки_Key,omitempty"`
	OrderKey             *Guid   `json:"КлючПродажи_Key,omitempty"`
}

func (DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplata) APIEntityType() string {
	return "Document_ОтчетОРозничныхПродажах_ДоговораРассрочкиОплата"
}
func NewDocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplata(data string, prevError error) (*DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplata, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplata)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplata(entity DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplata) (*DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplata, error) {
	return NewDocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplata(c.createEntity(entity))
}
func (c *Client) DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplata(key PrimaryDocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplata, fields []string) (*DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplata, error) {
	return NewDocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplata(c.getEntity(key, fields))
}
func (c *Client) DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplatas(where Where) (*[]DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplata, error) {
	type ReturnObj struct {
		Value []DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplata `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетОРозничныхПродажах_ДоговораРассрочкиОплата", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplata(key PrimaryDocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplata, entity DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplata) (*DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplata, error) {
	return NewDocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplata(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplata(key PrimaryDocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplata) error {
	return c.removeEntity(key)
}

type DocumentOtchetORoznichnykhProdazhakhOplataBallami struct {
	Key                    Guid    `json:"Ref_Key,omitempty"`
	LineNumber             Int64   `json:"LineNumber,omitempty"`
	Khesh                  *String `json:"Хэш,omitempty"`
	Poslednie4             *String `json:"Последние4,omitempty"`
	Sum                    *Double `json:"Сумма,omitempty"`
	Identifikator          *String `json:"Идентификатор,omitempty"`
	TransactionId          *String `json:"TransactionId,omitempty"`
	TransactionIdSpisaniia *String `json:"TransactionIdСписания,omitempty"`
	NomerCheka             *String `json:"НомерЧека,omitempty"`
	OrderKey               *Guid   `json:"КлючПродажи_Key,omitempty"`
}

func (DocumentOtchetORoznichnykhProdazhakhOplataBallami) APIEntityType() string {
	return "Document_ОтчетОРозничныхПродажах_ОплатаБаллами"
}
func NewDocumentOtchetORoznichnykhProdazhakhOplataBallami(data string, prevError error) (*DocumentOtchetORoznichnykhProdazhakhOplataBallami, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentOtchetORoznichnykhProdazhakhOplataBallami)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentOtchetORoznichnykhProdazhakhOplataBallami(entity DocumentOtchetORoznichnykhProdazhakhOplataBallami) (*DocumentOtchetORoznichnykhProdazhakhOplataBallami, error) {
	return NewDocumentOtchetORoznichnykhProdazhakhOplataBallami(c.createEntity(entity))
}
func (c *Client) DocumentOtchetORoznichnykhProdazhakhOplataBallami(key PrimaryDocumentOtchetORoznichnykhProdazhakhOplataBallami, fields []string) (*DocumentOtchetORoznichnykhProdazhakhOplataBallami, error) {
	return NewDocumentOtchetORoznichnykhProdazhakhOplataBallami(c.getEntity(key, fields))
}
func (c *Client) DocumentOtchetORoznichnykhProdazhakhOplataBallamis(where Where) (*[]DocumentOtchetORoznichnykhProdazhakhOplataBallami, error) {
	type ReturnObj struct {
		Value []DocumentOtchetORoznichnykhProdazhakhOplataBallami `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетОРозничныхПродажах_ОплатаБаллами", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentOtchetORoznichnykhProdazhakhOplataBallami(key PrimaryDocumentOtchetORoznichnykhProdazhakhOplataBallami, entity DocumentOtchetORoznichnykhProdazhakhOplataBallami) (*DocumentOtchetORoznichnykhProdazhakhOplataBallami, error) {
	return NewDocumentOtchetORoznichnykhProdazhakhOplataBallami(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentOtchetORoznichnykhProdazhakhOplataBallami(key PrimaryDocumentOtchetORoznichnykhProdazhakhOplataBallami) error {
	return c.removeEntity(key)
}

type DocumentOtchetORoznichnykhProdazhakhSkidkiNatsenki struct {
	Key               Guid    `json:"Ref_Key,omitempty"`
	LineNumber        Int64   `json:"LineNumber,omitempty"`
	KliuchSviazi      *Int64  `json:"КлючСвязи,omitempty"`
	Sum               *Double `json:"Сумма,omitempty"`
	SkidkaNatsenkaKey *Guid   `json:"СкидкаНаценка_Key,omitempty"`
	OrderKey          *Guid   `json:"КлючПродажи_Key,omitempty"`
}

func (DocumentOtchetORoznichnykhProdazhakhSkidkiNatsenki) APIEntityType() string {
	return "Document_ОтчетОРозничныхПродажах_СкидкиНаценки"
}
func NewDocumentOtchetORoznichnykhProdazhakhSkidkiNatsenki(data string, prevError error) (*DocumentOtchetORoznichnykhProdazhakhSkidkiNatsenki, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentOtchetORoznichnykhProdazhakhSkidkiNatsenki)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentOtchetORoznichnykhProdazhakhSkidkiNatsenki(entity DocumentOtchetORoznichnykhProdazhakhSkidkiNatsenki) (*DocumentOtchetORoznichnykhProdazhakhSkidkiNatsenki, error) {
	return NewDocumentOtchetORoznichnykhProdazhakhSkidkiNatsenki(c.createEntity(entity))
}
func (c *Client) DocumentOtchetORoznichnykhProdazhakhSkidkiNatsenki(key PrimaryDocumentOtchetORoznichnykhProdazhakhSkidkiNatsenki, fields []string) (*DocumentOtchetORoznichnykhProdazhakhSkidkiNatsenki, error) {
	return NewDocumentOtchetORoznichnykhProdazhakhSkidkiNatsenki(c.getEntity(key, fields))
}
func (c *Client) DocumentOtchetORoznichnykhProdazhakhSkidkiNatsenkis(where Where) (*[]DocumentOtchetORoznichnykhProdazhakhSkidkiNatsenki, error) {
	type ReturnObj struct {
		Value []DocumentOtchetORoznichnykhProdazhakhSkidkiNatsenki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетОРозничныхПродажах_СкидкиНаценки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentOtchetORoznichnykhProdazhakhSkidkiNatsenki(key PrimaryDocumentOtchetORoznichnykhProdazhakhSkidkiNatsenki, entity DocumentOtchetORoznichnykhProdazhakhSkidkiNatsenki) (*DocumentOtchetORoznichnykhProdazhakhSkidkiNatsenki, error) {
	return NewDocumentOtchetORoznichnykhProdazhakhSkidkiNatsenki(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentOtchetORoznichnykhProdazhakhSkidkiNatsenki(key PrimaryDocumentOtchetORoznichnykhProdazhakhSkidkiNatsenki) error {
	return c.removeEntity(key)
}

type DocumentOtchetORoznichnykhProdazhakhKupony struct {
	Key          Guid     `json:"Ref_Key,omitempty"`
	LineNumber   Int64    `json:"LineNumber,omitempty"`
	KliuchSviazi *Int64   `json:"КлючСвязи,omitempty"`
	KuponKey     *Guid    `json:"Купон_Key,omitempty"`
	NomerKupona  *String  `json:"НомерКупона,omitempty"`
	Spisyvat     *Boolean `json:"Списывать,omitempty"`
}

func (DocumentOtchetORoznichnykhProdazhakhKupony) APIEntityType() string {
	return "Document_ОтчетОРозничныхПродажах_Купоны"
}
func NewDocumentOtchetORoznichnykhProdazhakhKupony(data string, prevError error) (*DocumentOtchetORoznichnykhProdazhakhKupony, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentOtchetORoznichnykhProdazhakhKupony)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentOtchetORoznichnykhProdazhakhKupony(entity DocumentOtchetORoznichnykhProdazhakhKupony) (*DocumentOtchetORoznichnykhProdazhakhKupony, error) {
	return NewDocumentOtchetORoznichnykhProdazhakhKupony(c.createEntity(entity))
}
func (c *Client) DocumentOtchetORoznichnykhProdazhakhKupony(key PrimaryDocumentOtchetORoznichnykhProdazhakhKupony, fields []string) (*DocumentOtchetORoznichnykhProdazhakhKupony, error) {
	return NewDocumentOtchetORoznichnykhProdazhakhKupony(c.getEntity(key, fields))
}
func (c *Client) DocumentOtchetORoznichnykhProdazhakhKuponys(where Where) (*[]DocumentOtchetORoznichnykhProdazhakhKupony, error) {
	type ReturnObj struct {
		Value []DocumentOtchetORoznichnykhProdazhakhKupony `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетОРозничныхПродажах_Купоны", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentOtchetORoznichnykhProdazhakhKupony(key PrimaryDocumentOtchetORoznichnykhProdazhakhKupony, entity DocumentOtchetORoznichnykhProdazhakhKupony) (*DocumentOtchetORoznichnykhProdazhakhKupony, error) {
	return NewDocumentOtchetORoznichnykhProdazhakhKupony(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentOtchetORoznichnykhProdazhakhKupony(key PrimaryDocumentOtchetORoznichnykhProdazhakhKupony) error {
	return c.removeEntity(key)
}

type DocumentOtmenaSkidokNomenklatury struct {
	Key                   Guid                                                `json:"Ref_Key,omitempty"`
	DataVersion           *String                                             `json:"DataVersion,omitempty"`
	Number                *String                                             `json:"Number,omitempty"`
	Date                  *DateTime                                           `json:"Date,omitempty"`
	DeletionMark          *Boolean                                            `json:"DeletionMark,omitempty"`
	Posted                *Boolean                                            `json:"Posted,omitempty"`
	DokumentOsnovanie     *String                                             `json:"ДокументОснование,omitempty"`
	Comment               *String                                             `json:"Комментарий,omitempty"`
	OtvetstvennyiKey      *Guid                                               `json:"Ответственный_Key,omitempty"`
	Dokumenty             *[]DocumentOtmenaSkidokNomenklaturyDokumentyRowType `json:"Документы,omitempty"`
	DokumentOsnovanieType *String                                             `json:"ДокументОснование_Type,omitempty"`
}

func (DocumentOtmenaSkidokNomenklatury) APIEntityType() string {
	return "Document_ОтменаСкидокНоменклатуры"
}
func NewDocumentOtmenaSkidokNomenklatury(data string, prevError error) (*DocumentOtmenaSkidokNomenklatury, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentOtmenaSkidokNomenklatury)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentOtmenaSkidokNomenklatury(entity DocumentOtmenaSkidokNomenklatury) (*DocumentOtmenaSkidokNomenklatury, error) {
	return NewDocumentOtmenaSkidokNomenklatury(c.createEntity(entity))
}
func (c *Client) DocumentOtmenaSkidokNomenklatury(key PrimaryDocumentOtmenaSkidokNomenklatury, fields []string) (*DocumentOtmenaSkidokNomenklatury, error) {
	return NewDocumentOtmenaSkidokNomenklatury(c.getEntity(key, fields))
}
func (c *Client) DocumentOtmenaSkidokNomenklaturys(where Where) (*[]DocumentOtmenaSkidokNomenklatury, error) {
	type ReturnObj struct {
		Value []DocumentOtmenaSkidokNomenklatury `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтменаСкидокНоменклатуры", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentOtmenaSkidokNomenklatury(key PrimaryDocumentOtmenaSkidokNomenklatury, entity DocumentOtmenaSkidokNomenklatury) (*DocumentOtmenaSkidokNomenklatury, error) {
	return NewDocumentOtmenaSkidokNomenklatury(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentOtmenaSkidokNomenklatury(key PrimaryDocumentOtmenaSkidokNomenklatury) error {
	return c.removeEntity(key)
}

type DocumentOtmenaSkidokNomenklaturyDokumenty struct {
	Key                            Guid  `json:"Ref_Key,omitempty"`
	LineNumber                     Int64 `json:"LineNumber,omitempty"`
	UstanovkaSkidokNomenklaturyKey *Guid `json:"УстановкаСкидокНоменклатуры_Key,omitempty"`
}

func (DocumentOtmenaSkidokNomenklaturyDokumenty) APIEntityType() string {
	return "Document_ОтменаСкидокНоменклатуры_Документы"
}
func NewDocumentOtmenaSkidokNomenklaturyDokumenty(data string, prevError error) (*DocumentOtmenaSkidokNomenklaturyDokumenty, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentOtmenaSkidokNomenklaturyDokumenty)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentOtmenaSkidokNomenklaturyDokumenty(entity DocumentOtmenaSkidokNomenklaturyDokumenty) (*DocumentOtmenaSkidokNomenklaturyDokumenty, error) {
	return NewDocumentOtmenaSkidokNomenklaturyDokumenty(c.createEntity(entity))
}
func (c *Client) DocumentOtmenaSkidokNomenklaturyDokumenty(key PrimaryDocumentOtmenaSkidokNomenklaturyDokumenty, fields []string) (*DocumentOtmenaSkidokNomenklaturyDokumenty, error) {
	return NewDocumentOtmenaSkidokNomenklaturyDokumenty(c.getEntity(key, fields))
}
func (c *Client) DocumentOtmenaSkidokNomenklaturyDokumentys(where Where) (*[]DocumentOtmenaSkidokNomenklaturyDokumenty, error) {
	type ReturnObj struct {
		Value []DocumentOtmenaSkidokNomenklaturyDokumenty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтменаСкидокНоменклатуры_Документы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentOtmenaSkidokNomenklaturyDokumenty(key PrimaryDocumentOtmenaSkidokNomenklaturyDokumenty, entity DocumentOtmenaSkidokNomenklaturyDokumenty) (*DocumentOtmenaSkidokNomenklaturyDokumenty, error) {
	return NewDocumentOtmenaSkidokNomenklaturyDokumenty(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentOtmenaSkidokNomenklaturyDokumenty(key PrimaryDocumentOtmenaSkidokNomenklaturyDokumenty) error {
	return c.removeEntity(key)
}

type CatalogTovarnyeGruppy struct {
	Key          Guid     `json:"Ref_Key,omitempty"`
	DataVersion  *String  `json:"DataVersion,omitempty"`
	Description  *String  `json:"Description,omitempty"`
	DeletionMark *Boolean `json:"DeletionMark,omitempty"`
}

func (CatalogTovarnyeGruppy) APIEntityType() string {
	return "Catalog_ТоварныеГруппы"
}
func NewCatalogTovarnyeGruppy(data string, prevError error) (*CatalogTovarnyeGruppy, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogTovarnyeGruppy)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogTovarnyeGruppy(entity CatalogTovarnyeGruppy) (*CatalogTovarnyeGruppy, error) {
	return NewCatalogTovarnyeGruppy(c.createEntity(entity))
}
func (c *Client) CatalogTovarnyeGruppy(key PrimaryCatalogTovarnyeGruppy, fields []string) (*CatalogTovarnyeGruppy, error) {
	return NewCatalogTovarnyeGruppy(c.getEntity(key, fields))
}
func (c *Client) CatalogTovarnyeGruppys(where Where) (*[]CatalogTovarnyeGruppy, error) {
	type ReturnObj struct {
		Value []CatalogTovarnyeGruppy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ТоварныеГруппы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogTovarnyeGruppy(key PrimaryCatalogTovarnyeGruppy, entity CatalogTovarnyeGruppy) (*CatalogTovarnyeGruppy, error) {
	return NewCatalogTovarnyeGruppy(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogTovarnyeGruppy(key PrimaryCatalogTovarnyeGruppy) error {
	return c.removeEntity(key)
}

type DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstv struct {
	Key                                  Guid                                                                              `json:"Ref_Key,omitempty"`
	DataVersion                          *String                                                                           `json:"DataVersion,omitempty"`
	Number                               *String                                                                           `json:"Number,omitempty"`
	Date                                 *DateTime                                                                         `json:"Date,omitempty"`
	DeletionMark                         *Boolean                                                                          `json:"DeletionMark,omitempty"`
	Posted                               *Boolean                                                                          `json:"Posted,omitempty"`
	ValiutaDokumentaKey                  *Guid                                                                             `json:"ВалютаДокумента_Key,omitempty"`
	OperationType                        *String                                                                           `json:"ВидОперации,omitempty"`
	DataOplaty                           *DateTime                                                                         `json:"ДатаОплаты,omitempty"`
	DogovorKontragentaKey                *Guid                                                                             `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie                    *String                                                                           `json:"ДокументОснование,omitempty"`
	DokumentPlanirovaniiaPostupleniiaKey *Guid                                                                             `json:"ДокументПланированияПоступления_Key,omitempty"`
	Comment                              *String                                                                           `json:"Комментарий,omitempty"`
	KontragentKey                        *Guid                                                                             `json:"Контрагент_Key,omitempty"`
	Oplacheno                            *Boolean                                                                          `json:"Оплачено,omitempty"`
	OrganizatsiiaKey                     *Guid                                                                             `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                     *Guid                                                                             `json:"Ответственный_Key,omitempty"`
	OtrazhenoVOperUchete                 *Boolean                                                                          `json:"ОтраженоВОперУчете,omitempty"`
	RaschetnyiDokument                   *String                                                                           `json:"РасчетныйДокумент,omitempty"`
	TypeOfMovingMoneyKey                 *Guid                                                                             `json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SumOfDocument                        *Double                                                                           `json:"СуммаДокумента,omitempty"`
	SchetKontragentaKey                  *Guid                                                                             `json:"СчетКонтрагента_Key,omitempty"`
	SchetOrganizatsiiKey                 *Guid                                                                             `json:"СчетОрганизации_Key,omitempty"`
	TipDokumenta                         *String                                                                           `json:"ТипДокумента,omitempty"`
	NomerVkhodiashchegoDokumenta         *String                                                                           `json:"НомерВходящегоДокумента,omitempty"`
	DataVkhodiashchegoDokumenta          *DateTime                                                                         `json:"ДатаВходящегоДокумента,omitempty"`
	PodrazdelenieKey                     *Guid                                                                             `json:"Подразделение_Key,omitempty"`
	NaznacheniePlatezha                  *String                                                                           `json:"НазначениеПлатежа,omitempty"`
	ExtendedPayments                     *[]DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezhaRowType `json:"РасшифровкаПлатежа,omitempty"`
	RekvizityKontragenta                 *[]DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragentaRowType `json:"РеквизитыКонтрагента,omitempty"`
	DokumentOsnovanieType                *String                                                                           `json:"ДокументОснование_Type,omitempty"`
	RaschetnyiDokumentType               *String                                                                           `json:"РасчетныйДокумент_Type,omitempty"`
}

func (DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstv) APIEntityType() string {
	return "Document_ПлатежныйОрдерПоступлениеДенежныхСредств"
}
func NewDocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstv(data string, prevError error) (*DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstv, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstv)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstv(entity DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstv) (*DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstv, error) {
	return NewDocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstv(c.createEntity(entity))
}
func (c *Client) DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstv(key PrimaryDocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstv, fields []string) (*DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstv, error) {
	return NewDocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstv(c.getEntity(key, fields))
}
func (c *Client) DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvs(where Where) (*[]DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstv, error) {
	type ReturnObj struct {
		Value []DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstv `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПлатежныйОрдерПоступлениеДенежныхСредств", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstv(key PrimaryDocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstv, entity DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstv) (*DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstv, error) {
	return NewDocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstv(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstv(key PrimaryDocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstv) error {
	return c.removeEntity(key)
}

type DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezha struct {
	Key                              Guid    `json:"Ref_Key,omitempty"`
	LineNumber                       Int64   `json:"LineNumber,omitempty"`
	DogovorKontragentaKey            *Guid   `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentPlanirovaniiaPlatezhaKey *Guid   `json:"ДокументПланированияПлатежа_Key,omitempty"`
	KratnostVzaimoraschetov          *Int64  `json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov              *Double `json:"КурсВзаиморасчетов,omitempty"`
	KursVzaimoraschetovPlan          *Double `json:"КурсВзаиморасчетовПлан,omitempty"`
	ProektKey                        *Guid   `json:"Проект_Key,omitempty"`
	Sdelka                           *String `json:"Сделка,omitempty"`
	StavkaNDS                        *String `json:"СтавкаНДС,omitempty"`
	TypeOfMovingMoneyKey             *Guid   `json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov             *Double `json:"СуммаВзаиморасчетов,omitempty"`
	SummaNDS                         *Double `json:"СуммаНДС,omitempty"`
	Sum                              *Double `json:"СуммаПлатежа,omitempty"`
	SummaPlatezhaPlan                *Double `json:"СуммаПлатежаПлан,omitempty"`
	SdelkaType                       *String `json:"Сделка_Type,omitempty"`
}

func (DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezha) APIEntityType() string {
	return "Document_ПлатежныйОрдерПоступлениеДенежныхСредств_РасшифровкаПлатежа"
}
func NewDocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezha(data string, prevError error) (*DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezha, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezha)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezha(entity DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezha) (*DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezha, error) {
	return NewDocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezha(c.createEntity(entity))
}
func (c *Client) DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezha(key PrimaryDocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezha, fields []string) (*DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezha, error) {
	return NewDocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezha(c.getEntity(key, fields))
}
func (c *Client) DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezhas(where Where) (*[]DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezha, error) {
	type ReturnObj struct {
		Value []DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezha `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПлатежныйОрдерПоступлениеДенежныхСредств_РасшифровкаПлатежа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezha(key PrimaryDocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezha, entity DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezha) (*DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezha, error) {
	return NewDocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezha(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezha(key PrimaryDocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezha) error {
	return c.removeEntity(key)
}

type DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragenta struct {
	Key            Guid    `json:"Ref_Key,omitempty"`
	LineNumber     Int64   `json:"LineNumber,omitempty"`
	Znachenie      *String `json:"Значение,omitempty"`
	Predstavlenie  *String `json:"Представление,omitempty"`
	Rekvizit       *String `json:"Реквизит,omitempty"`
	TipKontragenta *String `json:"ТипКонтрагента,omitempty"`
}

func (DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragenta) APIEntityType() string {
	return "Document_ПлатежныйОрдерПоступлениеДенежныхСредств_РеквизитыКонтрагента"
}
func NewDocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragenta(data string, prevError error) (*DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragenta, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragenta)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragenta(entity DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragenta) (*DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragenta, error) {
	return NewDocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragenta(c.createEntity(entity))
}
func (c *Client) DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragenta(key PrimaryDocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragenta, fields []string) (*DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragenta, error) {
	return NewDocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragenta(c.getEntity(key, fields))
}
func (c *Client) DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragentas(where Where) (*[]DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragenta, error) {
	type ReturnObj struct {
		Value []DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragenta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПлатежныйОрдерПоступлениеДенежныхСредств_РеквизитыКонтрагента", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragenta(key PrimaryDocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragenta, entity DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragenta) (*DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragenta, error) {
	return NewDocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragenta(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragenta(key PrimaryDocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragenta) error {
	return c.removeEntity(key)
}

type CatalogOrderKey struct {
	Key                            Guid      `json:"Ref_Key,omitempty"`
	DataVersion                    *String   `json:"DataVersion,omitempty"`
	Description                    *String   `json:"Description,omitempty"`
	Code                           *Int64    `json:"Code,omitempty"`
	DeletionMark                   *Boolean  `json:"DeletionMark,omitempty"`
	UnikalnyiIdentifikatorProdazhi *Guid     `json:"УникальныйИдентификаторПродажи,omitempty"`
	TransactionIdSpisaniia         *String   `json:"TransactionIdСписания,omitempty"`
	TransactionIdNachisleniia      *String   `json:"TransactionIdНачисления,omitempty"`
	OrganizatsiiaKey               *Guid     `json:"Организация_Key,omitempty"`
	DepartmentKey                  *Guid     `json:"Склад_Key,omitempty"`
	Number                         *String   `json:"Номер,omitempty"`
	Date                           *DateTime `json:"Дата,omitempty"`
	OperationType                  *String   `json:"ВидОперации,omitempty"`
	MemberCardKey                  *Guid     `json:"ДисконтнаяКарта_Key,omitempty"`
}

func (CatalogOrderKey) APIEntityType() string {
	return "Catalog_КлючиПродаж"
}
func NewCatalogOrderKey(data string, prevError error) (*CatalogOrderKey, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogOrderKey)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogOrderKey(entity CatalogOrderKey) (*CatalogOrderKey, error) {
	return NewCatalogOrderKey(c.createEntity(entity))
}
func (c *Client) CatalogOrderKey(key PrimaryCatalogOrderKey, fields []string) (*CatalogOrderKey, error) {
	return NewCatalogOrderKey(c.getEntity(key, fields))
}
func (c *Client) CatalogOrderKeys(where Where) (*[]CatalogOrderKey, error) {
	type ReturnObj struct {
		Value []CatalogOrderKey `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_КлючиПродаж", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogOrderKey(key PrimaryCatalogOrderKey, entity CatalogOrderKey) (*CatalogOrderKey, error) {
	return NewCatalogOrderKey(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogOrderKey(key PrimaryCatalogOrderKey) error {
	return c.removeEntity(key)
}

type DocumentKassovyiChekKorrektsii struct {
	Key                            Guid                                           `json:"Ref_Key,omitempty"`
	DataVersion                    *String                                        `json:"DataVersion,omitempty"`
	Number                         *String                                        `json:"Number,omitempty"`
	Date                           *DateTime                                      `json:"Date,omitempty"`
	DeletionMark                   *Boolean                                       `json:"DeletionMark,omitempty"`
	Posted                         *Boolean                                       `json:"Posted,omitempty"`
	OrganizatsiiaKey               *Guid                                          `json:"Организация_Key,omitempty"`
	KassaKKMKey                    *Guid                                          `json:"КассаККМ_Key,omitempty"`
	SumOfDocument                  *Double                                        `json:"СуммаДокумента,omitempty"`
	StavkaNDS                      *String                                        `json:"СтавкаНДС,omitempty"`
	TipKorrektsii                  *Int16                                         `json:"ТипКоррекции,omitempty"`
	TipRascheta                    *String                                        `json:"ТипРасчета,omitempty"`
	OtvetstvennyiKey               *Guid                                          `json:"Ответственный_Key,omitempty"`
	Comment                        *String                                        `json:"Комментарий,omitempty"`
	NumberKKT                      *Int64                                         `json:"НомерЧекаККМ,omitempty"`
	Predpisanie                    *String                                        `json:"Предписание,omitempty"`
	ProbitChekNaKKT                *Boolean                                       `json:"ПробитЧекНаККТ,omitempty"`
	OsnovanieDliaKorrektsii        *String                                        `json:"ОснованиеДляКоррекции,omitempty"`
	DataDokumentaOsnovaniia        *DateTime                                      `json:"ДатаДокументаОснования,omitempty"`
	NomerDokumentaOsnovaniia       *String                                        `json:"НомерДокументаОснования,omitempty"`
	PredstavlenieOsnovaniia        *String                                        `json:"ПредставлениеОснования,omitempty"`
	SummaNDS                       *Double                                        `json:"СуммаНДС,omitempty"`
	GungNumber                     *Int16                                         `json:"НомерСменыККМ,omitempty"`
	TipSistemyNalogooblozheniiaKey *Guid                                          `json:"ТипСистемыНалогообложения_Key,omitempty"`
	Payments                       *[]DocumentKassovyiChekKorrektsiiOplataRowType `json:"Оплата,omitempty"`
	OsnovanieDliaKorrektsiiType    *String                                        `json:"ОснованиеДляКоррекции_Type,omitempty"`
}

func (DocumentKassovyiChekKorrektsii) APIEntityType() string {
	return "Document_КассовыйЧекКоррекции"
}
func NewDocumentKassovyiChekKorrektsii(data string, prevError error) (*DocumentKassovyiChekKorrektsii, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentKassovyiChekKorrektsii)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentKassovyiChekKorrektsii(entity DocumentKassovyiChekKorrektsii) (*DocumentKassovyiChekKorrektsii, error) {
	return NewDocumentKassovyiChekKorrektsii(c.createEntity(entity))
}
func (c *Client) DocumentKassovyiChekKorrektsii(key PrimaryDocumentKassovyiChekKorrektsii, fields []string) (*DocumentKassovyiChekKorrektsii, error) {
	return NewDocumentKassovyiChekKorrektsii(c.getEntity(key, fields))
}
func (c *Client) DocumentKassovyiChekKorrektsiis(where Where) (*[]DocumentKassovyiChekKorrektsii, error) {
	type ReturnObj struct {
		Value []DocumentKassovyiChekKorrektsii `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_КассовыйЧекКоррекции", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentKassovyiChekKorrektsii(key PrimaryDocumentKassovyiChekKorrektsii, entity DocumentKassovyiChekKorrektsii) (*DocumentKassovyiChekKorrektsii, error) {
	return NewDocumentKassovyiChekKorrektsii(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentKassovyiChekKorrektsii(key PrimaryDocumentKassovyiChekKorrektsii) error {
	return c.removeEntity(key)
}

type DocumentKassovyiChekKorrektsiiOplata struct {
	Key        Guid    `json:"Ref_Key,omitempty"`
	LineNumber Int64   `json:"LineNumber,omitempty"`
	TipOplaty  *String `json:"ТипОплаты,omitempty"`
	Sum        *Double `json:"Сумма,omitempty"`
}

func (DocumentKassovyiChekKorrektsiiOplata) APIEntityType() string {
	return "Document_КассовыйЧекКоррекции_Оплата"
}
func NewDocumentKassovyiChekKorrektsiiOplata(data string, prevError error) (*DocumentKassovyiChekKorrektsiiOplata, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentKassovyiChekKorrektsiiOplata)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentKassovyiChekKorrektsiiOplata(entity DocumentKassovyiChekKorrektsiiOplata) (*DocumentKassovyiChekKorrektsiiOplata, error) {
	return NewDocumentKassovyiChekKorrektsiiOplata(c.createEntity(entity))
}
func (c *Client) DocumentKassovyiChekKorrektsiiOplata(key PrimaryDocumentKassovyiChekKorrektsiiOplata, fields []string) (*DocumentKassovyiChekKorrektsiiOplata, error) {
	return NewDocumentKassovyiChekKorrektsiiOplata(c.getEntity(key, fields))
}
func (c *Client) DocumentKassovyiChekKorrektsiiOplatas(where Where) (*[]DocumentKassovyiChekKorrektsiiOplata, error) {
	type ReturnObj struct {
		Value []DocumentKassovyiChekKorrektsiiOplata `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_КассовыйЧекКоррекции_Оплата", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentKassovyiChekKorrektsiiOplata(key PrimaryDocumentKassovyiChekKorrektsiiOplata, entity DocumentKassovyiChekKorrektsiiOplata) (*DocumentKassovyiChekKorrektsiiOplata, error) {
	return NewDocumentKassovyiChekKorrektsiiOplata(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentKassovyiChekKorrektsiiOplata(key PrimaryDocumentKassovyiChekKorrektsiiOplata) error {
	return c.removeEntity(key)
}

type DocumentSchetNaOplatuPokupateliu struct {
	Key                      Guid                                             `json:"Ref_Key,omitempty"`
	DataVersion              *String                                          `json:"DataVersion,omitempty"`
	Number                   *String                                          `json:"Number,omitempty"`
	Date                     *DateTime                                        `json:"Date,omitempty"`
	DeletionMark             *Boolean                                         `json:"DeletionMark,omitempty"`
	Posted                   *Boolean                                         `json:"Posted,omitempty"`
	AdresDostavki            *String                                          `json:"АдресДоставки,omitempty"`
	ValiutaDokumentaKey      *Guid                                            `json:"ВалютаДокумента_Key,omitempty"`
	VremiaNapominaniia       *DateTime                                        `json:"ВремяНапоминания,omitempty"`
	DataOplaty               *DateTime                                        `json:"ДатаОплаты,omitempty"`
	DataOtgruzki             *DateTime                                        `json:"ДатаОтгрузки,omitempty"`
	DogovorKontragentaKey    *Guid                                            `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie        *String                                          `json:"ДокументОснование,omitempty"`
	ZakazKlientaKey          *Guid                                            `json:"ЗаказКлиента_Key,omitempty"`
	Comment                  *String                                          `json:"Комментарий,omitempty"`
	KontaktnoeLitso          *String                                          `json:"КонтактноеЛицо,omitempty"`
	Kontragent               *String                                          `json:"Контрагент,omitempty"`
	KratnostVzaimoraschetov  *Int64                                           `json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov      *Double                                          `json:"КурсВзаиморасчетов,omitempty"`
	NapomnitOSobytii         *Boolean                                         `json:"НапомнитьОСобытии,omitempty"`
	OrganizatsiiaKey         *Guid                                            `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey         *Guid                                            `json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey         *Guid                                            `json:"Подразделение_Key,omitempty"`
	DepartmentKey            *Guid                                            `json:"Склад_Key,omitempty"`
	StrukturnaiaEdinitsa     *String                                          `json:"СтруктурнаяЕдиница,omitempty"`
	SummaVkliuchaetNDS       *Boolean                                         `json:"СуммаВключаетНДС,omitempty"`
	SumOfDocument            *Double                                          `json:"СуммаДокумента,omitempty"`
	TipDokumenta             *String                                          `json:"ТипДокумента,omitempty"`
	TipTsenKey               *Guid                                            `json:"ТипЦен_Key,omitempty"`
	UchityvatNDS             *Boolean                                         `json:"УчитыватьНДС,omitempty"`
	Goods                    *[]DocumentSchetNaOplatuPokupateliuTovaryRowType `json:"Товары,omitempty"`
	Uslugi                   *[]DocumentSchetNaOplatuPokupateliuUslugiRowType `json:"Услуги,omitempty"`
	DokumentOsnovanieType    *String                                          `json:"ДокументОснование_Type,omitempty"`
	KontaktnoeLitsoType      *String                                          `json:"КонтактноеЛицо_Type,omitempty"`
	KontragentType           *String                                          `json:"Контрагент_Type,omitempty"`
	StrukturnaiaEdinitsaType *String                                          `json:"СтруктурнаяЕдиница_Type,omitempty"`
}

func (DocumentSchetNaOplatuPokupateliu) APIEntityType() string {
	return "Document_СчетНаОплатуПокупателю"
}
func NewDocumentSchetNaOplatuPokupateliu(data string, prevError error) (*DocumentSchetNaOplatuPokupateliu, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentSchetNaOplatuPokupateliu)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentSchetNaOplatuPokupateliu(entity DocumentSchetNaOplatuPokupateliu) (*DocumentSchetNaOplatuPokupateliu, error) {
	return NewDocumentSchetNaOplatuPokupateliu(c.createEntity(entity))
}
func (c *Client) DocumentSchetNaOplatuPokupateliu(key PrimaryDocumentSchetNaOplatuPokupateliu, fields []string) (*DocumentSchetNaOplatuPokupateliu, error) {
	return NewDocumentSchetNaOplatuPokupateliu(c.getEntity(key, fields))
}
func (c *Client) DocumentSchetNaOplatuPokupatelius(where Where) (*[]DocumentSchetNaOplatuPokupateliu, error) {
	type ReturnObj struct {
		Value []DocumentSchetNaOplatuPokupateliu `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СчетНаОплатуПокупателю", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentSchetNaOplatuPokupateliu(key PrimaryDocumentSchetNaOplatuPokupateliu, entity DocumentSchetNaOplatuPokupateliu) (*DocumentSchetNaOplatuPokupateliu, error) {
	return NewDocumentSchetNaOplatuPokupateliu(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentSchetNaOplatuPokupateliu(key PrimaryDocumentSchetNaOplatuPokupateliu) error {
	return c.removeEntity(key)
}

type DocumentSchetNaOplatuPokupateliuTovary struct {
	Key                                        Guid    `json:"Ref_Key,omitempty"`
	LineNumber                                 Int64   `json:"LineNumber,omitempty"`
	Weight                                     *Double `json:"Вес,omitempty"`
	ZnachenieUsloviiaAvtomaticheskoiSkidki     *String `json:"ЗначениеУсловияАвтоматическойСкидки,omitempty"`
	Quantity                                   *Int64  `json:"Количество,omitempty"`
	ItemKey                                    *Guid   `json:"Номенклатура_Key,omitempty"`
	PercentAutoDiscount                        *Double `json:"ПроцентАвтоматическойСкидки,omitempty"`
	PercentManualDiscount                      *Double `json:"ПроцентРучнойСкидки,omitempty"`
	SizeKey                                    *Guid   `json:"Размер_Key,omitempty"`
	InstanceKey                                *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	StavkaNDS                                  *String `json:"СтавкаНДС,omitempty"`
	Sum                                        *Double `json:"Сумма,omitempty"`
	SummaNDS                                   *Double `json:"СуммаНДС,omitempty"`
	UslovieAvtomaticheskoiSkidki               *String `json:"УсловиеАвтоматическойСкидки,omitempty"`
	KharakteristikaNomenklaturyKey             *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                                       *Double `json:"Цена,omitempty"`
	SumAutoDiscount                            *Double `json:"СуммаАвтоматическойСкидки,omitempty"`
	SumManualDiscount                          *Double `json:"СуммаРучнойСкидки,omitempty"`
	ZnachenieUsloviiaAvtomaticheskoiSkidkiType *String `json:"ЗначениеУсловияАвтоматическойСкидки_Type,omitempty"`
}

func (DocumentSchetNaOplatuPokupateliuTovary) APIEntityType() string {
	return "Document_СчетНаОплатуПокупателю_Товары"
}
func NewDocumentSchetNaOplatuPokupateliuTovary(data string, prevError error) (*DocumentSchetNaOplatuPokupateliuTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentSchetNaOplatuPokupateliuTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentSchetNaOplatuPokupateliuTovary(entity DocumentSchetNaOplatuPokupateliuTovary) (*DocumentSchetNaOplatuPokupateliuTovary, error) {
	return NewDocumentSchetNaOplatuPokupateliuTovary(c.createEntity(entity))
}
func (c *Client) DocumentSchetNaOplatuPokupateliuTovary(key PrimaryDocumentSchetNaOplatuPokupateliuTovary, fields []string) (*DocumentSchetNaOplatuPokupateliuTovary, error) {
	return NewDocumentSchetNaOplatuPokupateliuTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentSchetNaOplatuPokupateliuTovarys(where Where) (*[]DocumentSchetNaOplatuPokupateliuTovary, error) {
	type ReturnObj struct {
		Value []DocumentSchetNaOplatuPokupateliuTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СчетНаОплатуПокупателю_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentSchetNaOplatuPokupateliuTovary(key PrimaryDocumentSchetNaOplatuPokupateliuTovary, entity DocumentSchetNaOplatuPokupateliuTovary) (*DocumentSchetNaOplatuPokupateliuTovary, error) {
	return NewDocumentSchetNaOplatuPokupateliuTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentSchetNaOplatuPokupateliuTovary(key PrimaryDocumentSchetNaOplatuPokupateliuTovary) error {
	return c.removeEntity(key)
}

type DocumentSchetNaOplatuPokupateliuUslugi struct {
	Key                   Guid    `json:"Ref_Key,omitempty"`
	LineNumber            Int64   `json:"LineNumber,omitempty"`
	Quantity              *Int64  `json:"Количество,omitempty"`
	ItemKey               *Guid   `json:"Номенклатура_Key,omitempty"`
	PercentManualDiscount *Double `json:"ПроцентРучнойСкидки,omitempty"`
	Soderzhanie           *String `json:"Содержание,omitempty"`
	StavkaNDS             *String `json:"СтавкаНДС,omitempty"`
	Sum                   *Double `json:"Сумма,omitempty"`
	SummaNDS              *Double `json:"СуммаНДС,omitempty"`
	Cost                  *Double `json:"Цена,omitempty"`
	SumManualDiscount     *Double `json:"СуммаРучнойСкидки,omitempty"`
}

func (DocumentSchetNaOplatuPokupateliuUslugi) APIEntityType() string {
	return "Document_СчетНаОплатуПокупателю_Услуги"
}
func NewDocumentSchetNaOplatuPokupateliuUslugi(data string, prevError error) (*DocumentSchetNaOplatuPokupateliuUslugi, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentSchetNaOplatuPokupateliuUslugi)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentSchetNaOplatuPokupateliuUslugi(entity DocumentSchetNaOplatuPokupateliuUslugi) (*DocumentSchetNaOplatuPokupateliuUslugi, error) {
	return NewDocumentSchetNaOplatuPokupateliuUslugi(c.createEntity(entity))
}
func (c *Client) DocumentSchetNaOplatuPokupateliuUslugi(key PrimaryDocumentSchetNaOplatuPokupateliuUslugi, fields []string) (*DocumentSchetNaOplatuPokupateliuUslugi, error) {
	return NewDocumentSchetNaOplatuPokupateliuUslugi(c.getEntity(key, fields))
}
func (c *Client) DocumentSchetNaOplatuPokupateliuUslugis(where Where) (*[]DocumentSchetNaOplatuPokupateliuUslugi, error) {
	type ReturnObj struct {
		Value []DocumentSchetNaOplatuPokupateliuUslugi `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СчетНаОплатуПокупателю_Услуги", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentSchetNaOplatuPokupateliuUslugi(key PrimaryDocumentSchetNaOplatuPokupateliuUslugi, entity DocumentSchetNaOplatuPokupateliuUslugi) (*DocumentSchetNaOplatuPokupateliuUslugi, error) {
	return NewDocumentSchetNaOplatuPokupateliuUslugi(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentSchetNaOplatuPokupateliuUslugi(key PrimaryDocumentSchetNaOplatuPokupateliuUslugi) error {
	return c.removeEntity(key)
}

type CatalogNastroikiObmenaDannymi struct {
	Key                                                                   Guid                                                                             `json:"Ref_Key,omitempty"`
	DataVersion                                                           *String                                                                          `json:"DataVersion,omitempty"`
	Description                                                           *String                                                                          `json:"Description,omitempty"`
	Code                                                                  *String                                                                          `json:"Code,omitempty"`
	DeletionMark                                                          *Boolean                                                                         `json:"DeletionMark,omitempty"`
	FTPAdresObmena                                                        *String                                                                          `json:"FTPАдресОбмена,omitempty"`
	OnLineObmen                                                           *Boolean                                                                         `json:"OnLineОбмен,omitempty"`
	AvtomaticheskiZakachivatPochtuPriObmene                               *Boolean                                                                         `json:"АвтоматическиЗакачиватьПочтуПриОбмене,omitempty"`
	AdresDliaOtpravkiSoobshcheniiObOshibke                                *String                                                                          `json:"АдресДляОтправкиСообщенийОбОшибке,omitempty"`
	AutentifikatsiiaWindowsInformatsionnoiBazyDliaPodkliucheniia          *Boolean                                                                         `json:"АутентификацияWindowsИнформационнойБазыДляПодключения,omitempty"`
	VersiiaPlatformyInformatsionnoiBazyDliaPodkliucheniia                 *String                                                                          `json:"ВерсияПлатформыИнформационнойБазыДляПодключения,omitempty"`
	VypolnitOtlozhennoeProvedenieDokumentovPoRaspisaniiu                  *Boolean                                                                         `json:"ВыполнитьОтложенноеПроведениеДокументовПоРасписанию,omitempty"`
	VypolniatArkhivatsiiuFailovObmena                                     *Boolean                                                                         `json:"ВыполнятьАрхивациюФайловОбмена,omitempty"`
	VypolniatDeistviiaPodPolnymiPravami                                   *Boolean                                                                         `json:"ВыполнятьДействияПодПолнымиПравами,omitempty"`
	DobavlenieObieektovIzFonovogoObmena                                   *Int64                                                                           `json:"ДобавлениеОбъектовИзФоновогоОбмена,omitempty"`
	ImiaInformatsionnoiBazyNaServereDliaPodkliucheniia                    *String                                                                          `json:"ИмяИнформационнойБазыНаСервереДляПодключения,omitempty"`
	ImiaServeraInformatsionnoiBazyDliaPodkliucheniia                      *String                                                                          `json:"ИмяСервераИнформационнойБазыДляПодключения,omitempty"`
	ImiaFailaPravil                                                       *String                                                                          `json:"ИмяФайлаПравил,omitempty"`
	ImiaFailaProtokolaObmenaOnLineObmen                                   *String                                                                          `json:"ИмяФайлаПротоколаОбменаOnLineОбмен,omitempty"`
	KatalogInformatsionnoiBazyDliaPodkliucheniia                          *String                                                                          `json:"КаталогИнформационнойБазыДляПодключения,omitempty"`
	KatalogObmenaInformatsiei                                             *String                                                                          `json:"КаталогОбменаИнформацией,omitempty"`
	KolichestvoObieektovDliaFonovogoObmena                                *Int64                                                                           `json:"КоличествоОбъектовДляФоновогоОбмена,omitempty"`
	KolichestvoOshibokOtlozhennogoProvedeniiaDliaPrekrashcheniiaOperatsii *Int64                                                                           `json:"КоличествоОшибокОтложенногоПроведенияДляПрекращенияОперации,omitempty"`
	KolichestvoElementovVTranzaktsiiNaVygruzkuDannykh                     *Int64                                                                           `json:"КоличествоЭлементовВТранзакцииНаВыгрузкуДанных,omitempty"`
	KolichestvoElementovVTranzaktsiiNaZagruzkuDannykh                     *Int64                                                                           `json:"КоличествоЭлементовВТранзакцииНаЗагрузкуДанных,omitempty"`
	Comment                                                               *String                                                                          `json:"Комментарий,omitempty"`
	MaksimalnyiRazmerOtpravliaemogoPaketaCherezPochtu                     *Int64                                                                           `json:"МаксимальныйРазмерОтправляемогоПакетаЧерезПочту,omitempty"`
	MaksimalnyiRazmerOtpravliaemogoPoluchaemogoPaketaCherezFTP            *Int64                                                                           `json:"МаксимальныйРазмерОтправляемогоПолучаемогоПакетаЧерезFTP,omitempty"`
	OtpravitPravilaObmenaPriemniku                                        *Boolean                                                                         `json:"ОтправитьПравилаОбменаПриемнику,omitempty"`
	ParolFTPSoedineniia                                                   *String                                                                          `json:"ПарольFTPСоединения,omitempty"`
	ParolInformatsionnoiBazyDliaPodkliucheniia                            *String                                                                          `json:"ПарольИнформационнойБазыДляПодключения,omitempty"`
	ParolNaOtpravku                                                       *String                                                                          `json:"ПарольНаОтправку,omitempty"`
	ParolNaPriem                                                          *String                                                                          `json:"ПарольНаПрием,omitempty"`
	ParolProksiFTP                                                        *String                                                                          `json:"ПарольПроксиFTP,omitempty"`
	PassivnoeFTPSoedinenie                                                *Boolean                                                                         `json:"ПассивноеFTPСоединение,omitempty"`
	PolzovatelFTPSoedineniia                                              *String                                                                          `json:"ПользовательFTPСоединения,omitempty"`
	PolzovatelInformatsionnoiBazyDliaPodkliucheniia                       *String                                                                          `json:"ПользовательИнформационнойБазыДляПодключения,omitempty"`
	PolzovatelProksiFTP                                                   *String                                                                          `json:"ПользовательПроксиFTP,omitempty"`
	PortFTPSoedineniia                                                    *Int64                                                                           `json:"ПортFTPСоединения,omitempty"`
	PortProksiFTP                                                         *Int64                                                                           `json:"ПортПроксиFTP,omitempty"`
	PosleOshibkiOtlozhennogoProvedeniiaPrekratitOperatsii                 *Boolean                                                                         `json:"ПослеОшибкиОтложенногоПроведенияПрекратитьОперации,omitempty"`
	PochtovyiAdresPoluchatelia                                            *String                                                                          `json:"ПочтовыйАдресПолучателя,omitempty"`
	PravilaObmenaBase64Data                                               *Binary                                                                          `json:"ПравилаОбмена_Base64Data,omitempty"`
	PravilaObmenaDliaPriemnikaBase64Data                                  *Binary                                                                          `json:"ПравилаОбменаДляПриемника_Base64Data,omitempty"`
	ProizvoditOtpravkuSoobshchenii                                        *Boolean                                                                         `json:"ПроизводитьОтправкуСообщений,omitempty"`
	ProizvoditOtpravkuTolkoPriUspeshnomPrieme                             *Boolean                                                                         `json:"ПроизводитьОтправкуТолькоПриУспешномПриеме,omitempty"`
	ProizvoditPriemSoobshchenii                                           *Boolean                                                                         `json:"ПроизводитьПриемСообщений,omitempty"`
	ProtokolProksiFTP                                                     *String                                                                          `json:"ПротоколПроксиFTP,omitempty"`
	RezhimOtladkiOnLineObmena                                             *Boolean                                                                         `json:"РежимОтладкиOnLineОбмена,omitempty"`
	ServerProksiFTP                                                       *String                                                                          `json:"СерверПроксиFTP,omitempty"`
	TipInformatsionnoiBazyDliaPodkliucheniia                              *Boolean                                                                         `json:"ТипИнформационнойБазыДляПодключения,omitempty"`
	TipNastroiki                                                          *String                                                                          `json:"ТипНастройки,omitempty"`
	TipUzlaInformatsionnoiBazy                                            *String                                                                          `json:"ТипУзлаИнформационнойБазы,omitempty"`
	UdalitIstochnikPravil                                                 *String                                                                          `json:"УдалитьИсточникПравил,omitempty"`
	UdalitFailObmenaDannymi                                               *Boolean                                                                         `json:"УдалитьФайлОбменаДанными,omitempty"`
	UzelInformatsionnoiBazy                                               *String                                                                          `json:"УзелИнформационнойБазы,omitempty"`
	UzelFonovogoObmena                                                    *String                                                                          `json:"УзелФоновогоОбмена,omitempty"`
	UchetnaiaZapisOtpravkiSoobshcheniiaObOshibkeKey                       *Guid                                                                            `json:"УчетнаяЗаписьОтправкиСообщенияОбОшибке_Key,omitempty"`
	UchetnaiaZapisPriemaOtpravkiSoobshcheniiKey                           *Guid                                                                            `json:"УчетнаяЗаписьПриемаОтправкиСообщений_Key,omitempty"`
	NastroikaVariantovPoiskaObieektov                                     *[]CatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektovRowType         `json:"НастройкаВариантовПоискаОбъектов,omitempty"`
	NastroikaVygruzkiDannykh                                              *[]CatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykhRowType                  `json:"НастройкаВыгрузкиДанных,omitempty"`
	SoobshcheniiaNeIavliaiushchiesiaOshibkami                             *[]CatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkamiRowType `json:"СообщенияНеЯвляющиесяОшибками,omitempty"`
	PravilaObmenaType                                                     *String                                                                          `json:"ПравилаОбмена_Type,omitempty"`
	PravilaObmenaDliaPriemnikaType                                        *String                                                                          `json:"ПравилаОбменаДляПриемника_Type,omitempty"`
	TipUzlaInformatsionnoiBazyType                                        *String                                                                          `json:"ТипУзлаИнформационнойБазы_Type,omitempty"`
	UzelInformatsionnoiBazyType                                           *String                                                                          `json:"УзелИнформационнойБазы_Type,omitempty"`
	UzelFonovogoObmenaType                                                *String                                                                          `json:"УзелФоновогоОбмена_Type,omitempty"`
	PravilaObmena                                                         *Stream                                                                          `json:"ПравилаОбмена,omitempty"`
	PravilaObmenaDliaPriemnika                                            *Stream                                                                          `json:"ПравилаОбменаДляПриемника,omitempty"`
}

func (CatalogNastroikiObmenaDannymi) APIEntityType() string {
	return "Catalog_НастройкиОбменаДанными"
}
func NewCatalogNastroikiObmenaDannymi(data string, prevError error) (*CatalogNastroikiObmenaDannymi, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogNastroikiObmenaDannymi)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogNastroikiObmenaDannymi(entity CatalogNastroikiObmenaDannymi) (*CatalogNastroikiObmenaDannymi, error) {
	return NewCatalogNastroikiObmenaDannymi(c.createEntity(entity))
}
func (c *Client) CatalogNastroikiObmenaDannymi(key PrimaryCatalogNastroikiObmenaDannymi, fields []string) (*CatalogNastroikiObmenaDannymi, error) {
	return NewCatalogNastroikiObmenaDannymi(c.getEntity(key, fields))
}
func (c *Client) CatalogNastroikiObmenaDannymis(where Where) (*[]CatalogNastroikiObmenaDannymi, error) {
	type ReturnObj struct {
		Value []CatalogNastroikiObmenaDannymi `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкиОбменаДанными", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogNastroikiObmenaDannymi(key PrimaryCatalogNastroikiObmenaDannymi, entity CatalogNastroikiObmenaDannymi) (*CatalogNastroikiObmenaDannymi, error) {
	return NewCatalogNastroikiObmenaDannymi(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogNastroikiObmenaDannymi(key PrimaryCatalogNastroikiObmenaDannymi) error {
	return c.removeEntity(key)
}

type CatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektov struct {
	Key                               Guid     `json:"Ref_Key,omitempty"`
	LineNumber                        Int64    `json:"LineNumber,omitempty"`
	VariantPoiskaNePodderzhivaetsia   *Boolean `json:"ВариантПоискаНеПоддерживается,omitempty"`
	ImiaNastroikiDliaAlgoritma        *String  `json:"ИмяНастройкиДляАлгоритма,omitempty"`
	ImiaNastroikiDliaPolzovatelia     *String  `json:"ИмяНастройкиДляПользователя,omitempty"`
	KodPravilaObmena                  *String  `json:"КодПравилаОбмена,omitempty"`
	NaimenovaniePravilaObmena         *String  `json:"НаименованиеПравилаОбмена,omitempty"`
	NastroikaNePodderzhivaetsia       *Boolean `json:"НастройкаНеПоддерживается,omitempty"`
	OpisanieNastroikiDliaPolzovatelia *String  `json:"ОписаниеНастройкиДляПользователя,omitempty"`
	EtoNastroikaDliaVygruzki          *Boolean `json:"ЭтоНастройкаДляВыгрузки,omitempty"`
}

func (CatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektov) APIEntityType() string {
	return "Catalog_НастройкиОбменаДанными_НастройкаВариантовПоискаОбъектов"
}
func NewCatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektov(data string, prevError error) (*CatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektov(entity CatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektov) (*CatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektov, error) {
	return NewCatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektov(c.createEntity(entity))
}
func (c *Client) CatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektov(key PrimaryCatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektov, fields []string) (*CatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektov, error) {
	return NewCatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektov(c.getEntity(key, fields))
}
func (c *Client) CatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektovs(where Where) (*[]CatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektov, error) {
	type ReturnObj struct {
		Value []CatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкиОбменаДанными_НастройкаВариантовПоискаОбъектов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektov(key PrimaryCatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektov, entity CatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektov) (*CatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektov, error) {
	return NewCatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektov(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektov(key PrimaryCatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektov) error {
	return c.removeEntity(key)
}

type CatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykh struct {
	Key                         Guid     `json:"Ref_Key,omitempty"`
	LineNumber                  Int64    `json:"LineNumber,omitempty"`
	VygruzhatDannye             *Boolean `json:"ВыгружатьДанные,omitempty"`
	VygruzhatPoSsylke           *Boolean `json:"ВыгружатьПоСсылке,omitempty"`
	KodPravilaVygruzki          *String  `json:"КодПравилаВыгрузки,omitempty"`
	KodPravilaObmena            *String  `json:"КодПравилаОбмена,omitempty"`
	NaimenovaniePravilaVygruzki *String  `json:"НаименованиеПравилаВыгрузки,omitempty"`
	NastroikaNePodderzhivaetsia *Boolean `json:"НастройкаНеПоддерживается,omitempty"`
	EtoNastroikaDliaVygruzki    *Boolean `json:"ЭтоНастройкаДляВыгрузки,omitempty"`
}

func (CatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykh) APIEntityType() string {
	return "Catalog_НастройкиОбменаДанными_НастройкаВыгрузкиДанных"
}
func NewCatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykh(data string, prevError error) (*CatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykh, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykh)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykh(entity CatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykh) (*CatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykh, error) {
	return NewCatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykh(c.createEntity(entity))
}
func (c *Client) CatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykh(key PrimaryCatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykh, fields []string) (*CatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykh, error) {
	return NewCatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykh(c.getEntity(key, fields))
}
func (c *Client) CatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykhs(where Where) (*[]CatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykh, error) {
	type ReturnObj struct {
		Value []CatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykh `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкиОбменаДанными_НастройкаВыгрузкиДанных", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykh(key PrimaryCatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykh, entity CatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykh) (*CatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykh, error) {
	return NewCatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykh(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykh(key PrimaryCatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykh) error {
	return c.removeEntity(key)
}

type CatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkami struct {
	Key                Guid    `json:"Ref_Key,omitempty"`
	LineNumber         Int64   `json:"LineNumber,omitempty"`
	TekstSoobshcheniia *String `json:"ТекстСообщения,omitempty"`
}

func (CatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkami) APIEntityType() string {
	return "Catalog_НастройкиОбменаДанными_СообщенияНеЯвляющиесяОшибками"
}
func NewCatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkami(data string, prevError error) (*CatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkami, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkami)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkami(entity CatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkami) (*CatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkami, error) {
	return NewCatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkami(c.createEntity(entity))
}
func (c *Client) CatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkami(key PrimaryCatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkami, fields []string) (*CatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkami, error) {
	return NewCatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkami(c.getEntity(key, fields))
}
func (c *Client) CatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkamis(where Where) (*[]CatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkami, error) {
	type ReturnObj struct {
		Value []CatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkami `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкиОбменаДанными_СообщенияНеЯвляющиесяОшибками", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkami(key PrimaryCatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkami, entity CatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkami) (*CatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkami, error) {
	return NewCatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkami(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkami(key PrimaryCatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkami) error {
	return c.removeEntity(key)
}

type DocumentJournalBankovskieRaschetnyeDokumenty struct {
	Ref                  String    `json:"Ref,omitempty"`
	Type                 *String   `json:"Type,omitempty"`
	Date                 *DateTime `json:"Date,omitempty"`
	DeletionMark         *Boolean  `json:"DeletionMark,omitempty"`
	Number               *String   `json:"Number,omitempty"`
	Posted               *Boolean  `json:"Posted,omitempty"`
	ValiutaKey           *Guid     `json:"Валюта_Key,omitempty"`
	OperationType        *String   `json:"ВидОперации,omitempty"`
	DataOplaty           *DateTime `json:"ДатаОплаты,omitempty"`
	InformatsiiaKey      *Guid     `json:"Информация_Key,omitempty"`
	Comment              *String   `json:"Комментарий,omitempty"`
	KontragentKey        *Guid     `json:"Контрагент_Key,omitempty"`
	Oplacheno            *Boolean  `json:"Оплачено,omitempty"`
	OrganizatsiiaKey     *Guid     `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey     *Guid     `json:"Ответственный_Key,omitempty"`
	TypeOfMovingMoneyKey *Guid     `json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SumOfDocument        *Double   `json:"СуммаДокумента,omitempty"`
	SchetOrganizatsiiKey *Guid     `json:"СчетОрганизации_Key,omitempty"`
	ChastichnaiaOplata   *Boolean  `json:"ЧастичнаяОплата,omitempty"`
	RefType              String    `json:"Ref_Type,omitempty"`
	VidOperatsiiType     *String   `json:"ВидОперации_Type,omitempty"`
}

func (DocumentJournalBankovskieRaschetnyeDokumenty) APIEntityType() string {
	return "DocumentJournal_БанковскиеРасчетныеДокументы"
}
func NewDocumentJournalBankovskieRaschetnyeDokumenty(data string, prevError error) (*DocumentJournalBankovskieRaschetnyeDokumenty, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentJournalBankovskieRaschetnyeDokumenty)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentJournalBankovskieRaschetnyeDokumenty(entity DocumentJournalBankovskieRaschetnyeDokumenty) (*DocumentJournalBankovskieRaschetnyeDokumenty, error) {
	return NewDocumentJournalBankovskieRaschetnyeDokumenty(c.createEntity(entity))
}
func (c *Client) DocumentJournalBankovskieRaschetnyeDokumenty(key PrimaryDocumentJournalBankovskieRaschetnyeDokumenty, fields []string) (*DocumentJournalBankovskieRaschetnyeDokumenty, error) {
	return NewDocumentJournalBankovskieRaschetnyeDokumenty(c.getEntity(key, fields))
}
func (c *Client) DocumentJournalBankovskieRaschetnyeDokumentys(where Where) (*[]DocumentJournalBankovskieRaschetnyeDokumenty, error) {
	type ReturnObj struct {
		Value []DocumentJournalBankovskieRaschetnyeDokumenty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("DocumentJournal_БанковскиеРасчетныеДокументы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentJournalBankovskieRaschetnyeDokumenty(key PrimaryDocumentJournalBankovskieRaschetnyeDokumenty, entity DocumentJournalBankovskieRaschetnyeDokumenty) (*DocumentJournalBankovskieRaschetnyeDokumenty, error) {
	return NewDocumentJournalBankovskieRaschetnyeDokumenty(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentJournalBankovskieRaschetnyeDokumenty(key PrimaryDocumentJournalBankovskieRaschetnyeDokumenty) error {
	return c.removeEntity(key)
}

type DocumentZamenaDiskontnoiKarty struct {
	Key                        Guid      `json:"Ref_Key,omitempty"`
	DataVersion                *String   `json:"DataVersion,omitempty"`
	Number                     *String   `json:"Number,omitempty"`
	Date                       *DateTime `json:"Date,omitempty"`
	DeletionMark               *Boolean  `json:"DeletionMark,omitempty"`
	Posted                     *Boolean  `json:"Posted,omitempty"`
	OtvetstvennyiKey           *Guid     `json:"Ответственный_Key,omitempty"`
	StaraiaDiskontnaiaKartaKey *Guid     `json:"СтараяДисконтнаяКарта_Key,omitempty"`
	NovaiaDiskontnaiaKartaKey  *Guid     `json:"НоваяДисконтнаяКарта_Key,omitempty"`
	Comment                    *String   `json:"Комментарий,omitempty"`
	DokumentSozdanVIuTD        *Boolean  `json:"ДокументСозданВЮТД,omitempty"`
	NomerStaroiDiskontnoiKarty *String   `json:"НомерСтаройДисконтнойКарты,omitempty"`
	NomerNovoiDiskontnoiKarty  *String   `json:"НомерНовойДисконтнойКарты,omitempty"`
	SummaNakoplenii            *Double   `json:"СуммаНакоплений,omitempty"`
	SummaBonusov               *Double   `json:"СуммаБонусов,omitempty"`
}

func (DocumentZamenaDiskontnoiKarty) APIEntityType() string {
	return "Document_ЗаменаДисконтнойКарты"
}
func NewDocumentZamenaDiskontnoiKarty(data string, prevError error) (*DocumentZamenaDiskontnoiKarty, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentZamenaDiskontnoiKarty)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentZamenaDiskontnoiKarty(entity DocumentZamenaDiskontnoiKarty) (*DocumentZamenaDiskontnoiKarty, error) {
	return NewDocumentZamenaDiskontnoiKarty(c.createEntity(entity))
}
func (c *Client) DocumentZamenaDiskontnoiKarty(key PrimaryDocumentZamenaDiskontnoiKarty, fields []string) (*DocumentZamenaDiskontnoiKarty, error) {
	return NewDocumentZamenaDiskontnoiKarty(c.getEntity(key, fields))
}
func (c *Client) DocumentZamenaDiskontnoiKartys(where Where) (*[]DocumentZamenaDiskontnoiKarty, error) {
	type ReturnObj struct {
		Value []DocumentZamenaDiskontnoiKarty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗаменаДисконтнойКарты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentZamenaDiskontnoiKarty(key PrimaryDocumentZamenaDiskontnoiKarty, entity DocumentZamenaDiskontnoiKarty) (*DocumentZamenaDiskontnoiKarty, error) {
	return NewDocumentZamenaDiskontnoiKarty(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentZamenaDiskontnoiKarty(key PrimaryDocumentZamenaDiskontnoiKarty) error {
	return c.removeEntity(key)
}

type ReturnToSupplier struct {
	Key                                              Guid                                                `json:"Ref_Key,omitempty"`
	DataVersion                                      *String                                             `json:"DataVersion,omitempty"`
	Number                                           *String                                             `json:"Number,omitempty"`
	Date                                             *DateTime                                           `json:"Date,omitempty"`
	DeletionMark                                     *Boolean                                            `json:"DeletionMark,omitempty"`
	Posted                                           *Boolean                                            `json:"Posted,omitempty"`
	BankovskiiSchetOrganizatsiiKey                   *Guid                                               `json:"БанковскийСчетОрганизации_Key,omitempty"`
	ValiutaDokumentaKey                              *Guid                                               `json:"ВалютаДокумента_Key,omitempty"`
	Weight                                           *Double                                             `json:"ВесДокумента,omitempty"`
	GruzootpravitelKey                               *Guid                                               `json:"Грузоотправитель_Key,omitempty"`
	GruzopoluchatelKey                               *Guid                                               `json:"Грузополучатель_Key,omitempty"`
	DogovorKontragentaKey                            *Guid                                               `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie                                *String                                             `json:"ДокументОснование,omitempty"`
	DokumentSozdanVIuTD                              *Boolean                                            `json:"ДокументСозданВЮТД,omitempty"`
	KolichestvoDokumenta                             *Int64                                              `json:"КоличествоДокумента,omitempty"`
	Comment                                          *String                                             `json:"Комментарий,omitempty"`
	KontragentKey                                    *Guid                                               `json:"Контрагент_Key,omitempty"`
	KratnostVzaimoraschetov                          *Int64                                              `json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov                              *Double                                             `json:"КурсВзаиморасчетов,omitempty"`
	NDSVkliuchenVStoimost                            *Boolean                                            `json:"НДСВключенВСтоимость,omitempty"`
	OpisanieDefektov                                 *String                                             `json:"ОписаниеДефектов,omitempty"`
	OrganizatsiiaKey                                 *Guid                                               `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                                 *Guid                                               `json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey                                 *Guid                                               `json:"Подразделение_Key,omitempty"`
	Sdelka                                           *String                                             `json:"Сделка,omitempty"`
	DepartmentKey                                    *Guid                                               `json:"Склад_Key,omitempty"`
	SummaVkliuchaetNDS                               *Boolean                                            `json:"СуммаВключаетНДС,omitempty"`
	SumOfDocument                                    *Double                                             `json:"СуммаДокумента,omitempty"`
	TipDokumenta                                     *String                                             `json:"ТипДокумента,omitempty"`
	TipTsenKey                                       *Guid                                               `json:"ТипЦен_Key,omitempty"`
	UchityvatNDS                                     *Boolean                                            `json:"УчитыватьНДС,omitempty"`
	KhoziaistvennaiaOperatsiiaKey                    *Guid                                               `json:"ХозяйственнаяОперация_Key,omitempty"`
	PostavshchikuVystavliaetsiaSchetFakturaNaVozvrat *Boolean                                            `json:"ПоставщикуВыставляетсяСчетФактураНаВозврат,omitempty"`
	Goods                                            *[]DocumentVozvratTovarovPostavshchikuTovaryRowType `json:"Товары,omitempty"`
	DokumentOsnovanieType                            *String                                             `json:"ДокументОснование_Type,omitempty"`
	SdelkaType                                       *String                                             `json:"Сделка_Type,omitempty"`
}

func (ReturnToSupplier) APIEntityType() string {
	return "Document_ВозвратТоваровПоставщику"
}
func NewReturnToSupplier(data string, prevError error) (*ReturnToSupplier, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(ReturnToSupplier)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateReturnToSupplier(entity ReturnToSupplier) (*ReturnToSupplier, error) {
	return NewReturnToSupplier(c.createEntity(entity))
}
func (c *Client) ReturnToSupplier(key PrimaryReturnToSupplier, fields []string) (*ReturnToSupplier, error) {
	return NewReturnToSupplier(c.getEntity(key, fields))
}
func (c *Client) ReturnToSuppliers(where Where) (*[]ReturnToSupplier, error) {
	type ReturnObj struct {
		Value []ReturnToSupplier `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВозвратТоваровПоставщику", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateReturnToSupplier(key PrimaryReturnToSupplier, entity ReturnToSupplier) (*ReturnToSupplier, error) {
	return NewReturnToSupplier(c.updateEntity(key, entity))
}
func (c *Client) DeleteReturnToSupplier(key PrimaryReturnToSupplier) error {
	return c.removeEntity(key)
}

type DocumentVozvratTovarovPostavshchikuTovary struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	Weight                         *Double `json:"Вес,omitempty"`
	DefektKey                      *Guid   `json:"Дефект_Key,omitempty"`
	DokumentPostupleniia           *String `json:"ДокументПоступления,omitempty"`
	ZakazKlientaKey                *Guid   `json:"ЗаказКлиента_Key,omitempty"`
	KachestvoKey                   *Guid   `json:"Качество_Key,omitempty"`
	Quantity                       *Int64  `json:"Количество,omitempty"`
	ItemKey                        *Guid   `json:"Номенклатура_Key,omitempty"`
	ProektKey                      *Guid   `json:"Проект_Key,omitempty"`
	SizeKey                        *Guid   `json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	DepartmentKey                  *Guid   `json:"Склад_Key,omitempty"`
	StavkaNDS                      *String `json:"СтавкаНДС,omitempty"`
	Sum                            *Double `json:"Сумма,omitempty"`
	SummaNDS                       *Double `json:"СуммаНДС,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Double `json:"Цена,omitempty"`
	DokumentPostupleniiaType       *String `json:"ДокументПоступления_Type,omitempty"`
}

func (DocumentVozvratTovarovPostavshchikuTovary) APIEntityType() string {
	return "Document_ВозвратТоваровПоставщику_Товары"
}
func NewDocumentVozvratTovarovPostavshchikuTovary(data string, prevError error) (*DocumentVozvratTovarovPostavshchikuTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentVozvratTovarovPostavshchikuTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentVozvratTovarovPostavshchikuTovary(entity DocumentVozvratTovarovPostavshchikuTovary) (*DocumentVozvratTovarovPostavshchikuTovary, error) {
	return NewDocumentVozvratTovarovPostavshchikuTovary(c.createEntity(entity))
}
func (c *Client) DocumentVozvratTovarovPostavshchikuTovary(key PrimaryDocumentVozvratTovarovPostavshchikuTovary, fields []string) (*DocumentVozvratTovarovPostavshchikuTovary, error) {
	return NewDocumentVozvratTovarovPostavshchikuTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentVozvratTovarovPostavshchikuTovarys(where Where) (*[]DocumentVozvratTovarovPostavshchikuTovary, error) {
	type ReturnObj struct {
		Value []DocumentVozvratTovarovPostavshchikuTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВозвратТоваровПоставщику_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentVozvratTovarovPostavshchikuTovary(key PrimaryDocumentVozvratTovarovPostavshchikuTovary, entity DocumentVozvratTovarovPostavshchikuTovary) (*DocumentVozvratTovarovPostavshchikuTovary, error) {
	return NewDocumentVozvratTovarovPostavshchikuTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentVozvratTovarovPostavshchikuTovary(key PrimaryDocumentVozvratTovarovPostavshchikuTovary) error {
	return c.removeEntity(key)
}

type DocumentInventarizatsiiaTovarovNaSklade struct {
	Key                                          Guid                                                                                `json:"Ref_Key,omitempty"`
	DataVersion                                  *String                                                                             `json:"DataVersion,omitempty"`
	Number                                       *String                                                                             `json:"Number,omitempty"`
	Date                                         *DateTime                                                                           `json:"Date,omitempty"`
	DeletionMark                                 *Boolean                                                                            `json:"DeletionMark,omitempty"`
	Posted                                       *Boolean                                                                            `json:"Posted,omitempty"`
	Weight                                       *Double                                                                             `json:"ВесДокумента,omitempty"`
	VPechatnykhFormakhTTPechatatRoznichnyeSummy  *Boolean                                                                            `json:"ВПечатныхФормахТТПечататьРозничныеСуммы,omitempty"`
	DokumentSozdanVIuTD                          *Boolean                                                                            `json:"ДокументСозданВЮТД,omitempty"`
	KolichestvoDokumenta                         *Int64                                                                              `json:"КоличествоДокумента,omitempty"`
	Comment                                      *String                                                                             `json:"Комментарий,omitempty"`
	OrganizatsiiaKey                             *Guid                                                                               `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                             *Guid                                                                               `json:"Ответственный_Key,omitempty"`
	DepartmentKey                                *Guid                                                                               `json:"Склад_Key,omitempty"`
	SumOfDocument                                *Double                                                                             `json:"СуммаДокумента,omitempty"`
	UsloviiaProvedeniiaInventarizatsiiBase64Data *Binary                                                                             `json:"УсловияПроведенияИнвентаризаций_Base64Data,omitempty"`
	KhoziaistvennaiaOperatsiiaKey                *Guid                                                                               `json:"ХозяйственнаяОперация_Key,omitempty"`
	PostroitelOtchetaBase64Data                  *Binary                                                                             `json:"ПостроительОтчета_Base64Data,omitempty"`
	NastroikiZapolneniiaBase64Data               *Binary                                                                             `json:"НастройкиЗаполнения_Base64Data,omitempty"`
	Goods                                        *[]DocumentInventarizatsiiaTovarovNaSkladeTovaryRowType                             `json:"Товары,omitempty"`
	UsloviiaProvedeniiaInventarizatsii           *[]DocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsiiRowType `json:"УсловияПроведенияИнвентаризации,omitempty"`
	Sertifikaty                                  *[]DocumentInventarizatsiiaTovarovNaSkladeSertifikatyRowType                        `json:"Сертификаты,omitempty"`
	TovaryVPuti                                  *[]DocumentInventarizatsiiaTovarovNaSkladeTovaryVPutiRowType                        `json:"ТоварыВПути,omitempty"`
	UsloviiaProvedeniiaInventarizatsiiType       *String                                                                             `json:"УсловияПроведенияИнвентаризаций_Type,omitempty"`
	PostroitelOtchetaType                        *String                                                                             `json:"ПостроительОтчета_Type,omitempty"`
	NastroikiZapolneniiaType                     *String                                                                             `json:"НастройкиЗаполнения_Type,omitempty"`
	InventoryTerms                               *Stream                                                                             `json:"УсловияПроведенияИнвентаризаций,omitempty"`
	PostroitelOtcheta                            *Stream                                                                             `json:"ПостроительОтчета,omitempty"`
	NastroikiZapolneniia                         *Stream                                                                             `json:"НастройкиЗаполнения,omitempty"`
}

func (DocumentInventarizatsiiaTovarovNaSklade) APIEntityType() string {
	return "Document_ИнвентаризацияТоваровНаСкладе"
}
func NewDocumentInventarizatsiiaTovarovNaSklade(data string, prevError error) (*DocumentInventarizatsiiaTovarovNaSklade, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentInventarizatsiiaTovarovNaSklade)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentInventarizatsiiaTovarovNaSklade(entity DocumentInventarizatsiiaTovarovNaSklade) (*DocumentInventarizatsiiaTovarovNaSklade, error) {
	return NewDocumentInventarizatsiiaTovarovNaSklade(c.createEntity(entity))
}
func (c *Client) DocumentInventarizatsiiaTovarovNaSklade(key PrimaryDocumentInventarizatsiiaTovarovNaSklade, fields []string) (*DocumentInventarizatsiiaTovarovNaSklade, error) {
	return NewDocumentInventarizatsiiaTovarovNaSklade(c.getEntity(key, fields))
}
func (c *Client) DocumentInventarizatsiiaTovarovNaSklades(where Where) (*[]DocumentInventarizatsiiaTovarovNaSklade, error) {
	type ReturnObj struct {
		Value []DocumentInventarizatsiiaTovarovNaSklade `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ИнвентаризацияТоваровНаСкладе", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentInventarizatsiiaTovarovNaSklade(key PrimaryDocumentInventarizatsiiaTovarovNaSklade, entity DocumentInventarizatsiiaTovarovNaSklade) (*DocumentInventarizatsiiaTovarovNaSklade, error) {
	return NewDocumentInventarizatsiiaTovarovNaSklade(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentInventarizatsiiaTovarovNaSklade(key PrimaryDocumentInventarizatsiiaTovarovNaSklade) error {
	return c.removeEntity(key)
}

type DocumentInventarizatsiiaTovarovNaSkladeTovary struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	Weight                         *Double `json:"Вес,omitempty"`
	VesUchet                       *Double `json:"ВесУчет,omitempty"`
	KachestvoKey                   *Guid   `json:"Качество_Key,omitempty"`
	Quantity                       *Int64  `json:"Количество,omitempty"`
	KolichestvoUchet               *Int64  `json:"КоличествоУчет,omitempty"`
	ItemKey                        *Guid   `json:"Номенклатура_Key,omitempty"`
	NomerVed                       *String `json:"НомерВед,omitempty"`
	SizeKey                        *Guid   `json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	Sum                            *Double `json:"Сумма,omitempty"`
	SummaRegl                      *Double `json:"СуммаРегл,omitempty"`
	SummaUchet                     *Double `json:"СуммаУчет,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Double `json:"Цена,omitempty"`
	RetailCost                     *Double `json:"ЦенаВРознице,omitempty"`
	OtkloneniePoKolichestvu        *Int64  `json:"ОтклонениеПоКоличеству,omitempty"`
	OtkloneniePoVesu               *Double `json:"ОтклонениеПоВесу,omitempty"`
}

func (DocumentInventarizatsiiaTovarovNaSkladeTovary) APIEntityType() string {
	return "Document_ИнвентаризацияТоваровНаСкладе_Товары"
}
func NewDocumentInventarizatsiiaTovarovNaSkladeTovary(data string, prevError error) (*DocumentInventarizatsiiaTovarovNaSkladeTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentInventarizatsiiaTovarovNaSkladeTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentInventarizatsiiaTovarovNaSkladeTovary(entity DocumentInventarizatsiiaTovarovNaSkladeTovary) (*DocumentInventarizatsiiaTovarovNaSkladeTovary, error) {
	return NewDocumentInventarizatsiiaTovarovNaSkladeTovary(c.createEntity(entity))
}
func (c *Client) DocumentInventarizatsiiaTovarovNaSkladeTovary(key PrimaryDocumentInventarizatsiiaTovarovNaSkladeTovary, fields []string) (*DocumentInventarizatsiiaTovarovNaSkladeTovary, error) {
	return NewDocumentInventarizatsiiaTovarovNaSkladeTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentInventarizatsiiaTovarovNaSkladeTovarys(where Where) (*[]DocumentInventarizatsiiaTovarovNaSkladeTovary, error) {
	type ReturnObj struct {
		Value []DocumentInventarizatsiiaTovarovNaSkladeTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ИнвентаризацияТоваровНаСкладе_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentInventarizatsiiaTovarovNaSkladeTovary(key PrimaryDocumentInventarizatsiiaTovarovNaSkladeTovary, entity DocumentInventarizatsiiaTovarovNaSkladeTovary) (*DocumentInventarizatsiiaTovarovNaSkladeTovary, error) {
	return NewDocumentInventarizatsiiaTovarovNaSkladeTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentInventarizatsiiaTovarovNaSkladeTovary(key PrimaryDocumentInventarizatsiiaTovarovNaSkladeTovary) error {
	return c.removeEntity(key)
}

type DocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii struct {
	Key           Guid    `json:"Ref_Key,omitempty"`
	LineNumber    Int64   `json:"LineNumber,omitempty"`
	VidSravneniia *String `json:"ВидСравнения,omitempty"`
	Znachenie     *String `json:"Значение,omitempty"`
	ImiaPolia     *String `json:"ИмяПоля,omitempty"`
	ZnachenieType *String `json:"Значение_Type,omitempty"`
}

func (DocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii) APIEntityType() string {
	return "Document_ИнвентаризацияТоваровНаСкладе_УсловияПроведенияИнвентаризации"
}
func NewDocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii(data string, prevError error) (*DocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii(entity DocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii) (*DocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii, error) {
	return NewDocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii(c.createEntity(entity))
}
func (c *Client) DocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii(key PrimaryDocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii, fields []string) (*DocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii, error) {
	return NewDocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii(c.getEntity(key, fields))
}
func (c *Client) DocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsiis(where Where) (*[]DocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii, error) {
	type ReturnObj struct {
		Value []DocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ИнвентаризацияТоваровНаСкладе_УсловияПроведенияИнвентаризации", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii(key PrimaryDocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii, entity DocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii) (*DocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii, error) {
	return NewDocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii(key PrimaryDocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii) error {
	return c.removeEntity(key)
}

type DocumentInventarizatsiiaTovarovNaSkladeSertifikaty struct {
	Key                     Guid    `json:"Ref_Key,omitempty"`
	LineNumber              Int64   `json:"LineNumber,omitempty"`
	SertifikatKey           *Guid   `json:"Сертификат_Key,omitempty"`
	Sum                     *Double `json:"Сумма,omitempty"`
	SummaUchet              *Double `json:"СуммаУчет,omitempty"`
	Quantity                *Double `json:"Количество,omitempty"`
	KolichestvoUchet        *Double `json:"КоличествоУчет,omitempty"`
	OtkloneniePoKolichestvu *Int64  `json:"ОтклонениеПоКоличеству,omitempty"`
}

func (DocumentInventarizatsiiaTovarovNaSkladeSertifikaty) APIEntityType() string {
	return "Document_ИнвентаризацияТоваровНаСкладе_Сертификаты"
}
func NewDocumentInventarizatsiiaTovarovNaSkladeSertifikaty(data string, prevError error) (*DocumentInventarizatsiiaTovarovNaSkladeSertifikaty, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentInventarizatsiiaTovarovNaSkladeSertifikaty)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentInventarizatsiiaTovarovNaSkladeSertifikaty(entity DocumentInventarizatsiiaTovarovNaSkladeSertifikaty) (*DocumentInventarizatsiiaTovarovNaSkladeSertifikaty, error) {
	return NewDocumentInventarizatsiiaTovarovNaSkladeSertifikaty(c.createEntity(entity))
}
func (c *Client) DocumentInventarizatsiiaTovarovNaSkladeSertifikaty(key PrimaryDocumentInventarizatsiiaTovarovNaSkladeSertifikaty, fields []string) (*DocumentInventarizatsiiaTovarovNaSkladeSertifikaty, error) {
	return NewDocumentInventarizatsiiaTovarovNaSkladeSertifikaty(c.getEntity(key, fields))
}
func (c *Client) DocumentInventarizatsiiaTovarovNaSkladeSertifikatys(where Where) (*[]DocumentInventarizatsiiaTovarovNaSkladeSertifikaty, error) {
	type ReturnObj struct {
		Value []DocumentInventarizatsiiaTovarovNaSkladeSertifikaty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ИнвентаризацияТоваровНаСкладе_Сертификаты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentInventarizatsiiaTovarovNaSkladeSertifikaty(key PrimaryDocumentInventarizatsiiaTovarovNaSkladeSertifikaty, entity DocumentInventarizatsiiaTovarovNaSkladeSertifikaty) (*DocumentInventarizatsiiaTovarovNaSkladeSertifikaty, error) {
	return NewDocumentInventarizatsiiaTovarovNaSkladeSertifikaty(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentInventarizatsiiaTovarovNaSkladeSertifikaty(key PrimaryDocumentInventarizatsiiaTovarovNaSkladeSertifikaty) error {
	return c.removeEntity(key)
}

type DocumentInventarizatsiiaTovarovNaSkladeTovaryVPuti struct {
	Key                            Guid      `json:"Ref_Key,omitempty"`
	LineNumber                     Int64     `json:"LineNumber,omitempty"`
	ItemKey                        *Guid     `json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid     `json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid     `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid     `json:"Размер_Key,omitempty"`
	Weight                         *Double   `json:"Вес,omitempty"`
	Quantity                       *Double   `json:"Количество,omitempty"`
	DogovorKontragentaKey          *Guid     `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOprikhodovaniia        *String   `json:"ДокументОприходования,omitempty"`
	KontragentKey                  *Guid     `json:"Контрагент_Key,omitempty"`
	DataOtpravki                   *DateTime `json:"ДатаОтправки,omitempty"`
	DokumentOprikhodovaniiaType    *String   `json:"ДокументОприходования_Type,omitempty"`
}

func (DocumentInventarizatsiiaTovarovNaSkladeTovaryVPuti) APIEntityType() string {
	return "Document_ИнвентаризацияТоваровНаСкладе_ТоварыВПути"
}
func NewDocumentInventarizatsiiaTovarovNaSkladeTovaryVPuti(data string, prevError error) (*DocumentInventarizatsiiaTovarovNaSkladeTovaryVPuti, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentInventarizatsiiaTovarovNaSkladeTovaryVPuti)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentInventarizatsiiaTovarovNaSkladeTovaryVPuti(entity DocumentInventarizatsiiaTovarovNaSkladeTovaryVPuti) (*DocumentInventarizatsiiaTovarovNaSkladeTovaryVPuti, error) {
	return NewDocumentInventarizatsiiaTovarovNaSkladeTovaryVPuti(c.createEntity(entity))
}
func (c *Client) DocumentInventarizatsiiaTovarovNaSkladeTovaryVPuti(key PrimaryDocumentInventarizatsiiaTovarovNaSkladeTovaryVPuti, fields []string) (*DocumentInventarizatsiiaTovarovNaSkladeTovaryVPuti, error) {
	return NewDocumentInventarizatsiiaTovarovNaSkladeTovaryVPuti(c.getEntity(key, fields))
}
func (c *Client) DocumentInventarizatsiiaTovarovNaSkladeTovaryVPutis(where Where) (*[]DocumentInventarizatsiiaTovarovNaSkladeTovaryVPuti, error) {
	type ReturnObj struct {
		Value []DocumentInventarizatsiiaTovarovNaSkladeTovaryVPuti `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ИнвентаризацияТоваровНаСкладе_ТоварыВПути", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentInventarizatsiiaTovarovNaSkladeTovaryVPuti(key PrimaryDocumentInventarizatsiiaTovarovNaSkladeTovaryVPuti, entity DocumentInventarizatsiiaTovarovNaSkladeTovaryVPuti) (*DocumentInventarizatsiiaTovarovNaSkladeTovaryVPuti, error) {
	return NewDocumentInventarizatsiiaTovarovNaSkladeTovaryVPuti(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentInventarizatsiiaTovarovNaSkladeTovaryVPuti(key PrimaryDocumentInventarizatsiiaTovarovNaSkladeTovaryVPuti) error {
	return c.removeEntity(key)
}

type DocumentPrikhodnyiKassovyiOrder struct {
	Key                                    Guid                                                          `json:"Ref_Key,omitempty"`
	DataVersion                            *String                                                       `json:"DataVersion,omitempty"`
	Number                                 *String                                                       `json:"Number,omitempty"`
	Date                                   *DateTime                                                     `json:"Date,omitempty"`
	DeletionMark                           *Boolean                                                      `json:"DeletionMark,omitempty"`
	Posted                                 *Boolean                                                      `json:"Posted,omitempty"`
	ValiutaVzaimoraschetovPodotchetnikaKey *Guid                                                         `json:"ВалютаВзаиморасчетовПодотчетника_Key,omitempty"`
	ValiutaDokumentaKey                    *Guid                                                         `json:"ВалютаДокумента_Key,omitempty"`
	OperationType                          *String                                                       `json:"ВидОперации,omitempty"`
	VidPriemaRoznichnoiVyruchki            *String                                                       `json:"ВидПриемаРозничнойВыручки,omitempty"`
	DenezhnyiChekKey                       *Guid                                                         `json:"ДенежныйЧек_Key,omitempty"`
	DogovorKontragentaKey                  *Guid                                                         `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie                      *String                                                       `json:"ДокументОснование,omitempty"`
	DokumentPlanirovaniiaPostupleniiaKey   *Guid                                                         `json:"ДокументПланированияПоступления_Key,omitempty"`
	DokumentSozdanVIuTD                    *Boolean                                                      `json:"ДокументСозданВЮТД,omitempty"`
	KassaKey                               *Guid                                                         `json:"Касса_Key,omitempty"`
	Comment                                *String                                                       `json:"Комментарий,omitempty"`
	Kontragent                             *String                                                       `json:"Контрагент,omitempty"`
	NumberKKT                              *Int16                                                        `json:"НомерЧекаККМ,omitempty"`
	Oplacheno                              *Boolean                                                      `json:"Оплачено,omitempty"`
	OrganizatsiiaKey                       *Guid                                                         `json:"Организация_Key,omitempty"`
	Osnovanie                              *String                                                       `json:"Основание,omitempty"`
	OtvetstvennyiKey                       *Guid                                                         `json:"Ответственный_Key,omitempty"`
	OtrazhenoVOperUchete                   *Boolean                                                      `json:"ОтраженоВОперУчете,omitempty"`
	PodrazdelenieKey                       *Guid                                                         `json:"Подразделение_Key,omitempty"`
	Prilozhenie                            *String                                                       `json:"Приложение,omitempty"`
	PriniatoOt                             *String                                                       `json:"ПринятоОт,omitempty"`
	RaschetnyiDokumentKey                  *Guid                                                         `json:"РасчетныйДокумент_Key,omitempty"`
	StavkaNDS                              *String                                                       `json:"СтавкаНДС,omitempty"`
	TypeOfMovingMoneyKey                   *Guid                                                         `json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SumOfDocument                          *Double                                                       `json:"СуммаДокумента,omitempty"`
	SchetOrganizatsiiKey                   *Guid                                                         `json:"СчетОрганизации_Key,omitempty"`
	TipDokumenta                           *String                                                       `json:"ТипДокумента,omitempty"`
	KursDokumenta                          *Double                                                       `json:"КурсДокумента,omitempty"`
	KratnostDokumenta                      *Int64                                                        `json:"КратностьДокумента,omitempty"`
	Pochta                                 *String                                                       `json:"Почта,omitempty"`
	Telefon                                *String                                                       `json:"Телефон,omitempty"`
	ProbitChekNaKKT                        *Boolean                                                      `json:"ПробитЧекНаККТ,omitempty"`
	KassaKKMKey                            *Guid                                                         `json:"КассаККМ_Key,omitempty"`
	GungNumber                             *Int16                                                        `json:"НомерСменыККМ,omitempty"`
	NastroikaRMKKey                        *Guid                                                         `json:"НастройкаРМК_Key,omitempty"`
	BDataDokumenta                         *DateTime                                                     `json:"Б_ДатаДокумента,omitempty"`
	BIdentifikator                         *String                                                       `json:"Б_Идентификатор,omitempty"`
	BNomerVersii                           *String                                                       `json:"Б_НомерВерсии,omitempty"`
	ExtendedPayments                       *[]DocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezhaRowType `json:"РасшифровкаПлатежа,omitempty"`
	Payments                               *[]DocumentPrikhodnyiKassovyiOrderOplataRowType               `json:"Оплата,omitempty"`
	Goods                                  *[]DocumentPrikhodnyiKassovyiOrderTovaryRowType               `json:"Товары,omitempty"`
	DokumentOsnovanieType                  *String                                                       `json:"ДокументОснование_Type,omitempty"`
	KontragentType                         *String                                                       `json:"Контрагент_Type,omitempty"`
}

func (DocumentPrikhodnyiKassovyiOrder) APIEntityType() string {
	return "Document_ПриходныйКассовыйОрдер"
}
func NewDocumentPrikhodnyiKassovyiOrder(data string, prevError error) (*DocumentPrikhodnyiKassovyiOrder, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPrikhodnyiKassovyiOrder)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPrikhodnyiKassovyiOrder(entity DocumentPrikhodnyiKassovyiOrder) (*DocumentPrikhodnyiKassovyiOrder, error) {
	return NewDocumentPrikhodnyiKassovyiOrder(c.createEntity(entity))
}
func (c *Client) DocumentPrikhodnyiKassovyiOrder(key PrimaryDocumentPrikhodnyiKassovyiOrder, fields []string) (*DocumentPrikhodnyiKassovyiOrder, error) {
	return NewDocumentPrikhodnyiKassovyiOrder(c.getEntity(key, fields))
}
func (c *Client) DocumentPrikhodnyiKassovyiOrders(where Where) (*[]DocumentPrikhodnyiKassovyiOrder, error) {
	type ReturnObj struct {
		Value []DocumentPrikhodnyiKassovyiOrder `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПриходныйКассовыйОрдер", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPrikhodnyiKassovyiOrder(key PrimaryDocumentPrikhodnyiKassovyiOrder, entity DocumentPrikhodnyiKassovyiOrder) (*DocumentPrikhodnyiKassovyiOrder, error) {
	return NewDocumentPrikhodnyiKassovyiOrder(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPrikhodnyiKassovyiOrder(key PrimaryDocumentPrikhodnyiKassovyiOrder) error {
	return c.removeEntity(key)
}

type DocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezha struct {
	Key                              Guid    `json:"Ref_Key,omitempty"`
	LineNumber                       Int64   `json:"LineNumber,omitempty"`
	DogovorKontragentaKey            *Guid   `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentPlanirovaniiaPlatezhaKey *Guid   `json:"ДокументПланированияПлатежа_Key,omitempty"`
	KratnostVzaimoraschetov          *Int64  `json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov              *Double `json:"КурсВзаиморасчетов,omitempty"`
	KursVzaimoraschetovPlan          *Double `json:"КурсВзаиморасчетовПлан,omitempty"`
	ProektKey                        *Guid   `json:"Проект_Key,omitempty"`
	Sdelka                           *String `json:"Сделка,omitempty"`
	StavkaNDS                        *String `json:"СтавкаНДС,omitempty"`
	TypeOfMovingMoneyKey             *Guid   `json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov             *Double `json:"СуммаВзаиморасчетов,omitempty"`
	SummaNDS                         *Double `json:"СуммаНДС,omitempty"`
	Sum                              *Double `json:"СуммаПлатежа,omitempty"`
	SummaPlatezhaPlan                *Double `json:"СуммаПлатежаПлан,omitempty"`
	SdelkaType                       *String `json:"Сделка_Type,omitempty"`
}

func (DocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezha) APIEntityType() string {
	return "Document_ПриходныйКассовыйОрдер_РасшифровкаПлатежа"
}
func NewDocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezha(data string, prevError error) (*DocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezha, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezha)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezha(entity DocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezha) (*DocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezha, error) {
	return NewDocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezha(c.createEntity(entity))
}
func (c *Client) DocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezha(key PrimaryDocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezha, fields []string) (*DocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezha, error) {
	return NewDocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezha(c.getEntity(key, fields))
}
func (c *Client) DocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezhas(where Where) (*[]DocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezha, error) {
	type ReturnObj struct {
		Value []DocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezha `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПриходныйКассовыйОрдер_РасшифровкаПлатежа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezha(key PrimaryDocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezha, entity DocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezha) (*DocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezha, error) {
	return NewDocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezha(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezha(key PrimaryDocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezha) error {
	return c.removeEntity(key)
}

type DocumentPrikhodnyiKassovyiOrderOplata struct {
	Key        Guid    `json:"Ref_Key,omitempty"`
	LineNumber Int64   `json:"LineNumber,omitempty"`
	TipOplaty  *String `json:"ТипОплаты,omitempty"`
	Sum        *Double `json:"Сумма,omitempty"`
}

func (DocumentPrikhodnyiKassovyiOrderOplata) APIEntityType() string {
	return "Document_ПриходныйКассовыйОрдер_Оплата"
}
func NewDocumentPrikhodnyiKassovyiOrderOplata(data string, prevError error) (*DocumentPrikhodnyiKassovyiOrderOplata, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPrikhodnyiKassovyiOrderOplata)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPrikhodnyiKassovyiOrderOplata(entity DocumentPrikhodnyiKassovyiOrderOplata) (*DocumentPrikhodnyiKassovyiOrderOplata, error) {
	return NewDocumentPrikhodnyiKassovyiOrderOplata(c.createEntity(entity))
}
func (c *Client) DocumentPrikhodnyiKassovyiOrderOplata(key PrimaryDocumentPrikhodnyiKassovyiOrderOplata, fields []string) (*DocumentPrikhodnyiKassovyiOrderOplata, error) {
	return NewDocumentPrikhodnyiKassovyiOrderOplata(c.getEntity(key, fields))
}
func (c *Client) DocumentPrikhodnyiKassovyiOrderOplatas(where Where) (*[]DocumentPrikhodnyiKassovyiOrderOplata, error) {
	type ReturnObj struct {
		Value []DocumentPrikhodnyiKassovyiOrderOplata `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПриходныйКассовыйОрдер_Оплата", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPrikhodnyiKassovyiOrderOplata(key PrimaryDocumentPrikhodnyiKassovyiOrderOplata, entity DocumentPrikhodnyiKassovyiOrderOplata) (*DocumentPrikhodnyiKassovyiOrderOplata, error) {
	return NewDocumentPrikhodnyiKassovyiOrderOplata(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPrikhodnyiKassovyiOrderOplata(key PrimaryDocumentPrikhodnyiKassovyiOrderOplata) error {
	return c.removeEntity(key)
}

type DocumentPrikhodnyiKassovyiOrderTovary struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	Weight                         *Double `json:"Вес,omitempty"`
	Quantity                       *Int64  `json:"Количество,omitempty"`
	ItemKey                        *Guid   `json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid   `json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	StavkaNDS                      *String `json:"СтавкаНДС,omitempty"`
	Sum                            *Double `json:"Сумма,omitempty"`
	SummaNDS                       *Double `json:"СуммаНДС,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Double `json:"Цена,omitempty"`
	SummaSkidki                    *Double `json:"СуммаСкидки,omitempty"`
	VidTovaraKKT                   *String `json:"ВидТовараККТ,omitempty"`
	TipOplatyTovaraKKT             *String `json:"ТипОплатыТовараККТ,omitempty"`
	SummaOsn                       *Double `json:"СуммаОсн,omitempty"`
	Komitent                       *String `json:"Комитент,omitempty"`
	TelefonKomitenta               *String `json:"ТелефонКомитента,omitempty"`
	INNkomitenta                   *String `json:"ИННкомитента,omitempty"`
	SummaOpl                       *Double `json:"СуммаОпл,omitempty"`
}

func (DocumentPrikhodnyiKassovyiOrderTovary) APIEntityType() string {
	return "Document_ПриходныйКассовыйОрдер_Товары"
}
func NewDocumentPrikhodnyiKassovyiOrderTovary(data string, prevError error) (*DocumentPrikhodnyiKassovyiOrderTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPrikhodnyiKassovyiOrderTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPrikhodnyiKassovyiOrderTovary(entity DocumentPrikhodnyiKassovyiOrderTovary) (*DocumentPrikhodnyiKassovyiOrderTovary, error) {
	return NewDocumentPrikhodnyiKassovyiOrderTovary(c.createEntity(entity))
}
func (c *Client) DocumentPrikhodnyiKassovyiOrderTovary(key PrimaryDocumentPrikhodnyiKassovyiOrderTovary, fields []string) (*DocumentPrikhodnyiKassovyiOrderTovary, error) {
	return NewDocumentPrikhodnyiKassovyiOrderTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentPrikhodnyiKassovyiOrderTovarys(where Where) (*[]DocumentPrikhodnyiKassovyiOrderTovary, error) {
	type ReturnObj struct {
		Value []DocumentPrikhodnyiKassovyiOrderTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПриходныйКассовыйОрдер_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPrikhodnyiKassovyiOrderTovary(key PrimaryDocumentPrikhodnyiKassovyiOrderTovary, entity DocumentPrikhodnyiKassovyiOrderTovary) (*DocumentPrikhodnyiKassovyiOrderTovary, error) {
	return NewDocumentPrikhodnyiKassovyiOrderTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPrikhodnyiKassovyiOrderTovary(key PrimaryDocumentPrikhodnyiKassovyiOrderTovary) error {
	return c.removeEntity(key)
}

type CatalogPrichinyVozvrata struct {
	Key          Guid     `json:"Ref_Key,omitempty"`
	DataVersion  *String  `json:"DataVersion,omitempty"`
	Description  *String  `json:"Description,omitempty"`
	Code         *String  `json:"Code,omitempty"`
	DeletionMark *Boolean `json:"DeletionMark,omitempty"`
}

func (CatalogPrichinyVozvrata) APIEntityType() string {
	return "Catalog_ПричиныВозврата"
}
func NewCatalogPrichinyVozvrata(data string, prevError error) (*CatalogPrichinyVozvrata, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogPrichinyVozvrata)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogPrichinyVozvrata(entity CatalogPrichinyVozvrata) (*CatalogPrichinyVozvrata, error) {
	return NewCatalogPrichinyVozvrata(c.createEntity(entity))
}
func (c *Client) CatalogPrichinyVozvrata(key PrimaryCatalogPrichinyVozvrata, fields []string) (*CatalogPrichinyVozvrata, error) {
	return NewCatalogPrichinyVozvrata(c.getEntity(key, fields))
}
func (c *Client) CatalogPrichinyVozvratas(where Where) (*[]CatalogPrichinyVozvrata, error) {
	type ReturnObj struct {
		Value []CatalogPrichinyVozvrata `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ПричиныВозврата", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogPrichinyVozvrata(key PrimaryCatalogPrichinyVozvrata, entity CatalogPrichinyVozvrata) (*CatalogPrichinyVozvrata, error) {
	return NewCatalogPrichinyVozvrata(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogPrichinyVozvrata(key PrimaryCatalogPrichinyVozvrata) error {
	return c.removeEntity(key)
}

type DocumentDenezhnyiChek struct {
	Key                  Guid      `json:"Ref_Key,omitempty"`
	DataVersion          *String   `json:"DataVersion,omitempty"`
	Number               *String   `json:"Number,omitempty"`
	Date                 *DateTime `json:"Date,omitempty"`
	DeletionMark         *Boolean  `json:"DeletionMark,omitempty"`
	Posted               *Boolean  `json:"Posted,omitempty"`
	ValiutaDokumentaKey  *Guid     `json:"ВалютаДокумента_Key,omitempty"`
	DataOplaty           *DateTime `json:"ДатаОплаты,omitempty"`
	KassaKey             *Guid     `json:"Касса_Key,omitempty"`
	Comment              *String   `json:"Комментарий,omitempty"`
	Oplacheno            *Boolean  `json:"Оплачено,omitempty"`
	OrganizatsiiaKey     *Guid     `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey     *Guid     `json:"Ответственный_Key,omitempty"`
	TypeOfMovingMoneyKey *Guid     `json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SumOfDocument        *Double   `json:"СуммаДокумента,omitempty"`
	SchetOrganizatsiiKey *Guid     `json:"СчетОрганизации_Key,omitempty"`
	TipDokumenta         *String   `json:"ТипДокумента,omitempty"`
}

func (DocumentDenezhnyiChek) APIEntityType() string {
	return "Document_ДенежныйЧек"
}
func NewDocumentDenezhnyiChek(data string, prevError error) (*DocumentDenezhnyiChek, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentDenezhnyiChek)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentDenezhnyiChek(entity DocumentDenezhnyiChek) (*DocumentDenezhnyiChek, error) {
	return NewDocumentDenezhnyiChek(c.createEntity(entity))
}
func (c *Client) DocumentDenezhnyiChek(key PrimaryDocumentDenezhnyiChek, fields []string) (*DocumentDenezhnyiChek, error) {
	return NewDocumentDenezhnyiChek(c.getEntity(key, fields))
}
func (c *Client) DocumentDenezhnyiCheks(where Where) (*[]DocumentDenezhnyiChek, error) {
	type ReturnObj struct {
		Value []DocumentDenezhnyiChek `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ДенежныйЧек", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentDenezhnyiChek(key PrimaryDocumentDenezhnyiChek, entity DocumentDenezhnyiChek) (*DocumentDenezhnyiChek, error) {
	return NewDocumentDenezhnyiChek(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentDenezhnyiChek(key PrimaryDocumentDenezhnyiChek) error {
	return c.removeEntity(key)
}

type DocumentVozvratMaterialovIzProizvodstva struct {
	Key                           Guid                                                    `json:"Ref_Key,omitempty"`
	DataVersion                   *String                                                 `json:"DataVersion,omitempty"`
	Number                        *String                                                 `json:"Number,omitempty"`
	Date                          *DateTime                                               `json:"Date,omitempty"`
	DeletionMark                  *Boolean                                                `json:"DeletionMark,omitempty"`
	Posted                        *Boolean                                                `json:"Posted,omitempty"`
	Weight                        *Double                                                 `json:"ВесДокумента,omitempty"`
	DataVkhodiashchegoDokumenta   *DateTime                                               `json:"ДатаВходящегоДокумента,omitempty"`
	DogovorKontragentaKey         *Guid                                                   `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie             *String                                                 `json:"ДокументОснование,omitempty"`
	KolichestvoDokumenta          *Int64                                                  `json:"КоличествоДокумента,omitempty"`
	Comment                       *String                                                 `json:"Комментарий,omitempty"`
	KontragentKey                 *Guid                                                   `json:"Контрагент_Key,omitempty"`
	NomerVkhodiashchegoDokumenta  *String                                                 `json:"НомерВходящегоДокумента,omitempty"`
	OrganizatsiiaKey              *Guid                                                   `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey              *Guid                                                   `json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey              *Guid                                                   `json:"Подразделение_Key,omitempty"`
	ProektKey                     *Guid                                                   `json:"Проект_Key,omitempty"`
	DepartmentKey                 *Guid                                                   `json:"Склад_Key,omitempty"`
	TipDokumenta                  *String                                                 `json:"ТипДокумента,omitempty"`
	KhoziaistvennaiaOperatsiiaKey *Guid                                                   `json:"ХозяйственнаяОперация_Key,omitempty"`
	ProizvodstvennyiUchastokKey   *Guid                                                   `json:"ПроизводственныйУчасток_Key,omitempty"`
	SobstvennoeProizvodstvo       *Boolean                                                `json:"СобственноеПроизводство,omitempty"`
	Goods                         *[]DocumentVozvratMaterialovIzProizvodstvaTovaryRowType `json:"Товары,omitempty"`
	DokumentOsnovanieType         *String                                                 `json:"ДокументОснование_Type,omitempty"`
}

func (DocumentVozvratMaterialovIzProizvodstva) APIEntityType() string {
	return "Document_ВозвратМатериаловИзПроизводства"
}
func NewDocumentVozvratMaterialovIzProizvodstva(data string, prevError error) (*DocumentVozvratMaterialovIzProizvodstva, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentVozvratMaterialovIzProizvodstva)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentVozvratMaterialovIzProizvodstva(entity DocumentVozvratMaterialovIzProizvodstva) (*DocumentVozvratMaterialovIzProizvodstva, error) {
	return NewDocumentVozvratMaterialovIzProizvodstva(c.createEntity(entity))
}
func (c *Client) DocumentVozvratMaterialovIzProizvodstva(key PrimaryDocumentVozvratMaterialovIzProizvodstva, fields []string) (*DocumentVozvratMaterialovIzProizvodstva, error) {
	return NewDocumentVozvratMaterialovIzProizvodstva(c.getEntity(key, fields))
}
func (c *Client) DocumentVozvratMaterialovIzProizvodstvas(where Where) (*[]DocumentVozvratMaterialovIzProizvodstva, error) {
	type ReturnObj struct {
		Value []DocumentVozvratMaterialovIzProizvodstva `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВозвратМатериаловИзПроизводства", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentVozvratMaterialovIzProizvodstva(key PrimaryDocumentVozvratMaterialovIzProizvodstva, entity DocumentVozvratMaterialovIzProizvodstva) (*DocumentVozvratMaterialovIzProizvodstva, error) {
	return NewDocumentVozvratMaterialovIzProizvodstva(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentVozvratMaterialovIzProizvodstva(key PrimaryDocumentVozvratMaterialovIzProizvodstva) error {
	return c.removeEntity(key)
}

type DocumentVozvratMaterialovIzProizvodstvaTovary struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	Weight                         *Double `json:"Вес,omitempty"`
	Quantity                       *Int64  `json:"Количество,omitempty"`
	ItemKey                        *Guid   `json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid   `json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	DepartmentKey                  *Guid   `json:"Склад_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
}

func (DocumentVozvratMaterialovIzProizvodstvaTovary) APIEntityType() string {
	return "Document_ВозвратМатериаловИзПроизводства_Товары"
}
func NewDocumentVozvratMaterialovIzProizvodstvaTovary(data string, prevError error) (*DocumentVozvratMaterialovIzProizvodstvaTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentVozvratMaterialovIzProizvodstvaTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentVozvratMaterialovIzProizvodstvaTovary(entity DocumentVozvratMaterialovIzProizvodstvaTovary) (*DocumentVozvratMaterialovIzProizvodstvaTovary, error) {
	return NewDocumentVozvratMaterialovIzProizvodstvaTovary(c.createEntity(entity))
}
func (c *Client) DocumentVozvratMaterialovIzProizvodstvaTovary(key PrimaryDocumentVozvratMaterialovIzProizvodstvaTovary, fields []string) (*DocumentVozvratMaterialovIzProizvodstvaTovary, error) {
	return NewDocumentVozvratMaterialovIzProizvodstvaTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentVozvratMaterialovIzProizvodstvaTovarys(where Where) (*[]DocumentVozvratMaterialovIzProizvodstvaTovary, error) {
	type ReturnObj struct {
		Value []DocumentVozvratMaterialovIzProizvodstvaTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВозвратМатериаловИзПроизводства_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentVozvratMaterialovIzProizvodstvaTovary(key PrimaryDocumentVozvratMaterialovIzProizvodstvaTovary, entity DocumentVozvratMaterialovIzProizvodstvaTovary) (*DocumentVozvratMaterialovIzProizvodstvaTovary, error) {
	return NewDocumentVozvratMaterialovIzProizvodstvaTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentVozvratMaterialovIzProizvodstvaTovary(key PrimaryDocumentVozvratMaterialovIzProizvodstvaTovary) error {
	return c.removeEntity(key)
}

type DocumentPereotsenkaTovarovOtdannykhNaKomissiiu struct {
	Key                            Guid                                                           `json:"Ref_Key,omitempty"`
	DataVersion                    *String                                                        `json:"DataVersion,omitempty"`
	Number                         *String                                                        `json:"Number,omitempty"`
	Date                           *DateTime                                                      `json:"Date,omitempty"`
	DeletionMark                   *Boolean                                                       `json:"DeletionMark,omitempty"`
	Posted                         *Boolean                                                       `json:"Posted,omitempty"`
	ValiutaDokumentaKey            *Guid                                                          `json:"ВалютаДокумента_Key,omitempty"`
	DogovorKontragentaKey          *Guid                                                          `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie              *String                                                        `json:"ДокументОснование,omitempty"`
	Comment                        *String                                                        `json:"Комментарий,omitempty"`
	KontragentKey                  *Guid                                                          `json:"Контрагент_Key,omitempty"`
	KratnostVzaimoraschetov        *Int64                                                         `json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov            *Double                                                        `json:"КурсВзаиморасчетов,omitempty"`
	OrganizatsiiaKey               *Guid                                                          `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey               *Guid                                                          `json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey               *Guid                                                          `json:"Подразделение_Key,omitempty"`
	Sdelka                         *String                                                        `json:"Сделка,omitempty"`
	TipDokumenta                   *String                                                        `json:"ТипДокумента,omitempty"`
	TipTsenKey                     *Guid                                                          `json:"ТипЦен_Key,omitempty"`
	KhoziaistvennaiaOperatsiiaKey  *Guid                                                          `json:"ХозяйственнаяОперация_Key,omitempty"`
	NastroikiZapolneniiaBase64Data *Binary                                                        `json:"НастройкиЗаполнения_Base64Data,omitempty"`
	Goods                          *[]DocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovaryRowType `json:"Товары,omitempty"`
	DokumentOsnovanieType          *String                                                        `json:"ДокументОснование_Type,omitempty"`
	SdelkaType                     *String                                                        `json:"Сделка_Type,omitempty"`
	NastroikiZapolneniiaType       *String                                                        `json:"НастройкиЗаполнения_Type,omitempty"`
	NastroikiZapolneniia           *Stream                                                        `json:"НастройкиЗаполнения,omitempty"`
}

func (DocumentPereotsenkaTovarovOtdannykhNaKomissiiu) APIEntityType() string {
	return "Document_ПереоценкаТоваровОтданныхНаКомиссию"
}
func NewDocumentPereotsenkaTovarovOtdannykhNaKomissiiu(data string, prevError error) (*DocumentPereotsenkaTovarovOtdannykhNaKomissiiu, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPereotsenkaTovarovOtdannykhNaKomissiiu)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPereotsenkaTovarovOtdannykhNaKomissiiu(entity DocumentPereotsenkaTovarovOtdannykhNaKomissiiu) (*DocumentPereotsenkaTovarovOtdannykhNaKomissiiu, error) {
	return NewDocumentPereotsenkaTovarovOtdannykhNaKomissiiu(c.createEntity(entity))
}
func (c *Client) DocumentPereotsenkaTovarovOtdannykhNaKomissiiu(key PrimaryDocumentPereotsenkaTovarovOtdannykhNaKomissiiu, fields []string) (*DocumentPereotsenkaTovarovOtdannykhNaKomissiiu, error) {
	return NewDocumentPereotsenkaTovarovOtdannykhNaKomissiiu(c.getEntity(key, fields))
}
func (c *Client) DocumentPereotsenkaTovarovOtdannykhNaKomissiius(where Where) (*[]DocumentPereotsenkaTovarovOtdannykhNaKomissiiu, error) {
	type ReturnObj struct {
		Value []DocumentPereotsenkaTovarovOtdannykhNaKomissiiu `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПереоценкаТоваровОтданныхНаКомиссию", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPereotsenkaTovarovOtdannykhNaKomissiiu(key PrimaryDocumentPereotsenkaTovarovOtdannykhNaKomissiiu, entity DocumentPereotsenkaTovarovOtdannykhNaKomissiiu) (*DocumentPereotsenkaTovarovOtdannykhNaKomissiiu, error) {
	return NewDocumentPereotsenkaTovarovOtdannykhNaKomissiiu(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPereotsenkaTovarovOtdannykhNaKomissiiu(key PrimaryDocumentPereotsenkaTovarovOtdannykhNaKomissiiu) error {
	return c.removeEntity(key)
}

type DocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovary struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	Weight                         *Double `json:"Вес,omitempty"`
	Quantity                       *Int64  `json:"Количество,omitempty"`
	ItemKey                        *Guid   `json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid   `json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	Sum                            *Double `json:"Сумма,omitempty"`
	SummaStaraia                   *Double `json:"СуммаСтарая,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Double `json:"Цена,omitempty"`
	TsenaZaGramm                   *Double `json:"ЦенаЗаГрамм,omitempty"`
}

func (DocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovary) APIEntityType() string {
	return "Document_ПереоценкаТоваровОтданныхНаКомиссию_Товары"
}
func NewDocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovary(data string, prevError error) (*DocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovary(entity DocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovary) (*DocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovary, error) {
	return NewDocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovary(c.createEntity(entity))
}
func (c *Client) DocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovary(key PrimaryDocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovary, fields []string) (*DocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovary, error) {
	return NewDocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovarys(where Where) (*[]DocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovary, error) {
	type ReturnObj struct {
		Value []DocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПереоценкаТоваровОтданныхНаКомиссию_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovary(key PrimaryDocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovary, entity DocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovary) (*DocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovary, error) {
	return NewDocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovary(key PrimaryDocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovary) error {
	return c.removeEntity(key)
}

type DocumentVvodNachalnykhOstatkovPoRaskhodamUSN struct {
	Key                            Guid                                                                                 `json:"Ref_Key,omitempty"`
	DataVersion                    *String                                                                              `json:"DataVersion,omitempty"`
	Number                         *String                                                                              `json:"Number,omitempty"`
	Date                           *DateTime                                                                            `json:"Date,omitempty"`
	DeletionMark                   *Boolean                                                                             `json:"DeletionMark,omitempty"`
	Posted                         *Boolean                                                                             `json:"Posted,omitempty"`
	OrganizatsiiaKey               *Guid                                                                                `json:"Организация_Key,omitempty"`
	Comment                        *String                                                                              `json:"Комментарий,omitempty"`
	OtvetstvennyiKey               *Guid                                                                                `json:"Ответственный_Key,omitempty"`
	VzaimoraschetySPokupateliami   *[]DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliamiRowType   `json:"ВзаиморасчетыСПокупателями,omitempty"`
	TovaryProdannye                *[]DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannyeRowType                `json:"ТоварыПроданные,omitempty"`
	VzaimoraschetySPostavshchikami *[]DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikamiRowType `json:"ВзаиморасчетыСПоставщиками,omitempty"`
	TovaryNaOstatkakh              *[]DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakhRowType              `json:"ТоварыНаОстатках,omitempty"`
}

func (DocumentVvodNachalnykhOstatkovPoRaskhodamUSN) APIEntityType() string {
	return "Document_ВводНачальныхОстатковПоРасходамУСН"
}
func NewDocumentVvodNachalnykhOstatkovPoRaskhodamUSN(data string, prevError error) (*DocumentVvodNachalnykhOstatkovPoRaskhodamUSN, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentVvodNachalnykhOstatkovPoRaskhodamUSN)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentVvodNachalnykhOstatkovPoRaskhodamUSN(entity DocumentVvodNachalnykhOstatkovPoRaskhodamUSN) (*DocumentVvodNachalnykhOstatkovPoRaskhodamUSN, error) {
	return NewDocumentVvodNachalnykhOstatkovPoRaskhodamUSN(c.createEntity(entity))
}
func (c *Client) DocumentVvodNachalnykhOstatkovPoRaskhodamUSN(key PrimaryDocumentVvodNachalnykhOstatkovPoRaskhodamUSN, fields []string) (*DocumentVvodNachalnykhOstatkovPoRaskhodamUSN, error) {
	return NewDocumentVvodNachalnykhOstatkovPoRaskhodamUSN(c.getEntity(key, fields))
}
func (c *Client) DocumentVvodNachalnykhOstatkovPoRaskhodamUSNs(where Where) (*[]DocumentVvodNachalnykhOstatkovPoRaskhodamUSN, error) {
	type ReturnObj struct {
		Value []DocumentVvodNachalnykhOstatkovPoRaskhodamUSN `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВводНачальныхОстатковПоРасходамУСН", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentVvodNachalnykhOstatkovPoRaskhodamUSN(key PrimaryDocumentVvodNachalnykhOstatkovPoRaskhodamUSN, entity DocumentVvodNachalnykhOstatkovPoRaskhodamUSN) (*DocumentVvodNachalnykhOstatkovPoRaskhodamUSN, error) {
	return NewDocumentVvodNachalnykhOstatkovPoRaskhodamUSN(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentVvodNachalnykhOstatkovPoRaskhodamUSN(key PrimaryDocumentVvodNachalnykhOstatkovPoRaskhodamUSN) error {
	return c.removeEntity(key)
}

type DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliami struct {
	Key                       Guid    `json:"Ref_Key,omitempty"`
	LineNumber                Int64   `json:"LineNumber,omitempty"`
	PokupatelKey              *Guid   `json:"Покупатель_Key,omitempty"`
	DogovorSPokupatelemKey    *Guid   `json:"ДоговорСПокупателем_Key,omitempty"`
	SupplierKey               *Guid   `json:"Поставщик_Key,omitempty"`
	DogovorSPostavshchikomKey *Guid   `json:"ДоговорСПоставщиком_Key,omitempty"`
	Sum                       *Double `json:"Сумма,omitempty"`
	SummaSebestoimost         *Double `json:"СуммаСебестоимость,omitempty"`
}

func (DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliami) APIEntityType() string {
	return "Document_ВводНачальныхОстатковПоРасходамУСН_ВзаиморасчетыСПокупателями"
}
func NewDocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliami(data string, prevError error) (*DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliami, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliami)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliami(entity DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliami) (*DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliami, error) {
	return NewDocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliami(c.createEntity(entity))
}
func (c *Client) DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliami(key PrimaryDocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliami, fields []string) (*DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliami, error) {
	return NewDocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliami(c.getEntity(key, fields))
}
func (c *Client) DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliamis(where Where) (*[]DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliami, error) {
	type ReturnObj struct {
		Value []DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliami `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВводНачальныхОстатковПоРасходамУСН_ВзаиморасчетыСПокупателями", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliami(key PrimaryDocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliami, entity DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliami) (*DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliami, error) {
	return NewDocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliami(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliami(key PrimaryDocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliami) error {
	return c.removeEntity(key)
}

type DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannye struct {
	Key                         Guid    `json:"Ref_Key,omitempty"`
	LineNumber                  Int64   `json:"LineNumber,omitempty"`
	ItemKey                     *Guid   `json:"Номенклатура_Key,omitempty"`
	InstanceKey                 *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	PokupatelKey                *Guid   `json:"Покупатель_Key,omitempty"`
	DogovorSPokupatelemKey      *Guid   `json:"ДоговорСПокупателем_Key,omitempty"`
	SupplierKey                 *Guid   `json:"Поставщик_Key,omitempty"`
	DogovorSPostavshchikomKey   *Guid   `json:"ДоговорСПоставщиком_Key,omitempty"`
	Quantity                    *Int64  `json:"Количество,omitempty"`
	Weight                      *Double `json:"Вес,omitempty"`
	SummaPostupleniia           *Double `json:"СуммаПоступления,omitempty"`
	SummaProdazhi               *Double `json:"СуммаПродажи,omitempty"`
	StatusRaskhoda              *String `json:"СтатусРасхода,omitempty"`
	DokumentProdazhi            *String `json:"ДокументПродажи,omitempty"`
	DokumentOprikhodovaniia     *String `json:"ДокументОприходования,omitempty"`
	DokumentProdazhiType        *String `json:"ДокументПродажи_Type,omitempty"`
	DokumentOprikhodovaniiaType *String `json:"ДокументОприходования_Type,omitempty"`
}

func (DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannye) APIEntityType() string {
	return "Document_ВводНачальныхОстатковПоРасходамУСН_ТоварыПроданные"
}
func NewDocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannye(data string, prevError error) (*DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannye, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannye)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannye(entity DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannye) (*DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannye, error) {
	return NewDocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannye(c.createEntity(entity))
}
func (c *Client) DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannye(key PrimaryDocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannye, fields []string) (*DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannye, error) {
	return NewDocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannye(c.getEntity(key, fields))
}
func (c *Client) DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannyes(where Where) (*[]DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannye, error) {
	type ReturnObj struct {
		Value []DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannye `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВводНачальныхОстатковПоРасходамУСН_ТоварыПроданные", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannye(key PrimaryDocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannye, entity DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannye) (*DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannye, error) {
	return NewDocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannye(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannye(key PrimaryDocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannye) error {
	return c.removeEntity(key)
}

type DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikami struct {
	Key                       Guid    `json:"Ref_Key,omitempty"`
	LineNumber                Int64   `json:"LineNumber,omitempty"`
	SupplierKey               *Guid   `json:"Поставщик_Key,omitempty"`
	DogovorSPostavshchikomKey *Guid   `json:"ДоговорСПоставщиком_Key,omitempty"`
	Sum                       *Double `json:"Сумма,omitempty"`
	SummaSebestoimost         *Double `json:"СуммаСебестоимость,omitempty"`
}

func (DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikami) APIEntityType() string {
	return "Document_ВводНачальныхОстатковПоРасходамУСН_ВзаиморасчетыСПоставщиками"
}
func NewDocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikami(data string, prevError error) (*DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikami, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikami)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikami(entity DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikami) (*DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikami, error) {
	return NewDocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikami(c.createEntity(entity))
}
func (c *Client) DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikami(key PrimaryDocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikami, fields []string) (*DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikami, error) {
	return NewDocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikami(c.getEntity(key, fields))
}
func (c *Client) DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikamis(where Where) (*[]DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikami, error) {
	type ReturnObj struct {
		Value []DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikami `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВводНачальныхОстатковПоРасходамУСН_ВзаиморасчетыСПоставщиками", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikami(key PrimaryDocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikami, entity DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikami) (*DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikami, error) {
	return NewDocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikami(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikami(key PrimaryDocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikami) error {
	return c.removeEntity(key)
}

type DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakh struct {
	Key                         Guid    `json:"Ref_Key,omitempty"`
	LineNumber                  Int64   `json:"LineNumber,omitempty"`
	ItemKey                     *Guid   `json:"Номенклатура_Key,omitempty"`
	InstanceKey                 *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	SupplierKey                 *Guid   `json:"Поставщик_Key,omitempty"`
	DogovorSPostavshchikomKey   *Guid   `json:"ДоговорСПоставщиком_Key,omitempty"`
	Quantity                    *Int64  `json:"Количество,omitempty"`
	Weight                      *Double `json:"Вес,omitempty"`
	SummaPostupleniia           *Double `json:"СуммаПоступления,omitempty"`
	StatusRaskhoda              *String `json:"СтатусРасхода,omitempty"`
	DokumentOprikhodovaniia     *String `json:"ДокументОприходования,omitempty"`
	SummaPostupleniiaBezNDS     *Double `json:"СуммаПоступленияБезНДС,omitempty"`
	DokumentOprikhodovaniiaType *String `json:"ДокументОприходования_Type,omitempty"`
}

func (DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakh) APIEntityType() string {
	return "Document_ВводНачальныхОстатковПоРасходамУСН_ТоварыНаОстатках"
}
func NewDocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakh(data string, prevError error) (*DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakh, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakh)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakh(entity DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakh) (*DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakh, error) {
	return NewDocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakh(c.createEntity(entity))
}
func (c *Client) DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakh(key PrimaryDocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakh, fields []string) (*DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakh, error) {
	return NewDocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakh(c.getEntity(key, fields))
}
func (c *Client) DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakhs(where Where) (*[]DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakh, error) {
	type ReturnObj struct {
		Value []DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakh `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВводНачальныхОстатковПоРасходамУСН_ТоварыНаОстатках", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakh(key PrimaryDocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakh, entity DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakh) (*DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakh, error) {
	return NewDocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakh(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakh(key PrimaryDocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakh) error {
	return c.removeEntity(key)
}

type DocumentGTDImport struct {
	Key                       Guid                               `json:"Ref_Key,omitempty"`
	DataVersion               *String                            `json:"DataVersion,omitempty"`
	Number                    *String                            `json:"Number,omitempty"`
	Date                      *DateTime                          `json:"Date,omitempty"`
	DeletionMark              *Boolean                           `json:"DeletionMark,omitempty"`
	Posted                    *Boolean                           `json:"Posted,omitempty"`
	ValiutaDokumentaKey       *Guid                              `json:"ВалютаДокумента_Key,omitempty"`
	DogovorKontragentaKey     *Guid                              `json:"ДоговорКонтрагента_Key,omitempty"`
	DogovorKontragentaReglKey *Guid                              `json:"ДоговорКонтрагентаРегл_Key,omitempty"`
	Comment                   *String                            `json:"Комментарий,omitempty"`
	KontragentKey             *Guid                              `json:"Контрагент_Key,omitempty"`
	KratnostVzaimoraschetov   *Int64                             `json:"КратностьВзаиморасчетов,omitempty"`
	KratnostDokumenta         *Int64                             `json:"КратностьДокумента,omitempty"`
	KursVzaimoraschetov       *Double                            `json:"КурсВзаиморасчетов,omitempty"`
	KursDokumenta             *Double                            `json:"КурсДокумента,omitempty"`
	NomerGTDKey               *Guid                              `json:"НомерГТД_Key,omitempty"`
	OrganizatsiiaKey          *Guid                              `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey          *Guid                              `json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey          *Guid                              `json:"Подразделение_Key,omitempty"`
	TamozhennyiSbor           *Double                            `json:"ТаможенныйСбор,omitempty"`
	TamozhennyiSborVal        *Double                            `json:"ТаможенныйСборВал,omitempty"`
	TamozhennyiShtraf         *Double                            `json:"ТаможенныйШтраф,omitempty"`
	TamozhennyiShtrafVal      *Double                            `json:"ТаможенныйШтрафВал,omitempty"`
	TipDokumenta              *String                            `json:"ТипДокумента,omitempty"`
	Razdely                   *[]DocumentGTDImportRazdelyRowType `json:"Разделы,omitempty"`
	Goods                     *[]DocumentGTDImportTovaryRowType  `json:"Товары,omitempty"`
}

func (DocumentGTDImport) APIEntityType() string {
	return "Document_ГТДИмпорт"
}
func NewDocumentGTDImport(data string, prevError error) (*DocumentGTDImport, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentGTDImport)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentGTDImport(entity DocumentGTDImport) (*DocumentGTDImport, error) {
	return NewDocumentGTDImport(c.createEntity(entity))
}
func (c *Client) DocumentGTDImport(key PrimaryDocumentGTDImport, fields []string) (*DocumentGTDImport, error) {
	return NewDocumentGTDImport(c.getEntity(key, fields))
}
func (c *Client) DocumentGTDImports(where Where) (*[]DocumentGTDImport, error) {
	type ReturnObj struct {
		Value []DocumentGTDImport `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ГТДИмпорт", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentGTDImport(key PrimaryDocumentGTDImport, entity DocumentGTDImport) (*DocumentGTDImport, error) {
	return NewDocumentGTDImport(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentGTDImport(key PrimaryDocumentGTDImport) error {
	return c.removeEntity(key)
}

type DocumentGTDImportRazdely struct {
	Key                                    Guid     `json:"Ref_Key,omitempty"`
	LineNumber                             Int64    `json:"LineNumber,omitempty"`
	NDSVValiute                            *Boolean `json:"НДСВВалюте,omitempty"`
	PoshlinaVValiute                       *Boolean `json:"ПошлинаВВалюте,omitempty"`
	StavkaNDS                              *String  `json:"СтавкаНДС,omitempty"`
	StavkaPoshliny                         *Double  `json:"СтавкаПошлины,omitempty"`
	SummaNDS                               *Double  `json:"СуммаНДС,omitempty"`
	SummaPoshliny                          *Double  `json:"СуммаПошлины,omitempty"`
	TamozhennaiaStoimost                   *Double  `json:"ТаможеннаяСтоимость,omitempty"`
	TamozhennaiaStoimostVValiuteReglUcheta *Boolean `json:"ТаможеннаяСтоимостьВВалютеРеглУчета,omitempty"`
}

func (DocumentGTDImportRazdely) APIEntityType() string {
	return "Document_ГТДИмпорт_Разделы"
}
func NewDocumentGTDImportRazdely(data string, prevError error) (*DocumentGTDImportRazdely, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentGTDImportRazdely)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentGTDImportRazdely(entity DocumentGTDImportRazdely) (*DocumentGTDImportRazdely, error) {
	return NewDocumentGTDImportRazdely(c.createEntity(entity))
}
func (c *Client) DocumentGTDImportRazdely(key PrimaryDocumentGTDImportRazdely, fields []string) (*DocumentGTDImportRazdely, error) {
	return NewDocumentGTDImportRazdely(c.getEntity(key, fields))
}
func (c *Client) DocumentGTDImportRazdelys(where Where) (*[]DocumentGTDImportRazdely, error) {
	type ReturnObj struct {
		Value []DocumentGTDImportRazdely `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ГТДИмпорт_Разделы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentGTDImportRazdely(key PrimaryDocumentGTDImportRazdely, entity DocumentGTDImportRazdely) (*DocumentGTDImportRazdely, error) {
	return NewDocumentGTDImportRazdely(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentGTDImportRazdely(key PrimaryDocumentGTDImportRazdely) error {
	return c.removeEntity(key)
}

type DocumentGTDImportTovary struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	Weight                         *Double `json:"Вес,omitempty"`
	DokumentPartii                 *String `json:"ДокументПартии,omitempty"`
	Quantity                       *Int64  `json:"Количество,omitempty"`
	ItemKey                        *Guid   `json:"Номенклатура_Key,omitempty"`
	NomerRazdela                   *Int16  `json:"НомерРаздела,omitempty"`
	ProektKey                      *Guid   `json:"Проект_Key,omitempty"`
	SizeKey                        *Guid   `json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	SummaNDS                       *Double `json:"СуммаНДС,omitempty"`
	SummaPoshliny                  *Double `json:"СуммаПошлины,omitempty"`
	FakturnaiaStoimost             *Double `json:"ФактурнаяСтоимость,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	DokumentPartiiType             *String `json:"ДокументПартии_Type,omitempty"`
}

func (DocumentGTDImportTovary) APIEntityType() string {
	return "Document_ГТДИмпорт_Товары"
}
func NewDocumentGTDImportTovary(data string, prevError error) (*DocumentGTDImportTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentGTDImportTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentGTDImportTovary(entity DocumentGTDImportTovary) (*DocumentGTDImportTovary, error) {
	return NewDocumentGTDImportTovary(c.createEntity(entity))
}
func (c *Client) DocumentGTDImportTovary(key PrimaryDocumentGTDImportTovary, fields []string) (*DocumentGTDImportTovary, error) {
	return NewDocumentGTDImportTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentGTDImportTovarys(where Where) (*[]DocumentGTDImportTovary, error) {
	type ReturnObj struct {
		Value []DocumentGTDImportTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ГТДИмпорт_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentGTDImportTovary(key PrimaryDocumentGTDImportTovary, entity DocumentGTDImportTovary) (*DocumentGTDImportTovary, error) {
	return NewDocumentGTDImportTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentGTDImportTovary(key PrimaryDocumentGTDImportTovary) error {
	return c.removeEntity(key)
}

type DocumentAktSverki struct {
	Key                   Guid                              `json:"Ref_Key,omitempty"`
	DataVersion           *String                           `json:"DataVersion,omitempty"`
	Number                *String                           `json:"Number,omitempty"`
	Date                  *DateTime                         `json:"Date,omitempty"`
	DeletionMark          *Boolean                          `json:"DeletionMark,omitempty"`
	Posted                *Boolean                          `json:"Posted,omitempty"`
	DokumentOsnovanie     *String                           `json:"ДокументОснование,omitempty"`
	Komentarii            *String                           `json:"Коментарий,omitempty"`
	OtvetstvennyiKey      *Guid                             `json:"Ответственный_Key,omitempty"`
	Sveren                *Boolean                          `json:"Сверен,omitempty"`
	SumOfDocument         *Double                           `json:"СуммаДокумента,omitempty"`
	Goods                 *[]DocumentAktSverkiTovaryRowType `json:"Товары,omitempty"`
	DokumentOsnovanieType *String                           `json:"ДокументОснование_Type,omitempty"`
}

func (DocumentAktSverki) APIEntityType() string {
	return "Document_АктСверки"
}
func NewDocumentAktSverki(data string, prevError error) (*DocumentAktSverki, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentAktSverki)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentAktSverki(entity DocumentAktSverki) (*DocumentAktSverki, error) {
	return NewDocumentAktSverki(c.createEntity(entity))
}
func (c *Client) DocumentAktSverki(key PrimaryDocumentAktSverki, fields []string) (*DocumentAktSverki, error) {
	return NewDocumentAktSverki(c.getEntity(key, fields))
}
func (c *Client) DocumentAktSverkis(where Where) (*[]DocumentAktSverki, error) {
	type ReturnObj struct {
		Value []DocumentAktSverki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_АктСверки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentAktSverki(key PrimaryDocumentAktSverki, entity DocumentAktSverki) (*DocumentAktSverki, error) {
	return NewDocumentAktSverki(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentAktSverki(key PrimaryDocumentAktSverki) error {
	return c.removeEntity(key)
}

type DocumentAktSverkiTovary struct {
	Key                            Guid      `json:"Ref_Key,omitempty"`
	LineNumber                     Int64     `json:"LineNumber,omitempty"`
	MID                            *String   `json:"Артикул,omitempty"`
	Weight                         *Double   `json:"Вес,omitempty"`
	ZakazKlientaKey                *Guid     `json:"ЗаказКлиента_Key,omitempty"`
	Quantity                       *Int64    `json:"Количество,omitempty"`
	Koef                           *Double   `json:"Коэф,omitempty"`
	NaborKey                       *Guid     `json:"Набор_Key,omitempty"`
	Naideno                        *Boolean  `json:"Найдено,omitempty"`
	ItemKey                        *Guid     `json:"Номенклатура_Key,omitempty"`
	NomerNabora                    *Int64    `json:"НомерНабора,omitempty"`
	Pasport                        *String   `json:"Паспорт,omitempty"`
	ProektKey                      *Guid     `json:"Проект_Key,omitempty"`
	SizeKey                        *Guid     `json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid     `json:"СерияНоменклатуры_Key,omitempty"`
	DepartmentKey                  *Guid     `json:"Склад_Key,omitempty"`
	StavkaNDS                      *String   `json:"СтавкаНДС,omitempty"`
	Sum                            *Double   `json:"Сумма,omitempty"`
	SummaNDS                       *Double   `json:"СуммаНДС,omitempty"`
	KharakteristikaNomenklaturyKey *Guid     `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Double   `json:"Цена,omitempty"`
	Period                         *DateTime `json:"Период,omitempty"`
}

func (DocumentAktSverkiTovary) APIEntityType() string {
	return "Document_АктСверки_Товары"
}
func NewDocumentAktSverkiTovary(data string, prevError error) (*DocumentAktSverkiTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentAktSverkiTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentAktSverkiTovary(entity DocumentAktSverkiTovary) (*DocumentAktSverkiTovary, error) {
	return NewDocumentAktSverkiTovary(c.createEntity(entity))
}
func (c *Client) DocumentAktSverkiTovary(key PrimaryDocumentAktSverkiTovary, fields []string) (*DocumentAktSverkiTovary, error) {
	return NewDocumentAktSverkiTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentAktSverkiTovarys(where Where) (*[]DocumentAktSverkiTovary, error) {
	type ReturnObj struct {
		Value []DocumentAktSverkiTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_АктСверки_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentAktSverkiTovary(key PrimaryDocumentAktSverkiTovary, entity DocumentAktSverkiTovary) (*DocumentAktSverkiTovary, error) {
	return NewDocumentAktSverkiTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentAktSverkiTovary(key PrimaryDocumentAktSverkiTovary) error {
	return c.removeEntity(key)
}

type CatalogFaily struct {
	Key                                     Guid                                          `json:"Ref_Key,omitempty"`
	DataVersion                             *String                                       `json:"DataVersion,omitempty"`
	Description                             *String                                       `json:"Description,omitempty"`
	Code                                    *String                                       `json:"Code,omitempty"`
	DeletionMark                            *Boolean                                      `json:"DeletionMark,omitempty"`
	AvtorKey                                *Guid                                         `json:"Автор_Key,omitempty"`
	VladeletsFaila                          *String                                       `json:"ВладелецФайла,omitempty"`
	DataZaema                               *DateTime                                     `json:"ДатаЗаема,omitempty"`
	DataSozdaniia                           *DateTime                                     `json:"ДатаСоздания,omitempty"`
	Zashifrovan                             *Boolean                                      `json:"Зашифрован,omitempty"`
	IndeksKartinki                          *Int64                                        `json:"ИндексКартинки,omitempty"`
	Opisanie                                *String                                       `json:"Описание,omitempty"`
	PodpisanEP                              *Boolean                                      `json:"ПодписанЭП,omitempty"`
	PolnoeNaimenovanie                      *String                                       `json:"ПолноеНаименование,omitempty"`
	RedaktiruetKey                          *Guid                                         `json:"Редактирует_Key,omitempty"`
	TekstKhranilishcheBase64Data            *Binary                                       `json:"ТекстХранилище_Base64Data,omitempty"`
	TekushchaiaVersiiaKey                   *Guid                                         `json:"ТекущаяВерсия_Key,omitempty"`
	TekushchaiaVersiiaAvtorKey              *Guid                                         `json:"ТекущаяВерсияАвтор_Key,omitempty"`
	TekushchaiaVersiiaDataModifikatsiiFaila *DateTime                                     `json:"ТекущаяВерсияДатаМодификацииФайла,omitempty"`
	TekushchaiaVersiiaDataSozdaniia         *DateTime                                     `json:"ТекущаяВерсияДатаСоздания,omitempty"`
	TekushchaiaVersiiaKod                   *String                                       `json:"ТекущаяВерсияКод,omitempty"`
	TekushchaiaVersiiaNomerVersii           *Int64                                        `json:"ТекущаяВерсияНомерВерсии,omitempty"`
	TekushchaiaVersiiaPutKFailu             *String                                       `json:"ТекущаяВерсияПутьКФайлу,omitempty"`
	TekushchaiaVersiiaRazmer                *Int64                                        `json:"ТекущаяВерсияРазмер,omitempty"`
	TekushchaiaVersiiaRasshirenie           *String                                       `json:"ТекущаяВерсияРасширение,omitempty"`
	KhranitVersii                           *Boolean                                      `json:"ХранитьВерсии,omitempty"`
	DopolnitelnyeRekvizity                  *[]CatalogFailyDopolnitelnyeRekvizityRowType  `json:"ДополнительныеРеквизиты,omitempty"`
	SertifikatyShifrovaniia                 *[]CatalogFailySertifikatyShifrovaniiaRowType `json:"СертификатыШифрования,omitempty"`
	VladeletsFailaType                      *String                                       `json:"ВладелецФайла_Type,omitempty"`
	TekstKhranilishcheType                  *String                                       `json:"ТекстХранилище_Type,omitempty"`
	TekstKhranilishche                      *Stream                                       `json:"ТекстХранилище,omitempty"`
}

func (CatalogFaily) APIEntityType() string {
	return "Catalog_Файлы"
}
func NewCatalogFaily(data string, prevError error) (*CatalogFaily, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogFaily)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogFaily(entity CatalogFaily) (*CatalogFaily, error) {
	return NewCatalogFaily(c.createEntity(entity))
}
func (c *Client) CatalogFaily(key PrimaryCatalogFaily, fields []string) (*CatalogFaily, error) {
	return NewCatalogFaily(c.getEntity(key, fields))
}
func (c *Client) CatalogFailys(where Where) (*[]CatalogFaily, error) {
	type ReturnObj struct {
		Value []CatalogFaily `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Файлы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogFaily(key PrimaryCatalogFaily, entity CatalogFaily) (*CatalogFaily, error) {
	return NewCatalogFaily(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogFaily(key PrimaryCatalogFaily) error {
	return c.removeEntity(key)
}

type CatalogFailyDopolnitelnyeRekvizity struct {
	Key              Guid    `json:"Ref_Key,omitempty"`
	LineNumber       Int64   `json:"LineNumber,omitempty"`
	SvoistvoKey      *Guid   `json:"Свойство_Key,omitempty"`
	Znachenie        *String `json:"Значение,omitempty"`
	TekstovaiaStroka *String `json:"ТекстоваяСтрока,omitempty"`
	ZnachenieType    *String `json:"Значение_Type,omitempty"`
}

func (CatalogFailyDopolnitelnyeRekvizity) APIEntityType() string {
	return "Catalog_Файлы_ДополнительныеРеквизиты"
}
func NewCatalogFailyDopolnitelnyeRekvizity(data string, prevError error) (*CatalogFailyDopolnitelnyeRekvizity, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogFailyDopolnitelnyeRekvizity)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogFailyDopolnitelnyeRekvizity(entity CatalogFailyDopolnitelnyeRekvizity) (*CatalogFailyDopolnitelnyeRekvizity, error) {
	return NewCatalogFailyDopolnitelnyeRekvizity(c.createEntity(entity))
}
func (c *Client) CatalogFailyDopolnitelnyeRekvizity(key PrimaryCatalogFailyDopolnitelnyeRekvizity, fields []string) (*CatalogFailyDopolnitelnyeRekvizity, error) {
	return NewCatalogFailyDopolnitelnyeRekvizity(c.getEntity(key, fields))
}
func (c *Client) CatalogFailyDopolnitelnyeRekvizitys(where Where) (*[]CatalogFailyDopolnitelnyeRekvizity, error) {
	type ReturnObj struct {
		Value []CatalogFailyDopolnitelnyeRekvizity `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Файлы_ДополнительныеРеквизиты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogFailyDopolnitelnyeRekvizity(key PrimaryCatalogFailyDopolnitelnyeRekvizity, entity CatalogFailyDopolnitelnyeRekvizity) (*CatalogFailyDopolnitelnyeRekvizity, error) {
	return NewCatalogFailyDopolnitelnyeRekvizity(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogFailyDopolnitelnyeRekvizity(key PrimaryCatalogFailyDopolnitelnyeRekvizity) error {
	return c.removeEntity(key)
}

type CatalogFailySertifikatyShifrovaniia struct {
	Key                  Guid    `json:"Ref_Key,omitempty"`
	LineNumber           Int64   `json:"LineNumber,omitempty"`
	Otpechatok           *String `json:"Отпечаток,omitempty"`
	Predstavlenie        *String `json:"Представление,omitempty"`
	SertifikatBase64Data *Binary `json:"Сертификат_Base64Data,omitempty"`
	SertifikatType       *String `json:"Сертификат_Type,omitempty"`
	Sertifikat           *Stream `json:"Сертификат,omitempty"`
}

func (CatalogFailySertifikatyShifrovaniia) APIEntityType() string {
	return "Catalog_Файлы_СертификатыШифрования"
}
func NewCatalogFailySertifikatyShifrovaniia(data string, prevError error) (*CatalogFailySertifikatyShifrovaniia, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogFailySertifikatyShifrovaniia)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogFailySertifikatyShifrovaniia(entity CatalogFailySertifikatyShifrovaniia) (*CatalogFailySertifikatyShifrovaniia, error) {
	return NewCatalogFailySertifikatyShifrovaniia(c.createEntity(entity))
}
func (c *Client) CatalogFailySertifikatyShifrovaniia(key PrimaryCatalogFailySertifikatyShifrovaniia, fields []string) (*CatalogFailySertifikatyShifrovaniia, error) {
	return NewCatalogFailySertifikatyShifrovaniia(c.getEntity(key, fields))
}
func (c *Client) CatalogFailySertifikatyShifrovaniias(where Where) (*[]CatalogFailySertifikatyShifrovaniia, error) {
	type ReturnObj struct {
		Value []CatalogFailySertifikatyShifrovaniia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Файлы_СертификатыШифрования", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogFailySertifikatyShifrovaniia(key PrimaryCatalogFailySertifikatyShifrovaniia, entity CatalogFailySertifikatyShifrovaniia) (*CatalogFailySertifikatyShifrovaniia, error) {
	return NewCatalogFailySertifikatyShifrovaniia(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogFailySertifikatyShifrovaniia(key PrimaryCatalogFailySertifikatyShifrovaniia) error {
	return c.removeEntity(key)
}

type CatalogUchetnyeZapisiElektronnoiPochty struct {
	Key                                                                                          Guid                                                                  `json:"Ref_Key,omitempty"`
	DataVersion                                                                                  *String                                                               `json:"DataVersion,omitempty"`
	Description                                                                                  *String                                                               `json:"Description,omitempty"`
	Code                                                                                         *String                                                               `json:"Code,omitempty"`
	DeletionMark                                                                                 *Boolean                                                              `json:"DeletionMark,omitempty"`
	POP3Server                                                                                   *String                                                               `json:"POP3Сервер,omitempty"`
	SMTPServer                                                                                   *String                                                               `json:"SMTPСервер,omitempty"`
	AvtomaticheskaiaUstanovkaPometkiRassmotreno                                                  *Boolean                                                              `json:"АвтоматическаяУстановкаПометкиРассмотрено,omitempty"`
	AvtomaticheskaiaUstanovkaPometkiRassmotrenoPriOtvete                                         *Boolean                                                              `json:"АвтоматическаяУстановкаПометкиРассмотреноПриОтвете,omitempty"`
	AvtomaticheskaiaUstanovkaPometkiRassmotrenoPriPolucheniiOtveta                               *Boolean                                                              `json:"АвтоматическаяУстановкаПометкиРассмотреноПриПолученииОтвета,omitempty"`
	AvtoPoluchenieOtpravkaSoobshchenii                                                           *Boolean                                                              `json:"АвтоПолучениеОтправкаСообщений,omitempty"`
	AvtosokhraneniePisem                                                                         *Boolean                                                              `json:"АвтосохранениеПисем,omitempty"`
	AdresElektronnoiPochty                                                                       *String                                                               `json:"АдресЭлектроннойПочты,omitempty"`
	VremiaOzhidaniiaServera                                                                      *Int16                                                                `json:"ВремяОжиданияСервера,omitempty"`
	GruppaVkhodiashchieKey                                                                       *Guid                                                                 `json:"ГруппаВходящие_Key,omitempty"`
	GruppaIskhodiashchieKey                                                                      *Guid                                                                 `json:"ГруппаИсходящие_Key,omitempty"`
	GruppaUdalennyeKey                                                                           *Guid                                                                 `json:"ГруппаУдаленные_Key,omitempty"`
	GruppaChernovikiKey                                                                          *Guid                                                                 `json:"ГруппаЧерновики_Key,omitempty"`
	DeistvieAvtopolucheniiaOtpravkiSoobshchenii                                                  *String                                                               `json:"ДействиеАвтополученияОтправкиСообщений,omitempty"`
	DliaVkhodiashchikhOtvetovIPereadresatsiiIskatPismaOsnovaniiaIZapolniatGruppuPisemNovogoPisma *Boolean                                                              `json:"ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьГруппуПисемНовогоПисьма,omitempty"`
	DliaVkhodiashchikhOtvetovIPereadresatsiiIskatPismaOsnovaniiaIZapolniatOsnovanieNovogoPisma   *Boolean                                                              `json:"ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьОснованиеНовогоПисьма,omitempty"`
	DliaVkhodiashchikhOtvetovIPereadresatsiiIskatPismaOsnovaniiaIZapolniatPredmet                *Boolean                                                              `json:"ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьПредмет,omitempty"`
	DobavliatPodpisKIskhodiashchimPismam                                                         *Boolean                                                              `json:"ДобавлятьПодписьКИсходящимПисьмам,omitempty"`
	DobavliatPodpisKOtvetamIPeresylkam                                                           *Boolean                                                              `json:"ДобавлятьПодписьКОтветамИПересылкам,omitempty"`
	ZapolniatPustoiPredmetDliaNovykhPisemIzTemyPisma                                             *Boolean                                                              `json:"ЗаполнятьПустойПредметДляНовыхПисемИзТемыПисьма,omitempty"`
	IntervalAvtomaticheskoiUstanovkiOtmetkiRassmotreno                                           *Int16                                                                `json:"ИнтервалАвтоматическойУстановкиОтметкиРассмотрено,omitempty"`
	IntervalAvtoPolucheniiaOtpravkiSoobshchenii                                                  *Int16                                                                `json:"ИнтервалАвтоПолученияОтправкиСообщений,omitempty"`
	IntervalAvtosokhraneniiaPisem                                                                *Int16                                                                `json:"ИнтервалАвтосохраненияПисем,omitempty"`
	IspolzovatKlassifikatsiiuPisemPoPredmetam                                                    *Boolean                                                              `json:"ИспользоватьКлассификациюПисемПоПредметам,omitempty"`
	KolichestvoDneiUdaleniiaPisemSServera                                                        *Int16                                                                `json:"КоличествоДнейУдаленияПисемССервера,omitempty"`
	Login                                                                                        *String                                                               `json:"Логин,omitempty"`
	LoginSMTP                                                                                    *String                                                               `json:"ЛогинSMTP,omitempty"`
	OstavliatKopiiSoobshcheniiNaServere                                                          *Boolean                                                              `json:"ОставлятьКопииСообщенийНаСервере,omitempty"`
	OtvetstvennyiZaAvtoPoluchenieOtpravkuSoobshcheniiKey                                         *Guid                                                                 `json:"ОтветственныйЗаАвтоПолучениеОтправкуСообщений_Key,omitempty"`
	Parol                                                                                        *String                                                               `json:"Пароль,omitempty"`
	ParolSMTP                                                                                    *String                                                               `json:"ПарольSMTP,omitempty"`
	PomeshchatOtvetyIPereadresatsiiVTuzheGruppu                                                  *Boolean                                                              `json:"ПомещатьОтветыИПереадресацииВТужеГруппу,omitempty"`
	PortPOP3                                                                                     *Int16                                                                `json:"ПортPOP3,omitempty"`
	PortSMTP                                                                                     *Int16                                                                `json:"ПортSMTP,omitempty"`
	TekstPodpisi                                                                                 *String                                                               `json:"ТекстПодписи,omitempty"`
	TrebuetsiaSMTPAutentifikatsiia                                                               *Boolean                                                              `json:"ТребуетсяSMTPАутентификация,omitempty"`
	UdaliatPismaSServeraCherez                                                                   *Boolean                                                              `json:"УдалятьПисьмаССервераЧерез,omitempty"`
	FormatPismaDliaOtvetovIPereadresatsiiBratIzIskhodnogo                                        *Boolean                                                              `json:"ФорматПисьмаДляОтветовИПереадресацийБратьИзИсходного,omitempty"`
	FormatTekstaPismaPoUmolchaniiu                                                               *String                                                               `json:"ФорматТекстаПисьмаПоУмолчанию,omitempty"`
	IspolzovatZashchishchennoeSoedinenieDliaVkhodiashcheiPochty                                  *Boolean                                                              `json:"ИспользоватьЗащищенноеСоединениеДляВходящейПочты,omitempty"`
	IspolzovatZashchishchennoeSoedinenieDliaIskhodiashcheiPochty                                 *Boolean                                                              `json:"ИспользоватьЗащищенноеСоединениеДляИсходящейПочты,omitempty"`
	ProtokolVkhodiashcheiPochty                                                                  *String                                                               `json:"ПротоколВходящейПочты,omitempty"`
	ImiaPolzovatelia                                                                             *String                                                               `json:"ИмяПользователя,omitempty"`
	IspolzovatDliaOtpravki                                                                       *Boolean                                                              `json:"ИспользоватьДляОтправки,omitempty"`
	IspolzovatDliaPolucheniia                                                                    *Boolean                                                              `json:"ИспользоватьДляПолучения,omitempty"`
	IspolzovatBezopasnyiVkhodNaServerVkhodiashcheiPochty                                         *Boolean                                                              `json:"ИспользоватьБезопасныйВходНаСерверВходящейПочты,omitempty"`
	IspolzovatBezopasnyiVkhodNaServerIskhodiashcheiPochty                                        *Boolean                                                              `json:"ИспользоватьБезопасныйВходНаСерверИсходящейПочты,omitempty"`
	DostupKUchetnoiZapisi                                                                        *[]CatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisiRowType `json:"ДоступКУчетнойЗаписи,omitempty"`
}

func (CatalogUchetnyeZapisiElektronnoiPochty) APIEntityType() string {
	return "Catalog_УчетныеЗаписиЭлектроннойПочты"
}
func NewCatalogUchetnyeZapisiElektronnoiPochty(data string, prevError error) (*CatalogUchetnyeZapisiElektronnoiPochty, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogUchetnyeZapisiElektronnoiPochty)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogUchetnyeZapisiElektronnoiPochty(entity CatalogUchetnyeZapisiElektronnoiPochty) (*CatalogUchetnyeZapisiElektronnoiPochty, error) {
	return NewCatalogUchetnyeZapisiElektronnoiPochty(c.createEntity(entity))
}
func (c *Client) CatalogUchetnyeZapisiElektronnoiPochty(key PrimaryCatalogUchetnyeZapisiElektronnoiPochty, fields []string) (*CatalogUchetnyeZapisiElektronnoiPochty, error) {
	return NewCatalogUchetnyeZapisiElektronnoiPochty(c.getEntity(key, fields))
}
func (c *Client) CatalogUchetnyeZapisiElektronnoiPochtys(where Where) (*[]CatalogUchetnyeZapisiElektronnoiPochty, error) {
	type ReturnObj struct {
		Value []CatalogUchetnyeZapisiElektronnoiPochty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_УчетныеЗаписиЭлектроннойПочты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogUchetnyeZapisiElektronnoiPochty(key PrimaryCatalogUchetnyeZapisiElektronnoiPochty, entity CatalogUchetnyeZapisiElektronnoiPochty) (*CatalogUchetnyeZapisiElektronnoiPochty, error) {
	return NewCatalogUchetnyeZapisiElektronnoiPochty(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogUchetnyeZapisiElektronnoiPochty(key PrimaryCatalogUchetnyeZapisiElektronnoiPochty) error {
	return c.removeEntity(key)
}

type CatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisi struct {
	Key               Guid     `json:"Ref_Key,omitempty"`
	LineNumber        Int64    `json:"LineNumber,omitempty"`
	Administrirovanie *Boolean `json:"Администрирование,omitempty"`
	Otpravka          *Boolean `json:"Отправка,omitempty"`
	PolzovatelKey     *Guid    `json:"Пользователь_Key,omitempty"`
	Transport         *Boolean `json:"Транспорт,omitempty"`
}

func (CatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisi) APIEntityType() string {
	return "Catalog_УчетныеЗаписиЭлектроннойПочты_ДоступКУчетнойЗаписи"
}
func NewCatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisi(data string, prevError error) (*CatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisi, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisi)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisi(entity CatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisi) (*CatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisi, error) {
	return NewCatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisi(c.createEntity(entity))
}
func (c *Client) CatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisi(key PrimaryCatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisi, fields []string) (*CatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisi, error) {
	return NewCatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisi(c.getEntity(key, fields))
}
func (c *Client) CatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisis(where Where) (*[]CatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisi, error) {
	type ReturnObj struct {
		Value []CatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisi `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_УчетныеЗаписиЭлектроннойПочты_ДоступКУчетнойЗаписи", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisi(key PrimaryCatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisi, entity CatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisi) (*CatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisi, error) {
	return NewCatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisi(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisi(key PrimaryCatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisi) error {
	return c.removeEntity(key)
}

type DocumentPlaniruemoePostuplenieDenezhnykhSredstv struct {
	Key                          Guid                                                                          `json:"Ref_Key,omitempty"`
	DataVersion                  *String                                                                       `json:"DataVersion,omitempty"`
	Number                       *String                                                                       `json:"Number,omitempty"`
	Date                         *DateTime                                                                     `json:"Date,omitempty"`
	DeletionMark                 *Boolean                                                                      `json:"DeletionMark,omitempty"`
	Posted                       *Boolean                                                                      `json:"Posted,omitempty"`
	BankovskiiSchetKassa         *String                                                                       `json:"БанковскийСчетКасса,omitempty"`
	ValiutaDokumentaKey          *Guid                                                                         `json:"ВалютаДокумента_Key,omitempty"`
	OperationType                *String                                                                       `json:"ВидОперации,omitempty"`
	VidPriemaRoznichnoiVyruchki  *String                                                                       `json:"ВидПриемаРозничнойВыручки,omitempty"`
	VkliuchatVPlatezhnyiKalendar *Boolean                                                                      `json:"ВключатьВПлатежныйКалендарь,omitempty"`
	DataPostupleniia             *DateTime                                                                     `json:"ДатаПоступления,omitempty"`
	DokumentOsnovanie            *String                                                                       `json:"ДокументОснование,omitempty"`
	KassaKKM                     *String                                                                       `json:"КассаККМ,omitempty"`
	Comment                      *String                                                                       `json:"Комментарий,omitempty"`
	KontragentKey                *Guid                                                                         `json:"Контрагент_Key,omitempty"`
	KratnostDokumenta            *Int64                                                                        `json:"КратностьДокумента,omitempty"`
	KursDokumenta                *Double                                                                       `json:"КурсДокумента,omitempty"`
	Opisanie                     *String                                                                       `json:"Описание,omitempty"`
	OrganizatsiiaKey             *Guid                                                                         `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey             *Guid                                                                         `json:"Ответственный_Key,omitempty"`
	Sostoianie                   *String                                                                       `json:"Состояние,omitempty"`
	StatiaOborotov               *String                                                                       `json:"СтатьяОборотов,omitempty"`
	SumOfDocument                *Double                                                                       `json:"СуммаДокумента,omitempty"`
	TipDokumenta                 *String                                                                       `json:"ТипДокумента,omitempty"`
	FormaOplaty                  *String                                                                       `json:"ФормаОплаты,omitempty"`
	TsFOKey                      *Guid                                                                         `json:"ЦФО_Key,omitempty"`
	ExtendedPayments             *[]DocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezhaRowType `json:"РасшифровкаПлатежа,omitempty"`
	BankovskiiSchetKassaType     *String                                                                       `json:"БанковскийСчетКасса_Type,omitempty"`
	DokumentOsnovanieType        *String                                                                       `json:"ДокументОснование_Type,omitempty"`
	KassaKKMType                 *String                                                                       `json:"КассаККМ_Type,omitempty"`
}

func (DocumentPlaniruemoePostuplenieDenezhnykhSredstv) APIEntityType() string {
	return "Document_ПланируемоеПоступлениеДенежныхСредств"
}
func NewDocumentPlaniruemoePostuplenieDenezhnykhSredstv(data string, prevError error) (*DocumentPlaniruemoePostuplenieDenezhnykhSredstv, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPlaniruemoePostuplenieDenezhnykhSredstv)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPlaniruemoePostuplenieDenezhnykhSredstv(entity DocumentPlaniruemoePostuplenieDenezhnykhSredstv) (*DocumentPlaniruemoePostuplenieDenezhnykhSredstv, error) {
	return NewDocumentPlaniruemoePostuplenieDenezhnykhSredstv(c.createEntity(entity))
}
func (c *Client) DocumentPlaniruemoePostuplenieDenezhnykhSredstv(key PrimaryDocumentPlaniruemoePostuplenieDenezhnykhSredstv, fields []string) (*DocumentPlaniruemoePostuplenieDenezhnykhSredstv, error) {
	return NewDocumentPlaniruemoePostuplenieDenezhnykhSredstv(c.getEntity(key, fields))
}
func (c *Client) DocumentPlaniruemoePostuplenieDenezhnykhSredstvs(where Where) (*[]DocumentPlaniruemoePostuplenieDenezhnykhSredstv, error) {
	type ReturnObj struct {
		Value []DocumentPlaniruemoePostuplenieDenezhnykhSredstv `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПланируемоеПоступлениеДенежныхСредств", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPlaniruemoePostuplenieDenezhnykhSredstv(key PrimaryDocumentPlaniruemoePostuplenieDenezhnykhSredstv, entity DocumentPlaniruemoePostuplenieDenezhnykhSredstv) (*DocumentPlaniruemoePostuplenieDenezhnykhSredstv, error) {
	return NewDocumentPlaniruemoePostuplenieDenezhnykhSredstv(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPlaniruemoePostuplenieDenezhnykhSredstv(key PrimaryDocumentPlaniruemoePostuplenieDenezhnykhSredstv) error {
	return c.removeEntity(key)
}

type DocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezha struct {
	Key                     Guid    `json:"Ref_Key,omitempty"`
	LineNumber              Int64   `json:"LineNumber,omitempty"`
	DogovorKontragentaKey   *Guid   `json:"ДоговорКонтрагента_Key,omitempty"`
	KratnostVzaimoraschetov *Int64  `json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov     *Double `json:"КурсВзаиморасчетов,omitempty"`
	ProektKey               *Guid   `json:"Проект_Key,omitempty"`
	Sdelka                  *String `json:"Сделка,omitempty"`
	TypeOfMovingMoneyKey    *Guid   `json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov    *Double `json:"СуммаВзаиморасчетов,omitempty"`
	Sum                     *Double `json:"СуммаПлатежа,omitempty"`
	SdelkaType              *String `json:"Сделка_Type,omitempty"`
}

func (DocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezha) APIEntityType() string {
	return "Document_ПланируемоеПоступлениеДенежныхСредств_РасшифровкаПлатежа"
}
func NewDocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezha(data string, prevError error) (*DocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezha, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezha)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezha(entity DocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezha) (*DocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezha, error) {
	return NewDocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezha(c.createEntity(entity))
}
func (c *Client) DocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezha(key PrimaryDocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezha, fields []string) (*DocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezha, error) {
	return NewDocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezha(c.getEntity(key, fields))
}
func (c *Client) DocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezhas(where Where) (*[]DocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezha, error) {
	type ReturnObj struct {
		Value []DocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezha `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПланируемоеПоступлениеДенежныхСредств_РасшифровкаПлатежа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezha(key PrimaryDocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezha, entity DocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezha) (*DocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezha, error) {
	return NewDocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezha(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezha(key PrimaryDocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezha) error {
	return c.removeEntity(key)
}

type DocumentPreiskurantTsenNaKamni struct {
	Key             Guid      `json:"Ref_Key,omitempty"`
	DataVersion     *String   `json:"DataVersion,omitempty"`
	Number          *String   `json:"Number,omitempty"`
	Date            *DateTime `json:"Date,omitempty"`
	DeletionMark    *Boolean  `json:"DeletionMark,omitempty"`
	Posted          *Boolean  `json:"Posted,omitempty"`
	KamenKey        *Guid     `json:"Камень_Key,omitempty"`
	Comment         *String   `json:"Комментарий,omitempty"`
	RassevKey       *Guid     `json:"Рассев_Key,omitempty"`
	TipTsenKey      *Guid     `json:"ТипЦен_Key,omitempty"`
	FormaOgrankiKey *Guid     `json:"ФормаОгранки_Key,omitempty"`
}

func (DocumentPreiskurantTsenNaKamni) APIEntityType() string {
	return "Document_ПрейскурантЦенНаКамни"
}
func NewDocumentPreiskurantTsenNaKamni(data string, prevError error) (*DocumentPreiskurantTsenNaKamni, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPreiskurantTsenNaKamni)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPreiskurantTsenNaKamni(entity DocumentPreiskurantTsenNaKamni) (*DocumentPreiskurantTsenNaKamni, error) {
	return NewDocumentPreiskurantTsenNaKamni(c.createEntity(entity))
}
func (c *Client) DocumentPreiskurantTsenNaKamni(key PrimaryDocumentPreiskurantTsenNaKamni, fields []string) (*DocumentPreiskurantTsenNaKamni, error) {
	return NewDocumentPreiskurantTsenNaKamni(c.getEntity(key, fields))
}
func (c *Client) DocumentPreiskurantTsenNaKamnis(where Where) (*[]DocumentPreiskurantTsenNaKamni, error) {
	type ReturnObj struct {
		Value []DocumentPreiskurantTsenNaKamni `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПрейскурантЦенНаКамни", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPreiskurantTsenNaKamni(key PrimaryDocumentPreiskurantTsenNaKamni, entity DocumentPreiskurantTsenNaKamni) (*DocumentPreiskurantTsenNaKamni, error) {
	return NewDocumentPreiskurantTsenNaKamni(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPreiskurantTsenNaKamni(key PrimaryDocumentPreiskurantTsenNaKamni) error {
	return c.removeEntity(key)
}

type Purchase struct {
	Key                       Guid                                  `json:"Ref_Key,omitempty"`
	DataVersion               *String                               `json:"DataVersion,omitempty"`
	Number                    *String                               `json:"Number,omitempty"`
	Date                      *DateTime                             `json:"Date,omitempty"`
	DeletionMark              *Boolean                              `json:"DeletionMark,omitempty"`
	Posted                    *Boolean                              `json:"Posted,omitempty"`
	Adres                     *String                               `json:"Адрес,omitempty"`
	Weight                    *Double                               `json:"ВесДокумента,omitempty"`
	DataRozhdeniia            *DateTime                             `json:"ДатаРождения,omitempty"`
	DokumentSozdanVIuTD       *Boolean                              `json:"ДокументСозданВЮТД,omitempty"`
	Comment                   *String                               `json:"Комментарий,omitempty"`
	OrganizatsiiaKey          *Guid                                 `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey          *Guid                                 `json:"Ответственный_Key,omitempty"`
	DepartmentKey             *Guid                                 `json:"Склад_Key,omitempty"`
	SumOfDocument             *Double                               `json:"СуммаДокумента,omitempty"`
	UdostoverenieLichnosti    *String                               `json:"УдостоверениеЛичности,omitempty"`
	FizicheskoeLitso          *String                               `json:"ФизическоеЛицо,omitempty"`
	ObmenIzdelii              *Boolean                              `json:"ОбменИзделий,omitempty"`
	KontragentKey             *Guid                                 `json:"Контрагент_Key,omitempty"`
	DokumentSeriia            *String                               `json:"ДокументСерия,omitempty"`
	DokumentNomer             *String                               `json:"ДокументНомер,omitempty"`
	DokumentVidKey            *Guid                                 `json:"ДокументВид_Key,omitempty"`
	DokumentKemVydan          *String                               `json:"ДокументКемВыдан,omitempty"`
	DokumentDataVydachi       *DateTime                             `json:"ДокументДатаВыдачи,omitempty"`
	DokumentKodPodrazdeleniia *String                               `json:"ДокументКодПодразделения,omitempty"`
	VidProbitiiaSkupki        *String                               `json:"ВидПробитияСкупки,omitempty"`
	ProbitNaKKT               *Boolean                              `json:"ПробитНаККТ,omitempty"`
	Stornirovan               *Boolean                              `json:"Сторнирован,omitempty"`
	Goods                     *[]DocumentSkupkaTovarovTovaryRowType `json:"Товары,omitempty"`
}

func (Purchase) APIEntityType() string {
	return "Document_СкупкаТоваров"
}
func NewPurchase(data string, prevError error) (*Purchase, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(Purchase)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreatePurchase(entity Purchase) (*Purchase, error) {
	return NewPurchase(c.createEntity(entity))
}
func (c *Client) Purchase(key PrimaryPurchase, fields []string) (*Purchase, error) {
	return NewPurchase(c.getEntity(key, fields))
}
func (c *Client) Purchases(where Where) (*[]Purchase, error) {
	type ReturnObj struct {
		Value []Purchase `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СкупкаТоваров", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdatePurchase(key PrimaryPurchase, entity Purchase) (*Purchase, error) {
	return NewPurchase(c.updateEntity(key, entity))
}
func (c *Client) DeletePurchase(key PrimaryPurchase) error {
	return c.removeEntity(key)
}

type DocumentSkupkaTovarovTovary struct {
	Key         Guid    `json:"Ref_Key,omitempty"`
	LineNumber  Int64   `json:"LineNumber,omitempty"`
	Weight      *Double `json:"Вес,omitempty"`
	ItemKey     *Guid   `json:"Номенклатура_Key,omitempty"`
	ObshchiiVes *Double `json:"ОбщийВес,omitempty"`
	Sum         *Double `json:"Сумма,omitempty"`
	TsenaZaGr   *Double `json:"ЦенаЗаГр,omitempty"`
	Opisanie    *String `json:"Описание,omitempty"`
}

func (DocumentSkupkaTovarovTovary) APIEntityType() string {
	return "Document_СкупкаТоваров_Товары"
}
func NewDocumentSkupkaTovarovTovary(data string, prevError error) (*DocumentSkupkaTovarovTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentSkupkaTovarovTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentSkupkaTovarovTovary(entity DocumentSkupkaTovarovTovary) (*DocumentSkupkaTovarovTovary, error) {
	return NewDocumentSkupkaTovarovTovary(c.createEntity(entity))
}
func (c *Client) DocumentSkupkaTovarovTovary(key PrimaryDocumentSkupkaTovarovTovary, fields []string) (*DocumentSkupkaTovarovTovary, error) {
	return NewDocumentSkupkaTovarovTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentSkupkaTovarovTovarys(where Where) (*[]DocumentSkupkaTovarovTovary, error) {
	type ReturnObj struct {
		Value []DocumentSkupkaTovarovTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СкупкаТоваров_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentSkupkaTovarovTovary(key PrimaryDocumentSkupkaTovarovTovary, entity DocumentSkupkaTovarovTovary) (*DocumentSkupkaTovarovTovary, error) {
	return NewDocumentSkupkaTovarovTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentSkupkaTovarovTovary(key PrimaryDocumentSkupkaTovarovTovary) error {
	return c.removeEntity(key)
}

type DocumentSchetFakturaPoluchennyi struct {
	Key                                      Guid                                                                       `json:"Ref_Key,omitempty"`
	DataVersion                              *String                                                                    `json:"DataVersion,omitempty"`
	Number                                   *String                                                                    `json:"Number,omitempty"`
	Date                                     *DateTime                                                                  `json:"Date,omitempty"`
	DeletionMark                             *Boolean                                                                   `json:"DeletionMark,omitempty"`
	Posted                                   *Boolean                                                                   `json:"Posted,omitempty"`
	DataVkhodiashchegoDokumenta              *DateTime                                                                  `json:"ДатаВходящегоДокумента,omitempty"`
	DokumentOsnovanie                        *String                                                                    `json:"ДокументОснование,omitempty"`
	DokumentSozdanVIuTD                      *Boolean                                                                   `json:"ДокументСозданВЮТД,omitempty"`
	Comment                                  *String                                                                    `json:"Комментарий,omitempty"`
	NomerVkhodiashchegoDokumenta             *String                                                                    `json:"НомерВходящегоДокумента,omitempty"`
	OrganizatsiiaKey                         *Guid                                                                      `json:"Организация_Key,omitempty"`
	SformirovanPriVvodeNachalnykhOstatkovNDS *Boolean                                                                   `json:"СформированПриВводеНачальныхОстатковНДС,omitempty"`
	TipDokumenta                             *String                                                                    `json:"ТипДокумента,omitempty"`
	NomerIskhodnogoDokumenta                 *String                                                                    `json:"НомерИсходногоДокумента,omitempty"`
	DataIskhodnogoDokumenta                  *DateTime                                                                  `json:"ДатаИсходногоДокумента,omitempty"`
	IskhodnyiDokumentKey                     *Guid                                                                      `json:"ИсходныйДокумент_Key,omitempty"`
	Korrektirovochnyi                        *Boolean                                                                   `json:"Корректировочный,omitempty"`
	SchetaFakturyVydannyePokupateliam        *[]DocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliamRowType `json:"СчетаФактурыВыданныеПокупателям,omitempty"`
	DokumentOsnovanieType                    *String                                                                    `json:"ДокументОснование_Type,omitempty"`
}

func (DocumentSchetFakturaPoluchennyi) APIEntityType() string {
	return "Document_СчетФактураПолученный"
}
func NewDocumentSchetFakturaPoluchennyi(data string, prevError error) (*DocumentSchetFakturaPoluchennyi, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentSchetFakturaPoluchennyi)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentSchetFakturaPoluchennyi(entity DocumentSchetFakturaPoluchennyi) (*DocumentSchetFakturaPoluchennyi, error) {
	return NewDocumentSchetFakturaPoluchennyi(c.createEntity(entity))
}
func (c *Client) DocumentSchetFakturaPoluchennyi(key PrimaryDocumentSchetFakturaPoluchennyi, fields []string) (*DocumentSchetFakturaPoluchennyi, error) {
	return NewDocumentSchetFakturaPoluchennyi(c.getEntity(key, fields))
}
func (c *Client) DocumentSchetFakturaPoluchennyis(where Where) (*[]DocumentSchetFakturaPoluchennyi, error) {
	type ReturnObj struct {
		Value []DocumentSchetFakturaPoluchennyi `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СчетФактураПолученный", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentSchetFakturaPoluchennyi(key PrimaryDocumentSchetFakturaPoluchennyi, entity DocumentSchetFakturaPoluchennyi) (*DocumentSchetFakturaPoluchennyi, error) {
	return NewDocumentSchetFakturaPoluchennyi(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentSchetFakturaPoluchennyi(key PrimaryDocumentSchetFakturaPoluchennyi) error {
	return c.removeEntity(key)
}

type DocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliam struct {
	Key                 Guid    `json:"Ref_Key,omitempty"`
	LineNumber          Int64   `json:"LineNumber,omitempty"`
	PokupatelKey        *Guid   `json:"Покупатель_Key,omitempty"`
	SchetFakturaKey     *Guid   `json:"СчетФактура_Key,omitempty"`
	SubkomissionerKey   *Guid   `json:"Субкомиссионер_Key,omitempty"`
	Sum                 *Double `json:"Сумма,omitempty"`
	NDS                 *Double `json:"НДС,omitempty"`
	SummaUvelichenie    *Double `json:"СуммаУвеличение,omitempty"`
	SummaUmenshenie     *Double `json:"СуммаУменьшение,omitempty"`
	SummaNDSUvelichenie *Double `json:"СуммаНДСУвеличение,omitempty"`
	SummaNDSUmenshenie  *Double `json:"СуммаНДСУменьшение,omitempty"`
}

func (DocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliam) APIEntityType() string {
	return "Document_СчетФактураПолученный_СчетаФактурыВыданныеПокупателям"
}
func NewDocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliam(data string, prevError error) (*DocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliam, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliam)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliam(entity DocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliam) (*DocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliam, error) {
	return NewDocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliam(c.createEntity(entity))
}
func (c *Client) DocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliam(key PrimaryDocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliam, fields []string) (*DocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliam, error) {
	return NewDocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliam(c.getEntity(key, fields))
}
func (c *Client) DocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliams(where Where) (*[]DocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliam, error) {
	type ReturnObj struct {
		Value []DocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliam `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СчетФактураПолученный_СчетаФактурыВыданныеПокупателям", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliam(key PrimaryDocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliam, entity DocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliam) (*DocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliam, error) {
	return NewDocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliam(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliam(key PrimaryDocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliam) error {
	return c.removeEntity(key)
}

type DocumentAktKhimicheskogoAnalizaMetalla struct {
	Key                                   Guid      `json:"Ref_Key,omitempty"`
	DataVersion                           *String   `json:"DataVersion,omitempty"`
	Number                                *String   `json:"Number,omitempty"`
	Date                                  *DateTime `json:"Date,omitempty"`
	DeletionMark                          *Boolean  `json:"DeletionMark,omitempty"`
	Posted                                *Boolean  `json:"Posted,omitempty"`
	Weight                                *Double   `json:"Вес,omitempty"`
	DataVkhodiashchegoDokumenta           *DateTime `json:"ДатаВходящегоДокумента,omitempty"`
	DogovorKontragentaKey                 *Guid     `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie                     *String   `json:"ДокументОснование,omitempty"`
	Comment                               *String   `json:"Комментарий,omitempty"`
	KontragentKey                         *Guid     `json:"Контрагент_Key,omitempty"`
	NomenklaturaOprikhodovaniiaMetallaKey *Guid     `json:"НоменклатураОприходованияМеталла_Key,omitempty"`
	NomerVkhodiashchegoDokumenta          *String   `json:"НомерВходящегоДокумента,omitempty"`
	OrganizatsiiaKey                      *Guid     `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                      *Guid     `json:"Ответственный_Key,omitempty"`
	ProbaLoma                             *Double   `json:"ПробаЛома,omitempty"`
	DepartmentKey                         *Guid     `json:"Склад_Key,omitempty"`
	UkazanVesChistoty                     *Boolean  `json:"УказанВесЧистоты,omitempty"`
	PodrazdelenieKey                      *Guid     `json:"Подразделение_Key,omitempty"`
	Cost                                  *Double   `json:"Стоимость,omitempty"`
	SumOfDocument                         *Double   `json:"СуммаДокумента,omitempty"`
	DokumentOsnovanieType                 *String   `json:"ДокументОснование_Type,omitempty"`
}

func (DocumentAktKhimicheskogoAnalizaMetalla) APIEntityType() string {
	return "Document_АктХимическогоАнализаМеталла"
}
func NewDocumentAktKhimicheskogoAnalizaMetalla(data string, prevError error) (*DocumentAktKhimicheskogoAnalizaMetalla, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentAktKhimicheskogoAnalizaMetalla)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentAktKhimicheskogoAnalizaMetalla(entity DocumentAktKhimicheskogoAnalizaMetalla) (*DocumentAktKhimicheskogoAnalizaMetalla, error) {
	return NewDocumentAktKhimicheskogoAnalizaMetalla(c.createEntity(entity))
}
func (c *Client) DocumentAktKhimicheskogoAnalizaMetalla(key PrimaryDocumentAktKhimicheskogoAnalizaMetalla, fields []string) (*DocumentAktKhimicheskogoAnalizaMetalla, error) {
	return NewDocumentAktKhimicheskogoAnalizaMetalla(c.getEntity(key, fields))
}
func (c *Client) DocumentAktKhimicheskogoAnalizaMetallas(where Where) (*[]DocumentAktKhimicheskogoAnalizaMetalla, error) {
	type ReturnObj struct {
		Value []DocumentAktKhimicheskogoAnalizaMetalla `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_АктХимическогоАнализаМеталла", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentAktKhimicheskogoAnalizaMetalla(key PrimaryDocumentAktKhimicheskogoAnalizaMetalla, entity DocumentAktKhimicheskogoAnalizaMetalla) (*DocumentAktKhimicheskogoAnalizaMetalla, error) {
	return NewDocumentAktKhimicheskogoAnalizaMetalla(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentAktKhimicheskogoAnalizaMetalla(key PrimaryDocumentAktKhimicheskogoAnalizaMetalla) error {
	return c.removeEntity(key)
}

type CatalogfmKartochkaKontragenta struct {
	Key               Guid                                                     `json:"Ref_Key,omitempty"`
	DataVersion       *String                                                  `json:"DataVersion,omitempty"`
	Description       *String                                                  `json:"Description,omitempty"`
	Code              *String                                                  `json:"Code,omitempty"`
	Owner             *String                                                  `json:"Owner,omitempty"`
	DeletionMark      *Boolean                                                 `json:"DeletionMark,omitempty"`
	DannyeKontragenta *[]CatalogfmKartochkaKontragentaDannyeKontragentaRowType `json:"ДанныеКонтрагента,omitempty"`
	OwnerType         *String                                                  `json:"Owner_Type,omitempty"`
}

func (CatalogfmKartochkaKontragenta) APIEntityType() string {
	return "Catalog_фмКарточкаКонтрагента"
}
func NewCatalogfmKartochkaKontragenta(data string, prevError error) (*CatalogfmKartochkaKontragenta, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogfmKartochkaKontragenta)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogfmKartochkaKontragenta(entity CatalogfmKartochkaKontragenta) (*CatalogfmKartochkaKontragenta, error) {
	return NewCatalogfmKartochkaKontragenta(c.createEntity(entity))
}
func (c *Client) CatalogfmKartochkaKontragenta(key PrimaryCatalogfmKartochkaKontragenta, fields []string) (*CatalogfmKartochkaKontragenta, error) {
	return NewCatalogfmKartochkaKontragenta(c.getEntity(key, fields))
}
func (c *Client) CatalogfmKartochkaKontragentas(where Where) (*[]CatalogfmKartochkaKontragenta, error) {
	type ReturnObj struct {
		Value []CatalogfmKartochkaKontragenta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_фмКарточкаКонтрагента", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogfmKartochkaKontragenta(key PrimaryCatalogfmKartochkaKontragenta, entity CatalogfmKartochkaKontragenta) (*CatalogfmKartochkaKontragenta, error) {
	return NewCatalogfmKartochkaKontragenta(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogfmKartochkaKontragenta(key PrimaryCatalogfmKartochkaKontragenta) error {
	return c.removeEntity(key)
}

type CatalogfmKartochkaKontragentaDannyeKontragenta struct {
	Key           Guid    `json:"Ref_Key,omitempty"`
	LineNumber    Int64   `json:"LineNumber,omitempty"`
	Kliuch        *String `json:"Ключ,omitempty"`
	Znachenie     *String `json:"Значение,omitempty"`
	ZnachenieType *String `json:"Значение_Type,omitempty"`
}

func (CatalogfmKartochkaKontragentaDannyeKontragenta) APIEntityType() string {
	return "Catalog_фмКарточкаКонтрагента_ДанныеКонтрагента"
}
func NewCatalogfmKartochkaKontragentaDannyeKontragenta(data string, prevError error) (*CatalogfmKartochkaKontragentaDannyeKontragenta, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogfmKartochkaKontragentaDannyeKontragenta)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogfmKartochkaKontragentaDannyeKontragenta(entity CatalogfmKartochkaKontragentaDannyeKontragenta) (*CatalogfmKartochkaKontragentaDannyeKontragenta, error) {
	return NewCatalogfmKartochkaKontragentaDannyeKontragenta(c.createEntity(entity))
}
func (c *Client) CatalogfmKartochkaKontragentaDannyeKontragenta(key PrimaryCatalogfmKartochkaKontragentaDannyeKontragenta, fields []string) (*CatalogfmKartochkaKontragentaDannyeKontragenta, error) {
	return NewCatalogfmKartochkaKontragentaDannyeKontragenta(c.getEntity(key, fields))
}
func (c *Client) CatalogfmKartochkaKontragentaDannyeKontragentas(where Where) (*[]CatalogfmKartochkaKontragentaDannyeKontragenta, error) {
	type ReturnObj struct {
		Value []CatalogfmKartochkaKontragentaDannyeKontragenta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_фмКарточкаКонтрагента_ДанныеКонтрагента", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogfmKartochkaKontragentaDannyeKontragenta(key PrimaryCatalogfmKartochkaKontragentaDannyeKontragenta, entity CatalogfmKartochkaKontragentaDannyeKontragenta) (*CatalogfmKartochkaKontragentaDannyeKontragenta, error) {
	return NewCatalogfmKartochkaKontragentaDannyeKontragenta(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogfmKartochkaKontragentaDannyeKontragenta(key PrimaryCatalogfmKartochkaKontragentaDannyeKontragenta) error {
	return c.removeEntity(key)
}

type DocumentSpisanieProsrochennykhSertifikatov struct {
	Key                  Guid                                                            `json:"Ref_Key,omitempty"`
	DataVersion          *String                                                         `json:"DataVersion,omitempty"`
	Number               *String                                                         `json:"Number,omitempty"`
	Date                 *DateTime                                                       `json:"Date,omitempty"`
	DeletionMark         *Boolean                                                        `json:"DeletionMark,omitempty"`
	Posted               *Boolean                                                        `json:"Posted,omitempty"`
	DokumentSozdanVIuTD  *Boolean                                                        `json:"ДокументСозданВЮТД,omitempty"`
	KolichestvoDokumenta *Int64                                                          `json:"КоличествоДокумента,omitempty"`
	Komentarii           *String                                                         `json:"Коментарий,omitempty"`
	OtvetstvennyiKey     *Guid                                                           `json:"Ответственный_Key,omitempty"`
	SumOfDocument        *Double                                                         `json:"СуммаДокумента,omitempty"`
	Sertifikaty          *[]DocumentSpisanieProsrochennykhSertifikatovSertifikatyRowType `json:"Сертификаты,omitempty"`
}

func (DocumentSpisanieProsrochennykhSertifikatov) APIEntityType() string {
	return "Document_СписаниеПросроченныхСертификатов"
}
func NewDocumentSpisanieProsrochennykhSertifikatov(data string, prevError error) (*DocumentSpisanieProsrochennykhSertifikatov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentSpisanieProsrochennykhSertifikatov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentSpisanieProsrochennykhSertifikatov(entity DocumentSpisanieProsrochennykhSertifikatov) (*DocumentSpisanieProsrochennykhSertifikatov, error) {
	return NewDocumentSpisanieProsrochennykhSertifikatov(c.createEntity(entity))
}
func (c *Client) DocumentSpisanieProsrochennykhSertifikatov(key PrimaryDocumentSpisanieProsrochennykhSertifikatov, fields []string) (*DocumentSpisanieProsrochennykhSertifikatov, error) {
	return NewDocumentSpisanieProsrochennykhSertifikatov(c.getEntity(key, fields))
}
func (c *Client) DocumentSpisanieProsrochennykhSertifikatovs(where Where) (*[]DocumentSpisanieProsrochennykhSertifikatov, error) {
	type ReturnObj struct {
		Value []DocumentSpisanieProsrochennykhSertifikatov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СписаниеПросроченныхСертификатов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentSpisanieProsrochennykhSertifikatov(key PrimaryDocumentSpisanieProsrochennykhSertifikatov, entity DocumentSpisanieProsrochennykhSertifikatov) (*DocumentSpisanieProsrochennykhSertifikatov, error) {
	return NewDocumentSpisanieProsrochennykhSertifikatov(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentSpisanieProsrochennykhSertifikatov(key PrimaryDocumentSpisanieProsrochennykhSertifikatov) error {
	return c.removeEntity(key)
}

type DocumentSpisanieProsrochennykhSertifikatovSertifikaty struct {
	Key                  Guid      `json:"Ref_Key,omitempty"`
	LineNumber           Int64     `json:"LineNumber,omitempty"`
	Quantity             *Int64    `json:"Количество,omitempty"`
	SertifikatKey        *Guid     `json:"Сертификат_Key,omitempty"`
	SrokDeistviiaDo      *DateTime `json:"СрокДействияДо,omitempty"`
	Sum                  *Double   `json:"Сумма,omitempty"`
	OrganizatsiiaKey     *Guid     `json:"Организация_Key,omitempty"`
	DokumentProdazhi     *String   `json:"ДокументПродажи,omitempty"`
	DokumentProdazhiType *String   `json:"ДокументПродажи_Type,omitempty"`
}

func (DocumentSpisanieProsrochennykhSertifikatovSertifikaty) APIEntityType() string {
	return "Document_СписаниеПросроченныхСертификатов_Сертификаты"
}
func NewDocumentSpisanieProsrochennykhSertifikatovSertifikaty(data string, prevError error) (*DocumentSpisanieProsrochennykhSertifikatovSertifikaty, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentSpisanieProsrochennykhSertifikatovSertifikaty)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentSpisanieProsrochennykhSertifikatovSertifikaty(entity DocumentSpisanieProsrochennykhSertifikatovSertifikaty) (*DocumentSpisanieProsrochennykhSertifikatovSertifikaty, error) {
	return NewDocumentSpisanieProsrochennykhSertifikatovSertifikaty(c.createEntity(entity))
}
func (c *Client) DocumentSpisanieProsrochennykhSertifikatovSertifikaty(key PrimaryDocumentSpisanieProsrochennykhSertifikatovSertifikaty, fields []string) (*DocumentSpisanieProsrochennykhSertifikatovSertifikaty, error) {
	return NewDocumentSpisanieProsrochennykhSertifikatovSertifikaty(c.getEntity(key, fields))
}
func (c *Client) DocumentSpisanieProsrochennykhSertifikatovSertifikatys(where Where) (*[]DocumentSpisanieProsrochennykhSertifikatovSertifikaty, error) {
	type ReturnObj struct {
		Value []DocumentSpisanieProsrochennykhSertifikatovSertifikaty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СписаниеПросроченныхСертификатов_Сертификаты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentSpisanieProsrochennykhSertifikatovSertifikaty(key PrimaryDocumentSpisanieProsrochennykhSertifikatovSertifikaty, entity DocumentSpisanieProsrochennykhSertifikatovSertifikaty) (*DocumentSpisanieProsrochennykhSertifikatovSertifikaty, error) {
	return NewDocumentSpisanieProsrochennykhSertifikatovSertifikaty(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentSpisanieProsrochennykhSertifikatovSertifikaty(key PrimaryDocumentSpisanieProsrochennykhSertifikatovSertifikaty) error {
	return c.removeEntity(key)
}

type DocumentZakrytieAvansovPoGrafikuPlatezhei struct {
	Key              Guid                                                           `json:"Ref_Key,omitempty"`
	DataVersion      *String                                                        `json:"DataVersion,omitempty"`
	Number           *String                                                        `json:"Number,omitempty"`
	Date             *DateTime                                                      `json:"Date,omitempty"`
	DeletionMark     *Boolean                                                       `json:"DeletionMark,omitempty"`
	Posted           *Boolean                                                       `json:"Posted,omitempty"`
	OrganizatsiiaKey *Guid                                                          `json:"Организация_Key,omitempty"`
	Kontragenty      *[]DocumentZakrytieAvansovPoGrafikuPlatezheiKontragentyRowType `json:"Контрагенты,omitempty"`
}

func (DocumentZakrytieAvansovPoGrafikuPlatezhei) APIEntityType() string {
	return "Document_ЗакрытиеАвансовПоГрафикуПлатежей"
}
func NewDocumentZakrytieAvansovPoGrafikuPlatezhei(data string, prevError error) (*DocumentZakrytieAvansovPoGrafikuPlatezhei, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentZakrytieAvansovPoGrafikuPlatezhei)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentZakrytieAvansovPoGrafikuPlatezhei(entity DocumentZakrytieAvansovPoGrafikuPlatezhei) (*DocumentZakrytieAvansovPoGrafikuPlatezhei, error) {
	return NewDocumentZakrytieAvansovPoGrafikuPlatezhei(c.createEntity(entity))
}
func (c *Client) DocumentZakrytieAvansovPoGrafikuPlatezhei(key PrimaryDocumentZakrytieAvansovPoGrafikuPlatezhei, fields []string) (*DocumentZakrytieAvansovPoGrafikuPlatezhei, error) {
	return NewDocumentZakrytieAvansovPoGrafikuPlatezhei(c.getEntity(key, fields))
}
func (c *Client) DocumentZakrytieAvansovPoGrafikuPlatezheis(where Where) (*[]DocumentZakrytieAvansovPoGrafikuPlatezhei, error) {
	type ReturnObj struct {
		Value []DocumentZakrytieAvansovPoGrafikuPlatezhei `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗакрытиеАвансовПоГрафикуПлатежей", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentZakrytieAvansovPoGrafikuPlatezhei(key PrimaryDocumentZakrytieAvansovPoGrafikuPlatezhei, entity DocumentZakrytieAvansovPoGrafikuPlatezhei) (*DocumentZakrytieAvansovPoGrafikuPlatezhei, error) {
	return NewDocumentZakrytieAvansovPoGrafikuPlatezhei(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentZakrytieAvansovPoGrafikuPlatezhei(key PrimaryDocumentZakrytieAvansovPoGrafikuPlatezhei) error {
	return c.removeEntity(key)
}

type DocumentZakrytieAvansovPoGrafikuPlatezheiKontragenty struct {
	Key                   Guid  `json:"Ref_Key,omitempty"`
	LineNumber            Int64 `json:"LineNumber,omitempty"`
	DogovorKontragentaKey *Guid `json:"ДоговорКонтрагента_Key,omitempty"`
	KontragentKey         *Guid `json:"Контрагент_Key,omitempty"`
}

func (DocumentZakrytieAvansovPoGrafikuPlatezheiKontragenty) APIEntityType() string {
	return "Document_ЗакрытиеАвансовПоГрафикуПлатежей_Контрагенты"
}
func NewDocumentZakrytieAvansovPoGrafikuPlatezheiKontragenty(data string, prevError error) (*DocumentZakrytieAvansovPoGrafikuPlatezheiKontragenty, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentZakrytieAvansovPoGrafikuPlatezheiKontragenty)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentZakrytieAvansovPoGrafikuPlatezheiKontragenty(entity DocumentZakrytieAvansovPoGrafikuPlatezheiKontragenty) (*DocumentZakrytieAvansovPoGrafikuPlatezheiKontragenty, error) {
	return NewDocumentZakrytieAvansovPoGrafikuPlatezheiKontragenty(c.createEntity(entity))
}
func (c *Client) DocumentZakrytieAvansovPoGrafikuPlatezheiKontragenty(key PrimaryDocumentZakrytieAvansovPoGrafikuPlatezheiKontragenty, fields []string) (*DocumentZakrytieAvansovPoGrafikuPlatezheiKontragenty, error) {
	return NewDocumentZakrytieAvansovPoGrafikuPlatezheiKontragenty(c.getEntity(key, fields))
}
func (c *Client) DocumentZakrytieAvansovPoGrafikuPlatezheiKontragentys(where Where) (*[]DocumentZakrytieAvansovPoGrafikuPlatezheiKontragenty, error) {
	type ReturnObj struct {
		Value []DocumentZakrytieAvansovPoGrafikuPlatezheiKontragenty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗакрытиеАвансовПоГрафикуПлатежей_Контрагенты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentZakrytieAvansovPoGrafikuPlatezheiKontragenty(key PrimaryDocumentZakrytieAvansovPoGrafikuPlatezheiKontragenty, entity DocumentZakrytieAvansovPoGrafikuPlatezheiKontragenty) (*DocumentZakrytieAvansovPoGrafikuPlatezheiKontragenty, error) {
	return NewDocumentZakrytieAvansovPoGrafikuPlatezheiKontragenty(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentZakrytieAvansovPoGrafikuPlatezheiKontragenty(key PrimaryDocumentZakrytieAvansovPoGrafikuPlatezheiKontragenty) error {
	return c.removeEntity(key)
}

type CatalogTipySistemNalogooblozheniiaKKT struct {
	Key                          Guid     `json:"Ref_Key,omitempty"`
	DataVersion                  *String  `json:"DataVersion,omitempty"`
	Description                  *String  `json:"Description,omitempty"`
	Code                         *String  `json:"Code,omitempty"`
	DeletionMark                 *Boolean `json:"DeletionMark,omitempty"`
	ZnachenieKomandyDliaAtol     *Int16   `json:"ЗначениеКомандыДляАтол,omitempty"`
	ZnachenieKomandyDliaShtrikh  *Int16   `json:"ЗначениеКомандыДляШтрих,omitempty"`
	FormatPF                     *String  `json:"ФорматПФ,omitempty"`
	ZnachenieKomandyDliaAtol10kh *String  `json:"ЗначениеКомандыДляАтол10х,omitempty"`
}

func (CatalogTipySistemNalogooblozheniiaKKT) APIEntityType() string {
	return "Catalog_ТипыСистемНалогообложенияККТ"
}
func NewCatalogTipySistemNalogooblozheniiaKKT(data string, prevError error) (*CatalogTipySistemNalogooblozheniiaKKT, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogTipySistemNalogooblozheniiaKKT)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogTipySistemNalogooblozheniiaKKT(entity CatalogTipySistemNalogooblozheniiaKKT) (*CatalogTipySistemNalogooblozheniiaKKT, error) {
	return NewCatalogTipySistemNalogooblozheniiaKKT(c.createEntity(entity))
}
func (c *Client) CatalogTipySistemNalogooblozheniiaKKT(key PrimaryCatalogTipySistemNalogooblozheniiaKKT, fields []string) (*CatalogTipySistemNalogooblozheniiaKKT, error) {
	return NewCatalogTipySistemNalogooblozheniiaKKT(c.getEntity(key, fields))
}
func (c *Client) CatalogTipySistemNalogooblozheniiaKKTs(where Where) (*[]CatalogTipySistemNalogooblozheniiaKKT, error) {
	type ReturnObj struct {
		Value []CatalogTipySistemNalogooblozheniiaKKT `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ТипыСистемНалогообложенияККТ", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogTipySistemNalogooblozheniiaKKT(key PrimaryCatalogTipySistemNalogooblozheniiaKKT, entity CatalogTipySistemNalogooblozheniiaKKT) (*CatalogTipySistemNalogooblozheniiaKKT, error) {
	return NewCatalogTipySistemNalogooblozheniiaKKT(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogTipySistemNalogooblozheniiaKKT(key PrimaryCatalogTipySistemNalogooblozheniiaKKT) error {
	return c.removeEntity(key)
}

type DocumentAkkreditivPeredannyi struct {
	Key                              Guid                                                       `json:"Ref_Key,omitempty"`
	DataVersion                      *String                                                    `json:"DataVersion,omitempty"`
	Number                           *String                                                    `json:"Number,omitempty"`
	Date                             *DateTime                                                  `json:"Date,omitempty"`
	DeletionMark                     *Boolean                                                   `json:"DeletionMark,omitempty"`
	Posted                           *Boolean                                                   `json:"Posted,omitempty"`
	ValiutaDokumentaKey              *Guid                                                      `json:"ВалютаДокумента_Key,omitempty"`
	VidAkkreditiva                   *String                                                    `json:"ВидАккредитива,omitempty"`
	OperationType                    *String                                                    `json:"ВидОперации,omitempty"`
	VidPlatezha                      *String                                                    `json:"ВидПлатежа,omitempty"`
	DataOplaty                       *DateTime                                                  `json:"ДатаОплаты,omitempty"`
	DogovorKontragentaKey            *Guid                                                      `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie                *String                                                    `json:"ДокументОснование,omitempty"`
	DokumentyKPredieiavleniiu        *String                                                    `json:"ДокументыКПредъявлению,omitempty"`
	DopolnitelnyeUsloviia            *String                                                    `json:"ДополнительныеУсловия,omitempty"`
	ZaiavkaNaRaskhodovanieSredstvKey *Guid                                                      `json:"ЗаявкаНаРасходованиеСредств_Key,omitempty"`
	INNPlatelshchika                 *String                                                    `json:"ИННПлательщика,omitempty"`
	INNPoluchatelia                  *String                                                    `json:"ИННПолучателя,omitempty"`
	Comment                          *String                                                    `json:"Комментарий,omitempty"`
	KontragentKey                    *Guid                                                      `json:"Контрагент_Key,omitempty"`
	KPPPlatelshchika                 *String                                                    `json:"КПППлательщика,omitempty"`
	KPPPoluchatelia                  *String                                                    `json:"КПППолучателя,omitempty"`
	NaznacheniePlatezha              *String                                                    `json:"НазначениеПлатежа,omitempty"`
	Oplacheno                        *Boolean                                                   `json:"Оплачено,omitempty"`
	OrganizatsiiaKey                 *Guid                                                      `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                 *Guid                                                      `json:"Ответственный_Key,omitempty"`
	OtrazhenoVOperUchete             *Boolean                                                   `json:"ОтраженоВОперУчете,omitempty"`
	SrokDeistviia                    *DateTime                                                  `json:"СрокДействия,omitempty"`
	TypeOfMovingMoneyKey             *Guid                                                      `json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SumOfDocument                    *Double                                                    `json:"СуммаДокумента,omitempty"`
	SchetDeponenta                   *String                                                    `json:"СчетДепонента,omitempty"`
	SchetKontragentaKey              *Guid                                                      `json:"СчетКонтрагента_Key,omitempty"`
	SchetOrganizatsiiKey             *Guid                                                      `json:"СчетОрганизации_Key,omitempty"`
	TekstPlatelshchika               *String                                                    `json:"ТекстПлательщика,omitempty"`
	TekstPoluchatelia                *String                                                    `json:"ТекстПолучателя,omitempty"`
	TipDokumenta                     *String                                                    `json:"ТипДокумента,omitempty"`
	UslovieOplaty                    *String                                                    `json:"УсловиеОплаты,omitempty"`
	ChastichnaiaOplata               *Boolean                                                   `json:"ЧастичнаяОплата,omitempty"`
	ExtendedPayments                 *[]DocumentAkkreditivPeredannyiRasshifrovkaPlatezhaRowType `json:"РасшифровкаПлатежа,omitempty"`
	RekvizityKontragenta             *[]DocumentAkkreditivPeredannyiRekvizityKontragentaRowType `json:"РеквизитыКонтрагента,omitempty"`
	DokumentOsnovanieType            *String                                                    `json:"ДокументОснование_Type,omitempty"`
}

func (DocumentAkkreditivPeredannyi) APIEntityType() string {
	return "Document_АккредитивПереданный"
}
func NewDocumentAkkreditivPeredannyi(data string, prevError error) (*DocumentAkkreditivPeredannyi, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentAkkreditivPeredannyi)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentAkkreditivPeredannyi(entity DocumentAkkreditivPeredannyi) (*DocumentAkkreditivPeredannyi, error) {
	return NewDocumentAkkreditivPeredannyi(c.createEntity(entity))
}
func (c *Client) DocumentAkkreditivPeredannyi(key PrimaryDocumentAkkreditivPeredannyi, fields []string) (*DocumentAkkreditivPeredannyi, error) {
	return NewDocumentAkkreditivPeredannyi(c.getEntity(key, fields))
}
func (c *Client) DocumentAkkreditivPeredannyis(where Where) (*[]DocumentAkkreditivPeredannyi, error) {
	type ReturnObj struct {
		Value []DocumentAkkreditivPeredannyi `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_АккредитивПереданный", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentAkkreditivPeredannyi(key PrimaryDocumentAkkreditivPeredannyi, entity DocumentAkkreditivPeredannyi) (*DocumentAkkreditivPeredannyi, error) {
	return NewDocumentAkkreditivPeredannyi(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentAkkreditivPeredannyi(key PrimaryDocumentAkkreditivPeredannyi) error {
	return c.removeEntity(key)
}

type DocumentAkkreditivPeredannyiRasshifrovkaPlatezha struct {
	Key                              Guid    `json:"Ref_Key,omitempty"`
	LineNumber                       Int64   `json:"LineNumber,omitempty"`
	DogovorKontragentaKey            *Guid   `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentPlanirovaniiaPlatezhaKey *Guid   `json:"ДокументПланированияПлатежа_Key,omitempty"`
	KratnostVzaimoraschetov          *Int64  `json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov              *Double `json:"КурсВзаиморасчетов,omitempty"`
	KursVzaimoraschetovPlan          *Double `json:"КурсВзаиморасчетовПлан,omitempty"`
	ProektKey                        *Guid   `json:"Проект_Key,omitempty"`
	Sdelka                           *String `json:"Сделка,omitempty"`
	StavkaNDS                        *String `json:"СтавкаНДС,omitempty"`
	TypeOfMovingMoneyKey             *Guid   `json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov             *Double `json:"СуммаВзаиморасчетов,omitempty"`
	SummaNDS                         *Double `json:"СуммаНДС,omitempty"`
	Sum                              *Double `json:"СуммаПлатежа,omitempty"`
	SummaPlatezhaPlan                *Double `json:"СуммаПлатежаПлан,omitempty"`
	SdelkaType                       *String `json:"Сделка_Type,omitempty"`
}

func (DocumentAkkreditivPeredannyiRasshifrovkaPlatezha) APIEntityType() string {
	return "Document_АккредитивПереданный_РасшифровкаПлатежа"
}
func NewDocumentAkkreditivPeredannyiRasshifrovkaPlatezha(data string, prevError error) (*DocumentAkkreditivPeredannyiRasshifrovkaPlatezha, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentAkkreditivPeredannyiRasshifrovkaPlatezha)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentAkkreditivPeredannyiRasshifrovkaPlatezha(entity DocumentAkkreditivPeredannyiRasshifrovkaPlatezha) (*DocumentAkkreditivPeredannyiRasshifrovkaPlatezha, error) {
	return NewDocumentAkkreditivPeredannyiRasshifrovkaPlatezha(c.createEntity(entity))
}
func (c *Client) DocumentAkkreditivPeredannyiRasshifrovkaPlatezha(key PrimaryDocumentAkkreditivPeredannyiRasshifrovkaPlatezha, fields []string) (*DocumentAkkreditivPeredannyiRasshifrovkaPlatezha, error) {
	return NewDocumentAkkreditivPeredannyiRasshifrovkaPlatezha(c.getEntity(key, fields))
}
func (c *Client) DocumentAkkreditivPeredannyiRasshifrovkaPlatezhas(where Where) (*[]DocumentAkkreditivPeredannyiRasshifrovkaPlatezha, error) {
	type ReturnObj struct {
		Value []DocumentAkkreditivPeredannyiRasshifrovkaPlatezha `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_АккредитивПереданный_РасшифровкаПлатежа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentAkkreditivPeredannyiRasshifrovkaPlatezha(key PrimaryDocumentAkkreditivPeredannyiRasshifrovkaPlatezha, entity DocumentAkkreditivPeredannyiRasshifrovkaPlatezha) (*DocumentAkkreditivPeredannyiRasshifrovkaPlatezha, error) {
	return NewDocumentAkkreditivPeredannyiRasshifrovkaPlatezha(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentAkkreditivPeredannyiRasshifrovkaPlatezha(key PrimaryDocumentAkkreditivPeredannyiRasshifrovkaPlatezha) error {
	return c.removeEntity(key)
}

type DocumentAkkreditivPeredannyiRekvizityKontragenta struct {
	Key            Guid    `json:"Ref_Key,omitempty"`
	LineNumber     Int64   `json:"LineNumber,omitempty"`
	Znachenie      *String `json:"Значение,omitempty"`
	Predstavlenie  *String `json:"Представление,omitempty"`
	Rekvizit       *String `json:"Реквизит,omitempty"`
	TipKontragenta *String `json:"ТипКонтрагента,omitempty"`
}

func (DocumentAkkreditivPeredannyiRekvizityKontragenta) APIEntityType() string {
	return "Document_АккредитивПереданный_РеквизитыКонтрагента"
}
func NewDocumentAkkreditivPeredannyiRekvizityKontragenta(data string, prevError error) (*DocumentAkkreditivPeredannyiRekvizityKontragenta, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentAkkreditivPeredannyiRekvizityKontragenta)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentAkkreditivPeredannyiRekvizityKontragenta(entity DocumentAkkreditivPeredannyiRekvizityKontragenta) (*DocumentAkkreditivPeredannyiRekvizityKontragenta, error) {
	return NewDocumentAkkreditivPeredannyiRekvizityKontragenta(c.createEntity(entity))
}
func (c *Client) DocumentAkkreditivPeredannyiRekvizityKontragenta(key PrimaryDocumentAkkreditivPeredannyiRekvizityKontragenta, fields []string) (*DocumentAkkreditivPeredannyiRekvizityKontragenta, error) {
	return NewDocumentAkkreditivPeredannyiRekvizityKontragenta(c.getEntity(key, fields))
}
func (c *Client) DocumentAkkreditivPeredannyiRekvizityKontragentas(where Where) (*[]DocumentAkkreditivPeredannyiRekvizityKontragenta, error) {
	type ReturnObj struct {
		Value []DocumentAkkreditivPeredannyiRekvizityKontragenta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_АккредитивПереданный_РеквизитыКонтрагента", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentAkkreditivPeredannyiRekvizityKontragenta(key PrimaryDocumentAkkreditivPeredannyiRekvizityKontragenta, entity DocumentAkkreditivPeredannyiRekvizityKontragenta) (*DocumentAkkreditivPeredannyiRekvizityKontragenta, error) {
	return NewDocumentAkkreditivPeredannyiRekvizityKontragenta(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentAkkreditivPeredannyiRekvizityKontragenta(key PrimaryDocumentAkkreditivPeredannyiRekvizityKontragenta) error {
	return c.removeEntity(key)
}

type Supplier struct {
	Key                                              Guid                                         `json:"Ref_Key,omitempty"`
	DataVersion                                      *String                                      `json:"DataVersion,omitempty"`
	Description                                      *String                                      `json:"Description,omitempty"`
	Code                                             *String                                      `json:"Code,omitempty"`
	ParentKey                                        *Guid                                        `json:"Parent_Key,omitempty"`
	IsFolder                                         *Boolean                                     `json:"IsFolder,omitempty"`
	DeletionMark                                     *Boolean                                     `json:"DeletionMark,omitempty"`
	VidDostavki                                      *String                                      `json:"ВидДоставки,omitempty"`
	GolovnoiKontragentKey                            *Guid                                        `json:"ГоловнойКонтрагент_Key,omitempty"`
	DokumentUdostoveriaiushchiiLichnost              *String                                      `json:"ДокументУдостоверяющийЛичность,omitempty"`
	DopolnitelnoeOpisanie                            *String                                      `json:"ДополнительноеОписание,omitempty"`
	INN                                              *String                                      `json:"ИНН,omitempty"`
	IstochnikInformatsiiPriObrashcheniiKey           *Guid                                        `json:"ИсточникИнформацииПриОбращении_Key,omitempty"`
	KodPoOKPO                                        *String                                      `json:"КодПоОКПО,omitempty"`
	Comment                                          *String                                      `json:"Комментарий,omitempty"`
	KPP                                              *String                                      `json:"КПП,omitempty"`
	NaimenovaniePolnoe                               *String                                      `json:"НаименованиеПолное,omitempty"`
	OsnovnoeKontaktnoeLitsoKey                       *Guid                                        `json:"ОсновноеКонтактноеЛицо_Key,omitempty"`
	OsnovnoiBankovskiiSchetKey                       *Guid                                        `json:"ОсновнойБанковскийСчет_Key,omitempty"`
	OsnovnoiVidDeiatelnostiKey                       *Guid                                        `json:"ОсновнойВидДеятельности_Key,omitempty"`
	OsnovnoiDogovorKontragentaKey                    *Guid                                        `json:"ОсновнойДоговорКонтрагента_Key,omitempty"`
	OsnovnoiMenedzherPokupateliaKey                  *Guid                                        `json:"ОсновнойМенеджерПокупателя_Key,omitempty"`
	Pokupatel                                        *Boolean                                     `json:"Покупатель,omitempty"`
	Postavshchik                                     *Boolean                                     `json:"Поставщик,omitempty"`
	RaspisanieRabotyStrokoi                          *String                                      `json:"РасписаниеРаботыСтрокой,omitempty"`
	SrokVypolneniiaZakazaPostavshchikom              *Int16                                       `json:"СрокВыполненияЗаказаПоставщиком,omitempty"`
	SrokDeistviiaSvidetelstvaOPostanovkeNaSpetsUchet *DateTime                                    `json:"СрокДействияСвидетельстваОПостановкеНаСпецУчет,omitempty"`
	IurFizLitso                                      *String                                      `json:"ЮрФизЛицо,omitempty"`
	LoginInternetSaita                               *String                                      `json:"ЛогинИнтернетСайта,omitempty"`
	SvidetelstvoDataVydachi                          *DateTime                                    `json:"СвидетельствоДатаВыдачи,omitempty"`
	SvidetelstvoSeriiaNomer                          *String                                      `json:"СвидетельствоСерияНомер,omitempty"`
	KodPoOKATO                                       *String                                      `json:"КодПоОКАТО,omitempty"`
	KodIMNS                                          *String                                      `json:"КодИМНС,omitempty"`
	NaimenovanieIFNS                                 *String                                      `json:"НаименованиеИФНС,omitempty"`
	KodPoOKVED                                       *String                                      `json:"КодПоОКВЭД,omitempty"`
	OGRN                                             *String                                      `json:"ОГРН,omitempty"`
	NeRezident                                       *Boolean                                     `json:"НеРезидент,omitempty"`
	DataRozhdeniia                                   *DateTime                                    `json:"ДатаРождения,omitempty"`
	OshibkaINN                                       *String                                      `json:"ОшибкаИНН,omitempty"`
	OshibkaKPP                                       *String                                      `json:"ОшибкаКПП,omitempty"`
	StranaRegistratsiiKey                            *Guid                                        `json:"СтранаРегистрации_Key,omitempty"`
	BIdentifikator                                   *String                                      `json:"Б_Идентификатор,omitempty"`
	BNomerVersii                                     *String                                      `json:"Б_НомерВерсии,omitempty"`
	VidyDeiatelnosti                                 *[]CatalogKontragentyVidyDeiatelnostiRowType `json:"ВидыДеятельности,omitempty"`
}

func (Supplier) APIEntityType() string {
	return "Catalog_Контрагенты"
}
func NewSupplier(data string, prevError error) (*Supplier, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(Supplier)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateSupplier(entity Supplier) (*Supplier, error) {
	return NewSupplier(c.createEntity(entity))
}
func (c *Client) Supplier(key PrimarySupplier, fields []string) (*Supplier, error) {
	return NewSupplier(c.getEntity(key, fields))
}
func (c *Client) Suppliers(where Where) (*[]Supplier, error) {
	type ReturnObj struct {
		Value []Supplier `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Контрагенты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateSupplier(key PrimarySupplier, entity Supplier) (*Supplier, error) {
	return NewSupplier(c.updateEntity(key, entity))
}
func (c *Client) DeleteSupplier(key PrimarySupplier) error {
	return c.removeEntity(key)
}

type CatalogKontragentyVidyDeiatelnosti struct {
	Key                Guid  `json:"Ref_Key,omitempty"`
	LineNumber         Int64 `json:"LineNumber,omitempty"`
	VidDeiatelnostiKey *Guid `json:"ВидДеятельности_Key,omitempty"`
}

func (CatalogKontragentyVidyDeiatelnosti) APIEntityType() string {
	return "Catalog_Контрагенты_ВидыДеятельности"
}
func NewCatalogKontragentyVidyDeiatelnosti(data string, prevError error) (*CatalogKontragentyVidyDeiatelnosti, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogKontragentyVidyDeiatelnosti)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogKontragentyVidyDeiatelnosti(entity CatalogKontragentyVidyDeiatelnosti) (*CatalogKontragentyVidyDeiatelnosti, error) {
	return NewCatalogKontragentyVidyDeiatelnosti(c.createEntity(entity))
}
func (c *Client) CatalogKontragentyVidyDeiatelnosti(key PrimaryCatalogKontragentyVidyDeiatelnosti, fields []string) (*CatalogKontragentyVidyDeiatelnosti, error) {
	return NewCatalogKontragentyVidyDeiatelnosti(c.getEntity(key, fields))
}
func (c *Client) CatalogKontragentyVidyDeiatelnostis(where Where) (*[]CatalogKontragentyVidyDeiatelnosti, error) {
	type ReturnObj struct {
		Value []CatalogKontragentyVidyDeiatelnosti `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Контрагенты_ВидыДеятельности", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogKontragentyVidyDeiatelnosti(key PrimaryCatalogKontragentyVidyDeiatelnosti, entity CatalogKontragentyVidyDeiatelnosti) (*CatalogKontragentyVidyDeiatelnosti, error) {
	return NewCatalogKontragentyVidyDeiatelnosti(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogKontragentyVidyDeiatelnosti(key PrimaryCatalogKontragentyVidyDeiatelnosti) error {
	return c.removeEntity(key)
}

type DocumentInformatsionnoeSoobshchenie struct {
	Key                                 Guid      `json:"Ref_Key,omitempty"`
	DataVersion                         *String   `json:"DataVersion,omitempty"`
	Number                              *String   `json:"Number,omitempty"`
	Date                                *DateTime `json:"Date,omitempty"`
	DeletionMark                        *Boolean  `json:"DeletionMark,omitempty"`
	Posted                              *Boolean  `json:"Posted,omitempty"`
	Email                               *String   `json:"Email,omitempty"`
	DataRozhdeniia                      *DateTime `json:"ДатаРождения,omitempty"`
	KliuchProdazhKey                    *Guid     `json:"КлючПродаж_Key,omitempty"`
	SumOfDocument                       *Double   `json:"СуммаДокумента,omitempty"`
	Telefon                             *String   `json:"Телефон,omitempty"`
	FIO                                 *String   `json:"ФИО,omitempty"`
	OtkazOtPredieiavleniiaUL            *Boolean  `json:"ОтказОтПредъявленияУЛ,omitempty"`
	Pol                                 *String   `json:"Пол,omitempty"`
	DokumentUdostoveriaiushchiiLichnost *String   `json:"ДокументУдостоверяющийЛичность,omitempty"`
	MemberCardKey                       *Guid     `json:"ДисконтнаяКарта_Key,omitempty"`
	DokumentSozdanVIuTD                 *Boolean  `json:"ДокументСозданВЮТД,omitempty"`
	DokumentVidKey                      *Guid     `json:"ДокументВид_Key,omitempty"`
	DokumentSeriia                      *String   `json:"ДокументСерия,omitempty"`
	DokumentNomer                       *String   `json:"ДокументНомер,omitempty"`
	DokumentDataVydachi                 *DateTime `json:"ДокументДатаВыдачи,omitempty"`
	DokumentKemVydan                    *String   `json:"ДокументКемВыдан,omitempty"`
	DokumentKodPodrazdeleniia           *String   `json:"ДокументКодПодразделения,omitempty"`
	KontragentKey                       *Guid     `json:"Контрагент_Key,omitempty"`
	SummaDokumentaBezNal                *Double   `json:"СуммаДокументаБезНал,omitempty"`
}

func (DocumentInformatsionnoeSoobshchenie) APIEntityType() string {
	return "Document_ИнформационноеСообщение"
}
func NewDocumentInformatsionnoeSoobshchenie(data string, prevError error) (*DocumentInformatsionnoeSoobshchenie, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentInformatsionnoeSoobshchenie)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentInformatsionnoeSoobshchenie(entity DocumentInformatsionnoeSoobshchenie) (*DocumentInformatsionnoeSoobshchenie, error) {
	return NewDocumentInformatsionnoeSoobshchenie(c.createEntity(entity))
}
func (c *Client) DocumentInformatsionnoeSoobshchenie(key PrimaryDocumentInformatsionnoeSoobshchenie, fields []string) (*DocumentInformatsionnoeSoobshchenie, error) {
	return NewDocumentInformatsionnoeSoobshchenie(c.getEntity(key, fields))
}
func (c *Client) DocumentInformatsionnoeSoobshchenies(where Where) (*[]DocumentInformatsionnoeSoobshchenie, error) {
	type ReturnObj struct {
		Value []DocumentInformatsionnoeSoobshchenie `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ИнформационноеСообщение", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentInformatsionnoeSoobshchenie(key PrimaryDocumentInformatsionnoeSoobshchenie, entity DocumentInformatsionnoeSoobshchenie) (*DocumentInformatsionnoeSoobshchenie, error) {
	return NewDocumentInformatsionnoeSoobshchenie(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentInformatsionnoeSoobshchenie(key PrimaryDocumentInformatsionnoeSoobshchenie) error {
	return c.removeEntity(key)
}

type CatalogVlozheniiaElektronnykhPisem struct {
	Key                     Guid     `json:"Ref_Key,omitempty"`
	DataVersion             *String  `json:"DataVersion,omitempty"`
	Description             *String  `json:"Description,omitempty"`
	DeletionMark            *Boolean `json:"DeletionMark,omitempty"`
	IDFailaPochtovogoPisma  *String  `json:"ИДФайлаПочтовогоПисьма,omitempty"`
	ImiaFaila               *String  `json:"ИмяФайла,omitempty"`
	ObieektKey              *Guid    `json:"Объект_Key,omitempty"`
	Predmet                 *String  `json:"Предмет,omitempty"`
	KhranilishcheBase64Data *Binary  `json:"Хранилище_Base64Data,omitempty"`
	PredmetType             *String  `json:"Предмет_Type,omitempty"`
	KhranilishcheType       *String  `json:"Хранилище_Type,omitempty"`
	Khranilishche           *Stream  `json:"Хранилище,omitempty"`
}

func (CatalogVlozheniiaElektronnykhPisem) APIEntityType() string {
	return "Catalog_ВложенияЭлектронныхПисем"
}
func NewCatalogVlozheniiaElektronnykhPisem(data string, prevError error) (*CatalogVlozheniiaElektronnykhPisem, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogVlozheniiaElektronnykhPisem)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogVlozheniiaElektronnykhPisem(entity CatalogVlozheniiaElektronnykhPisem) (*CatalogVlozheniiaElektronnykhPisem, error) {
	return NewCatalogVlozheniiaElektronnykhPisem(c.createEntity(entity))
}
func (c *Client) CatalogVlozheniiaElektronnykhPisem(key PrimaryCatalogVlozheniiaElektronnykhPisem, fields []string) (*CatalogVlozheniiaElektronnykhPisem, error) {
	return NewCatalogVlozheniiaElektronnykhPisem(c.getEntity(key, fields))
}
func (c *Client) CatalogVlozheniiaElektronnykhPisems(where Where) (*[]CatalogVlozheniiaElektronnykhPisem, error) {
	type ReturnObj struct {
		Value []CatalogVlozheniiaElektronnykhPisem `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ВложенияЭлектронныхПисем", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogVlozheniiaElektronnykhPisem(key PrimaryCatalogVlozheniiaElektronnykhPisem, entity CatalogVlozheniiaElektronnykhPisem) (*CatalogVlozheniiaElektronnykhPisem, error) {
	return NewCatalogVlozheniiaElektronnykhPisem(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogVlozheniiaElektronnykhPisem(key PrimaryCatalogVlozheniiaElektronnykhPisem) error {
	return c.removeEntity(key)
}

type DocumentPlatezhnoeTrebovanieVystavlennoe struct {
	Key                                  Guid                                                                   `json:"Ref_Key,omitempty"`
	DataVersion                          *String                                                                `json:"DataVersion,omitempty"`
	Number                               *String                                                                `json:"Number,omitempty"`
	Date                                 *DateTime                                                              `json:"Date,omitempty"`
	DeletionMark                         *Boolean                                                               `json:"DeletionMark,omitempty"`
	Posted                               *Boolean                                                               `json:"Posted,omitempty"`
	ValiutaDokumentaKey                  *Guid                                                                  `json:"ВалютаДокумента_Key,omitempty"`
	OperationType                        *String                                                                `json:"ВидОперации,omitempty"`
	VidPlatezha                          *String                                                                `json:"ВидПлатежа,omitempty"`
	DataOplaty                           *DateTime                                                              `json:"ДатаОплаты,omitempty"`
	DataOtsylkiDokumentov                *DateTime                                                              `json:"ДатаОтсылкиДокументов,omitempty"`
	DogovorKontragentaKey                *Guid                                                                  `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie                    *String                                                                `json:"ДокументОснование,omitempty"`
	DokumentPlanirovaniiaPostupleniiaKey *Guid                                                                  `json:"ДокументПланированияПоступления_Key,omitempty"`
	INNPlatelshchika                     *String                                                                `json:"ИННПлательщика,omitempty"`
	INNPoluchatelia                      *String                                                                `json:"ИННПолучателя,omitempty"`
	Comment                              *String                                                                `json:"Комментарий,omitempty"`
	KontragentKey                        *Guid                                                                  `json:"Контрагент_Key,omitempty"`
	KPPPlatelshchika                     *String                                                                `json:"КПППлательщика,omitempty"`
	KPPPoluchatelia                      *String                                                                `json:"КПППолучателя,omitempty"`
	NaznacheniePlatezha                  *String                                                                `json:"НазначениеПлатежа,omitempty"`
	Oplacheno                            *Boolean                                                               `json:"Оплачено,omitempty"`
	OrganizatsiiaKey                     *Guid                                                                  `json:"Организация_Key,omitempty"`
	OsnovanieDliaBezaktseptnogoSpisaniia *String                                                                `json:"ОснованиеДляБезакцептногоСписания,omitempty"`
	OtvetstvennyiKey                     *Guid                                                                  `json:"Ответственный_Key,omitempty"`
	OtrazhenoVOperUchete                 *Boolean                                                               `json:"ОтраженоВОперУчете,omitempty"`
	OcherednostPlatezha                  *Int16                                                                 `json:"ОчередностьПлатежа,omitempty"`
	SrokDliaAktsepta                     *Int16                                                                 `json:"СрокДляАкцепта,omitempty"`
	TypeOfMovingMoneyKey                 *Guid                                                                  `json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SumOfDocument                        *Double                                                                `json:"СуммаДокумента,omitempty"`
	SchetKontragentaKey                  *Guid                                                                  `json:"СчетКонтрагента_Key,omitempty"`
	SchetOrganizatsiiKey                 *Guid                                                                  `json:"СчетОрганизации_Key,omitempty"`
	TekstPlatelshchika                   *String                                                                `json:"ТекстПлательщика,omitempty"`
	TekstPoluchatelia                    *String                                                                `json:"ТекстПолучателя,omitempty"`
	TipDokumenta                         *String                                                                `json:"ТипДокумента,omitempty"`
	UslovieOplaty                        *String                                                                `json:"УсловиеОплаты,omitempty"`
	ChastichnaiaOplata                   *Boolean                                                               `json:"ЧастичнаяОплата,omitempty"`
	VidAktsepta                          *Int16                                                                 `json:"ВидАкцепта,omitempty"`
	ExtendedPayments                     *[]DocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezhaRowType `json:"РасшифровкаПлатежа,omitempty"`
	RekvizityKontragenta                 *[]DocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragentaRowType `json:"РеквизитыКонтрагента,omitempty"`
	DokumentOsnovanieType                *String                                                                `json:"ДокументОснование_Type,omitempty"`
}

func (DocumentPlatezhnoeTrebovanieVystavlennoe) APIEntityType() string {
	return "Document_ПлатежноеТребованиеВыставленное"
}
func NewDocumentPlatezhnoeTrebovanieVystavlennoe(data string, prevError error) (*DocumentPlatezhnoeTrebovanieVystavlennoe, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPlatezhnoeTrebovanieVystavlennoe)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPlatezhnoeTrebovanieVystavlennoe(entity DocumentPlatezhnoeTrebovanieVystavlennoe) (*DocumentPlatezhnoeTrebovanieVystavlennoe, error) {
	return NewDocumentPlatezhnoeTrebovanieVystavlennoe(c.createEntity(entity))
}
func (c *Client) DocumentPlatezhnoeTrebovanieVystavlennoe(key PrimaryDocumentPlatezhnoeTrebovanieVystavlennoe, fields []string) (*DocumentPlatezhnoeTrebovanieVystavlennoe, error) {
	return NewDocumentPlatezhnoeTrebovanieVystavlennoe(c.getEntity(key, fields))
}
func (c *Client) DocumentPlatezhnoeTrebovanieVystavlennoes(where Where) (*[]DocumentPlatezhnoeTrebovanieVystavlennoe, error) {
	type ReturnObj struct {
		Value []DocumentPlatezhnoeTrebovanieVystavlennoe `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПлатежноеТребованиеВыставленное", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPlatezhnoeTrebovanieVystavlennoe(key PrimaryDocumentPlatezhnoeTrebovanieVystavlennoe, entity DocumentPlatezhnoeTrebovanieVystavlennoe) (*DocumentPlatezhnoeTrebovanieVystavlennoe, error) {
	return NewDocumentPlatezhnoeTrebovanieVystavlennoe(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPlatezhnoeTrebovanieVystavlennoe(key PrimaryDocumentPlatezhnoeTrebovanieVystavlennoe) error {
	return c.removeEntity(key)
}

type DocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezha struct {
	Key                              Guid    `json:"Ref_Key,omitempty"`
	LineNumber                       Int64   `json:"LineNumber,omitempty"`
	DogovorKontragentaKey            *Guid   `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentPlanirovaniiaPlatezhaKey *Guid   `json:"ДокументПланированияПлатежа_Key,omitempty"`
	KratnostVzaimoraschetov          *Int64  `json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov              *Double `json:"КурсВзаиморасчетов,omitempty"`
	KursVzaimoraschetovPlan          *Double `json:"КурсВзаиморасчетовПлан,omitempty"`
	ProektKey                        *Guid   `json:"Проект_Key,omitempty"`
	Sdelka                           *String `json:"Сделка,omitempty"`
	StavkaNDS                        *String `json:"СтавкаНДС,omitempty"`
	TypeOfMovingMoneyKey             *Guid   `json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov             *Double `json:"СуммаВзаиморасчетов,omitempty"`
	SummaNDS                         *Double `json:"СуммаНДС,omitempty"`
	Sum                              *Double `json:"СуммаПлатежа,omitempty"`
	SummaPlatezhaPlan                *Double `json:"СуммаПлатежаПлан,omitempty"`
	SdelkaType                       *String `json:"Сделка_Type,omitempty"`
}

func (DocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezha) APIEntityType() string {
	return "Document_ПлатежноеТребованиеВыставленное_РасшифровкаПлатежа"
}
func NewDocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezha(data string, prevError error) (*DocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezha, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezha)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezha(entity DocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezha) (*DocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezha, error) {
	return NewDocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezha(c.createEntity(entity))
}
func (c *Client) DocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezha(key PrimaryDocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezha, fields []string) (*DocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezha, error) {
	return NewDocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezha(c.getEntity(key, fields))
}
func (c *Client) DocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezhas(where Where) (*[]DocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezha, error) {
	type ReturnObj struct {
		Value []DocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezha `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПлатежноеТребованиеВыставленное_РасшифровкаПлатежа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezha(key PrimaryDocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezha, entity DocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezha) (*DocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezha, error) {
	return NewDocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezha(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezha(key PrimaryDocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezha) error {
	return c.removeEntity(key)
}

type DocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragenta struct {
	Key            Guid    `json:"Ref_Key,omitempty"`
	LineNumber     Int64   `json:"LineNumber,omitempty"`
	Znachenie      *String `json:"Значение,omitempty"`
	Predstavlenie  *String `json:"Представление,omitempty"`
	Rekvizit       *String `json:"Реквизит,omitempty"`
	TipKontragenta *String `json:"ТипКонтрагента,omitempty"`
}

func (DocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragenta) APIEntityType() string {
	return "Document_ПлатежноеТребованиеВыставленное_РеквизитыКонтрагента"
}
func NewDocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragenta(data string, prevError error) (*DocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragenta, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragenta)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragenta(entity DocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragenta) (*DocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragenta, error) {
	return NewDocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragenta(c.createEntity(entity))
}
func (c *Client) DocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragenta(key PrimaryDocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragenta, fields []string) (*DocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragenta, error) {
	return NewDocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragenta(c.getEntity(key, fields))
}
func (c *Client) DocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragentas(where Where) (*[]DocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragenta, error) {
	type ReturnObj struct {
		Value []DocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragenta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПлатежноеТребованиеВыставленное_РеквизитыКонтрагента", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragenta(key PrimaryDocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragenta, entity DocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragenta) (*DocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragenta, error) {
	return NewDocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragenta(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragenta(key PrimaryDocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragenta) error {
	return c.removeEntity(key)
}

type DocumentMarketingovaiaAktsiia struct {
	Key                                    Guid                                                          `json:"Ref_Key,omitempty"`
	DataVersion                            *String                                                       `json:"DataVersion,omitempty"`
	Number                                 *String                                                       `json:"Number,omitempty"`
	Date                                   *DateTime                                                     `json:"Date,omitempty"`
	DeletionMark                           *Boolean                                                      `json:"DeletionMark,omitempty"`
	Posted                                 *Boolean                                                      `json:"Posted,omitempty"`
	NaimenovanieAktsii                     *String                                                       `json:"НаименованиеАкции,omitempty"`
	Opisanie                               *String                                                       `json:"Описание,omitempty"`
	DataNachalaDeistviia                   *DateTime                                                     `json:"ДатаНачалаДействия,omitempty"`
	DataOkonchaniiaDeistviia               *DateTime                                                     `json:"ДатаОкончанияДействия,omitempty"`
	Comment                                *String                                                       `json:"Комментарий,omitempty"`
	OtvetstvennyiKey                       *Guid                                                         `json:"Ответственный_Key,omitempty"`
	DliaVsekhMagazinov                     *Boolean                                                      `json:"ДляВсехМагазинов,omitempty"`
	DliaVsekhMagazinovOdnoRaspisanieSkidok *Boolean                                                      `json:"ДляВсехМагазиновОдноРасписаниеСкидок,omitempty"`
	Magaziny                               *[]DocumentMarketingovaiaAktsiiaMagazinyRowType               `json:"Магазины,omitempty"`
	SkidkiNatsenki                         *[]DocumentMarketingovaiaAktsiiaSkidkiNatsenkiRowType         `json:"СкидкиНаценки,omitempty"`
	NaboryZnacheniiDostupa                 *[]DocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupaRowType `json:"НаборыЗначенийДоступа,omitempty"`
}

func (DocumentMarketingovaiaAktsiia) APIEntityType() string {
	return "Document_МаркетинговаяАкция"
}
func NewDocumentMarketingovaiaAktsiia(data string, prevError error) (*DocumentMarketingovaiaAktsiia, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentMarketingovaiaAktsiia)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentMarketingovaiaAktsiia(entity DocumentMarketingovaiaAktsiia) (*DocumentMarketingovaiaAktsiia, error) {
	return NewDocumentMarketingovaiaAktsiia(c.createEntity(entity))
}
func (c *Client) DocumentMarketingovaiaAktsiia(key PrimaryDocumentMarketingovaiaAktsiia, fields []string) (*DocumentMarketingovaiaAktsiia, error) {
	return NewDocumentMarketingovaiaAktsiia(c.getEntity(key, fields))
}
func (c *Client) DocumentMarketingovaiaAktsiias(where Where) (*[]DocumentMarketingovaiaAktsiia, error) {
	type ReturnObj struct {
		Value []DocumentMarketingovaiaAktsiia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_МаркетинговаяАкция", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentMarketingovaiaAktsiia(key PrimaryDocumentMarketingovaiaAktsiia, entity DocumentMarketingovaiaAktsiia) (*DocumentMarketingovaiaAktsiia, error) {
	return NewDocumentMarketingovaiaAktsiia(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentMarketingovaiaAktsiia(key PrimaryDocumentMarketingovaiaAktsiia) error {
	return c.removeEntity(key)
}

type DocumentMarketingovaiaAktsiiaMagaziny struct {
	Key        Guid  `json:"Ref_Key,omitempty"`
	LineNumber Int64 `json:"LineNumber,omitempty"`
	MagazinKey *Guid `json:"Магазин_Key,omitempty"`
}

func (DocumentMarketingovaiaAktsiiaMagaziny) APIEntityType() string {
	return "Document_МаркетинговаяАкция_Магазины"
}
func NewDocumentMarketingovaiaAktsiiaMagaziny(data string, prevError error) (*DocumentMarketingovaiaAktsiiaMagaziny, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentMarketingovaiaAktsiiaMagaziny)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentMarketingovaiaAktsiiaMagaziny(entity DocumentMarketingovaiaAktsiiaMagaziny) (*DocumentMarketingovaiaAktsiiaMagaziny, error) {
	return NewDocumentMarketingovaiaAktsiiaMagaziny(c.createEntity(entity))
}
func (c *Client) DocumentMarketingovaiaAktsiiaMagaziny(key PrimaryDocumentMarketingovaiaAktsiiaMagaziny, fields []string) (*DocumentMarketingovaiaAktsiiaMagaziny, error) {
	return NewDocumentMarketingovaiaAktsiiaMagaziny(c.getEntity(key, fields))
}
func (c *Client) DocumentMarketingovaiaAktsiiaMagazinys(where Where) (*[]DocumentMarketingovaiaAktsiiaMagaziny, error) {
	type ReturnObj struct {
		Value []DocumentMarketingovaiaAktsiiaMagaziny `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_МаркетинговаяАкция_Магазины", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentMarketingovaiaAktsiiaMagaziny(key PrimaryDocumentMarketingovaiaAktsiiaMagaziny, entity DocumentMarketingovaiaAktsiiaMagaziny) (*DocumentMarketingovaiaAktsiiaMagaziny, error) {
	return NewDocumentMarketingovaiaAktsiiaMagaziny(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentMarketingovaiaAktsiiaMagaziny(key PrimaryDocumentMarketingovaiaAktsiiaMagaziny) error {
	return c.removeEntity(key)
}

type DocumentMarketingovaiaAktsiiaSkidkiNatsenki struct {
	Key               Guid      `json:"Ref_Key,omitempty"`
	LineNumber        Int64     `json:"LineNumber,omitempty"`
	DataNachala       *DateTime `json:"ДатаНачала,omitempty"`
	DataOkonchaniia   *DateTime `json:"ДатаОкончания,omitempty"`
	MagazinKey        *Guid     `json:"Магазин_Key,omitempty"`
	SkidkaNatsenkaKey *Guid     `json:"СкидкаНаценка_Key,omitempty"`
}

func (DocumentMarketingovaiaAktsiiaSkidkiNatsenki) APIEntityType() string {
	return "Document_МаркетинговаяАкция_СкидкиНаценки"
}
func NewDocumentMarketingovaiaAktsiiaSkidkiNatsenki(data string, prevError error) (*DocumentMarketingovaiaAktsiiaSkidkiNatsenki, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentMarketingovaiaAktsiiaSkidkiNatsenki)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentMarketingovaiaAktsiiaSkidkiNatsenki(entity DocumentMarketingovaiaAktsiiaSkidkiNatsenki) (*DocumentMarketingovaiaAktsiiaSkidkiNatsenki, error) {
	return NewDocumentMarketingovaiaAktsiiaSkidkiNatsenki(c.createEntity(entity))
}
func (c *Client) DocumentMarketingovaiaAktsiiaSkidkiNatsenki(key PrimaryDocumentMarketingovaiaAktsiiaSkidkiNatsenki, fields []string) (*DocumentMarketingovaiaAktsiiaSkidkiNatsenki, error) {
	return NewDocumentMarketingovaiaAktsiiaSkidkiNatsenki(c.getEntity(key, fields))
}
func (c *Client) DocumentMarketingovaiaAktsiiaSkidkiNatsenkis(where Where) (*[]DocumentMarketingovaiaAktsiiaSkidkiNatsenki, error) {
	type ReturnObj struct {
		Value []DocumentMarketingovaiaAktsiiaSkidkiNatsenki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_МаркетинговаяАкция_СкидкиНаценки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentMarketingovaiaAktsiiaSkidkiNatsenki(key PrimaryDocumentMarketingovaiaAktsiiaSkidkiNatsenki, entity DocumentMarketingovaiaAktsiiaSkidkiNatsenki) (*DocumentMarketingovaiaAktsiiaSkidkiNatsenki, error) {
	return NewDocumentMarketingovaiaAktsiiaSkidkiNatsenki(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentMarketingovaiaAktsiiaSkidkiNatsenki(key PrimaryDocumentMarketingovaiaAktsiiaSkidkiNatsenki) error {
	return c.removeEntity(key)
}

type DocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupa struct {
	Key                  Guid     `json:"Ref_Key,omitempty"`
	LineNumber           Int64    `json:"LineNumber,omitempty"`
	NomerNabora          *Int64   `json:"НомерНабора,omitempty"`
	VidDostupa           *String  `json:"ВидДоступа,omitempty"`
	ZnachenieDostupa     *String  `json:"ЗначениеДоступа,omitempty"`
	Chtenie              *Boolean `json:"Чтение,omitempty"`
	Dobavlenie           *Boolean `json:"Добавление,omitempty"`
	Izmenenie            *Boolean `json:"Изменение,omitempty"`
	Udalenie             *Boolean `json:"Удаление,omitempty"`
	ZnachenieDostupaType *String  `json:"ЗначениеДоступа_Type,omitempty"`
}

func (DocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupa) APIEntityType() string {
	return "Document_МаркетинговаяАкция_НаборыЗначенийДоступа"
}
func NewDocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupa(data string, prevError error) (*DocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupa, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupa)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupa(entity DocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupa) (*DocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupa, error) {
	return NewDocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupa(c.createEntity(entity))
}
func (c *Client) DocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupa(key PrimaryDocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupa, fields []string) (*DocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupa, error) {
	return NewDocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupa(c.getEntity(key, fields))
}
func (c *Client) DocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupas(where Where) (*[]DocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupa, error) {
	type ReturnObj struct {
		Value []DocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupa `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_МаркетинговаяАкция_НаборыЗначенийДоступа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupa(key PrimaryDocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupa, entity DocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupa) (*DocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupa, error) {
	return NewDocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupa(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupa(key PrimaryDocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupa) error {
	return c.removeEntity(key)
}

type CatalogStsenariiObmenovDannymi struct {
	Key                           Guid                                                    `json:"Ref_Key,omitempty"`
	DataVersion                   *String                                                 `json:"DataVersion,omitempty"`
	Description                   *String                                                 `json:"Description,omitempty"`
	Code                          *String                                                 `json:"Code,omitempty"`
	DeletionMark                  *Boolean                                                `json:"DeletionMark,omitempty"`
	IspolzovatReglamentnoeZadanie *Boolean                                                `json:"ИспользоватьРегламентноеЗадание,omitempty"`
	Comment                       *String                                                 `json:"Комментарий,omitempty"`
	ReglamentnoeZadanieGUID       *String                                                 `json:"РегламентноеЗаданиеGUID,omitempty"`
	NastroikiObmena               *[]CatalogStsenariiObmenovDannymiNastroikiObmenaRowType `json:"НастройкиОбмена,omitempty"`
}

func (CatalogStsenariiObmenovDannymi) APIEntityType() string {
	return "Catalog_СценарииОбменовДанными"
}
func NewCatalogStsenariiObmenovDannymi(data string, prevError error) (*CatalogStsenariiObmenovDannymi, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogStsenariiObmenovDannymi)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogStsenariiObmenovDannymi(entity CatalogStsenariiObmenovDannymi) (*CatalogStsenariiObmenovDannymi, error) {
	return NewCatalogStsenariiObmenovDannymi(c.createEntity(entity))
}
func (c *Client) CatalogStsenariiObmenovDannymi(key PrimaryCatalogStsenariiObmenovDannymi, fields []string) (*CatalogStsenariiObmenovDannymi, error) {
	return NewCatalogStsenariiObmenovDannymi(c.getEntity(key, fields))
}
func (c *Client) CatalogStsenariiObmenovDannymis(where Where) (*[]CatalogStsenariiObmenovDannymi, error) {
	type ReturnObj struct {
		Value []CatalogStsenariiObmenovDannymi `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_СценарииОбменовДанными", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogStsenariiObmenovDannymi(key PrimaryCatalogStsenariiObmenovDannymi, entity CatalogStsenariiObmenovDannymi) (*CatalogStsenariiObmenovDannymi, error) {
	return NewCatalogStsenariiObmenovDannymi(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogStsenariiObmenovDannymi(key PrimaryCatalogStsenariiObmenovDannymi) error {
	return c.removeEntity(key)
}

type CatalogStsenariiObmenovDannymiNastroikiObmena struct {
	Key                              Guid    `json:"Ref_Key,omitempty"`
	LineNumber                       Int64   `json:"LineNumber,omitempty"`
	UzelInformatsionnoiBazy          *String `json:"УзелИнформационнойБазы,omitempty"`
	VidTransportaObmena              *String `json:"ВидТранспортаОбмена,omitempty"`
	VypolniaemoeDeistvie             *String `json:"ВыполняемоеДействие,omitempty"`
	KolichestvoElementovVTranzaktsii *Int64  `json:"КоличествоЭлементовВТранзакции,omitempty"`
	UzelInformatsionnoiBazyType      *String `json:"УзелИнформационнойБазы_Type,omitempty"`
}

func (CatalogStsenariiObmenovDannymiNastroikiObmena) APIEntityType() string {
	return "Catalog_СценарииОбменовДанными_НастройкиОбмена"
}
func NewCatalogStsenariiObmenovDannymiNastroikiObmena(data string, prevError error) (*CatalogStsenariiObmenovDannymiNastroikiObmena, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogStsenariiObmenovDannymiNastroikiObmena)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogStsenariiObmenovDannymiNastroikiObmena(entity CatalogStsenariiObmenovDannymiNastroikiObmena) (*CatalogStsenariiObmenovDannymiNastroikiObmena, error) {
	return NewCatalogStsenariiObmenovDannymiNastroikiObmena(c.createEntity(entity))
}
func (c *Client) CatalogStsenariiObmenovDannymiNastroikiObmena(key PrimaryCatalogStsenariiObmenovDannymiNastroikiObmena, fields []string) (*CatalogStsenariiObmenovDannymiNastroikiObmena, error) {
	return NewCatalogStsenariiObmenovDannymiNastroikiObmena(c.getEntity(key, fields))
}
func (c *Client) CatalogStsenariiObmenovDannymiNastroikiObmenas(where Where) (*[]CatalogStsenariiObmenovDannymiNastroikiObmena, error) {
	type ReturnObj struct {
		Value []CatalogStsenariiObmenovDannymiNastroikiObmena `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_СценарииОбменовДанными_НастройкиОбмена", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogStsenariiObmenovDannymiNastroikiObmena(key PrimaryCatalogStsenariiObmenovDannymiNastroikiObmena, entity CatalogStsenariiObmenovDannymiNastroikiObmena) (*CatalogStsenariiObmenovDannymiNastroikiObmena, error) {
	return NewCatalogStsenariiObmenovDannymiNastroikiObmena(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogStsenariiObmenovDannymiNastroikiObmena(key PrimaryCatalogStsenariiObmenovDannymiNastroikiObmena) error {
	return c.removeEntity(key)
}

type Item struct {
	Key                                         Guid                                        `json:"Ref_Key,omitempty"`
	DataVersion                                 *String                                     `json:"DataVersion,omitempty"`
	Description                                 *String                                     `json:"Description,omitempty"`
	Code                                        *String                                     `json:"Code,omitempty"`
	ParentKey                                   *Guid                                       `json:"Parent_Key,omitempty"`
	IsFolder                                    *Boolean                                    `json:"IsFolder,omitempty"`
	DeletionMark                                *Boolean                                    `json:"DeletionMark,omitempty"`
	AnalitikaTipaIzdeliiaKey                    *Guid                                       `json:"АналитикаТипаИзделия_Key,omitempty"`
	MID                                         *String                                     `json:"Артикул,omitempty"`
	BazovaiaEdinitsaIzmereniiaKey               *Guid                                       `json:"БазоваяЕдиницаИзмерения_Key,omitempty"`
	Vesovoi                                     *Boolean                                    `json:"Весовой,omitempty"`
	VesovoiKoeffitsientVkhozhdeniia             *Int64                                      `json:"ВесовойКоэффициентВхождения,omitempty"`
	VestiUchetPoKharakteristikam                *Boolean                                    `json:"ВестиУчетПоХарактеристикам,omitempty"`
	Vstavka                                     *Boolean                                    `json:"Вставка,omitempty"`
	GruppaDefektaKey                            *Guid                                       `json:"ГруппаДефекта_Key,omitempty"`
	GruppaTsvetaKey                             *Guid                                       `json:"ГруппаЦвета_Key,omitempty"`
	DliaZakaza                                  *Boolean                                    `json:"ДляЗаказа,omitempty"`
	EdinitsaDliaOtchetovKey                     *Guid                                       `json:"ЕдиницаДляОтчетов_Key,omitempty"`
	EdinitsaKhraneniiaOstatkovKey               *Guid                                       `json:"ЕдиницаХраненияОстатков_Key,omitempty"`
	KamenKey                                    *Guid                                       `json:"Камень_Key,omitempty"`
	KodirovkaKey                                *Guid                                       `json:"Кодировка_Key,omitempty"`
	Comment                                     *String                                     `json:"Комментарий,omitempty"`
	Ligatura                                    *Boolean                                    `json:"Лигатура,omitempty"`
	Metall                                      *Boolean                                    `json:"Металл,omitempty"`
	Nabor                                       *Boolean                                    `json:"Набор,omitempty"`
	NaimenovaniePolnoe                          *String                                     `json:"НаименованиеПолное,omitempty"`
	NomenklaturnaiaGruppaKey                    *Guid                                       `json:"НоменклатурнаяГруппа_Key,omitempty"`
	NomenklaturnaiaGruppaZatratKey              *Guid                                       `json:"НоменклатурнаяГруппаЗатрат_Key,omitempty"`
	NomerGTDKey                                 *Guid                                       `json:"НомерГТД_Key,omitempty"`
	Opisanie                                    *String                                     `json:"Описание,omitempty"`
	OsnovnoeIzobrazhenieKey                     *Guid                                       `json:"ОсновноеИзображение_Key,omitempty"`
	OsnovnoeKachestvoKey                        *Guid                                       `json:"ОсновноеКачество_Key,omitempty"`
	OsnovnoiPostavshchikKey                     *Guid                                       `json:"ОсновнойПоставщик_Key,omitempty"`
	ManufacturerKey                             *Guid                                       `json:"ОсновнойПроизводитель_Key,omitempty"`
	OtvetstvennyiMenedzherZaPokupkiKey          *Guid                                       `json:"ОтветственныйМенеджерЗаПокупки_Key,omitempty"`
	ProbeKey                                    *Guid                                       `json:"Проба_Key,omitempty"`
	PutKataloga                                 *String                                     `json:"ПутьКаталога,omitempty"`
	Razmer1                                     *Double                                     `json:"Размер1,omitempty"`
	Razmer2                                     *Double                                     `json:"Размер2,omitempty"`
	Razmer3                                     *Double                                     `json:"Размер3,omitempty"`
	RassevKey                                   *Guid                                       `json:"Рассев_Key,omitempty"`
	SredniiVes                                  *Double                                     `json:"СреднийВес,omitempty"`
	StavkaNDS                                   *String                                     `json:"СтавкаНДС,omitempty"`
	StatiaZatratKey                             *Guid                                       `json:"СтатьяЗатрат_Key,omitempty"`
	StranaProiskhozhdeniiaKey                   *Guid                                       `json:"СтранаПроисхождения_Key,omitempty"`
	TypeKey                                     *Guid                                       `json:"ТипИзделия_Key,omitempty"`
	TipShtrikhkodaKey                           *Guid                                       `json:"ТипШтрихкода_Key,omitempty"`
	TovarOtpuskaemyiPoSvobodnoiTseneBezOstatkov *Boolean                                    `json:"ТоварОтпускаемыйПоСвободнойЦенеБезОстатков,omitempty"`
	Usluga                                      *Boolean                                    `json:"Услуга,omitempty"`
	FailOpisaniiaDliaSaitaKey                   *Guid                                       `json:"ФайлОписанияДляСайта_Key,omitempty"`
	FormaOgrankiKey                             *Guid                                       `json:"ФормаОгранки_Key,omitempty"`
	TsvetKamniaKey                              *Guid                                       `json:"ЦветКамня_Key,omitempty"`
	TsenovaiaGruppaKey                          *Guid                                       `json:"ЦеноваяГруппа_Key,omitempty"`
	KomplektKey                                 *Guid                                       `json:"Комплект_Key,omitempty"`
	Novinka                                     *Boolean                                    `json:"Новинка,omitempty"`
	KhitProdazh                                 *Boolean                                    `json:"ХитПродаж,omitempty"`
	Skidka                                      *Boolean                                    `json:"Скидка,omitempty"`
	KodVidaTovaraKey                            *Guid                                       `json:"КодВидаТовара_Key,omitempty"`
	BIdentifikator                              *String                                     `json:"Б_Идентификатор,omitempty"`
	BNomerVersii                                *String                                     `json:"Б_НомерВерсии,omitempty"`
	SostavLigatury                              *[]CatalogNomenklaturaSostavLigaturyRowType `json:"СоставЛигатуры,omitempty"`
}

func (Item) APIEntityType() string {
	return "Catalog_Номенклатура"
}
func NewItem(data string, prevError error) (*Item, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(Item)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateItem(entity Item) (*Item, error) {
	return NewItem(c.createEntity(entity))
}
func (c *Client) Item(key PrimaryItem, fields []string) (*Item, error) {
	return NewItem(c.getEntity(key, fields))
}
func (c *Client) Items(where Where) (*[]Item, error) {
	type ReturnObj struct {
		Value []Item `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Номенклатура", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateItem(key PrimaryItem, entity Item) (*Item, error) {
	return NewItem(c.updateEntity(key, entity))
}
func (c *Client) DeleteItem(key PrimaryItem) error {
	return c.removeEntity(key)
}

type CatalogNomenklaturaSostavLigatury struct {
	Key        Guid    `json:"Ref_Key,omitempty"`
	LineNumber Int64   `json:"LineNumber,omitempty"`
	Quantity   *Double `json:"Количество,omitempty"`
	ItemKey    *Guid   `json:"Номенклатура_Key,omitempty"`
}

func (CatalogNomenklaturaSostavLigatury) APIEntityType() string {
	return "Catalog_Номенклатура_СоставЛигатуры"
}
func NewCatalogNomenklaturaSostavLigatury(data string, prevError error) (*CatalogNomenklaturaSostavLigatury, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogNomenklaturaSostavLigatury)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogNomenklaturaSostavLigatury(entity CatalogNomenklaturaSostavLigatury) (*CatalogNomenklaturaSostavLigatury, error) {
	return NewCatalogNomenklaturaSostavLigatury(c.createEntity(entity))
}
func (c *Client) CatalogNomenklaturaSostavLigatury(key PrimaryCatalogNomenklaturaSostavLigatury, fields []string) (*CatalogNomenklaturaSostavLigatury, error) {
	return NewCatalogNomenklaturaSostavLigatury(c.getEntity(key, fields))
}
func (c *Client) CatalogNomenklaturaSostavLigaturys(where Where) (*[]CatalogNomenklaturaSostavLigatury, error) {
	type ReturnObj struct {
		Value []CatalogNomenklaturaSostavLigatury `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Номенклатура_СоставЛигатуры", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogNomenklaturaSostavLigatury(key PrimaryCatalogNomenklaturaSostavLigatury, entity CatalogNomenklaturaSostavLigatury) (*CatalogNomenklaturaSostavLigatury, error) {
	return NewCatalogNomenklaturaSostavLigatury(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogNomenklaturaSostavLigatury(key PrimaryCatalogNomenklaturaSostavLigatury) error {
	return c.removeEntity(key)
}

type DocumentOpros struct {
	Key                    Guid                                  `json:"Ref_Key,omitempty"`
	DataVersion            *String                               `json:"DataVersion,omitempty"`
	Number                 *String                               `json:"Number,omitempty"`
	Date                   *DateTime                             `json:"Date,omitempty"`
	DeletionMark           *Boolean                              `json:"DeletionMark,omitempty"`
	Posted                 *Boolean                              `json:"Posted,omitempty"`
	Comment                *String                               `json:"Комментарий,omitempty"`
	OprashivaemoeLitso     *String                               `json:"ОпрашиваемоеЛицо,omitempty"`
	OtvetstvennyiKey       *Guid                                 `json:"Ответственный_Key,omitempty"`
	RassylkaKey            *Guid                                 `json:"Рассылка_Key,omitempty"`
	TipovaiaAnketaKey      *Guid                                 `json:"ТиповаяАнкета_Key,omitempty"`
	Voprosy                *[]DocumentOprosVoprosyRowType        `json:"Вопросы,omitempty"`
	SostavnoiOtvet         *[]DocumentOprosSostavnoiOtvetRowType `json:"СоставнойОтвет,omitempty"`
	OprashivaemoeLitsoType *String                               `json:"ОпрашиваемоеЛицо_Type,omitempty"`
}

func (DocumentOpros) APIEntityType() string {
	return "Document_Опрос"
}
func NewDocumentOpros(data string, prevError error) (*DocumentOpros, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentOpros)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentOpros(entity DocumentOpros) (*DocumentOpros, error) {
	return NewDocumentOpros(c.createEntity(entity))
}
func (c *Client) DocumentOpros(key PrimaryDocumentOpros, fields []string) (*DocumentOpros, error) {
	return NewDocumentOpros(c.getEntity(key, fields))
}
func (c *Client) DocumentOpross(where Where) (*[]DocumentOpros, error) {
	type ReturnObj struct {
		Value []DocumentOpros `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_Опрос", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentOpros(key PrimaryDocumentOpros, entity DocumentOpros) (*DocumentOpros, error) {
	return NewDocumentOpros(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentOpros(key PrimaryDocumentOpros) error {
	return c.removeEntity(key)
}

type DocumentOprosVoprosy struct {
	Key              Guid    `json:"Ref_Key,omitempty"`
	LineNumber       Int64   `json:"LineNumber,omitempty"`
	VoprosKey        *Guid   `json:"Вопрос_Key,omitempty"`
	Otvet            *String `json:"Ответ,omitempty"`
	TipovoiOtvet     *String `json:"ТиповойОтвет,omitempty"`
	TipovoiOtvetType *String `json:"ТиповойОтвет_Type,omitempty"`
}

func (DocumentOprosVoprosy) APIEntityType() string {
	return "Document_Опрос_Вопросы"
}
func NewDocumentOprosVoprosy(data string, prevError error) (*DocumentOprosVoprosy, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentOprosVoprosy)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentOprosVoprosy(entity DocumentOprosVoprosy) (*DocumentOprosVoprosy, error) {
	return NewDocumentOprosVoprosy(c.createEntity(entity))
}
func (c *Client) DocumentOprosVoprosy(key PrimaryDocumentOprosVoprosy, fields []string) (*DocumentOprosVoprosy, error) {
	return NewDocumentOprosVoprosy(c.getEntity(key, fields))
}
func (c *Client) DocumentOprosVoprosys(where Where) (*[]DocumentOprosVoprosy, error) {
	type ReturnObj struct {
		Value []DocumentOprosVoprosy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_Опрос_Вопросы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentOprosVoprosy(key PrimaryDocumentOprosVoprosy, entity DocumentOprosVoprosy) (*DocumentOprosVoprosy, error) {
	return NewDocumentOprosVoprosy(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentOprosVoprosy(key PrimaryDocumentOprosVoprosy) error {
	return c.removeEntity(key)
}

type DocumentOprosSostavnoiOtvet struct {
	Key                  Guid    `json:"Ref_Key,omitempty"`
	LineNumber           Int64   `json:"LineNumber,omitempty"`
	VoprosKey            *Guid   `json:"Вопрос_Key,omitempty"`
	VoprosVladeletsKey   *Guid   `json:"ВопросВладелец_Key,omitempty"`
	NomerStrokiVTablitse *Int64  `json:"НомерСтрокиВТаблице,omitempty"`
	Otvet                *String `json:"Ответ,omitempty"`
	TipovoiOtvet         *String `json:"ТиповойОтвет,omitempty"`
	TipovoiOtvetType     *String `json:"ТиповойОтвет_Type,omitempty"`
}

func (DocumentOprosSostavnoiOtvet) APIEntityType() string {
	return "Document_Опрос_СоставнойОтвет"
}
func NewDocumentOprosSostavnoiOtvet(data string, prevError error) (*DocumentOprosSostavnoiOtvet, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentOprosSostavnoiOtvet)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentOprosSostavnoiOtvet(entity DocumentOprosSostavnoiOtvet) (*DocumentOprosSostavnoiOtvet, error) {
	return NewDocumentOprosSostavnoiOtvet(c.createEntity(entity))
}
func (c *Client) DocumentOprosSostavnoiOtvet(key PrimaryDocumentOprosSostavnoiOtvet, fields []string) (*DocumentOprosSostavnoiOtvet, error) {
	return NewDocumentOprosSostavnoiOtvet(c.getEntity(key, fields))
}
func (c *Client) DocumentOprosSostavnoiOtvets(where Where) (*[]DocumentOprosSostavnoiOtvet, error) {
	type ReturnObj struct {
		Value []DocumentOprosSostavnoiOtvet `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_Опрос_СоставнойОтвет", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentOprosSostavnoiOtvet(key PrimaryDocumentOprosSostavnoiOtvet, entity DocumentOprosSostavnoiOtvet) (*DocumentOprosSostavnoiOtvet, error) {
	return NewDocumentOprosSostavnoiOtvet(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentOprosSostavnoiOtvet(key PrimaryDocumentOprosSostavnoiOtvet) error {
	return c.removeEntity(key)
}

type CatalogGruppyPoluchateleiSkidki struct {
	Key                               Guid      `json:"Ref_Key,omitempty"`
	DataVersion                       *String   `json:"DataVersion,omitempty"`
	Description                       *String   `json:"Description,omitempty"`
	ParentKey                         *Guid     `json:"Parent_Key,omitempty"`
	IsFolder                          *Boolean  `json:"IsFolder,omitempty"`
	DeletionMark                      *Boolean  `json:"DeletionMark,omitempty"`
	SposobFormirovaniia               *String   `json:"СпособФормирования,omitempty"`
	SkhemaKomponovkiDannykhBase64Data *Binary   `json:"СхемаКомпоновкиДанных_Base64Data,omitempty"`
	Opisanie                          *String   `json:"Описание,omitempty"`
	OtvetstvennyiKey                  *Guid     `json:"Ответственный_Key,omitempty"`
	DataSozdaniia                     *DateTime `json:"ДатаСоздания,omitempty"`
	ImiaShablonaSKD                   *String   `json:"ИмяШаблонаСКД,omitempty"`
	TipPoluchatelei                   *String   `json:"ТипПолучателей,omitempty"`
	SkhemaKomponovkiDannykhType       *String   `json:"СхемаКомпоновкиДанных_Type,omitempty"`
	SkhemaKomponovkiDannykh           *Stream   `json:"СхемаКомпоновкиДанных,omitempty"`
}

func (CatalogGruppyPoluchateleiSkidki) APIEntityType() string {
	return "Catalog_ГруппыПолучателейСкидки"
}
func NewCatalogGruppyPoluchateleiSkidki(data string, prevError error) (*CatalogGruppyPoluchateleiSkidki, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogGruppyPoluchateleiSkidki)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogGruppyPoluchateleiSkidki(entity CatalogGruppyPoluchateleiSkidki) (*CatalogGruppyPoluchateleiSkidki, error) {
	return NewCatalogGruppyPoluchateleiSkidki(c.createEntity(entity))
}
func (c *Client) CatalogGruppyPoluchateleiSkidki(key PrimaryCatalogGruppyPoluchateleiSkidki, fields []string) (*CatalogGruppyPoluchateleiSkidki, error) {
	return NewCatalogGruppyPoluchateleiSkidki(c.getEntity(key, fields))
}
func (c *Client) CatalogGruppyPoluchateleiSkidkis(where Where) (*[]CatalogGruppyPoluchateleiSkidki, error) {
	type ReturnObj struct {
		Value []CatalogGruppyPoluchateleiSkidki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ГруппыПолучателейСкидки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogGruppyPoluchateleiSkidki(key PrimaryCatalogGruppyPoluchateleiSkidki, entity CatalogGruppyPoluchateleiSkidki) (*CatalogGruppyPoluchateleiSkidki, error) {
	return NewCatalogGruppyPoluchateleiSkidki(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogGruppyPoluchateleiSkidki(key PrimaryCatalogGruppyPoluchateleiSkidki) error {
	return c.removeEntity(key)
}

type Reassessment struct {
	Key                            Guid                                           `json:"Ref_Key,omitempty"`
	DataVersion                    *String                                        `json:"DataVersion,omitempty"`
	Number                         *String                                        `json:"Number,omitempty"`
	Date                           *DateTime                                      `json:"Date,omitempty"`
	DeletionMark                   *Boolean                                       `json:"DeletionMark,omitempty"`
	Posted                         *Boolean                                       `json:"Posted,omitempty"`
	AvtoZapolnenieVIuvS            *Boolean                                       `json:"АвтоЗаполнениеВЮвС,omitempty"`
	Weight                         *Double                                        `json:"ВесДокумента,omitempty"`
	DokumentOsnovanie              *String                                        `json:"ДокументОснование,omitempty"`
	DokumentSozdanVIuTD            *Boolean                                       `json:"ДокументСозданВЮТД,omitempty"`
	KolichestvoDokumenta           *Int64                                         `json:"КоличествоДокумента,omitempty"`
	KolichestvoDokumentaSvereno    *Int64                                         `json:"КоличествоДокументаСверено,omitempty"`
	Comment                        *String                                        `json:"Комментарий,omitempty"`
	OrganizatsiiaKey               *Guid                                          `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey               *Guid                                          `json:"Ответственный_Key,omitempty"`
	ParametryOtboraBase64Data      *Binary                                        `json:"ПараметрыОтбора_Base64Data,omitempty"`
	PodrazdelenieKey               *Guid                                          `json:"Подразделение_Key,omitempty"`
	PrikazNaPereotsenku            *Boolean                                       `json:"ПриказНаПереоценку,omitempty"`
	DepartmentKey                  *Guid                                          `json:"Склад_Key,omitempty"`
	TipDokumenta                   *String                                        `json:"ТипДокумента,omitempty"`
	TipSkidkiNatsenkiKey           *Guid                                          `json:"ТипСкидкиНаценки_Key,omitempty"`
	TipTsenKey                     *Guid                                          `json:"ТипЦен_Key,omitempty"`
	KhoziaistvennaiaOperatsiiaKey  *Guid                                          `json:"ХозяйственнаяОперация_Key,omitempty"`
	KomiscionnyeTovaryFilLits      *Boolean                                       `json:"КомисcионныеТоварыФилЛиц,omitempty"`
	NastroikiZapolneniiaBase64Data *Binary                                        `json:"НастройкиЗаполнения_Base64Data,omitempty"`
	Goods                          *[]DocumentPereotsenkaTovarovVNTTTovaryRowType `json:"Товары,omitempty"`
	DokumentOsnovanieType          *String                                        `json:"ДокументОснование_Type,omitempty"`
	ParametryOtboraType            *String                                        `json:"ПараметрыОтбора_Type,omitempty"`
	NastroikiZapolneniiaType       *String                                        `json:"НастройкиЗаполнения_Type,omitempty"`
	ParametryOtbora                *Stream                                        `json:"ПараметрыОтбора,omitempty"`
	NastroikiZapolneniia           *Stream                                        `json:"НастройкиЗаполнения,omitempty"`
}

func (Reassessment) APIEntityType() string {
	return "Document_ПереоценкаТоваровВНТТ"
}
func NewReassessment(data string, prevError error) (*Reassessment, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(Reassessment)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateReassessment(entity Reassessment) (*Reassessment, error) {
	return NewReassessment(c.createEntity(entity))
}
func (c *Client) Reassessment(key PrimaryReassessment, fields []string) (*Reassessment, error) {
	return NewReassessment(c.getEntity(key, fields))
}
func (c *Client) Reassessments(where Where) (*[]Reassessment, error) {
	type ReturnObj struct {
		Value []Reassessment `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПереоценкаТоваровВНТТ", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateReassessment(key PrimaryReassessment, entity Reassessment) (*Reassessment, error) {
	return NewReassessment(c.updateEntity(key, entity))
}
func (c *Client) DeleteReassessment(key PrimaryReassessment) error {
	return c.removeEntity(key)
}

type DocumentPereotsenkaTovarovVNTTTovary struct {
	Key                            Guid     `json:"Ref_Key,omitempty"`
	LineNumber                     Int64    `json:"LineNumber,omitempty"`
	Weight                         *Double  `json:"Вес,omitempty"`
	Quantity                       *Int64   `json:"Количество,omitempty"`
	ItemKey                        *Guid    `json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid    `json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid    `json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid    `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	RetailCost                     *Double  `json:"ЦенаВРознице,omitempty"`
	TsenaVRoznitseGr               *Double  `json:"ЦенаВРозницеГр,omitempty"`
	TsenaVRoznitseStaraia          *Double  `json:"ЦенаВРозницеСтарая,omitempty"`
	Naideno                        *Boolean `json:"Найдено,omitempty"`
	Dnei                           *Int64   `json:"Дней,omitempty"`
	DogovorKontragentaKey          *Guid    `json:"ДоговорКонтрагента_Key,omitempty"`
	ProtsentUtsenki                *Double  `json:"ПроцентУценки,omitempty"`
}

func (DocumentPereotsenkaTovarovVNTTTovary) APIEntityType() string {
	return "Document_ПереоценкаТоваровВНТТ_Товары"
}
func NewDocumentPereotsenkaTovarovVNTTTovary(data string, prevError error) (*DocumentPereotsenkaTovarovVNTTTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPereotsenkaTovarovVNTTTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPereotsenkaTovarovVNTTTovary(entity DocumentPereotsenkaTovarovVNTTTovary) (*DocumentPereotsenkaTovarovVNTTTovary, error) {
	return NewDocumentPereotsenkaTovarovVNTTTovary(c.createEntity(entity))
}
func (c *Client) DocumentPereotsenkaTovarovVNTTTovary(key PrimaryDocumentPereotsenkaTovarovVNTTTovary, fields []string) (*DocumentPereotsenkaTovarovVNTTTovary, error) {
	return NewDocumentPereotsenkaTovarovVNTTTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentPereotsenkaTovarovVNTTTovarys(where Where) (*[]DocumentPereotsenkaTovarovVNTTTovary, error) {
	type ReturnObj struct {
		Value []DocumentPereotsenkaTovarovVNTTTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПереоценкаТоваровВНТТ_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPereotsenkaTovarovVNTTTovary(key PrimaryDocumentPereotsenkaTovarovVNTTTovary, entity DocumentPereotsenkaTovarovVNTTTovary) (*DocumentPereotsenkaTovarovVNTTTovary, error) {
	return NewDocumentPereotsenkaTovarovVNTTTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPereotsenkaTovarovVNTTTovary(key PrimaryDocumentPereotsenkaTovarovVNTTTovary) error {
	return c.removeEntity(key)
}

type CatalogTomaKhraneniiaFailov struct {
	Key                 Guid     `json:"Ref_Key,omitempty"`
	DataVersion         *String  `json:"DataVersion,omitempty"`
	Description         *String  `json:"Description,omitempty"`
	Code                *String  `json:"Code,omitempty"`
	DeletionMark        *Boolean `json:"DeletionMark,omitempty"`
	Comment             *String  `json:"Комментарий,omitempty"`
	MaksimalnyiRazmer   *Int64   `json:"МаксимальныйРазмер,omitempty"`
	PolnyiPutLinux      *String  `json:"ПолныйПутьLinux,omitempty"`
	PolnyiPutWindows    *String  `json:"ПолныйПутьWindows,omitempty"`
	PoriadokZapolneniia *Int16   `json:"ПорядокЗаполнения,omitempty"`
}

func (CatalogTomaKhraneniiaFailov) APIEntityType() string {
	return "Catalog_ТомаХраненияФайлов"
}
func NewCatalogTomaKhraneniiaFailov(data string, prevError error) (*CatalogTomaKhraneniiaFailov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogTomaKhraneniiaFailov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogTomaKhraneniiaFailov(entity CatalogTomaKhraneniiaFailov) (*CatalogTomaKhraneniiaFailov, error) {
	return NewCatalogTomaKhraneniiaFailov(c.createEntity(entity))
}
func (c *Client) CatalogTomaKhraneniiaFailov(key PrimaryCatalogTomaKhraneniiaFailov, fields []string) (*CatalogTomaKhraneniiaFailov, error) {
	return NewCatalogTomaKhraneniiaFailov(c.getEntity(key, fields))
}
func (c *Client) CatalogTomaKhraneniiaFailovs(where Where) (*[]CatalogTomaKhraneniiaFailov, error) {
	type ReturnObj struct {
		Value []CatalogTomaKhraneniiaFailov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ТомаХраненияФайлов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogTomaKhraneniiaFailov(key PrimaryCatalogTomaKhraneniiaFailov, entity CatalogTomaKhraneniiaFailov) (*CatalogTomaKhraneniiaFailov, error) {
	return NewCatalogTomaKhraneniiaFailov(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogTomaKhraneniiaFailov(key PrimaryCatalogTomaKhraneniiaFailov) error {
	return c.removeEntity(key)
}

type DocumentJournalProizvodstvennyeDokumenty struct {
	Ref                 String    `json:"Ref,omitempty"`
	Type                *String   `json:"Type,omitempty"`
	Date                *DateTime `json:"Date,omitempty"`
	DeletionMark        *Boolean  `json:"DeletionMark,omitempty"`
	Number              *String   `json:"Number,omitempty"`
	Posted              *Boolean  `json:"Posted,omitempty"`
	ValiutaDokumentaKey *Guid     `json:"ВалютаДокумента_Key,omitempty"`
	Weight              *Double   `json:"Вес,omitempty"`
	Quantity            *Int64    `json:"Количество,omitempty"`
	Comment             *String   `json:"Комментарий,omitempty"`
	KontragentKey       *Guid     `json:"Контрагент_Key,omitempty"`
	OrganizatsiiaKey    *Guid     `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey    *Guid     `json:"Ответственный_Key,omitempty"`
	DepartmentKey       *Guid     `json:"Склад_Key,omitempty"`
	Sum                 *Double   `json:"Сумма,omitempty"`
	RefType             String    `json:"Ref_Type,omitempty"`
}

func (DocumentJournalProizvodstvennyeDokumenty) APIEntityType() string {
	return "DocumentJournal_ПроизводственныеДокументы"
}
func NewDocumentJournalProizvodstvennyeDokumenty(data string, prevError error) (*DocumentJournalProizvodstvennyeDokumenty, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentJournalProizvodstvennyeDokumenty)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentJournalProizvodstvennyeDokumenty(entity DocumentJournalProizvodstvennyeDokumenty) (*DocumentJournalProizvodstvennyeDokumenty, error) {
	return NewDocumentJournalProizvodstvennyeDokumenty(c.createEntity(entity))
}
func (c *Client) DocumentJournalProizvodstvennyeDokumenty(key PrimaryDocumentJournalProizvodstvennyeDokumenty, fields []string) (*DocumentJournalProizvodstvennyeDokumenty, error) {
	return NewDocumentJournalProizvodstvennyeDokumenty(c.getEntity(key, fields))
}
func (c *Client) DocumentJournalProizvodstvennyeDokumentys(where Where) (*[]DocumentJournalProizvodstvennyeDokumenty, error) {
	type ReturnObj struct {
		Value []DocumentJournalProizvodstvennyeDokumenty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("DocumentJournal_ПроизводственныеДокументы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentJournalProizvodstvennyeDokumenty(key PrimaryDocumentJournalProizvodstvennyeDokumenty, entity DocumentJournalProizvodstvennyeDokumenty) (*DocumentJournalProizvodstvennyeDokumenty, error) {
	return NewDocumentJournalProizvodstvennyeDokumenty(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentJournalProizvodstvennyeDokumenty(key PrimaryDocumentJournalProizvodstvennyeDokumenty) error {
	return c.removeEntity(key)
}

type DocumentIzmeneniePravDostupa struct {
	Key                     Guid      `json:"Ref_Key,omitempty"`
	DataVersion             *String   `json:"DataVersion,omitempty"`
	Number                  *String   `json:"Number,omitempty"`
	Date                    *DateTime `json:"Date,omitempty"`
	DeletionMark            *Boolean  `json:"DeletionMark,omitempty"`
	Posted                  *Boolean  `json:"Posted,omitempty"`
	AdresElektronnoiPochty  *String   `json:"АдресЭлектроннойПочты,omitempty"`
	KontragentDoKey         *Guid     `json:"КонтрагентДо_Key,omitempty"`
	OrganizatsiiaDoKey      *Guid     `json:"ОрганизацияДо_Key,omitempty"`
	DogovorKontragentaDoKey *Guid     `json:"ДоговорКонтрагентаДо_Key,omitempty"`
	PravoDostupaDo          *String   `json:"ПравоДоступаДо,omitempty"`
	OrganizatsiiaKey        *Guid     `json:"Организация_Key,omitempty"`
	KontragentKey           *Guid     `json:"Контрагент_Key,omitempty"`
	DogovorKontragentaKey   *Guid     `json:"ДоговорКонтрагента_Key,omitempty"`
	PravoDostupa            *String   `json:"ПравоДоступа,omitempty"`
}

func (DocumentIzmeneniePravDostupa) APIEntityType() string {
	return "Document_ИзменениеПравДоступа"
}
func NewDocumentIzmeneniePravDostupa(data string, prevError error) (*DocumentIzmeneniePravDostupa, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentIzmeneniePravDostupa)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentIzmeneniePravDostupa(entity DocumentIzmeneniePravDostupa) (*DocumentIzmeneniePravDostupa, error) {
	return NewDocumentIzmeneniePravDostupa(c.createEntity(entity))
}
func (c *Client) DocumentIzmeneniePravDostupa(key PrimaryDocumentIzmeneniePravDostupa, fields []string) (*DocumentIzmeneniePravDostupa, error) {
	return NewDocumentIzmeneniePravDostupa(c.getEntity(key, fields))
}
func (c *Client) DocumentIzmeneniePravDostupas(where Where) (*[]DocumentIzmeneniePravDostupa, error) {
	type ReturnObj struct {
		Value []DocumentIzmeneniePravDostupa `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ИзменениеПравДоступа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentIzmeneniePravDostupa(key PrimaryDocumentIzmeneniePravDostupa, entity DocumentIzmeneniePravDostupa) (*DocumentIzmeneniePravDostupa, error) {
	return NewDocumentIzmeneniePravDostupa(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentIzmeneniePravDostupa(key PrimaryDocumentIzmeneniePravDostupa) error {
	return c.removeEntity(key)
}

type CatalogNastroikaAssortimentnoiMatritsy struct {
	Key                                 Guid                                                                        `json:"Ref_Key,omitempty"`
	DataVersion                         *String                                                                     `json:"DataVersion,omitempty"`
	Description                         *String                                                                     `json:"Description,omitempty"`
	DeletionMark                        *Boolean                                                                    `json:"DeletionMark,omitempty"`
	IspolzuetsiaAssortimentnaiaMatritsa *Boolean                                                                    `json:"ИспользуетсяАссортиментнаяМатрица,omitempty"`
	NastroikaTovarnykhGrupp             *[]CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGruppRowType     `json:"НастройкаТоварныхГрупп,omitempty"`
	NastroikaTovarnykhKategorii         *[]CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategoriiRowType `json:"НастройкаТоварныхКатегорий,omitempty"`
	NastroikaTovarnykhPozitsii          *[]CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsiiRowType  `json:"НастройкаТоварныхПозиций,omitempty"`
}

func (CatalogNastroikaAssortimentnoiMatritsy) APIEntityType() string {
	return "Catalog_НастройкаАссортиментнойМатрицы"
}
func NewCatalogNastroikaAssortimentnoiMatritsy(data string, prevError error) (*CatalogNastroikaAssortimentnoiMatritsy, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogNastroikaAssortimentnoiMatritsy)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogNastroikaAssortimentnoiMatritsy(entity CatalogNastroikaAssortimentnoiMatritsy) (*CatalogNastroikaAssortimentnoiMatritsy, error) {
	return NewCatalogNastroikaAssortimentnoiMatritsy(c.createEntity(entity))
}
func (c *Client) CatalogNastroikaAssortimentnoiMatritsy(key PrimaryCatalogNastroikaAssortimentnoiMatritsy, fields []string) (*CatalogNastroikaAssortimentnoiMatritsy, error) {
	return NewCatalogNastroikaAssortimentnoiMatritsy(c.getEntity(key, fields))
}
func (c *Client) CatalogNastroikaAssortimentnoiMatritsys(where Where) (*[]CatalogNastroikaAssortimentnoiMatritsy, error) {
	type ReturnObj struct {
		Value []CatalogNastroikaAssortimentnoiMatritsy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкаАссортиментнойМатрицы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogNastroikaAssortimentnoiMatritsy(key PrimaryCatalogNastroikaAssortimentnoiMatritsy, entity CatalogNastroikaAssortimentnoiMatritsy) (*CatalogNastroikaAssortimentnoiMatritsy, error) {
	return NewCatalogNastroikaAssortimentnoiMatritsy(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogNastroikaAssortimentnoiMatritsy(key PrimaryCatalogNastroikaAssortimentnoiMatritsy) error {
	return c.removeEntity(key)
}

type CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGrupp struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	VstavkiBase64Data              *Binary `json:"Вставки_Base64Data,omitempty"`
	MetallKey                      *Guid   `json:"Металл_Key,omitempty"`
	Naimenovanie                   *String `json:"Наименование,omitempty"`
	UsloviiaVkhozhdeniiaBase64Data *Binary `json:"УсловияВхождения_Base64Data,omitempty"`
	VstavkiType                    *String `json:"Вставки_Type,omitempty"`
	UsloviiaVkhozhdeniiaType       *String `json:"УсловияВхождения_Type,omitempty"`
	Vstavki                        *Stream `json:"Вставки,omitempty"`
	UsloviiaVkhozhdeniia           *Stream `json:"УсловияВхождения,omitempty"`
}

func (CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGrupp) APIEntityType() string {
	return "Catalog_НастройкаАссортиментнойМатрицы_НастройкаТоварныхГрупп"
}
func NewCatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGrupp(data string, prevError error) (*CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGrupp, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGrupp)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGrupp(entity CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGrupp) (*CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGrupp, error) {
	return NewCatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGrupp(c.createEntity(entity))
}
func (c *Client) CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGrupp(key PrimaryCatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGrupp, fields []string) (*CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGrupp, error) {
	return NewCatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGrupp(c.getEntity(key, fields))
}
func (c *Client) CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGrupps(where Where) (*[]CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGrupp, error) {
	type ReturnObj struct {
		Value []CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGrupp `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкаАссортиментнойМатрицы_НастройкаТоварныхГрупп", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGrupp(key PrimaryCatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGrupp, entity CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGrupp) (*CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGrupp, error) {
	return NewCatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGrupp(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGrupp(key PrimaryCatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGrupp) error {
	return c.removeEntity(key)
}

type CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategorii struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	MiksyVstavokBase64Data         *Binary `json:"МиксыВставок_Base64Data,omitempty"`
	Naimenovanie                   *String `json:"Наименование,omitempty"`
	NomenklaturnaiaGruppaKey       *Guid   `json:"НоменклатурнаяГруппа_Key,omitempty"`
	UsloviiaVkhozhdeniiaBase64Data *Binary `json:"УсловияВхождения_Base64Data,omitempty"`
	MiksyVstavokType               *String `json:"МиксыВставок_Type,omitempty"`
	UsloviiaVkhozhdeniiaType       *String `json:"УсловияВхождения_Type,omitempty"`
	MiksyVstavok                   *Stream `json:"МиксыВставок,omitempty"`
	UsloviiaVkhozhdeniia           *Stream `json:"УсловияВхождения,omitempty"`
}

func (CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategorii) APIEntityType() string {
	return "Catalog_НастройкаАссортиментнойМатрицы_НастройкаТоварныхКатегорий"
}
func NewCatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategorii(data string, prevError error) (*CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategorii, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategorii)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategorii(entity CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategorii) (*CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategorii, error) {
	return NewCatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategorii(c.createEntity(entity))
}
func (c *Client) CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategorii(key PrimaryCatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategorii, fields []string) (*CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategorii, error) {
	return NewCatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategorii(c.getEntity(key, fields))
}
func (c *Client) CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategoriis(where Where) (*[]CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategorii, error) {
	type ReturnObj struct {
		Value []CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategorii `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкаАссортиментнойМатрицы_НастройкаТоварныхКатегорий", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategorii(key PrimaryCatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategorii, entity CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategorii) (*CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategorii, error) {
	return NewCatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategorii(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategorii(key PrimaryCatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategorii) error {
	return c.removeEntity(key)
}

type CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsii struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	SvoistvoTovara                 *String `json:"СвойствоТовара,omitempty"`
	UsloviiaVkhozhdeniiaBase64Data *Binary `json:"УсловияВхождения_Base64Data,omitempty"`
	Naimenovanie                   *String `json:"Наименование,omitempty"`
	UsloviiaVkhozhdeniiaType       *String `json:"УсловияВхождения_Type,omitempty"`
	UsloviiaVkhozhdeniia           *Stream `json:"УсловияВхождения,omitempty"`
}

func (CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsii) APIEntityType() string {
	return "Catalog_НастройкаАссортиментнойМатрицы_НастройкаТоварныхПозиций"
}
func NewCatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsii(data string, prevError error) (*CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsii, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsii)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsii(entity CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsii) (*CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsii, error) {
	return NewCatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsii(c.createEntity(entity))
}
func (c *Client) CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsii(key PrimaryCatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsii, fields []string) (*CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsii, error) {
	return NewCatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsii(c.getEntity(key, fields))
}
func (c *Client) CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsiis(where Where) (*[]CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsii, error) {
	type ReturnObj struct {
		Value []CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsii `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкаАссортиментнойМатрицы_НастройкаТоварныхПозиций", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsii(key PrimaryCatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsii, entity CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsii) (*CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsii, error) {
	return NewCatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsii(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsii(key PrimaryCatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsii) error {
	return c.removeEntity(key)
}

type DocumentJournalDokumentyKontragentov struct {
	Ref              String    `json:"Ref,omitempty"`
	Type             *String   `json:"Type,omitempty"`
	Date             *DateTime `json:"Date,omitempty"`
	DeletionMark     *Boolean  `json:"DeletionMark,omitempty"`
	Number           *String   `json:"Number,omitempty"`
	Posted           *Boolean  `json:"Posted,omitempty"`
	ValiutaKey       *Guid     `json:"Валюта_Key,omitempty"`
	Weight           *Double   `json:"Вес,omitempty"`
	OperationType    *String   `json:"ВидОперации,omitempty"`
	Informatsiia     *String   `json:"Информация,omitempty"`
	Quantity         *Int64    `json:"Количество,omitempty"`
	Comment          *String   `json:"Комментарий,omitempty"`
	Kontragent       *String   `json:"Контрагент,omitempty"`
	OrganizatsiiaKey *Guid     `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey *Guid     `json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey *Guid     `json:"Подразделение_Key,omitempty"`
	Sum              *Double   `json:"Сумма,omitempty"`
	RefType          String    `json:"Ref_Type,omitempty"`
	VidOperatsiiType *String   `json:"ВидОперации_Type,omitempty"`
	InformatsiiaType *String   `json:"Информация_Type,omitempty"`
	KontragentType   *String   `json:"Контрагент_Type,omitempty"`
}

func (DocumentJournalDokumentyKontragentov) APIEntityType() string {
	return "DocumentJournal_ДокументыКонтрагентов"
}
func NewDocumentJournalDokumentyKontragentov(data string, prevError error) (*DocumentJournalDokumentyKontragentov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentJournalDokumentyKontragentov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentJournalDokumentyKontragentov(entity DocumentJournalDokumentyKontragentov) (*DocumentJournalDokumentyKontragentov, error) {
	return NewDocumentJournalDokumentyKontragentov(c.createEntity(entity))
}
func (c *Client) DocumentJournalDokumentyKontragentov(key PrimaryDocumentJournalDokumentyKontragentov, fields []string) (*DocumentJournalDokumentyKontragentov, error) {
	return NewDocumentJournalDokumentyKontragentov(c.getEntity(key, fields))
}
func (c *Client) DocumentJournalDokumentyKontragentovs(where Where) (*[]DocumentJournalDokumentyKontragentov, error) {
	type ReturnObj struct {
		Value []DocumentJournalDokumentyKontragentov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("DocumentJournal_ДокументыКонтрагентов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentJournalDokumentyKontragentov(key PrimaryDocumentJournalDokumentyKontragentov, entity DocumentJournalDokumentyKontragentov) (*DocumentJournalDokumentyKontragentov, error) {
	return NewDocumentJournalDokumentyKontragentov(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentJournalDokumentyKontragentov(key PrimaryDocumentJournalDokumentyKontragentov) error {
	return c.removeEntity(key)
}

type MoveInstance struct {
	Key                           Guid                                                 `json:"Ref_Key,omitempty"`
	DataVersion                   *String                                              `json:"DataVersion,omitempty"`
	Number                        *String                                              `json:"Number,omitempty"`
	Date                          *DateTime                                            `json:"Date,omitempty"`
	DeletionMark                  *Boolean                                             `json:"DeletionMark,omitempty"`
	Posted                        *Boolean                                             `json:"Posted,omitempty"`
	Weight                        *Double                                              `json:"ВесДокумента,omitempty"`
	OperationType                 *String                                              `json:"ВидОперации,omitempty"`
	VnutrenniiZakazKey            *Guid                                                `json:"ВнутреннийЗаказ_Key,omitempty"`
	DliaKontroliaUnikalnosti      *String                                              `json:"ДляКонтроляУникальности,omitempty"`
	DokumentOsnovanie             *String                                              `json:"ДокументОснование,omitempty"`
	DokumentSozdanVIuTD           *Boolean                                             `json:"ДокументСозданВЮТД,omitempty"`
	IspolzovatRezhimSverki        *Boolean                                             `json:"ИспользоватьРежимСверки,omitempty"`
	KolichestvoDokumenta          *Int64                                               `json:"КоличествоДокумента,omitempty"`
	KolichestvoDokumentaSvereno   *Int64                                               `json:"КоличествоДокументаСверено,omitempty"`
	Comment                       *String                                              `json:"Комментарий,omitempty"`
	OrganizatsiiaKey              *Guid                                                `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey              *Guid                                                `json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey              *Guid                                                `json:"Подразделение_Key,omitempty"`
	PrichinaVozvrataKey           *Guid                                                `json:"ПричинаВозврата_Key,omitempty"`
	SkladOtpravitelKey            *Guid                                                `json:"СкладОтправитель_Key,omitempty"`
	SkladPoluchatelKey            *Guid                                                `json:"СкладПолучатель_Key,omitempty"`
	SumOfDocument                 *Double                                              `json:"СуммаДокумента,omitempty"`
	TipDokumenta                  *String                                              `json:"ТипДокумента,omitempty"`
	TipSkidkiNatsenkiKey          *Guid                                                `json:"ТипСкидкиНаценки_Key,omitempty"`
	TipTsenKey                    *Guid                                                `json:"ТипЦен_Key,omitempty"`
	KhoziaistvennaiaOperatsiiaKey *Guid                                                `json:"ХозяйственнаяОперация_Key,omitempty"`
	KurerKey                      *Guid                                                `json:"Курьер_Key,omitempty"`
	Sertifikaty                   *[]DocumentPeremeshchenieTovarovSertifikatyRowType   `json:"Сертификаты,omitempty"`
	Goods                         *[]DocumentPeremeshchenieTovarovTovaryRowType        `json:"Товары,omitempty"`
	SpisokZaiavok                 *[]DocumentPeremeshchenieTovarovSpisokZaiavokRowType `json:"СписокЗаявок,omitempty"`
	DokumentOsnovanieType         *String                                              `json:"ДокументОснование_Type,omitempty"`
}

func (MoveInstance) APIEntityType() string {
	return "Document_ПеремещениеТоваров"
}
func NewMoveInstance(data string, prevError error) (*MoveInstance, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(MoveInstance)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateMoveInstance(entity MoveInstance) (*MoveInstance, error) {
	return NewMoveInstance(c.createEntity(entity))
}
func (c *Client) MoveInstance(key PrimaryMoveInstance, fields []string) (*MoveInstance, error) {
	return NewMoveInstance(c.getEntity(key, fields))
}
func (c *Client) MoveInstances(where Where) (*[]MoveInstance, error) {
	type ReturnObj struct {
		Value []MoveInstance `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПеремещениеТоваров", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateMoveInstance(key PrimaryMoveInstance, entity MoveInstance) (*MoveInstance, error) {
	return NewMoveInstance(c.updateEntity(key, entity))
}
func (c *Client) DeleteMoveInstance(key PrimaryMoveInstance) error {
	return c.removeEntity(key)
}

type DocumentPeremeshchenieTovarovSertifikaty struct {
	Key           Guid    `json:"Ref_Key,omitempty"`
	LineNumber    Int64   `json:"LineNumber,omitempty"`
	SertifikatKey *Guid   `json:"Сертификат_Key,omitempty"`
	Sum           *Double `json:"Сумма,omitempty"`
}

func (DocumentPeremeshchenieTovarovSertifikaty) APIEntityType() string {
	return "Document_ПеремещениеТоваров_Сертификаты"
}
func NewDocumentPeremeshchenieTovarovSertifikaty(data string, prevError error) (*DocumentPeremeshchenieTovarovSertifikaty, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPeremeshchenieTovarovSertifikaty)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPeremeshchenieTovarovSertifikaty(entity DocumentPeremeshchenieTovarovSertifikaty) (*DocumentPeremeshchenieTovarovSertifikaty, error) {
	return NewDocumentPeremeshchenieTovarovSertifikaty(c.createEntity(entity))
}
func (c *Client) DocumentPeremeshchenieTovarovSertifikaty(key PrimaryDocumentPeremeshchenieTovarovSertifikaty, fields []string) (*DocumentPeremeshchenieTovarovSertifikaty, error) {
	return NewDocumentPeremeshchenieTovarovSertifikaty(c.getEntity(key, fields))
}
func (c *Client) DocumentPeremeshchenieTovarovSertifikatys(where Where) (*[]DocumentPeremeshchenieTovarovSertifikaty, error) {
	type ReturnObj struct {
		Value []DocumentPeremeshchenieTovarovSertifikaty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПеремещениеТоваров_Сертификаты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPeremeshchenieTovarovSertifikaty(key PrimaryDocumentPeremeshchenieTovarovSertifikaty, entity DocumentPeremeshchenieTovarovSertifikaty) (*DocumentPeremeshchenieTovarovSertifikaty, error) {
	return NewDocumentPeremeshchenieTovarovSertifikaty(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPeremeshchenieTovarovSertifikaty(key PrimaryDocumentPeremeshchenieTovarovSertifikaty) error {
	return c.removeEntity(key)
}

type DocumentPeremeshchenieTovarovTovary struct {
	Key                            Guid     `json:"Ref_Key,omitempty"`
	LineNumber                     Int64    `json:"LineNumber,omitempty"`
	Weight                         *Double  `json:"Вес,omitempty"`
	DokumentRezerva                *String  `json:"ДокументРезерва,omitempty"`
	KachestvoKey                   *Guid    `json:"Качество_Key,omitempty"`
	Quantity                       *Int64   `json:"Количество,omitempty"`
	ItemKey                        *Guid    `json:"Номенклатура_Key,omitempty"`
	ProtsentRoznichnoiNatsenki     *Double  `json:"ПроцентРозничнойНаценки,omitempty"`
	SizeKey                        *Guid    `json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid    `json:"СерияНоменклатуры_Key,omitempty"`
	StoimostBezNDS                 *Double  `json:"СтоимостьБезНДС,omitempty"`
	StoimostSNDS                   *Double  `json:"СтоимостьСНДС,omitempty"`
	Sum                            *Double  `json:"Сумма,omitempty"`
	SummaPostupleniia              *Double  `json:"СуммаПоступления,omitempty"`
	KharakteristikaNomenklaturyKey *Guid    `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Double  `json:"Цена,omitempty"`
	TsenaVRoznitseGr               *Double  `json:"ЦенаВРозницеГр,omitempty"`
	TsenaPostupleniia              *Double  `json:"ЦенаПоступления,omitempty"`
	Naideno                        *Boolean `json:"Найдено,omitempty"`
	InternetZakazKey               *Guid    `json:"ИнтернетЗаказ_Key,omitempty"`
	DokumentRezervaType            *String  `json:"ДокументРезерва_Type,omitempty"`
}

func (DocumentPeremeshchenieTovarovTovary) APIEntityType() string {
	return "Document_ПеремещениеТоваров_Товары"
}
func NewDocumentPeremeshchenieTovarovTovary(data string, prevError error) (*DocumentPeremeshchenieTovarovTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPeremeshchenieTovarovTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPeremeshchenieTovarovTovary(entity DocumentPeremeshchenieTovarovTovary) (*DocumentPeremeshchenieTovarovTovary, error) {
	return NewDocumentPeremeshchenieTovarovTovary(c.createEntity(entity))
}
func (c *Client) DocumentPeremeshchenieTovarovTovary(key PrimaryDocumentPeremeshchenieTovarovTovary, fields []string) (*DocumentPeremeshchenieTovarovTovary, error) {
	return NewDocumentPeremeshchenieTovarovTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentPeremeshchenieTovarovTovarys(where Where) (*[]DocumentPeremeshchenieTovarovTovary, error) {
	type ReturnObj struct {
		Value []DocumentPeremeshchenieTovarovTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПеремещениеТоваров_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPeremeshchenieTovarovTovary(key PrimaryDocumentPeremeshchenieTovarovTovary, entity DocumentPeremeshchenieTovarovTovary) (*DocumentPeremeshchenieTovarovTovary, error) {
	return NewDocumentPeremeshchenieTovarovTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPeremeshchenieTovarovTovary(key PrimaryDocumentPeremeshchenieTovarovTovary) error {
	return c.removeEntity(key)
}

type DocumentPeremeshchenieTovarovSpisokZaiavok struct {
	Key                     Guid    `json:"Ref_Key,omitempty"`
	LineNumber              Int64   `json:"LineNumber,omitempty"`
	ZaiavkaNaPeremeshchenie *String `json:"ЗаявкаНаПеремещение,omitempty"`
}

func (DocumentPeremeshchenieTovarovSpisokZaiavok) APIEntityType() string {
	return "Document_ПеремещениеТоваров_СписокЗаявок"
}
func NewDocumentPeremeshchenieTovarovSpisokZaiavok(data string, prevError error) (*DocumentPeremeshchenieTovarovSpisokZaiavok, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPeremeshchenieTovarovSpisokZaiavok)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPeremeshchenieTovarovSpisokZaiavok(entity DocumentPeremeshchenieTovarovSpisokZaiavok) (*DocumentPeremeshchenieTovarovSpisokZaiavok, error) {
	return NewDocumentPeremeshchenieTovarovSpisokZaiavok(c.createEntity(entity))
}
func (c *Client) DocumentPeremeshchenieTovarovSpisokZaiavok(key PrimaryDocumentPeremeshchenieTovarovSpisokZaiavok, fields []string) (*DocumentPeremeshchenieTovarovSpisokZaiavok, error) {
	return NewDocumentPeremeshchenieTovarovSpisokZaiavok(c.getEntity(key, fields))
}
func (c *Client) DocumentPeremeshchenieTovarovSpisokZaiavoks(where Where) (*[]DocumentPeremeshchenieTovarovSpisokZaiavok, error) {
	type ReturnObj struct {
		Value []DocumentPeremeshchenieTovarovSpisokZaiavok `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПеремещениеТоваров_СписокЗаявок", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPeremeshchenieTovarovSpisokZaiavok(key PrimaryDocumentPeremeshchenieTovarovSpisokZaiavok, entity DocumentPeremeshchenieTovarovSpisokZaiavok) (*DocumentPeremeshchenieTovarovSpisokZaiavok, error) {
	return NewDocumentPeremeshchenieTovarovSpisokZaiavok(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPeremeshchenieTovarovSpisokZaiavok(key PrimaryDocumentPeremeshchenieTovarovSpisokZaiavok) error {
	return c.removeEntity(key)
}

type DocumentZakrytieZaiavokNaRaskhodovanieSredstv struct {
	Key                           Guid                                                                                 `json:"Ref_Key,omitempty"`
	DataVersion                   *String                                                                              `json:"DataVersion,omitempty"`
	Number                        *String                                                                              `json:"Number,omitempty"`
	Date                          *DateTime                                                                            `json:"Date,omitempty"`
	DeletionMark                  *Boolean                                                                             `json:"DeletionMark,omitempty"`
	Posted                        *Boolean                                                                             `json:"Posted,omitempty"`
	Comment                       *String                                                                              `json:"Комментарий,omitempty"`
	KontragentKey                 *Guid                                                                                `json:"Контрагент_Key,omitempty"`
	OtborDataKon                  *DateTime                                                                            `json:"ОтборДатаКон,omitempty"`
	OtborDataNach                 *DateTime                                                                            `json:"ОтборДатаНач,omitempty"`
	OtborKontragent               *Boolean                                                                             `json:"ОтборКонтрагент,omitempty"`
	OtborOtvetstvennyi            *Boolean                                                                             `json:"ОтборОтветственный,omitempty"`
	OtborTsFO                     *Boolean                                                                             `json:"ОтборЦФО,omitempty"`
	OtvetstvennyiKey              *Guid                                                                                `json:"Ответственный_Key,omitempty"`
	OtvetstvennyiZaiavkaKey       *Guid                                                                                `json:"ОтветственныйЗаявка_Key,omitempty"`
	Sostoianie                    *String                                                                              `json:"Состояние,omitempty"`
	TipDokumenta                  *String                                                                              `json:"ТипДокумента,omitempty"`
	TsFOKey                       *Guid                                                                                `json:"ЦФО_Key,omitempty"`
	ZaiavkiNaRaskhodovanieSredstv *[]DocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstvRowType `json:"ЗаявкиНаРасходованиеСредств,omitempty"`
}

func (DocumentZakrytieZaiavokNaRaskhodovanieSredstv) APIEntityType() string {
	return "Document_ЗакрытиеЗаявокНаРасходованиеСредств"
}
func NewDocumentZakrytieZaiavokNaRaskhodovanieSredstv(data string, prevError error) (*DocumentZakrytieZaiavokNaRaskhodovanieSredstv, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentZakrytieZaiavokNaRaskhodovanieSredstv)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentZakrytieZaiavokNaRaskhodovanieSredstv(entity DocumentZakrytieZaiavokNaRaskhodovanieSredstv) (*DocumentZakrytieZaiavokNaRaskhodovanieSredstv, error) {
	return NewDocumentZakrytieZaiavokNaRaskhodovanieSredstv(c.createEntity(entity))
}
func (c *Client) DocumentZakrytieZaiavokNaRaskhodovanieSredstv(key PrimaryDocumentZakrytieZaiavokNaRaskhodovanieSredstv, fields []string) (*DocumentZakrytieZaiavokNaRaskhodovanieSredstv, error) {
	return NewDocumentZakrytieZaiavokNaRaskhodovanieSredstv(c.getEntity(key, fields))
}
func (c *Client) DocumentZakrytieZaiavokNaRaskhodovanieSredstvs(where Where) (*[]DocumentZakrytieZaiavokNaRaskhodovanieSredstv, error) {
	type ReturnObj struct {
		Value []DocumentZakrytieZaiavokNaRaskhodovanieSredstv `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗакрытиеЗаявокНаРасходованиеСредств", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentZakrytieZaiavokNaRaskhodovanieSredstv(key PrimaryDocumentZakrytieZaiavokNaRaskhodovanieSredstv, entity DocumentZakrytieZaiavokNaRaskhodovanieSredstv) (*DocumentZakrytieZaiavokNaRaskhodovanieSredstv, error) {
	return NewDocumentZakrytieZaiavokNaRaskhodovanieSredstv(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentZakrytieZaiavokNaRaskhodovanieSredstv(key PrimaryDocumentZakrytieZaiavokNaRaskhodovanieSredstv) error {
	return c.removeEntity(key)
}

type DocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstv struct {
	Key                  Guid    `json:"Ref_Key,omitempty"`
	LineNumber           Int64   `json:"LineNumber,omitempty"`
	ValiutaZaiavkaKey    *Guid   `json:"ВалютаЗаявка_Key,omitempty"`
	ZaiavkaKey           *Guid   `json:"Заявка_Key,omitempty"`
	KontragentKey        *Guid   `json:"Контрагент_Key,omitempty"`
	OstatokZaiavka       *Double `json:"ОстатокЗаявка,omitempty"`
	OstatokRazmeshchenie *Double `json:"ОстатокРазмещение,omitempty"`
	OstatokRezerv        *Double `json:"ОстатокРезерв,omitempty"`
	OtvetstvennyiKey     *Guid   `json:"Ответственный_Key,omitempty"`
}

func (DocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstv) APIEntityType() string {
	return "Document_ЗакрытиеЗаявокНаРасходованиеСредств_ЗаявкиНаРасходованиеСредств"
}
func NewDocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstv(data string, prevError error) (*DocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstv, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstv)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstv(entity DocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstv) (*DocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstv, error) {
	return NewDocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstv(c.createEntity(entity))
}
func (c *Client) DocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstv(key PrimaryDocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstv, fields []string) (*DocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstv, error) {
	return NewDocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstv(c.getEntity(key, fields))
}
func (c *Client) DocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstvs(where Where) (*[]DocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstv, error) {
	type ReturnObj struct {
		Value []DocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstv `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗакрытиеЗаявокНаРасходованиеСредств_ЗаявкиНаРасходованиеСредств", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstv(key PrimaryDocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstv, entity DocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstv) (*DocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstv, error) {
	return NewDocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstv(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstv(key PrimaryDocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstv) error {
	return c.removeEntity(key)
}

type MemberCard struct {
	Key                          Guid      `json:"Ref_Key,omitempty"`
	DataVersion                  *String   `json:"DataVersion,omitempty"`
	Description                  *String   `json:"Description,omitempty"`
	Code                         *String   `json:"Code,omitempty"`
	ParentKey                    *Guid     `json:"Parent_Key,omitempty"`
	IsFolder                     *Boolean  `json:"IsFolder,omitempty"`
	DeletionMark                 *Boolean  `json:"DeletionMark,omitempty"`
	Email                        *String   `json:"Email,omitempty"`
	Adres                        *String   `json:"Адрес,omitempty"`
	Bonusnaia                    *Boolean  `json:"Бонусная,omitempty"`
	MemberCardTypeKey            *Guid     `json:"ВидДисконтнойКарты_Key,omitempty"`
	DataRozhdeniia               *DateTime `json:"ДатаРождения,omitempty"`
	Nakopitelnaia                *Boolean  `json:"Накопительная,omitempty"`
	Number                       *String   `json:"Номер,omitempty"`
	Sum                          *Double   `json:"Сумма,omitempty"`
	SkhemaNakopitelnykhSkidokKey *Guid     `json:"СхемаНакопительныхСкидок_Key,omitempty"`
	Telefon                      *String   `json:"Телефон,omitempty"`
	TipDiskontnoiKarty           *String   `json:"ТипДисконтнойКарты,omitempty"`
	FIO                          *String   `json:"ФИО,omitempty"`
	VladeletsKarty               *String   `json:"ВладелецКарты,omitempty"`
	Pol                          *String   `json:"Пол,omitempty"`
	KontragentKey                *Guid     `json:"Контрагент_Key,omitempty"`
	DataAnkety                   *DateTime `json:"ДатаАнкеты,omitempty"`
	SoglasieNaSMSRassylku        *Boolean  `json:"СогласиеНаСМСРассылку,omitempty"`
	SoglasieNaPochtovuiuRassylku *Boolean  `json:"СогласиеНаПочтовуюРассылку,omitempty"`
	VladeletsKartyType           *String   `json:"ВладелецКарты_Type,omitempty"`
}

func (MemberCard) APIEntityType() string {
	return "Catalog_ДисконтныеКарты"
}
func NewMemberCard(data string, prevError error) (*MemberCard, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(MemberCard)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateMemberCard(entity MemberCard) (*MemberCard, error) {
	return NewMemberCard(c.createEntity(entity))
}
func (c *Client) MemberCard(key PrimaryMemberCard, fields []string) (*MemberCard, error) {
	return NewMemberCard(c.getEntity(key, fields))
}
func (c *Client) MemberCards(where Where) (*[]MemberCard, error) {
	type ReturnObj struct {
		Value []MemberCard `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ДисконтныеКарты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateMemberCard(key PrimaryMemberCard, entity MemberCard) (*MemberCard, error) {
	return NewMemberCard(c.updateEntity(key, entity))
}
func (c *Client) DeleteMemberCard(key PrimaryMemberCard) error {
	return c.removeEntity(key)
}

type DocumentABCKlassifikatsiiaPokupatelei struct {
	Key                                Guid                                                                              `json:"Ref_Key,omitempty"`
	DataVersion                        *String                                                                           `json:"DataVersion,omitempty"`
	Number                             *String                                                                           `json:"Number,omitempty"`
	Date                               *DateTime                                                                         `json:"Date,omitempty"`
	DeletionMark                       *Boolean                                                                          `json:"DeletionMark,omitempty"`
	Posted                             *Boolean                                                                          `json:"Posted,omitempty"`
	DataNachala                        *DateTime                                                                         `json:"ДатаНачала,omitempty"`
	DataOkonchaniia                    *DateTime                                                                         `json:"ДатаОкончания,omitempty"`
	Comment                            *String                                                                           `json:"Комментарий,omitempty"`
	ProtsentAKlassa                    *Double                                                                           `json:"ПроцентAКласса,omitempty"`
	ProtsentBKlassa                    *Double                                                                           `json:"ПроцентBКласса,omitempty"`
	ProtsentCKlassa                    *Double                                                                           `json:"ПроцентCКласса,omitempty"`
	TablitsaRaspredeleniiaKontragentov *[]DocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentovRowType `json:"ТаблицаРаспределенияКонтрагентов,omitempty"`
}

func (DocumentABCKlassifikatsiiaPokupatelei) APIEntityType() string {
	return "Document_ABCКлассификацияПокупателей"
}
func NewDocumentABCKlassifikatsiiaPokupatelei(data string, prevError error) (*DocumentABCKlassifikatsiiaPokupatelei, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentABCKlassifikatsiiaPokupatelei)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentABCKlassifikatsiiaPokupatelei(entity DocumentABCKlassifikatsiiaPokupatelei) (*DocumentABCKlassifikatsiiaPokupatelei, error) {
	return NewDocumentABCKlassifikatsiiaPokupatelei(c.createEntity(entity))
}
func (c *Client) DocumentABCKlassifikatsiiaPokupatelei(key PrimaryDocumentABCKlassifikatsiiaPokupatelei, fields []string) (*DocumentABCKlassifikatsiiaPokupatelei, error) {
	return NewDocumentABCKlassifikatsiiaPokupatelei(c.getEntity(key, fields))
}
func (c *Client) DocumentABCKlassifikatsiiaPokupateleis(where Where) (*[]DocumentABCKlassifikatsiiaPokupatelei, error) {
	type ReturnObj struct {
		Value []DocumentABCKlassifikatsiiaPokupatelei `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ABCКлассификацияПокупателей", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentABCKlassifikatsiiaPokupatelei(key PrimaryDocumentABCKlassifikatsiiaPokupatelei, entity DocumentABCKlassifikatsiiaPokupatelei) (*DocumentABCKlassifikatsiiaPokupatelei, error) {
	return NewDocumentABCKlassifikatsiiaPokupatelei(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentABCKlassifikatsiiaPokupatelei(key PrimaryDocumentABCKlassifikatsiiaPokupatelei) error {
	return c.removeEntity(key)
}

type DocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentov struct {
	Key                       Guid    `json:"Ref_Key,omitempty"`
	LineNumber                Int64   `json:"LineNumber,omitempty"`
	ABCKlassifikatsiia        *String `json:"ABCКлассификация,omitempty"`
	ABCKlassifikatsiiaStaraia *String `json:"ABCКлассификацияСтарая,omitempty"`
	ZnachenieParametra        *Double `json:"ЗначениеПараметра,omitempty"`
	KontragentKey             *Guid   `json:"Контрагент_Key,omitempty"`
	MenedzherKontragentaKey   *Guid   `json:"МенеджерКонтрагента_Key,omitempty"`
}

func (DocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentov) APIEntityType() string {
	return "Document_ABCКлассификацияПокупателей_ТаблицаРаспределенияКонтрагентов"
}
func NewDocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentov(data string, prevError error) (*DocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentov(entity DocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentov) (*DocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentov, error) {
	return NewDocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentov(c.createEntity(entity))
}
func (c *Client) DocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentov(key PrimaryDocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentov, fields []string) (*DocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentov, error) {
	return NewDocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentov(c.getEntity(key, fields))
}
func (c *Client) DocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentovs(where Where) (*[]DocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentov, error) {
	type ReturnObj struct {
		Value []DocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ABCКлассификацияПокупателей_ТаблицаРаспределенияКонтрагентов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentov(key PrimaryDocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentov, entity DocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentov) (*DocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentov, error) {
	return NewDocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentov(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentov(key PrimaryDocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentov) error {
	return c.removeEntity(key)
}

type CatalogIdentifikatoryObieektovMetadannykh struct {
	Key                                 Guid     `json:"Ref_Key,omitempty"`
	DataVersion                         *String  `json:"DataVersion,omitempty"`
	Description                         *String  `json:"Description,omitempty"`
	ParentKey                           *Guid    `json:"Parent_Key,omitempty"`
	DeletionMark                        *Boolean `json:"DeletionMark,omitempty"`
	PoriadokKollektsii                  *Int16   `json:"ПорядокКоллекции,omitempty"`
	Imia                                *String  `json:"Имя,omitempty"`
	Sinonim                             *String  `json:"Синоним,omitempty"`
	PolnoeImia                          *String  `json:"ПолноеИмя,omitempty"`
	PolnyiSinonim                       *String  `json:"ПолныйСиноним,omitempty"`
	BezDannykh                          *Boolean `json:"БезДанных,omitempty"`
	ZnacheniePustoiSsylki               *String  `json:"ЗначениеПустойСсылки,omitempty"`
	KliuchObieektaMetadannykhBase64Data *Binary  `json:"КлючОбъектаМетаданных_Base64Data,omitempty"`
	NovaiaSsylkaKey                     *Guid    `json:"НоваяСсылка_Key,omitempty"`
	ZnacheniePustoiSsylkiType           *String  `json:"ЗначениеПустойСсылки_Type,omitempty"`
	KliuchObieektaMetadannykhType       *String  `json:"КлючОбъектаМетаданных_Type,omitempty"`
	KliuchObieektaMetadannykh           *Stream  `json:"КлючОбъектаМетаданных,omitempty"`
}

func (CatalogIdentifikatoryObieektovMetadannykh) APIEntityType() string {
	return "Catalog_ИдентификаторыОбъектовМетаданных"
}
func NewCatalogIdentifikatoryObieektovMetadannykh(data string, prevError error) (*CatalogIdentifikatoryObieektovMetadannykh, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogIdentifikatoryObieektovMetadannykh)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogIdentifikatoryObieektovMetadannykh(entity CatalogIdentifikatoryObieektovMetadannykh) (*CatalogIdentifikatoryObieektovMetadannykh, error) {
	return NewCatalogIdentifikatoryObieektovMetadannykh(c.createEntity(entity))
}
func (c *Client) CatalogIdentifikatoryObieektovMetadannykh(key PrimaryCatalogIdentifikatoryObieektovMetadannykh, fields []string) (*CatalogIdentifikatoryObieektovMetadannykh, error) {
	return NewCatalogIdentifikatoryObieektovMetadannykh(c.getEntity(key, fields))
}
func (c *Client) CatalogIdentifikatoryObieektovMetadannykhs(where Where) (*[]CatalogIdentifikatoryObieektovMetadannykh, error) {
	type ReturnObj struct {
		Value []CatalogIdentifikatoryObieektovMetadannykh `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ИдентификаторыОбъектовМетаданных", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogIdentifikatoryObieektovMetadannykh(key PrimaryCatalogIdentifikatoryObieektovMetadannykh, entity CatalogIdentifikatoryObieektovMetadannykh) (*CatalogIdentifikatoryObieektovMetadannykh, error) {
	return NewCatalogIdentifikatoryObieektovMetadannykh(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogIdentifikatoryObieektovMetadannykh(key PrimaryCatalogIdentifikatoryObieektovMetadannykh) error {
	return c.removeEntity(key)
}

type DocumentSvodnaiaInventarizatsiiaTovarovNaSklade struct {
	Key                                          Guid                                                                                        `json:"Ref_Key,omitempty"`
	DataVersion                                  *String                                                                                     `json:"DataVersion,omitempty"`
	Number                                       *String                                                                                     `json:"Number,omitempty"`
	Date                                         *DateTime                                                                                   `json:"Date,omitempty"`
	DeletionMark                                 *Boolean                                                                                    `json:"DeletionMark,omitempty"`
	Posted                                       *Boolean                                                                                    `json:"Posted,omitempty"`
	Weight                                       *Double                                                                                     `json:"ВесДокумента,omitempty"`
	VPechatnykhFormakhTTPechatatRoznichnyeSummy  *Boolean                                                                                    `json:"ВПечатныхФормахТТПечататьРозничныеСуммы,omitempty"`
	DokumentSozdanVIuTD                          *Boolean                                                                                    `json:"ДокументСозданВЮТД,omitempty"`
	KolichestvoDokumenta                         *Int64                                                                                      `json:"КоличествоДокумента,omitempty"`
	Comment                                      *String                                                                                     `json:"Комментарий,omitempty"`
	OrganizatsiiaKey                             *Guid                                                                                       `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                             *Guid                                                                                       `json:"Ответственный_Key,omitempty"`
	DepartmentKey                                *Guid                                                                                       `json:"Склад_Key,omitempty"`
	SumOfDocument                                *Double                                                                                     `json:"СуммаДокумента,omitempty"`
	UsloviiaProvedeniiaInventarizatsiiBase64Data *Binary                                                                                     `json:"УсловияПроведенияИнвентаризаций_Base64Data,omitempty"`
	KhoziaistvennaiaOperatsiiaKey                *Guid                                                                                       `json:"ХозяйственнаяОперация_Key,omitempty"`
	NastroikiZapolneniiaBase64Data               *Binary                                                                                     `json:"НастройкиЗаполнения_Base64Data,omitempty"`
	Sertifikaty                                  *[]DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikatyRowType                        `json:"Сертификаты,omitempty"`
	UsloviiaProvedeniiaInventarizatsii           *[]DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsiiRowType `json:"УсловияПроведенияИнвентаризации,omitempty"`
	UsloviiaProvedeniiaInventarizatsiiType       *String                                                                                     `json:"УсловияПроведенияИнвентаризаций_Type,omitempty"`
	NastroikiZapolneniiaType                     *String                                                                                     `json:"НастройкиЗаполнения_Type,omitempty"`
	InventoryTerms                               *Stream                                                                                     `json:"УсловияПроведенияИнвентаризаций,omitempty"`
	NastroikiZapolneniia                         *Stream                                                                                     `json:"НастройкиЗаполнения,omitempty"`
}

func (DocumentSvodnaiaInventarizatsiiaTovarovNaSklade) APIEntityType() string {
	return "Document_СводнаяИнвентаризацияТоваровНаСкладе"
}
func NewDocumentSvodnaiaInventarizatsiiaTovarovNaSklade(data string, prevError error) (*DocumentSvodnaiaInventarizatsiiaTovarovNaSklade, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentSvodnaiaInventarizatsiiaTovarovNaSklade)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentSvodnaiaInventarizatsiiaTovarovNaSklade(entity DocumentSvodnaiaInventarizatsiiaTovarovNaSklade) (*DocumentSvodnaiaInventarizatsiiaTovarovNaSklade, error) {
	return NewDocumentSvodnaiaInventarizatsiiaTovarovNaSklade(c.createEntity(entity))
}
func (c *Client) DocumentSvodnaiaInventarizatsiiaTovarovNaSklade(key PrimaryDocumentSvodnaiaInventarizatsiiaTovarovNaSklade, fields []string) (*DocumentSvodnaiaInventarizatsiiaTovarovNaSklade, error) {
	return NewDocumentSvodnaiaInventarizatsiiaTovarovNaSklade(c.getEntity(key, fields))
}
func (c *Client) DocumentSvodnaiaInventarizatsiiaTovarovNaSklades(where Where) (*[]DocumentSvodnaiaInventarizatsiiaTovarovNaSklade, error) {
	type ReturnObj struct {
		Value []DocumentSvodnaiaInventarizatsiiaTovarovNaSklade `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СводнаяИнвентаризацияТоваровНаСкладе", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentSvodnaiaInventarizatsiiaTovarovNaSklade(key PrimaryDocumentSvodnaiaInventarizatsiiaTovarovNaSklade, entity DocumentSvodnaiaInventarizatsiiaTovarovNaSklade) (*DocumentSvodnaiaInventarizatsiiaTovarovNaSklade, error) {
	return NewDocumentSvodnaiaInventarizatsiiaTovarovNaSklade(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentSvodnaiaInventarizatsiiaTovarovNaSklade(key PrimaryDocumentSvodnaiaInventarizatsiiaTovarovNaSklade) error {
	return c.removeEntity(key)
}

type DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikaty struct {
	Key              Guid    `json:"Ref_Key,omitempty"`
	LineNumber       Int64   `json:"LineNumber,omitempty"`
	SertifikatKey    *Guid   `json:"Сертификат_Key,omitempty"`
	Sum              *Double `json:"Сумма,omitempty"`
	SummaUchet       *Double `json:"СуммаУчет,omitempty"`
	Quantity         *Double `json:"Количество,omitempty"`
	KolichestvoUchet *Double `json:"КоличествоУчет,omitempty"`
}

func (DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikaty) APIEntityType() string {
	return "Document_СводнаяИнвентаризацияТоваровНаСкладе_Сертификаты"
}
func NewDocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikaty(data string, prevError error) (*DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikaty, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikaty)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikaty(entity DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikaty) (*DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikaty, error) {
	return NewDocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikaty(c.createEntity(entity))
}
func (c *Client) DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikaty(key PrimaryDocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikaty, fields []string) (*DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikaty, error) {
	return NewDocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikaty(c.getEntity(key, fields))
}
func (c *Client) DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikatys(where Where) (*[]DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikaty, error) {
	type ReturnObj struct {
		Value []DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikaty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СводнаяИнвентаризацияТоваровНаСкладе_Сертификаты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikaty(key PrimaryDocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikaty, entity DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikaty) (*DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikaty, error) {
	return NewDocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikaty(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikaty(key PrimaryDocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikaty) error {
	return c.removeEntity(key)
}

type DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii struct {
	Key           Guid    `json:"Ref_Key,omitempty"`
	LineNumber    Int64   `json:"LineNumber,omitempty"`
	VidSravneniia *String `json:"ВидСравнения,omitempty"`
	Znachenie     *String `json:"Значение,omitempty"`
	ImiaPolia     *String `json:"ИмяПоля,omitempty"`
	ZnachenieType *String `json:"Значение_Type,omitempty"`
}

func (DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii) APIEntityType() string {
	return "Document_СводнаяИнвентаризацияТоваровНаСкладе_УсловияПроведенияИнвентаризации"
}
func NewDocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii(data string, prevError error) (*DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii(entity DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii) (*DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii, error) {
	return NewDocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii(c.createEntity(entity))
}
func (c *Client) DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii(key PrimaryDocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii, fields []string) (*DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii, error) {
	return NewDocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii(c.getEntity(key, fields))
}
func (c *Client) DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsiis(where Where) (*[]DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii, error) {
	type ReturnObj struct {
		Value []DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СводнаяИнвентаризацияТоваровНаСкладе_УсловияПроведенияИнвентаризации", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii(key PrimaryDocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii, entity DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii) (*DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii, error) {
	return NewDocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii(key PrimaryDocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii) error {
	return c.removeEntity(key)
}

type DocumentKorrektirovkaRealizatsii struct {
	Key                                  Guid                                             `json:"Ref_Key,omitempty"`
	DataVersion                          *String                                          `json:"DataVersion,omitempty"`
	Number                               *String                                          `json:"Number,omitempty"`
	Date                                 *DateTime                                        `json:"Date,omitempty"`
	DeletionMark                         *Boolean                                         `json:"DeletionMark,omitempty"`
	Posted                               *Boolean                                         `json:"Posted,omitempty"`
	DokumentOsnovanieKey                 *Guid                                            `json:"ДокументОснование_Key,omitempty"`
	OrganizatsiiaKey                     *Guid                                            `json:"Организация_Key,omitempty"`
	DataVkhodiashchegoDokumenta          *DateTime                                        `json:"ДатаВходящегоДокумента,omitempty"`
	NomerVkhodiashchegoDokumenta         *String                                          `json:"НомерВходящегоДокумента,omitempty"`
	GruzootpravitelKey                   *Guid                                            `json:"Грузоотправитель_Key,omitempty"`
	GruzopoluchatelKey                   *Guid                                            `json:"Грузополучатель_Key,omitempty"`
	VosstanovitNDS                       *Boolean                                         `json:"ВосстановитьНДС,omitempty"`
	NDSVkliuchenVStoimost                *Boolean                                         `json:"НДСВключенВСтоимость,omitempty"`
	SummaVkliuchaetNDS                   *Boolean                                         `json:"СуммаВключаетНДС,omitempty"`
	OtvetstvennyiKey                     *Guid                                            `json:"Ответственный_Key,omitempty"`
	Comment                              *String                                          `json:"Комментарий,omitempty"`
	SumOfDocument                        *Double                                          `json:"СуммаДокумента,omitempty"`
	SummaNDSDokumenta                    *Double                                          `json:"СуммаНДСДокумента,omitempty"`
	KontragentKey                        *Guid                                            `json:"Контрагент_Key,omitempty"`
	DogovorKontragentaKey                *Guid                                            `json:"ДоговорКонтрагента_Key,omitempty"`
	DepartmentKey                        *Guid                                            `json:"Склад_Key,omitempty"`
	ValiutaDokumentaKey                  *Guid                                            `json:"ВалютаДокумента_Key,omitempty"`
	PodrazdelenieKey                     *Guid                                            `json:"Подразделение_Key,omitempty"`
	NomerIspravleniia                    *Int64                                           `json:"НомерИсправления,omitempty"`
	DataIspravleniia                     *DateTime                                        `json:"ДатаИсправления,omitempty"`
	NomerIskhodnogoDokumenta             *String                                          `json:"НомерИсходногоДокумента,omitempty"`
	DataIskhodnogoDokumenta              *DateTime                                        `json:"ДатаИсходногоДокумента,omitempty"`
	NomerIspravleniiaIskhodnogoDokumenta *Int64                                           `json:"НомерИсправленияИсходногоДокумента,omitempty"`
	DataIspravleniiaIskhodnogoDokumenta  *DateTime                                        `json:"ДатаИсправленияИсходногоДокумента,omitempty"`
	KorrektirovatNDS                     *Boolean                                         `json:"КорректироватьНДС,omitempty"`
	Goods                                *[]DocumentKorrektirovkaRealizatsiiTovaryRowType `json:"Товары,omitempty"`
	Uslugi                               *[]DocumentKorrektirovkaRealizatsiiUslugiRowType `json:"Услуги,omitempty"`
}

func (DocumentKorrektirovkaRealizatsii) APIEntityType() string {
	return "Document_КорректировкаРеализации"
}
func NewDocumentKorrektirovkaRealizatsii(data string, prevError error) (*DocumentKorrektirovkaRealizatsii, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentKorrektirovkaRealizatsii)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentKorrektirovkaRealizatsii(entity DocumentKorrektirovkaRealizatsii) (*DocumentKorrektirovkaRealizatsii, error) {
	return NewDocumentKorrektirovkaRealizatsii(c.createEntity(entity))
}
func (c *Client) DocumentKorrektirovkaRealizatsii(key PrimaryDocumentKorrektirovkaRealizatsii, fields []string) (*DocumentKorrektirovkaRealizatsii, error) {
	return NewDocumentKorrektirovkaRealizatsii(c.getEntity(key, fields))
}
func (c *Client) DocumentKorrektirovkaRealizatsiis(where Where) (*[]DocumentKorrektirovkaRealizatsii, error) {
	type ReturnObj struct {
		Value []DocumentKorrektirovkaRealizatsii `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_КорректировкаРеализации", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentKorrektirovkaRealizatsii(key PrimaryDocumentKorrektirovkaRealizatsii, entity DocumentKorrektirovkaRealizatsii) (*DocumentKorrektirovkaRealizatsii, error) {
	return NewDocumentKorrektirovkaRealizatsii(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentKorrektirovkaRealizatsii(key PrimaryDocumentKorrektirovkaRealizatsii) error {
	return c.removeEntity(key)
}

type DocumentKorrektirovkaRealizatsiiTovary struct {
	Key                                           Guid    `json:"Ref_Key,omitempty"`
	LineNumber                                    Int64   `json:"LineNumber,omitempty"`
	VesDoKorrektirovki                            *Double `json:"ВесДоКорректировки,omitempty"`
	VesDoIzmeneniia                               *Double `json:"ВесДоИзменения,omitempty"`
	Weight                                        *Double `json:"Вес,omitempty"`
	KolichestvoDoKorrektirovki                    *Int64  `json:"КоличествоДоКорректировки,omitempty"`
	KolichestvoDoIzmeneniia                       *Int64  `json:"КоличествоДоИзменения,omitempty"`
	Quantity                                      *Int64  `json:"Количество,omitempty"`
	DokumentOprikhodovaniia                       *String `json:"ДокументОприходования,omitempty"`
	DokumentPartii                                *String `json:"ДокументПартии,omitempty"`
	KachestvoKey                                  *Guid   `json:"Качество_Key,omitempty"`
	ItemKey                                       *Guid   `json:"Номенклатура_Key,omitempty"`
	Pasport                                       *String `json:"Паспорт,omitempty"`
	RazmerDoKorrektirovkiKey                      *Guid   `json:"РазмерДоКорректировки_Key,omitempty"`
	RazmerDoIzmeneniiaKey                         *Guid   `json:"РазмерДоИзменения_Key,omitempty"`
	SizeKey                                       *Guid   `json:"Размер_Key,omitempty"`
	SeriiaNomenklaturyDoKorrektirovkiKey          *Guid   `json:"СерияНоменклатурыДоКорректировки_Key,omitempty"`
	SeriiaNomenklaturyDoIzmeneniiaKey             *Guid   `json:"СерияНоменклатурыДоИзменения_Key,omitempty"`
	InstanceKey                                   *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	DepartmentKey                                 *Guid   `json:"Склад_Key,omitempty"`
	StavkaNDSDoKorrektirovki                      *String `json:"СтавкаНДСДоКорректировки,omitempty"`
	StavkaNDSDoIzmeneniia                         *String `json:"СтавкаНДСДоИзменения,omitempty"`
	StavkaNDS                                     *String `json:"СтавкаНДС,omitempty"`
	StatusPartii                                  *String `json:"СтатусПартии,omitempty"`
	SummaDoKorrektirovki                          *Double `json:"СуммаДоКорректировки,omitempty"`
	SummaDoIzmeneniia                             *Double `json:"СуммаДоИзменения,omitempty"`
	Sum                                           *Double `json:"Сумма,omitempty"`
	SummaNDSDoKorrektirovki                       *Double `json:"СуммаНДСДоКорректировки,omitempty"`
	SummaNDSDoIzmeneniia                          *Double `json:"СуммаНДСДоИзменения,omitempty"`
	SummaNDS                                      *Double `json:"СуммаНДС,omitempty"`
	KharakteristikaNomenklaturyDoKorrektirovkiKey *Guid   `json:"ХарактеристикаНоменклатурыДоКорректировки_Key,omitempty"`
	KharakteristikaNomenklaturyDoIzmeneniiaKey    *Guid   `json:"ХарактеристикаНоменклатурыДоИзменения_Key,omitempty"`
	KharakteristikaNomenklaturyKey                *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	TsenaDoKorrektirovki                          *Double `json:"ЦенаДоКорректировки,omitempty"`
	TsenaDoIzmeneniia                             *Double `json:"ЦенаДоИзменения,omitempty"`
	Cost                                          *Double `json:"Цена,omitempty"`
	DokumentOprikhodovaniiaType                   *String `json:"ДокументОприходования_Type,omitempty"`
	DokumentPartiiType                            *String `json:"ДокументПартии_Type,omitempty"`
}

func (DocumentKorrektirovkaRealizatsiiTovary) APIEntityType() string {
	return "Document_КорректировкаРеализации_Товары"
}
func NewDocumentKorrektirovkaRealizatsiiTovary(data string, prevError error) (*DocumentKorrektirovkaRealizatsiiTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentKorrektirovkaRealizatsiiTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentKorrektirovkaRealizatsiiTovary(entity DocumentKorrektirovkaRealizatsiiTovary) (*DocumentKorrektirovkaRealizatsiiTovary, error) {
	return NewDocumentKorrektirovkaRealizatsiiTovary(c.createEntity(entity))
}
func (c *Client) DocumentKorrektirovkaRealizatsiiTovary(key PrimaryDocumentKorrektirovkaRealizatsiiTovary, fields []string) (*DocumentKorrektirovkaRealizatsiiTovary, error) {
	return NewDocumentKorrektirovkaRealizatsiiTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentKorrektirovkaRealizatsiiTovarys(where Where) (*[]DocumentKorrektirovkaRealizatsiiTovary, error) {
	type ReturnObj struct {
		Value []DocumentKorrektirovkaRealizatsiiTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_КорректировкаРеализации_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentKorrektirovkaRealizatsiiTovary(key PrimaryDocumentKorrektirovkaRealizatsiiTovary, entity DocumentKorrektirovkaRealizatsiiTovary) (*DocumentKorrektirovkaRealizatsiiTovary, error) {
	return NewDocumentKorrektirovkaRealizatsiiTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentKorrektirovkaRealizatsiiTovary(key PrimaryDocumentKorrektirovkaRealizatsiiTovary) error {
	return c.removeEntity(key)
}

type DocumentKorrektirovkaRealizatsiiUslugi struct {
	Key                        Guid    `json:"Ref_Key,omitempty"`
	LineNumber                 Int64   `json:"LineNumber,omitempty"`
	KolichestvoDoKorrektirovki *Int64  `json:"КоличествоДоКорректировки,omitempty"`
	KolichestvoDoIzmeneniia    *Int64  `json:"КоличествоДоИзменения,omitempty"`
	Quantity                   *Int64  `json:"Количество,omitempty"`
	ItemKey                    *Guid   `json:"Номенклатура_Key,omitempty"`
	Soderzhanie                *String `json:"Содержание,omitempty"`
	StavkaNDSDoKorrektirovki   *String `json:"СтавкаНДСДоКорректировки,omitempty"`
	StavkaNDSDoIzmeneniia      *String `json:"СтавкаНДСДоИзменения,omitempty"`
	StavkaNDS                  *String `json:"СтавкаНДС,omitempty"`
	SummaDoKorrektirovki       *Double `json:"СуммаДоКорректировки,omitempty"`
	SummaDoIzmeneniia          *Double `json:"СуммаДоИзменения,omitempty"`
	Sum                        *Double `json:"Сумма,omitempty"`
	SummaNDSDoKorrektirovki    *Double `json:"СуммаНДСДоКорректировки,omitempty"`
	SummaNDSDoIzmeneniia       *Double `json:"СуммаНДСДоИзменения,omitempty"`
	SummaNDS                   *Double `json:"СуммаНДС,omitempty"`
	TsenaDoKorrektirovki       *Double `json:"ЦенаДоКорректировки,omitempty"`
	TsenaDoIzmeneniia          *Double `json:"ЦенаДоИзменения,omitempty"`
	Cost                       *Double `json:"Цена,omitempty"`
}

func (DocumentKorrektirovkaRealizatsiiUslugi) APIEntityType() string {
	return "Document_КорректировкаРеализации_Услуги"
}
func NewDocumentKorrektirovkaRealizatsiiUslugi(data string, prevError error) (*DocumentKorrektirovkaRealizatsiiUslugi, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentKorrektirovkaRealizatsiiUslugi)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentKorrektirovkaRealizatsiiUslugi(entity DocumentKorrektirovkaRealizatsiiUslugi) (*DocumentKorrektirovkaRealizatsiiUslugi, error) {
	return NewDocumentKorrektirovkaRealizatsiiUslugi(c.createEntity(entity))
}
func (c *Client) DocumentKorrektirovkaRealizatsiiUslugi(key PrimaryDocumentKorrektirovkaRealizatsiiUslugi, fields []string) (*DocumentKorrektirovkaRealizatsiiUslugi, error) {
	return NewDocumentKorrektirovkaRealizatsiiUslugi(c.getEntity(key, fields))
}
func (c *Client) DocumentKorrektirovkaRealizatsiiUslugis(where Where) (*[]DocumentKorrektirovkaRealizatsiiUslugi, error) {
	type ReturnObj struct {
		Value []DocumentKorrektirovkaRealizatsiiUslugi `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_КорректировкаРеализации_Услуги", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentKorrektirovkaRealizatsiiUslugi(key PrimaryDocumentKorrektirovkaRealizatsiiUslugi, entity DocumentKorrektirovkaRealizatsiiUslugi) (*DocumentKorrektirovkaRealizatsiiUslugi, error) {
	return NewDocumentKorrektirovkaRealizatsiiUslugi(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentKorrektirovkaRealizatsiiUslugi(key PrimaryDocumentKorrektirovkaRealizatsiiUslugi) error {
	return c.removeEntity(key)
}

type CatalogVidyDefektov struct {
	Key          Guid     `json:"Ref_Key,omitempty"`
	DataVersion  *String  `json:"DataVersion,omitempty"`
	Description  *String  `json:"Description,omitempty"`
	Code         *String  `json:"Code,omitempty"`
	DeletionMark *Boolean `json:"DeletionMark,omitempty"`
}

func (CatalogVidyDefektov) APIEntityType() string {
	return "Catalog_ВидыДефектов"
}
func NewCatalogVidyDefektov(data string, prevError error) (*CatalogVidyDefektov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogVidyDefektov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogVidyDefektov(entity CatalogVidyDefektov) (*CatalogVidyDefektov, error) {
	return NewCatalogVidyDefektov(c.createEntity(entity))
}
func (c *Client) CatalogVidyDefektov(key PrimaryCatalogVidyDefektov, fields []string) (*CatalogVidyDefektov, error) {
	return NewCatalogVidyDefektov(c.getEntity(key, fields))
}
func (c *Client) CatalogVidyDefektovs(where Where) (*[]CatalogVidyDefektov, error) {
	type ReturnObj struct {
		Value []CatalogVidyDefektov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ВидыДефектов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogVidyDefektov(key PrimaryCatalogVidyDefektov, entity CatalogVidyDefektov) (*CatalogVidyDefektov, error) {
	return NewCatalogVidyDefektov(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogVidyDefektov(key PrimaryCatalogVidyDefektov) error {
	return c.removeEntity(key)
}

type DocumentDoverennost struct {
	Key                     Guid                                `json:"Ref_Key,omitempty"`
	DataVersion             *String                             `json:"DataVersion,omitempty"`
	Number                  *String                             `json:"Number,omitempty"`
	Date                    *DateTime                           `json:"Date,omitempty"`
	DeletionMark            *Boolean                            `json:"DeletionMark,omitempty"`
	Posted                  *Boolean                            `json:"Posted,omitempty"`
	DataDeistviia           *DateTime                           `json:"ДатаДействия,omitempty"`
	DogovorKontragentaKey   *Guid                               `json:"ДоговорКонтрагента_Key,omitempty"`
	DolzhnostKey            *Guid                               `json:"Должность_Key,omitempty"`
	Comment                 *String                             `json:"Комментарий,omitempty"`
	KontragentKey           *Guid                               `json:"Контрагент_Key,omitempty"`
	NaPoluchenieOt          *String                             `json:"НаПолучениеОт,omitempty"`
	OrganizatsiiaKey        *Guid                               `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey        *Guid                               `json:"Ответственный_Key,omitempty"`
	PoDokumentu             *String                             `json:"ПоДокументу,omitempty"`
	PodrazdelenieKey        *Guid                               `json:"Подразделение_Key,omitempty"`
	Sdelka                  *String                             `json:"Сделка,omitempty"`
	StrukturnaiaEdinitsaKey *Guid                               `json:"СтруктурнаяЕдиница_Key,omitempty"`
	FizLitsoKey             *Guid                               `json:"ФизЛицо_Key,omitempty"`
	Goods                   *[]DocumentDoverennostTovaryRowType `json:"Товары,omitempty"`
	SdelkaType              *String                             `json:"Сделка_Type,omitempty"`
}

func (DocumentDoverennost) APIEntityType() string {
	return "Document_Доверенность"
}
func NewDocumentDoverennost(data string, prevError error) (*DocumentDoverennost, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentDoverennost)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentDoverennost(entity DocumentDoverennost) (*DocumentDoverennost, error) {
	return NewDocumentDoverennost(c.createEntity(entity))
}
func (c *Client) DocumentDoverennost(key PrimaryDocumentDoverennost, fields []string) (*DocumentDoverennost, error) {
	return NewDocumentDoverennost(c.getEntity(key, fields))
}
func (c *Client) DocumentDoverennosts(where Where) (*[]DocumentDoverennost, error) {
	type ReturnObj struct {
		Value []DocumentDoverennost `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_Доверенность", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentDoverennost(key PrimaryDocumentDoverennost, entity DocumentDoverennost) (*DocumentDoverennost, error) {
	return NewDocumentDoverennost(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentDoverennost(key PrimaryDocumentDoverennost) error {
	return c.removeEntity(key)
}

type DocumentDoverennostTovary struct {
	Key                         Guid    `json:"Ref_Key,omitempty"`
	LineNumber                  Int64   `json:"LineNumber,omitempty"`
	Weight                      *Double `json:"Вес,omitempty"`
	EdinitsaPoKlassifikatoruKey *Guid   `json:"ЕдиницаПоКлассификатору_Key,omitempty"`
	Quantity                    *Int64  `json:"Количество,omitempty"`
	NaimenovanieTovara          *String `json:"НаименованиеТовара,omitempty"`
	SizeKey                     *Guid   `json:"Размер_Key,omitempty"`
}

func (DocumentDoverennostTovary) APIEntityType() string {
	return "Document_Доверенность_Товары"
}
func NewDocumentDoverennostTovary(data string, prevError error) (*DocumentDoverennostTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentDoverennostTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentDoverennostTovary(entity DocumentDoverennostTovary) (*DocumentDoverennostTovary, error) {
	return NewDocumentDoverennostTovary(c.createEntity(entity))
}
func (c *Client) DocumentDoverennostTovary(key PrimaryDocumentDoverennostTovary, fields []string) (*DocumentDoverennostTovary, error) {
	return NewDocumentDoverennostTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentDoverennostTovarys(where Where) (*[]DocumentDoverennostTovary, error) {
	type ReturnObj struct {
		Value []DocumentDoverennostTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_Доверенность_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentDoverennostTovary(key PrimaryDocumentDoverennostTovary, entity DocumentDoverennostTovary) (*DocumentDoverennostTovary, error) {
	return NewDocumentDoverennostTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentDoverennostTovary(key PrimaryDocumentDoverennostTovary) error {
	return c.removeEntity(key)
}

type CatalogShablonyZapolneniiaKU struct {
	Key                    Guid                                                  `json:"Ref_Key,omitempty"`
	DataVersion            *String                                               `json:"DataVersion,omitempty"`
	Description            *String                                               `json:"Description,omitempty"`
	Code                   *String                                               `json:"Code,omitempty"`
	DeletionMark           *Boolean                                              `json:"DeletionMark,omitempty"`
	RuchnoeUkazaniePerioda *Boolean                                              `json:"РучноеУказаниеПериода,omitempty"`
	DataNachBudni          *DateTime                                             `json:"ДатаНачБудни,omitempty"`
	DataKonBudni           *DateTime                                             `json:"ДатаКонБудни,omitempty"`
	RuchnoeUkazanieSalonov *Boolean                                              `json:"РучноеУказаниеСалонов,omitempty"`
	KUMin                  *Double                                               `json:"КУМин,omitempty"`
	KUMaks                 *Double                                               `json:"КУМакс,omitempty"`
	PrazdnichnyeDni        *[]CatalogShablonyZapolneniiaKUPrazdnichnyeDniRowType `json:"ПраздничныеДни,omitempty"`
	KUNaNedeliu            *[]CatalogShablonyZapolneniiaKUKUNaNedeliuRowType     `json:"КУНаНеделю,omitempty"`
	Salony                 *[]CatalogShablonyZapolneniiaKUSalonyRowType          `json:"Салоны,omitempty"`
}

func (CatalogShablonyZapolneniiaKU) APIEntityType() string {
	return "Catalog_ШаблоныЗаполненияКУ"
}
func NewCatalogShablonyZapolneniiaKU(data string, prevError error) (*CatalogShablonyZapolneniiaKU, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogShablonyZapolneniiaKU)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogShablonyZapolneniiaKU(entity CatalogShablonyZapolneniiaKU) (*CatalogShablonyZapolneniiaKU, error) {
	return NewCatalogShablonyZapolneniiaKU(c.createEntity(entity))
}
func (c *Client) CatalogShablonyZapolneniiaKU(key PrimaryCatalogShablonyZapolneniiaKU, fields []string) (*CatalogShablonyZapolneniiaKU, error) {
	return NewCatalogShablonyZapolneniiaKU(c.getEntity(key, fields))
}
func (c *Client) CatalogShablonyZapolneniiaKUs(where Where) (*[]CatalogShablonyZapolneniiaKU, error) {
	type ReturnObj struct {
		Value []CatalogShablonyZapolneniiaKU `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ШаблоныЗаполненияКУ", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogShablonyZapolneniiaKU(key PrimaryCatalogShablonyZapolneniiaKU, entity CatalogShablonyZapolneniiaKU) (*CatalogShablonyZapolneniiaKU, error) {
	return NewCatalogShablonyZapolneniiaKU(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogShablonyZapolneniiaKU(key PrimaryCatalogShablonyZapolneniiaKU) error {
	return c.removeEntity(key)
}

type CatalogShablonyZapolneniiaKUPrazdnichnyeDni struct {
	Key                       Guid      `json:"Ref_Key,omitempty"`
	LineNumber                Int64     `json:"LineNumber,omitempty"`
	Den                       *DateTime `json:"День,omitempty"`
	KU                        *Double   `json:"КУ,omitempty"`
	Opisanie                  *String   `json:"Описание,omitempty"`
	TsvetFonaDliaKalendaria   *String   `json:"ЦветФонаДляКалендаря,omitempty"`
	TsvetTekstaDliaKalendaria *String   `json:"ЦветТекстаДляКалендаря,omitempty"`
}

func (CatalogShablonyZapolneniiaKUPrazdnichnyeDni) APIEntityType() string {
	return "Catalog_ШаблоныЗаполненияКУ_ПраздничныеДни"
}
func NewCatalogShablonyZapolneniiaKUPrazdnichnyeDni(data string, prevError error) (*CatalogShablonyZapolneniiaKUPrazdnichnyeDni, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogShablonyZapolneniiaKUPrazdnichnyeDni)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogShablonyZapolneniiaKUPrazdnichnyeDni(entity CatalogShablonyZapolneniiaKUPrazdnichnyeDni) (*CatalogShablonyZapolneniiaKUPrazdnichnyeDni, error) {
	return NewCatalogShablonyZapolneniiaKUPrazdnichnyeDni(c.createEntity(entity))
}
func (c *Client) CatalogShablonyZapolneniiaKUPrazdnichnyeDni(key PrimaryCatalogShablonyZapolneniiaKUPrazdnichnyeDni, fields []string) (*CatalogShablonyZapolneniiaKUPrazdnichnyeDni, error) {
	return NewCatalogShablonyZapolneniiaKUPrazdnichnyeDni(c.getEntity(key, fields))
}
func (c *Client) CatalogShablonyZapolneniiaKUPrazdnichnyeDnis(where Where) (*[]CatalogShablonyZapolneniiaKUPrazdnichnyeDni, error) {
	type ReturnObj struct {
		Value []CatalogShablonyZapolneniiaKUPrazdnichnyeDni `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ШаблоныЗаполненияКУ_ПраздничныеДни", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogShablonyZapolneniiaKUPrazdnichnyeDni(key PrimaryCatalogShablonyZapolneniiaKUPrazdnichnyeDni, entity CatalogShablonyZapolneniiaKUPrazdnichnyeDni) (*CatalogShablonyZapolneniiaKUPrazdnichnyeDni, error) {
	return NewCatalogShablonyZapolneniiaKUPrazdnichnyeDni(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogShablonyZapolneniiaKUPrazdnichnyeDni(key PrimaryCatalogShablonyZapolneniiaKUPrazdnichnyeDni) error {
	return c.removeEntity(key)
}

type CatalogShablonyZapolneniiaKUKUNaNedeliu struct {
	Key        Guid    `json:"Ref_Key,omitempty"`
	LineNumber Int64   `json:"LineNumber,omitempty"`
	DenNedeli  *Int16  `json:"ДеньНедели,omitempty"`
	KU         *Double `json:"КУ,omitempty"`
}

func (CatalogShablonyZapolneniiaKUKUNaNedeliu) APIEntityType() string {
	return "Catalog_ШаблоныЗаполненияКУ_КУНаНеделю"
}
func NewCatalogShablonyZapolneniiaKUKUNaNedeliu(data string, prevError error) (*CatalogShablonyZapolneniiaKUKUNaNedeliu, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogShablonyZapolneniiaKUKUNaNedeliu)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogShablonyZapolneniiaKUKUNaNedeliu(entity CatalogShablonyZapolneniiaKUKUNaNedeliu) (*CatalogShablonyZapolneniiaKUKUNaNedeliu, error) {
	return NewCatalogShablonyZapolneniiaKUKUNaNedeliu(c.createEntity(entity))
}
func (c *Client) CatalogShablonyZapolneniiaKUKUNaNedeliu(key PrimaryCatalogShablonyZapolneniiaKUKUNaNedeliu, fields []string) (*CatalogShablonyZapolneniiaKUKUNaNedeliu, error) {
	return NewCatalogShablonyZapolneniiaKUKUNaNedeliu(c.getEntity(key, fields))
}
func (c *Client) CatalogShablonyZapolneniiaKUKUNaNedelius(where Where) (*[]CatalogShablonyZapolneniiaKUKUNaNedeliu, error) {
	type ReturnObj struct {
		Value []CatalogShablonyZapolneniiaKUKUNaNedeliu `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ШаблоныЗаполненияКУ_КУНаНеделю", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogShablonyZapolneniiaKUKUNaNedeliu(key PrimaryCatalogShablonyZapolneniiaKUKUNaNedeliu, entity CatalogShablonyZapolneniiaKUKUNaNedeliu) (*CatalogShablonyZapolneniiaKUKUNaNedeliu, error) {
	return NewCatalogShablonyZapolneniiaKUKUNaNedeliu(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogShablonyZapolneniiaKUKUNaNedeliu(key PrimaryCatalogShablonyZapolneniiaKUKUNaNedeliu) error {
	return c.removeEntity(key)
}

type CatalogShablonyZapolneniiaKUSalony struct {
	Key        Guid  `json:"Ref_Key,omitempty"`
	LineNumber Int64 `json:"LineNumber,omitempty"`
	SalonKey   *Guid `json:"Салон_Key,omitempty"`
}

func (CatalogShablonyZapolneniiaKUSalony) APIEntityType() string {
	return "Catalog_ШаблоныЗаполненияКУ_Салоны"
}
func NewCatalogShablonyZapolneniiaKUSalony(data string, prevError error) (*CatalogShablonyZapolneniiaKUSalony, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogShablonyZapolneniiaKUSalony)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogShablonyZapolneniiaKUSalony(entity CatalogShablonyZapolneniiaKUSalony) (*CatalogShablonyZapolneniiaKUSalony, error) {
	return NewCatalogShablonyZapolneniiaKUSalony(c.createEntity(entity))
}
func (c *Client) CatalogShablonyZapolneniiaKUSalony(key PrimaryCatalogShablonyZapolneniiaKUSalony, fields []string) (*CatalogShablonyZapolneniiaKUSalony, error) {
	return NewCatalogShablonyZapolneniiaKUSalony(c.getEntity(key, fields))
}
func (c *Client) CatalogShablonyZapolneniiaKUSalonys(where Where) (*[]CatalogShablonyZapolneniiaKUSalony, error) {
	type ReturnObj struct {
		Value []CatalogShablonyZapolneniiaKUSalony `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ШаблоныЗаполненияКУ_Салоны", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogShablonyZapolneniiaKUSalony(key PrimaryCatalogShablonyZapolneniiaKUSalony, entity CatalogShablonyZapolneniiaKUSalony) (*CatalogShablonyZapolneniiaKUSalony, error) {
	return NewCatalogShablonyZapolneniiaKUSalony(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogShablonyZapolneniiaKUSalony(key PrimaryCatalogShablonyZapolneniiaKUSalony) error {
	return c.removeEntity(key)
}

type DocumentPlanZapolneniiaVitrin struct {
	Key                      Guid                                                            `json:"Ref_Key,omitempty"`
	DataVersion              *String                                                         `json:"DataVersion,omitempty"`
	Number                   *String                                                         `json:"Number,omitempty"`
	Date                     *DateTime                                                       `json:"Date,omitempty"`
	DeletionMark             *Boolean                                                        `json:"DeletionMark,omitempty"`
	Posted                   *Boolean                                                        `json:"Posted,omitempty"`
	OrganizatsiiaKey         *Guid                                                           `json:"Организация_Key,omitempty"`
	DepartmentKey            *Guid                                                           `json:"Склад_Key,omitempty"`
	PlanovoeZapolnenieVitrin *[]DocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrinRowType `json:"ПлановоеЗаполнениеВитрин,omitempty"`
}

func (DocumentPlanZapolneniiaVitrin) APIEntityType() string {
	return "Document_ПланЗаполненияВитрин"
}
func NewDocumentPlanZapolneniiaVitrin(data string, prevError error) (*DocumentPlanZapolneniiaVitrin, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPlanZapolneniiaVitrin)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPlanZapolneniiaVitrin(entity DocumentPlanZapolneniiaVitrin) (*DocumentPlanZapolneniiaVitrin, error) {
	return NewDocumentPlanZapolneniiaVitrin(c.createEntity(entity))
}
func (c *Client) DocumentPlanZapolneniiaVitrin(key PrimaryDocumentPlanZapolneniiaVitrin, fields []string) (*DocumentPlanZapolneniiaVitrin, error) {
	return NewDocumentPlanZapolneniiaVitrin(c.getEntity(key, fields))
}
func (c *Client) DocumentPlanZapolneniiaVitrins(where Where) (*[]DocumentPlanZapolneniiaVitrin, error) {
	type ReturnObj struct {
		Value []DocumentPlanZapolneniiaVitrin `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПланЗаполненияВитрин", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPlanZapolneniiaVitrin(key PrimaryDocumentPlanZapolneniiaVitrin, entity DocumentPlanZapolneniiaVitrin) (*DocumentPlanZapolneniiaVitrin, error) {
	return NewDocumentPlanZapolneniiaVitrin(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPlanZapolneniiaVitrin(key PrimaryDocumentPlanZapolneniiaVitrin) error {
	return c.removeEntity(key)
}

type DocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrin struct {
	Key                           Guid    `json:"Ref_Key,omitempty"`
	LineNumber                    Int64   `json:"LineNumber,omitempty"`
	TovarnaiaGruppaKey            *Guid   `json:"ТоварнаяГруппа_Key,omitempty"`
	TovarnaiaKategoriiaKey        *Guid   `json:"ТоварнаяКатегория_Key,omitempty"`
	TovarnaiaPozitsiiaKey         *Guid   `json:"ТоварнаяПозиция_Key,omitempty"`
	TypeKey                       *Guid   `json:"ТипИзделия_Key,omitempty"`
	AnalitikaTipaIzdeliiaKey      *Guid   `json:"АналитикаТипаИзделия_Key,omitempty"`
	PloshchadVykladki             *Double `json:"ПлощадьВыкладки,omitempty"`
	NormativnaiaPloshchadVykladki *Double `json:"НормативнаяПлощадьВыкладки,omitempty"`
	KolichestvoIzdelii            *Int16  `json:"КоличествоИзделий,omitempty"`
}

func (DocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrin) APIEntityType() string {
	return "Document_ПланЗаполненияВитрин_ПлановоеЗаполнениеВитрин"
}
func NewDocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrin(data string, prevError error) (*DocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrin, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrin)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrin(entity DocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrin) (*DocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrin, error) {
	return NewDocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrin(c.createEntity(entity))
}
func (c *Client) DocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrin(key PrimaryDocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrin, fields []string) (*DocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrin, error) {
	return NewDocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrin(c.getEntity(key, fields))
}
func (c *Client) DocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrins(where Where) (*[]DocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrin, error) {
	type ReturnObj struct {
		Value []DocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrin `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПланЗаполненияВитрин_ПлановоеЗаполнениеВитрин", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrin(key PrimaryDocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrin, entity DocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrin) (*DocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrin, error) {
	return NewDocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrin(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrin(key PrimaryDocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrin) error {
	return c.removeEntity(key)
}

type Instance struct {
	Key                            Guid      `json:"Ref_Key,omitempty"`
	DataVersion                    *String   `json:"DataVersion,omitempty"`
	Description                    *String   `json:"Description,omitempty"`
	Code                           *String   `json:"Code,omitempty"`
	OwnerKey                       *Guid     `json:"Owner_Key,omitempty"`
	DeletionMark                   *Boolean  `json:"DeletionMark,omitempty"`
	Weight                         *Double   `json:"Вес,omitempty"`
	DogovorPostavkiKey             *Guid     `json:"ДоговорПоставки_Key,omitempty"`
	KachestvoKey                   *Guid     `json:"Качество_Key,omitempty"`
	Quantity                       *Int64    `json:"Количество,omitempty"`
	Comment                        *String   `json:"Комментарий,omitempty"`
	NaborKey                       *Guid     `json:"Набор_Key,omitempty"`
	NomerGTDKey                    *Guid     `json:"НомерГТД_Key,omitempty"`
	NomerPasporta                  *String   `json:"НомерПаспорта,omitempty"`
	OsnovnoeIzobrazhenieKey        *Guid     `json:"ОсновноеИзображение_Key,omitempty"`
	SupplierKey                    *Guid     `json:"Поставщик_Key,omitempty"`
	SizeKey                        *Guid     `json:"Размер_Key,omitempty"`
	Sebestoimost                   *Double   `json:"Себестоимость,omitempty"`
	SeriinyiNomer                  *String   `json:"СерийныйНомер,omitempty"`
	Sertifikat                     *String   `json:"Сертификат,omitempty"`
	SrokGodnosti                   *DateTime `json:"СрокГодности,omitempty"`
	StranaProiskhozhdeniiaKey      *Guid     `json:"СтранаПроисхождения_Key,omitempty"`
	TovarnaiaGruppaKey             *Guid     `json:"ТоварнаяГруппа_Key,omitempty"`
	TovarnaiaKategoriiaKey         *Guid     `json:"ТоварнаяКатегория_Key,omitempty"`
	TovarnaiaPozitsiiaKey          *Guid     `json:"ТоварнаяПозиция_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid     `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	ObshchiiVesVstavok             *Double   `json:"ОбщийВесВставок,omitempty"`
	DokumentPostupleniiaKey        *Guid     `json:"ДокументПоступления_Key,omitempty"`
	TsenaPostupleniia              *Double   `json:"ЦенаПоступления,omitempty"`
	SummaPostupleniia              *Double   `json:"СуммаПоступления,omitempty"`
	RetailCost                     *Double   `json:"РозничнаяЦена,omitempty"`
}

func (Instance) APIEntityType() string {
	return "Catalog_СерииНоменклатуры"
}
func NewInstance(data string, prevError error) (*Instance, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(Instance)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateInstance(entity Instance) (*Instance, error) {
	return NewInstance(c.createEntity(entity))
}
func (c *Client) Instance(key PrimaryInstance, fields []string) (*Instance, error) {
	return NewInstance(c.getEntity(key, fields))
}
func (c *Client) Instances(where Where) (*[]Instance, error) {
	type ReturnObj struct {
		Value []Instance `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_СерииНоменклатуры", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateInstance(key PrimaryInstance, entity Instance) (*Instance, error) {
	return NewInstance(c.updateEntity(key, entity))
}
func (c *Client) DeleteInstance(key PrimaryInstance) error {
	return c.removeEntity(key)
}

type ReturnToManufacturing struct {
	Key                           Guid                                                   `json:"Ref_Key,omitempty"`
	DataVersion                   *String                                                `json:"DataVersion,omitempty"`
	Number                        *String                                                `json:"Number,omitempty"`
	Date                          *DateTime                                              `json:"Date,omitempty"`
	DeletionMark                  *Boolean                                               `json:"DeletionMark,omitempty"`
	Posted                        *Boolean                                               `json:"Posted,omitempty"`
	ValiutaDokumentaKey           *Guid                                                  `json:"ВалютаДокумента_Key,omitempty"`
	Weight                        *Double                                                `json:"ВесДокумента,omitempty"`
	DogovorKontragentaKey         *Guid                                                  `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie             *String                                                `json:"ДокументОснование,omitempty"`
	KolichestvoDokumenta          *Int64                                                 `json:"КоличествоДокумента,omitempty"`
	Comment                       *String                                                `json:"Комментарий,omitempty"`
	KontragentKey                 *Guid                                                  `json:"Контрагент_Key,omitempty"`
	KratnostVzaimoraschetov       *Int64                                                 `json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov           *Double                                                `json:"КурсВзаиморасчетов,omitempty"`
	MaterialVProizvodstve         *String                                                `json:"МатериалВПроизводстве,omitempty"`
	OrganizatsiiaKey              *Guid                                                  `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey              *Guid                                                  `json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey              *Guid                                                  `json:"Подразделение_Key,omitempty"`
	ProektKey                     *Guid                                                  `json:"Проект_Key,omitempty"`
	Sdelka                        *String                                                `json:"Сделка,omitempty"`
	DepartmentKey                 *Guid                                                  `json:"Склад_Key,omitempty"`
	SummaVkliuchaetNDS            *Boolean                                               `json:"СуммаВключаетНДС,omitempty"`
	SumOfDocument                 *Double                                                `json:"СуммаДокумента,omitempty"`
	TipDokumenta                  *String                                                `json:"ТипДокумента,omitempty"`
	TipTsenKey                    *Guid                                                  `json:"ТипЦен_Key,omitempty"`
	UchityvatVesVstavok           *Boolean                                               `json:"УчитыватьВесВставок,omitempty"`
	UchityvatNDS                  *Boolean                                               `json:"УчитыватьНДС,omitempty"`
	KhoziaistvennaiaOperatsiiaKey *Guid                                                  `json:"ХозяйственнаяОперация_Key,omitempty"`
	SobstvennoeProizvodstvo       *Boolean                                               `json:"СобственноеПроизводство,omitempty"`
	ProizvodstvennyiUchastokKey   *Guid                                                  `json:"ПроизводственныйУчасток_Key,omitempty"`
	OpisanieDefektov              *String                                                `json:"ОписаниеДефектов,omitempty"`
	RuchnoiUchetVesaVstavok       *Boolean                                               `json:"РучнойУчетВесаВставок,omitempty"`
	Goods                         *[]DocumentVozvratProduktsiiVProizvodstvoTovaryRowType `json:"Товары,omitempty"`
	DokumentOsnovanieType         *String                                                `json:"ДокументОснование_Type,omitempty"`
	SdelkaType                    *String                                                `json:"Сделка_Type,omitempty"`
}

func (ReturnToManufacturing) APIEntityType() string {
	return "Document_ВозвратПродукцииВПроизводство"
}
func NewReturnToManufacturing(data string, prevError error) (*ReturnToManufacturing, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(ReturnToManufacturing)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateReturnToManufacturing(entity ReturnToManufacturing) (*ReturnToManufacturing, error) {
	return NewReturnToManufacturing(c.createEntity(entity))
}
func (c *Client) ReturnToManufacturing(key PrimaryReturnToManufacturing, fields []string) (*ReturnToManufacturing, error) {
	return NewReturnToManufacturing(c.getEntity(key, fields))
}
func (c *Client) ReturnToManufacturings(where Where) (*[]ReturnToManufacturing, error) {
	type ReturnObj struct {
		Value []ReturnToManufacturing `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВозвратПродукцииВПроизводство", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateReturnToManufacturing(key PrimaryReturnToManufacturing, entity ReturnToManufacturing) (*ReturnToManufacturing, error) {
	return NewReturnToManufacturing(c.updateEntity(key, entity))
}
func (c *Client) DeleteReturnToManufacturing(key PrimaryReturnToManufacturing) error {
	return c.removeEntity(key)
}

type DocumentVozvratProduktsiiVProizvodstvoTovary struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	Weight                         *Double `json:"Вес,omitempty"`
	ZakazKlientaKey                *Guid   `json:"ЗаказКлиента_Key,omitempty"`
	Quantity                       *Int64  `json:"Количество,omitempty"`
	ItemKey                        *Guid   `json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid   `json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	DepartmentKey                  *Guid   `json:"Склад_Key,omitempty"`
	StavkaNDS                      *String `json:"СтавкаНДС,omitempty"`
	Sum                            *Double `json:"Сумма,omitempty"`
	SummaNDS                       *Double `json:"СуммаНДС,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Double `json:"Цена,omitempty"`
	StoimostRabot                  *Double `json:"СтоимостьРабот,omitempty"`
	StoimostVstavok                *Double `json:"СтоимостьВставок,omitempty"`
	StoimostMetalla                *Double `json:"СтоимостьМеталла,omitempty"`
	SummaNDSVstavok                *Double `json:"СуммаНДСВставок,omitempty"`
	SummaNDSMetalla                *Double `json:"СуммаНДСМеталла,omitempty"`
	SummaNDSRabot                  *Double `json:"СуммаНДСРабот,omitempty"`
	DefektKey                      *Guid   `json:"Дефект_Key,omitempty"`
	VesVstavok                     *Double `json:"ВесВставок,omitempty"`
}

func (DocumentVozvratProduktsiiVProizvodstvoTovary) APIEntityType() string {
	return "Document_ВозвратПродукцииВПроизводство_Товары"
}
func NewDocumentVozvratProduktsiiVProizvodstvoTovary(data string, prevError error) (*DocumentVozvratProduktsiiVProizvodstvoTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentVozvratProduktsiiVProizvodstvoTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentVozvratProduktsiiVProizvodstvoTovary(entity DocumentVozvratProduktsiiVProizvodstvoTovary) (*DocumentVozvratProduktsiiVProizvodstvoTovary, error) {
	return NewDocumentVozvratProduktsiiVProizvodstvoTovary(c.createEntity(entity))
}
func (c *Client) DocumentVozvratProduktsiiVProizvodstvoTovary(key PrimaryDocumentVozvratProduktsiiVProizvodstvoTovary, fields []string) (*DocumentVozvratProduktsiiVProizvodstvoTovary, error) {
	return NewDocumentVozvratProduktsiiVProizvodstvoTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentVozvratProduktsiiVProizvodstvoTovarys(where Where) (*[]DocumentVozvratProduktsiiVProizvodstvoTovary, error) {
	type ReturnObj struct {
		Value []DocumentVozvratProduktsiiVProizvodstvoTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВозвратПродукцииВПроизводство_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentVozvratProduktsiiVProizvodstvoTovary(key PrimaryDocumentVozvratProduktsiiVProizvodstvoTovary, entity DocumentVozvratProduktsiiVProizvodstvoTovary) (*DocumentVozvratProduktsiiVProizvodstvoTovary, error) {
	return NewDocumentVozvratProduktsiiVProizvodstvoTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentVozvratProduktsiiVProizvodstvoTovary(key PrimaryDocumentVozvratProduktsiiVProizvodstvoTovary) error {
	return c.removeEntity(key)
}

type CatalogNomeraGTD struct {
	Key          Guid     `json:"Ref_Key,omitempty"`
	DataVersion  *String  `json:"DataVersion,omitempty"`
	Code         *String  `json:"Code,omitempty"`
	DeletionMark *Boolean `json:"DeletionMark,omitempty"`
	Comment      *String  `json:"Комментарий,omitempty"`
}

func (CatalogNomeraGTD) APIEntityType() string {
	return "Catalog_НомераГТД"
}
func NewCatalogNomeraGTD(data string, prevError error) (*CatalogNomeraGTD, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogNomeraGTD)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogNomeraGTD(entity CatalogNomeraGTD) (*CatalogNomeraGTD, error) {
	return NewCatalogNomeraGTD(c.createEntity(entity))
}
func (c *Client) CatalogNomeraGTD(key PrimaryCatalogNomeraGTD, fields []string) (*CatalogNomeraGTD, error) {
	return NewCatalogNomeraGTD(c.getEntity(key, fields))
}
func (c *Client) CatalogNomeraGTDs(where Where) (*[]CatalogNomeraGTD, error) {
	type ReturnObj struct {
		Value []CatalogNomeraGTD `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НомераГТД", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogNomeraGTD(key PrimaryCatalogNomeraGTD, entity CatalogNomeraGTD) (*CatalogNomeraGTD, error) {
	return NewCatalogNomeraGTD(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogNomeraGTD(key PrimaryCatalogNomeraGTD) error {
	return c.removeEntity(key)
}

type CatalogNastroikiRabochegoMestaPolzovatelia struct {
	Key          Guid                                                          `json:"Ref_Key,omitempty"`
	DataVersion  *String                                                       `json:"DataVersion,omitempty"`
	Description  *String                                                       `json:"Description,omitempty"`
	Code         *String                                                       `json:"Code,omitempty"`
	DeletionMark *Boolean                                                      `json:"DeletionMark,omitempty"`
	Nastroiki    *[]CatalogNastroikiRabochegoMestaPolzovateliaNastroikiRowType `json:"Настройки,omitempty"`
}

func (CatalogNastroikiRabochegoMestaPolzovatelia) APIEntityType() string {
	return "Catalog_НастройкиРабочегоМестаПользователя"
}
func NewCatalogNastroikiRabochegoMestaPolzovatelia(data string, prevError error) (*CatalogNastroikiRabochegoMestaPolzovatelia, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogNastroikiRabochegoMestaPolzovatelia)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogNastroikiRabochegoMestaPolzovatelia(entity CatalogNastroikiRabochegoMestaPolzovatelia) (*CatalogNastroikiRabochegoMestaPolzovatelia, error) {
	return NewCatalogNastroikiRabochegoMestaPolzovatelia(c.createEntity(entity))
}
func (c *Client) CatalogNastroikiRabochegoMestaPolzovatelia(key PrimaryCatalogNastroikiRabochegoMestaPolzovatelia, fields []string) (*CatalogNastroikiRabochegoMestaPolzovatelia, error) {
	return NewCatalogNastroikiRabochegoMestaPolzovatelia(c.getEntity(key, fields))
}
func (c *Client) CatalogNastroikiRabochegoMestaPolzovatelias(where Where) (*[]CatalogNastroikiRabochegoMestaPolzovatelia, error) {
	type ReturnObj struct {
		Value []CatalogNastroikiRabochegoMestaPolzovatelia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкиРабочегоМестаПользователя", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogNastroikiRabochegoMestaPolzovatelia(key PrimaryCatalogNastroikiRabochegoMestaPolzovatelia, entity CatalogNastroikiRabochegoMestaPolzovatelia) (*CatalogNastroikiRabochegoMestaPolzovatelia, error) {
	return NewCatalogNastroikiRabochegoMestaPolzovatelia(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogNastroikiRabochegoMestaPolzovatelia(key PrimaryCatalogNastroikiRabochegoMestaPolzovatelia) error {
	return c.removeEntity(key)
}

type CatalogNastroikiRabochegoMestaPolzovateliaNastroiki struct {
	Key                        Guid     `json:"Ref_Key,omitempty"`
	LineNumber                 Int64    `json:"LineNumber,omitempty"`
	Dostupnost                 *Boolean `json:"Доступность,omitempty"`
	DostupnostPechati          *Boolean `json:"ДоступностьПечати,omitempty"`
	DostupnostRedaktirovaniia  *Boolean `json:"ДоступностьРедактирования,omitempty"`
	DostupnostVersionirovaniia *Boolean `json:"ДоступностьВерсионирования,omitempty"`
	PutKElementuFormy          *String  `json:"ПутьКЭлементуФормы,omitempty"`
	TipObieekta                *String  `json:"ТипОбъекта,omitempty"`
	ElementFormyRabochegoMesta *String  `json:"ЭлементФормыРабочегоМеста,omitempty"`
}

func (CatalogNastroikiRabochegoMestaPolzovateliaNastroiki) APIEntityType() string {
	return "Catalog_НастройкиРабочегоМестаПользователя_Настройки"
}
func NewCatalogNastroikiRabochegoMestaPolzovateliaNastroiki(data string, prevError error) (*CatalogNastroikiRabochegoMestaPolzovateliaNastroiki, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogNastroikiRabochegoMestaPolzovateliaNastroiki)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogNastroikiRabochegoMestaPolzovateliaNastroiki(entity CatalogNastroikiRabochegoMestaPolzovateliaNastroiki) (*CatalogNastroikiRabochegoMestaPolzovateliaNastroiki, error) {
	return NewCatalogNastroikiRabochegoMestaPolzovateliaNastroiki(c.createEntity(entity))
}
func (c *Client) CatalogNastroikiRabochegoMestaPolzovateliaNastroiki(key PrimaryCatalogNastroikiRabochegoMestaPolzovateliaNastroiki, fields []string) (*CatalogNastroikiRabochegoMestaPolzovateliaNastroiki, error) {
	return NewCatalogNastroikiRabochegoMestaPolzovateliaNastroiki(c.getEntity(key, fields))
}
func (c *Client) CatalogNastroikiRabochegoMestaPolzovateliaNastroikis(where Where) (*[]CatalogNastroikiRabochegoMestaPolzovateliaNastroiki, error) {
	type ReturnObj struct {
		Value []CatalogNastroikiRabochegoMestaPolzovateliaNastroiki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкиРабочегоМестаПользователя_Настройки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogNastroikiRabochegoMestaPolzovateliaNastroiki(key PrimaryCatalogNastroikiRabochegoMestaPolzovateliaNastroiki, entity CatalogNastroikiRabochegoMestaPolzovateliaNastroiki) (*CatalogNastroikiRabochegoMestaPolzovateliaNastroiki, error) {
	return NewCatalogNastroikiRabochegoMestaPolzovateliaNastroiki(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogNastroikiRabochegoMestaPolzovateliaNastroiki(key PrimaryCatalogNastroikiRabochegoMestaPolzovateliaNastroiki) error {
	return c.removeEntity(key)
}

type CatalogsmsShablony struct {
	Key          Guid     `json:"Ref_Key,omitempty"`
	DataVersion  *String  `json:"DataVersion,omitempty"`
	Description  *String  `json:"Description,omitempty"`
	Code         *String  `json:"Code,omitempty"`
	ParentKey    *Guid    `json:"Parent_Key,omitempty"`
	IsFolder     *Boolean `json:"IsFolder,omitempty"`
	DeletionMark *Boolean `json:"DeletionMark,omitempty"`
	Soderzhanie  *String  `json:"Содержание,omitempty"`
}

func (CatalogsmsShablony) APIEntityType() string {
	return "Catalog_смсШаблоны"
}
func NewCatalogsmsShablony(data string, prevError error) (*CatalogsmsShablony, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogsmsShablony)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogsmsShablony(entity CatalogsmsShablony) (*CatalogsmsShablony, error) {
	return NewCatalogsmsShablony(c.createEntity(entity))
}
func (c *Client) CatalogsmsShablony(key PrimaryCatalogsmsShablony, fields []string) (*CatalogsmsShablony, error) {
	return NewCatalogsmsShablony(c.getEntity(key, fields))
}
func (c *Client) CatalogsmsShablonys(where Where) (*[]CatalogsmsShablony, error) {
	type ReturnObj struct {
		Value []CatalogsmsShablony `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_смсШаблоны", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogsmsShablony(key PrimaryCatalogsmsShablony, entity CatalogsmsShablony) (*CatalogsmsShablony, error) {
	return NewCatalogsmsShablony(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogsmsShablony(key PrimaryCatalogsmsShablony) error {
	return c.removeEntity(key)
}

type WriteOff struct {
	Key                                Guid                                         `json:"Ref_Key,omitempty"`
	DataVersion                        *String                                      `json:"DataVersion,omitempty"`
	Number                             *String                                      `json:"Number,omitempty"`
	Date                               *DateTime                                    `json:"Date,omitempty"`
	DeletionMark                       *Boolean                                     `json:"DeletionMark,omitempty"`
	Posted                             *Boolean                                     `json:"Posted,omitempty"`
	Weight                             *Double                                      `json:"ВесДокумента,omitempty"`
	DokumentOsnovanie                  *String                                      `json:"ДокументОснование,omitempty"`
	DokumentSozdanVIuTD                *Boolean                                     `json:"ДокументСозданВЮТД,omitempty"`
	InventarizatsiiaTovarovNaSkladeKey *Guid                                        `json:"ИнвентаризацияТоваровНаСкладе_Key,omitempty"`
	KolichestvoDokumenta               *Int64                                       `json:"КоличествоДокумента,omitempty"`
	Comment                            *String                                      `json:"Комментарий,omitempty"`
	OrganizatsiiaKey                   *Guid                                        `json:"Организация_Key,omitempty"`
	Osnovanie                          *String                                      `json:"Основание,omitempty"`
	OtvetstvennyiKey                   *Guid                                        `json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey                   *Guid                                        `json:"Подразделение_Key,omitempty"`
	DepartmentKey                      *Guid                                        `json:"Склад_Key,omitempty"`
	SumOfDocument                      *Double                                      `json:"СуммаДокумента,omitempty"`
	TipDokumenta                       *String                                      `json:"ТипДокумента,omitempty"`
	KhoziaistvennaiaOperatsiiaKey      *Guid                                        `json:"ХозяйственнаяОперация_Key,omitempty"`
	Goods                              *[]DocumentSpisanieTovarovTovaryRowType      `json:"Товары,omitempty"`
	Sertifikaty                        *[]DocumentSpisanieTovarovSertifikatyRowType `json:"Сертификаты,omitempty"`
	DokumentOsnovanieType              *String                                      `json:"ДокументОснование_Type,omitempty"`
}

func (WriteOff) APIEntityType() string {
	return "Document_СписаниеТоваров"
}
func NewWriteOff(data string, prevError error) (*WriteOff, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(WriteOff)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateWriteOff(entity WriteOff) (*WriteOff, error) {
	return NewWriteOff(c.createEntity(entity))
}
func (c *Client) WriteOff(key PrimaryWriteOff, fields []string) (*WriteOff, error) {
	return NewWriteOff(c.getEntity(key, fields))
}
func (c *Client) WriteOffs(where Where) (*[]WriteOff, error) {
	type ReturnObj struct {
		Value []WriteOff `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СписаниеТоваров", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateWriteOff(key PrimaryWriteOff, entity WriteOff) (*WriteOff, error) {
	return NewWriteOff(c.updateEntity(key, entity))
}
func (c *Client) DeleteWriteOff(key PrimaryWriteOff) error {
	return c.removeEntity(key)
}

type DocumentSpisanieTovarovTovary struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	Weight                         *Double `json:"Вес,omitempty"`
	DokumentRezerva                *String `json:"ДокументРезерва,omitempty"`
	KachestvoKey                   *Guid   `json:"Качество_Key,omitempty"`
	Quantity                       *Int64  `json:"Количество,omitempty"`
	ItemKey                        *Guid   `json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid   `json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	Sum                            *Double `json:"Сумма,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Double `json:"Цена,omitempty"`
	OrderKey                       *Guid   `json:"КлючПродажи_Key,omitempty"`
	SkidkaNatsenkaKey              *Guid   `json:"СкидкаНаценка_Key,omitempty"`
	DokumentRezervaType            *String `json:"ДокументРезерва_Type,omitempty"`
}

func (DocumentSpisanieTovarovTovary) APIEntityType() string {
	return "Document_СписаниеТоваров_Товары"
}
func NewDocumentSpisanieTovarovTovary(data string, prevError error) (*DocumentSpisanieTovarovTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentSpisanieTovarovTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentSpisanieTovarovTovary(entity DocumentSpisanieTovarovTovary) (*DocumentSpisanieTovarovTovary, error) {
	return NewDocumentSpisanieTovarovTovary(c.createEntity(entity))
}
func (c *Client) DocumentSpisanieTovarovTovary(key PrimaryDocumentSpisanieTovarovTovary, fields []string) (*DocumentSpisanieTovarovTovary, error) {
	return NewDocumentSpisanieTovarovTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentSpisanieTovarovTovarys(where Where) (*[]DocumentSpisanieTovarovTovary, error) {
	type ReturnObj struct {
		Value []DocumentSpisanieTovarovTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СписаниеТоваров_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentSpisanieTovarovTovary(key PrimaryDocumentSpisanieTovarovTovary, entity DocumentSpisanieTovarovTovary) (*DocumentSpisanieTovarovTovary, error) {
	return NewDocumentSpisanieTovarovTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentSpisanieTovarovTovary(key PrimaryDocumentSpisanieTovarovTovary) error {
	return c.removeEntity(key)
}

type DocumentSpisanieTovarovSertifikaty struct {
	Key           Guid    `json:"Ref_Key,omitempty"`
	LineNumber    Int64   `json:"LineNumber,omitempty"`
	SertifikatKey *Guid   `json:"Сертификат_Key,omitempty"`
	Sum           *Double `json:"Сумма,omitempty"`
}

func (DocumentSpisanieTovarovSertifikaty) APIEntityType() string {
	return "Document_СписаниеТоваров_Сертификаты"
}
func NewDocumentSpisanieTovarovSertifikaty(data string, prevError error) (*DocumentSpisanieTovarovSertifikaty, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentSpisanieTovarovSertifikaty)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentSpisanieTovarovSertifikaty(entity DocumentSpisanieTovarovSertifikaty) (*DocumentSpisanieTovarovSertifikaty, error) {
	return NewDocumentSpisanieTovarovSertifikaty(c.createEntity(entity))
}
func (c *Client) DocumentSpisanieTovarovSertifikaty(key PrimaryDocumentSpisanieTovarovSertifikaty, fields []string) (*DocumentSpisanieTovarovSertifikaty, error) {
	return NewDocumentSpisanieTovarovSertifikaty(c.getEntity(key, fields))
}
func (c *Client) DocumentSpisanieTovarovSertifikatys(where Where) (*[]DocumentSpisanieTovarovSertifikaty, error) {
	type ReturnObj struct {
		Value []DocumentSpisanieTovarovSertifikaty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СписаниеТоваров_Сертификаты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentSpisanieTovarovSertifikaty(key PrimaryDocumentSpisanieTovarovSertifikaty, entity DocumentSpisanieTovarovSertifikaty) (*DocumentSpisanieTovarovSertifikaty, error) {
	return NewDocumentSpisanieTovarovSertifikaty(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentSpisanieTovarovSertifikaty(key PrimaryDocumentSpisanieTovarovSertifikaty) error {
	return c.removeEntity(key)
}

type DocumentsmsSoobshchenie struct {
	Key                            Guid                                         `json:"Ref_Key,omitempty"`
	DataVersion                    *String                                      `json:"DataVersion,omitempty"`
	Number                         *String                                      `json:"Number,omitempty"`
	Date                           *DateTime                                    `json:"Date,omitempty"`
	DeletionMark                   *Boolean                                     `json:"DeletionMark,omitempty"`
	Posted                         *Boolean                                     `json:"Posted,omitempty"`
	AvtorKey                       *Guid                                        `json:"Автор_Key,omitempty"`
	AvtotekstBulevo                *Boolean                                     `json:"АвтотекстБулево,omitempty"`
	Aktualnost                     *DateTime                                    `json:"Актуальность,omitempty"`
	Comment                        *String                                      `json:"Комментарий,omitempty"`
	KonetsPeriodaZapreta           *DateTime                                    `json:"КонецПериодаЗапрета,omitempty"`
	NachaloOtpravki                *DateTime                                    `json:"НачалоОтправки,omitempty"`
	NachaloPeriodaZapreta          *DateTime                                    `json:"НачалоПериодаЗапрета,omitempty"`
	NeOtpravliatSMS                *Boolean                                     `json:"НеОтправлятьSMS,omitempty"`
	NomerOtpravitelia              *String                                      `json:"НомерОтправителя,omitempty"`
	RavnomernaiaRassylka           *Boolean                                     `json:"РавномернаяРассылка,omitempty"`
	SpisokPoluchatelei             *String                                      `json:"СписокПолучателей,omitempty"`
	Status                         *String                                      `json:"Статус,omitempty"`
	StatusStrokoi                  *String                                      `json:"СтатусСтрокой,omitempty"`
	TekstSoobshcheniia             *String                                      `json:"ТекстСообщения,omitempty"`
	TipSoobshcheniia               *String                                      `json:"ТипСообщения,omitempty"`
	Transliteratsiia               *Boolean                                     `json:"Транслитерация,omitempty"`
	FlagAktualnost                 *Boolean                                     `json:"ФлагАктуальность,omitempty"`
	NastroikiZapolneniiaBase64Data *Binary                                      `json:"НастройкиЗаполнения_Base64Data,omitempty"`
	Poluchateli                    *[]DocumentsmsSoobshcheniePoluchateliRowType `json:"Получатели,omitempty"`
	NastroikiZapolneniiaType       *String                                      `json:"НастройкиЗаполнения_Type,omitempty"`
	NastroikiZapolneniia           *Stream                                      `json:"НастройкиЗаполнения,omitempty"`
}

func (DocumentsmsSoobshchenie) APIEntityType() string {
	return "Document_смсСообщение"
}
func NewDocumentsmsSoobshchenie(data string, prevError error) (*DocumentsmsSoobshchenie, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentsmsSoobshchenie)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentsmsSoobshchenie(entity DocumentsmsSoobshchenie) (*DocumentsmsSoobshchenie, error) {
	return NewDocumentsmsSoobshchenie(c.createEntity(entity))
}
func (c *Client) DocumentsmsSoobshchenie(key PrimaryDocumentsmsSoobshchenie, fields []string) (*DocumentsmsSoobshchenie, error) {
	return NewDocumentsmsSoobshchenie(c.getEntity(key, fields))
}
func (c *Client) DocumentsmsSoobshchenies(where Where) (*[]DocumentsmsSoobshchenie, error) {
	type ReturnObj struct {
		Value []DocumentsmsSoobshchenie `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_смсСообщение", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentsmsSoobshchenie(key PrimaryDocumentsmsSoobshchenie, entity DocumentsmsSoobshchenie) (*DocumentsmsSoobshchenie, error) {
	return NewDocumentsmsSoobshchenie(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentsmsSoobshchenie(key PrimaryDocumentsmsSoobshchenie) error {
	return c.removeEntity(key)
}

type DocumentsmsSoobshcheniePoluchateli struct {
	Key                Guid      `json:"Ref_Key,omitempty"`
	LineNumber         Int64     `json:"LineNumber,omitempty"`
	Kontragent         *String   `json:"Контрагент,omitempty"`
	NomerTelefona      *String   `json:"НомерТелефона,omitempty"`
	GUID               *String   `json:"GUID,omitempty"`
	TekstSoobshcheniia *String   `json:"ТекстСообщения,omitempty"`
	DataZaversheniia   *DateTime `json:"ДатаЗавершения,omitempty"`
	Millisekunda       *Int16    `json:"Миллисекунда,omitempty"`
	Status             *String   `json:"Статус,omitempty"`
	OpisanieOshibki    *String   `json:"ОписаниеОшибки,omitempty"`
	MemberCardKey      *Guid     `json:"ДисконтнаяКарта_Key,omitempty"`
}

func (DocumentsmsSoobshcheniePoluchateli) APIEntityType() string {
	return "Document_смсСообщение_Получатели"
}
func NewDocumentsmsSoobshcheniePoluchateli(data string, prevError error) (*DocumentsmsSoobshcheniePoluchateli, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentsmsSoobshcheniePoluchateli)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentsmsSoobshcheniePoluchateli(entity DocumentsmsSoobshcheniePoluchateli) (*DocumentsmsSoobshcheniePoluchateli, error) {
	return NewDocumentsmsSoobshcheniePoluchateli(c.createEntity(entity))
}
func (c *Client) DocumentsmsSoobshcheniePoluchateli(key PrimaryDocumentsmsSoobshcheniePoluchateli, fields []string) (*DocumentsmsSoobshcheniePoluchateli, error) {
	return NewDocumentsmsSoobshcheniePoluchateli(c.getEntity(key, fields))
}
func (c *Client) DocumentsmsSoobshcheniePoluchatelis(where Where) (*[]DocumentsmsSoobshcheniePoluchateli, error) {
	type ReturnObj struct {
		Value []DocumentsmsSoobshcheniePoluchateli `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_смсСообщение_Получатели", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentsmsSoobshcheniePoluchateli(key PrimaryDocumentsmsSoobshcheniePoluchateli, entity DocumentsmsSoobshcheniePoluchateli) (*DocumentsmsSoobshcheniePoluchateli, error) {
	return NewDocumentsmsSoobshcheniePoluchateli(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentsmsSoobshcheniePoluchateli(key PrimaryDocumentsmsSoobshcheniePoluchateli) error {
	return c.removeEntity(key)
}

type DocumentOplataOtPokupateliaPlatezhnoiKartoi struct {
	Key                            Guid      `json:"Ref_Key,omitempty"`
	DataVersion                    *String   `json:"DataVersion,omitempty"`
	Number                         *String   `json:"Number,omitempty"`
	Date                           *DateTime `json:"Date,omitempty"`
	DeletionMark                   *Boolean  `json:"DeletionMark,omitempty"`
	Posted                         *Boolean  `json:"Posted,omitempty"`
	OrganizatsiiaKey               *Guid     `json:"Организация_Key,omitempty"`
	DokumentOsnovanie              *String   `json:"ДокументОснование,omitempty"`
	KontragentKey                  *Guid     `json:"Контрагент_Key,omitempty"`
	DogovorKontragentaKey          *Guid     `json:"ДоговорКонтрагента_Key,omitempty"`
	OtvetstvennyiKey               *Guid     `json:"Ответственный_Key,omitempty"`
	DokumentSozdanVIuTD            *Boolean  `json:"ДокументСозданВЮТД,omitempty"`
	KassaKKMKey                    *Guid     `json:"КассаККМ_Key,omitempty"`
	Comment                        *String   `json:"Комментарий,omitempty"`
	NumberKKT                      *Int16    `json:"НомерЧекаККМ,omitempty"`
	ProbitChekNaKKT                *Boolean  `json:"ПробитЧекНаККТ,omitempty"`
	GungNumber                     *Int16    `json:"НомерСменыККМ,omitempty"`
	ProtsentTorgovoiUstupki        *Double   `json:"ПроцентТорговойУступки,omitempty"`
	SumOfDocument                  *Double   `json:"СуммаДокумента,omitempty"`
	SummaTorgovoiUstupki           *Double   `json:"СуммаТорговойУступки,omitempty"`
	Khesh                          *String   `json:"Хэш,omitempty"`
	Poslednie4                     *String   `json:"Последние4,omitempty"`
	KodRRN                         *String   `json:"КодRRN,omitempty"`
	Identifikator                  *String   `json:"Идентификатор,omitempty"`
	TransactionId                  *String   `json:"TransactionId,omitempty"`
	TipSistemyNalogooblozheniiaKey *Guid     `json:"ТипСистемыНалогообложения_Key,omitempty"`
	VidOplatyKey                   *Guid     `json:"ВидОплаты_Key,omitempty"`
	StavkaNDS                      *String   `json:"СтавкаНДС,omitempty"`
	SummaNDS                       *Double   `json:"СуммаНДС,omitempty"`
	OperationType                  *String   `json:"ВидОперации,omitempty"`
	Pochta                         *String   `json:"Почта,omitempty"`
	Telefon                        *String   `json:"Телефон,omitempty"`
	TypeOfMovingMoneyKey           *Guid     `json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	ProektKey                      *Guid     `json:"Проект_Key,omitempty"`
	NastroikaRMKKey                *Guid     `json:"НастройкаРМК_Key,omitempty"`
	BDataDokumenta                 *DateTime `json:"Б_ДатаДокумента,omitempty"`
	BIdentifikator                 *String   `json:"Б_Идентификатор,omitempty"`
	BNomerVersii                   *String   `json:"Б_НомерВерсии,omitempty"`
	DokumentOsnovanieType          *String   `json:"ДокументОснование_Type,omitempty"`
}

func (DocumentOplataOtPokupateliaPlatezhnoiKartoi) APIEntityType() string {
	return "Document_ОплатаОтПокупателяПлатежнойКартой"
}
func NewDocumentOplataOtPokupateliaPlatezhnoiKartoi(data string, prevError error) (*DocumentOplataOtPokupateliaPlatezhnoiKartoi, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentOplataOtPokupateliaPlatezhnoiKartoi)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentOplataOtPokupateliaPlatezhnoiKartoi(entity DocumentOplataOtPokupateliaPlatezhnoiKartoi) (*DocumentOplataOtPokupateliaPlatezhnoiKartoi, error) {
	return NewDocumentOplataOtPokupateliaPlatezhnoiKartoi(c.createEntity(entity))
}
func (c *Client) DocumentOplataOtPokupateliaPlatezhnoiKartoi(key PrimaryDocumentOplataOtPokupateliaPlatezhnoiKartoi, fields []string) (*DocumentOplataOtPokupateliaPlatezhnoiKartoi, error) {
	return NewDocumentOplataOtPokupateliaPlatezhnoiKartoi(c.getEntity(key, fields))
}
func (c *Client) DocumentOplataOtPokupateliaPlatezhnoiKartois(where Where) (*[]DocumentOplataOtPokupateliaPlatezhnoiKartoi, error) {
	type ReturnObj struct {
		Value []DocumentOplataOtPokupateliaPlatezhnoiKartoi `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОплатаОтПокупателяПлатежнойКартой", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentOplataOtPokupateliaPlatezhnoiKartoi(key PrimaryDocumentOplataOtPokupateliaPlatezhnoiKartoi, entity DocumentOplataOtPokupateliaPlatezhnoiKartoi) (*DocumentOplataOtPokupateliaPlatezhnoiKartoi, error) {
	return NewDocumentOplataOtPokupateliaPlatezhnoiKartoi(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentOplataOtPokupateliaPlatezhnoiKartoi(key PrimaryDocumentOplataOtPokupateliaPlatezhnoiKartoi) error {
	return c.removeEntity(key)
}

type CatalogDragotsennyeKamni struct {
	Key                 Guid     `json:"Ref_Key,omitempty"`
	DataVersion         *String  `json:"DataVersion,omitempty"`
	Description         *String  `json:"Description,omitempty"`
	Code                *String  `json:"Code,omitempty"`
	DeletionMark        *Boolean `json:"DeletionMark,omitempty"`
	VidKamniaKey        *Guid    `json:"ВидКамня_Key,omitempty"`
	GruppaDefekta       *Boolean `json:"ГруппаДефекта,omitempty"`
	GruppaTsveta        *Boolean `json:"ГруппаЦвета,omitempty"`
	KratkoeNaimenovanie *String  `json:"КраткоеНаименование,omitempty"`
	Rassev              *Boolean `json:"Рассев,omitempty"`
	RaschetTsenyZaVes   *Boolean `json:"РасчетЦеныЗаВес,omitempty"`
	UchetVKaratakh      *Boolean `json:"УчетВКаратах,omitempty"`
	Tsvet               *Boolean `json:"Цвет,omitempty"`
	BIdentifikator      *String  `json:"Б_Идентификатор,omitempty"`
}

func (CatalogDragotsennyeKamni) APIEntityType() string {
	return "Catalog_ДрагоценныеКамни"
}
func NewCatalogDragotsennyeKamni(data string, prevError error) (*CatalogDragotsennyeKamni, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogDragotsennyeKamni)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogDragotsennyeKamni(entity CatalogDragotsennyeKamni) (*CatalogDragotsennyeKamni, error) {
	return NewCatalogDragotsennyeKamni(c.createEntity(entity))
}
func (c *Client) CatalogDragotsennyeKamni(key PrimaryCatalogDragotsennyeKamni, fields []string) (*CatalogDragotsennyeKamni, error) {
	return NewCatalogDragotsennyeKamni(c.getEntity(key, fields))
}
func (c *Client) CatalogDragotsennyeKamnis(where Where) (*[]CatalogDragotsennyeKamni, error) {
	type ReturnObj struct {
		Value []CatalogDragotsennyeKamni `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ДрагоценныеКамни", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogDragotsennyeKamni(key PrimaryCatalogDragotsennyeKamni, entity CatalogDragotsennyeKamni) (*CatalogDragotsennyeKamni, error) {
	return NewCatalogDragotsennyeKamni(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogDragotsennyeKamni(key PrimaryCatalogDragotsennyeKamni) error {
	return c.removeEntity(key)
}

type CatalogKalendariPlanirovaniiaProdazh struct {
	Key                            Guid                                                    `json:"Ref_Key,omitempty"`
	DataVersion                    *String                                                 `json:"DataVersion,omitempty"`
	Description                    *String                                                 `json:"Description,omitempty"`
	Code                           *String                                                 `json:"Code,omitempty"`
	DeletionMark                   *Boolean                                                `json:"DeletionMark,omitempty"`
	ShablonZapolneniiaKey          *Guid                                                   `json:"ШаблонЗаполнения_Key,omitempty"`
	NomerGodaPlanirovaniia         *Int16                                                  `json:"НомерГодаПланирования,omitempty"`
	NastroikiZapolneniiaBase64Data *Binary                                                 `json:"НастройкиЗаполнения_Base64Data,omitempty"`
	KUPoDniam                      *[]CatalogKalendariPlanirovaniiaProdazhKUPoDniamRowType `json:"КУПоДням,omitempty"`
	Salony                         *[]CatalogKalendariPlanirovaniiaProdazhSalonyRowType    `json:"Салоны,omitempty"`
	NastroikiZapolneniiaType       *String                                                 `json:"НастройкиЗаполнения_Type,omitempty"`
	NastroikiZapolneniia           *Stream                                                 `json:"НастройкиЗаполнения,omitempty"`
}

func (CatalogKalendariPlanirovaniiaProdazh) APIEntityType() string {
	return "Catalog_КалендариПланированияПродаж"
}
func NewCatalogKalendariPlanirovaniiaProdazh(data string, prevError error) (*CatalogKalendariPlanirovaniiaProdazh, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogKalendariPlanirovaniiaProdazh)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogKalendariPlanirovaniiaProdazh(entity CatalogKalendariPlanirovaniiaProdazh) (*CatalogKalendariPlanirovaniiaProdazh, error) {
	return NewCatalogKalendariPlanirovaniiaProdazh(c.createEntity(entity))
}
func (c *Client) CatalogKalendariPlanirovaniiaProdazh(key PrimaryCatalogKalendariPlanirovaniiaProdazh, fields []string) (*CatalogKalendariPlanirovaniiaProdazh, error) {
	return NewCatalogKalendariPlanirovaniiaProdazh(c.getEntity(key, fields))
}
func (c *Client) CatalogKalendariPlanirovaniiaProdazhs(where Where) (*[]CatalogKalendariPlanirovaniiaProdazh, error) {
	type ReturnObj struct {
		Value []CatalogKalendariPlanirovaniiaProdazh `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_КалендариПланированияПродаж", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogKalendariPlanirovaniiaProdazh(key PrimaryCatalogKalendariPlanirovaniiaProdazh, entity CatalogKalendariPlanirovaniiaProdazh) (*CatalogKalendariPlanirovaniiaProdazh, error) {
	return NewCatalogKalendariPlanirovaniiaProdazh(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogKalendariPlanirovaniiaProdazh(key PrimaryCatalogKalendariPlanirovaniiaProdazh) error {
	return c.removeEntity(key)
}

type CatalogKalendariPlanirovaniiaProdazhKUPoDniam struct {
	Key        Guid      `json:"Ref_Key,omitempty"`
	LineNumber Int64     `json:"LineNumber,omitempty"`
	DenGoda    *DateTime `json:"ДеньГода,omitempty"`
	KU         *Double   `json:"КУ,omitempty"`
}

func (CatalogKalendariPlanirovaniiaProdazhKUPoDniam) APIEntityType() string {
	return "Catalog_КалендариПланированияПродаж_КУПоДням"
}
func NewCatalogKalendariPlanirovaniiaProdazhKUPoDniam(data string, prevError error) (*CatalogKalendariPlanirovaniiaProdazhKUPoDniam, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogKalendariPlanirovaniiaProdazhKUPoDniam)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogKalendariPlanirovaniiaProdazhKUPoDniam(entity CatalogKalendariPlanirovaniiaProdazhKUPoDniam) (*CatalogKalendariPlanirovaniiaProdazhKUPoDniam, error) {
	return NewCatalogKalendariPlanirovaniiaProdazhKUPoDniam(c.createEntity(entity))
}
func (c *Client) CatalogKalendariPlanirovaniiaProdazhKUPoDniam(key PrimaryCatalogKalendariPlanirovaniiaProdazhKUPoDniam, fields []string) (*CatalogKalendariPlanirovaniiaProdazhKUPoDniam, error) {
	return NewCatalogKalendariPlanirovaniiaProdazhKUPoDniam(c.getEntity(key, fields))
}
func (c *Client) CatalogKalendariPlanirovaniiaProdazhKUPoDniams(where Where) (*[]CatalogKalendariPlanirovaniiaProdazhKUPoDniam, error) {
	type ReturnObj struct {
		Value []CatalogKalendariPlanirovaniiaProdazhKUPoDniam `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_КалендариПланированияПродаж_КУПоДням", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogKalendariPlanirovaniiaProdazhKUPoDniam(key PrimaryCatalogKalendariPlanirovaniiaProdazhKUPoDniam, entity CatalogKalendariPlanirovaniiaProdazhKUPoDniam) (*CatalogKalendariPlanirovaniiaProdazhKUPoDniam, error) {
	return NewCatalogKalendariPlanirovaniiaProdazhKUPoDniam(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogKalendariPlanirovaniiaProdazhKUPoDniam(key PrimaryCatalogKalendariPlanirovaniiaProdazhKUPoDniam) error {
	return c.removeEntity(key)
}

type CatalogKalendariPlanirovaniiaProdazhSalony struct {
	Key        Guid  `json:"Ref_Key,omitempty"`
	LineNumber Int64 `json:"LineNumber,omitempty"`
	SalonKey   *Guid `json:"Салон_Key,omitempty"`
}

func (CatalogKalendariPlanirovaniiaProdazhSalony) APIEntityType() string {
	return "Catalog_КалендариПланированияПродаж_Салоны"
}
func NewCatalogKalendariPlanirovaniiaProdazhSalony(data string, prevError error) (*CatalogKalendariPlanirovaniiaProdazhSalony, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogKalendariPlanirovaniiaProdazhSalony)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogKalendariPlanirovaniiaProdazhSalony(entity CatalogKalendariPlanirovaniiaProdazhSalony) (*CatalogKalendariPlanirovaniiaProdazhSalony, error) {
	return NewCatalogKalendariPlanirovaniiaProdazhSalony(c.createEntity(entity))
}
func (c *Client) CatalogKalendariPlanirovaniiaProdazhSalony(key PrimaryCatalogKalendariPlanirovaniiaProdazhSalony, fields []string) (*CatalogKalendariPlanirovaniiaProdazhSalony, error) {
	return NewCatalogKalendariPlanirovaniiaProdazhSalony(c.getEntity(key, fields))
}
func (c *Client) CatalogKalendariPlanirovaniiaProdazhSalonys(where Where) (*[]CatalogKalendariPlanirovaniiaProdazhSalony, error) {
	type ReturnObj struct {
		Value []CatalogKalendariPlanirovaniiaProdazhSalony `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_КалендариПланированияПродаж_Салоны", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogKalendariPlanirovaniiaProdazhSalony(key PrimaryCatalogKalendariPlanirovaniiaProdazhSalony, entity CatalogKalendariPlanirovaniiaProdazhSalony) (*CatalogKalendariPlanirovaniiaProdazhSalony, error) {
	return NewCatalogKalendariPlanirovaniiaProdazhSalony(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogKalendariPlanirovaniiaProdazhSalony(key PrimaryCatalogKalendariPlanirovaniiaProdazhSalony) error {
	return c.removeEntity(key)
}

type CatalogKontaktnyeLitsa struct {
	Key                                       Guid      `json:"Ref_Key,omitempty"`
	DataVersion                               *String   `json:"DataVersion,omitempty"`
	Description                               *String   `json:"Description,omitempty"`
	Code                                      *String   `json:"Code,omitempty"`
	DeletionMark                              *Boolean  `json:"DeletionMark,omitempty"`
	VidKontaktnogoLitsa                       *String   `json:"ВидКонтактногоЛица,omitempty"`
	DataRozhdeniia                            *DateTime `json:"ДатаРождения,omitempty"`
	Dolzhnost                                 *String   `json:"Должность,omitempty"`
	Imia                                      *String   `json:"Имя,omitempty"`
	KolichestvoDneiDoNapominaniia             *Int16    `json:"КоличествоДнейДоНапоминания,omitempty"`
	KontragentDliaOgranicheniiaPravDostupaKey *Guid     `json:"КонтрагентДляОграниченияПравДоступа_Key,omitempty"`
	NapominatODneRozhdeniia                   *Boolean  `json:"НапоминатьОДнеРождения,omitempty"`
	ObieektVladelets                          *String   `json:"ОбъектВладелец,omitempty"`
	Opisanie                                  *String   `json:"Описание,omitempty"`
	Otchestvo                                 *String   `json:"Отчество,omitempty"`
	PolzovatelDliaOgranicheniiaPravDostupaKey *Guid     `json:"ПользовательДляОграниченияПравДоступа_Key,omitempty"`
	RolKey                                    *Guid     `json:"Роль_Key,omitempty"`
	Familiia                                  *String   `json:"Фамилия,omitempty"`
	ObieektVladeletsType                      *String   `json:"ОбъектВладелец_Type,omitempty"`
}

func (CatalogKontaktnyeLitsa) APIEntityType() string {
	return "Catalog_КонтактныеЛица"
}
func NewCatalogKontaktnyeLitsa(data string, prevError error) (*CatalogKontaktnyeLitsa, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogKontaktnyeLitsa)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogKontaktnyeLitsa(entity CatalogKontaktnyeLitsa) (*CatalogKontaktnyeLitsa, error) {
	return NewCatalogKontaktnyeLitsa(c.createEntity(entity))
}
func (c *Client) CatalogKontaktnyeLitsa(key PrimaryCatalogKontaktnyeLitsa, fields []string) (*CatalogKontaktnyeLitsa, error) {
	return NewCatalogKontaktnyeLitsa(c.getEntity(key, fields))
}
func (c *Client) CatalogKontaktnyeLitsas(where Where) (*[]CatalogKontaktnyeLitsa, error) {
	type ReturnObj struct {
		Value []CatalogKontaktnyeLitsa `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_КонтактныеЛица", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogKontaktnyeLitsa(key PrimaryCatalogKontaktnyeLitsa, entity CatalogKontaktnyeLitsa) (*CatalogKontaktnyeLitsa, error) {
	return NewCatalogKontaktnyeLitsa(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogKontaktnyeLitsa(key PrimaryCatalogKontaktnyeLitsa) error {
	return c.removeEntity(key)
}

type CatalogFizicheskieLitsa struct {
	Key                     Guid      `json:"Ref_Key,omitempty"`
	DataVersion             *String   `json:"DataVersion,omitempty"`
	Description             *String   `json:"Description,omitempty"`
	Code                    *String   `json:"Code,omitempty"`
	ParentKey               *Guid     `json:"Parent_Key,omitempty"`
	IsFolder                *Boolean  `json:"IsFolder,omitempty"`
	DeletionMark            *Boolean  `json:"DeletionMark,omitempty"`
	DataRozhdeniia          *DateTime `json:"ДатаРождения,omitempty"`
	Comment                 *String   `json:"Комментарий,omitempty"`
	OsnovnoeIzobrazhenieKey *Guid     `json:"ОсновноеИзображение_Key,omitempty"`
	Pol                     *String   `json:"Пол,omitempty"`
	Sotrudnik               *Boolean  `json:"Сотрудник,omitempty"`
	MagazinKey              *Guid     `json:"Магазин_Key,omitempty"`
	Kurer                   *Boolean  `json:"Курьер,omitempty"`
	NastroikaDliaRabotyKey  *Guid     `json:"НастройкаДляРаботы_Key,omitempty"`
	INN                     *String   `json:"ИНН,omitempty"`
	BIdentifikator          *String   `json:"Б_Идентификатор,omitempty"`
	BNomerVersii            *String   `json:"Б_НомерВерсии,omitempty"`
}

func (CatalogFizicheskieLitsa) APIEntityType() string {
	return "Catalog_ФизическиеЛица"
}
func NewCatalogFizicheskieLitsa(data string, prevError error) (*CatalogFizicheskieLitsa, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogFizicheskieLitsa)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogFizicheskieLitsa(entity CatalogFizicheskieLitsa) (*CatalogFizicheskieLitsa, error) {
	return NewCatalogFizicheskieLitsa(c.createEntity(entity))
}
func (c *Client) CatalogFizicheskieLitsa(key PrimaryCatalogFizicheskieLitsa, fields []string) (*CatalogFizicheskieLitsa, error) {
	return NewCatalogFizicheskieLitsa(c.getEntity(key, fields))
}
func (c *Client) CatalogFizicheskieLitsas(where Where) (*[]CatalogFizicheskieLitsa, error) {
	type ReturnObj struct {
		Value []CatalogFizicheskieLitsa `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ФизическиеЛица", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogFizicheskieLitsa(key PrimaryCatalogFizicheskieLitsa, entity CatalogFizicheskieLitsa) (*CatalogFizicheskieLitsa, error) {
	return NewCatalogFizicheskieLitsa(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogFizicheskieLitsa(key PrimaryCatalogFizicheskieLitsa) error {
	return c.removeEntity(key)
}

type CatalogTipovyeAnkety struct {
	Key                         Guid                                        `json:"Ref_Key,omitempty"`
	DataVersion                 *String                                     `json:"DataVersion,omitempty"`
	Description                 *String                                     `json:"Description,omitempty"`
	Code                        *String                                     `json:"Code,omitempty"`
	ParentKey                   *Guid                                       `json:"Parent_Key,omitempty"`
	IsFolder                    *Boolean                                    `json:"IsFolder,omitempty"`
	DeletionMark                *Boolean                                    `json:"DeletionMark,omitempty"`
	Adresnaia                   *Boolean                                    `json:"Адресная,omitempty"`
	VidSpravochnikaDliaZagruzki *String                                     `json:"ВидСправочникаДляЗагрузки,omitempty"`
	Vstuplenie                  *String                                     `json:"Вступление,omitempty"`
	ZagruzhatObieekty           *Boolean                                    `json:"ЗагружатьОбъекты,omitempty"`
	MaketAnketyBase64Data       *Binary                                     `json:"МакетАнкеты_Base64Data,omitempty"`
	NaimenovanieAnkety          *String                                     `json:"НаименованиеАнкеты,omitempty"`
	VoprosyAnkety               *[]CatalogTipovyeAnketyVoprosyAnketyRowType `json:"ВопросыАнкеты,omitempty"`
	MaketAnketyType             *String                                     `json:"МакетАнкеты_Type,omitempty"`
	MaketAnkety                 *Stream                                     `json:"МакетАнкеты,omitempty"`
}

func (CatalogTipovyeAnkety) APIEntityType() string {
	return "Catalog_ТиповыеАнкеты"
}
func NewCatalogTipovyeAnkety(data string, prevError error) (*CatalogTipovyeAnkety, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogTipovyeAnkety)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogTipovyeAnkety(entity CatalogTipovyeAnkety) (*CatalogTipovyeAnkety, error) {
	return NewCatalogTipovyeAnkety(c.createEntity(entity))
}
func (c *Client) CatalogTipovyeAnkety(key PrimaryCatalogTipovyeAnkety, fields []string) (*CatalogTipovyeAnkety, error) {
	return NewCatalogTipovyeAnkety(c.getEntity(key, fields))
}
func (c *Client) CatalogTipovyeAnketys(where Where) (*[]CatalogTipovyeAnkety, error) {
	type ReturnObj struct {
		Value []CatalogTipovyeAnkety `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ТиповыеАнкеты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogTipovyeAnkety(key PrimaryCatalogTipovyeAnkety, entity CatalogTipovyeAnkety) (*CatalogTipovyeAnkety, error) {
	return NewCatalogTipovyeAnkety(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogTipovyeAnkety(key PrimaryCatalogTipovyeAnkety) error {
	return c.removeEntity(key)
}

type CatalogTipovyeAnketyVoprosyAnkety struct {
	Key        Guid  `json:"Ref_Key,omitempty"`
	LineNumber Int64 `json:"LineNumber,omitempty"`
	VoprosKey  *Guid `json:"Вопрос_Key,omitempty"`
	RazdelKey  *Guid `json:"Раздел_Key,omitempty"`
}

func (CatalogTipovyeAnketyVoprosyAnkety) APIEntityType() string {
	return "Catalog_ТиповыеАнкеты_ВопросыАнкеты"
}
func NewCatalogTipovyeAnketyVoprosyAnkety(data string, prevError error) (*CatalogTipovyeAnketyVoprosyAnkety, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogTipovyeAnketyVoprosyAnkety)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogTipovyeAnketyVoprosyAnkety(entity CatalogTipovyeAnketyVoprosyAnkety) (*CatalogTipovyeAnketyVoprosyAnkety, error) {
	return NewCatalogTipovyeAnketyVoprosyAnkety(c.createEntity(entity))
}
func (c *Client) CatalogTipovyeAnketyVoprosyAnkety(key PrimaryCatalogTipovyeAnketyVoprosyAnkety, fields []string) (*CatalogTipovyeAnketyVoprosyAnkety, error) {
	return NewCatalogTipovyeAnketyVoprosyAnkety(c.getEntity(key, fields))
}
func (c *Client) CatalogTipovyeAnketyVoprosyAnketys(where Where) (*[]CatalogTipovyeAnketyVoprosyAnkety, error) {
	type ReturnObj struct {
		Value []CatalogTipovyeAnketyVoprosyAnkety `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ТиповыеАнкеты_ВопросыАнкеты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogTipovyeAnketyVoprosyAnkety(key PrimaryCatalogTipovyeAnketyVoprosyAnkety, entity CatalogTipovyeAnketyVoprosyAnkety) (*CatalogTipovyeAnketyVoprosyAnkety, error) {
	return NewCatalogTipovyeAnketyVoprosyAnkety(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogTipovyeAnketyVoprosyAnkety(key PrimaryCatalogTipovyeAnketyVoprosyAnkety) error {
	return c.removeEntity(key)
}

type DocumentNachislenieSpisanieBonusov struct {
	Key                            Guid                                                        `json:"Ref_Key,omitempty"`
	DataVersion                    *String                                                     `json:"DataVersion,omitempty"`
	Number                         *String                                                     `json:"Number,omitempty"`
	Date                           *DateTime                                                   `json:"Date,omitempty"`
	DeletionMark                   *Boolean                                                    `json:"DeletionMark,omitempty"`
	Posted                         *Boolean                                                    `json:"Posted,omitempty"`
	Comment                        *String                                                     `json:"Комментарий,omitempty"`
	OtvetstvennyiKey               *Guid                                                       `json:"Ответственный_Key,omitempty"`
	NastroikiZapolneniiaBase64Data *Binary                                                     `json:"НастройкиЗаполнения_Base64Data,omitempty"`
	DataNachisleniiaBonusov        *DateTime                                                   `json:"ДатаНачисленияБонусов,omitempty"`
	VremmennyeBonusy               *Boolean                                                    `json:"ВремменныеБонусы,omitempty"`
	DataSpisaniiaBonusov           *DateTime                                                   `json:"ДатаСписанияБонусов,omitempty"`
	DokumentSozdanVIuTD            *Boolean                                                    `json:"ДокументСозданВЮТД,omitempty"`
	DiskontnyeKarty                *[]DocumentNachislenieSpisanieBonusovDiskontnyeKartyRowType `json:"ДисконтныеКарты,omitempty"`
	NastroikiZapolneniiaType       *String                                                     `json:"НастройкиЗаполнения_Type,omitempty"`
	NastroikiZapolneniia           *Stream                                                     `json:"НастройкиЗаполнения,omitempty"`
}

func (DocumentNachislenieSpisanieBonusov) APIEntityType() string {
	return "Document_НачислениеСписаниеБонусов"
}
func NewDocumentNachislenieSpisanieBonusov(data string, prevError error) (*DocumentNachislenieSpisanieBonusov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentNachislenieSpisanieBonusov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentNachislenieSpisanieBonusov(entity DocumentNachislenieSpisanieBonusov) (*DocumentNachislenieSpisanieBonusov, error) {
	return NewDocumentNachislenieSpisanieBonusov(c.createEntity(entity))
}
func (c *Client) DocumentNachislenieSpisanieBonusov(key PrimaryDocumentNachislenieSpisanieBonusov, fields []string) (*DocumentNachislenieSpisanieBonusov, error) {
	return NewDocumentNachislenieSpisanieBonusov(c.getEntity(key, fields))
}
func (c *Client) DocumentNachislenieSpisanieBonusovs(where Where) (*[]DocumentNachislenieSpisanieBonusov, error) {
	type ReturnObj struct {
		Value []DocumentNachislenieSpisanieBonusov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_НачислениеСписаниеБонусов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentNachislenieSpisanieBonusov(key PrimaryDocumentNachislenieSpisanieBonusov, entity DocumentNachislenieSpisanieBonusov) (*DocumentNachislenieSpisanieBonusov, error) {
	return NewDocumentNachislenieSpisanieBonusov(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentNachislenieSpisanieBonusov(key PrimaryDocumentNachislenieSpisanieBonusov) error {
	return c.removeEntity(key)
}

type DocumentNachislenieSpisanieBonusovDiskontnyeKarty struct {
	Key                     Guid   `json:"Ref_Key,omitempty"`
	LineNumber              Int64  `json:"LineNumber,omitempty"`
	MemberCardKey           *Guid  `json:"ДисконтнаяКарта_Key,omitempty"`
	SummaBonusov            *Int64 `json:"СуммаБонусов,omitempty"`
	TekushchaiaSummaBonusov *Int64 `json:"ТекущаяСуммаБонусов,omitempty"`
}

func (DocumentNachislenieSpisanieBonusovDiskontnyeKarty) APIEntityType() string {
	return "Document_НачислениеСписаниеБонусов_ДисконтныеКарты"
}
func NewDocumentNachislenieSpisanieBonusovDiskontnyeKarty(data string, prevError error) (*DocumentNachislenieSpisanieBonusovDiskontnyeKarty, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentNachislenieSpisanieBonusovDiskontnyeKarty)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentNachislenieSpisanieBonusovDiskontnyeKarty(entity DocumentNachislenieSpisanieBonusovDiskontnyeKarty) (*DocumentNachislenieSpisanieBonusovDiskontnyeKarty, error) {
	return NewDocumentNachislenieSpisanieBonusovDiskontnyeKarty(c.createEntity(entity))
}
func (c *Client) DocumentNachislenieSpisanieBonusovDiskontnyeKarty(key PrimaryDocumentNachislenieSpisanieBonusovDiskontnyeKarty, fields []string) (*DocumentNachislenieSpisanieBonusovDiskontnyeKarty, error) {
	return NewDocumentNachislenieSpisanieBonusovDiskontnyeKarty(c.getEntity(key, fields))
}
func (c *Client) DocumentNachislenieSpisanieBonusovDiskontnyeKartys(where Where) (*[]DocumentNachislenieSpisanieBonusovDiskontnyeKarty, error) {
	type ReturnObj struct {
		Value []DocumentNachislenieSpisanieBonusovDiskontnyeKarty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_НачислениеСписаниеБонусов_ДисконтныеКарты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentNachislenieSpisanieBonusovDiskontnyeKarty(key PrimaryDocumentNachislenieSpisanieBonusovDiskontnyeKarty, entity DocumentNachislenieSpisanieBonusovDiskontnyeKarty) (*DocumentNachislenieSpisanieBonusovDiskontnyeKarty, error) {
	return NewDocumentNachislenieSpisanieBonusovDiskontnyeKarty(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentNachislenieSpisanieBonusovDiskontnyeKarty(key PrimaryDocumentNachislenieSpisanieBonusovDiskontnyeKarty) error {
	return c.removeEntity(key)
}

type Type struct {
	Key               Guid     `json:"Ref_Key,omitempty"`
	DataVersion       *String  `json:"DataVersion,omitempty"`
	Description       *String  `json:"Description,omitempty"`
	Code              *String  `json:"Code,omitempty"`
	ParentKey         *Guid    `json:"Parent_Key,omitempty"`
	IsFolder          *Boolean `json:"IsFolder,omitempty"`
	DeletionMark      *Boolean `json:"DeletionMark,omitempty"`
	EstRazmer         *Boolean `json:"ЕстьРазмер,omitempty"`
	NeUchityvatVes    *Boolean `json:"НеУчитыватьВес,omitempty"`
	ProtsentTekhPoter *Double  `json:"ПроцентТехПотерь,omitempty"`
	BIdentifikator    *String  `json:"Б_Идентификатор,omitempty"`
}

func (Type) APIEntityType() string {
	return "Catalog_ТипыИзделий"
}
func NewType(data string, prevError error) (*Type, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(Type)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateType(entity Type) (*Type, error) {
	return NewType(c.createEntity(entity))
}
func (c *Client) Type(key PrimaryType, fields []string) (*Type, error) {
	return NewType(c.getEntity(key, fields))
}
func (c *Client) Types(where Where) (*[]Type, error) {
	type ReturnObj struct {
		Value []Type `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ТипыИзделий", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateType(key PrimaryType, entity Type) (*Type, error) {
	return NewType(c.updateEntity(key, entity))
}
func (c *Client) DeleteType(key PrimaryType) error {
	return c.removeEntity(key)
}

type CatalogfmKodyVidovDokumentov struct {
	Key                    Guid     `json:"Ref_Key,omitempty"`
	DataVersion            *String  `json:"DataVersion,omitempty"`
	Description            *String  `json:"Description,omitempty"`
	Code                   *Int16   `json:"Code,omitempty"`
	DeletionMark           *Boolean `json:"DeletionMark,omitempty"`
	KodTipaDokumenta       *String  `json:"КодТипаДокумента,omitempty"`
	TipDokumenta           *String  `json:"ТипДокумента,omitempty"`
	TipDokumentaVProgramme *String  `json:"ТипДокументаВПрограмме,omitempty"`
}

func (CatalogfmKodyVidovDokumentov) APIEntityType() string {
	return "Catalog_фмКодыВидовДокументов"
}
func NewCatalogfmKodyVidovDokumentov(data string, prevError error) (*CatalogfmKodyVidovDokumentov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogfmKodyVidovDokumentov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogfmKodyVidovDokumentov(entity CatalogfmKodyVidovDokumentov) (*CatalogfmKodyVidovDokumentov, error) {
	return NewCatalogfmKodyVidovDokumentov(c.createEntity(entity))
}
func (c *Client) CatalogfmKodyVidovDokumentov(key PrimaryCatalogfmKodyVidovDokumentov, fields []string) (*CatalogfmKodyVidovDokumentov, error) {
	return NewCatalogfmKodyVidovDokumentov(c.getEntity(key, fields))
}
func (c *Client) CatalogfmKodyVidovDokumentovs(where Where) (*[]CatalogfmKodyVidovDokumentov, error) {
	type ReturnObj struct {
		Value []CatalogfmKodyVidovDokumentov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_фмКодыВидовДокументов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogfmKodyVidovDokumentov(key PrimaryCatalogfmKodyVidovDokumentov, entity CatalogfmKodyVidovDokumentov) (*CatalogfmKodyVidovDokumentov, error) {
	return NewCatalogfmKodyVidovDokumentov(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogfmKodyVidovDokumentov(key PrimaryCatalogfmKodyVidovDokumentov) error {
	return c.removeEntity(key)
}

type DocumentPlatezhnoeTrebovaniePoluchennoe struct {
	Key                              Guid                                                                  `json:"Ref_Key,omitempty"`
	DataVersion                      *String                                                               `json:"DataVersion,omitempty"`
	Number                           *String                                                               `json:"Number,omitempty"`
	Date                             *DateTime                                                             `json:"Date,omitempty"`
	DeletionMark                     *Boolean                                                              `json:"DeletionMark,omitempty"`
	Posted                           *Boolean                                                              `json:"Posted,omitempty"`
	ValiutaDokumentaKey              *Guid                                                                 `json:"ВалютаДокумента_Key,omitempty"`
	OperationType                    *String                                                               `json:"ВидОперации,omitempty"`
	VidPlatezha                      *String                                                               `json:"ВидПлатежа,omitempty"`
	DataVkhodiashchegoDokumenta      *DateTime                                                             `json:"ДатаВходящегоДокумента,omitempty"`
	DataOplaty                       *DateTime                                                             `json:"ДатаОплаты,omitempty"`
	DogovorKontragentaKey            *Guid                                                                 `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie                *String                                                               `json:"ДокументОснование,omitempty"`
	ZaiavkaNaRaskhodovanieSredstvKey *Guid                                                                 `json:"ЗаявкаНаРасходованиеСредств_Key,omitempty"`
	Comment                          *String                                                               `json:"Комментарий,omitempty"`
	KontragentKey                    *Guid                                                                 `json:"Контрагент_Key,omitempty"`
	NaznacheniePlatezha              *String                                                               `json:"НазначениеПлатежа,omitempty"`
	NomerVkhodiashchegoDokumenta     *String                                                               `json:"НомерВходящегоДокумента,omitempty"`
	Oplacheno                        *Boolean                                                              `json:"Оплачено,omitempty"`
	OrganizatsiiaKey                 *Guid                                                                 `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                 *Guid                                                                 `json:"Ответственный_Key,omitempty"`
	OtrazhenoVOperUchete             *Boolean                                                              `json:"ОтраженоВОперУчете,omitempty"`
	OcherednostPlatezha              *Int16                                                                `json:"ОчередностьПлатежа,omitempty"`
	TypeOfMovingMoneyKey             *Guid                                                                 `json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SumOfDocument                    *Double                                                               `json:"СуммаДокумента,omitempty"`
	SchetKontragentaKey              *Guid                                                                 `json:"СчетКонтрагента_Key,omitempty"`
	SchetOrganizatsiiKey             *Guid                                                                 `json:"СчетОрганизации_Key,omitempty"`
	TipDokumenta                     *String                                                               `json:"ТипДокумента,omitempty"`
	ChastichnaiaOplata               *Boolean                                                              `json:"ЧастичнаяОплата,omitempty"`
	ExtendedPayments                 *[]DocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezhaRowType `json:"РасшифровкаПлатежа,omitempty"`
	RekvizityKontragenta             *[]DocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragentaRowType `json:"РеквизитыКонтрагента,omitempty"`
	DokumentOsnovanieType            *String                                                               `json:"ДокументОснование_Type,omitempty"`
}

func (DocumentPlatezhnoeTrebovaniePoluchennoe) APIEntityType() string {
	return "Document_ПлатежноеТребованиеПолученное"
}
func NewDocumentPlatezhnoeTrebovaniePoluchennoe(data string, prevError error) (*DocumentPlatezhnoeTrebovaniePoluchennoe, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPlatezhnoeTrebovaniePoluchennoe)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPlatezhnoeTrebovaniePoluchennoe(entity DocumentPlatezhnoeTrebovaniePoluchennoe) (*DocumentPlatezhnoeTrebovaniePoluchennoe, error) {
	return NewDocumentPlatezhnoeTrebovaniePoluchennoe(c.createEntity(entity))
}
func (c *Client) DocumentPlatezhnoeTrebovaniePoluchennoe(key PrimaryDocumentPlatezhnoeTrebovaniePoluchennoe, fields []string) (*DocumentPlatezhnoeTrebovaniePoluchennoe, error) {
	return NewDocumentPlatezhnoeTrebovaniePoluchennoe(c.getEntity(key, fields))
}
func (c *Client) DocumentPlatezhnoeTrebovaniePoluchennoes(where Where) (*[]DocumentPlatezhnoeTrebovaniePoluchennoe, error) {
	type ReturnObj struct {
		Value []DocumentPlatezhnoeTrebovaniePoluchennoe `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПлатежноеТребованиеПолученное", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPlatezhnoeTrebovaniePoluchennoe(key PrimaryDocumentPlatezhnoeTrebovaniePoluchennoe, entity DocumentPlatezhnoeTrebovaniePoluchennoe) (*DocumentPlatezhnoeTrebovaniePoluchennoe, error) {
	return NewDocumentPlatezhnoeTrebovaniePoluchennoe(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPlatezhnoeTrebovaniePoluchennoe(key PrimaryDocumentPlatezhnoeTrebovaniePoluchennoe) error {
	return c.removeEntity(key)
}

type DocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezha struct {
	Key                              Guid    `json:"Ref_Key,omitempty"`
	LineNumber                       Int64   `json:"LineNumber,omitempty"`
	DogovorKontragentaKey            *Guid   `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentPlanirovaniiaPlatezhaKey *Guid   `json:"ДокументПланированияПлатежа_Key,omitempty"`
	KratnostVzaimoraschetov          *Int64  `json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov              *Double `json:"КурсВзаиморасчетов,omitempty"`
	KursVzaimoraschetovPlan          *Double `json:"КурсВзаиморасчетовПлан,omitempty"`
	NomerPlatezha                    *Int16  `json:"НомерПлатежа,omitempty"`
	ProektKey                        *Guid   `json:"Проект_Key,omitempty"`
	Sdelka                           *String `json:"Сделка,omitempty"`
	StavkaNDS                        *String `json:"СтавкаНДС,omitempty"`
	TypeOfMovingMoneyKey             *Guid   `json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov             *Double `json:"СуммаВзаиморасчетов,omitempty"`
	SummaNDS                         *Double `json:"СуммаНДС,omitempty"`
	Sum                              *Double `json:"СуммаПлатежа,omitempty"`
	SummaPlatezhaPlan                *Double `json:"СуммаПлатежаПлан,omitempty"`
	SdelkaType                       *String `json:"Сделка_Type,omitempty"`
}

func (DocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezha) APIEntityType() string {
	return "Document_ПлатежноеТребованиеПолученное_РасшифровкаПлатежа"
}
func NewDocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezha(data string, prevError error) (*DocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezha, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezha)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezha(entity DocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezha) (*DocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezha, error) {
	return NewDocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezha(c.createEntity(entity))
}
func (c *Client) DocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezha(key PrimaryDocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezha, fields []string) (*DocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezha, error) {
	return NewDocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezha(c.getEntity(key, fields))
}
func (c *Client) DocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezhas(where Where) (*[]DocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezha, error) {
	type ReturnObj struct {
		Value []DocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezha `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПлатежноеТребованиеПолученное_РасшифровкаПлатежа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezha(key PrimaryDocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezha, entity DocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezha) (*DocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezha, error) {
	return NewDocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezha(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezha(key PrimaryDocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezha) error {
	return c.removeEntity(key)
}

type DocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragenta struct {
	Key            Guid    `json:"Ref_Key,omitempty"`
	LineNumber     Int64   `json:"LineNumber,omitempty"`
	Znachenie      *String `json:"Значение,omitempty"`
	Predstavlenie  *String `json:"Представление,omitempty"`
	Rekvizit       *String `json:"Реквизит,omitempty"`
	TipKontragenta *String `json:"ТипКонтрагента,omitempty"`
}

func (DocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragenta) APIEntityType() string {
	return "Document_ПлатежноеТребованиеПолученное_РеквизитыКонтрагента"
}
func NewDocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragenta(data string, prevError error) (*DocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragenta, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragenta)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragenta(entity DocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragenta) (*DocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragenta, error) {
	return NewDocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragenta(c.createEntity(entity))
}
func (c *Client) DocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragenta(key PrimaryDocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragenta, fields []string) (*DocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragenta, error) {
	return NewDocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragenta(c.getEntity(key, fields))
}
func (c *Client) DocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragentas(where Where) (*[]DocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragenta, error) {
	type ReturnObj struct {
		Value []DocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragenta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПлатежноеТребованиеПолученное_РеквизитыКонтрагента", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragenta(key PrimaryDocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragenta, entity DocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragenta) (*DocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragenta, error) {
	return NewDocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragenta(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragenta(key PrimaryDocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragenta) error {
	return c.removeEntity(key)
}

type DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstv struct {
	Key                         Guid                                                                                        `json:"Ref_Key,omitempty"`
	DataVersion                 *String                                                                                     `json:"DataVersion,omitempty"`
	Number                      *String                                                                                     `json:"Number,omitempty"`
	Date                        *DateTime                                                                                   `json:"Date,omitempty"`
	DeletionMark                *Boolean                                                                                    `json:"DeletionMark,omitempty"`
	Posted                      *Boolean                                                                                    `json:"Posted,omitempty"`
	Comment                     *String                                                                                     `json:"Комментарий,omitempty"`
	KontragentKey               *Guid                                                                                       `json:"Контрагент_Key,omitempty"`
	OtborDataKon                *DateTime                                                                                   `json:"ОтборДатаКон,omitempty"`
	OtborDataNach               *DateTime                                                                                   `json:"ОтборДатаНач,omitempty"`
	OtborKontragent             *Boolean                                                                                    `json:"ОтборКонтрагент,omitempty"`
	OtborOtvetstvennyi          *Boolean                                                                                    `json:"ОтборОтветственный,omitempty"`
	OtborTsFO                   *Boolean                                                                                    `json:"ОтборЦФО,omitempty"`
	OtvetstvennyiKey            *Guid                                                                                       `json:"Ответственный_Key,omitempty"`
	OtvetstvennyiPostuplenieKey *Guid                                                                                       `json:"ОтветственныйПоступление_Key,omitempty"`
	Sostoianie                  *String                                                                                     `json:"Состояние,omitempty"`
	TipDokumenta                *String                                                                                     `json:"ТипДокумента,omitempty"`
	TsFOKey                     *Guid                                                                                       `json:"ЦФО_Key,omitempty"`
	PlaniruemyePostupleniiaDS   *[]DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDSRowType `json:"ПланируемыеПоступленияДС,omitempty"`
}

func (DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstv) APIEntityType() string {
	return "Document_ЗакрытиеПланируемыхПоступленийДенежныхСредств"
}
func NewDocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstv(data string, prevError error) (*DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstv, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstv)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstv(entity DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstv) (*DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstv, error) {
	return NewDocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstv(c.createEntity(entity))
}
func (c *Client) DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstv(key PrimaryDocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstv, fields []string) (*DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstv, error) {
	return NewDocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstv(c.getEntity(key, fields))
}
func (c *Client) DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvs(where Where) (*[]DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstv, error) {
	type ReturnObj struct {
		Value []DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstv `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗакрытиеПланируемыхПоступленийДенежныхСредств", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstv(key PrimaryDocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstv, entity DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstv) (*DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstv, error) {
	return NewDocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstv(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstv(key PrimaryDocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstv) error {
	return c.removeEntity(key)
}

type DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDS struct {
	Key                      Guid    `json:"Ref_Key,omitempty"`
	LineNumber               Int64   `json:"LineNumber,omitempty"`
	ValiutaPostuplenieKey    *Guid   `json:"ВалютаПоступление_Key,omitempty"`
	DokumentPlanirovaniiaKey *Guid   `json:"ДокументПланирования_Key,omitempty"`
	KontragentKey            *Guid   `json:"Контрагент_Key,omitempty"`
	OstatokPostuplenie       *Double `json:"ОстатокПоступление,omitempty"`
	OstatokRazmeshchenie     *Double `json:"ОстатокРазмещение,omitempty"`
	OtvetstvennyiKey         *Guid   `json:"Ответственный_Key,omitempty"`
}

func (DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDS) APIEntityType() string {
	return "Document_ЗакрытиеПланируемыхПоступленийДенежныхСредств_ПланируемыеПоступленияДС"
}
func NewDocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDS(data string, prevError error) (*DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDS, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDS)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDS(entity DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDS) (*DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDS, error) {
	return NewDocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDS(c.createEntity(entity))
}
func (c *Client) DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDS(key PrimaryDocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDS, fields []string) (*DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDS, error) {
	return NewDocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDS(c.getEntity(key, fields))
}
func (c *Client) DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDSs(where Where) (*[]DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDS, error) {
	type ReturnObj struct {
		Value []DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDS `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗакрытиеПланируемыхПоступленийДенежныхСредств_ПланируемыеПоступленияДС", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDS(key PrimaryDocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDS, entity DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDS) (*DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDS, error) {
	return NewDocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDS(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDS(key PrimaryDocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDS) error {
	return c.removeEntity(key)
}

type CatalogRazdelyAnkety struct {
	Key          Guid     `json:"Ref_Key,omitempty"`
	DataVersion  *String  `json:"DataVersion,omitempty"`
	Description  *String  `json:"Description,omitempty"`
	Code         *String  `json:"Code,omitempty"`
	OwnerKey     *Guid    `json:"Owner_Key,omitempty"`
	DeletionMark *Boolean `json:"DeletionMark,omitempty"`
}

func (CatalogRazdelyAnkety) APIEntityType() string {
	return "Catalog_РазделыАнкеты"
}
func NewCatalogRazdelyAnkety(data string, prevError error) (*CatalogRazdelyAnkety, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogRazdelyAnkety)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogRazdelyAnkety(entity CatalogRazdelyAnkety) (*CatalogRazdelyAnkety, error) {
	return NewCatalogRazdelyAnkety(c.createEntity(entity))
}
func (c *Client) CatalogRazdelyAnkety(key PrimaryCatalogRazdelyAnkety, fields []string) (*CatalogRazdelyAnkety, error) {
	return NewCatalogRazdelyAnkety(c.getEntity(key, fields))
}
func (c *Client) CatalogRazdelyAnketys(where Where) (*[]CatalogRazdelyAnkety, error) {
	type ReturnObj struct {
		Value []CatalogRazdelyAnkety `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_РазделыАнкеты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogRazdelyAnkety(key PrimaryCatalogRazdelyAnkety, entity CatalogRazdelyAnkety) (*CatalogRazdelyAnkety, error) {
	return NewCatalogRazdelyAnkety(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogRazdelyAnkety(key PrimaryCatalogRazdelyAnkety) error {
	return c.removeEntity(key)
}

type DocumentOtchetPoFinMonitoringu struct {
	Key                             Guid                                                            `json:"Ref_Key,omitempty"`
	DataVersion                     *String                                                         `json:"DataVersion,omitempty"`
	Number                          *String                                                         `json:"Number,omitempty"`
	Date                            *DateTime                                                       `json:"Date,omitempty"`
	DeletionMark                    *Boolean                                                        `json:"DeletionMark,omitempty"`
	Posted                          *Boolean                                                        `json:"Posted,omitempty"`
	OrganizatsiiaKey                *Guid                                                           `json:"Организация_Key,omitempty"`
	NomerSoobshcheniia              *Int64                                                          `json:"НомерСообщения,omitempty"`
	DataSoobshcheniia               *DateTime                                                       `json:"ДатаСообщения,omitempty"`
	VidDokumenta                    *String                                                         `json:"ВидДокумента,omitempty"`
	DokumentOsnovanieKey            *Guid                                                           `json:"ДокументОснование_Key,omitempty"`
	DogovorKontragentaKey           *Guid                                                           `json:"ДоговорКонтрагента_Key,omitempty"`
	KontragentKey                   *Guid                                                           `json:"Контрагент_Key,omitempty"`
	KartochkaKontragentaKey         *Guid                                                           `json:"КарточкаКонтрагента_Key,omitempty"`
	KartochkaOrganizatsiiKey        *Guid                                                           `json:"КарточкаОрганизации_Key,omitempty"`
	DannyePoOplate                  *Boolean                                                        `json:"ДанныеПоОплате,omitempty"`
	RaschetnyiSchetOrganizatsiiKey  *Guid                                                           `json:"РасчетныйСчетОрганизации_Key,omitempty"`
	RaschetnyiSchetKontragentaKey   *Guid                                                           `json:"РасчетныйСчетКонтрагента_Key,omitempty"`
	DannyePoVozvratam               *Boolean                                                        `json:"ДанныеПоВозвратам,omitempty"`
	NomerSoobshcheniiaVTecheniiDnia *String                                                         `json:"НомерСообщенияВТеченииДня,omitempty"`
	DokumentyFinMonitoringa         *[]DocumentOtchetPoFinMonitoringuDokumentyFinMonitoringaRowType `json:"ДокументыФинМониторинга,omitempty"`
	DannyeDokumenta                 *[]DocumentOtchetPoFinMonitoringuDannyeDokumentaRowType         `json:"ДанныеДокумента,omitempty"`
}

func (DocumentOtchetPoFinMonitoringu) APIEntityType() string {
	return "Document_ОтчетПоФинМониторингу"
}
func NewDocumentOtchetPoFinMonitoringu(data string, prevError error) (*DocumentOtchetPoFinMonitoringu, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentOtchetPoFinMonitoringu)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentOtchetPoFinMonitoringu(entity DocumentOtchetPoFinMonitoringu) (*DocumentOtchetPoFinMonitoringu, error) {
	return NewDocumentOtchetPoFinMonitoringu(c.createEntity(entity))
}
func (c *Client) DocumentOtchetPoFinMonitoringu(key PrimaryDocumentOtchetPoFinMonitoringu, fields []string) (*DocumentOtchetPoFinMonitoringu, error) {
	return NewDocumentOtchetPoFinMonitoringu(c.getEntity(key, fields))
}
func (c *Client) DocumentOtchetPoFinMonitoringus(where Where) (*[]DocumentOtchetPoFinMonitoringu, error) {
	type ReturnObj struct {
		Value []DocumentOtchetPoFinMonitoringu `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетПоФинМониторингу", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentOtchetPoFinMonitoringu(key PrimaryDocumentOtchetPoFinMonitoringu, entity DocumentOtchetPoFinMonitoringu) (*DocumentOtchetPoFinMonitoringu, error) {
	return NewDocumentOtchetPoFinMonitoringu(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentOtchetPoFinMonitoringu(key PrimaryDocumentOtchetPoFinMonitoringu) error {
	return c.removeEntity(key)
}

type DocumentOtchetPoFinMonitoringuDokumentyFinMonitoringa struct {
	Key                 Guid    `json:"Ref_Key,omitempty"`
	LineNumber          Int64   `json:"LineNumber,omitempty"`
	DokumentUcheta      *String `json:"ДокументУчета,omitempty"`
	SummaOtgruzki       *Double `json:"СуммаОтгрузки,omitempty"`
	SummaOplaty         *Double `json:"СуммаОплаты,omitempty"`
	Sum                 *Double `json:"Сумма,omitempty"`
	SummaVozvrata       *Double `json:"СуммаВозврата,omitempty"`
	Comment             *String `json:"Комментарий,omitempty"`
	KodVidaDokumentaKey *Guid   `json:"КодВидаДокумента_Key,omitempty"`
	DokumentUchetaType  *String `json:"ДокументУчета_Type,omitempty"`
}

func (DocumentOtchetPoFinMonitoringuDokumentyFinMonitoringa) APIEntityType() string {
	return "Document_ОтчетПоФинМониторингу_ДокументыФинМониторинга"
}
func NewDocumentOtchetPoFinMonitoringuDokumentyFinMonitoringa(data string, prevError error) (*DocumentOtchetPoFinMonitoringuDokumentyFinMonitoringa, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentOtchetPoFinMonitoringuDokumentyFinMonitoringa)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentOtchetPoFinMonitoringuDokumentyFinMonitoringa(entity DocumentOtchetPoFinMonitoringuDokumentyFinMonitoringa) (*DocumentOtchetPoFinMonitoringuDokumentyFinMonitoringa, error) {
	return NewDocumentOtchetPoFinMonitoringuDokumentyFinMonitoringa(c.createEntity(entity))
}
func (c *Client) DocumentOtchetPoFinMonitoringuDokumentyFinMonitoringa(key PrimaryDocumentOtchetPoFinMonitoringuDokumentyFinMonitoringa, fields []string) (*DocumentOtchetPoFinMonitoringuDokumentyFinMonitoringa, error) {
	return NewDocumentOtchetPoFinMonitoringuDokumentyFinMonitoringa(c.getEntity(key, fields))
}
func (c *Client) DocumentOtchetPoFinMonitoringuDokumentyFinMonitoringas(where Where) (*[]DocumentOtchetPoFinMonitoringuDokumentyFinMonitoringa, error) {
	type ReturnObj struct {
		Value []DocumentOtchetPoFinMonitoringuDokumentyFinMonitoringa `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетПоФинМониторингу_ДокументыФинМониторинга", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentOtchetPoFinMonitoringuDokumentyFinMonitoringa(key PrimaryDocumentOtchetPoFinMonitoringuDokumentyFinMonitoringa, entity DocumentOtchetPoFinMonitoringuDokumentyFinMonitoringa) (*DocumentOtchetPoFinMonitoringuDokumentyFinMonitoringa, error) {
	return NewDocumentOtchetPoFinMonitoringuDokumentyFinMonitoringa(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentOtchetPoFinMonitoringuDokumentyFinMonitoringa(key PrimaryDocumentOtchetPoFinMonitoringuDokumentyFinMonitoringa) error {
	return c.removeEntity(key)
}

type DocumentOtchetPoFinMonitoringuDannyeDokumenta struct {
	Key           Guid    `json:"Ref_Key,omitempty"`
	LineNumber    Int64   `json:"LineNumber,omitempty"`
	Kliuch        *String `json:"Ключ,omitempty"`
	Znachenie     *String `json:"Значение,omitempty"`
	ZnachenieType *String `json:"Значение_Type,omitempty"`
}

func (DocumentOtchetPoFinMonitoringuDannyeDokumenta) APIEntityType() string {
	return "Document_ОтчетПоФинМониторингу_ДанныеДокумента"
}
func NewDocumentOtchetPoFinMonitoringuDannyeDokumenta(data string, prevError error) (*DocumentOtchetPoFinMonitoringuDannyeDokumenta, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentOtchetPoFinMonitoringuDannyeDokumenta)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentOtchetPoFinMonitoringuDannyeDokumenta(entity DocumentOtchetPoFinMonitoringuDannyeDokumenta) (*DocumentOtchetPoFinMonitoringuDannyeDokumenta, error) {
	return NewDocumentOtchetPoFinMonitoringuDannyeDokumenta(c.createEntity(entity))
}
func (c *Client) DocumentOtchetPoFinMonitoringuDannyeDokumenta(key PrimaryDocumentOtchetPoFinMonitoringuDannyeDokumenta, fields []string) (*DocumentOtchetPoFinMonitoringuDannyeDokumenta, error) {
	return NewDocumentOtchetPoFinMonitoringuDannyeDokumenta(c.getEntity(key, fields))
}
func (c *Client) DocumentOtchetPoFinMonitoringuDannyeDokumentas(where Where) (*[]DocumentOtchetPoFinMonitoringuDannyeDokumenta, error) {
	type ReturnObj struct {
		Value []DocumentOtchetPoFinMonitoringuDannyeDokumenta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетПоФинМониторингу_ДанныеДокумента", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentOtchetPoFinMonitoringuDannyeDokumenta(key PrimaryDocumentOtchetPoFinMonitoringuDannyeDokumenta, entity DocumentOtchetPoFinMonitoringuDannyeDokumenta) (*DocumentOtchetPoFinMonitoringuDannyeDokumenta, error) {
	return NewDocumentOtchetPoFinMonitoringuDannyeDokumenta(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentOtchetPoFinMonitoringuDannyeDokumenta(key PrimaryDocumentOtchetPoFinMonitoringuDannyeDokumenta) error {
	return c.removeEntity(key)
}

type CatalogKliuchiAnalitikiUchetaNomenklatury struct {
	Key              Guid     `json:"Ref_Key,omitempty"`
	DataVersion      *String  `json:"DataVersion,omitempty"`
	Description      *String  `json:"Description,omitempty"`
	Code             *String  `json:"Code,omitempty"`
	DeletionMark     *Boolean `json:"DeletionMark,omitempty"`
	TipNomenklatury  *String  `json:"ТипНоменклатуры,omitempty"`
	ProbeKey         *Guid    `json:"Проба_Key,omitempty"`
	TypeKey          *Guid    `json:"ТипИзделия_Key,omitempty"`
	SizeKey          *Guid    `json:"Размер_Key,omitempty"`
	KamenKey         *Guid    `json:"Камень_Key,omitempty"`
	RassevKey        *Guid    `json:"Рассев_Key,omitempty"`
	FormaOgrankiKey  *Guid    `json:"ФормаОгранки_Key,omitempty"`
	TsvetKamniaKey   *Guid    `json:"ЦветКамня_Key,omitempty"`
	GruppaTsvetaKey  *Guid    `json:"ГруппаЦвета_Key,omitempty"`
	GruppaDefektaKey *Guid    `json:"ГруппаДефекта_Key,omitempty"`
	Razmer1          *Double  `json:"Размер1,omitempty"`
	Razmer2          *Double  `json:"Размер2,omitempty"`
	Razmer3          *Double  `json:"Размер3,omitempty"`
	MID              *String  `json:"Артикул,omitempty"`
}

func (CatalogKliuchiAnalitikiUchetaNomenklatury) APIEntityType() string {
	return "Catalog_КлючиАналитикиУчетаНоменклатуры"
}
func NewCatalogKliuchiAnalitikiUchetaNomenklatury(data string, prevError error) (*CatalogKliuchiAnalitikiUchetaNomenklatury, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogKliuchiAnalitikiUchetaNomenklatury)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogKliuchiAnalitikiUchetaNomenklatury(entity CatalogKliuchiAnalitikiUchetaNomenklatury) (*CatalogKliuchiAnalitikiUchetaNomenklatury, error) {
	return NewCatalogKliuchiAnalitikiUchetaNomenklatury(c.createEntity(entity))
}
func (c *Client) CatalogKliuchiAnalitikiUchetaNomenklatury(key PrimaryCatalogKliuchiAnalitikiUchetaNomenklatury, fields []string) (*CatalogKliuchiAnalitikiUchetaNomenklatury, error) {
	return NewCatalogKliuchiAnalitikiUchetaNomenklatury(c.getEntity(key, fields))
}
func (c *Client) CatalogKliuchiAnalitikiUchetaNomenklaturys(where Where) (*[]CatalogKliuchiAnalitikiUchetaNomenklatury, error) {
	type ReturnObj struct {
		Value []CatalogKliuchiAnalitikiUchetaNomenklatury `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_КлючиАналитикиУчетаНоменклатуры", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogKliuchiAnalitikiUchetaNomenklatury(key PrimaryCatalogKliuchiAnalitikiUchetaNomenklatury, entity CatalogKliuchiAnalitikiUchetaNomenklatury) (*CatalogKliuchiAnalitikiUchetaNomenklatury, error) {
	return NewCatalogKliuchiAnalitikiUchetaNomenklatury(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogKliuchiAnalitikiUchetaNomenklatury(key PrimaryCatalogKliuchiAnalitikiUchetaNomenklatury) error {
	return c.removeEntity(key)
}

type CatalogVersiiFailov struct {
	Key                           Guid                                            `json:"Ref_Key,omitempty"`
	DataVersion                   *String                                         `json:"DataVersion,omitempty"`
	Description                   *String                                         `json:"Description,omitempty"`
	Code                          *String                                         `json:"Code,omitempty"`
	OwnerKey                      *Guid                                           `json:"Owner_Key,omitempty"`
	DeletionMark                  *Boolean                                        `json:"DeletionMark,omitempty"`
	AvtorKey                      *Guid                                           `json:"Автор_Key,omitempty"`
	DataModifikatsiiUniversalnaia *DateTime                                       `json:"ДатаМодификацииУниверсальная,omitempty"`
	DataModifikatsiiFaila         *DateTime                                       `json:"ДатаМодификацииФайла,omitempty"`
	DataSozdaniia                 *DateTime                                       `json:"ДатаСоздания,omitempty"`
	Zashifrovan                   *Boolean                                        `json:"Зашифрован,omitempty"`
	IndeksKartinki                *Int64                                          `json:"ИндексКартинки,omitempty"`
	Comment                       *String                                         `json:"Комментарий,omitempty"`
	NomerVersii                   *Int64                                          `json:"НомерВерсии,omitempty"`
	PodpisanEP                    *Boolean                                        `json:"ПодписанЭП,omitempty"`
	PolnoeNaimenovanie            *String                                         `json:"ПолноеНаименование,omitempty"`
	PutKFailu                     *String                                         `json:"ПутьКФайлу,omitempty"`
	Razmer                        *Int64                                          `json:"Размер,omitempty"`
	Rasshirenie                   *String                                         `json:"Расширение,omitempty"`
	RoditelskaiaVersiiaKey        *Guid                                           `json:"РодительскаяВерсия_Key,omitempty"`
	StatusIzvlecheniiaTeksta      *String                                         `json:"СтатусИзвлеченияТекста,omitempty"`
	TekstKhranilishcheBase64Data  *Binary                                         `json:"ТекстХранилище_Base64Data,omitempty"`
	FailKhranilishcheBase64Data   *Binary                                         `json:"ФайлХранилище_Base64Data,omitempty"`
	TipKhraneniiaFaila            *String                                         `json:"ТипХраненияФайла,omitempty"`
	TomKey                        *Guid                                           `json:"Том_Key,omitempty"`
	ElektronnyePodpisi            *[]CatalogVersiiFailovElektronnyePodpisiRowType `json:"ЭлектронныеПодписи,omitempty"`
	TekstKhranilishcheType        *String                                         `json:"ТекстХранилище_Type,omitempty"`
	FailKhranilishcheType         *String                                         `json:"ФайлХранилище_Type,omitempty"`
	TekstKhranilishche            *Stream                                         `json:"ТекстХранилище,omitempty"`
	FailKhranilishche             *Stream                                         `json:"ФайлХранилище,omitempty"`
}

func (CatalogVersiiFailov) APIEntityType() string {
	return "Catalog_ВерсииФайлов"
}
func NewCatalogVersiiFailov(data string, prevError error) (*CatalogVersiiFailov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogVersiiFailov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogVersiiFailov(entity CatalogVersiiFailov) (*CatalogVersiiFailov, error) {
	return NewCatalogVersiiFailov(c.createEntity(entity))
}
func (c *Client) CatalogVersiiFailov(key PrimaryCatalogVersiiFailov, fields []string) (*CatalogVersiiFailov, error) {
	return NewCatalogVersiiFailov(c.getEntity(key, fields))
}
func (c *Client) CatalogVersiiFailovs(where Where) (*[]CatalogVersiiFailov, error) {
	type ReturnObj struct {
		Value []CatalogVersiiFailov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ВерсииФайлов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogVersiiFailov(key PrimaryCatalogVersiiFailov, entity CatalogVersiiFailov) (*CatalogVersiiFailov, error) {
	return NewCatalogVersiiFailov(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogVersiiFailov(key PrimaryCatalogVersiiFailov) error {
	return c.removeEntity(key)
}

type CatalogVersiiFailovElektronnyePodpisi struct {
	Key                    Guid      `json:"Ref_Key,omitempty"`
	LineNumber             Int64     `json:"LineNumber,omitempty"`
	DataPodpisi            *DateTime `json:"ДатаПодписи,omitempty"`
	ImiaFailaPodpisi       *String   `json:"ИмяФайлаПодписи,omitempty"`
	Comment                *String   `json:"Комментарий,omitempty"`
	KomuVydanSertifikat    *String   `json:"КомуВыданСертификат,omitempty"`
	Otpechatok             *String   `json:"Отпечаток,omitempty"`
	PodpisBase64Data       *Binary   `json:"Подпись_Base64Data,omitempty"`
	UstanovivshiiPodpisKey *Guid     `json:"УстановившийПодпись_Key,omitempty"`
	SertifikatBase64Data   *Binary   `json:"Сертификат_Base64Data,omitempty"`
	PodpisType             *String   `json:"Подпись_Type,omitempty"`
	SertifikatType         *String   `json:"Сертификат_Type,omitempty"`
	Podpis                 *Stream   `json:"Подпись,omitempty"`
	Sertifikat             *Stream   `json:"Сертификат,omitempty"`
}

func (CatalogVersiiFailovElektronnyePodpisi) APIEntityType() string {
	return "Catalog_ВерсииФайлов_ЭлектронныеПодписи"
}
func NewCatalogVersiiFailovElektronnyePodpisi(data string, prevError error) (*CatalogVersiiFailovElektronnyePodpisi, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogVersiiFailovElektronnyePodpisi)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogVersiiFailovElektronnyePodpisi(entity CatalogVersiiFailovElektronnyePodpisi) (*CatalogVersiiFailovElektronnyePodpisi, error) {
	return NewCatalogVersiiFailovElektronnyePodpisi(c.createEntity(entity))
}
func (c *Client) CatalogVersiiFailovElektronnyePodpisi(key PrimaryCatalogVersiiFailovElektronnyePodpisi, fields []string) (*CatalogVersiiFailovElektronnyePodpisi, error) {
	return NewCatalogVersiiFailovElektronnyePodpisi(c.getEntity(key, fields))
}
func (c *Client) CatalogVersiiFailovElektronnyePodpisis(where Where) (*[]CatalogVersiiFailovElektronnyePodpisi, error) {
	type ReturnObj struct {
		Value []CatalogVersiiFailovElektronnyePodpisi `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ВерсииФайлов_ЭлектронныеПодписи", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogVersiiFailovElektronnyePodpisi(key PrimaryCatalogVersiiFailovElektronnyePodpisi, entity CatalogVersiiFailovElektronnyePodpisi) (*CatalogVersiiFailovElektronnyePodpisi, error) {
	return NewCatalogVersiiFailovElektronnyePodpisi(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogVersiiFailovElektronnyePodpisi(key PrimaryCatalogVersiiFailovElektronnyePodpisi) error {
	return c.removeEntity(key)
}

type DocumentUstanovkaTsenNomenklatury struct {
	Key                                      Guid                                                `json:"Ref_Key,omitempty"`
	DataVersion                              *String                                             `json:"DataVersion,omitempty"`
	Number                                   *String                                             `json:"Number,omitempty"`
	Date                                     *DateTime                                           `json:"Date,omitempty"`
	DeletionMark                             *Boolean                                            `json:"DeletionMark,omitempty"`
	Posted                                   *Boolean                                            `json:"Posted,omitempty"`
	VybGruppaKey                             *Guid                                               `json:"ВыбГруппа_Key,omitempty"`
	DokumentOsnovanie                        *String                                             `json:"ДокументОснование,omitempty"`
	DokumentSozdanVIuTD                      *Boolean                                            `json:"ДокументСозданВЮТД,omitempty"`
	Informatsiia                             *String                                             `json:"Информация,omitempty"`
	Comment                                  *String                                             `json:"Комментарий,omitempty"`
	NeProvoditNulevyeZnacheniia              *Boolean                                            `json:"НеПроводитьНулевыеЗначения,omitempty"`
	OtvetstvennyiKey                         *Guid                                               `json:"Ответственный_Key,omitempty"`
	ParametryOtboraBase64Data                *Binary                                             `json:"ПараметрыОтбора_Base64Data,omitempty"`
	RegistratsiiaTsenPoSegmentamNomenklatury *Boolean                                            `json:"РегистрацияЦенПоСегментамНоменклатуры,omitempty"`
	NastroikiZapolneniiaBase64Data           *Binary                                             `json:"НастройкиЗаполнения_Base64Data,omitempty"`
	TipyTsen                                 *[]DocumentUstanovkaTsenNomenklaturyTipyTsenRowType `json:"ТипыЦен,omitempty"`
	Goods                                    *[]DocumentUstanovkaTsenNomenklaturyTovaryRowType   `json:"Товары,omitempty"`
	DokumentOsnovanieType                    *String                                             `json:"ДокументОснование_Type,omitempty"`
	ParametryOtboraType                      *String                                             `json:"ПараметрыОтбора_Type,omitempty"`
	NastroikiZapolneniiaType                 *String                                             `json:"НастройкиЗаполнения_Type,omitempty"`
	ParametryOtbora                          *Stream                                             `json:"ПараметрыОтбора,omitempty"`
	NastroikiZapolneniia                     *Stream                                             `json:"НастройкиЗаполнения,omitempty"`
}

func (DocumentUstanovkaTsenNomenklatury) APIEntityType() string {
	return "Document_УстановкаЦенНоменклатуры"
}
func NewDocumentUstanovkaTsenNomenklatury(data string, prevError error) (*DocumentUstanovkaTsenNomenklatury, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentUstanovkaTsenNomenklatury)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentUstanovkaTsenNomenklatury(entity DocumentUstanovkaTsenNomenklatury) (*DocumentUstanovkaTsenNomenklatury, error) {
	return NewDocumentUstanovkaTsenNomenklatury(c.createEntity(entity))
}
func (c *Client) DocumentUstanovkaTsenNomenklatury(key PrimaryDocumentUstanovkaTsenNomenklatury, fields []string) (*DocumentUstanovkaTsenNomenklatury, error) {
	return NewDocumentUstanovkaTsenNomenklatury(c.getEntity(key, fields))
}
func (c *Client) DocumentUstanovkaTsenNomenklaturys(where Where) (*[]DocumentUstanovkaTsenNomenklatury, error) {
	type ReturnObj struct {
		Value []DocumentUstanovkaTsenNomenklatury `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_УстановкаЦенНоменклатуры", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentUstanovkaTsenNomenklatury(key PrimaryDocumentUstanovkaTsenNomenklatury, entity DocumentUstanovkaTsenNomenklatury) (*DocumentUstanovkaTsenNomenklatury, error) {
	return NewDocumentUstanovkaTsenNomenklatury(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentUstanovkaTsenNomenklatury(key PrimaryDocumentUstanovkaTsenNomenklatury) error {
	return c.removeEntity(key)
}

type DocumentUstanovkaTsenNomenklaturyTipyTsen struct {
	Key        Guid  `json:"Ref_Key,omitempty"`
	LineNumber Int64 `json:"LineNumber,omitempty"`
	TipTsenKey *Guid `json:"ТипЦен_Key,omitempty"`
}

func (DocumentUstanovkaTsenNomenklaturyTipyTsen) APIEntityType() string {
	return "Document_УстановкаЦенНоменклатуры_ТипыЦен"
}
func NewDocumentUstanovkaTsenNomenklaturyTipyTsen(data string, prevError error) (*DocumentUstanovkaTsenNomenklaturyTipyTsen, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentUstanovkaTsenNomenklaturyTipyTsen)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentUstanovkaTsenNomenklaturyTipyTsen(entity DocumentUstanovkaTsenNomenklaturyTipyTsen) (*DocumentUstanovkaTsenNomenklaturyTipyTsen, error) {
	return NewDocumentUstanovkaTsenNomenklaturyTipyTsen(c.createEntity(entity))
}
func (c *Client) DocumentUstanovkaTsenNomenklaturyTipyTsen(key PrimaryDocumentUstanovkaTsenNomenklaturyTipyTsen, fields []string) (*DocumentUstanovkaTsenNomenklaturyTipyTsen, error) {
	return NewDocumentUstanovkaTsenNomenklaturyTipyTsen(c.getEntity(key, fields))
}
func (c *Client) DocumentUstanovkaTsenNomenklaturyTipyTsens(where Where) (*[]DocumentUstanovkaTsenNomenklaturyTipyTsen, error) {
	type ReturnObj struct {
		Value []DocumentUstanovkaTsenNomenklaturyTipyTsen `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_УстановкаЦенНоменклатуры_ТипыЦен", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentUstanovkaTsenNomenklaturyTipyTsen(key PrimaryDocumentUstanovkaTsenNomenklaturyTipyTsen, entity DocumentUstanovkaTsenNomenklaturyTipyTsen) (*DocumentUstanovkaTsenNomenklaturyTipyTsen, error) {
	return NewDocumentUstanovkaTsenNomenklaturyTipyTsen(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentUstanovkaTsenNomenklaturyTipyTsen(key PrimaryDocumentUstanovkaTsenNomenklaturyTipyTsen) error {
	return c.removeEntity(key)
}

type DocumentUstanovkaTsenNomenklaturyTovary struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	ValiutaKey                     *Guid   `json:"Валюта_Key,omitempty"`
	IndeksStrokiTablitsyTsen       *Int64  `json:"ИндексСтрокиТаблицыЦен,omitempty"`
	ItemKey                        *Guid   `json:"Номенклатура_Key,omitempty"`
	ProtsentSkidkiNatsenki         *Double `json:"ПроцентСкидкиНаценки,omitempty"`
	SizeKey                        *Guid   `json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	TipTsenKey                     *Guid   `json:"ТипЦен_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Double `json:"Цена,omitempty"`
	SegmentNomenklaturyKey         *Guid   `json:"СегментНоменклатуры_Key,omitempty"`
}

func (DocumentUstanovkaTsenNomenklaturyTovary) APIEntityType() string {
	return "Document_УстановкаЦенНоменклатуры_Товары"
}
func NewDocumentUstanovkaTsenNomenklaturyTovary(data string, prevError error) (*DocumentUstanovkaTsenNomenklaturyTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentUstanovkaTsenNomenklaturyTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentUstanovkaTsenNomenklaturyTovary(entity DocumentUstanovkaTsenNomenklaturyTovary) (*DocumentUstanovkaTsenNomenklaturyTovary, error) {
	return NewDocumentUstanovkaTsenNomenklaturyTovary(c.createEntity(entity))
}
func (c *Client) DocumentUstanovkaTsenNomenklaturyTovary(key PrimaryDocumentUstanovkaTsenNomenklaturyTovary, fields []string) (*DocumentUstanovkaTsenNomenklaturyTovary, error) {
	return NewDocumentUstanovkaTsenNomenklaturyTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentUstanovkaTsenNomenklaturyTovarys(where Where) (*[]DocumentUstanovkaTsenNomenklaturyTovary, error) {
	type ReturnObj struct {
		Value []DocumentUstanovkaTsenNomenklaturyTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_УстановкаЦенНоменклатуры_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentUstanovkaTsenNomenklaturyTovary(key PrimaryDocumentUstanovkaTsenNomenklaturyTovary, entity DocumentUstanovkaTsenNomenklaturyTovary) (*DocumentUstanovkaTsenNomenklaturyTovary, error) {
	return NewDocumentUstanovkaTsenNomenklaturyTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentUstanovkaTsenNomenklaturyTovary(key PrimaryDocumentUstanovkaTsenNomenklaturyTovary) error {
	return c.removeEntity(key)
}

type DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstv struct {
	Key                              Guid                                                                           `json:"Ref_Key,omitempty"`
	DataVersion                      *String                                                                        `json:"DataVersion,omitempty"`
	Number                           *String                                                                        `json:"Number,omitempty"`
	Date                             *DateTime                                                                      `json:"Date,omitempty"`
	DeletionMark                     *Boolean                                                                       `json:"DeletionMark,omitempty"`
	Posted                           *Boolean                                                                       `json:"Posted,omitempty"`
	ValiutaDokumentaKey              *Guid                                                                          `json:"ВалютаДокумента_Key,omitempty"`
	OperationType                    *String                                                                        `json:"ВидОперации,omitempty"`
	DataOplaty                       *DateTime                                                                      `json:"ДатаОплаты,omitempty"`
	DogovorKontragentaKey            *Guid                                                                          `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie                *String                                                                        `json:"ДокументОснование,omitempty"`
	ZaiavkaNaRaskhodovanieSredstvKey *Guid                                                                          `json:"ЗаявкаНаРасходованиеСредств_Key,omitempty"`
	Comment                          *String                                                                        `json:"Комментарий,omitempty"`
	KontragentKey                    *Guid                                                                          `json:"Контрагент_Key,omitempty"`
	Oplacheno                        *Boolean                                                                       `json:"Оплачено,omitempty"`
	OrganizatsiiaKey                 *Guid                                                                          `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                 *Guid                                                                          `json:"Ответственный_Key,omitempty"`
	OtrazhenoVOperUchete             *Boolean                                                                       `json:"ОтраженоВОперУчете,omitempty"`
	RaschetnyiDokument               *String                                                                        `json:"РасчетныйДокумент,omitempty"`
	TypeOfMovingMoneyKey             *Guid                                                                          `json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SumOfDocument                    *Double                                                                        `json:"СуммаДокумента,omitempty"`
	SchetKontragentaKey              *Guid                                                                          `json:"СчетКонтрагента_Key,omitempty"`
	SchetOrganizatsiiKey             *Guid                                                                          `json:"СчетОрганизации_Key,omitempty"`
	TipDokumenta                     *String                                                                        `json:"ТипДокумента,omitempty"`
	NomerVkhodiashchegoDokumenta     *String                                                                        `json:"НомерВходящегоДокумента,omitempty"`
	DataVkhodiashchegoDokumenta      *DateTime                                                                      `json:"ДатаВходящегоДокумента,omitempty"`
	PodrazdelenieKey                 *Guid                                                                          `json:"Подразделение_Key,omitempty"`
	ExtendedPayments                 *[]DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezhaRowType `json:"РасшифровкаПлатежа,omitempty"`
	RekvizityKontragenta             *[]DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragentaRowType `json:"РеквизитыКонтрагента,omitempty"`
	DokumentOsnovanieType            *String                                                                        `json:"ДокументОснование_Type,omitempty"`
	RaschetnyiDokumentType           *String                                                                        `json:"РасчетныйДокумент_Type,omitempty"`
}

func (DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstv) APIEntityType() string {
	return "Document_ПлатежныйОрдерСписаниеДенежныхСредств"
}
func NewDocumentPlatezhnyiOrderSpisanieDenezhnykhSredstv(data string, prevError error) (*DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstv, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstv)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPlatezhnyiOrderSpisanieDenezhnykhSredstv(entity DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstv) (*DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstv, error) {
	return NewDocumentPlatezhnyiOrderSpisanieDenezhnykhSredstv(c.createEntity(entity))
}
func (c *Client) DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstv(key PrimaryDocumentPlatezhnyiOrderSpisanieDenezhnykhSredstv, fields []string) (*DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstv, error) {
	return NewDocumentPlatezhnyiOrderSpisanieDenezhnykhSredstv(c.getEntity(key, fields))
}
func (c *Client) DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvs(where Where) (*[]DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstv, error) {
	type ReturnObj struct {
		Value []DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstv `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПлатежныйОрдерСписаниеДенежныхСредств", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPlatezhnyiOrderSpisanieDenezhnykhSredstv(key PrimaryDocumentPlatezhnyiOrderSpisanieDenezhnykhSredstv, entity DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstv) (*DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstv, error) {
	return NewDocumentPlatezhnyiOrderSpisanieDenezhnykhSredstv(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPlatezhnyiOrderSpisanieDenezhnykhSredstv(key PrimaryDocumentPlatezhnyiOrderSpisanieDenezhnykhSredstv) error {
	return c.removeEntity(key)
}

type DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezha struct {
	Key                              Guid    `json:"Ref_Key,omitempty"`
	LineNumber                       Int64   `json:"LineNumber,omitempty"`
	DogovorKontragentaKey            *Guid   `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentPlanirovaniiaPlatezhaKey *Guid   `json:"ДокументПланированияПлатежа_Key,omitempty"`
	KratnostVzaimoraschetov          *Int64  `json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov              *Double `json:"КурсВзаиморасчетов,omitempty"`
	KursVzaimoraschetovPlan          *Double `json:"КурсВзаиморасчетовПлан,omitempty"`
	ProektKey                        *Guid   `json:"Проект_Key,omitempty"`
	Sdelka                           *String `json:"Сделка,omitempty"`
	StavkaNDS                        *String `json:"СтавкаНДС,omitempty"`
	TypeOfMovingMoneyKey             *Guid   `json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov             *Double `json:"СуммаВзаиморасчетов,omitempty"`
	SummaNDS                         *Double `json:"СуммаНДС,omitempty"`
	Sum                              *Double `json:"СуммаПлатежа,omitempty"`
	SummaPlatezhaPlan                *Double `json:"СуммаПлатежаПлан,omitempty"`
	SdelkaType                       *String `json:"Сделка_Type,omitempty"`
}

func (DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezha) APIEntityType() string {
	return "Document_ПлатежныйОрдерСписаниеДенежныхСредств_РасшифровкаПлатежа"
}
func NewDocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezha(data string, prevError error) (*DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezha, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezha)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezha(entity DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezha) (*DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezha, error) {
	return NewDocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezha(c.createEntity(entity))
}
func (c *Client) DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezha(key PrimaryDocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezha, fields []string) (*DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezha, error) {
	return NewDocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezha(c.getEntity(key, fields))
}
func (c *Client) DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezhas(where Where) (*[]DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezha, error) {
	type ReturnObj struct {
		Value []DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezha `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПлатежныйОрдерСписаниеДенежныхСредств_РасшифровкаПлатежа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezha(key PrimaryDocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezha, entity DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezha) (*DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezha, error) {
	return NewDocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezha(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezha(key PrimaryDocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezha) error {
	return c.removeEntity(key)
}

type DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragenta struct {
	Key            Guid    `json:"Ref_Key,omitempty"`
	LineNumber     Int64   `json:"LineNumber,omitempty"`
	Znachenie      *String `json:"Значение,omitempty"`
	Predstavlenie  *String `json:"Представление,omitempty"`
	Rekvizit       *String `json:"Реквизит,omitempty"`
	TipKontragenta *String `json:"ТипКонтрагента,omitempty"`
}

func (DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragenta) APIEntityType() string {
	return "Document_ПлатежныйОрдерСписаниеДенежныхСредств_РеквизитыКонтрагента"
}
func NewDocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragenta(data string, prevError error) (*DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragenta, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragenta)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragenta(entity DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragenta) (*DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragenta, error) {
	return NewDocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragenta(c.createEntity(entity))
}
func (c *Client) DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragenta(key PrimaryDocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragenta, fields []string) (*DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragenta, error) {
	return NewDocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragenta(c.getEntity(key, fields))
}
func (c *Client) DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragentas(where Where) (*[]DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragenta, error) {
	type ReturnObj struct {
		Value []DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragenta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПлатежныйОрдерСписаниеДенежныхСредств_РеквизитыКонтрагента", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragenta(key PrimaryDocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragenta, entity DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragenta) (*DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragenta, error) {
	return NewDocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragenta(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragenta(key PrimaryDocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragenta) error {
	return c.removeEntity(key)
}

type DocumentPreiskurantNaSkupku struct {
	Key                         Guid                                       `json:"Ref_Key,omitempty"`
	DataVersion                 *String                                    `json:"DataVersion,omitempty"`
	Number                      *String                                    `json:"Number,omitempty"`
	Date                        *DateTime                                  `json:"Date,omitempty"`
	DeletionMark                *Boolean                                   `json:"DeletionMark,omitempty"`
	Posted                      *Boolean                                   `json:"Posted,omitempty"`
	NeProvoditNulevyeZnacheniia *Boolean                                   `json:"НеПроводитьНулевыеЗначения,omitempty"`
	OtvetstvennyiKey            *Guid                                      `json:"Ответственный_Key,omitempty"`
	IspolzovatPriObmene         *Boolean                                   `json:"ИспользоватьПриОбмене,omitempty"`
	Comment                     *String                                    `json:"Комментарий,omitempty"`
	DokumentSozdanVIuTD         *Boolean                                   `json:"ДокументСозданВЮТД,omitempty"`
	DepartmentKey               *Guid                                      `json:"Склад_Key,omitempty"`
	Proby                       *[]DocumentPreiskurantNaSkupkuProbyRowType `json:"Пробы,omitempty"`
}

func (DocumentPreiskurantNaSkupku) APIEntityType() string {
	return "Document_ПрейскурантНаСкупку"
}
func NewDocumentPreiskurantNaSkupku(data string, prevError error) (*DocumentPreiskurantNaSkupku, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPreiskurantNaSkupku)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPreiskurantNaSkupku(entity DocumentPreiskurantNaSkupku) (*DocumentPreiskurantNaSkupku, error) {
	return NewDocumentPreiskurantNaSkupku(c.createEntity(entity))
}
func (c *Client) DocumentPreiskurantNaSkupku(key PrimaryDocumentPreiskurantNaSkupku, fields []string) (*DocumentPreiskurantNaSkupku, error) {
	return NewDocumentPreiskurantNaSkupku(c.getEntity(key, fields))
}
func (c *Client) DocumentPreiskurantNaSkupkus(where Where) (*[]DocumentPreiskurantNaSkupku, error) {
	type ReturnObj struct {
		Value []DocumentPreiskurantNaSkupku `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПрейскурантНаСкупку", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPreiskurantNaSkupku(key PrimaryDocumentPreiskurantNaSkupku, entity DocumentPreiskurantNaSkupku) (*DocumentPreiskurantNaSkupku, error) {
	return NewDocumentPreiskurantNaSkupku(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPreiskurantNaSkupku(key PrimaryDocumentPreiskurantNaSkupku) error {
	return c.removeEntity(key)
}

type DocumentPreiskurantNaSkupkuProby struct {
	Key          Guid    `json:"Ref_Key,omitempty"`
	LineNumber   Int64   `json:"LineNumber,omitempty"`
	ProbeKey     *Guid   `json:"Проба_Key,omitempty"`
	TsenaZaGramm *Double `json:"ЦенаЗаГрамм,omitempty"`
}

func (DocumentPreiskurantNaSkupkuProby) APIEntityType() string {
	return "Document_ПрейскурантНаСкупку_Пробы"
}
func NewDocumentPreiskurantNaSkupkuProby(data string, prevError error) (*DocumentPreiskurantNaSkupkuProby, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPreiskurantNaSkupkuProby)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPreiskurantNaSkupkuProby(entity DocumentPreiskurantNaSkupkuProby) (*DocumentPreiskurantNaSkupkuProby, error) {
	return NewDocumentPreiskurantNaSkupkuProby(c.createEntity(entity))
}
func (c *Client) DocumentPreiskurantNaSkupkuProby(key PrimaryDocumentPreiskurantNaSkupkuProby, fields []string) (*DocumentPreiskurantNaSkupkuProby, error) {
	return NewDocumentPreiskurantNaSkupkuProby(c.getEntity(key, fields))
}
func (c *Client) DocumentPreiskurantNaSkupkuProbys(where Where) (*[]DocumentPreiskurantNaSkupkuProby, error) {
	type ReturnObj struct {
		Value []DocumentPreiskurantNaSkupkuProby `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПрейскурантНаСкупку_Пробы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPreiskurantNaSkupkuProby(key PrimaryDocumentPreiskurantNaSkupkuProby, entity DocumentPreiskurantNaSkupkuProby) (*DocumentPreiskurantNaSkupkuProby, error) {
	return NewDocumentPreiskurantNaSkupkuProby(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPreiskurantNaSkupkuProby(key PrimaryDocumentPreiskurantNaSkupkuProby) error {
	return c.removeEntity(key)
}

type DocumentPeredachaMaterialovVProizvodstvo struct {
	Key                           Guid                                                     `json:"Ref_Key,omitempty"`
	DataVersion                   *String                                                  `json:"DataVersion,omitempty"`
	Number                        *String                                                  `json:"Number,omitempty"`
	Date                          *DateTime                                                `json:"Date,omitempty"`
	DeletionMark                  *Boolean                                                 `json:"DeletionMark,omitempty"`
	Posted                        *Boolean                                                 `json:"Posted,omitempty"`
	Weight                        *Double                                                  `json:"ВесДокумента,omitempty"`
	DogovorKontragentaKey         *Guid                                                    `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie             *String                                                  `json:"ДокументОснование,omitempty"`
	KolichestvoDokumenta          *Int64                                                   `json:"КоличествоДокумента,omitempty"`
	Comment                       *String                                                  `json:"Комментарий,omitempty"`
	KontragentKey                 *Guid                                                    `json:"Контрагент_Key,omitempty"`
	OrganizatsiiaKey              *Guid                                                    `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey              *Guid                                                    `json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey              *Guid                                                    `json:"Подразделение_Key,omitempty"`
	PoluchaemaiaLigaturaKey       *Guid                                                    `json:"ПолучаемаяЛигатура_Key,omitempty"`
	PoluchaemyiVes                *Double                                                  `json:"ПолучаемыйВес,omitempty"`
	ProektKey                     *Guid                                                    `json:"Проект_Key,omitempty"`
	SobstvennoeProizvodstvo       *Boolean                                                 `json:"СобственноеПроизводство,omitempty"`
	DepartmentKey                 *Guid                                                    `json:"Склад_Key,omitempty"`
	TipDokumenta                  *String                                                  `json:"ТипДокумента,omitempty"`
	KhoziaistvennaiaOperatsiiaKey *Guid                                                    `json:"ХозяйственнаяОперация_Key,omitempty"`
	ProizvodstvennyiUchastokKey   *Guid                                                    `json:"ПроизводственныйУчасток_Key,omitempty"`
	ZagruzhenIzUIuP               *Boolean                                                 `json:"ЗагруженИзУЮП,omitempty"`
	Goods                         *[]DocumentPeredachaMaterialovVProizvodstvoTovaryRowType `json:"Товары,omitempty"`
	DokumentOsnovanieType         *String                                                  `json:"ДокументОснование_Type,omitempty"`
}

func (DocumentPeredachaMaterialovVProizvodstvo) APIEntityType() string {
	return "Document_ПередачаМатериаловВПроизводство"
}
func NewDocumentPeredachaMaterialovVProizvodstvo(data string, prevError error) (*DocumentPeredachaMaterialovVProizvodstvo, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPeredachaMaterialovVProizvodstvo)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPeredachaMaterialovVProizvodstvo(entity DocumentPeredachaMaterialovVProizvodstvo) (*DocumentPeredachaMaterialovVProizvodstvo, error) {
	return NewDocumentPeredachaMaterialovVProizvodstvo(c.createEntity(entity))
}
func (c *Client) DocumentPeredachaMaterialovVProizvodstvo(key PrimaryDocumentPeredachaMaterialovVProizvodstvo, fields []string) (*DocumentPeredachaMaterialovVProizvodstvo, error) {
	return NewDocumentPeredachaMaterialovVProizvodstvo(c.getEntity(key, fields))
}
func (c *Client) DocumentPeredachaMaterialovVProizvodstvos(where Where) (*[]DocumentPeredachaMaterialovVProizvodstvo, error) {
	type ReturnObj struct {
		Value []DocumentPeredachaMaterialovVProizvodstvo `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПередачаМатериаловВПроизводство", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPeredachaMaterialovVProizvodstvo(key PrimaryDocumentPeredachaMaterialovVProizvodstvo, entity DocumentPeredachaMaterialovVProizvodstvo) (*DocumentPeredachaMaterialovVProizvodstvo, error) {
	return NewDocumentPeredachaMaterialovVProizvodstvo(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPeredachaMaterialovVProizvodstvo(key PrimaryDocumentPeredachaMaterialovVProizvodstvo) error {
	return c.removeEntity(key)
}

type DocumentPeredachaMaterialovVProizvodstvoTovary struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	Weight                         *Double `json:"Вес,omitempty"`
	Quantity                       *Int64  `json:"Количество,omitempty"`
	ItemKey                        *Guid   `json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid   `json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	DepartmentKey                  *Guid   `json:"Склад_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
}

func (DocumentPeredachaMaterialovVProizvodstvoTovary) APIEntityType() string {
	return "Document_ПередачаМатериаловВПроизводство_Товары"
}
func NewDocumentPeredachaMaterialovVProizvodstvoTovary(data string, prevError error) (*DocumentPeredachaMaterialovVProizvodstvoTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPeredachaMaterialovVProizvodstvoTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPeredachaMaterialovVProizvodstvoTovary(entity DocumentPeredachaMaterialovVProizvodstvoTovary) (*DocumentPeredachaMaterialovVProizvodstvoTovary, error) {
	return NewDocumentPeredachaMaterialovVProizvodstvoTovary(c.createEntity(entity))
}
func (c *Client) DocumentPeredachaMaterialovVProizvodstvoTovary(key PrimaryDocumentPeredachaMaterialovVProizvodstvoTovary, fields []string) (*DocumentPeredachaMaterialovVProizvodstvoTovary, error) {
	return NewDocumentPeredachaMaterialovVProizvodstvoTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentPeredachaMaterialovVProizvodstvoTovarys(where Where) (*[]DocumentPeredachaMaterialovVProizvodstvoTovary, error) {
	type ReturnObj struct {
		Value []DocumentPeredachaMaterialovVProizvodstvoTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПередачаМатериаловВПроизводство_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPeredachaMaterialovVProizvodstvoTovary(key PrimaryDocumentPeredachaMaterialovVProizvodstvoTovary, entity DocumentPeredachaMaterialovVProizvodstvoTovary) (*DocumentPeredachaMaterialovVProizvodstvoTovary, error) {
	return NewDocumentPeredachaMaterialovVProizvodstvoTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPeredachaMaterialovVProizvodstvoTovary(key PrimaryDocumentPeredachaMaterialovVProizvodstvoTovary) error {
	return c.removeEntity(key)
}

type DocumentVnutrenniiZakaz struct {
	Key                   Guid                                    `json:"Ref_Key,omitempty"`
	DataVersion           *String                                 `json:"DataVersion,omitempty"`
	Number                *String                                 `json:"Number,omitempty"`
	Date                  *DateTime                               `json:"Date,omitempty"`
	DeletionMark          *Boolean                                `json:"DeletionMark,omitempty"`
	Posted                *Boolean                                `json:"Posted,omitempty"`
	AvtoRazmeshchenie     *Boolean                                `json:"АвтоРазмещение,omitempty"`
	AvtoRezervirovanie    *Boolean                                `json:"АвтоРезервирование,omitempty"`
	VidZakaza             *String                                 `json:"ВидЗаказа,omitempty"`
	VremiaNapominaniia    *DateTime                               `json:"ВремяНапоминания,omitempty"`
	DataOtgruzki          *DateTime                               `json:"ДатаОтгрузки,omitempty"`
	DokumentOsnovanie     *String                                 `json:"ДокументОснование,omitempty"`
	Zakazchik             *String                                 `json:"Заказчик,omitempty"`
	Comment               *String                                 `json:"Комментарий,omitempty"`
	NapomnitOSobytii      *Boolean                                `json:"НапомнитьОСобытии,omitempty"`
	OrganizatsiiaKey      *Guid                                   `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey      *Guid                                   `json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey      *Guid                                   `json:"Подразделение_Key,omitempty"`
	TipDokumenta          *String                                 `json:"ТипДокумента,omitempty"`
	Goods                 *[]DocumentVnutrenniiZakazTovaryRowType `json:"Товары,omitempty"`
	DokumentOsnovanieType *String                                 `json:"ДокументОснование_Type,omitempty"`
	ZakazchikType         *String                                 `json:"Заказчик_Type,omitempty"`
}

func (DocumentVnutrenniiZakaz) APIEntityType() string {
	return "Document_ВнутреннийЗаказ"
}
func NewDocumentVnutrenniiZakaz(data string, prevError error) (*DocumentVnutrenniiZakaz, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentVnutrenniiZakaz)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentVnutrenniiZakaz(entity DocumentVnutrenniiZakaz) (*DocumentVnutrenniiZakaz, error) {
	return NewDocumentVnutrenniiZakaz(c.createEntity(entity))
}
func (c *Client) DocumentVnutrenniiZakaz(key PrimaryDocumentVnutrenniiZakaz, fields []string) (*DocumentVnutrenniiZakaz, error) {
	return NewDocumentVnutrenniiZakaz(c.getEntity(key, fields))
}
func (c *Client) DocumentVnutrenniiZakazs(where Where) (*[]DocumentVnutrenniiZakaz, error) {
	type ReturnObj struct {
		Value []DocumentVnutrenniiZakaz `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВнутреннийЗаказ", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentVnutrenniiZakaz(key PrimaryDocumentVnutrenniiZakaz, entity DocumentVnutrenniiZakaz) (*DocumentVnutrenniiZakaz, error) {
	return NewDocumentVnutrenniiZakaz(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentVnutrenniiZakaz(key PrimaryDocumentVnutrenniiZakaz) error {
	return c.removeEntity(key)
}

type DocumentVnutrenniiZakazTovary struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	Weight                         *Double `json:"Вес,omitempty"`
	KachestvoKey                   *Guid   `json:"Качество_Key,omitempty"`
	Quantity                       *Int64  `json:"Количество,omitempty"`
	ItemKey                        *Guid   `json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid   `json:"Размер_Key,omitempty"`
	RazmeshchenieKey               *Guid   `json:"Размещение_Key,omitempty"`
	InstanceKey                    *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
}

func (DocumentVnutrenniiZakazTovary) APIEntityType() string {
	return "Document_ВнутреннийЗаказ_Товары"
}
func NewDocumentVnutrenniiZakazTovary(data string, prevError error) (*DocumentVnutrenniiZakazTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentVnutrenniiZakazTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentVnutrenniiZakazTovary(entity DocumentVnutrenniiZakazTovary) (*DocumentVnutrenniiZakazTovary, error) {
	return NewDocumentVnutrenniiZakazTovary(c.createEntity(entity))
}
func (c *Client) DocumentVnutrenniiZakazTovary(key PrimaryDocumentVnutrenniiZakazTovary, fields []string) (*DocumentVnutrenniiZakazTovary, error) {
	return NewDocumentVnutrenniiZakazTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentVnutrenniiZakazTovarys(where Where) (*[]DocumentVnutrenniiZakazTovary, error) {
	type ReturnObj struct {
		Value []DocumentVnutrenniiZakazTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВнутреннийЗаказ_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentVnutrenniiZakazTovary(key PrimaryDocumentVnutrenniiZakazTovary, entity DocumentVnutrenniiZakazTovary) (*DocumentVnutrenniiZakazTovary, error) {
	return NewDocumentVnutrenniiZakazTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentVnutrenniiZakazTovary(key PrimaryDocumentVnutrenniiZakazTovary) error {
	return c.removeEntity(key)
}

type CatalogKhranilishcheDopolnitelnoiInformatsii struct {
	Key                            Guid     `json:"Ref_Key,omitempty"`
	DataVersion                    *String  `json:"DataVersion,omitempty"`
	Description                    *String  `json:"Description,omitempty"`
	DeletionMark                   *Boolean `json:"DeletionMark,omitempty"`
	VidDannykh                     *String  `json:"ВидДанных,omitempty"`
	ZnachenieRazdeleniiaDostupaKey *Guid    `json:"ЗначениеРазделенияДоступа_Key,omitempty"`
	IDFailaPochtovogoPisma         *String  `json:"ИДФайлаПочтовогоПисьма,omitempty"`
	ImiaFaila                      *String  `json:"ИмяФайла,omitempty"`
	Obieekt                        *String  `json:"Объект,omitempty"`
	KhranilishcheBase64Data        *Binary  `json:"Хранилище_Base64Data,omitempty"`
	VygruzhatNaSait                *Boolean `json:"ВыгружатьНаСайт,omitempty"`
	ObieektType                    *String  `json:"Объект_Type,omitempty"`
	KhranilishcheType              *String  `json:"Хранилище_Type,omitempty"`
	Khranilishche                  *Stream  `json:"Хранилище,omitempty"`
}

func (CatalogKhranilishcheDopolnitelnoiInformatsii) APIEntityType() string {
	return "Catalog_ХранилищеДополнительнойИнформации"
}
func NewCatalogKhranilishcheDopolnitelnoiInformatsii(data string, prevError error) (*CatalogKhranilishcheDopolnitelnoiInformatsii, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogKhranilishcheDopolnitelnoiInformatsii)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogKhranilishcheDopolnitelnoiInformatsii(entity CatalogKhranilishcheDopolnitelnoiInformatsii) (*CatalogKhranilishcheDopolnitelnoiInformatsii, error) {
	return NewCatalogKhranilishcheDopolnitelnoiInformatsii(c.createEntity(entity))
}
func (c *Client) CatalogKhranilishcheDopolnitelnoiInformatsii(key PrimaryCatalogKhranilishcheDopolnitelnoiInformatsii, fields []string) (*CatalogKhranilishcheDopolnitelnoiInformatsii, error) {
	return NewCatalogKhranilishcheDopolnitelnoiInformatsii(c.getEntity(key, fields))
}
func (c *Client) CatalogKhranilishcheDopolnitelnoiInformatsiis(where Where) (*[]CatalogKhranilishcheDopolnitelnoiInformatsii, error) {
	type ReturnObj struct {
		Value []CatalogKhranilishcheDopolnitelnoiInformatsii `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ХранилищеДополнительнойИнформации", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogKhranilishcheDopolnitelnoiInformatsii(key PrimaryCatalogKhranilishcheDopolnitelnoiInformatsii, entity CatalogKhranilishcheDopolnitelnoiInformatsii) (*CatalogKhranilishcheDopolnitelnoiInformatsii, error) {
	return NewCatalogKhranilishcheDopolnitelnoiInformatsii(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogKhranilishcheDopolnitelnoiInformatsii(key PrimaryCatalogKhranilishcheDopolnitelnoiInformatsii) error {
	return c.removeEntity(key)
}

type CatalogDopolnitelnyeVneshnieObrabotki struct {
	Key                                      Guid                                                          `json:"Ref_Key,omitempty"`
	DataVersion                              *String                                                       `json:"DataVersion,omitempty"`
	Description                              *String                                                       `json:"Description,omitempty"`
	ParentKey                                *Guid                                                         `json:"Parent_Key,omitempty"`
	IsFolder                                 *Boolean                                                      `json:"IsFolder,omitempty"`
	DeletionMark                             *Boolean                                                      `json:"DeletionMark,omitempty"`
	VidObrabotki                             *String                                                       `json:"ВидОбработки,omitempty"`
	Comment                                  *String                                                       `json:"Комментарий,omitempty"`
	KommentariiKFailuIstochniku              *String                                                       `json:"КомментарийКФайлуИсточнику,omitempty"`
	KhranilishcheVneshneiObrabotkiBase64Data *Binary                                                       `json:"ХранилищеВнешнейОбработки_Base64Data,omitempty"`
	BezopasnyiRezhim                         *Boolean                                                      `json:"БезопасныйРежим,omitempty"`
	Versiia                                  *String                                                       `json:"Версия,omitempty"`
	ImiaObieekta                             *String                                                       `json:"ИмяОбъекта,omitempty"`
	ImiaFaila                                *String                                                       `json:"ИмяФайла,omitempty"`
	Informatsiia                             *String                                                       `json:"Информация,omitempty"`
	IspolzovatDliaFormyObieekta              *Boolean                                                      `json:"ИспользоватьДляФормыОбъекта,omitempty"`
	IspolzovatDliaFormySpiska                *Boolean                                                      `json:"ИспользоватьДляФормыСписка,omitempty"`
	Publikatsiia                             *String                                                       `json:"Публикация,omitempty"`
	KhranilishcheNastroekBase64Data          *Binary                                                       `json:"ХранилищеНастроек_Base64Data,omitempty"`
	OtvetstvennyiKey                         *Guid                                                         `json:"Ответственный_Key,omitempty"`
	IspolzuetKhranilishcheVariantov          *Boolean                                                      `json:"ИспользуетХранилищеВариантов,omitempty"`
	Prinadlezhnost                           *[]CatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnostRowType `json:"Принадлежность,omitempty"`
	Komandy                                  *[]CatalogDopolnitelnyeVneshnieObrabotkiKomandyRowType        `json:"Команды,omitempty"`
	Razdely                                  *[]CatalogDopolnitelnyeVneshnieObrabotkiRazdelyRowType        `json:"Разделы,omitempty"`
	Naznachenie                              *[]CatalogDopolnitelnyeVneshnieObrabotkiNaznachenieRowType    `json:"Назначение,omitempty"`
	Razresheniia                             *[]CatalogDopolnitelnyeVneshnieObrabotkiRazresheniiaRowType   `json:"Разрешения,omitempty"`
	KhranilishcheVneshneiObrabotkiType       *String                                                       `json:"ХранилищеВнешнейОбработки_Type,omitempty"`
	KhranilishcheNastroekType                *String                                                       `json:"ХранилищеНастроек_Type,omitempty"`
	KhranilishcheVneshneiObrabotki           *Stream                                                       `json:"ХранилищеВнешнейОбработки,omitempty"`
	KhranilishcheNastroek                    *Stream                                                       `json:"ХранилищеНастроек,omitempty"`
}

func (CatalogDopolnitelnyeVneshnieObrabotki) APIEntityType() string {
	return "Catalog_ДополнительныеВнешниеОбработки"
}
func NewCatalogDopolnitelnyeVneshnieObrabotki(data string, prevError error) (*CatalogDopolnitelnyeVneshnieObrabotki, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogDopolnitelnyeVneshnieObrabotki)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogDopolnitelnyeVneshnieObrabotki(entity CatalogDopolnitelnyeVneshnieObrabotki) (*CatalogDopolnitelnyeVneshnieObrabotki, error) {
	return NewCatalogDopolnitelnyeVneshnieObrabotki(c.createEntity(entity))
}
func (c *Client) CatalogDopolnitelnyeVneshnieObrabotki(key PrimaryCatalogDopolnitelnyeVneshnieObrabotki, fields []string) (*CatalogDopolnitelnyeVneshnieObrabotki, error) {
	return NewCatalogDopolnitelnyeVneshnieObrabotki(c.getEntity(key, fields))
}
func (c *Client) CatalogDopolnitelnyeVneshnieObrabotkis(where Where) (*[]CatalogDopolnitelnyeVneshnieObrabotki, error) {
	type ReturnObj struct {
		Value []CatalogDopolnitelnyeVneshnieObrabotki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ДополнительныеВнешниеОбработки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogDopolnitelnyeVneshnieObrabotki(key PrimaryCatalogDopolnitelnyeVneshnieObrabotki, entity CatalogDopolnitelnyeVneshnieObrabotki) (*CatalogDopolnitelnyeVneshnieObrabotki, error) {
	return NewCatalogDopolnitelnyeVneshnieObrabotki(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogDopolnitelnyeVneshnieObrabotki(key PrimaryCatalogDopolnitelnyeVneshnieObrabotki) error {
	return c.removeEntity(key)
}

type CatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnost struct {
	Key                                       Guid    `json:"Ref_Key,omitempty"`
	LineNumber                                Int64   `json:"LineNumber,omitempty"`
	DopolnitelnyeParametryObrabotkiBase64Data *Binary `json:"ДополнительныеПараметрыОбработки_Base64Data,omitempty"`
	PredstavlenieKnopki                       *String `json:"ПредставлениеКнопки,omitempty"`
	PredstavlenieNastroekObrabotki            *String `json:"ПредставлениеНастроекОбработки,omitempty"`
	PredstavlenieObieekta                     *String `json:"ПредставлениеОбъекта,omitempty"`
	SsylkaObieekta                            *String `json:"СсылкаОбъекта,omitempty"`
	TablichnaiaChastImia                      *String `json:"ТабличнаяЧастьИмя,omitempty"`
	TablichnaiaChastPredstavlenie             *String `json:"ТабличнаяЧастьПредставление,omitempty"`
	KhranilishcheVneshneiObrabotkiBase64Data  *Binary `json:"ХранилищеВнешнейОбработки_Base64Data,omitempty"`
	DopolnitelnyeParametryObrabotkiType       *String `json:"ДополнительныеПараметрыОбработки_Type,omitempty"`
	SsylkaObieektaType                        *String `json:"СсылкаОбъекта_Type,omitempty"`
	KhranilishcheVneshneiObrabotkiType        *String `json:"ХранилищеВнешнейОбработки_Type,omitempty"`
	DopolnitelnyeParametryObrabotki           *Stream `json:"ДополнительныеПараметрыОбработки,omitempty"`
	KhranilishcheVneshneiObrabotki            *Stream `json:"ХранилищеВнешнейОбработки,omitempty"`
}

func (CatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnost) APIEntityType() string {
	return "Catalog_ДополнительныеВнешниеОбработки_Принадлежность"
}
func NewCatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnost(data string, prevError error) (*CatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnost, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnost)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnost(entity CatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnost) (*CatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnost, error) {
	return NewCatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnost(c.createEntity(entity))
}
func (c *Client) CatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnost(key PrimaryCatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnost, fields []string) (*CatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnost, error) {
	return NewCatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnost(c.getEntity(key, fields))
}
func (c *Client) CatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnosts(where Where) (*[]CatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnost, error) {
	type ReturnObj struct {
		Value []CatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnost `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ДополнительныеВнешниеОбработки_Принадлежность", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnost(key PrimaryCatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnost, entity CatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnost) (*CatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnost, error) {
	return NewCatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnost(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnost(key PrimaryCatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnost) error {
	return c.removeEntity(key)
}

type CatalogDopolnitelnyeVneshnieObrabotkiKomandy struct {
	Key                     Guid     `json:"Ref_Key,omitempty"`
	LineNumber              Int64    `json:"LineNumber,omitempty"`
	Identifikator           *String  `json:"Идентификатор,omitempty"`
	VariantZapuska          *String  `json:"ВариантЗапуска,omitempty"`
	Predstavlenie           *String  `json:"Представление,omitempty"`
	PokazyvatOpoveshchenie  *Boolean `json:"ПоказыватьОповещение,omitempty"`
	Modifikator             *String  `json:"Модификатор,omitempty"`
	ReglamentnoeZadanieGUID *Guid    `json:"РегламентноеЗаданиеGUID,omitempty"`
	Skryt                   *Boolean `json:"Скрыть,omitempty"`
	ZameniaemyeKomandy      *String  `json:"ЗаменяемыеКоманды,omitempty"`
}

func (CatalogDopolnitelnyeVneshnieObrabotkiKomandy) APIEntityType() string {
	return "Catalog_ДополнительныеВнешниеОбработки_Команды"
}
func NewCatalogDopolnitelnyeVneshnieObrabotkiKomandy(data string, prevError error) (*CatalogDopolnitelnyeVneshnieObrabotkiKomandy, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogDopolnitelnyeVneshnieObrabotkiKomandy)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogDopolnitelnyeVneshnieObrabotkiKomandy(entity CatalogDopolnitelnyeVneshnieObrabotkiKomandy) (*CatalogDopolnitelnyeVneshnieObrabotkiKomandy, error) {
	return NewCatalogDopolnitelnyeVneshnieObrabotkiKomandy(c.createEntity(entity))
}
func (c *Client) CatalogDopolnitelnyeVneshnieObrabotkiKomandy(key PrimaryCatalogDopolnitelnyeVneshnieObrabotkiKomandy, fields []string) (*CatalogDopolnitelnyeVneshnieObrabotkiKomandy, error) {
	return NewCatalogDopolnitelnyeVneshnieObrabotkiKomandy(c.getEntity(key, fields))
}
func (c *Client) CatalogDopolnitelnyeVneshnieObrabotkiKomandys(where Where) (*[]CatalogDopolnitelnyeVneshnieObrabotkiKomandy, error) {
	type ReturnObj struct {
		Value []CatalogDopolnitelnyeVneshnieObrabotkiKomandy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ДополнительныеВнешниеОбработки_Команды", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogDopolnitelnyeVneshnieObrabotkiKomandy(key PrimaryCatalogDopolnitelnyeVneshnieObrabotkiKomandy, entity CatalogDopolnitelnyeVneshnieObrabotkiKomandy) (*CatalogDopolnitelnyeVneshnieObrabotkiKomandy, error) {
	return NewCatalogDopolnitelnyeVneshnieObrabotkiKomandy(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogDopolnitelnyeVneshnieObrabotkiKomandy(key PrimaryCatalogDopolnitelnyeVneshnieObrabotkiKomandy) error {
	return c.removeEntity(key)
}

type CatalogDopolnitelnyeVneshnieObrabotkiRazdely struct {
	Key               Guid    `json:"Ref_Key,omitempty"`
	LineNumber        Int64   `json:"LineNumber,omitempty"`
	RazdelKey         *Guid   `json:"Раздел_Key,omitempty"`
	UdalitImiaRazdela *String `json:"УдалитьИмяРаздела,omitempty"`
}

func (CatalogDopolnitelnyeVneshnieObrabotkiRazdely) APIEntityType() string {
	return "Catalog_ДополнительныеВнешниеОбработки_Разделы"
}
func NewCatalogDopolnitelnyeVneshnieObrabotkiRazdely(data string, prevError error) (*CatalogDopolnitelnyeVneshnieObrabotkiRazdely, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogDopolnitelnyeVneshnieObrabotkiRazdely)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogDopolnitelnyeVneshnieObrabotkiRazdely(entity CatalogDopolnitelnyeVneshnieObrabotkiRazdely) (*CatalogDopolnitelnyeVneshnieObrabotkiRazdely, error) {
	return NewCatalogDopolnitelnyeVneshnieObrabotkiRazdely(c.createEntity(entity))
}
func (c *Client) CatalogDopolnitelnyeVneshnieObrabotkiRazdely(key PrimaryCatalogDopolnitelnyeVneshnieObrabotkiRazdely, fields []string) (*CatalogDopolnitelnyeVneshnieObrabotkiRazdely, error) {
	return NewCatalogDopolnitelnyeVneshnieObrabotkiRazdely(c.getEntity(key, fields))
}
func (c *Client) CatalogDopolnitelnyeVneshnieObrabotkiRazdelys(where Where) (*[]CatalogDopolnitelnyeVneshnieObrabotkiRazdely, error) {
	type ReturnObj struct {
		Value []CatalogDopolnitelnyeVneshnieObrabotkiRazdely `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ДополнительныеВнешниеОбработки_Разделы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogDopolnitelnyeVneshnieObrabotkiRazdely(key PrimaryCatalogDopolnitelnyeVneshnieObrabotkiRazdely, entity CatalogDopolnitelnyeVneshnieObrabotkiRazdely) (*CatalogDopolnitelnyeVneshnieObrabotkiRazdely, error) {
	return NewCatalogDopolnitelnyeVneshnieObrabotkiRazdely(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogDopolnitelnyeVneshnieObrabotkiRazdely(key PrimaryCatalogDopolnitelnyeVneshnieObrabotkiRazdely) error {
	return c.removeEntity(key)
}

type CatalogDopolnitelnyeVneshnieObrabotkiNaznachenie struct {
	Key                                 Guid    `json:"Ref_Key,omitempty"`
	LineNumber                          Int64   `json:"LineNumber,omitempty"`
	ObieektNaznacheniiaKey              *Guid   `json:"ОбъектНазначения_Key,omitempty"`
	UdalitPolnoeImiaObieektaMetadannykh *String `json:"УдалитьПолноеИмяОбъектаМетаданных,omitempty"`
}

func (CatalogDopolnitelnyeVneshnieObrabotkiNaznachenie) APIEntityType() string {
	return "Catalog_ДополнительныеВнешниеОбработки_Назначение"
}
func NewCatalogDopolnitelnyeVneshnieObrabotkiNaznachenie(data string, prevError error) (*CatalogDopolnitelnyeVneshnieObrabotkiNaznachenie, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogDopolnitelnyeVneshnieObrabotkiNaznachenie)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogDopolnitelnyeVneshnieObrabotkiNaznachenie(entity CatalogDopolnitelnyeVneshnieObrabotkiNaznachenie) (*CatalogDopolnitelnyeVneshnieObrabotkiNaznachenie, error) {
	return NewCatalogDopolnitelnyeVneshnieObrabotkiNaznachenie(c.createEntity(entity))
}
func (c *Client) CatalogDopolnitelnyeVneshnieObrabotkiNaznachenie(key PrimaryCatalogDopolnitelnyeVneshnieObrabotkiNaznachenie, fields []string) (*CatalogDopolnitelnyeVneshnieObrabotkiNaznachenie, error) {
	return NewCatalogDopolnitelnyeVneshnieObrabotkiNaznachenie(c.getEntity(key, fields))
}
func (c *Client) CatalogDopolnitelnyeVneshnieObrabotkiNaznachenies(where Where) (*[]CatalogDopolnitelnyeVneshnieObrabotkiNaznachenie, error) {
	type ReturnObj struct {
		Value []CatalogDopolnitelnyeVneshnieObrabotkiNaznachenie `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ДополнительныеВнешниеОбработки_Назначение", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogDopolnitelnyeVneshnieObrabotkiNaznachenie(key PrimaryCatalogDopolnitelnyeVneshnieObrabotkiNaznachenie, entity CatalogDopolnitelnyeVneshnieObrabotkiNaznachenie) (*CatalogDopolnitelnyeVneshnieObrabotkiNaznachenie, error) {
	return NewCatalogDopolnitelnyeVneshnieObrabotkiNaznachenie(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogDopolnitelnyeVneshnieObrabotkiNaznachenie(key PrimaryCatalogDopolnitelnyeVneshnieObrabotkiNaznachenie) error {
	return c.removeEntity(key)
}

type CatalogDopolnitelnyeVneshnieObrabotkiRazresheniia struct {
	Key                 Guid    `json:"Ref_Key,omitempty"`
	LineNumber          Int64   `json:"LineNumber,omitempty"`
	VidRazresheniia     *String `json:"ВидРазрешения,omitempty"`
	ParametryBase64Data *Binary `json:"Параметры_Base64Data,omitempty"`
	ParametryType       *String `json:"Параметры_Type,omitempty"`
	Parametry           *Stream `json:"Параметры,omitempty"`
}

func (CatalogDopolnitelnyeVneshnieObrabotkiRazresheniia) APIEntityType() string {
	return "Catalog_ДополнительныеВнешниеОбработки_Разрешения"
}
func NewCatalogDopolnitelnyeVneshnieObrabotkiRazresheniia(data string, prevError error) (*CatalogDopolnitelnyeVneshnieObrabotkiRazresheniia, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogDopolnitelnyeVneshnieObrabotkiRazresheniia)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogDopolnitelnyeVneshnieObrabotkiRazresheniia(entity CatalogDopolnitelnyeVneshnieObrabotkiRazresheniia) (*CatalogDopolnitelnyeVneshnieObrabotkiRazresheniia, error) {
	return NewCatalogDopolnitelnyeVneshnieObrabotkiRazresheniia(c.createEntity(entity))
}
func (c *Client) CatalogDopolnitelnyeVneshnieObrabotkiRazresheniia(key PrimaryCatalogDopolnitelnyeVneshnieObrabotkiRazresheniia, fields []string) (*CatalogDopolnitelnyeVneshnieObrabotkiRazresheniia, error) {
	return NewCatalogDopolnitelnyeVneshnieObrabotkiRazresheniia(c.getEntity(key, fields))
}
func (c *Client) CatalogDopolnitelnyeVneshnieObrabotkiRazresheniias(where Where) (*[]CatalogDopolnitelnyeVneshnieObrabotkiRazresheniia, error) {
	type ReturnObj struct {
		Value []CatalogDopolnitelnyeVneshnieObrabotkiRazresheniia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ДополнительныеВнешниеОбработки_Разрешения", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogDopolnitelnyeVneshnieObrabotkiRazresheniia(key PrimaryCatalogDopolnitelnyeVneshnieObrabotkiRazresheniia, entity CatalogDopolnitelnyeVneshnieObrabotkiRazresheniia) (*CatalogDopolnitelnyeVneshnieObrabotkiRazresheniia, error) {
	return NewCatalogDopolnitelnyeVneshnieObrabotkiRazresheniia(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogDopolnitelnyeVneshnieObrabotkiRazresheniia(key PrimaryCatalogDopolnitelnyeVneshnieObrabotkiRazresheniia) error {
	return c.removeEntity(key)
}

type CatalogGruppyPolzovatelei struct {
	Key                    Guid                                                 `json:"Ref_Key,omitempty"`
	DataVersion            *String                                              `json:"DataVersion,omitempty"`
	Description            *String                                              `json:"Description,omitempty"`
	Code                   *String                                              `json:"Code,omitempty"`
	DeletionMark           *Boolean                                             `json:"DeletionMark,omitempty"`
	AdministratorGruppyKey *Guid                                                `json:"АдминистраторГруппы_Key,omitempty"`
	PolzovateliGruppy      *[]CatalogGruppyPolzovateleiPolzovateliGruppyRowType `json:"ПользователиГруппы,omitempty"`
}

func (CatalogGruppyPolzovatelei) APIEntityType() string {
	return "Catalog_ГруппыПользователей"
}
func NewCatalogGruppyPolzovatelei(data string, prevError error) (*CatalogGruppyPolzovatelei, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogGruppyPolzovatelei)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogGruppyPolzovatelei(entity CatalogGruppyPolzovatelei) (*CatalogGruppyPolzovatelei, error) {
	return NewCatalogGruppyPolzovatelei(c.createEntity(entity))
}
func (c *Client) CatalogGruppyPolzovatelei(key PrimaryCatalogGruppyPolzovatelei, fields []string) (*CatalogGruppyPolzovatelei, error) {
	return NewCatalogGruppyPolzovatelei(c.getEntity(key, fields))
}
func (c *Client) CatalogGruppyPolzovateleis(where Where) (*[]CatalogGruppyPolzovatelei, error) {
	type ReturnObj struct {
		Value []CatalogGruppyPolzovatelei `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ГруппыПользователей", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogGruppyPolzovatelei(key PrimaryCatalogGruppyPolzovatelei, entity CatalogGruppyPolzovatelei) (*CatalogGruppyPolzovatelei, error) {
	return NewCatalogGruppyPolzovatelei(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogGruppyPolzovatelei(key PrimaryCatalogGruppyPolzovatelei) error {
	return c.removeEntity(key)
}

type CatalogGruppyPolzovateleiPolzovateliGruppy struct {
	Key           Guid  `json:"Ref_Key,omitempty"`
	LineNumber    Int64 `json:"LineNumber,omitempty"`
	PolzovatelKey *Guid `json:"Пользователь_Key,omitempty"`
}

func (CatalogGruppyPolzovateleiPolzovateliGruppy) APIEntityType() string {
	return "Catalog_ГруппыПользователей_ПользователиГруппы"
}
func NewCatalogGruppyPolzovateleiPolzovateliGruppy(data string, prevError error) (*CatalogGruppyPolzovateleiPolzovateliGruppy, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogGruppyPolzovateleiPolzovateliGruppy)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogGruppyPolzovateleiPolzovateliGruppy(entity CatalogGruppyPolzovateleiPolzovateliGruppy) (*CatalogGruppyPolzovateleiPolzovateliGruppy, error) {
	return NewCatalogGruppyPolzovateleiPolzovateliGruppy(c.createEntity(entity))
}
func (c *Client) CatalogGruppyPolzovateleiPolzovateliGruppy(key PrimaryCatalogGruppyPolzovateleiPolzovateliGruppy, fields []string) (*CatalogGruppyPolzovateleiPolzovateliGruppy, error) {
	return NewCatalogGruppyPolzovateleiPolzovateliGruppy(c.getEntity(key, fields))
}
func (c *Client) CatalogGruppyPolzovateleiPolzovateliGruppys(where Where) (*[]CatalogGruppyPolzovateleiPolzovateliGruppy, error) {
	type ReturnObj struct {
		Value []CatalogGruppyPolzovateleiPolzovateliGruppy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ГруппыПользователей_ПользователиГруппы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogGruppyPolzovateleiPolzovateliGruppy(key PrimaryCatalogGruppyPolzovateleiPolzovateliGruppy, entity CatalogGruppyPolzovateleiPolzovateliGruppy) (*CatalogGruppyPolzovateleiPolzovateliGruppy, error) {
	return NewCatalogGruppyPolzovateleiPolzovateliGruppy(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogGruppyPolzovateleiPolzovateliGruppy(key PrimaryCatalogGruppyPolzovateleiPolzovateliGruppy) error {
	return c.removeEntity(key)
}

type DocumentJournalZakazyKlientov struct {
	Ref              String    `json:"Ref,omitempty"`
	Type             *String   `json:"Type,omitempty"`
	Date             *DateTime `json:"Date,omitempty"`
	DeletionMark     *Boolean  `json:"DeletionMark,omitempty"`
	Number           *String   `json:"Number,omitempty"`
	Posted           *Boolean  `json:"Posted,omitempty"`
	ValiutaKey       *Guid     `json:"Валюта_Key,omitempty"`
	DataOplaty       *DateTime `json:"ДатаОплаты,omitempty"`
	DataOtgruzki     *DateTime `json:"ДатаОтгрузки,omitempty"`
	InformatsiiaKey  *Guid     `json:"Информация_Key,omitempty"`
	Comment          *String   `json:"Комментарий,omitempty"`
	OrganizatsiiaKey *Guid     `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey *Guid     `json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey *Guid     `json:"Подразделение_Key,omitempty"`
	Sum              *Double   `json:"Сумма,omitempty"`
	RefType          String    `json:"Ref_Type,omitempty"`
}

func (DocumentJournalZakazyKlientov) APIEntityType() string {
	return "DocumentJournal_ЗаказыКлиентов"
}
func NewDocumentJournalZakazyKlientov(data string, prevError error) (*DocumentJournalZakazyKlientov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentJournalZakazyKlientov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentJournalZakazyKlientov(entity DocumentJournalZakazyKlientov) (*DocumentJournalZakazyKlientov, error) {
	return NewDocumentJournalZakazyKlientov(c.createEntity(entity))
}
func (c *Client) DocumentJournalZakazyKlientov(key PrimaryDocumentJournalZakazyKlientov, fields []string) (*DocumentJournalZakazyKlientov, error) {
	return NewDocumentJournalZakazyKlientov(c.getEntity(key, fields))
}
func (c *Client) DocumentJournalZakazyKlientovs(where Where) (*[]DocumentJournalZakazyKlientov, error) {
	type ReturnObj struct {
		Value []DocumentJournalZakazyKlientov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("DocumentJournal_ЗаказыКлиентов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentJournalZakazyKlientov(key PrimaryDocumentJournalZakazyKlientov, entity DocumentJournalZakazyKlientov) (*DocumentJournalZakazyKlientov, error) {
	return NewDocumentJournalZakazyKlientov(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentJournalZakazyKlientov(key PrimaryDocumentJournalZakazyKlientov) error {
	return c.removeEntity(key)
}

type DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochki struct {
	Key                                              Guid                                                                                    `json:"Ref_Key,omitempty"`
	DataVersion                                      *String                                                                                 `json:"DataVersion,omitempty"`
	Number                                           *String                                                                                 `json:"Number,omitempty"`
	Date                                             *DateTime                                                                               `json:"Date,omitempty"`
	DeletionMark                                     *Boolean                                                                                `json:"DeletionMark,omitempty"`
	Posted                                           *Boolean                                                                                `json:"Posted,omitempty"`
	BankovskiiSchetOrganizatsiiKey                   *Guid                                                                                   `json:"БанковскийСчетОрганизации_Key,omitempty"`
	ValiutaDokumentaKey                              *Guid                                                                                   `json:"ВалютаДокумента_Key,omitempty"`
	Weight                                           *Double                                                                                 `json:"ВесДокумента,omitempty"`
	GruzootpravitelKey                               *Guid                                                                                   `json:"Грузоотправитель_Key,omitempty"`
	GruzopoluchatelKey                               *Guid                                                                                   `json:"Грузополучатель_Key,omitempty"`
	DogovorKontragentaKey                            *Guid                                                                                   `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie                                *String                                                                                 `json:"ДокументОснование,omitempty"`
	DokumentSozdanVIuTD                              *Boolean                                                                                `json:"ДокументСозданВЮТД,omitempty"`
	KolichestvoDokumenta                             *Int64                                                                                  `json:"КоличествоДокумента,omitempty"`
	Comment                                          *String                                                                                 `json:"Комментарий,omitempty"`
	KontragentKey                                    *Guid                                                                                   `json:"Контрагент_Key,omitempty"`
	KratnostVzaimoraschetov                          *Int64                                                                                  `json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov                              *Double                                                                                 `json:"КурсВзаиморасчетов,omitempty"`
	NDSVkliuchenVStoimost                            *Boolean                                                                                `json:"НДСВключенВСтоимость,omitempty"`
	OpisanieDefektov                                 *String                                                                                 `json:"ОписаниеДефектов,omitempty"`
	OrganizatsiiaKey                                 *Guid                                                                                   `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                                 *Guid                                                                                   `json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey                                 *Guid                                                                                   `json:"Подразделение_Key,omitempty"`
	Sdelka                                           *String                                                                                 `json:"Сделка,omitempty"`
	DepartmentKey                                    *Guid                                                                                   `json:"Склад_Key,omitempty"`
	SummaVkliuchaetNDS                               *Boolean                                                                                `json:"СуммаВключаетНДС,omitempty"`
	SumOfDocument                                    *Double                                                                                 `json:"СуммаДокумента,omitempty"`
	TipDokumenta                                     *String                                                                                 `json:"ТипДокумента,omitempty"`
	TipTsenKey                                       *Guid                                                                                   `json:"ТипЦен_Key,omitempty"`
	UchityvatNDS                                     *Boolean                                                                                `json:"УчитыватьНДС,omitempty"`
	KhoziaistvennaiaOperatsiiaKey                    *Guid                                                                                   `json:"ХозяйственнаяОперация_Key,omitempty"`
	PostavshchikuVystavliaetsiaSchetFakturaNaVozvrat *Boolean                                                                                `json:"ПоставщикуВыставляетсяСчетФактураНаВозврат,omitempty"`
	Goods                                            *[]DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovaryRowType `json:"Товары,omitempty"`
	DokumentOsnovanieType                            *String                                                                                 `json:"ДокументОснование_Type,omitempty"`
	SdelkaType                                       *String                                                                                 `json:"Сделка_Type,omitempty"`
}

func (DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochki) APIEntityType() string {
	return "Document_ВозвратТоваровПоставщикуИзНеавтоматизированнойТорговойТочки"
}
func NewDocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochki(data string, prevError error) (*DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochki, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochki)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochki(entity DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochki) (*DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochki, error) {
	return NewDocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochki(c.createEntity(entity))
}
func (c *Client) DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochki(key PrimaryDocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochki, fields []string) (*DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochki, error) {
	return NewDocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochki(c.getEntity(key, fields))
}
func (c *Client) DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkis(where Where) (*[]DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochki, error) {
	type ReturnObj struct {
		Value []DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВозвратТоваровПоставщикуИзНеавтоматизированнойТорговойТочки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochki(key PrimaryDocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochki, entity DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochki) (*DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochki, error) {
	return NewDocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochki(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochki(key PrimaryDocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochki) error {
	return c.removeEntity(key)
}

type DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovary struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	Weight                         *Double `json:"Вес,omitempty"`
	DefektKey                      *Guid   `json:"Дефект_Key,omitempty"`
	DokumentPostupleniia           *String `json:"ДокументПоступления,omitempty"`
	Quantity                       *Int64  `json:"Количество,omitempty"`
	ItemKey                        *Guid   `json:"Номенклатура_Key,omitempty"`
	ProektKey                      *Guid   `json:"Проект_Key,omitempty"`
	SizeKey                        *Guid   `json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	StavkaNDS                      *String `json:"СтавкаНДС,omitempty"`
	Sum                            *Double `json:"Сумма,omitempty"`
	SummaNDS                       *Double `json:"СуммаНДС,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Double `json:"Цена,omitempty"`
	RetailCost                     *Double `json:"ЦенаВРознице,omitempty"`
	DokumentPostupleniiaType       *String `json:"ДокументПоступления_Type,omitempty"`
}

func (DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovary) APIEntityType() string {
	return "Document_ВозвратТоваровПоставщикуИзНеавтоматизированнойТорговойТочки_Товары"
}
func NewDocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovary(data string, prevError error) (*DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovary(entity DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovary) (*DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovary, error) {
	return NewDocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovary(c.createEntity(entity))
}
func (c *Client) DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovary(key PrimaryDocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovary, fields []string) (*DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovary, error) {
	return NewDocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovarys(where Where) (*[]DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovary, error) {
	type ReturnObj struct {
		Value []DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВозвратТоваровПоставщикуИзНеавтоматизированнойТорговойТочки_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovary(key PrimaryDocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovary, entity DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovary) (*DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovary, error) {
	return NewDocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovary(key PrimaryDocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovary) error {
	return c.removeEntity(key)
}

type DocumentZaiavkaNaPeremeshchenieTovarov struct {
	Key                    Guid                                                   `json:"Ref_Key,omitempty"`
	DataVersion            *String                                                `json:"DataVersion,omitempty"`
	Number                 *String                                                `json:"Number,omitempty"`
	Date                   *DateTime                                              `json:"Date,omitempty"`
	DeletionMark           *Boolean                                               `json:"DeletionMark,omitempty"`
	Posted                 *Boolean                                               `json:"Posted,omitempty"`
	Weight                 *Double                                                `json:"ВесДокумента,omitempty"`
	OperationType          *String                                                `json:"ВидОперации,omitempty"`
	DokumentSozdanVIuTD    *Boolean                                               `json:"ДокументСозданВЮТД,omitempty"`
	KolichestvoDokumenta   *Int64                                                 `json:"КоличествоДокумента,omitempty"`
	Comment                *String                                                `json:"Комментарий,omitempty"`
	OrganizatsiiaKey       *Guid                                                  `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey       *Guid                                                  `json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey       *Guid                                                  `json:"Подразделение_Key,omitempty"`
	SkladOtpravitelKey     *Guid                                                  `json:"СкладОтправитель_Key,omitempty"`
	SkladPoluchatelKey     *Guid                                                  `json:"СкладПолучатель_Key,omitempty"`
	SumOfDocument          *Double                                                `json:"СуммаДокумента,omitempty"`
	TipSkidkiNatsenkiKey   *Guid                                                  `json:"ТипСкидкиНаценки_Key,omitempty"`
	TipTsenKey             *Guid                                                  `json:"ТипЦен_Key,omitempty"`
	SposobDostavkiKey      *Guid                                                  `json:"СпособДоставки_Key,omitempty"`
	IspolzovatRezhimSverki *Boolean                                               `json:"ИспользоватьРежимСверки,omitempty"`
	Goods                  *[]DocumentZaiavkaNaPeremeshchenieTovarovTovaryRowType `json:"Товары,omitempty"`
}

func (DocumentZaiavkaNaPeremeshchenieTovarov) APIEntityType() string {
	return "Document_ЗаявкаНаПеремещениеТоваров"
}
func NewDocumentZaiavkaNaPeremeshchenieTovarov(data string, prevError error) (*DocumentZaiavkaNaPeremeshchenieTovarov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentZaiavkaNaPeremeshchenieTovarov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentZaiavkaNaPeremeshchenieTovarov(entity DocumentZaiavkaNaPeremeshchenieTovarov) (*DocumentZaiavkaNaPeremeshchenieTovarov, error) {
	return NewDocumentZaiavkaNaPeremeshchenieTovarov(c.createEntity(entity))
}
func (c *Client) DocumentZaiavkaNaPeremeshchenieTovarov(key PrimaryDocumentZaiavkaNaPeremeshchenieTovarov, fields []string) (*DocumentZaiavkaNaPeremeshchenieTovarov, error) {
	return NewDocumentZaiavkaNaPeremeshchenieTovarov(c.getEntity(key, fields))
}
func (c *Client) DocumentZaiavkaNaPeremeshchenieTovarovs(where Where) (*[]DocumentZaiavkaNaPeremeshchenieTovarov, error) {
	type ReturnObj struct {
		Value []DocumentZaiavkaNaPeremeshchenieTovarov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗаявкаНаПеремещениеТоваров", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentZaiavkaNaPeremeshchenieTovarov(key PrimaryDocumentZaiavkaNaPeremeshchenieTovarov, entity DocumentZaiavkaNaPeremeshchenieTovarov) (*DocumentZaiavkaNaPeremeshchenieTovarov, error) {
	return NewDocumentZaiavkaNaPeremeshchenieTovarov(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentZaiavkaNaPeremeshchenieTovarov(key PrimaryDocumentZaiavkaNaPeremeshchenieTovarov) error {
	return c.removeEntity(key)
}

type DocumentZaiavkaNaPeremeshchenieTovarovTovary struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	Weight                         *Double `json:"Вес,omitempty"`
	KachestvoKey                   *Guid   `json:"Качество_Key,omitempty"`
	Quantity                       *Int64  `json:"Количество,omitempty"`
	ItemKey                        *Guid   `json:"Номенклатура_Key,omitempty"`
	ProtsentRoznichnoiNatsenki     *Double `json:"ПроцентРозничнойНаценки,omitempty"`
	SizeKey                        *Guid   `json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	StoimostBezNDS                 *Double `json:"СтоимостьБезНДС,omitempty"`
	StoimostSNDS                   *Double `json:"СтоимостьСНДС,omitempty"`
	Sum                            *Double `json:"Сумма,omitempty"`
	SummaPostupleniia              *Double `json:"СуммаПоступления,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Double `json:"Цена,omitempty"`
	TsenaVRoznitseGr               *Double `json:"ЦенаВРозницеГр,omitempty"`
	TsenaPostupleniia              *Double `json:"ЦенаПоступления,omitempty"`
}

func (DocumentZaiavkaNaPeremeshchenieTovarovTovary) APIEntityType() string {
	return "Document_ЗаявкаНаПеремещениеТоваров_Товары"
}
func NewDocumentZaiavkaNaPeremeshchenieTovarovTovary(data string, prevError error) (*DocumentZaiavkaNaPeremeshchenieTovarovTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentZaiavkaNaPeremeshchenieTovarovTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentZaiavkaNaPeremeshchenieTovarovTovary(entity DocumentZaiavkaNaPeremeshchenieTovarovTovary) (*DocumentZaiavkaNaPeremeshchenieTovarovTovary, error) {
	return NewDocumentZaiavkaNaPeremeshchenieTovarovTovary(c.createEntity(entity))
}
func (c *Client) DocumentZaiavkaNaPeremeshchenieTovarovTovary(key PrimaryDocumentZaiavkaNaPeremeshchenieTovarovTovary, fields []string) (*DocumentZaiavkaNaPeremeshchenieTovarovTovary, error) {
	return NewDocumentZaiavkaNaPeremeshchenieTovarovTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentZaiavkaNaPeremeshchenieTovarovTovarys(where Where) (*[]DocumentZaiavkaNaPeremeshchenieTovarovTovary, error) {
	type ReturnObj struct {
		Value []DocumentZaiavkaNaPeremeshchenieTovarovTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗаявкаНаПеремещениеТоваров_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentZaiavkaNaPeremeshchenieTovarovTovary(key PrimaryDocumentZaiavkaNaPeremeshchenieTovarovTovary, entity DocumentZaiavkaNaPeremeshchenieTovarovTovary) (*DocumentZaiavkaNaPeremeshchenieTovarovTovary, error) {
	return NewDocumentZaiavkaNaPeremeshchenieTovarovTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentZaiavkaNaPeremeshchenieTovarovTovary(key PrimaryDocumentZaiavkaNaPeremeshchenieTovarovTovary) error {
	return c.removeEntity(key)
}

type CatalogUsloviiaProdazh struct {
	Key          Guid     `json:"Ref_Key,omitempty"`
	DataVersion  *String  `json:"DataVersion,omitempty"`
	Description  *String  `json:"Description,omitempty"`
	Code         *String  `json:"Code,omitempty"`
	DeletionMark *Boolean `json:"DeletionMark,omitempty"`
}

func (CatalogUsloviiaProdazh) APIEntityType() string {
	return "Catalog_УсловияПродаж"
}
func NewCatalogUsloviiaProdazh(data string, prevError error) (*CatalogUsloviiaProdazh, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogUsloviiaProdazh)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogUsloviiaProdazh(entity CatalogUsloviiaProdazh) (*CatalogUsloviiaProdazh, error) {
	return NewCatalogUsloviiaProdazh(c.createEntity(entity))
}
func (c *Client) CatalogUsloviiaProdazh(key PrimaryCatalogUsloviiaProdazh, fields []string) (*CatalogUsloviiaProdazh, error) {
	return NewCatalogUsloviiaProdazh(c.getEntity(key, fields))
}
func (c *Client) CatalogUsloviiaProdazhs(where Where) (*[]CatalogUsloviiaProdazh, error) {
	type ReturnObj struct {
		Value []CatalogUsloviiaProdazh `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_УсловияПродаж", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogUsloviiaProdazh(key PrimaryCatalogUsloviiaProdazh, entity CatalogUsloviiaProdazh) (*CatalogUsloviiaProdazh, error) {
	return NewCatalogUsloviiaProdazh(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogUsloviiaProdazh(key PrimaryCatalogUsloviiaProdazh) error {
	return c.removeEntity(key)
}

type DocumentVvodNachalnykhOstatkovPoFinMonitoringu struct {
	Key                            Guid                                                             `json:"Ref_Key,omitempty"`
	DataVersion                    *String                                                          `json:"DataVersion,omitempty"`
	Number                         *String                                                          `json:"Number,omitempty"`
	Date                           *DateTime                                                        `json:"Date,omitempty"`
	DeletionMark                   *Boolean                                                         `json:"DeletionMark,omitempty"`
	Posted                         *Boolean                                                         `json:"Posted,omitempty"`
	OrganizatsiiaKey               *Guid                                                            `json:"Организация_Key,omitempty"`
	TipDokumentovUcheta            *Boolean                                                         `json:"ТипДокументовУчета,omitempty"`
	NastroikiZapolneniiaBase64Data *Binary                                                          `json:"НастройкиЗаполнения_Base64Data,omitempty"`
	Dogovora                       *[]DocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovoraRowType `json:"Договора,omitempty"`
	NastroikiZapolneniiaType       *String                                                          `json:"НастройкиЗаполнения_Type,omitempty"`
	NastroikiZapolneniia           *Stream                                                          `json:"НастройкиЗаполнения,omitempty"`
}

func (DocumentVvodNachalnykhOstatkovPoFinMonitoringu) APIEntityType() string {
	return "Document_ВводНачальныхОстатковПоФинМониторингу"
}
func NewDocumentVvodNachalnykhOstatkovPoFinMonitoringu(data string, prevError error) (*DocumentVvodNachalnykhOstatkovPoFinMonitoringu, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentVvodNachalnykhOstatkovPoFinMonitoringu)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentVvodNachalnykhOstatkovPoFinMonitoringu(entity DocumentVvodNachalnykhOstatkovPoFinMonitoringu) (*DocumentVvodNachalnykhOstatkovPoFinMonitoringu, error) {
	return NewDocumentVvodNachalnykhOstatkovPoFinMonitoringu(c.createEntity(entity))
}
func (c *Client) DocumentVvodNachalnykhOstatkovPoFinMonitoringu(key PrimaryDocumentVvodNachalnykhOstatkovPoFinMonitoringu, fields []string) (*DocumentVvodNachalnykhOstatkovPoFinMonitoringu, error) {
	return NewDocumentVvodNachalnykhOstatkovPoFinMonitoringu(c.getEntity(key, fields))
}
func (c *Client) DocumentVvodNachalnykhOstatkovPoFinMonitoringus(where Where) (*[]DocumentVvodNachalnykhOstatkovPoFinMonitoringu, error) {
	type ReturnObj struct {
		Value []DocumentVvodNachalnykhOstatkovPoFinMonitoringu `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВводНачальныхОстатковПоФинМониторингу", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentVvodNachalnykhOstatkovPoFinMonitoringu(key PrimaryDocumentVvodNachalnykhOstatkovPoFinMonitoringu, entity DocumentVvodNachalnykhOstatkovPoFinMonitoringu) (*DocumentVvodNachalnykhOstatkovPoFinMonitoringu, error) {
	return NewDocumentVvodNachalnykhOstatkovPoFinMonitoringu(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentVvodNachalnykhOstatkovPoFinMonitoringu(key PrimaryDocumentVvodNachalnykhOstatkovPoFinMonitoringu) error {
	return c.removeEntity(key)
}

type DocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovora struct {
	Key                   Guid     `json:"Ref_Key,omitempty"`
	LineNumber            Int64    `json:"LineNumber,omitempty"`
	DogovorKontragentaKey *Guid    `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentUcheta        *String  `json:"ДокументУчета,omitempty"`
	ItogovaiaStroka       *Boolean `json:"ИтоговаяСтрока,omitempty"`
	KontragentKey         *Guid    `json:"Контрагент_Key,omitempty"`
	RuchnaiaKorrektirovka *Boolean `json:"РучнаяКорректировка,omitempty"`
	SummaOplaty           *Double  `json:"СуммаОплаты,omitempty"`
	SummaOtgruzki         *Double  `json:"СуммаОтгрузки,omitempty"`
	SummaVozvrata         *Double  `json:"СуммаВозврата,omitempty"`
	DokumentUchetaType    *String  `json:"ДокументУчета_Type,omitempty"`
}

func (DocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovora) APIEntityType() string {
	return "Document_ВводНачальныхОстатковПоФинМониторингу_Договора"
}
func NewDocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovora(data string, prevError error) (*DocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovora, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovora)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovora(entity DocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovora) (*DocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovora, error) {
	return NewDocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovora(c.createEntity(entity))
}
func (c *Client) DocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovora(key PrimaryDocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovora, fields []string) (*DocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovora, error) {
	return NewDocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovora(c.getEntity(key, fields))
}
func (c *Client) DocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovoras(where Where) (*[]DocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovora, error) {
	type ReturnObj struct {
		Value []DocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovora `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВводНачальныхОстатковПоФинМониторингу_Договора", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovora(key PrimaryDocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovora, entity DocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovora) (*DocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovora, error) {
	return NewDocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovora(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovora(key PrimaryDocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovora) error {
	return c.removeEntity(key)
}

type CatalogOrganizatsii struct {
	Key                                              Guid      `json:"Ref_Key,omitempty"`
	DataVersion                                      *String   `json:"DataVersion,omitempty"`
	Description                                      *String   `json:"Description,omitempty"`
	Code                                             *String   `json:"Code,omitempty"`
	DeletionMark                                     *Boolean  `json:"DeletionMark,omitempty"`
	DataNachalaVedeniiaFinMonitoringa                *DateTime `json:"ДатаНачалаВеденияФинМониторинга,omitempty"`
	INN                                              *String   `json:"ИНН,omitempty"`
	IspolzovatFinMonitoring                          *Boolean  `json:"ИспользоватьФинМониторинг,omitempty"`
	KodIMNS                                          *String   `json:"КодИМНС,omitempty"`
	KodPoOKATO                                       *String   `json:"КодПоОКАТО,omitempty"`
	KodPoOKVED                                       *String   `json:"КодПоОКВЭД,omitempty"`
	KodPoOKPO                                        *String   `json:"КодПоОКПО,omitempty"`
	KodPoOKTMO                                       *String   `json:"КодПоОКТМО,omitempty"`
	KPP                                              *String   `json:"КПП,omitempty"`
	NaimenovanieIFNS                                 *String   `json:"НаименованиеИФНС,omitempty"`
	NaimenovaniePlatelshchikaPriPerechisleniiNalogov *String   `json:"НаименованиеПлательщикаПриПеречисленииНалогов,omitempty"`
	NaimenovaniePolnoe                               *String   `json:"НаименованиеПолное,omitempty"`
	OGRN                                             *String   `json:"ОГРН,omitempty"`
	OsnovnoiBankovskiiSchetKey                       *Guid     `json:"ОсновнойБанковскийСчет_Key,omitempty"`
	Prefiks                                          *String   `json:"Префикс,omitempty"`
	SvidetelstvoDataVydachi                          *DateTime `json:"СвидетельствоДатаВыдачи,omitempty"`
	SvidetelstvoSeriiaNomer                          *String   `json:"СвидетельствоСерияНомер,omitempty"`
	UchetnyiNomer                                    *String   `json:"УчетныйНомер,omitempty"`
	IurFizLitso                                      *String   `json:"ЮрФизЛицо,omitempty"`
	KomissiiaKakKupliaProdazha                       *Boolean  `json:"КомиссияКакКупляПродажа,omitempty"`
	IDKorr                                           *String   `json:"ИДКорр,omitempty"`
	DataPriniatiiaKDeistviiuPisma50                  *DateTime `json:"ДатаПринятияКДействиюПисьма50,omitempty"`
}

func (CatalogOrganizatsii) APIEntityType() string {
	return "Catalog_Организации"
}
func NewCatalogOrganizatsii(data string, prevError error) (*CatalogOrganizatsii, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogOrganizatsii)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogOrganizatsii(entity CatalogOrganizatsii) (*CatalogOrganizatsii, error) {
	return NewCatalogOrganizatsii(c.createEntity(entity))
}
func (c *Client) CatalogOrganizatsii(key PrimaryCatalogOrganizatsii, fields []string) (*CatalogOrganizatsii, error) {
	return NewCatalogOrganizatsii(c.getEntity(key, fields))
}
func (c *Client) CatalogOrganizatsiis(where Where) (*[]CatalogOrganizatsii, error) {
	type ReturnObj struct {
		Value []CatalogOrganizatsii `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Организации", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogOrganizatsii(key PrimaryCatalogOrganizatsii, entity CatalogOrganizatsii) (*CatalogOrganizatsii, error) {
	return NewCatalogOrganizatsii(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogOrganizatsii(key PrimaryCatalogOrganizatsii) error {
	return c.removeEntity(key)
}

type CatalogUsloviiaOplaty struct {
	Key            Guid                                          `json:"Ref_Key,omitempty"`
	DataVersion    *String                                       `json:"DataVersion,omitempty"`
	Description    *String                                       `json:"Description,omitempty"`
	Code           *String                                       `json:"Code,omitempty"`
	DeletionMark   *Boolean                                      `json:"DeletionMark,omitempty"`
	VidOtsrochki   *Boolean                                      `json:"ВидОтсрочки,omitempty"`
	TablitsaVyplat *[]CatalogUsloviiaOplatyTablitsaVyplatRowType `json:"ТаблицаВыплат,omitempty"`
}

func (CatalogUsloviiaOplaty) APIEntityType() string {
	return "Catalog_УсловияОплаты"
}
func NewCatalogUsloviiaOplaty(data string, prevError error) (*CatalogUsloviiaOplaty, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogUsloviiaOplaty)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogUsloviiaOplaty(entity CatalogUsloviiaOplaty) (*CatalogUsloviiaOplaty, error) {
	return NewCatalogUsloviiaOplaty(c.createEntity(entity))
}
func (c *Client) CatalogUsloviiaOplaty(key PrimaryCatalogUsloviiaOplaty, fields []string) (*CatalogUsloviiaOplaty, error) {
	return NewCatalogUsloviiaOplaty(c.getEntity(key, fields))
}
func (c *Client) CatalogUsloviiaOplatys(where Where) (*[]CatalogUsloviiaOplaty, error) {
	type ReturnObj struct {
		Value []CatalogUsloviiaOplaty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_УсловияОплаты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogUsloviiaOplaty(key PrimaryCatalogUsloviiaOplaty, entity CatalogUsloviiaOplaty) (*CatalogUsloviiaOplaty, error) {
	return NewCatalogUsloviiaOplaty(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogUsloviiaOplaty(key PrimaryCatalogUsloviiaOplaty) error {
	return c.removeEntity(key)
}

type CatalogUsloviiaOplatyTablitsaVyplat struct {
	Key             Guid    `json:"Ref_Key,omitempty"`
	LineNumber      Int64   `json:"LineNumber,omitempty"`
	PeriodOtsrochki *Int16  `json:"ПериодОтсрочки,omitempty"`
	ProtsentVyplaty *Double `json:"ПроцентВыплаты,omitempty"`
}

func (CatalogUsloviiaOplatyTablitsaVyplat) APIEntityType() string {
	return "Catalog_УсловияОплаты_ТаблицаВыплат"
}
func NewCatalogUsloviiaOplatyTablitsaVyplat(data string, prevError error) (*CatalogUsloviiaOplatyTablitsaVyplat, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogUsloviiaOplatyTablitsaVyplat)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogUsloviiaOplatyTablitsaVyplat(entity CatalogUsloviiaOplatyTablitsaVyplat) (*CatalogUsloviiaOplatyTablitsaVyplat, error) {
	return NewCatalogUsloviiaOplatyTablitsaVyplat(c.createEntity(entity))
}
func (c *Client) CatalogUsloviiaOplatyTablitsaVyplat(key PrimaryCatalogUsloviiaOplatyTablitsaVyplat, fields []string) (*CatalogUsloviiaOplatyTablitsaVyplat, error) {
	return NewCatalogUsloviiaOplatyTablitsaVyplat(c.getEntity(key, fields))
}
func (c *Client) CatalogUsloviiaOplatyTablitsaVyplats(where Where) (*[]CatalogUsloviiaOplatyTablitsaVyplat, error) {
	type ReturnObj struct {
		Value []CatalogUsloviiaOplatyTablitsaVyplat `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_УсловияОплаты_ТаблицаВыплат", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogUsloviiaOplatyTablitsaVyplat(key PrimaryCatalogUsloviiaOplatyTablitsaVyplat, entity CatalogUsloviiaOplatyTablitsaVyplat) (*CatalogUsloviiaOplatyTablitsaVyplat, error) {
	return NewCatalogUsloviiaOplatyTablitsaVyplat(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogUsloviiaOplatyTablitsaVyplat(key PrimaryCatalogUsloviiaOplatyTablitsaVyplat) error {
	return c.removeEntity(key)
}

type CatalogKategoriiObieektov struct {
	Key                     Guid     `json:"Ref_Key,omitempty"`
	DataVersion             *String  `json:"DataVersion,omitempty"`
	Description             *String  `json:"Description,omitempty"`
	Code                    *String  `json:"Code,omitempty"`
	DeletionMark            *Boolean `json:"DeletionMark,omitempty"`
	NaznachenieKategoriiKey *Guid    `json:"НазначениеКатегории_Key,omitempty"`
}

func (CatalogKategoriiObieektov) APIEntityType() string {
	return "Catalog_КатегорииОбъектов"
}
func NewCatalogKategoriiObieektov(data string, prevError error) (*CatalogKategoriiObieektov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogKategoriiObieektov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogKategoriiObieektov(entity CatalogKategoriiObieektov) (*CatalogKategoriiObieektov, error) {
	return NewCatalogKategoriiObieektov(c.createEntity(entity))
}
func (c *Client) CatalogKategoriiObieektov(key PrimaryCatalogKategoriiObieektov, fields []string) (*CatalogKategoriiObieektov, error) {
	return NewCatalogKategoriiObieektov(c.getEntity(key, fields))
}
func (c *Client) CatalogKategoriiObieektovs(where Where) (*[]CatalogKategoriiObieektov, error) {
	type ReturnObj struct {
		Value []CatalogKategoriiObieektov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_КатегорииОбъектов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogKategoriiObieektov(key PrimaryCatalogKategoriiObieektov, entity CatalogKategoriiObieektov) (*CatalogKategoriiObieektov, error) {
	return NewCatalogKategoriiObieektov(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogKategoriiObieektov(key PrimaryCatalogKategoriiObieektov) error {
	return c.removeEntity(key)
}

type CatalogfmZnacheniiaDliaZapolneniia struct {
	Key          Guid     `json:"Ref_Key,omitempty"`
	DataVersion  *String  `json:"DataVersion,omitempty"`
	Code         *String  `json:"Code,omitempty"`
	ParentKey    *Guid    `json:"Parent_Key,omitempty"`
	IsFolder     *Boolean `json:"IsFolder,omitempty"`
	DeletionMark *Boolean `json:"DeletionMark,omitempty"`
	Opisanie     *String  `json:"Описание,omitempty"`
}

func (CatalogfmZnacheniiaDliaZapolneniia) APIEntityType() string {
	return "Catalog_фмЗначенияДляЗаполнения"
}
func NewCatalogfmZnacheniiaDliaZapolneniia(data string, prevError error) (*CatalogfmZnacheniiaDliaZapolneniia, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogfmZnacheniiaDliaZapolneniia)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogfmZnacheniiaDliaZapolneniia(entity CatalogfmZnacheniiaDliaZapolneniia) (*CatalogfmZnacheniiaDliaZapolneniia, error) {
	return NewCatalogfmZnacheniiaDliaZapolneniia(c.createEntity(entity))
}
func (c *Client) CatalogfmZnacheniiaDliaZapolneniia(key PrimaryCatalogfmZnacheniiaDliaZapolneniia, fields []string) (*CatalogfmZnacheniiaDliaZapolneniia, error) {
	return NewCatalogfmZnacheniiaDliaZapolneniia(c.getEntity(key, fields))
}
func (c *Client) CatalogfmZnacheniiaDliaZapolneniias(where Where) (*[]CatalogfmZnacheniiaDliaZapolneniia, error) {
	type ReturnObj struct {
		Value []CatalogfmZnacheniiaDliaZapolneniia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_фмЗначенияДляЗаполнения", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogfmZnacheniiaDliaZapolneniia(key PrimaryCatalogfmZnacheniiaDliaZapolneniia, entity CatalogfmZnacheniiaDliaZapolneniia) (*CatalogfmZnacheniiaDliaZapolneniia, error) {
	return NewCatalogfmZnacheniiaDliaZapolneniia(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogfmZnacheniiaDliaZapolneniia(key PrimaryCatalogfmZnacheniiaDliaZapolneniia) error {
	return c.removeEntity(key)
}

type DocumentUdalitNariadZakaz struct {
	Key                   Guid                                               `json:"Ref_Key,omitempty"`
	DataVersion           *String                                            `json:"DataVersion,omitempty"`
	Number                *String                                            `json:"Number,omitempty"`
	Date                  *DateTime                                          `json:"Date,omitempty"`
	DeletionMark          *Boolean                                           `json:"DeletionMark,omitempty"`
	Posted                *Boolean                                           `json:"Posted,omitempty"`
	OrganizatsiiaKey      *Guid                                              `json:"Организация_Key,omitempty"`
	KontragentKey         *Guid                                              `json:"Контрагент_Key,omitempty"`
	DogovorKontragentaKey *Guid                                              `json:"ДоговорКонтрагента_Key,omitempty"`
	OtvetstvennyiKey      *Guid                                              `json:"Ответственный_Key,omitempty"`
	Comment               *String                                            `json:"Комментарий,omitempty"`
	Opisanie              *String                                            `json:"Описание,omitempty"`
	PriemIzdelii          *Boolean                                           `json:"ПриемИзделий,omitempty"`
	PriemMetallaVstavok   *Boolean                                           `json:"ПриемМеталлаВставок,omitempty"`
	DepartmentKey         *Guid                                              `json:"Склад_Key,omitempty"`
	KolichestvoDokumenta  *Int64                                             `json:"КоличествоДокумента,omitempty"`
	Weight                *Double                                            `json:"ВесДокумента,omitempty"`
	Izdeliia              *[]DocumentUdalitNariadZakazIzdeliiaRowType        `json:"Изделия,omitempty"`
	Uslugi                *[]DocumentUdalitNariadZakazUslugiRowType          `json:"Услуги,omitempty"`
	Spetsifikatsiia       *[]DocumentUdalitNariadZakazSpetsifikatsiiaRowType `json:"Спецификация,omitempty"`
	Metally               *[]DocumentUdalitNariadZakazMetallyRowType         `json:"Металлы,omitempty"`
	Vstavki               *[]DocumentUdalitNariadZakazVstavkiRowType         `json:"Вставки,omitempty"`
}

func (DocumentUdalitNariadZakaz) APIEntityType() string {
	return "Document_УдалитьНарядЗаказ"
}
func NewDocumentUdalitNariadZakaz(data string, prevError error) (*DocumentUdalitNariadZakaz, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentUdalitNariadZakaz)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentUdalitNariadZakaz(entity DocumentUdalitNariadZakaz) (*DocumentUdalitNariadZakaz, error) {
	return NewDocumentUdalitNariadZakaz(c.createEntity(entity))
}
func (c *Client) DocumentUdalitNariadZakaz(key PrimaryDocumentUdalitNariadZakaz, fields []string) (*DocumentUdalitNariadZakaz, error) {
	return NewDocumentUdalitNariadZakaz(c.getEntity(key, fields))
}
func (c *Client) DocumentUdalitNariadZakazs(where Where) (*[]DocumentUdalitNariadZakaz, error) {
	type ReturnObj struct {
		Value []DocumentUdalitNariadZakaz `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_УдалитьНарядЗаказ", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentUdalitNariadZakaz(key PrimaryDocumentUdalitNariadZakaz, entity DocumentUdalitNariadZakaz) (*DocumentUdalitNariadZakaz, error) {
	return NewDocumentUdalitNariadZakaz(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentUdalitNariadZakaz(key PrimaryDocumentUdalitNariadZakaz) error {
	return c.removeEntity(key)
}

type DocumentUdalitNariadZakazIzdeliia struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	ItemKey                        *Guid   `json:"Номенклатура_Key,omitempty"`
	Quantity                       *Double `json:"Количество,omitempty"`
	Weight                         *Double `json:"Вес,omitempty"`
	SizeKey                        *Guid   `json:"Размер_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	TypeKey                        *Guid   `json:"ТипИзделия_Key,omitempty"`
	ProbeKey                       *Guid   `json:"Проба_Key,omitempty"`
	Kommentarii                    *String `json:"Комментарии,omitempty"`
	VesBezVstavok                  *Double `json:"ВесБезВставок,omitempty"`
	NomerStrokiTCh                 *Int64  `json:"НомерСтрокиТЧ,omitempty"`
	InstanceKey                    *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
}

func (DocumentUdalitNariadZakazIzdeliia) APIEntityType() string {
	return "Document_УдалитьНарядЗаказ_Изделия"
}
func NewDocumentUdalitNariadZakazIzdeliia(data string, prevError error) (*DocumentUdalitNariadZakazIzdeliia, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentUdalitNariadZakazIzdeliia)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentUdalitNariadZakazIzdeliia(entity DocumentUdalitNariadZakazIzdeliia) (*DocumentUdalitNariadZakazIzdeliia, error) {
	return NewDocumentUdalitNariadZakazIzdeliia(c.createEntity(entity))
}
func (c *Client) DocumentUdalitNariadZakazIzdeliia(key PrimaryDocumentUdalitNariadZakazIzdeliia, fields []string) (*DocumentUdalitNariadZakazIzdeliia, error) {
	return NewDocumentUdalitNariadZakazIzdeliia(c.getEntity(key, fields))
}
func (c *Client) DocumentUdalitNariadZakazIzdeliias(where Where) (*[]DocumentUdalitNariadZakazIzdeliia, error) {
	type ReturnObj struct {
		Value []DocumentUdalitNariadZakazIzdeliia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_УдалитьНарядЗаказ_Изделия", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentUdalitNariadZakazIzdeliia(key PrimaryDocumentUdalitNariadZakazIzdeliia, entity DocumentUdalitNariadZakazIzdeliia) (*DocumentUdalitNariadZakazIzdeliia, error) {
	return NewDocumentUdalitNariadZakazIzdeliia(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentUdalitNariadZakazIzdeliia(key PrimaryDocumentUdalitNariadZakazIzdeliia) error {
	return c.removeEntity(key)
}

type DocumentUdalitNariadZakazUslugi struct {
	Key         Guid    `json:"Ref_Key,omitempty"`
	LineNumber  Int64   `json:"LineNumber,omitempty"`
	Quantity    *Int64  `json:"Количество,omitempty"`
	ItemKey     *Guid   `json:"Номенклатура_Key,omitempty"`
	Soderzhanie *String `json:"Содержание,omitempty"`
	StavkaNDS   *String `json:"СтавкаНДС,omitempty"`
	Sum         *Double `json:"Сумма,omitempty"`
	SummaNDS    *Double `json:"СуммаНДС,omitempty"`
	Cost        *Double `json:"Цена,omitempty"`
}

func (DocumentUdalitNariadZakazUslugi) APIEntityType() string {
	return "Document_УдалитьНарядЗаказ_Услуги"
}
func NewDocumentUdalitNariadZakazUslugi(data string, prevError error) (*DocumentUdalitNariadZakazUslugi, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentUdalitNariadZakazUslugi)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentUdalitNariadZakazUslugi(entity DocumentUdalitNariadZakazUslugi) (*DocumentUdalitNariadZakazUslugi, error) {
	return NewDocumentUdalitNariadZakazUslugi(c.createEntity(entity))
}
func (c *Client) DocumentUdalitNariadZakazUslugi(key PrimaryDocumentUdalitNariadZakazUslugi, fields []string) (*DocumentUdalitNariadZakazUslugi, error) {
	return NewDocumentUdalitNariadZakazUslugi(c.getEntity(key, fields))
}
func (c *Client) DocumentUdalitNariadZakazUslugis(where Where) (*[]DocumentUdalitNariadZakazUslugi, error) {
	type ReturnObj struct {
		Value []DocumentUdalitNariadZakazUslugi `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_УдалитьНарядЗаказ_Услуги", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentUdalitNariadZakazUslugi(key PrimaryDocumentUdalitNariadZakazUslugi, entity DocumentUdalitNariadZakazUslugi) (*DocumentUdalitNariadZakazUslugi, error) {
	return NewDocumentUdalitNariadZakazUslugi(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentUdalitNariadZakazUslugi(key PrimaryDocumentUdalitNariadZakazUslugi) error {
	return c.removeEntity(key)
}

type DocumentUdalitNariadZakazSpetsifikatsiia struct {
	Key              Guid    `json:"Ref_Key,omitempty"`
	LineNumber       Int64   `json:"LineNumber,omitempty"`
	Weight           *Double `json:"Вес,omitempty"`
	GruppaDefektaKey *Guid   `json:"ГруппаДефекта_Key,omitempty"`
	GruppaTsvetaKey  *Guid   `json:"ГруппаЦвета_Key,omitempty"`
	KamenKey         *Guid   `json:"Камень_Key,omitempty"`
	Quantity         *Double `json:"Количество,omitempty"`
	ItemKey          *Guid   `json:"Номенклатура_Key,omitempty"`
	Razmer1          *Double `json:"Размер1,omitempty"`
	Razmer2          *Double `json:"Размер2,omitempty"`
	Razmer3          *Double `json:"Размер3,omitempty"`
	RassevKey        *Guid   `json:"Рассев_Key,omitempty"`
	FormaOgrankiKey  *Guid   `json:"ФормаОгранки_Key,omitempty"`
	TsvetKamniaKey   *Guid   `json:"ЦветКамня_Key,omitempty"`
	NomerStrokiTCh   *Int64  `json:"НомерСтрокиТЧ,omitempty"`
}

func (DocumentUdalitNariadZakazSpetsifikatsiia) APIEntityType() string {
	return "Document_УдалитьНарядЗаказ_Спецификация"
}
func NewDocumentUdalitNariadZakazSpetsifikatsiia(data string, prevError error) (*DocumentUdalitNariadZakazSpetsifikatsiia, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentUdalitNariadZakazSpetsifikatsiia)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentUdalitNariadZakazSpetsifikatsiia(entity DocumentUdalitNariadZakazSpetsifikatsiia) (*DocumentUdalitNariadZakazSpetsifikatsiia, error) {
	return NewDocumentUdalitNariadZakazSpetsifikatsiia(c.createEntity(entity))
}
func (c *Client) DocumentUdalitNariadZakazSpetsifikatsiia(key PrimaryDocumentUdalitNariadZakazSpetsifikatsiia, fields []string) (*DocumentUdalitNariadZakazSpetsifikatsiia, error) {
	return NewDocumentUdalitNariadZakazSpetsifikatsiia(c.getEntity(key, fields))
}
func (c *Client) DocumentUdalitNariadZakazSpetsifikatsiias(where Where) (*[]DocumentUdalitNariadZakazSpetsifikatsiia, error) {
	type ReturnObj struct {
		Value []DocumentUdalitNariadZakazSpetsifikatsiia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_УдалитьНарядЗаказ_Спецификация", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentUdalitNariadZakazSpetsifikatsiia(key PrimaryDocumentUdalitNariadZakazSpetsifikatsiia, entity DocumentUdalitNariadZakazSpetsifikatsiia) (*DocumentUdalitNariadZakazSpetsifikatsiia, error) {
	return NewDocumentUdalitNariadZakazSpetsifikatsiia(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentUdalitNariadZakazSpetsifikatsiia(key PrimaryDocumentUdalitNariadZakazSpetsifikatsiia) error {
	return c.removeEntity(key)
}

type DocumentUdalitNariadZakazMetally struct {
	Key        Guid    `json:"Ref_Key,omitempty"`
	LineNumber Int64   `json:"LineNumber,omitempty"`
	ItemKey    *Guid   `json:"Номенклатура_Key,omitempty"`
	ProbeKey   *Guid   `json:"Проба_Key,omitempty"`
	Weight     *String `json:"Вес,omitempty"`
}

func (DocumentUdalitNariadZakazMetally) APIEntityType() string {
	return "Document_УдалитьНарядЗаказ_Металлы"
}
func NewDocumentUdalitNariadZakazMetally(data string, prevError error) (*DocumentUdalitNariadZakazMetally, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentUdalitNariadZakazMetally)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentUdalitNariadZakazMetally(entity DocumentUdalitNariadZakazMetally) (*DocumentUdalitNariadZakazMetally, error) {
	return NewDocumentUdalitNariadZakazMetally(c.createEntity(entity))
}
func (c *Client) DocumentUdalitNariadZakazMetally(key PrimaryDocumentUdalitNariadZakazMetally, fields []string) (*DocumentUdalitNariadZakazMetally, error) {
	return NewDocumentUdalitNariadZakazMetally(c.getEntity(key, fields))
}
func (c *Client) DocumentUdalitNariadZakazMetallys(where Where) (*[]DocumentUdalitNariadZakazMetally, error) {
	type ReturnObj struct {
		Value []DocumentUdalitNariadZakazMetally `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_УдалитьНарядЗаказ_Металлы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentUdalitNariadZakazMetally(key PrimaryDocumentUdalitNariadZakazMetally, entity DocumentUdalitNariadZakazMetally) (*DocumentUdalitNariadZakazMetally, error) {
	return NewDocumentUdalitNariadZakazMetally(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentUdalitNariadZakazMetally(key PrimaryDocumentUdalitNariadZakazMetally) error {
	return c.removeEntity(key)
}

type DocumentUdalitNariadZakazVstavki struct {
	Key              Guid    `json:"Ref_Key,omitempty"`
	LineNumber       Int64   `json:"LineNumber,omitempty"`
	Weight           *Double `json:"Вес,omitempty"`
	GruppaDefektaKey *Guid   `json:"ГруппаДефекта_Key,omitempty"`
	GruppaTsvetaKey  *Guid   `json:"ГруппаЦвета_Key,omitempty"`
	KamenKey         *Guid   `json:"Камень_Key,omitempty"`
	Quantity         *Double `json:"Количество,omitempty"`
	ItemKey          *Guid   `json:"Номенклатура_Key,omitempty"`
	Razmer1          *Double `json:"Размер1,omitempty"`
	Razmer2          *Double `json:"Размер2,omitempty"`
	Razmer3          *Double `json:"Размер3,omitempty"`
	RassevKey        *Guid   `json:"Рассев_Key,omitempty"`
	FormaOgrankiKey  *Guid   `json:"ФормаОгранки_Key,omitempty"`
	TsvetKamniaKey   *Guid   `json:"ЦветКамня_Key,omitempty"`
}

func (DocumentUdalitNariadZakazVstavki) APIEntityType() string {
	return "Document_УдалитьНарядЗаказ_Вставки"
}
func NewDocumentUdalitNariadZakazVstavki(data string, prevError error) (*DocumentUdalitNariadZakazVstavki, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentUdalitNariadZakazVstavki)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentUdalitNariadZakazVstavki(entity DocumentUdalitNariadZakazVstavki) (*DocumentUdalitNariadZakazVstavki, error) {
	return NewDocumentUdalitNariadZakazVstavki(c.createEntity(entity))
}
func (c *Client) DocumentUdalitNariadZakazVstavki(key PrimaryDocumentUdalitNariadZakazVstavki, fields []string) (*DocumentUdalitNariadZakazVstavki, error) {
	return NewDocumentUdalitNariadZakazVstavki(c.getEntity(key, fields))
}
func (c *Client) DocumentUdalitNariadZakazVstavkis(where Where) (*[]DocumentUdalitNariadZakazVstavki, error) {
	type ReturnObj struct {
		Value []DocumentUdalitNariadZakazVstavki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_УдалитьНарядЗаказ_Вставки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentUdalitNariadZakazVstavki(key PrimaryDocumentUdalitNariadZakazVstavki, entity DocumentUdalitNariadZakazVstavki) (*DocumentUdalitNariadZakazVstavki, error) {
	return NewDocumentUdalitNariadZakazVstavki(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentUdalitNariadZakazVstavki(key PrimaryDocumentUdalitNariadZakazVstavki) error {
	return c.removeEntity(key)
}

type CatalogBanki struct {
	Key          Guid     `json:"Ref_Key,omitempty"`
	DataVersion  *String  `json:"DataVersion,omitempty"`
	Description  *String  `json:"Description,omitempty"`
	Code         *String  `json:"Code,omitempty"`
	ParentKey    *Guid    `json:"Parent_Key,omitempty"`
	IsFolder     *Boolean `json:"IsFolder,omitempty"`
	DeletionMark *Boolean `json:"DeletionMark,omitempty"`
	Adres        *String  `json:"Адрес,omitempty"`
	Gorod        *String  `json:"Город,omitempty"`
	KorrSchet    *String  `json:"КоррСчет,omitempty"`
	Telefony     *String  `json:"Телефоны,omitempty"`
}

func (CatalogBanki) APIEntityType() string {
	return "Catalog_Банки"
}
func NewCatalogBanki(data string, prevError error) (*CatalogBanki, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogBanki)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogBanki(entity CatalogBanki) (*CatalogBanki, error) {
	return NewCatalogBanki(c.createEntity(entity))
}
func (c *Client) CatalogBanki(key PrimaryCatalogBanki, fields []string) (*CatalogBanki, error) {
	return NewCatalogBanki(c.getEntity(key, fields))
}
func (c *Client) CatalogBankis(where Where) (*[]CatalogBanki, error) {
	type ReturnObj struct {
		Value []CatalogBanki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Банки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogBanki(key PrimaryCatalogBanki, entity CatalogBanki) (*CatalogBanki, error) {
	return NewCatalogBanki(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogBanki(key PrimaryCatalogBanki) error {
	return c.removeEntity(key)
}

type CatalogRoliKontaktnykhLits struct {
	Key          Guid     `json:"Ref_Key,omitempty"`
	DataVersion  *String  `json:"DataVersion,omitempty"`
	Description  *String  `json:"Description,omitempty"`
	Code         *String  `json:"Code,omitempty"`
	DeletionMark *Boolean `json:"DeletionMark,omitempty"`
}

func (CatalogRoliKontaktnykhLits) APIEntityType() string {
	return "Catalog_РолиКонтактныхЛиц"
}
func NewCatalogRoliKontaktnykhLits(data string, prevError error) (*CatalogRoliKontaktnykhLits, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogRoliKontaktnykhLits)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogRoliKontaktnykhLits(entity CatalogRoliKontaktnykhLits) (*CatalogRoliKontaktnykhLits, error) {
	return NewCatalogRoliKontaktnykhLits(c.createEntity(entity))
}
func (c *Client) CatalogRoliKontaktnykhLits(key PrimaryCatalogRoliKontaktnykhLits, fields []string) (*CatalogRoliKontaktnykhLits, error) {
	return NewCatalogRoliKontaktnykhLits(c.getEntity(key, fields))
}
func (c *Client) CatalogRoliKontaktnykhLitss(where Where) (*[]CatalogRoliKontaktnykhLits, error) {
	type ReturnObj struct {
		Value []CatalogRoliKontaktnykhLits `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_РолиКонтактныхЛиц", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogRoliKontaktnykhLits(key PrimaryCatalogRoliKontaktnykhLits, entity CatalogRoliKontaktnykhLits) (*CatalogRoliKontaktnykhLits, error) {
	return NewCatalogRoliKontaktnykhLits(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogRoliKontaktnykhLits(key PrimaryCatalogRoliKontaktnykhLits) error {
	return c.removeEntity(key)
}

type DocumentRestrukturizatsiiaDolga struct {
	Key                        Guid                                                                `json:"Ref_Key,omitempty"`
	DataVersion                *String                                                             `json:"DataVersion,omitempty"`
	Number                     *String                                                             `json:"Number,omitempty"`
	Date                       *DateTime                                                           `json:"Date,omitempty"`
	DeletionMark               *Boolean                                                            `json:"DeletionMark,omitempty"`
	Posted                     *Boolean                                                            `json:"Posted,omitempty"`
	DogovorKontragentaKey      *Guid                                                               `json:"ДоговорКонтрагента_Key,omitempty"`
	KontragentKey              *Guid                                                               `json:"Контрагент_Key,omitempty"`
	OrganizatsiiaKey           *Guid                                                               `json:"Организация_Key,omitempty"`
	RasshifrovkaZadolzhennosti *[]DocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennostiRowType `json:"РасшифровкаЗадолженности,omitempty"`
}

func (DocumentRestrukturizatsiiaDolga) APIEntityType() string {
	return "Document_РеструктуризацияДолга"
}
func NewDocumentRestrukturizatsiiaDolga(data string, prevError error) (*DocumentRestrukturizatsiiaDolga, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentRestrukturizatsiiaDolga)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentRestrukturizatsiiaDolga(entity DocumentRestrukturizatsiiaDolga) (*DocumentRestrukturizatsiiaDolga, error) {
	return NewDocumentRestrukturizatsiiaDolga(c.createEntity(entity))
}
func (c *Client) DocumentRestrukturizatsiiaDolga(key PrimaryDocumentRestrukturizatsiiaDolga, fields []string) (*DocumentRestrukturizatsiiaDolga, error) {
	return NewDocumentRestrukturizatsiiaDolga(c.getEntity(key, fields))
}
func (c *Client) DocumentRestrukturizatsiiaDolgas(where Where) (*[]DocumentRestrukturizatsiiaDolga, error) {
	type ReturnObj struct {
		Value []DocumentRestrukturizatsiiaDolga `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_РеструктуризацияДолга", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentRestrukturizatsiiaDolga(key PrimaryDocumentRestrukturizatsiiaDolga, entity DocumentRestrukturizatsiiaDolga) (*DocumentRestrukturizatsiiaDolga, error) {
	return NewDocumentRestrukturizatsiiaDolga(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentRestrukturizatsiiaDolga(key PrimaryDocumentRestrukturizatsiiaDolga) error {
	return c.removeEntity(key)
}

type DocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennosti struct {
	Key                 Guid      `json:"Ref_Key,omitempty"`
	LineNumber          Int64     `json:"LineNumber,omitempty"`
	DataDolga           *DateTime `json:"ДатаДолга,omitempty"`
	NovaiaDataDolga     *DateTime `json:"НоваяДатаДолга,omitempty"`
	NovaiaSummaDolga    *Double   `json:"НоваяСуммаДолга,omitempty"`
	NovaiaSummaDolgaUpr *Double   `json:"НоваяСуммаДолгаУпр,omitempty"`
	SummaDolga          *Double   `json:"СуммаДолга,omitempty"`
	SummaDolgaUpr       *Double   `json:"СуммаДолгаУпр,omitempty"`
}

func (DocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennosti) APIEntityType() string {
	return "Document_РеструктуризацияДолга_РасшифровкаЗадолженности"
}
func NewDocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennosti(data string, prevError error) (*DocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennosti, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennosti)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennosti(entity DocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennosti) (*DocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennosti, error) {
	return NewDocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennosti(c.createEntity(entity))
}
func (c *Client) DocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennosti(key PrimaryDocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennosti, fields []string) (*DocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennosti, error) {
	return NewDocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennosti(c.getEntity(key, fields))
}
func (c *Client) DocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennostis(where Where) (*[]DocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennosti, error) {
	type ReturnObj struct {
		Value []DocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennosti `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_РеструктуризацияДолга_РасшифровкаЗадолженности", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennosti(key PrimaryDocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennosti, entity DocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennosti) (*DocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennosti, error) {
	return NewDocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennosti(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennosti(key PrimaryDocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennosti) error {
	return c.removeEntity(key)
}

type DocumentAkkreditivPoluchennyi struct {
	Key                                  Guid                                                        `json:"Ref_Key,omitempty"`
	DataVersion                          *String                                                     `json:"DataVersion,omitempty"`
	Number                               *String                                                     `json:"Number,omitempty"`
	Date                                 *DateTime                                                   `json:"Date,omitempty"`
	DeletionMark                         *Boolean                                                    `json:"DeletionMark,omitempty"`
	Posted                               *Boolean                                                    `json:"Posted,omitempty"`
	ValiutaDokumentaKey                  *Guid                                                       `json:"ВалютаДокумента_Key,omitempty"`
	OperationType                        *String                                                     `json:"ВидОперации,omitempty"`
	DataVkhodiashchegoDokumenta          *DateTime                                                   `json:"ДатаВходящегоДокумента,omitempty"`
	DataOplaty                           *DateTime                                                   `json:"ДатаОплаты,omitempty"`
	DogovorKontragentaKey                *Guid                                                       `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie                    *String                                                     `json:"ДокументОснование,omitempty"`
	DokumentPlanirovaniiaPostupleniiaKey *Guid                                                       `json:"ДокументПланированияПоступления_Key,omitempty"`
	Comment                              *String                                                     `json:"Комментарий,omitempty"`
	KontragentKey                        *Guid                                                       `json:"Контрагент_Key,omitempty"`
	NomerVkhodiashchegoDokumenta         *String                                                     `json:"НомерВходящегоДокумента,omitempty"`
	Oplacheno                            *Boolean                                                    `json:"Оплачено,omitempty"`
	OrganizatsiiaKey                     *Guid                                                       `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                     *Guid                                                       `json:"Ответственный_Key,omitempty"`
	OtrazhenoVOperUchete                 *Boolean                                                    `json:"ОтраженоВОперУчете,omitempty"`
	TypeOfMovingMoneyKey                 *Guid                                                       `json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SumOfDocument                        *Double                                                     `json:"СуммаДокумента,omitempty"`
	SchetKontragentaKey                  *Guid                                                       `json:"СчетКонтрагента_Key,omitempty"`
	SchetOrganizatsiiKey                 *Guid                                                       `json:"СчетОрганизации_Key,omitempty"`
	TipDokumenta                         *String                                                     `json:"ТипДокумента,omitempty"`
	ChastichnaiaOplata                   *Boolean                                                    `json:"ЧастичнаяОплата,omitempty"`
	ExtendedPayments                     *[]DocumentAkkreditivPoluchennyiRasshifrovkaPlatezhaRowType `json:"РасшифровкаПлатежа,omitempty"`
	RekvizityKontragenta                 *[]DocumentAkkreditivPoluchennyiRekvizityKontragentaRowType `json:"РеквизитыКонтрагента,omitempty"`
	DokumentOsnovanieType                *String                                                     `json:"ДокументОснование_Type,omitempty"`
}

func (DocumentAkkreditivPoluchennyi) APIEntityType() string {
	return "Document_АккредитивПолученный"
}
func NewDocumentAkkreditivPoluchennyi(data string, prevError error) (*DocumentAkkreditivPoluchennyi, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentAkkreditivPoluchennyi)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentAkkreditivPoluchennyi(entity DocumentAkkreditivPoluchennyi) (*DocumentAkkreditivPoluchennyi, error) {
	return NewDocumentAkkreditivPoluchennyi(c.createEntity(entity))
}
func (c *Client) DocumentAkkreditivPoluchennyi(key PrimaryDocumentAkkreditivPoluchennyi, fields []string) (*DocumentAkkreditivPoluchennyi, error) {
	return NewDocumentAkkreditivPoluchennyi(c.getEntity(key, fields))
}
func (c *Client) DocumentAkkreditivPoluchennyis(where Where) (*[]DocumentAkkreditivPoluchennyi, error) {
	type ReturnObj struct {
		Value []DocumentAkkreditivPoluchennyi `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_АккредитивПолученный", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentAkkreditivPoluchennyi(key PrimaryDocumentAkkreditivPoluchennyi, entity DocumentAkkreditivPoluchennyi) (*DocumentAkkreditivPoluchennyi, error) {
	return NewDocumentAkkreditivPoluchennyi(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentAkkreditivPoluchennyi(key PrimaryDocumentAkkreditivPoluchennyi) error {
	return c.removeEntity(key)
}

type DocumentAkkreditivPoluchennyiRasshifrovkaPlatezha struct {
	Key                              Guid    `json:"Ref_Key,omitempty"`
	LineNumber                       Int64   `json:"LineNumber,omitempty"`
	DogovorKontragentaKey            *Guid   `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentPlanirovaniiaPlatezhaKey *Guid   `json:"ДокументПланированияПлатежа_Key,omitempty"`
	KratnostVzaimoraschetov          *Int64  `json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov              *Double `json:"КурсВзаиморасчетов,omitempty"`
	KursVzaimoraschetovPlan          *Double `json:"КурсВзаиморасчетовПлан,omitempty"`
	ProektKey                        *Guid   `json:"Проект_Key,omitempty"`
	Sdelka                           *String `json:"Сделка,omitempty"`
	StavkaNDS                        *String `json:"СтавкаНДС,omitempty"`
	TypeOfMovingMoneyKey             *Guid   `json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov             *Double `json:"СуммаВзаиморасчетов,omitempty"`
	SummaNDS                         *Double `json:"СуммаНДС,omitempty"`
	Sum                              *Double `json:"СуммаПлатежа,omitempty"`
	SummaPlatezhaPlan                *Double `json:"СуммаПлатежаПлан,omitempty"`
	SdelkaType                       *String `json:"Сделка_Type,omitempty"`
}

func (DocumentAkkreditivPoluchennyiRasshifrovkaPlatezha) APIEntityType() string {
	return "Document_АккредитивПолученный_РасшифровкаПлатежа"
}
func NewDocumentAkkreditivPoluchennyiRasshifrovkaPlatezha(data string, prevError error) (*DocumentAkkreditivPoluchennyiRasshifrovkaPlatezha, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentAkkreditivPoluchennyiRasshifrovkaPlatezha)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentAkkreditivPoluchennyiRasshifrovkaPlatezha(entity DocumentAkkreditivPoluchennyiRasshifrovkaPlatezha) (*DocumentAkkreditivPoluchennyiRasshifrovkaPlatezha, error) {
	return NewDocumentAkkreditivPoluchennyiRasshifrovkaPlatezha(c.createEntity(entity))
}
func (c *Client) DocumentAkkreditivPoluchennyiRasshifrovkaPlatezha(key PrimaryDocumentAkkreditivPoluchennyiRasshifrovkaPlatezha, fields []string) (*DocumentAkkreditivPoluchennyiRasshifrovkaPlatezha, error) {
	return NewDocumentAkkreditivPoluchennyiRasshifrovkaPlatezha(c.getEntity(key, fields))
}
func (c *Client) DocumentAkkreditivPoluchennyiRasshifrovkaPlatezhas(where Where) (*[]DocumentAkkreditivPoluchennyiRasshifrovkaPlatezha, error) {
	type ReturnObj struct {
		Value []DocumentAkkreditivPoluchennyiRasshifrovkaPlatezha `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_АккредитивПолученный_РасшифровкаПлатежа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentAkkreditivPoluchennyiRasshifrovkaPlatezha(key PrimaryDocumentAkkreditivPoluchennyiRasshifrovkaPlatezha, entity DocumentAkkreditivPoluchennyiRasshifrovkaPlatezha) (*DocumentAkkreditivPoluchennyiRasshifrovkaPlatezha, error) {
	return NewDocumentAkkreditivPoluchennyiRasshifrovkaPlatezha(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentAkkreditivPoluchennyiRasshifrovkaPlatezha(key PrimaryDocumentAkkreditivPoluchennyiRasshifrovkaPlatezha) error {
	return c.removeEntity(key)
}

type DocumentAkkreditivPoluchennyiRekvizityKontragenta struct {
	Key            Guid    `json:"Ref_Key,omitempty"`
	LineNumber     Int64   `json:"LineNumber,omitempty"`
	Znachenie      *String `json:"Значение,omitempty"`
	Predstavlenie  *String `json:"Представление,omitempty"`
	Rekvizit       *String `json:"Реквизит,omitempty"`
	TipKontragenta *String `json:"ТипКонтрагента,omitempty"`
}

func (DocumentAkkreditivPoluchennyiRekvizityKontragenta) APIEntityType() string {
	return "Document_АккредитивПолученный_РеквизитыКонтрагента"
}
func NewDocumentAkkreditivPoluchennyiRekvizityKontragenta(data string, prevError error) (*DocumentAkkreditivPoluchennyiRekvizityKontragenta, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentAkkreditivPoluchennyiRekvizityKontragenta)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentAkkreditivPoluchennyiRekvizityKontragenta(entity DocumentAkkreditivPoluchennyiRekvizityKontragenta) (*DocumentAkkreditivPoluchennyiRekvizityKontragenta, error) {
	return NewDocumentAkkreditivPoluchennyiRekvizityKontragenta(c.createEntity(entity))
}
func (c *Client) DocumentAkkreditivPoluchennyiRekvizityKontragenta(key PrimaryDocumentAkkreditivPoluchennyiRekvizityKontragenta, fields []string) (*DocumentAkkreditivPoluchennyiRekvizityKontragenta, error) {
	return NewDocumentAkkreditivPoluchennyiRekvizityKontragenta(c.getEntity(key, fields))
}
func (c *Client) DocumentAkkreditivPoluchennyiRekvizityKontragentas(where Where) (*[]DocumentAkkreditivPoluchennyiRekvizityKontragenta, error) {
	type ReturnObj struct {
		Value []DocumentAkkreditivPoluchennyiRekvizityKontragenta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_АккредитивПолученный_РеквизитыКонтрагента", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentAkkreditivPoluchennyiRekvizityKontragenta(key PrimaryDocumentAkkreditivPoluchennyiRekvizityKontragenta, entity DocumentAkkreditivPoluchennyiRekvizityKontragenta) (*DocumentAkkreditivPoluchennyiRekvizityKontragenta, error) {
	return NewDocumentAkkreditivPoluchennyiRekvizityKontragenta(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentAkkreditivPoluchennyiRekvizityKontragenta(key PrimaryDocumentAkkreditivPoluchennyiRekvizityKontragenta) error {
	return c.removeEntity(key)
}

type DocumentPriemIzRemonta struct {
	Key                     Guid                                      `json:"Ref_Key,omitempty"`
	DataVersion             *String                                   `json:"DataVersion,omitempty"`
	Number                  *String                                   `json:"Number,omitempty"`
	Date                    *DateTime                                 `json:"Date,omitempty"`
	DeletionMark            *Boolean                                  `json:"DeletionMark,omitempty"`
	Posted                  *Boolean                                  `json:"Posted,omitempty"`
	Weight                  *Double                                   `json:"ВесДокумента,omitempty"`
	DogovorKontragentaKey   *Guid                                     `json:"ДоговорКонтрагента_Key,omitempty"`
	KolichestvoDokumenta    *Int64                                    `json:"КоличествоДокумента,omitempty"`
	KontragentKey           *Guid                                     `json:"Контрагент_Key,omitempty"`
	OrganizatsiiaKey        *Guid                                     `json:"Организация_Key,omitempty"`
	DepartmentKey           *Guid                                     `json:"Склад_Key,omitempty"`
	SobstvennaiaMasterskaia *Boolean                                  `json:"СобственнаяМастерская,omitempty"`
	Izdeliia                *[]DocumentPriemIzRemontaIzdeliiaRowType  `json:"Изделия,omitempty"`
	Materialy               *[]DocumentPriemIzRemontaMaterialyRowType `json:"Материалы,omitempty"`
}

func (DocumentPriemIzRemonta) APIEntityType() string {
	return "Document_ПриемИзРемонта"
}
func NewDocumentPriemIzRemonta(data string, prevError error) (*DocumentPriemIzRemonta, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPriemIzRemonta)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPriemIzRemonta(entity DocumentPriemIzRemonta) (*DocumentPriemIzRemonta, error) {
	return NewDocumentPriemIzRemonta(c.createEntity(entity))
}
func (c *Client) DocumentPriemIzRemonta(key PrimaryDocumentPriemIzRemonta, fields []string) (*DocumentPriemIzRemonta, error) {
	return NewDocumentPriemIzRemonta(c.getEntity(key, fields))
}
func (c *Client) DocumentPriemIzRemontas(where Where) (*[]DocumentPriemIzRemonta, error) {
	type ReturnObj struct {
		Value []DocumentPriemIzRemonta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПриемИзРемонта", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPriemIzRemonta(key PrimaryDocumentPriemIzRemonta, entity DocumentPriemIzRemonta) (*DocumentPriemIzRemonta, error) {
	return NewDocumentPriemIzRemonta(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPriemIzRemonta(key PrimaryDocumentPriemIzRemonta) error {
	return c.removeEntity(key)
}

type DocumentPriemIzRemontaIzdeliia struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	ItemKey                        *Guid   `json:"Номенклатура_Key,omitempty"`
	Quantity                       *Double `json:"Количество,omitempty"`
	Weight                         *Double `json:"Вес,omitempty"`
	SizeKey                        *Guid   `json:"Размер_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	TypeKey                        *Guid   `json:"ТипИзделия_Key,omitempty"`
	ProbeKey                       *Guid   `json:"Проба_Key,omitempty"`
	InstanceKey                    *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
}

func (DocumentPriemIzRemontaIzdeliia) APIEntityType() string {
	return "Document_ПриемИзРемонта_Изделия"
}
func NewDocumentPriemIzRemontaIzdeliia(data string, prevError error) (*DocumentPriemIzRemontaIzdeliia, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPriemIzRemontaIzdeliia)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPriemIzRemontaIzdeliia(entity DocumentPriemIzRemontaIzdeliia) (*DocumentPriemIzRemontaIzdeliia, error) {
	return NewDocumentPriemIzRemontaIzdeliia(c.createEntity(entity))
}
func (c *Client) DocumentPriemIzRemontaIzdeliia(key PrimaryDocumentPriemIzRemontaIzdeliia, fields []string) (*DocumentPriemIzRemontaIzdeliia, error) {
	return NewDocumentPriemIzRemontaIzdeliia(c.getEntity(key, fields))
}
func (c *Client) DocumentPriemIzRemontaIzdeliias(where Where) (*[]DocumentPriemIzRemontaIzdeliia, error) {
	type ReturnObj struct {
		Value []DocumentPriemIzRemontaIzdeliia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПриемИзРемонта_Изделия", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPriemIzRemontaIzdeliia(key PrimaryDocumentPriemIzRemontaIzdeliia, entity DocumentPriemIzRemontaIzdeliia) (*DocumentPriemIzRemontaIzdeliia, error) {
	return NewDocumentPriemIzRemontaIzdeliia(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPriemIzRemontaIzdeliia(key PrimaryDocumentPriemIzRemontaIzdeliia) error {
	return c.removeEntity(key)
}

type DocumentPriemIzRemontaMaterialy struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	KliuchNomenklaturyKey          *Guid   `json:"КлючНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid   `json:"Размер_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	InstanceKey                    *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	DokumentOprikhodovaniiaKey     *Guid   `json:"ДокументОприходования_Key,omitempty"`
	Weight                         *Double `json:"Вес,omitempty"`
	Quantity                       *Int64  `json:"Количество,omitempty"`
}

func (DocumentPriemIzRemontaMaterialy) APIEntityType() string {
	return "Document_ПриемИзРемонта_Материалы"
}
func NewDocumentPriemIzRemontaMaterialy(data string, prevError error) (*DocumentPriemIzRemontaMaterialy, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPriemIzRemontaMaterialy)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPriemIzRemontaMaterialy(entity DocumentPriemIzRemontaMaterialy) (*DocumentPriemIzRemontaMaterialy, error) {
	return NewDocumentPriemIzRemontaMaterialy(c.createEntity(entity))
}
func (c *Client) DocumentPriemIzRemontaMaterialy(key PrimaryDocumentPriemIzRemontaMaterialy, fields []string) (*DocumentPriemIzRemontaMaterialy, error) {
	return NewDocumentPriemIzRemontaMaterialy(c.getEntity(key, fields))
}
func (c *Client) DocumentPriemIzRemontaMaterialys(where Where) (*[]DocumentPriemIzRemontaMaterialy, error) {
	type ReturnObj struct {
		Value []DocumentPriemIzRemontaMaterialy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПриемИзРемонта_Материалы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPriemIzRemontaMaterialy(key PrimaryDocumentPriemIzRemontaMaterialy, entity DocumentPriemIzRemontaMaterialy) (*DocumentPriemIzRemontaMaterialy, error) {
	return NewDocumentPriemIzRemontaMaterialy(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPriemIzRemontaMaterialy(key PrimaryDocumentPriemIzRemontaMaterialy) error {
	return c.removeEntity(key)
}

type CatalogTsveta struct {
	Key              Guid     `json:"Ref_Key,omitempty"`
	DataVersion      *String  `json:"DataVersion,omitempty"`
	Description      *String  `json:"Description,omitempty"`
	Code             *String  `json:"Code,omitempty"`
	OwnerKey         *Guid    `json:"Owner_Key,omitempty"`
	DeletionMark     *Boolean `json:"DeletionMark,omitempty"`
	Vyvodit          *Boolean `json:"Выводить,omitempty"`
	EstGruppaDefekta *Boolean `json:"ЕстьГруппаДефекта,omitempty"`
	EstGruppaTsveta  *Boolean `json:"ЕстьГруппаЦвета,omitempty"`
}

func (CatalogTsveta) APIEntityType() string {
	return "Catalog_Цвета"
}
func NewCatalogTsveta(data string, prevError error) (*CatalogTsveta, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogTsveta)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogTsveta(entity CatalogTsveta) (*CatalogTsveta, error) {
	return NewCatalogTsveta(c.createEntity(entity))
}
func (c *Client) CatalogTsveta(key PrimaryCatalogTsveta, fields []string) (*CatalogTsveta, error) {
	return NewCatalogTsveta(c.getEntity(key, fields))
}
func (c *Client) CatalogTsvetas(where Where) (*[]CatalogTsveta, error) {
	type ReturnObj struct {
		Value []CatalogTsveta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Цвета", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogTsveta(key PrimaryCatalogTsveta, entity CatalogTsveta) (*CatalogTsveta, error) {
	return NewCatalogTsveta(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogTsveta(key PrimaryCatalogTsveta) error {
	return c.removeEntity(key)
}

type DocumentStornirovanieOtchetaKomissioneraOProdazhakh struct {
	Key                                         Guid                                                                           `json:"Ref_Key,omitempty"`
	DataVersion                                 *String                                                                        `json:"DataVersion,omitempty"`
	Number                                      *String                                                                        `json:"Number,omitempty"`
	Date                                        *DateTime                                                                      `json:"Date,omitempty"`
	DeletionMark                                *Boolean                                                                       `json:"DeletionMark,omitempty"`
	Posted                                      *Boolean                                                                       `json:"Posted,omitempty"`
	ValiutaDokumentaKey                         *Guid                                                                          `json:"ВалютаДокумента_Key,omitempty"`
	Weight                                      *Double                                                                        `json:"ВесДокумента,omitempty"`
	DataVkhodiashchegoDokumenta                 *DateTime                                                                      `json:"ДатаВходящегоДокумента,omitempty"`
	DogovorKontragentaKey                       *Guid                                                                          `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie                           *String                                                                        `json:"ДокументОснование,omitempty"`
	KolichestvoDokumenta                        *Int64                                                                         `json:"КоличествоДокумента,omitempty"`
	Comment                                     *String                                                                        `json:"Комментарий,omitempty"`
	KontragentKey                               *Guid                                                                          `json:"Контрагент_Key,omitempty"`
	KratnostVzaimoraschetov                     *Int64                                                                         `json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov                         *Double                                                                        `json:"КурсВзаиморасчетов,omitempty"`
	NomenklaturnaiaGruppaKey                    *Guid                                                                          `json:"НоменклатурнаяГруппа_Key,omitempty"`
	NomerVkhodiashchegoDokumenta                *String                                                                        `json:"НомерВходящегоДокумента,omitempty"`
	OrganizatsiiaKey                            *Guid                                                                          `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                            *Guid                                                                          `json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey                            *Guid                                                                          `json:"Подразделение_Key,omitempty"`
	ProektKey                                   *Guid                                                                          `json:"Проект_Key,omitempty"`
	ProtsentKomissionnogoVoznagrazhdeniia       *Double                                                                        `json:"ПроцентКомиссионногоВознаграждения,omitempty"`
	Sdelka                                      *String                                                                        `json:"Сделка,omitempty"`
	SposobRaschetaKomissionnogoVoznagrazhdeniia *String                                                                        `json:"СпособРасчетаКомиссионногоВознаграждения,omitempty"`
	StavkaNDSVoznagrazhdeniia                   *String                                                                        `json:"СтавкаНДСВознаграждения,omitempty"`
	StatiaZatratKey                             *Guid                                                                          `json:"СтатьяЗатрат_Key,omitempty"`
	SummaVkliuchaetNDS                          *Boolean                                                                       `json:"СуммаВключаетНДС,omitempty"`
	SummaVoznagrazhdeniia                       *Double                                                                        `json:"СуммаВознаграждения,omitempty"`
	SumOfDocument                               *Double                                                                        `json:"СуммаДокумента,omitempty"`
	TipDokumenta                                *String                                                                        `json:"ТипДокумента,omitempty"`
	TipTsenKey                                  *Guid                                                                          `json:"ТипЦен_Key,omitempty"`
	UderzhatKomissionnoeVoznagrazhdenie         *Boolean                                                                       `json:"УдержатьКомиссионноеВознаграждение,omitempty"`
	UchityvatNDS                                *Boolean                                                                       `json:"УчитыватьНДС,omitempty"`
	DenezhnyeSredstva                           *[]DocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstvaRowType `json:"ДенежныеСредства,omitempty"`
	Goods                                       *[]DocumentStornirovanieOtchetaKomissioneraOProdazhakhTovaryRowType            `json:"Товары,omitempty"`
	DokumentOsnovanieType                       *String                                                                        `json:"ДокументОснование_Type,omitempty"`
	SdelkaType                                  *String                                                                        `json:"Сделка_Type,omitempty"`
}

func (DocumentStornirovanieOtchetaKomissioneraOProdazhakh) APIEntityType() string {
	return "Document_СторнированиеОтчетаКомиссионераОПродажах"
}
func NewDocumentStornirovanieOtchetaKomissioneraOProdazhakh(data string, prevError error) (*DocumentStornirovanieOtchetaKomissioneraOProdazhakh, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentStornirovanieOtchetaKomissioneraOProdazhakh)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentStornirovanieOtchetaKomissioneraOProdazhakh(entity DocumentStornirovanieOtchetaKomissioneraOProdazhakh) (*DocumentStornirovanieOtchetaKomissioneraOProdazhakh, error) {
	return NewDocumentStornirovanieOtchetaKomissioneraOProdazhakh(c.createEntity(entity))
}
func (c *Client) DocumentStornirovanieOtchetaKomissioneraOProdazhakh(key PrimaryDocumentStornirovanieOtchetaKomissioneraOProdazhakh, fields []string) (*DocumentStornirovanieOtchetaKomissioneraOProdazhakh, error) {
	return NewDocumentStornirovanieOtchetaKomissioneraOProdazhakh(c.getEntity(key, fields))
}
func (c *Client) DocumentStornirovanieOtchetaKomissioneraOProdazhakhs(where Where) (*[]DocumentStornirovanieOtchetaKomissioneraOProdazhakh, error) {
	type ReturnObj struct {
		Value []DocumentStornirovanieOtchetaKomissioneraOProdazhakh `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СторнированиеОтчетаКомиссионераОПродажах", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentStornirovanieOtchetaKomissioneraOProdazhakh(key PrimaryDocumentStornirovanieOtchetaKomissioneraOProdazhakh, entity DocumentStornirovanieOtchetaKomissioneraOProdazhakh) (*DocumentStornirovanieOtchetaKomissioneraOProdazhakh, error) {
	return NewDocumentStornirovanieOtchetaKomissioneraOProdazhakh(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentStornirovanieOtchetaKomissioneraOProdazhakh(key PrimaryDocumentStornirovanieOtchetaKomissioneraOProdazhakh) error {
	return c.removeEntity(key)
}

type DocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstva struct {
	Key                   Guid    `json:"Ref_Key,omitempty"`
	LineNumber            Int64   `json:"LineNumber,omitempty"`
	VidOtchetaPoPlatezham *String `json:"ВидОтчетаПоПлатежам,omitempty"`
	StavkaNDS             *String `json:"СтавкаНДС,omitempty"`
	Sum                   *Double `json:"Сумма,omitempty"`
	SummaNDS              *Double `json:"СуммаНДС,omitempty"`
}

func (DocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstva) APIEntityType() string {
	return "Document_СторнированиеОтчетаКомиссионераОПродажах_ДенежныеСредства"
}
func NewDocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstva(data string, prevError error) (*DocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstva, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstva)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstva(entity DocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstva) (*DocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstva, error) {
	return NewDocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstva(c.createEntity(entity))
}
func (c *Client) DocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstva(key PrimaryDocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstva, fields []string) (*DocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstva, error) {
	return NewDocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstva(c.getEntity(key, fields))
}
func (c *Client) DocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstvas(where Where) (*[]DocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstva, error) {
	type ReturnObj struct {
		Value []DocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstva `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СторнированиеОтчетаКомиссионераОПродажах_ДенежныеСредства", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstva(key PrimaryDocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstva, entity DocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstva) (*DocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstva, error) {
	return NewDocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstva(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstva(key PrimaryDocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstva) error {
	return c.removeEntity(key)
}

type DocumentStornirovanieOtchetaKomissioneraOProdazhakhTovary struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	Weight                         *Double `json:"Вес,omitempty"`
	DokumentPartiiKey              *Guid   `json:"ДокументПартии_Key,omitempty"`
	Quantity                       *Int64  `json:"Количество,omitempty"`
	ItemKey                        *Guid   `json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid   `json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	StavkaNDS                      *String `json:"СтавкаНДС,omitempty"`
	Sum                            *Double `json:"Сумма,omitempty"`
	SummaVoznagrazhdeniia          *Double `json:"СуммаВознаграждения,omitempty"`
	SummaNDS                       *Double `json:"СуммаНДС,omitempty"`
	SummaNDSVoznagrazhdeniia       *Double `json:"СуммаНДСВознаграждения,omitempty"`
	SummaNDSPeredachi              *Double `json:"СуммаНДСПередачи,omitempty"`
	SummaPeredachi                 *Double `json:"СуммаПередачи,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Double `json:"Цена,omitempty"`
	TsenaPeredachi                 *Double `json:"ЦенаПередачи,omitempty"`
}

func (DocumentStornirovanieOtchetaKomissioneraOProdazhakhTovary) APIEntityType() string {
	return "Document_СторнированиеОтчетаКомиссионераОПродажах_Товары"
}
func NewDocumentStornirovanieOtchetaKomissioneraOProdazhakhTovary(data string, prevError error) (*DocumentStornirovanieOtchetaKomissioneraOProdazhakhTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentStornirovanieOtchetaKomissioneraOProdazhakhTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentStornirovanieOtchetaKomissioneraOProdazhakhTovary(entity DocumentStornirovanieOtchetaKomissioneraOProdazhakhTovary) (*DocumentStornirovanieOtchetaKomissioneraOProdazhakhTovary, error) {
	return NewDocumentStornirovanieOtchetaKomissioneraOProdazhakhTovary(c.createEntity(entity))
}
func (c *Client) DocumentStornirovanieOtchetaKomissioneraOProdazhakhTovary(key PrimaryDocumentStornirovanieOtchetaKomissioneraOProdazhakhTovary, fields []string) (*DocumentStornirovanieOtchetaKomissioneraOProdazhakhTovary, error) {
	return NewDocumentStornirovanieOtchetaKomissioneraOProdazhakhTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentStornirovanieOtchetaKomissioneraOProdazhakhTovarys(where Where) (*[]DocumentStornirovanieOtchetaKomissioneraOProdazhakhTovary, error) {
	type ReturnObj struct {
		Value []DocumentStornirovanieOtchetaKomissioneraOProdazhakhTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СторнированиеОтчетаКомиссионераОПродажах_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentStornirovanieOtchetaKomissioneraOProdazhakhTovary(key PrimaryDocumentStornirovanieOtchetaKomissioneraOProdazhakhTovary, entity DocumentStornirovanieOtchetaKomissioneraOProdazhakhTovary) (*DocumentStornirovanieOtchetaKomissioneraOProdazhakhTovary, error) {
	return NewDocumentStornirovanieOtchetaKomissioneraOProdazhakhTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentStornirovanieOtchetaKomissioneraOProdazhakhTovary(key PrimaryDocumentStornirovanieOtchetaKomissioneraOProdazhakhTovary) error {
	return c.removeEntity(key)
}

type DocumentJournalDavalcheskieDokumenty struct {
	Ref              String    `json:"Ref,omitempty"`
	Type             *String   `json:"Type,omitempty"`
	Date             *DateTime `json:"Date,omitempty"`
	DeletionMark     *Boolean  `json:"DeletionMark,omitempty"`
	Number           *String   `json:"Number,omitempty"`
	Posted           *Boolean  `json:"Posted,omitempty"`
	Weight           *Double   `json:"Вес,omitempty"`
	DataVkh          *DateTime `json:"ДатаВх,omitempty"`
	Comment          *String   `json:"Комментарий,omitempty"`
	KontragentKey    *Guid     `json:"Контрагент_Key,omitempty"`
	Metall           *String   `json:"Металл,omitempty"`
	NomerVkh         *String   `json:"НомерВх,omitempty"`
	OrganizatsiiaKey *Guid     `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey *Guid     `json:"Ответственный_Key,omitempty"`
	RefType          String    `json:"Ref_Type,omitempty"`
	MetallType       *String   `json:"Металл_Type,omitempty"`
}

func (DocumentJournalDavalcheskieDokumenty) APIEntityType() string {
	return "DocumentJournal_ДавальческиеДокументы"
}
func NewDocumentJournalDavalcheskieDokumenty(data string, prevError error) (*DocumentJournalDavalcheskieDokumenty, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentJournalDavalcheskieDokumenty)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentJournalDavalcheskieDokumenty(entity DocumentJournalDavalcheskieDokumenty) (*DocumentJournalDavalcheskieDokumenty, error) {
	return NewDocumentJournalDavalcheskieDokumenty(c.createEntity(entity))
}
func (c *Client) DocumentJournalDavalcheskieDokumenty(key PrimaryDocumentJournalDavalcheskieDokumenty, fields []string) (*DocumentJournalDavalcheskieDokumenty, error) {
	return NewDocumentJournalDavalcheskieDokumenty(c.getEntity(key, fields))
}
func (c *Client) DocumentJournalDavalcheskieDokumentys(where Where) (*[]DocumentJournalDavalcheskieDokumenty, error) {
	type ReturnObj struct {
		Value []DocumentJournalDavalcheskieDokumenty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("DocumentJournal_ДавальческиеДокументы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentJournalDavalcheskieDokumenty(key PrimaryDocumentJournalDavalcheskieDokumenty, entity DocumentJournalDavalcheskieDokumenty) (*DocumentJournalDavalcheskieDokumenty, error) {
	return NewDocumentJournalDavalcheskieDokumenty(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentJournalDavalcheskieDokumenty(key PrimaryDocumentJournalDavalcheskieDokumenty) error {
	return c.removeEntity(key)
}

type CatalogfmAnketaKlienta struct {
	Key               Guid                                              `json:"Ref_Key,omitempty"`
	DataVersion       *String                                           `json:"DataVersion,omitempty"`
	Description       *String                                           `json:"Description,omitempty"`
	Code              *String                                           `json:"Code,omitempty"`
	OwnerKey          *Guid                                             `json:"Owner_Key,omitempty"`
	DeletionMark      *Boolean                                          `json:"DeletionMark,omitempty"`
	DannyeKontragenta *[]CatalogfmAnketaKlientaDannyeKontragentaRowType `json:"ДанныеКонтрагента,omitempty"`
}

func (CatalogfmAnketaKlienta) APIEntityType() string {
	return "Catalog_фмАнкетаКлиента"
}
func NewCatalogfmAnketaKlienta(data string, prevError error) (*CatalogfmAnketaKlienta, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogfmAnketaKlienta)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogfmAnketaKlienta(entity CatalogfmAnketaKlienta) (*CatalogfmAnketaKlienta, error) {
	return NewCatalogfmAnketaKlienta(c.createEntity(entity))
}
func (c *Client) CatalogfmAnketaKlienta(key PrimaryCatalogfmAnketaKlienta, fields []string) (*CatalogfmAnketaKlienta, error) {
	return NewCatalogfmAnketaKlienta(c.getEntity(key, fields))
}
func (c *Client) CatalogfmAnketaKlientas(where Where) (*[]CatalogfmAnketaKlienta, error) {
	type ReturnObj struct {
		Value []CatalogfmAnketaKlienta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_фмАнкетаКлиента", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogfmAnketaKlienta(key PrimaryCatalogfmAnketaKlienta, entity CatalogfmAnketaKlienta) (*CatalogfmAnketaKlienta, error) {
	return NewCatalogfmAnketaKlienta(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogfmAnketaKlienta(key PrimaryCatalogfmAnketaKlienta) error {
	return c.removeEntity(key)
}

type CatalogfmAnketaKlientaDannyeKontragenta struct {
	Key           Guid    `json:"Ref_Key,omitempty"`
	LineNumber    Int64   `json:"LineNumber,omitempty"`
	Kliuch        *String `json:"Ключ,omitempty"`
	Znachenie     *String `json:"Значение,omitempty"`
	ZnachenieType *String `json:"Значение_Type,omitempty"`
}

func (CatalogfmAnketaKlientaDannyeKontragenta) APIEntityType() string {
	return "Catalog_фмАнкетаКлиента_ДанныеКонтрагента"
}
func NewCatalogfmAnketaKlientaDannyeKontragenta(data string, prevError error) (*CatalogfmAnketaKlientaDannyeKontragenta, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogfmAnketaKlientaDannyeKontragenta)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogfmAnketaKlientaDannyeKontragenta(entity CatalogfmAnketaKlientaDannyeKontragenta) (*CatalogfmAnketaKlientaDannyeKontragenta, error) {
	return NewCatalogfmAnketaKlientaDannyeKontragenta(c.createEntity(entity))
}
func (c *Client) CatalogfmAnketaKlientaDannyeKontragenta(key PrimaryCatalogfmAnketaKlientaDannyeKontragenta, fields []string) (*CatalogfmAnketaKlientaDannyeKontragenta, error) {
	return NewCatalogfmAnketaKlientaDannyeKontragenta(c.getEntity(key, fields))
}
func (c *Client) CatalogfmAnketaKlientaDannyeKontragentas(where Where) (*[]CatalogfmAnketaKlientaDannyeKontragenta, error) {
	type ReturnObj struct {
		Value []CatalogfmAnketaKlientaDannyeKontragenta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_фмАнкетаКлиента_ДанныеКонтрагента", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogfmAnketaKlientaDannyeKontragenta(key PrimaryCatalogfmAnketaKlientaDannyeKontragenta, entity CatalogfmAnketaKlientaDannyeKontragenta) (*CatalogfmAnketaKlientaDannyeKontragenta, error) {
	return NewCatalogfmAnketaKlientaDannyeKontragenta(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogfmAnketaKlientaDannyeKontragenta(key PrimaryCatalogfmAnketaKlientaDannyeKontragenta) error {
	return c.removeEntity(key)
}

type CatalogVidyVzaimoraschetov struct {
	Key          Guid     `json:"Ref_Key,omitempty"`
	DataVersion  *String  `json:"DataVersion,omitempty"`
	Description  *String  `json:"Description,omitempty"`
	Code         *String  `json:"Code,omitempty"`
	DeletionMark *Boolean `json:"DeletionMark,omitempty"`
}

func (CatalogVidyVzaimoraschetov) APIEntityType() string {
	return "Catalog_ВидыВзаиморасчетов"
}
func NewCatalogVidyVzaimoraschetov(data string, prevError error) (*CatalogVidyVzaimoraschetov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogVidyVzaimoraschetov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogVidyVzaimoraschetov(entity CatalogVidyVzaimoraschetov) (*CatalogVidyVzaimoraschetov, error) {
	return NewCatalogVidyVzaimoraschetov(c.createEntity(entity))
}
func (c *Client) CatalogVidyVzaimoraschetov(key PrimaryCatalogVidyVzaimoraschetov, fields []string) (*CatalogVidyVzaimoraschetov, error) {
	return NewCatalogVidyVzaimoraschetov(c.getEntity(key, fields))
}
func (c *Client) CatalogVidyVzaimoraschetovs(where Where) (*[]CatalogVidyVzaimoraschetov, error) {
	type ReturnObj struct {
		Value []CatalogVidyVzaimoraschetov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ВидыВзаиморасчетов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogVidyVzaimoraschetov(key PrimaryCatalogVidyVzaimoraschetov, entity CatalogVidyVzaimoraschetov) (*CatalogVidyVzaimoraschetov, error) {
	return NewCatalogVidyVzaimoraschetov(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogVidyVzaimoraschetov(key PrimaryCatalogVidyVzaimoraschetov) error {
	return c.removeEntity(key)
}

type DocumentUstanovkaZnacheniiTochkiZakaza struct {
	Key              Guid                                                   `json:"Ref_Key,omitempty"`
	DataVersion      *String                                                `json:"DataVersion,omitempty"`
	Number           *String                                                `json:"Number,omitempty"`
	Date             *DateTime                                              `json:"Date,omitempty"`
	DeletionMark     *Boolean                                               `json:"DeletionMark,omitempty"`
	Posted           *Boolean                                               `json:"Posted,omitempty"`
	Comment          *String                                                `json:"Комментарий,omitempty"`
	OtvetstvennyiKey *Guid                                                  `json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey *Guid                                                  `json:"Подразделение_Key,omitempty"`
	DepartmentKey    *Guid                                                  `json:"Склад_Key,omitempty"`
	Goods            *[]DocumentUstanovkaZnacheniiTochkiZakazaTovaryRowType `json:"Товары,omitempty"`
}

func (DocumentUstanovkaZnacheniiTochkiZakaza) APIEntityType() string {
	return "Document_УстановкаЗначенийТочкиЗаказа"
}
func NewDocumentUstanovkaZnacheniiTochkiZakaza(data string, prevError error) (*DocumentUstanovkaZnacheniiTochkiZakaza, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentUstanovkaZnacheniiTochkiZakaza)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentUstanovkaZnacheniiTochkiZakaza(entity DocumentUstanovkaZnacheniiTochkiZakaza) (*DocumentUstanovkaZnacheniiTochkiZakaza, error) {
	return NewDocumentUstanovkaZnacheniiTochkiZakaza(c.createEntity(entity))
}
func (c *Client) DocumentUstanovkaZnacheniiTochkiZakaza(key PrimaryDocumentUstanovkaZnacheniiTochkiZakaza, fields []string) (*DocumentUstanovkaZnacheniiTochkiZakaza, error) {
	return NewDocumentUstanovkaZnacheniiTochkiZakaza(c.getEntity(key, fields))
}
func (c *Client) DocumentUstanovkaZnacheniiTochkiZakazas(where Where) (*[]DocumentUstanovkaZnacheniiTochkiZakaza, error) {
	type ReturnObj struct {
		Value []DocumentUstanovkaZnacheniiTochkiZakaza `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_УстановкаЗначенийТочкиЗаказа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentUstanovkaZnacheniiTochkiZakaza(key PrimaryDocumentUstanovkaZnacheniiTochkiZakaza, entity DocumentUstanovkaZnacheniiTochkiZakaza) (*DocumentUstanovkaZnacheniiTochkiZakaza, error) {
	return NewDocumentUstanovkaZnacheniiTochkiZakaza(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentUstanovkaZnacheniiTochkiZakaza(key PrimaryDocumentUstanovkaZnacheniiTochkiZakaza) error {
	return c.removeEntity(key)
}

type DocumentUstanovkaZnacheniiTochkiZakazaTovary struct {
	Key                                            Guid      `json:"Ref_Key,omitempty"`
	LineNumber                                     Int64     `json:"LineNumber,omitempty"`
	Weight                                         *Double   `json:"Вес,omitempty"`
	DataKon                                        *DateTime `json:"ДатаКон,omitempty"`
	DataNach                                       *DateTime `json:"ДатаНач,omitempty"`
	ZnachenieTochkiZakaza                          *Int64    `json:"ЗначениеТочкиЗаказа,omitempty"`
	MinimalnyiStrakhovoiZapas                      *Int64    `json:"МинимальныйСтраховойЗапас,omitempty"`
	ItemKey                                        *Guid     `json:"Номенклатура_Key,omitempty"`
	ProtsentnaiaStavkaZnacheniiaTochkiZakaza       *Int16    `json:"ПроцентнаяСтавкаЗначенияТочкиЗаказа,omitempty"`
	ProtsentnaiaStavkaMinimalnogoStrakhovogoZapasa *Int16    `json:"ПроцентнаяСтавкаМинимальногоСтраховогоЗапаса,omitempty"`
	SizeKey                                        *Guid     `json:"Размер_Key,omitempty"`
	DepartmentKey                                  *Guid     `json:"Склад_Key,omitempty"`
	SposobOpredeleniiaZnacheniiaTochkiZakaza       *String   `json:"СпособОпределенияЗначенияТочкиЗаказа,omitempty"`
}

func (DocumentUstanovkaZnacheniiTochkiZakazaTovary) APIEntityType() string {
	return "Document_УстановкаЗначенийТочкиЗаказа_Товары"
}
func NewDocumentUstanovkaZnacheniiTochkiZakazaTovary(data string, prevError error) (*DocumentUstanovkaZnacheniiTochkiZakazaTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentUstanovkaZnacheniiTochkiZakazaTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentUstanovkaZnacheniiTochkiZakazaTovary(entity DocumentUstanovkaZnacheniiTochkiZakazaTovary) (*DocumentUstanovkaZnacheniiTochkiZakazaTovary, error) {
	return NewDocumentUstanovkaZnacheniiTochkiZakazaTovary(c.createEntity(entity))
}
func (c *Client) DocumentUstanovkaZnacheniiTochkiZakazaTovary(key PrimaryDocumentUstanovkaZnacheniiTochkiZakazaTovary, fields []string) (*DocumentUstanovkaZnacheniiTochkiZakazaTovary, error) {
	return NewDocumentUstanovkaZnacheniiTochkiZakazaTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentUstanovkaZnacheniiTochkiZakazaTovarys(where Where) (*[]DocumentUstanovkaZnacheniiTochkiZakazaTovary, error) {
	type ReturnObj struct {
		Value []DocumentUstanovkaZnacheniiTochkiZakazaTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_УстановкаЗначенийТочкиЗаказа_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentUstanovkaZnacheniiTochkiZakazaTovary(key PrimaryDocumentUstanovkaZnacheniiTochkiZakazaTovary, entity DocumentUstanovkaZnacheniiTochkiZakazaTovary) (*DocumentUstanovkaZnacheniiTochkiZakazaTovary, error) {
	return NewDocumentUstanovkaZnacheniiTochkiZakazaTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentUstanovkaZnacheniiTochkiZakazaTovary(key PrimaryDocumentUstanovkaZnacheniiTochkiZakazaTovary) error {
	return c.removeEntity(key)
}

type CatalogZnacheniiaKodirovki struct {
	Key          Guid     `json:"Ref_Key,omitempty"`
	DataVersion  *String  `json:"DataVersion,omitempty"`
	Description  *String  `json:"Description,omitempty"`
	Code         *String  `json:"Code,omitempty"`
	OwnerKey     *Guid    `json:"Owner_Key,omitempty"`
	DeletionMark *Boolean `json:"DeletionMark,omitempty"`
}

func (CatalogZnacheniiaKodirovki) APIEntityType() string {
	return "Catalog_ЗначенияКодировки"
}
func NewCatalogZnacheniiaKodirovki(data string, prevError error) (*CatalogZnacheniiaKodirovki, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogZnacheniiaKodirovki)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogZnacheniiaKodirovki(entity CatalogZnacheniiaKodirovki) (*CatalogZnacheniiaKodirovki, error) {
	return NewCatalogZnacheniiaKodirovki(c.createEntity(entity))
}
func (c *Client) CatalogZnacheniiaKodirovki(key PrimaryCatalogZnacheniiaKodirovki, fields []string) (*CatalogZnacheniiaKodirovki, error) {
	return NewCatalogZnacheniiaKodirovki(c.getEntity(key, fields))
}
func (c *Client) CatalogZnacheniiaKodirovkis(where Where) (*[]CatalogZnacheniiaKodirovki, error) {
	type ReturnObj struct {
		Value []CatalogZnacheniiaKodirovki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ЗначенияКодировки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogZnacheniiaKodirovki(key PrimaryCatalogZnacheniiaKodirovki, entity CatalogZnacheniiaKodirovki) (*CatalogZnacheniiaKodirovki, error) {
	return NewCatalogZnacheniiaKodirovki(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogZnacheniiaKodirovki(key PrimaryCatalogZnacheniiaKodirovki) error {
	return c.removeEntity(key)
}

type CatalogPravilaProdazh struct {
	Key                 Guid                                  `json:"Ref_Key,omitempty"`
	DataVersion         *String                               `json:"DataVersion,omitempty"`
	Description         *String                               `json:"Description,omitempty"`
	Code                *String                               `json:"Code,omitempty"`
	DeletionMark        *Boolean                              `json:"DeletionMark,omitempty"`
	NalogooblozhenieNDS *String                               `json:"НалогообложениеНДС,omitempty"`
	VidTsenKey          *Guid                                 `json:"ВидЦен_Key,omitempty"`
	Deistvuet           *Boolean                              `json:"Действует,omitempty"`
	Goods               *[]CatalogPravilaProdazhTovaryRowType `json:"Товары,omitempty"`
}

func (CatalogPravilaProdazh) APIEntityType() string {
	return "Catalog_ПравилаПродаж"
}
func NewCatalogPravilaProdazh(data string, prevError error) (*CatalogPravilaProdazh, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogPravilaProdazh)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogPravilaProdazh(entity CatalogPravilaProdazh) (*CatalogPravilaProdazh, error) {
	return NewCatalogPravilaProdazh(c.createEntity(entity))
}
func (c *Client) CatalogPravilaProdazh(key PrimaryCatalogPravilaProdazh, fields []string) (*CatalogPravilaProdazh, error) {
	return NewCatalogPravilaProdazh(c.getEntity(key, fields))
}
func (c *Client) CatalogPravilaProdazhs(where Where) (*[]CatalogPravilaProdazh, error) {
	type ReturnObj struct {
		Value []CatalogPravilaProdazh `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ПравилаПродаж", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogPravilaProdazh(key PrimaryCatalogPravilaProdazh, entity CatalogPravilaProdazh) (*CatalogPravilaProdazh, error) {
	return NewCatalogPravilaProdazh(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogPravilaProdazh(key PrimaryCatalogPravilaProdazh) error {
	return c.removeEntity(key)
}

type CatalogPravilaProdazhTovary struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	ItemKey                        *Guid   `json:"Номенклатура_Key,omitempty"`
	KharakteristikiNomenklaturyKey *Guid   `json:"ХарактеристикиНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid   `json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	Cost                           *Double `json:"Цена,omitempty"`
	Quantity                       *Int64  `json:"Количество,omitempty"`
	Weight                         *Double `json:"Вес,omitempty"`
}

func (CatalogPravilaProdazhTovary) APIEntityType() string {
	return "Catalog_ПравилаПродаж_Товары"
}
func NewCatalogPravilaProdazhTovary(data string, prevError error) (*CatalogPravilaProdazhTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogPravilaProdazhTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogPravilaProdazhTovary(entity CatalogPravilaProdazhTovary) (*CatalogPravilaProdazhTovary, error) {
	return NewCatalogPravilaProdazhTovary(c.createEntity(entity))
}
func (c *Client) CatalogPravilaProdazhTovary(key PrimaryCatalogPravilaProdazhTovary, fields []string) (*CatalogPravilaProdazhTovary, error) {
	return NewCatalogPravilaProdazhTovary(c.getEntity(key, fields))
}
func (c *Client) CatalogPravilaProdazhTovarys(where Where) (*[]CatalogPravilaProdazhTovary, error) {
	type ReturnObj struct {
		Value []CatalogPravilaProdazhTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ПравилаПродаж_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogPravilaProdazhTovary(key PrimaryCatalogPravilaProdazhTovary, entity CatalogPravilaProdazhTovary) (*CatalogPravilaProdazhTovary, error) {
	return NewCatalogPravilaProdazhTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogPravilaProdazhTovary(key PrimaryCatalogPravilaProdazhTovary) error {
	return c.removeEntity(key)
}

type DocumentPostuplenieDopRaskhodov struct {
	Key                           Guid                                            `json:"Ref_Key,omitempty"`
	DataVersion                   *String                                         `json:"DataVersion,omitempty"`
	Number                        *String                                         `json:"Number,omitempty"`
	Date                          *DateTime                                       `json:"Date,omitempty"`
	DeletionMark                  *Boolean                                        `json:"DeletionMark,omitempty"`
	Posted                        *Boolean                                        `json:"Posted,omitempty"`
	ValiutaDokumentaKey           *Guid                                           `json:"ВалютаДокумента_Key,omitempty"`
	Weight                        *Double                                         `json:"ВесДокумента,omitempty"`
	OperationType                 *String                                         `json:"ВидОперации,omitempty"`
	DataVkhodiashchegoDokumenta   *DateTime                                       `json:"ДатаВходящегоДокумента,omitempty"`
	DogovorKontragentaKey         *Guid                                           `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie             *String                                         `json:"ДокументОснование,omitempty"`
	DokumentSozdanVIuTD           *Boolean                                        `json:"ДокументСозданВЮТД,omitempty"`
	KolichestvoDokumenta          *Int64                                          `json:"КоличествоДокумента,omitempty"`
	Comment                       *String                                         `json:"Комментарий,omitempty"`
	KontragentKey                 *Guid                                           `json:"Контрагент_Key,omitempty"`
	KratnostVzaimoraschetov       *Int64                                          `json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov           *Double                                         `json:"КурсВзаиморасчетов,omitempty"`
	NDSVkliuchenVStoimost         *Boolean                                        `json:"НДСВключенВСтоимость,omitempty"`
	NomerVkhodiashchegoDokumenta  *String                                         `json:"НомерВходящегоДокумента,omitempty"`
	OrganizatsiiaKey              *Guid                                           `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey              *Guid                                           `json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey              *Guid                                           `json:"Подразделение_Key,omitempty"`
	Sdelka                        *String                                         `json:"Сделка,omitempty"`
	Soderzhanie                   *String                                         `json:"Содержание,omitempty"`
	SposobRaspredeleniia          *String                                         `json:"СпособРаспределения,omitempty"`
	StavkaNDS                     *String                                         `json:"СтавкаНДС,omitempty"`
	Sum                           *Double                                         `json:"Сумма,omitempty"`
	SummaVkliuchaetNDS            *Boolean                                        `json:"СуммаВключаетНДС,omitempty"`
	SumOfDocument                 *Double                                         `json:"СуммаДокумента,omitempty"`
	SummaNDS                      *Double                                         `json:"СуммаНДС,omitempty"`
	TipDokumenta                  *String                                         `json:"ТипДокумента,omitempty"`
	UchityvatNDS                  *Boolean                                        `json:"УчитыватьНДС,omitempty"`
	KhoziaistvennaiaOperatsiiaKey *Guid                                           `json:"ХозяйственнаяОперация_Key,omitempty"`
	Goods                         *[]DocumentPostuplenieDopRaskhodovTovaryRowType `json:"Товары,omitempty"`
	DokumentOsnovanieType         *String                                         `json:"ДокументОснование_Type,omitempty"`
	SdelkaType                    *String                                         `json:"Сделка_Type,omitempty"`
}

func (DocumentPostuplenieDopRaskhodov) APIEntityType() string {
	return "Document_ПоступлениеДопРасходов"
}
func NewDocumentPostuplenieDopRaskhodov(data string, prevError error) (*DocumentPostuplenieDopRaskhodov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPostuplenieDopRaskhodov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPostuplenieDopRaskhodov(entity DocumentPostuplenieDopRaskhodov) (*DocumentPostuplenieDopRaskhodov, error) {
	return NewDocumentPostuplenieDopRaskhodov(c.createEntity(entity))
}
func (c *Client) DocumentPostuplenieDopRaskhodov(key PrimaryDocumentPostuplenieDopRaskhodov, fields []string) (*DocumentPostuplenieDopRaskhodov, error) {
	return NewDocumentPostuplenieDopRaskhodov(c.getEntity(key, fields))
}
func (c *Client) DocumentPostuplenieDopRaskhodovs(where Where) (*[]DocumentPostuplenieDopRaskhodov, error) {
	type ReturnObj struct {
		Value []DocumentPostuplenieDopRaskhodov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПоступлениеДопРасходов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPostuplenieDopRaskhodov(key PrimaryDocumentPostuplenieDopRaskhodov, entity DocumentPostuplenieDopRaskhodov) (*DocumentPostuplenieDopRaskhodov, error) {
	return NewDocumentPostuplenieDopRaskhodov(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPostuplenieDopRaskhodov(key PrimaryDocumentPostuplenieDopRaskhodov) error {
	return c.removeEntity(key)
}

type DocumentPostuplenieDopRaskhodovTovary struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	Weight                         *Double `json:"Вес,omitempty"`
	DokumentPartii                 *String `json:"ДокументПартии,omitempty"`
	Quantity                       *Int64  `json:"Количество,omitempty"`
	ItemKey                        *Guid   `json:"Номенклатура_Key,omitempty"`
	ProektKey                      *Guid   `json:"Проект_Key,omitempty"`
	SizeKey                        *Guid   `json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	StavkaNDS                      *String `json:"СтавкаНДС,omitempty"`
	Sum                            *Double `json:"Сумма,omitempty"`
	SummaNDS                       *Double `json:"СуммаНДС,omitempty"`
	SummaRaspredeleniia            *Double `json:"СуммаРаспределения,omitempty"`
	SummaTovara                    *Double `json:"СуммаТовара,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	DokumentPartiiType             *String `json:"ДокументПартии_Type,omitempty"`
}

func (DocumentPostuplenieDopRaskhodovTovary) APIEntityType() string {
	return "Document_ПоступлениеДопРасходов_Товары"
}
func NewDocumentPostuplenieDopRaskhodovTovary(data string, prevError error) (*DocumentPostuplenieDopRaskhodovTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPostuplenieDopRaskhodovTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPostuplenieDopRaskhodovTovary(entity DocumentPostuplenieDopRaskhodovTovary) (*DocumentPostuplenieDopRaskhodovTovary, error) {
	return NewDocumentPostuplenieDopRaskhodovTovary(c.createEntity(entity))
}
func (c *Client) DocumentPostuplenieDopRaskhodovTovary(key PrimaryDocumentPostuplenieDopRaskhodovTovary, fields []string) (*DocumentPostuplenieDopRaskhodovTovary, error) {
	return NewDocumentPostuplenieDopRaskhodovTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentPostuplenieDopRaskhodovTovarys(where Where) (*[]DocumentPostuplenieDopRaskhodovTovary, error) {
	type ReturnObj struct {
		Value []DocumentPostuplenieDopRaskhodovTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПоступлениеДопРасходов_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPostuplenieDopRaskhodovTovary(key PrimaryDocumentPostuplenieDopRaskhodovTovary, entity DocumentPostuplenieDopRaskhodovTovary) (*DocumentPostuplenieDopRaskhodovTovary, error) {
	return NewDocumentPostuplenieDopRaskhodovTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPostuplenieDopRaskhodovTovary(key PrimaryDocumentPostuplenieDopRaskhodovTovary) error {
	return c.removeEntity(key)
}

type CatalogKhoziaistvennyeOperatsii struct {
	Key              Guid     `json:"Ref_Key,omitempty"`
	DataVersion      *String  `json:"DataVersion,omitempty"`
	Description      *String  `json:"Description,omitempty"`
	Code             *String  `json:"Code,omitempty"`
	DeletionMark     *Boolean `json:"DeletionMark,omitempty"`
	KodKhozOperatsii *String  `json:"КодХозОперации,omitempty"`
}

func (CatalogKhoziaistvennyeOperatsii) APIEntityType() string {
	return "Catalog_ХозяйственныеОперации"
}
func NewCatalogKhoziaistvennyeOperatsii(data string, prevError error) (*CatalogKhoziaistvennyeOperatsii, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogKhoziaistvennyeOperatsii)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogKhoziaistvennyeOperatsii(entity CatalogKhoziaistvennyeOperatsii) (*CatalogKhoziaistvennyeOperatsii, error) {
	return NewCatalogKhoziaistvennyeOperatsii(c.createEntity(entity))
}
func (c *Client) CatalogKhoziaistvennyeOperatsii(key PrimaryCatalogKhoziaistvennyeOperatsii, fields []string) (*CatalogKhoziaistvennyeOperatsii, error) {
	return NewCatalogKhoziaistvennyeOperatsii(c.getEntity(key, fields))
}
func (c *Client) CatalogKhoziaistvennyeOperatsiis(where Where) (*[]CatalogKhoziaistvennyeOperatsii, error) {
	type ReturnObj struct {
		Value []CatalogKhoziaistvennyeOperatsii `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ХозяйственныеОперации", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogKhoziaistvennyeOperatsii(key PrimaryCatalogKhoziaistvennyeOperatsii, entity CatalogKhoziaistvennyeOperatsii) (*CatalogKhoziaistvennyeOperatsii, error) {
	return NewCatalogKhoziaistvennyeOperatsii(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogKhoziaistvennyeOperatsii(key PrimaryCatalogKhoziaistvennyeOperatsii) error {
	return c.removeEntity(key)
}

type DocumentAvansovyiOtchet struct {
	Key                   Guid                                                  `json:"Ref_Key,omitempty"`
	DataVersion           *String                                               `json:"DataVersion,omitempty"`
	Number                *String                                               `json:"Number,omitempty"`
	Date                  *DateTime                                             `json:"Date,omitempty"`
	DeletionMark          *Boolean                                              `json:"DeletionMark,omitempty"`
	Posted                *Boolean                                              `json:"Posted,omitempty"`
	ValiutaDokumentaKey   *Guid                                                 `json:"ВалютаДокумента_Key,omitempty"`
	DokumentOsnovanie     *String                                               `json:"ДокументОснование,omitempty"`
	Comment               *String                                               `json:"Комментарий,omitempty"`
	KratnostDokumenta     *Int64                                                `json:"КратностьДокумента,omitempty"`
	KursDokumenta         *Double                                               `json:"КурсДокумента,omitempty"`
	NaznachenieAvansa     *String                                               `json:"НазначениеАванса,omitempty"`
	NDSVkliuchenVStoimost *Boolean                                              `json:"НДСВключенВСтоимость,omitempty"`
	OrganizatsiiaKey      *Guid                                                 `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey      *Guid                                                 `json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey      *Guid                                                 `json:"Подразделение_Key,omitempty"`
	SkladOrderKey         *Guid                                                 `json:"СкладОрдер_Key,omitempty"`
	SummaVkliuchaetNDS    *Boolean                                              `json:"СуммаВключаетНДС,omitempty"`
	SumOfDocument         *Double                                               `json:"СуммаДокумента,omitempty"`
	TipDokumenta          *String                                               `json:"ТипДокумента,omitempty"`
	TipTsenKey            *Guid                                                 `json:"ТипЦен_Key,omitempty"`
	UchityvatNDS          *Boolean                                              `json:"УчитыватьНДС,omitempty"`
	FizLitsoKey           *Guid                                                 `json:"ФизЛицо_Key,omitempty"`
	VydannyeAvansy        *[]DocumentAvansovyiOtchetVydannyeAvansyRowType       `json:"ВыданныеАвансы,omitempty"`
	Goods                 *[]DocumentAvansovyiOtchetTovaryRowType               `json:"Товары,omitempty"`
	OplataPostavshchikam  *[]DocumentAvansovyiOtchetOplataPostavshchikamRowType `json:"ОплатаПоставщикам,omitempty"`
	Prochee               *[]DocumentAvansovyiOtchetProcheeRowType              `json:"Прочее,omitempty"`
	DokumentOsnovanieType *String                                               `json:"ДокументОснование_Type,omitempty"`
}

func (DocumentAvansovyiOtchet) APIEntityType() string {
	return "Document_АвансовыйОтчет"
}
func NewDocumentAvansovyiOtchet(data string, prevError error) (*DocumentAvansovyiOtchet, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentAvansovyiOtchet)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentAvansovyiOtchet(entity DocumentAvansovyiOtchet) (*DocumentAvansovyiOtchet, error) {
	return NewDocumentAvansovyiOtchet(c.createEntity(entity))
}
func (c *Client) DocumentAvansovyiOtchet(key PrimaryDocumentAvansovyiOtchet, fields []string) (*DocumentAvansovyiOtchet, error) {
	return NewDocumentAvansovyiOtchet(c.getEntity(key, fields))
}
func (c *Client) DocumentAvansovyiOtchets(where Where) (*[]DocumentAvansovyiOtchet, error) {
	type ReturnObj struct {
		Value []DocumentAvansovyiOtchet `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_АвансовыйОтчет", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentAvansovyiOtchet(key PrimaryDocumentAvansovyiOtchet, entity DocumentAvansovyiOtchet) (*DocumentAvansovyiOtchet, error) {
	return NewDocumentAvansovyiOtchet(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentAvansovyiOtchet(key PrimaryDocumentAvansovyiOtchet) error {
	return c.removeEntity(key)
}

type DocumentAvansovyiOtchetVydannyeAvansy struct {
	Key                        Guid    `json:"Ref_Key,omitempty"`
	LineNumber                 Int64   `json:"LineNumber,omitempty"`
	RaskhodnyiKassovyiOrderKey *Guid   `json:"РасходныйКассовыйОрдер_Key,omitempty"`
	Sum                        *Double `json:"Сумма,omitempty"`
}

func (DocumentAvansovyiOtchetVydannyeAvansy) APIEntityType() string {
	return "Document_АвансовыйОтчет_ВыданныеАвансы"
}
func NewDocumentAvansovyiOtchetVydannyeAvansy(data string, prevError error) (*DocumentAvansovyiOtchetVydannyeAvansy, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentAvansovyiOtchetVydannyeAvansy)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentAvansovyiOtchetVydannyeAvansy(entity DocumentAvansovyiOtchetVydannyeAvansy) (*DocumentAvansovyiOtchetVydannyeAvansy, error) {
	return NewDocumentAvansovyiOtchetVydannyeAvansy(c.createEntity(entity))
}
func (c *Client) DocumentAvansovyiOtchetVydannyeAvansy(key PrimaryDocumentAvansovyiOtchetVydannyeAvansy, fields []string) (*DocumentAvansovyiOtchetVydannyeAvansy, error) {
	return NewDocumentAvansovyiOtchetVydannyeAvansy(c.getEntity(key, fields))
}
func (c *Client) DocumentAvansovyiOtchetVydannyeAvansys(where Where) (*[]DocumentAvansovyiOtchetVydannyeAvansy, error) {
	type ReturnObj struct {
		Value []DocumentAvansovyiOtchetVydannyeAvansy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_АвансовыйОтчет_ВыданныеАвансы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentAvansovyiOtchetVydannyeAvansy(key PrimaryDocumentAvansovyiOtchetVydannyeAvansy, entity DocumentAvansovyiOtchetVydannyeAvansy) (*DocumentAvansovyiOtchetVydannyeAvansy, error) {
	return NewDocumentAvansovyiOtchetVydannyeAvansy(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentAvansovyiOtchetVydannyeAvansy(key PrimaryDocumentAvansovyiOtchetVydannyeAvansy) error {
	return c.removeEntity(key)
}

type DocumentAvansovyiOtchetTovary struct {
	Key                            Guid      `json:"Ref_Key,omitempty"`
	LineNumber                     Int64     `json:"LineNumber,omitempty"`
	Weight                         *Double   `json:"Вес,omitempty"`
	VidDokVkhodiashchii            *String   `json:"ВидДокВходящий,omitempty"`
	DataVkhodiashchegoDokumenta    *DateTime `json:"ДатаВходящегоДокумента,omitempty"`
	DataSF                         *DateTime `json:"ДатаСФ,omitempty"`
	ZakazKlientaKey                *Guid     `json:"ЗаказКлиента_Key,omitempty"`
	KachestvoKey                   *Guid     `json:"Качество_Key,omitempty"`
	Quantity                       *Int64    `json:"Количество,omitempty"`
	ItemKey                        *Guid     `json:"Номенклатура_Key,omitempty"`
	NomerVkhodiashchegoDokumenta   *String   `json:"НомерВходящегоДокумента,omitempty"`
	NomerSF                        *String   `json:"НомерСФ,omitempty"`
	SupplierKey                    *Guid     `json:"Поставщик_Key,omitempty"`
	PredieiavlenSF                 *Boolean  `json:"ПредъявленСФ,omitempty"`
	ProektKey                      *Guid     `json:"Проект_Key,omitempty"`
	ProtsentRoznichnoiNatsenki     *Double   `json:"ПроцентРозничнойНаценки,omitempty"`
	SizeKey                        *Guid     `json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid     `json:"СерияНоменклатуры_Key,omitempty"`
	DepartmentKey                  *Guid     `json:"Склад_Key,omitempty"`
	StavkaNDS                      *String   `json:"СтавкаНДС,omitempty"`
	Sum                            *Double   `json:"Сумма,omitempty"`
	SummaNDS                       *Double   `json:"СуммаНДС,omitempty"`
	SchetFakturaKey                *Guid     `json:"СчетФактура_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid     `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Double   `json:"Цена,omitempty"`
	RetailCost                     *Double   `json:"ЦенаВРознице,omitempty"`
}

func (DocumentAvansovyiOtchetTovary) APIEntityType() string {
	return "Document_АвансовыйОтчет_Товары"
}
func NewDocumentAvansovyiOtchetTovary(data string, prevError error) (*DocumentAvansovyiOtchetTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentAvansovyiOtchetTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentAvansovyiOtchetTovary(entity DocumentAvansovyiOtchetTovary) (*DocumentAvansovyiOtchetTovary, error) {
	return NewDocumentAvansovyiOtchetTovary(c.createEntity(entity))
}
func (c *Client) DocumentAvansovyiOtchetTovary(key PrimaryDocumentAvansovyiOtchetTovary, fields []string) (*DocumentAvansovyiOtchetTovary, error) {
	return NewDocumentAvansovyiOtchetTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentAvansovyiOtchetTovarys(where Where) (*[]DocumentAvansovyiOtchetTovary, error) {
	type ReturnObj struct {
		Value []DocumentAvansovyiOtchetTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_АвансовыйОтчет_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentAvansovyiOtchetTovary(key PrimaryDocumentAvansovyiOtchetTovary, entity DocumentAvansovyiOtchetTovary) (*DocumentAvansovyiOtchetTovary, error) {
	return NewDocumentAvansovyiOtchetTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentAvansovyiOtchetTovary(key PrimaryDocumentAvansovyiOtchetTovary) error {
	return c.removeEntity(key)
}

type DocumentAvansovyiOtchetOplataPostavshchikam struct {
	Key                          Guid      `json:"Ref_Key,omitempty"`
	LineNumber                   Int64     `json:"LineNumber,omitempty"`
	VidDokVkhodiashchii          *String   `json:"ВидДокВходящий,omitempty"`
	DataVkhodiashchegoDokumenta  *DateTime `json:"ДатаВходящегоДокумента,omitempty"`
	DogovorKontragentaKey        *Guid     `json:"ДоговорКонтрагента_Key,omitempty"`
	KontragentKey                *Guid     `json:"Контрагент_Key,omitempty"`
	KratnostVzaimoraschetov      *Int64    `json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov          *Double   `json:"КурсВзаиморасчетов,omitempty"`
	NomerVkhodiashchegoDokumenta *String   `json:"НомерВходящегоДокумента,omitempty"`
	Sdelka                       *String   `json:"Сделка,omitempty"`
	Soderzhanie                  *String   `json:"Содержание,omitempty"`
	Sum                          *Double   `json:"Сумма,omitempty"`
	SummaVzaimoraschetov         *Double   `json:"СуммаВзаиморасчетов,omitempty"`
	SdelkaType                   *String   `json:"Сделка_Type,omitempty"`
}

func (DocumentAvansovyiOtchetOplataPostavshchikam) APIEntityType() string {
	return "Document_АвансовыйОтчет_ОплатаПоставщикам"
}
func NewDocumentAvansovyiOtchetOplataPostavshchikam(data string, prevError error) (*DocumentAvansovyiOtchetOplataPostavshchikam, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentAvansovyiOtchetOplataPostavshchikam)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentAvansovyiOtchetOplataPostavshchikam(entity DocumentAvansovyiOtchetOplataPostavshchikam) (*DocumentAvansovyiOtchetOplataPostavshchikam, error) {
	return NewDocumentAvansovyiOtchetOplataPostavshchikam(c.createEntity(entity))
}
func (c *Client) DocumentAvansovyiOtchetOplataPostavshchikam(key PrimaryDocumentAvansovyiOtchetOplataPostavshchikam, fields []string) (*DocumentAvansovyiOtchetOplataPostavshchikam, error) {
	return NewDocumentAvansovyiOtchetOplataPostavshchikam(c.getEntity(key, fields))
}
func (c *Client) DocumentAvansovyiOtchetOplataPostavshchikams(where Where) (*[]DocumentAvansovyiOtchetOplataPostavshchikam, error) {
	type ReturnObj struct {
		Value []DocumentAvansovyiOtchetOplataPostavshchikam `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_АвансовыйОтчет_ОплатаПоставщикам", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentAvansovyiOtchetOplataPostavshchikam(key PrimaryDocumentAvansovyiOtchetOplataPostavshchikam, entity DocumentAvansovyiOtchetOplataPostavshchikam) (*DocumentAvansovyiOtchetOplataPostavshchikam, error) {
	return NewDocumentAvansovyiOtchetOplataPostavshchikam(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentAvansovyiOtchetOplataPostavshchikam(key PrimaryDocumentAvansovyiOtchetOplataPostavshchikam) error {
	return c.removeEntity(key)
}

type DocumentAvansovyiOtchetProchee struct {
	Key                          Guid      `json:"Ref_Key,omitempty"`
	LineNumber                   Int64     `json:"LineNumber,omitempty"`
	VidDokVkhodiashchii          *String   `json:"ВидДокВходящий,omitempty"`
	DataVkhodiashchegoDokumenta  *DateTime `json:"ДатаВходящегоДокумента,omitempty"`
	DataSF                       *DateTime `json:"ДатаСФ,omitempty"`
	Zakaz                        *String   `json:"Заказ,omitempty"`
	ItemKey                      *Guid     `json:"Номенклатура_Key,omitempty"`
	NomenklaturnaiaGruppaKey     *Guid     `json:"НоменклатурнаяГруппа_Key,omitempty"`
	NomerVkhodiashchegoDokumenta *String   `json:"НомерВходящегоДокумента,omitempty"`
	NomerSF                      *String   `json:"НомерСФ,omitempty"`
	PodrazdelenieKey             *Guid     `json:"Подразделение_Key,omitempty"`
	SupplierKey                  *Guid     `json:"Поставщик_Key,omitempty"`
	PredieiavlenSF               *Boolean  `json:"ПредъявленСФ,omitempty"`
	ProektKey                    *Guid     `json:"Проект_Key,omitempty"`
	Soderzhanie                  *String   `json:"Содержание,omitempty"`
	StavkaNDS                    *String   `json:"СтавкаНДС,omitempty"`
	StatiaZatratKey              *Guid     `json:"СтатьяЗатрат_Key,omitempty"`
	Sum                          *Double   `json:"Сумма,omitempty"`
	SummaNDS                     *Double   `json:"СуммаНДС,omitempty"`
	SchetFakturaKey              *Guid     `json:"СчетФактура_Key,omitempty"`
	ZakazType                    *String   `json:"Заказ_Type,omitempty"`
}

func (DocumentAvansovyiOtchetProchee) APIEntityType() string {
	return "Document_АвансовыйОтчет_Прочее"
}
func NewDocumentAvansovyiOtchetProchee(data string, prevError error) (*DocumentAvansovyiOtchetProchee, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentAvansovyiOtchetProchee)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentAvansovyiOtchetProchee(entity DocumentAvansovyiOtchetProchee) (*DocumentAvansovyiOtchetProchee, error) {
	return NewDocumentAvansovyiOtchetProchee(c.createEntity(entity))
}
func (c *Client) DocumentAvansovyiOtchetProchee(key PrimaryDocumentAvansovyiOtchetProchee, fields []string) (*DocumentAvansovyiOtchetProchee, error) {
	return NewDocumentAvansovyiOtchetProchee(c.getEntity(key, fields))
}
func (c *Client) DocumentAvansovyiOtchetProchees(where Where) (*[]DocumentAvansovyiOtchetProchee, error) {
	type ReturnObj struct {
		Value []DocumentAvansovyiOtchetProchee `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_АвансовыйОтчет_Прочее", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentAvansovyiOtchetProchee(key PrimaryDocumentAvansovyiOtchetProchee, entity DocumentAvansovyiOtchetProchee) (*DocumentAvansovyiOtchetProchee, error) {
	return NewDocumentAvansovyiOtchetProchee(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentAvansovyiOtchetProchee(key PrimaryDocumentAvansovyiOtchetProchee) error {
	return c.removeEntity(key)
}

type CatalogDolzhnostiOrganizatsii struct {
	Key          Guid     `json:"Ref_Key,omitempty"`
	DataVersion  *String  `json:"DataVersion,omitempty"`
	Description  *String  `json:"Description,omitempty"`
	Code         *String  `json:"Code,omitempty"`
	DeletionMark *Boolean `json:"DeletionMark,omitempty"`
}

func (CatalogDolzhnostiOrganizatsii) APIEntityType() string {
	return "Catalog_ДолжностиОрганизаций"
}
func NewCatalogDolzhnostiOrganizatsii(data string, prevError error) (*CatalogDolzhnostiOrganizatsii, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogDolzhnostiOrganizatsii)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogDolzhnostiOrganizatsii(entity CatalogDolzhnostiOrganizatsii) (*CatalogDolzhnostiOrganizatsii, error) {
	return NewCatalogDolzhnostiOrganizatsii(c.createEntity(entity))
}
func (c *Client) CatalogDolzhnostiOrganizatsii(key PrimaryCatalogDolzhnostiOrganizatsii, fields []string) (*CatalogDolzhnostiOrganizatsii, error) {
	return NewCatalogDolzhnostiOrganizatsii(c.getEntity(key, fields))
}
func (c *Client) CatalogDolzhnostiOrganizatsiis(where Where) (*[]CatalogDolzhnostiOrganizatsii, error) {
	type ReturnObj struct {
		Value []CatalogDolzhnostiOrganizatsii `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ДолжностиОрганизаций", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogDolzhnostiOrganizatsii(key PrimaryCatalogDolzhnostiOrganizatsii, entity CatalogDolzhnostiOrganizatsii) (*CatalogDolzhnostiOrganizatsii, error) {
	return NewCatalogDolzhnostiOrganizatsii(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogDolzhnostiOrganizatsii(key PrimaryCatalogDolzhnostiOrganizatsii) error {
	return c.removeEntity(key)
}

type CatalogAnalitikaTipaIzdeliia struct {
	Key            Guid     `json:"Ref_Key,omitempty"`
	DataVersion    *String  `json:"DataVersion,omitempty"`
	Description    *String  `json:"Description,omitempty"`
	Code           *String  `json:"Code,omitempty"`
	OwnerKey       *Guid    `json:"Owner_Key,omitempty"`
	ParentKey      *Guid    `json:"Parent_Key,omitempty"`
	IsFolder       *Boolean `json:"IsFolder,omitempty"`
	DeletionMark   *Boolean `json:"DeletionMark,omitempty"`
	BIdentifikator *String  `json:"Б_Идентификатор,omitempty"`
}

func (CatalogAnalitikaTipaIzdeliia) APIEntityType() string {
	return "Catalog_АналитикаТипаИзделия"
}
func NewCatalogAnalitikaTipaIzdeliia(data string, prevError error) (*CatalogAnalitikaTipaIzdeliia, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogAnalitikaTipaIzdeliia)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogAnalitikaTipaIzdeliia(entity CatalogAnalitikaTipaIzdeliia) (*CatalogAnalitikaTipaIzdeliia, error) {
	return NewCatalogAnalitikaTipaIzdeliia(c.createEntity(entity))
}
func (c *Client) CatalogAnalitikaTipaIzdeliia(key PrimaryCatalogAnalitikaTipaIzdeliia, fields []string) (*CatalogAnalitikaTipaIzdeliia, error) {
	return NewCatalogAnalitikaTipaIzdeliia(c.getEntity(key, fields))
}
func (c *Client) CatalogAnalitikaTipaIzdeliias(where Where) (*[]CatalogAnalitikaTipaIzdeliia, error) {
	type ReturnObj struct {
		Value []CatalogAnalitikaTipaIzdeliia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_АналитикаТипаИзделия", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogAnalitikaTipaIzdeliia(key PrimaryCatalogAnalitikaTipaIzdeliia, entity CatalogAnalitikaTipaIzdeliia) (*CatalogAnalitikaTipaIzdeliia, error) {
	return NewCatalogAnalitikaTipaIzdeliia(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogAnalitikaTipaIzdeliia(key PrimaryCatalogAnalitikaTipaIzdeliia) error {
	return c.removeEntity(key)
}

type CatalogDopolnitelnyePechatnyeFormy struct {
	Key                                      Guid                                                       `json:"Ref_Key,omitempty"`
	DataVersion                              *String                                                    `json:"DataVersion,omitempty"`
	Description                              *String                                                    `json:"Description,omitempty"`
	DeletionMark                             *Boolean                                                   `json:"DeletionMark,omitempty"`
	KhranilishcheVneshneiObrabotkiBase64Data *Binary                                                    `json:"ХранилищеВнешнейОбработки_Base64Data,omitempty"`
	Publikatsiia                             *String                                                    `json:"Публикация,omitempty"`
	Prinadlezhnost                           *[]CatalogDopolnitelnyePechatnyeFormyPrinadlezhnostRowType `json:"Принадлежность,omitempty"`
	KhranilishcheVneshneiObrabotkiType       *String                                                    `json:"ХранилищеВнешнейОбработки_Type,omitempty"`
	KhranilishcheVneshneiObrabotki           *Stream                                                    `json:"ХранилищеВнешнейОбработки,omitempty"`
}

func (CatalogDopolnitelnyePechatnyeFormy) APIEntityType() string {
	return "Catalog_ДополнительныеПечатныеФормы"
}
func NewCatalogDopolnitelnyePechatnyeFormy(data string, prevError error) (*CatalogDopolnitelnyePechatnyeFormy, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogDopolnitelnyePechatnyeFormy)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogDopolnitelnyePechatnyeFormy(entity CatalogDopolnitelnyePechatnyeFormy) (*CatalogDopolnitelnyePechatnyeFormy, error) {
	return NewCatalogDopolnitelnyePechatnyeFormy(c.createEntity(entity))
}
func (c *Client) CatalogDopolnitelnyePechatnyeFormy(key PrimaryCatalogDopolnitelnyePechatnyeFormy, fields []string) (*CatalogDopolnitelnyePechatnyeFormy, error) {
	return NewCatalogDopolnitelnyePechatnyeFormy(c.getEntity(key, fields))
}
func (c *Client) CatalogDopolnitelnyePechatnyeFormys(where Where) (*[]CatalogDopolnitelnyePechatnyeFormy, error) {
	type ReturnObj struct {
		Value []CatalogDopolnitelnyePechatnyeFormy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ДополнительныеПечатныеФормы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogDopolnitelnyePechatnyeFormy(key PrimaryCatalogDopolnitelnyePechatnyeFormy, entity CatalogDopolnitelnyePechatnyeFormy) (*CatalogDopolnitelnyePechatnyeFormy, error) {
	return NewCatalogDopolnitelnyePechatnyeFormy(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogDopolnitelnyePechatnyeFormy(key PrimaryCatalogDopolnitelnyePechatnyeFormy) error {
	return c.removeEntity(key)
}

type CatalogDopolnitelnyePechatnyeFormyPrinadlezhnost struct {
	Key                   Guid    `json:"Ref_Key,omitempty"`
	LineNumber            Int64   `json:"LineNumber,omitempty"`
	PredstavlenieObieekta *String `json:"ПредставлениеОбъекта,omitempty"`
	SsylkaObieekta        *String `json:"СсылкаОбъекта,omitempty"`
	SsylkaObieektaType    *String `json:"СсылкаОбъекта_Type,omitempty"`
}

func (CatalogDopolnitelnyePechatnyeFormyPrinadlezhnost) APIEntityType() string {
	return "Catalog_ДополнительныеПечатныеФормы_Принадлежность"
}
func NewCatalogDopolnitelnyePechatnyeFormyPrinadlezhnost(data string, prevError error) (*CatalogDopolnitelnyePechatnyeFormyPrinadlezhnost, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogDopolnitelnyePechatnyeFormyPrinadlezhnost)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogDopolnitelnyePechatnyeFormyPrinadlezhnost(entity CatalogDopolnitelnyePechatnyeFormyPrinadlezhnost) (*CatalogDopolnitelnyePechatnyeFormyPrinadlezhnost, error) {
	return NewCatalogDopolnitelnyePechatnyeFormyPrinadlezhnost(c.createEntity(entity))
}
func (c *Client) CatalogDopolnitelnyePechatnyeFormyPrinadlezhnost(key PrimaryCatalogDopolnitelnyePechatnyeFormyPrinadlezhnost, fields []string) (*CatalogDopolnitelnyePechatnyeFormyPrinadlezhnost, error) {
	return NewCatalogDopolnitelnyePechatnyeFormyPrinadlezhnost(c.getEntity(key, fields))
}
func (c *Client) CatalogDopolnitelnyePechatnyeFormyPrinadlezhnosts(where Where) (*[]CatalogDopolnitelnyePechatnyeFormyPrinadlezhnost, error) {
	type ReturnObj struct {
		Value []CatalogDopolnitelnyePechatnyeFormyPrinadlezhnost `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ДополнительныеПечатныеФормы_Принадлежность", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogDopolnitelnyePechatnyeFormyPrinadlezhnost(key PrimaryCatalogDopolnitelnyePechatnyeFormyPrinadlezhnost, entity CatalogDopolnitelnyePechatnyeFormyPrinadlezhnost) (*CatalogDopolnitelnyePechatnyeFormyPrinadlezhnost, error) {
	return NewCatalogDopolnitelnyePechatnyeFormyPrinadlezhnost(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogDopolnitelnyePechatnyeFormyPrinadlezhnost(key PrimaryCatalogDopolnitelnyePechatnyeFormyPrinadlezhnost) error {
	return c.removeEntity(key)
}

type MemberCardsType struct {
	Key          Guid     `json:"Ref_Key,omitempty"`
	DataVersion  *String  `json:"DataVersion,omitempty"`
	Description  *String  `json:"Description,omitempty"`
	Code         *String  `json:"Code,omitempty"`
	DeletionMark *Boolean `json:"DeletionMark,omitempty"`
}

func (MemberCardsType) APIEntityType() string {
	return "Catalog_ВидыДисконтныхКарт"
}
func NewMemberCardsType(data string, prevError error) (*MemberCardsType, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(MemberCardsType)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateMemberCardsType(entity MemberCardsType) (*MemberCardsType, error) {
	return NewMemberCardsType(c.createEntity(entity))
}
func (c *Client) MemberCardsType(key PrimaryMemberCardsType, fields []string) (*MemberCardsType, error) {
	return NewMemberCardsType(c.getEntity(key, fields))
}
func (c *Client) MemberCardsTypes(where Where) (*[]MemberCardsType, error) {
	type ReturnObj struct {
		Value []MemberCardsType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ВидыДисконтныхКарт", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateMemberCardsType(key PrimaryMemberCardsType, entity MemberCardsType) (*MemberCardsType, error) {
	return NewMemberCardsType(c.updateEntity(key, entity))
}
func (c *Client) DeleteMemberCardsType(key PrimaryMemberCardsType) error {
	return c.removeEntity(key)
}

type DocumentRegistratsiiaNaSaite struct {
	Key                    Guid      `json:"Ref_Key,omitempty"`
	DataVersion            *String   `json:"DataVersion,omitempty"`
	Number                 *String   `json:"Number,omitempty"`
	Date                   *DateTime `json:"Date,omitempty"`
	DeletionMark           *Boolean  `json:"DeletionMark,omitempty"`
	Posted                 *Boolean  `json:"Posted,omitempty"`
	Naimenovanie           *String   `json:"Наименование,omitempty"`
	NaimenovaniePolnoe     *String   `json:"НаименованиеПолное,omitempty"`
	INN                    *String   `json:"ИНН,omitempty"`
	KPP                    *String   `json:"КПП,omitempty"`
	FIO                    *String   `json:"ФИО,omitempty"`
	Telefon                *String   `json:"Телефон,omitempty"`
	AdresElektronnoiPochty *String   `json:"АдресЭлектроннойПочты,omitempty"`
	Comment                *String   `json:"Комментарий,omitempty"`
	KontragentKey          *Guid     `json:"Контрагент_Key,omitempty"`
	Registratsiia          *Boolean  `json:"Регистрация,omitempty"`
	OrganizatsiiaKey       *Guid     `json:"Организация_Key,omitempty"`
	DogovorKontragentaKey  *Guid     `json:"ДоговорКонтрагента_Key,omitempty"`
	PravoDostupa           *String   `json:"ПравоДоступа,omitempty"`
}

func (DocumentRegistratsiiaNaSaite) APIEntityType() string {
	return "Document_РегистрацияНаСайте"
}
func NewDocumentRegistratsiiaNaSaite(data string, prevError error) (*DocumentRegistratsiiaNaSaite, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentRegistratsiiaNaSaite)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentRegistratsiiaNaSaite(entity DocumentRegistratsiiaNaSaite) (*DocumentRegistratsiiaNaSaite, error) {
	return NewDocumentRegistratsiiaNaSaite(c.createEntity(entity))
}
func (c *Client) DocumentRegistratsiiaNaSaite(key PrimaryDocumentRegistratsiiaNaSaite, fields []string) (*DocumentRegistratsiiaNaSaite, error) {
	return NewDocumentRegistratsiiaNaSaite(c.getEntity(key, fields))
}
func (c *Client) DocumentRegistratsiiaNaSaites(where Where) (*[]DocumentRegistratsiiaNaSaite, error) {
	type ReturnObj struct {
		Value []DocumentRegistratsiiaNaSaite `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_РегистрацияНаСайте", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentRegistratsiiaNaSaite(key PrimaryDocumentRegistratsiiaNaSaite, entity DocumentRegistratsiiaNaSaite) (*DocumentRegistratsiiaNaSaite, error) {
	return NewDocumentRegistratsiiaNaSaite(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentRegistratsiiaNaSaite(key PrimaryDocumentRegistratsiiaNaSaite) error {
	return c.removeEntity(key)
}

type CatalogObrabotkiObsluzhivaniiaTO struct {
	Key                 Guid                                             `json:"Ref_Key,omitempty"`
	DataVersion         *String                                          `json:"DataVersion,omitempty"`
	Description         *String                                          `json:"Description,omitempty"`
	Code                *String                                          `json:"Code,omitempty"`
	DeletionMark        *Boolean                                         `json:"DeletionMark,omitempty"`
	Versiia             *Double                                          `json:"Версия,omitempty"`
	VersiiaAPI          *Double                                          `json:"ВерсияAPI,omitempty"`
	Vid                 *String                                          `json:"Вид,omitempty"`
	Identifikator       *String                                          `json:"Идентификатор,omitempty"`
	ImiaFaila           *String                                          `json:"ИмяФайла,omitempty"`
	ObrabotkaBase64Data *Binary                                          `json:"Обработка_Base64Data,omitempty"`
	Opisanie            *String                                          `json:"Описание,omitempty"`
	Modeli              *[]CatalogObrabotkiObsluzhivaniiaTOModeliRowType `json:"Модели,omitempty"`
	ObrabotkaType       *String                                          `json:"Обработка_Type,omitempty"`
	Obrabotka           *Stream                                          `json:"Обработка,omitempty"`
}

func (CatalogObrabotkiObsluzhivaniiaTO) APIEntityType() string {
	return "Catalog_ОбработкиОбслуживанияТО"
}
func NewCatalogObrabotkiObsluzhivaniiaTO(data string, prevError error) (*CatalogObrabotkiObsluzhivaniiaTO, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogObrabotkiObsluzhivaniiaTO)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogObrabotkiObsluzhivaniiaTO(entity CatalogObrabotkiObsluzhivaniiaTO) (*CatalogObrabotkiObsluzhivaniiaTO, error) {
	return NewCatalogObrabotkiObsluzhivaniiaTO(c.createEntity(entity))
}
func (c *Client) CatalogObrabotkiObsluzhivaniiaTO(key PrimaryCatalogObrabotkiObsluzhivaniiaTO, fields []string) (*CatalogObrabotkiObsluzhivaniiaTO, error) {
	return NewCatalogObrabotkiObsluzhivaniiaTO(c.getEntity(key, fields))
}
func (c *Client) CatalogObrabotkiObsluzhivaniiaTOs(where Where) (*[]CatalogObrabotkiObsluzhivaniiaTO, error) {
	type ReturnObj struct {
		Value []CatalogObrabotkiObsluzhivaniiaTO `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ОбработкиОбслуживанияТО", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogObrabotkiObsluzhivaniiaTO(key PrimaryCatalogObrabotkiObsluzhivaniiaTO, entity CatalogObrabotkiObsluzhivaniiaTO) (*CatalogObrabotkiObsluzhivaniiaTO, error) {
	return NewCatalogObrabotkiObsluzhivaniiaTO(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogObrabotkiObsluzhivaniiaTO(key PrimaryCatalogObrabotkiObsluzhivaniiaTO) error {
	return c.removeEntity(key)
}

type CatalogObrabotkiObsluzhivaniiaTOModeli struct {
	Key        Guid    `json:"Ref_Key,omitempty"`
	LineNumber Int64   `json:"LineNumber,omitempty"`
	Model      *String `json:"Модель,omitempty"`
}

func (CatalogObrabotkiObsluzhivaniiaTOModeli) APIEntityType() string {
	return "Catalog_ОбработкиОбслуживанияТО_Модели"
}
func NewCatalogObrabotkiObsluzhivaniiaTOModeli(data string, prevError error) (*CatalogObrabotkiObsluzhivaniiaTOModeli, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogObrabotkiObsluzhivaniiaTOModeli)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogObrabotkiObsluzhivaniiaTOModeli(entity CatalogObrabotkiObsluzhivaniiaTOModeli) (*CatalogObrabotkiObsluzhivaniiaTOModeli, error) {
	return NewCatalogObrabotkiObsluzhivaniiaTOModeli(c.createEntity(entity))
}
func (c *Client) CatalogObrabotkiObsluzhivaniiaTOModeli(key PrimaryCatalogObrabotkiObsluzhivaniiaTOModeli, fields []string) (*CatalogObrabotkiObsluzhivaniiaTOModeli, error) {
	return NewCatalogObrabotkiObsluzhivaniiaTOModeli(c.getEntity(key, fields))
}
func (c *Client) CatalogObrabotkiObsluzhivaniiaTOModelis(where Where) (*[]CatalogObrabotkiObsluzhivaniiaTOModeli, error) {
	type ReturnObj struct {
		Value []CatalogObrabotkiObsluzhivaniiaTOModeli `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ОбработкиОбслуживанияТО_Модели", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogObrabotkiObsluzhivaniiaTOModeli(key PrimaryCatalogObrabotkiObsluzhivaniiaTOModeli, entity CatalogObrabotkiObsluzhivaniiaTOModeli) (*CatalogObrabotkiObsluzhivaniiaTOModeli, error) {
	return NewCatalogObrabotkiObsluzhivaniiaTOModeli(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogObrabotkiObsluzhivaniiaTOModeli(key PrimaryCatalogObrabotkiObsluzhivaniiaTOModeli) error {
	return c.removeEntity(key)
}

type CatalogNastroikaIntervalov struct {
	Key              Guid                                                 `json:"Ref_Key,omitempty"`
	DataVersion      *String                                              `json:"DataVersion,omitempty"`
	Description      *String                                              `json:"Description,omitempty"`
	DeletionMark     *Boolean                                             `json:"DeletionMark,omitempty"`
	TablichnaiaChast *[]CatalogNastroikaIntervalovTablichnaiaChastRowType `json:"ТабличнаяЧасть,omitempty"`
}

func (CatalogNastroikaIntervalov) APIEntityType() string {
	return "Catalog_НастройкаИнтервалов"
}
func NewCatalogNastroikaIntervalov(data string, prevError error) (*CatalogNastroikaIntervalov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogNastroikaIntervalov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogNastroikaIntervalov(entity CatalogNastroikaIntervalov) (*CatalogNastroikaIntervalov, error) {
	return NewCatalogNastroikaIntervalov(c.createEntity(entity))
}
func (c *Client) CatalogNastroikaIntervalov(key PrimaryCatalogNastroikaIntervalov, fields []string) (*CatalogNastroikaIntervalov, error) {
	return NewCatalogNastroikaIntervalov(c.getEntity(key, fields))
}
func (c *Client) CatalogNastroikaIntervalovs(where Where) (*[]CatalogNastroikaIntervalov, error) {
	type ReturnObj struct {
		Value []CatalogNastroikaIntervalov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкаИнтервалов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogNastroikaIntervalov(key PrimaryCatalogNastroikaIntervalov, entity CatalogNastroikaIntervalov) (*CatalogNastroikaIntervalov, error) {
	return NewCatalogNastroikaIntervalov(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogNastroikaIntervalov(key PrimaryCatalogNastroikaIntervalov) error {
	return c.removeEntity(key)
}

type CatalogNastroikaIntervalovTablichnaiaChast struct {
	Key              Guid    `json:"Ref_Key,omitempty"`
	LineNumber       Int64   `json:"LineNumber,omitempty"`
	KonetsIntervala  *Int64  `json:"КонецИнтервала,omitempty"`
	NachaloIntervala *Int64  `json:"НачалоИнтервала,omitempty"`
	Podpis           *String `json:"Подпись,omitempty"`
}

func (CatalogNastroikaIntervalovTablichnaiaChast) APIEntityType() string {
	return "Catalog_НастройкаИнтервалов_ТабличнаяЧасть"
}
func NewCatalogNastroikaIntervalovTablichnaiaChast(data string, prevError error) (*CatalogNastroikaIntervalovTablichnaiaChast, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogNastroikaIntervalovTablichnaiaChast)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogNastroikaIntervalovTablichnaiaChast(entity CatalogNastroikaIntervalovTablichnaiaChast) (*CatalogNastroikaIntervalovTablichnaiaChast, error) {
	return NewCatalogNastroikaIntervalovTablichnaiaChast(c.createEntity(entity))
}
func (c *Client) CatalogNastroikaIntervalovTablichnaiaChast(key PrimaryCatalogNastroikaIntervalovTablichnaiaChast, fields []string) (*CatalogNastroikaIntervalovTablichnaiaChast, error) {
	return NewCatalogNastroikaIntervalovTablichnaiaChast(c.getEntity(key, fields))
}
func (c *Client) CatalogNastroikaIntervalovTablichnaiaChasts(where Where) (*[]CatalogNastroikaIntervalovTablichnaiaChast, error) {
	type ReturnObj struct {
		Value []CatalogNastroikaIntervalovTablichnaiaChast `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкаИнтервалов_ТабличнаяЧасть", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogNastroikaIntervalovTablichnaiaChast(key PrimaryCatalogNastroikaIntervalovTablichnaiaChast, entity CatalogNastroikaIntervalovTablichnaiaChast) (*CatalogNastroikaIntervalovTablichnaiaChast, error) {
	return NewCatalogNastroikaIntervalovTablichnaiaChast(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogNastroikaIntervalovTablichnaiaChast(key PrimaryCatalogNastroikaIntervalovTablichnaiaChast) error {
	return c.removeEntity(key)
}

type CatalogProfiliGruppDostupa struct {
	Key                                Guid                                                    `json:"Ref_Key,omitempty"`
	DataVersion                        *String                                                 `json:"DataVersion,omitempty"`
	Description                        *String                                                 `json:"Description,omitempty"`
	Code                               *String                                                 `json:"Code,omitempty"`
	DeletionMark                       *Boolean                                                `json:"DeletionMark,omitempty"`
	Comment                            *String                                                 `json:"Комментарий,omitempty"`
	IdentifikatorPostavliaemykhDannykh *Guid                                                   `json:"ИдентификаторПоставляемыхДанных,omitempty"`
	Roli                               *[]CatalogProfiliGruppDostupaRoliRowType                `json:"Роли,omitempty"`
	VidyDostupa                        *[]CatalogProfiliGruppDostupaVidyDostupaRowType         `json:"ВидыДоступа,omitempty"`
	ZnacheniiaDostupa                  *[]CatalogProfiliGruppDostupaZnacheniiaDostupaRowType   `json:"ЗначенияДоступа,omitempty"`
	DostupPoPodsistemam                *[]CatalogProfiliGruppDostupaDostupPoPodsistemamRowType `json:"ДоступПоПодсистемам,omitempty"`
}

func (CatalogProfiliGruppDostupa) APIEntityType() string {
	return "Catalog_ПрофилиГруппДоступа"
}
func NewCatalogProfiliGruppDostupa(data string, prevError error) (*CatalogProfiliGruppDostupa, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogProfiliGruppDostupa)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogProfiliGruppDostupa(entity CatalogProfiliGruppDostupa) (*CatalogProfiliGruppDostupa, error) {
	return NewCatalogProfiliGruppDostupa(c.createEntity(entity))
}
func (c *Client) CatalogProfiliGruppDostupa(key PrimaryCatalogProfiliGruppDostupa, fields []string) (*CatalogProfiliGruppDostupa, error) {
	return NewCatalogProfiliGruppDostupa(c.getEntity(key, fields))
}
func (c *Client) CatalogProfiliGruppDostupas(where Where) (*[]CatalogProfiliGruppDostupa, error) {
	type ReturnObj struct {
		Value []CatalogProfiliGruppDostupa `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ПрофилиГруппДоступа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogProfiliGruppDostupa(key PrimaryCatalogProfiliGruppDostupa, entity CatalogProfiliGruppDostupa) (*CatalogProfiliGruppDostupa, error) {
	return NewCatalogProfiliGruppDostupa(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogProfiliGruppDostupa(key PrimaryCatalogProfiliGruppDostupa) error {
	return c.removeEntity(key)
}

type CatalogProfiliGruppDostupaRoli struct {
	Key        Guid  `json:"Ref_Key,omitempty"`
	LineNumber Int64 `json:"LineNumber,omitempty"`
	RolKey     *Guid `json:"Роль_Key,omitempty"`
}

func (CatalogProfiliGruppDostupaRoli) APIEntityType() string {
	return "Catalog_ПрофилиГруппДоступа_Роли"
}
func NewCatalogProfiliGruppDostupaRoli(data string, prevError error) (*CatalogProfiliGruppDostupaRoli, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogProfiliGruppDostupaRoli)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogProfiliGruppDostupaRoli(entity CatalogProfiliGruppDostupaRoli) (*CatalogProfiliGruppDostupaRoli, error) {
	return NewCatalogProfiliGruppDostupaRoli(c.createEntity(entity))
}
func (c *Client) CatalogProfiliGruppDostupaRoli(key PrimaryCatalogProfiliGruppDostupaRoli, fields []string) (*CatalogProfiliGruppDostupaRoli, error) {
	return NewCatalogProfiliGruppDostupaRoli(c.getEntity(key, fields))
}
func (c *Client) CatalogProfiliGruppDostupaRolis(where Where) (*[]CatalogProfiliGruppDostupaRoli, error) {
	type ReturnObj struct {
		Value []CatalogProfiliGruppDostupaRoli `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ПрофилиГруппДоступа_Роли", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogProfiliGruppDostupaRoli(key PrimaryCatalogProfiliGruppDostupaRoli, entity CatalogProfiliGruppDostupaRoli) (*CatalogProfiliGruppDostupaRoli, error) {
	return NewCatalogProfiliGruppDostupaRoli(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogProfiliGruppDostupaRoli(key PrimaryCatalogProfiliGruppDostupaRoli) error {
	return c.removeEntity(key)
}

type CatalogProfiliGruppDostupaVidyDostupa struct {
	Key               Guid     `json:"Ref_Key,omitempty"`
	LineNumber        Int64    `json:"LineNumber,omitempty"`
	VidDostupa        *String  `json:"ВидДоступа,omitempty"`
	Predustanovlennyi *Boolean `json:"Предустановленный,omitempty"`
	VseRazresheny     *Boolean `json:"ВсеРазрешены,omitempty"`
	VidDostupaType    *String  `json:"ВидДоступа_Type,omitempty"`
}

func (CatalogProfiliGruppDostupaVidyDostupa) APIEntityType() string {
	return "Catalog_ПрофилиГруппДоступа_ВидыДоступа"
}
func NewCatalogProfiliGruppDostupaVidyDostupa(data string, prevError error) (*CatalogProfiliGruppDostupaVidyDostupa, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogProfiliGruppDostupaVidyDostupa)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogProfiliGruppDostupaVidyDostupa(entity CatalogProfiliGruppDostupaVidyDostupa) (*CatalogProfiliGruppDostupaVidyDostupa, error) {
	return NewCatalogProfiliGruppDostupaVidyDostupa(c.createEntity(entity))
}
func (c *Client) CatalogProfiliGruppDostupaVidyDostupa(key PrimaryCatalogProfiliGruppDostupaVidyDostupa, fields []string) (*CatalogProfiliGruppDostupaVidyDostupa, error) {
	return NewCatalogProfiliGruppDostupaVidyDostupa(c.getEntity(key, fields))
}
func (c *Client) CatalogProfiliGruppDostupaVidyDostupas(where Where) (*[]CatalogProfiliGruppDostupaVidyDostupa, error) {
	type ReturnObj struct {
		Value []CatalogProfiliGruppDostupaVidyDostupa `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ПрофилиГруппДоступа_ВидыДоступа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogProfiliGruppDostupaVidyDostupa(key PrimaryCatalogProfiliGruppDostupaVidyDostupa, entity CatalogProfiliGruppDostupaVidyDostupa) (*CatalogProfiliGruppDostupaVidyDostupa, error) {
	return NewCatalogProfiliGruppDostupaVidyDostupa(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogProfiliGruppDostupaVidyDostupa(key PrimaryCatalogProfiliGruppDostupaVidyDostupa) error {
	return c.removeEntity(key)
}

type CatalogProfiliGruppDostupaZnacheniiaDostupa struct {
	Key                  Guid    `json:"Ref_Key,omitempty"`
	LineNumber           Int64   `json:"LineNumber,omitempty"`
	VidDostupa           *String `json:"ВидДоступа,omitempty"`
	ZnachenieDostupa     *String `json:"ЗначениеДоступа,omitempty"`
	VidDostupaType       *String `json:"ВидДоступа_Type,omitempty"`
	ZnachenieDostupaType *String `json:"ЗначениеДоступа_Type,omitempty"`
}

func (CatalogProfiliGruppDostupaZnacheniiaDostupa) APIEntityType() string {
	return "Catalog_ПрофилиГруппДоступа_ЗначенияДоступа"
}
func NewCatalogProfiliGruppDostupaZnacheniiaDostupa(data string, prevError error) (*CatalogProfiliGruppDostupaZnacheniiaDostupa, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogProfiliGruppDostupaZnacheniiaDostupa)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogProfiliGruppDostupaZnacheniiaDostupa(entity CatalogProfiliGruppDostupaZnacheniiaDostupa) (*CatalogProfiliGruppDostupaZnacheniiaDostupa, error) {
	return NewCatalogProfiliGruppDostupaZnacheniiaDostupa(c.createEntity(entity))
}
func (c *Client) CatalogProfiliGruppDostupaZnacheniiaDostupa(key PrimaryCatalogProfiliGruppDostupaZnacheniiaDostupa, fields []string) (*CatalogProfiliGruppDostupaZnacheniiaDostupa, error) {
	return NewCatalogProfiliGruppDostupaZnacheniiaDostupa(c.getEntity(key, fields))
}
func (c *Client) CatalogProfiliGruppDostupaZnacheniiaDostupas(where Where) (*[]CatalogProfiliGruppDostupaZnacheniiaDostupa, error) {
	type ReturnObj struct {
		Value []CatalogProfiliGruppDostupaZnacheniiaDostupa `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ПрофилиГруппДоступа_ЗначенияДоступа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogProfiliGruppDostupaZnacheniiaDostupa(key PrimaryCatalogProfiliGruppDostupaZnacheniiaDostupa, entity CatalogProfiliGruppDostupaZnacheniiaDostupa) (*CatalogProfiliGruppDostupaZnacheniiaDostupa, error) {
	return NewCatalogProfiliGruppDostupaZnacheniiaDostupa(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogProfiliGruppDostupaZnacheniiaDostupa(key PrimaryCatalogProfiliGruppDostupaZnacheniiaDostupa) error {
	return c.removeEntity(key)
}

type CatalogProfiliGruppDostupaDostupPoPodsistemam struct {
	Key            Guid     `json:"Ref_Key,omitempty"`
	LineNumber     Int64    `json:"LineNumber,omitempty"`
	ImiaPodsistemy *String  `json:"ИмяПодсистемы,omitempty"`
	ImiaObieekta   *String  `json:"ИмяОбъекта,omitempty"`
	Prosmotr       *Boolean `json:"Просмотр,omitempty"`
	Redaktirovanie *Boolean `json:"Редактирование,omitempty"`
	Pechat         *Boolean `json:"Печать,omitempty"`
	PokazVersii    *Boolean `json:"ПоказВерсии,omitempty"`
}

func (CatalogProfiliGruppDostupaDostupPoPodsistemam) APIEntityType() string {
	return "Catalog_ПрофилиГруппДоступа_ДоступПоПодсистемам"
}
func NewCatalogProfiliGruppDostupaDostupPoPodsistemam(data string, prevError error) (*CatalogProfiliGruppDostupaDostupPoPodsistemam, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogProfiliGruppDostupaDostupPoPodsistemam)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogProfiliGruppDostupaDostupPoPodsistemam(entity CatalogProfiliGruppDostupaDostupPoPodsistemam) (*CatalogProfiliGruppDostupaDostupPoPodsistemam, error) {
	return NewCatalogProfiliGruppDostupaDostupPoPodsistemam(c.createEntity(entity))
}
func (c *Client) CatalogProfiliGruppDostupaDostupPoPodsistemam(key PrimaryCatalogProfiliGruppDostupaDostupPoPodsistemam, fields []string) (*CatalogProfiliGruppDostupaDostupPoPodsistemam, error) {
	return NewCatalogProfiliGruppDostupaDostupPoPodsistemam(c.getEntity(key, fields))
}
func (c *Client) CatalogProfiliGruppDostupaDostupPoPodsistemams(where Where) (*[]CatalogProfiliGruppDostupaDostupPoPodsistemam, error) {
	type ReturnObj struct {
		Value []CatalogProfiliGruppDostupaDostupPoPodsistemam `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ПрофилиГруппДоступа_ДоступПоПодсистемам", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogProfiliGruppDostupaDostupPoPodsistemam(key PrimaryCatalogProfiliGruppDostupaDostupPoPodsistemam, entity CatalogProfiliGruppDostupaDostupPoPodsistemam) (*CatalogProfiliGruppDostupaDostupPoPodsistemam, error) {
	return NewCatalogProfiliGruppDostupaDostupPoPodsistemam(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogProfiliGruppDostupaDostupPoPodsistemam(key PrimaryCatalogProfiliGruppDostupaDostupPoPodsistemam) error {
	return c.removeEntity(key)
}

type CatalogNastroikiDliaKurera struct {
	Key                                         Guid                                                    `json:"Ref_Key,omitempty"`
	DataVersion                                 *String                                                 `json:"DataVersion,omitempty"`
	Description                                 *String                                                 `json:"Description,omitempty"`
	Code                                        *String                                                 `json:"Code,omitempty"`
	DeletionMark                                *Boolean                                                `json:"DeletionMark,omitempty"`
	OrganizatsiiaKey                            *Guid                                                   `json:"Организация_Key,omitempty"`
	DepartmentKey                               *Guid                                                   `json:"Склад_Key,omitempty"`
	KassaKKMKey                                 *Guid                                                   `json:"КассаККМ_Key,omitempty"`
	VidOplaty2                                  *String                                                 `json:"ВидОплаты2,omitempty"`
	VidOplaty2PoUmolchaniiuKey                  *Guid                                                   `json:"ВидОплаты2ПоУмолчанию_Key,omitempty"`
	IspolzovatVidOplaty2                        *Boolean                                                `json:"ИспользоватьВидОплаты2,omitempty"`
	PechatatVtoroiEkzempliarTovarnogoCheka      *Boolean                                                `json:"ПечататьВторойЭкземплярТоварногоЧека,omitempty"`
	PechatatImiaKassira                         *Boolean                                                `json:"ПечататьИмяКассира,omitempty"`
	PechatatNazvaniePlatezhnoiKarty             *Boolean                                                `json:"ПечататьНазваниеПлатежнойКарты,omitempty"`
	PechatatNumeratsiiuPozitsii                 *Boolean                                                `json:"ПечататьНумерациюПозиций,omitempty"`
	PechatatTovarnyiChekPriRegistratsiiProdazhi *Boolean                                                `json:"ПечататьТоварныйЧекПриРегистрацииПродажи,omitempty"`
	PechatatShtrikhkodPriRegistratsiiProdazhi   *Boolean                                                `json:"ПечататьШтрихкодПриРегистрацииПродажи,omitempty"`
	TrebovatVvodPasportnykhDannykh              *Boolean                                                `json:"ТребоватьВводПаспортныхДанных,omitempty"`
	ZapolniatAnketuKlientaPriProdazhe           *Boolean                                                `json:"ЗаполнятьАнкетуКлиентаПриПродаже,omitempty"`
	PrefiksDokumentov                           *String                                                 `json:"ПрефиксДокументов,omitempty"`
	SostavNaimenovaniia                         *[]CatalogNastroikiDliaKureraSostavNaimenovaniiaRowType `json:"СоставНаименования,omitempty"`
}

func (CatalogNastroikiDliaKurera) APIEntityType() string {
	return "Catalog_НастройкиДляКурьера"
}
func NewCatalogNastroikiDliaKurera(data string, prevError error) (*CatalogNastroikiDliaKurera, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogNastroikiDliaKurera)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogNastroikiDliaKurera(entity CatalogNastroikiDliaKurera) (*CatalogNastroikiDliaKurera, error) {
	return NewCatalogNastroikiDliaKurera(c.createEntity(entity))
}
func (c *Client) CatalogNastroikiDliaKurera(key PrimaryCatalogNastroikiDliaKurera, fields []string) (*CatalogNastroikiDliaKurera, error) {
	return NewCatalogNastroikiDliaKurera(c.getEntity(key, fields))
}
func (c *Client) CatalogNastroikiDliaKureras(where Where) (*[]CatalogNastroikiDliaKurera, error) {
	type ReturnObj struct {
		Value []CatalogNastroikiDliaKurera `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкиДляКурьера", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogNastroikiDliaKurera(key PrimaryCatalogNastroikiDliaKurera, entity CatalogNastroikiDliaKurera) (*CatalogNastroikiDliaKurera, error) {
	return NewCatalogNastroikiDliaKurera(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogNastroikiDliaKurera(key PrimaryCatalogNastroikiDliaKurera) error {
	return c.removeEntity(key)
}

type CatalogNastroikiDliaKureraSostavNaimenovaniia struct {
	Key                  Guid    `json:"Ref_Key,omitempty"`
	LineNumber           Int64   `json:"LineNumber,omitempty"`
	SimvolyDo            *String `json:"СимволыДо,omitempty"`
	SimvolyPosle         *String `json:"СимволыПосле,omitempty"`
	ElementNaimenovaniia *String `json:"ЭлементНаименования,omitempty"`
}

func (CatalogNastroikiDliaKureraSostavNaimenovaniia) APIEntityType() string {
	return "Catalog_НастройкиДляКурьера_СоставНаименования"
}
func NewCatalogNastroikiDliaKureraSostavNaimenovaniia(data string, prevError error) (*CatalogNastroikiDliaKureraSostavNaimenovaniia, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogNastroikiDliaKureraSostavNaimenovaniia)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogNastroikiDliaKureraSostavNaimenovaniia(entity CatalogNastroikiDliaKureraSostavNaimenovaniia) (*CatalogNastroikiDliaKureraSostavNaimenovaniia, error) {
	return NewCatalogNastroikiDliaKureraSostavNaimenovaniia(c.createEntity(entity))
}
func (c *Client) CatalogNastroikiDliaKureraSostavNaimenovaniia(key PrimaryCatalogNastroikiDliaKureraSostavNaimenovaniia, fields []string) (*CatalogNastroikiDliaKureraSostavNaimenovaniia, error) {
	return NewCatalogNastroikiDliaKureraSostavNaimenovaniia(c.getEntity(key, fields))
}
func (c *Client) CatalogNastroikiDliaKureraSostavNaimenovaniias(where Where) (*[]CatalogNastroikiDliaKureraSostavNaimenovaniia, error) {
	type ReturnObj struct {
		Value []CatalogNastroikiDliaKureraSostavNaimenovaniia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкиДляКурьера_СоставНаименования", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogNastroikiDliaKureraSostavNaimenovaniia(key PrimaryCatalogNastroikiDliaKureraSostavNaimenovaniia, entity CatalogNastroikiDliaKureraSostavNaimenovaniia) (*CatalogNastroikiDliaKureraSostavNaimenovaniia, error) {
	return NewCatalogNastroikiDliaKureraSostavNaimenovaniia(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogNastroikiDliaKureraSostavNaimenovaniia(key PrimaryCatalogNastroikiDliaKureraSostavNaimenovaniia) error {
	return c.removeEntity(key)
}

type CatalogTipyTsenNomenklaturyKontragentov struct {
	Key                                      Guid     `json:"Ref_Key,omitempty"`
	DataVersion                              *String  `json:"DataVersion,omitempty"`
	Description                              *String  `json:"Description,omitempty"`
	Code                                     *String  `json:"Code,omitempty"`
	OwnerKey                                 *Guid    `json:"Owner_Key,omitempty"`
	DeletionMark                             *Boolean `json:"DeletionMark,omitempty"`
	ValiutaTsenyKey                          *Guid    `json:"ВалютаЦены_Key,omitempty"`
	Comment                                  *String  `json:"Комментарий,omitempty"`
	OpisanieTipaTsenyNomenklaturyKontragenta *String  `json:"ОписаниеТипаЦеныНоменклатурыКонтрагента,omitempty"`
	TipTsenyNomenklaturyKey                  *Guid    `json:"ТипЦеныНоменклатуры_Key,omitempty"`
	TsenaVkliuchaetNDS                       *Boolean `json:"ЦенаВключаетНДС,omitempty"`
}

func (CatalogTipyTsenNomenklaturyKontragentov) APIEntityType() string {
	return "Catalog_ТипыЦенНоменклатурыКонтрагентов"
}
func NewCatalogTipyTsenNomenklaturyKontragentov(data string, prevError error) (*CatalogTipyTsenNomenklaturyKontragentov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogTipyTsenNomenklaturyKontragentov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogTipyTsenNomenklaturyKontragentov(entity CatalogTipyTsenNomenklaturyKontragentov) (*CatalogTipyTsenNomenklaturyKontragentov, error) {
	return NewCatalogTipyTsenNomenklaturyKontragentov(c.createEntity(entity))
}
func (c *Client) CatalogTipyTsenNomenklaturyKontragentov(key PrimaryCatalogTipyTsenNomenklaturyKontragentov, fields []string) (*CatalogTipyTsenNomenklaturyKontragentov, error) {
	return NewCatalogTipyTsenNomenklaturyKontragentov(c.getEntity(key, fields))
}
func (c *Client) CatalogTipyTsenNomenklaturyKontragentovs(where Where) (*[]CatalogTipyTsenNomenklaturyKontragentov, error) {
	type ReturnObj struct {
		Value []CatalogTipyTsenNomenklaturyKontragentov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ТипыЦенНоменклатурыКонтрагентов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogTipyTsenNomenklaturyKontragentov(key PrimaryCatalogTipyTsenNomenklaturyKontragentov, entity CatalogTipyTsenNomenklaturyKontragentov) (*CatalogTipyTsenNomenklaturyKontragentov, error) {
	return NewCatalogTipyTsenNomenklaturyKontragentov(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogTipyTsenNomenklaturyKontragentov(key PrimaryCatalogTipyTsenNomenklaturyKontragentov) error {
	return c.removeEntity(key)
}

type DocumentJournalTsenoobrazovanie struct {
	Ref              String    `json:"Ref,omitempty"`
	Type             *String   `json:"Type,omitempty"`
	Date             *DateTime `json:"Date,omitempty"`
	DeletionMark     *Boolean  `json:"DeletionMark,omitempty"`
	Number           *String   `json:"Number,omitempty"`
	Posted           *Boolean  `json:"Posted,omitempty"`
	Informatsiia     *String   `json:"Информация,omitempty"`
	Comment          *String   `json:"Комментарий,omitempty"`
	KontragentKey    *Guid     `json:"Контрагент_Key,omitempty"`
	OtvetstvennyiKey *Guid     `json:"Ответственный_Key,omitempty"`
	RefType          String    `json:"Ref_Type,omitempty"`
	InformatsiiaType *String   `json:"Информация_Type,omitempty"`
}

func (DocumentJournalTsenoobrazovanie) APIEntityType() string {
	return "DocumentJournal_Ценообразование"
}
func NewDocumentJournalTsenoobrazovanie(data string, prevError error) (*DocumentJournalTsenoobrazovanie, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentJournalTsenoobrazovanie)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentJournalTsenoobrazovanie(entity DocumentJournalTsenoobrazovanie) (*DocumentJournalTsenoobrazovanie, error) {
	return NewDocumentJournalTsenoobrazovanie(c.createEntity(entity))
}
func (c *Client) DocumentJournalTsenoobrazovanie(key PrimaryDocumentJournalTsenoobrazovanie, fields []string) (*DocumentJournalTsenoobrazovanie, error) {
	return NewDocumentJournalTsenoobrazovanie(c.getEntity(key, fields))
}
func (c *Client) DocumentJournalTsenoobrazovanies(where Where) (*[]DocumentJournalTsenoobrazovanie, error) {
	type ReturnObj struct {
		Value []DocumentJournalTsenoobrazovanie `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("DocumentJournal_Ценообразование", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentJournalTsenoobrazovanie(key PrimaryDocumentJournalTsenoobrazovanie, entity DocumentJournalTsenoobrazovanie) (*DocumentJournalTsenoobrazovanie, error) {
	return NewDocumentJournalTsenoobrazovanie(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentJournalTsenoobrazovanie(key PrimaryDocumentJournalTsenoobrazovanie) error {
	return c.removeEntity(key)
}

type CatalogEdinitsyIzmereniia struct {
	Key                         Guid     `json:"Ref_Key,omitempty"`
	DataVersion                 *String  `json:"DataVersion,omitempty"`
	Description                 *String  `json:"Description,omitempty"`
	Code                        *String  `json:"Code,omitempty"`
	Owner                       *String  `json:"Owner,omitempty"`
	DeletionMark                *Boolean `json:"DeletionMark,omitempty"`
	Weight                      *Double  `json:"Вес,omitempty"`
	EdinitsaPoKlassifikatoruKey *Guid    `json:"ЕдиницаПоКлассификатору_Key,omitempty"`
	Koeffitsient                *Double  `json:"Коэффициент,omitempty"`
	Obieem                      *Double  `json:"Объем,omitempty"`
	BIdentifikator              *String  `json:"Б_Идентификатор,omitempty"`
	BNomerVersii                *String  `json:"Б_НомерВерсии,omitempty"`
	OwnerType                   *String  `json:"Owner_Type,omitempty"`
}

func (CatalogEdinitsyIzmereniia) APIEntityType() string {
	return "Catalog_ЕдиницыИзмерения"
}
func NewCatalogEdinitsyIzmereniia(data string, prevError error) (*CatalogEdinitsyIzmereniia, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogEdinitsyIzmereniia)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogEdinitsyIzmereniia(entity CatalogEdinitsyIzmereniia) (*CatalogEdinitsyIzmereniia, error) {
	return NewCatalogEdinitsyIzmereniia(c.createEntity(entity))
}
func (c *Client) CatalogEdinitsyIzmereniia(key PrimaryCatalogEdinitsyIzmereniia, fields []string) (*CatalogEdinitsyIzmereniia, error) {
	return NewCatalogEdinitsyIzmereniia(c.getEntity(key, fields))
}
func (c *Client) CatalogEdinitsyIzmereniias(where Where) (*[]CatalogEdinitsyIzmereniia, error) {
	type ReturnObj struct {
		Value []CatalogEdinitsyIzmereniia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ЕдиницыИзмерения", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogEdinitsyIzmereniia(key PrimaryCatalogEdinitsyIzmereniia, entity CatalogEdinitsyIzmereniia) (*CatalogEdinitsyIzmereniia, error) {
	return NewCatalogEdinitsyIzmereniia(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogEdinitsyIzmereniia(key PrimaryCatalogEdinitsyIzmereniia) error {
	return c.removeEntity(key)
}

type CatalogStatiDvizheniiaDenezhnykhSredstv struct {
	Key                        Guid     `json:"Ref_Key,omitempty"`
	DataVersion                *String  `json:"DataVersion,omitempty"`
	Description                *String  `json:"Description,omitempty"`
	Code                       *String  `json:"Code,omitempty"`
	DeletionMark               *Boolean `json:"DeletionMark,omitempty"`
	KorrespondiruiushchiiSchet *String  `json:"КорреспондирующийСчет,omitempty"`
}

func (CatalogStatiDvizheniiaDenezhnykhSredstv) APIEntityType() string {
	return "Catalog_СтатьиДвиженияДенежныхСредств"
}
func NewCatalogStatiDvizheniiaDenezhnykhSredstv(data string, prevError error) (*CatalogStatiDvizheniiaDenezhnykhSredstv, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogStatiDvizheniiaDenezhnykhSredstv)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogStatiDvizheniiaDenezhnykhSredstv(entity CatalogStatiDvizheniiaDenezhnykhSredstv) (*CatalogStatiDvizheniiaDenezhnykhSredstv, error) {
	return NewCatalogStatiDvizheniiaDenezhnykhSredstv(c.createEntity(entity))
}
func (c *Client) CatalogStatiDvizheniiaDenezhnykhSredstv(key PrimaryCatalogStatiDvizheniiaDenezhnykhSredstv, fields []string) (*CatalogStatiDvizheniiaDenezhnykhSredstv, error) {
	return NewCatalogStatiDvizheniiaDenezhnykhSredstv(c.getEntity(key, fields))
}
func (c *Client) CatalogStatiDvizheniiaDenezhnykhSredstvs(where Where) (*[]CatalogStatiDvizheniiaDenezhnykhSredstv, error) {
	type ReturnObj struct {
		Value []CatalogStatiDvizheniiaDenezhnykhSredstv `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_СтатьиДвиженияДенежныхСредств", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogStatiDvizheniiaDenezhnykhSredstv(key PrimaryCatalogStatiDvizheniiaDenezhnykhSredstv, entity CatalogStatiDvizheniiaDenezhnykhSredstv) (*CatalogStatiDvizheniiaDenezhnykhSredstv, error) {
	return NewCatalogStatiDvizheniiaDenezhnykhSredstv(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogStatiDvizheniiaDenezhnykhSredstv(key PrimaryCatalogStatiDvizheniiaDenezhnykhSredstv) error {
	return c.removeEntity(key)
}

type DocumentInkassovoePorucheniePoluchennoe struct {
	Key                              Guid                                                                  `json:"Ref_Key,omitempty"`
	DataVersion                      *String                                                               `json:"DataVersion,omitempty"`
	Number                           *String                                                               `json:"Number,omitempty"`
	Date                             *DateTime                                                             `json:"Date,omitempty"`
	DeletionMark                     *Boolean                                                              `json:"DeletionMark,omitempty"`
	Posted                           *Boolean                                                              `json:"Posted,omitempty"`
	ValiutaDokumentaKey              *Guid                                                                 `json:"ВалютаДокумента_Key,omitempty"`
	OperationType                    *String                                                               `json:"ВидОперации,omitempty"`
	VidPlatezha                      *String                                                               `json:"ВидПлатежа,omitempty"`
	DataVkhodiashchegoDokumenta      *DateTime                                                             `json:"ДатаВходящегоДокумента,omitempty"`
	DataOplaty                       *DateTime                                                             `json:"ДатаОплаты,omitempty"`
	DogovorKontragentaKey            *Guid                                                                 `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie                *String                                                               `json:"ДокументОснование,omitempty"`
	ZaiavkaNaRaskhodovanieSredstvKey *Guid                                                                 `json:"ЗаявкаНаРасходованиеСредств_Key,omitempty"`
	Comment                          *String                                                               `json:"Комментарий,omitempty"`
	KontragentKey                    *Guid                                                                 `json:"Контрагент_Key,omitempty"`
	NaznacheniePlatezha              *String                                                               `json:"НазначениеПлатежа,omitempty"`
	NomerVkhodiashchegoDokumenta     *String                                                               `json:"НомерВходящегоДокумента,omitempty"`
	Oplacheno                        *Boolean                                                              `json:"Оплачено,omitempty"`
	OrganizatsiiaKey                 *Guid                                                                 `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                 *Guid                                                                 `json:"Ответственный_Key,omitempty"`
	OtrazhenoVOperUchete             *Boolean                                                              `json:"ОтраженоВОперУчете,omitempty"`
	OcherednostPlatezha              *Int16                                                                `json:"ОчередностьПлатежа,omitempty"`
	TypeOfMovingMoneyKey             *Guid                                                                 `json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SumOfDocument                    *Double                                                               `json:"СуммаДокумента,omitempty"`
	SchetKontragentaKey              *Guid                                                                 `json:"СчетКонтрагента_Key,omitempty"`
	SchetOrganizatsiiKey             *Guid                                                                 `json:"СчетОрганизации_Key,omitempty"`
	TipDokumenta                     *String                                                               `json:"ТипДокумента,omitempty"`
	ChastichnaiaOplata               *Boolean                                                              `json:"ЧастичнаяОплата,omitempty"`
	PodrazdelenieKey                 *Guid                                                                 `json:"Подразделение_Key,omitempty"`
	ExtendedPayments                 *[]DocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezhaRowType `json:"РасшифровкаПлатежа,omitempty"`
	RekvizityKontragenta             *[]DocumentInkassovoePorucheniePoluchennoeRekvizityKontragentaRowType `json:"РеквизитыКонтрагента,omitempty"`
	DokumentOsnovanieType            *String                                                               `json:"ДокументОснование_Type,omitempty"`
}

func (DocumentInkassovoePorucheniePoluchennoe) APIEntityType() string {
	return "Document_ИнкассовоеПоручениеПолученное"
}
func NewDocumentInkassovoePorucheniePoluchennoe(data string, prevError error) (*DocumentInkassovoePorucheniePoluchennoe, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentInkassovoePorucheniePoluchennoe)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentInkassovoePorucheniePoluchennoe(entity DocumentInkassovoePorucheniePoluchennoe) (*DocumentInkassovoePorucheniePoluchennoe, error) {
	return NewDocumentInkassovoePorucheniePoluchennoe(c.createEntity(entity))
}
func (c *Client) DocumentInkassovoePorucheniePoluchennoe(key PrimaryDocumentInkassovoePorucheniePoluchennoe, fields []string) (*DocumentInkassovoePorucheniePoluchennoe, error) {
	return NewDocumentInkassovoePorucheniePoluchennoe(c.getEntity(key, fields))
}
func (c *Client) DocumentInkassovoePorucheniePoluchennoes(where Where) (*[]DocumentInkassovoePorucheniePoluchennoe, error) {
	type ReturnObj struct {
		Value []DocumentInkassovoePorucheniePoluchennoe `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ИнкассовоеПоручениеПолученное", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentInkassovoePorucheniePoluchennoe(key PrimaryDocumentInkassovoePorucheniePoluchennoe, entity DocumentInkassovoePorucheniePoluchennoe) (*DocumentInkassovoePorucheniePoluchennoe, error) {
	return NewDocumentInkassovoePorucheniePoluchennoe(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentInkassovoePorucheniePoluchennoe(key PrimaryDocumentInkassovoePorucheniePoluchennoe) error {
	return c.removeEntity(key)
}

type DocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezha struct {
	Key                              Guid    `json:"Ref_Key,omitempty"`
	LineNumber                       Int64   `json:"LineNumber,omitempty"`
	DogovorKontragentaKey            *Guid   `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentPlanirovaniiaPlatezhaKey *Guid   `json:"ДокументПланированияПлатежа_Key,omitempty"`
	KratnostVzaimoraschetov          *Int64  `json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov              *Double `json:"КурсВзаиморасчетов,omitempty"`
	KursVzaimoraschetovPlan          *Double `json:"КурсВзаиморасчетовПлан,omitempty"`
	NomerPlatezha                    *Int16  `json:"НомерПлатежа,omitempty"`
	ProektKey                        *Guid   `json:"Проект_Key,omitempty"`
	Sdelka                           *String `json:"Сделка,omitempty"`
	StavkaNDS                        *String `json:"СтавкаНДС,omitempty"`
	TypeOfMovingMoneyKey             *Guid   `json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov             *Double `json:"СуммаВзаиморасчетов,omitempty"`
	SummaNDS                         *Double `json:"СуммаНДС,omitempty"`
	Sum                              *Double `json:"СуммаПлатежа,omitempty"`
	SummaPlatezhaPlan                *Double `json:"СуммаПлатежаПлан,omitempty"`
	SdelkaType                       *String `json:"Сделка_Type,omitempty"`
}

func (DocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezha) APIEntityType() string {
	return "Document_ИнкассовоеПоручениеПолученное_РасшифровкаПлатежа"
}
func NewDocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezha(data string, prevError error) (*DocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezha, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezha)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezha(entity DocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezha) (*DocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezha, error) {
	return NewDocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezha(c.createEntity(entity))
}
func (c *Client) DocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezha(key PrimaryDocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezha, fields []string) (*DocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezha, error) {
	return NewDocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezha(c.getEntity(key, fields))
}
func (c *Client) DocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezhas(where Where) (*[]DocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezha, error) {
	type ReturnObj struct {
		Value []DocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezha `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ИнкассовоеПоручениеПолученное_РасшифровкаПлатежа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezha(key PrimaryDocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezha, entity DocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezha) (*DocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezha, error) {
	return NewDocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezha(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezha(key PrimaryDocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezha) error {
	return c.removeEntity(key)
}

type DocumentInkassovoePorucheniePoluchennoeRekvizityKontragenta struct {
	Key            Guid    `json:"Ref_Key,omitempty"`
	LineNumber     Int64   `json:"LineNumber,omitempty"`
	Znachenie      *String `json:"Значение,omitempty"`
	Predstavlenie  *String `json:"Представление,omitempty"`
	Rekvizit       *String `json:"Реквизит,omitempty"`
	TipKontragenta *String `json:"ТипКонтрагента,omitempty"`
}

func (DocumentInkassovoePorucheniePoluchennoeRekvizityKontragenta) APIEntityType() string {
	return "Document_ИнкассовоеПоручениеПолученное_РеквизитыКонтрагента"
}
func NewDocumentInkassovoePorucheniePoluchennoeRekvizityKontragenta(data string, prevError error) (*DocumentInkassovoePorucheniePoluchennoeRekvizityKontragenta, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentInkassovoePorucheniePoluchennoeRekvizityKontragenta)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentInkassovoePorucheniePoluchennoeRekvizityKontragenta(entity DocumentInkassovoePorucheniePoluchennoeRekvizityKontragenta) (*DocumentInkassovoePorucheniePoluchennoeRekvizityKontragenta, error) {
	return NewDocumentInkassovoePorucheniePoluchennoeRekvizityKontragenta(c.createEntity(entity))
}
func (c *Client) DocumentInkassovoePorucheniePoluchennoeRekvizityKontragenta(key PrimaryDocumentInkassovoePorucheniePoluchennoeRekvizityKontragenta, fields []string) (*DocumentInkassovoePorucheniePoluchennoeRekvizityKontragenta, error) {
	return NewDocumentInkassovoePorucheniePoluchennoeRekvizityKontragenta(c.getEntity(key, fields))
}
func (c *Client) DocumentInkassovoePorucheniePoluchennoeRekvizityKontragentas(where Where) (*[]DocumentInkassovoePorucheniePoluchennoeRekvizityKontragenta, error) {
	type ReturnObj struct {
		Value []DocumentInkassovoePorucheniePoluchennoeRekvizityKontragenta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ИнкассовоеПоручениеПолученное_РеквизитыКонтрагента", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentInkassovoePorucheniePoluchennoeRekvizityKontragenta(key PrimaryDocumentInkassovoePorucheniePoluchennoeRekvizityKontragenta, entity DocumentInkassovoePorucheniePoluchennoeRekvizityKontragenta) (*DocumentInkassovoePorucheniePoluchennoeRekvizityKontragenta, error) {
	return NewDocumentInkassovoePorucheniePoluchennoeRekvizityKontragenta(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentInkassovoePorucheniePoluchennoeRekvizityKontragenta(key PrimaryDocumentInkassovoePorucheniePoluchennoeRekvizityKontragenta) error {
	return c.removeEntity(key)
}

type CatalogNastroikiObmenaDannymiShtrikhM struct {
	Key                        Guid     `json:"Ref_Key,omitempty"`
	DataVersion                *String  `json:"DataVersion,omitempty"`
	Description                *String  `json:"Description,omitempty"`
	Code                       *String  `json:"Code,omitempty"`
	DeletionMark               *Boolean `json:"DeletionMark,omitempty"`
	VidZagruzkiOtchetov        *String  `json:"ВидЗагрузкиОтчетов,omitempty"`
	VidOplaty2Key              *Guid    `json:"ВидОплаты2_Key,omitempty"`
	VidOplaty3Key              *Guid    `json:"ВидОплаты3_Key,omitempty"`
	VidOplaty4Key              *Guid    `json:"ВидОплаты4_Key,omitempty"`
	VygruzhatSkhemyNakopleniia *Boolean `json:"ВыгружатьСхемыНакопления,omitempty"`
	ImiaFailaVygruzki          *String  `json:"ИмяФайлаВыгрузки,omitempty"`
	ImiaFailaZagruzki          *String  `json:"ИмяФайлаЗагрузки,omitempty"`
	OrganizatsiiaKey           *Guid    `json:"Организация_Key,omitempty"`
	DepartmentKey              *Guid    `json:"Склад_Key,omitempty"`
}

func (CatalogNastroikiObmenaDannymiShtrikhM) APIEntityType() string {
	return "Catalog_НастройкиОбменаДаннымиШтрихМ"
}
func NewCatalogNastroikiObmenaDannymiShtrikhM(data string, prevError error) (*CatalogNastroikiObmenaDannymiShtrikhM, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogNastroikiObmenaDannymiShtrikhM)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogNastroikiObmenaDannymiShtrikhM(entity CatalogNastroikiObmenaDannymiShtrikhM) (*CatalogNastroikiObmenaDannymiShtrikhM, error) {
	return NewCatalogNastroikiObmenaDannymiShtrikhM(c.createEntity(entity))
}
func (c *Client) CatalogNastroikiObmenaDannymiShtrikhM(key PrimaryCatalogNastroikiObmenaDannymiShtrikhM, fields []string) (*CatalogNastroikiObmenaDannymiShtrikhM, error) {
	return NewCatalogNastroikiObmenaDannymiShtrikhM(c.getEntity(key, fields))
}
func (c *Client) CatalogNastroikiObmenaDannymiShtrikhMs(where Where) (*[]CatalogNastroikiObmenaDannymiShtrikhM, error) {
	type ReturnObj struct {
		Value []CatalogNastroikiObmenaDannymiShtrikhM `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкиОбменаДаннымиШтрихМ", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogNastroikiObmenaDannymiShtrikhM(key PrimaryCatalogNastroikiObmenaDannymiShtrikhM, entity CatalogNastroikiObmenaDannymiShtrikhM) (*CatalogNastroikiObmenaDannymiShtrikhM, error) {
	return NewCatalogNastroikiObmenaDannymiShtrikhM(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogNastroikiObmenaDannymiShtrikhM(key PrimaryCatalogNastroikiObmenaDannymiShtrikhM) error {
	return c.removeEntity(key)
}

type CatalogStatiZatrat struct {
	Key                                 Guid     `json:"Ref_Key,omitempty"`
	DataVersion                         *String  `json:"DataVersion,omitempty"`
	Description                         *String  `json:"Description,omitempty"`
	Code                                *String  `json:"Code,omitempty"`
	ParentKey                           *Guid    `json:"Parent_Key,omitempty"`
	IsFolder                            *Boolean `json:"IsFolder,omitempty"`
	DeletionMark                        *Boolean `json:"DeletionMark,omitempty"`
	VidZatrat                           *String  `json:"ВидЗатрат,omitempty"`
	VidRaskhodovNU                      *String  `json:"ВидРасходовНУ,omitempty"`
	OtnesenieRaskhodovKDeiatelnostiENVD *String  `json:"ОтнесениеРасходовКДеятельностиЕНВД,omitempty"`
	KharakterZatrat                     *String  `json:"ХарактерЗатрат,omitempty"`
	KorrespondiruiushchiiSchet          *String  `json:"КорреспондирующийСчет,omitempty"`
}

func (CatalogStatiZatrat) APIEntityType() string {
	return "Catalog_СтатьиЗатрат"
}
func NewCatalogStatiZatrat(data string, prevError error) (*CatalogStatiZatrat, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogStatiZatrat)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogStatiZatrat(entity CatalogStatiZatrat) (*CatalogStatiZatrat, error) {
	return NewCatalogStatiZatrat(c.createEntity(entity))
}
func (c *Client) CatalogStatiZatrat(key PrimaryCatalogStatiZatrat, fields []string) (*CatalogStatiZatrat, error) {
	return NewCatalogStatiZatrat(c.getEntity(key, fields))
}
func (c *Client) CatalogStatiZatrats(where Where) (*[]CatalogStatiZatrat, error) {
	type ReturnObj struct {
		Value []CatalogStatiZatrat `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_СтатьиЗатрат", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogStatiZatrat(key PrimaryCatalogStatiZatrat, entity CatalogStatiZatrat) (*CatalogStatiZatrat, error) {
	return NewCatalogStatiZatrat(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogStatiZatrat(key PrimaryCatalogStatiZatrat) error {
	return c.removeEntity(key)
}

type DocumentVozvratTovarovOtPokupatelia struct {
	Key                           Guid                                                `json:"Ref_Key,omitempty"`
	DataVersion                   *String                                             `json:"DataVersion,omitempty"`
	Number                        *String                                             `json:"Number,omitempty"`
	Date                          *DateTime                                           `json:"Date,omitempty"`
	DeletionMark                  *Boolean                                            `json:"DeletionMark,omitempty"`
	Posted                        *Boolean                                            `json:"Posted,omitempty"`
	BankovskiiSchetKontragentaKey *Guid                                               `json:"БанковскийСчетКонтрагента_Key,omitempty"`
	ValiutaDokumentaKey           *Guid                                               `json:"ВалютаДокумента_Key,omitempty"`
	Weight                        *Double                                             `json:"ВесДокумента,omitempty"`
	GruzootpravitelKey            *Guid                                               `json:"Грузоотправитель_Key,omitempty"`
	GruzopoluchatelKey            *Guid                                               `json:"Грузополучатель_Key,omitempty"`
	DataVkhodiashchegoDokumenta   *DateTime                                           `json:"ДатаВходящегоДокумента,omitempty"`
	DogovorKontragentaKey         *Guid                                               `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie             *String                                             `json:"ДокументОснование,omitempty"`
	DokumentSozdanVIuTD           *Boolean                                            `json:"ДокументСозданВЮТД,omitempty"`
	ZakrytieDnia                  *Boolean                                            `json:"ЗакрытиеДня,omitempty"`
	KolichestvoDokumenta          *Int64                                              `json:"КоличествоДокумента,omitempty"`
	Comment                       *String                                             `json:"Комментарий,omitempty"`
	KontragentKey                 *Guid                                               `json:"Контрагент_Key,omitempty"`
	KratnostVzaimoraschetov       *Int64                                              `json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov           *Double                                             `json:"КурсВзаиморасчетов,omitempty"`
	Metall                        *String                                             `json:"Металл,omitempty"`
	NomerVkhodiashchegoDokumenta  *String                                             `json:"НомерВходящегоДокумента,omitempty"`
	OrganizatsiiaKey              *Guid                                               `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey              *Guid                                               `json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey              *Guid                                               `json:"Подразделение_Key,omitempty"`
	ProektKey                     *Guid                                               `json:"Проект_Key,omitempty"`
	Sdelka                        *String                                             `json:"Сделка,omitempty"`
	SkladOrderKey                 *Guid                                               `json:"СкладОрдер_Key,omitempty"`
	SummaVkliuchaetNDS            *Boolean                                            `json:"СуммаВключаетНДС,omitempty"`
	SumOfDocument                 *Double                                             `json:"СуммаДокумента,omitempty"`
	TipDokumenta                  *String                                             `json:"ТипДокумента,omitempty"`
	TipTsenKey                    *Guid                                               `json:"ТипЦен_Key,omitempty"`
	UchityvatVesVstavok           *Boolean                                            `json:"УчитыватьВесВставок,omitempty"`
	UchityvatNDS                  *Boolean                                            `json:"УчитыватьНДС,omitempty"`
	KhoziaistvennaiaOperatsiiaKey *Guid                                               `json:"ХозяйственнаяОперация_Key,omitempty"`
	Goods                         *[]DocumentVozvratTovarovOtPokupateliaTovaryRowType `json:"Товары,omitempty"`
	Uslugi                        *[]DocumentVozvratTovarovOtPokupateliaUslugiRowType `json:"Услуги,omitempty"`
	DokumentOsnovanieType         *String                                             `json:"ДокументОснование_Type,omitempty"`
	SdelkaType                    *String                                             `json:"Сделка_Type,omitempty"`
}

func (DocumentVozvratTovarovOtPokupatelia) APIEntityType() string {
	return "Document_ВозвратТоваровОтПокупателя"
}
func NewDocumentVozvratTovarovOtPokupatelia(data string, prevError error) (*DocumentVozvratTovarovOtPokupatelia, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentVozvratTovarovOtPokupatelia)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentVozvratTovarovOtPokupatelia(entity DocumentVozvratTovarovOtPokupatelia) (*DocumentVozvratTovarovOtPokupatelia, error) {
	return NewDocumentVozvratTovarovOtPokupatelia(c.createEntity(entity))
}
func (c *Client) DocumentVozvratTovarovOtPokupatelia(key PrimaryDocumentVozvratTovarovOtPokupatelia, fields []string) (*DocumentVozvratTovarovOtPokupatelia, error) {
	return NewDocumentVozvratTovarovOtPokupatelia(c.getEntity(key, fields))
}
func (c *Client) DocumentVozvratTovarovOtPokupatelias(where Where) (*[]DocumentVozvratTovarovOtPokupatelia, error) {
	type ReturnObj struct {
		Value []DocumentVozvratTovarovOtPokupatelia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВозвратТоваровОтПокупателя", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentVozvratTovarovOtPokupatelia(key PrimaryDocumentVozvratTovarovOtPokupatelia, entity DocumentVozvratTovarovOtPokupatelia) (*DocumentVozvratTovarovOtPokupatelia, error) {
	return NewDocumentVozvratTovarovOtPokupatelia(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentVozvratTovarovOtPokupatelia(key PrimaryDocumentVozvratTovarovOtPokupatelia) error {
	return c.removeEntity(key)
}

type DocumentVozvratTovarovOtPokupateliaTovary struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	Weight                         *Double `json:"Вес,omitempty"`
	DokumentOprikhodovaniia        *String `json:"ДокументОприходования,omitempty"`
	DokumentPartii                 *String `json:"ДокументПартии,omitempty"`
	KachestvoKey                   *Guid   `json:"Качество_Key,omitempty"`
	Quantity                       *Int64  `json:"Количество,omitempty"`
	ItemKey                        *Guid   `json:"Номенклатура_Key,omitempty"`
	Pasport                        *String `json:"Паспорт,omitempty"`
	PercentManualDiscount          *Double `json:"ПроцентРучнойСкидки,omitempty"`
	SizeKey                        *Guid   `json:"Размер_Key,omitempty"`
	Sebestoimost                   *Double `json:"Себестоимость,omitempty"`
	SebestoimostBezNDS             *Double `json:"СебестоимостьБезНДС,omitempty"`
	SebestoimostUpr                *Double `json:"СебестоимостьУпр,omitempty"`
	InstanceKey                    *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	SumManualDiscount              *Double `json:"СуммаРучнойСкидки,omitempty"`
	DepartmentKey                  *Guid   `json:"Склад_Key,omitempty"`
	StavkaNDS                      *String `json:"СтавкаНДС,omitempty"`
	StatusPartii                   *String `json:"СтатусПартии,omitempty"`
	Sum                            *Double `json:"Сумма,omitempty"`
	SummaNDS                       *Double `json:"СуммаНДС,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Double `json:"Цена,omitempty"`
	OrderKey                       *Guid   `json:"КлючПродажи_Key,omitempty"`
	DokumentOprikhodovaniiaType    *String `json:"ДокументОприходования_Type,omitempty"`
	DokumentPartiiType             *String `json:"ДокументПартии_Type,omitempty"`
}

func (DocumentVozvratTovarovOtPokupateliaTovary) APIEntityType() string {
	return "Document_ВозвратТоваровОтПокупателя_Товары"
}
func NewDocumentVozvratTovarovOtPokupateliaTovary(data string, prevError error) (*DocumentVozvratTovarovOtPokupateliaTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentVozvratTovarovOtPokupateliaTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentVozvratTovarovOtPokupateliaTovary(entity DocumentVozvratTovarovOtPokupateliaTovary) (*DocumentVozvratTovarovOtPokupateliaTovary, error) {
	return NewDocumentVozvratTovarovOtPokupateliaTovary(c.createEntity(entity))
}
func (c *Client) DocumentVozvratTovarovOtPokupateliaTovary(key PrimaryDocumentVozvratTovarovOtPokupateliaTovary, fields []string) (*DocumentVozvratTovarovOtPokupateliaTovary, error) {
	return NewDocumentVozvratTovarovOtPokupateliaTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentVozvratTovarovOtPokupateliaTovarys(where Where) (*[]DocumentVozvratTovarovOtPokupateliaTovary, error) {
	type ReturnObj struct {
		Value []DocumentVozvratTovarovOtPokupateliaTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВозвратТоваровОтПокупателя_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentVozvratTovarovOtPokupateliaTovary(key PrimaryDocumentVozvratTovarovOtPokupateliaTovary, entity DocumentVozvratTovarovOtPokupateliaTovary) (*DocumentVozvratTovarovOtPokupateliaTovary, error) {
	return NewDocumentVozvratTovarovOtPokupateliaTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentVozvratTovarovOtPokupateliaTovary(key PrimaryDocumentVozvratTovarovOtPokupateliaTovary) error {
	return c.removeEntity(key)
}

type DocumentVozvratTovarovOtPokupateliaUslugi struct {
	Key                      Guid    `json:"Ref_Key,omitempty"`
	LineNumber               Int64   `json:"LineNumber,omitempty"`
	Quantity                 *Int64  `json:"Количество,omitempty"`
	ItemKey                  *Guid   `json:"Номенклатура_Key,omitempty"`
	ProtsentOtSummuDokumenta *Double `json:"ПроцентОтСуммуДокумента,omitempty"`
	ProtsentOtSummyDokumenta *Double `json:"ПроцентОтСуммыДокумента,omitempty"`
	ProtsentSkidkiNatsenki   *Double `json:"ПроцентСкидкиНаценки,omitempty"`
	Soderzhanie              *String `json:"Содержание,omitempty"`
	StavkaNDS                *String `json:"СтавкаНДС,omitempty"`
	Sum                      *Double `json:"Сумма,omitempty"`
	SummaNDS                 *Double `json:"СуммаНДС,omitempty"`
	Cost                     *Double `json:"Цена,omitempty"`
}

func (DocumentVozvratTovarovOtPokupateliaUslugi) APIEntityType() string {
	return "Document_ВозвратТоваровОтПокупателя_Услуги"
}
func NewDocumentVozvratTovarovOtPokupateliaUslugi(data string, prevError error) (*DocumentVozvratTovarovOtPokupateliaUslugi, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentVozvratTovarovOtPokupateliaUslugi)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentVozvratTovarovOtPokupateliaUslugi(entity DocumentVozvratTovarovOtPokupateliaUslugi) (*DocumentVozvratTovarovOtPokupateliaUslugi, error) {
	return NewDocumentVozvratTovarovOtPokupateliaUslugi(c.createEntity(entity))
}
func (c *Client) DocumentVozvratTovarovOtPokupateliaUslugi(key PrimaryDocumentVozvratTovarovOtPokupateliaUslugi, fields []string) (*DocumentVozvratTovarovOtPokupateliaUslugi, error) {
	return NewDocumentVozvratTovarovOtPokupateliaUslugi(c.getEntity(key, fields))
}
func (c *Client) DocumentVozvratTovarovOtPokupateliaUslugis(where Where) (*[]DocumentVozvratTovarovOtPokupateliaUslugi, error) {
	type ReturnObj struct {
		Value []DocumentVozvratTovarovOtPokupateliaUslugi `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВозвратТоваровОтПокупателя_Услуги", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentVozvratTovarovOtPokupateliaUslugi(key PrimaryDocumentVozvratTovarovOtPokupateliaUslugi, entity DocumentVozvratTovarovOtPokupateliaUslugi) (*DocumentVozvratTovarovOtPokupateliaUslugi, error) {
	return NewDocumentVozvratTovarovOtPokupateliaUslugi(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentVozvratTovarovOtPokupateliaUslugi(key PrimaryDocumentVozvratTovarovOtPokupateliaUslugi) error {
	return c.removeEntity(key)
}

type DocumentZakazPostavshchiku struct {
	Key                           Guid                                       `json:"Ref_Key,omitempty"`
	DataVersion                   *String                                    `json:"DataVersion,omitempty"`
	Number                        *String                                    `json:"Number,omitempty"`
	Date                          *DateTime                                  `json:"Date,omitempty"`
	DeletionMark                  *Boolean                                   `json:"DeletionMark,omitempty"`
	Posted                        *Boolean                                   `json:"Posted,omitempty"`
	ValiutaDokumentaKey           *Guid                                      `json:"ВалютаДокумента_Key,omitempty"`
	Weight                        *Double                                    `json:"ВесДокумента,omitempty"`
	VremiaNapominaniia            *DateTime                                  `json:"ВремяНапоминания,omitempty"`
	DataOplaty                    *DateTime                                  `json:"ДатаОплаты,omitempty"`
	DataPostupleniia              *DateTime                                  `json:"ДатаПоступления,omitempty"`
	DogovorKontragentaKey         *Guid                                      `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie             *String                                    `json:"ДокументОснование,omitempty"`
	KolichestvoDokumenta          *Int64                                     `json:"КоличествоДокумента,omitempty"`
	Comment                       *String                                    `json:"Комментарий,omitempty"`
	KontaktnoeLitsoKey            *Guid                                      `json:"КонтактноеЛицо_Key,omitempty"`
	KontragentKey                 *Guid                                      `json:"Контрагент_Key,omitempty"`
	KratnostVzaimoraschetov       *Int64                                     `json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov           *Double                                    `json:"КурсВзаиморасчетов,omitempty"`
	NapomnitOSobytii              *Boolean                                   `json:"НапомнитьОСобытии,omitempty"`
	OrganizatsiiaKey              *Guid                                      `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey              *Guid                                      `json:"Ответственный_Key,omitempty"`
	ParametryOtboraBase64Data     *Binary                                    `json:"ПараметрыОтбора_Base64Data,omitempty"`
	PodrazdelenieKey              *Guid                                      `json:"Подразделение_Key,omitempty"`
	DepartmentKey                 *Guid                                      `json:"Склад_Key,omitempty"`
	Soglasovano                   *Boolean                                   `json:"Согласовано,omitempty"`
	StrukturnaiaEdinitsa          *String                                    `json:"СтруктурнаяЕдиница,omitempty"`
	SummaVkliuchaetNDS            *Boolean                                   `json:"СуммаВключаетНДС,omitempty"`
	SumOfDocument                 *Double                                    `json:"СуммаДокумента,omitempty"`
	TipDokumenta                  *String                                    `json:"ТипДокумента,omitempty"`
	TipTsenKey                    *Guid                                      `json:"ТипЦен_Key,omitempty"`
	UchityvatNDS                  *Boolean                                   `json:"УчитыватьНДС,omitempty"`
	KhoziaistvennaiaOperatsiiaKey *Guid                                      `json:"ХозяйственнаяОперация_Key,omitempty"`
	Goods                         *[]DocumentZakazPostavshchikuTovaryRowType `json:"Товары,omitempty"`
	DokumentOsnovanieType         *String                                    `json:"ДокументОснование_Type,omitempty"`
	ParametryOtboraType           *String                                    `json:"ПараметрыОтбора_Type,omitempty"`
	StrukturnaiaEdinitsaType      *String                                    `json:"СтруктурнаяЕдиница_Type,omitempty"`
	ParametryOtbora               *Stream                                    `json:"ПараметрыОтбора,omitempty"`
}

func (DocumentZakazPostavshchiku) APIEntityType() string {
	return "Document_ЗаказПоставщику"
}
func NewDocumentZakazPostavshchiku(data string, prevError error) (*DocumentZakazPostavshchiku, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentZakazPostavshchiku)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentZakazPostavshchiku(entity DocumentZakazPostavshchiku) (*DocumentZakazPostavshchiku, error) {
	return NewDocumentZakazPostavshchiku(c.createEntity(entity))
}
func (c *Client) DocumentZakazPostavshchiku(key PrimaryDocumentZakazPostavshchiku, fields []string) (*DocumentZakazPostavshchiku, error) {
	return NewDocumentZakazPostavshchiku(c.getEntity(key, fields))
}
func (c *Client) DocumentZakazPostavshchikus(where Where) (*[]DocumentZakazPostavshchiku, error) {
	type ReturnObj struct {
		Value []DocumentZakazPostavshchiku `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗаказПоставщику", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentZakazPostavshchiku(key PrimaryDocumentZakazPostavshchiku, entity DocumentZakazPostavshchiku) (*DocumentZakazPostavshchiku, error) {
	return NewDocumentZakazPostavshchiku(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentZakazPostavshchiku(key PrimaryDocumentZakazPostavshchiku) error {
	return c.removeEntity(key)
}

type DocumentZakazPostavshchikuTovary struct {
	Key             Guid    `json:"Ref_Key,omitempty"`
	LineNumber      Int64   `json:"LineNumber,omitempty"`
	Weight          *Double `json:"Вес,omitempty"`
	ZakazKlientaKey *Guid   `json:"ЗаказКлиента_Key,omitempty"`
	Quantity        *Int64  `json:"Количество,omitempty"`
	ItemKey         *Guid   `json:"Номенклатура_Key,omitempty"`
	SizeKey         *Guid   `json:"Размер_Key,omitempty"`
	StavkaNDS       *String `json:"СтавкаНДС,omitempty"`
	Sum             *Double `json:"Сумма,omitempty"`
	SummaNDS        *Double `json:"СуммаНДС,omitempty"`
	Cost            *Double `json:"Цена,omitempty"`
}

func (DocumentZakazPostavshchikuTovary) APIEntityType() string {
	return "Document_ЗаказПоставщику_Товары"
}
func NewDocumentZakazPostavshchikuTovary(data string, prevError error) (*DocumentZakazPostavshchikuTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentZakazPostavshchikuTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentZakazPostavshchikuTovary(entity DocumentZakazPostavshchikuTovary) (*DocumentZakazPostavshchikuTovary, error) {
	return NewDocumentZakazPostavshchikuTovary(c.createEntity(entity))
}
func (c *Client) DocumentZakazPostavshchikuTovary(key PrimaryDocumentZakazPostavshchikuTovary, fields []string) (*DocumentZakazPostavshchikuTovary, error) {
	return NewDocumentZakazPostavshchikuTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentZakazPostavshchikuTovarys(where Where) (*[]DocumentZakazPostavshchikuTovary, error) {
	type ReturnObj struct {
		Value []DocumentZakazPostavshchikuTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗаказПоставщику_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentZakazPostavshchikuTovary(key PrimaryDocumentZakazPostavshchikuTovary, entity DocumentZakazPostavshchikuTovary) (*DocumentZakazPostavshchikuTovary, error) {
	return NewDocumentZakazPostavshchikuTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentZakazPostavshchikuTovary(key PrimaryDocumentZakazPostavshchikuTovary) error {
	return c.removeEntity(key)
}

type CatalogSkidkiNatsenki struct {
	Key                                                          Guid                                                   `json:"Ref_Key,omitempty"`
	DataVersion                                                  *String                                                `json:"DataVersion,omitempty"`
	Description                                                  *String                                                `json:"Description,omitempty"`
	ParentKey                                                    *Guid                                                  `json:"Parent_Key,omitempty"`
	IsFolder                                                     *Boolean                                               `json:"IsFolder,omitempty"`
	DeletionMark                                                 *Boolean                                               `json:"DeletionMark,omitempty"`
	ValiutaPredostavleniiaKey                                    *Guid                                                  `json:"ВалютаПредоставления_Key,omitempty"`
	VariantSovmestnogoPrimeneniia                                *String                                                `json:"ВариантСовместногоПрименения,omitempty"`
	ZnachenieSkidkiNatsenki                                      *Double                                                `json:"ЗначениеСкидкиНаценки,omitempty"`
	MomentVydachiSoobshcheniia                                   *String                                                `json:"МоментВыдачиСообщения,omitempty"`
	OblastPredostavleniia                                        *String                                                `json:"ОбластьПредоставления,omitempty"`
	PodarokIzKorzinyPokupatelia                                  *Boolean                                               `json:"ПодарокИзКорзиныПокупателя,omitempty"`
	PodarokIzSpiska                                              *Boolean                                               `json:"ПодарокИзСписка,omitempty"`
	RekvizitDopUporiadochivaniia                                 *Int64                                                 `json:"РеквизитДопУпорядочивания,omitempty"`
	SegmentNomenklaturyPredostavleniiaKey                        *Guid                                                  `json:"СегментНоменклатурыПредоставления_Key,omitempty"`
	SposobPredostavleniia                                        *String                                                `json:"СпособПредоставления,omitempty"`
	StatusDeistviia                                              *String                                                `json:"СтатусДействия,omitempty"`
	TekstSoobshcheniia                                           *String                                                `json:"ТекстСообщения,omitempty"`
	Upravliaemaia                                                *Boolean                                               `json:"Управляемая,omitempty"`
	UchityvatPodarokKakProdazhu                                  *Boolean                                               `json:"УчитыватьПодарокКакПродажу,omitempty"`
	KuponKey                                                     *Guid                                                  `json:"Купон_Key,omitempty"`
	DataSpisaniia                                                *Boolean                                               `json:"ДатаСписания,omitempty"`
	VariantOtboraNomenklatury                                    *String                                                `json:"ВариантОтбораНоменклатуры,omitempty"`
	SegmentNomenklaturyIskliucheniiaKey                          *Guid                                                  `json:"СегментНоменклатурыИсключения_Key,omitempty"`
	VariantOtboraIskliucheniiNomenklatury                        *String                                                `json:"ВариантОтбораИсключенийНоменклатуры,omitempty"`
	KhranilishcheNastroekKomponovkiDannykhBase64Data             *Binary                                                `json:"ХранилищеНастроекКомпоновкиДанных_Base64Data,omitempty"`
	KhranilishcheNastroekKomponovkiDannykhIskliuchenieBase64Data *Binary                                                `json:"ХранилищеНастроекКомпоновкиДанныхИсключение_Base64Data,omitempty"`
	VidTsenyKey                                                  *Guid                                                  `json:"ВидЦены_Key,omitempty"`
	KolichestvoPodarkovIzKorzinyPokupatelia                      *Int64                                                 `json:"КоличествоПодарковИзКорзиныПокупателя,omitempty"`
	KratnoKolichestvuUslovii                                     *Boolean                                               `json:"КратноКоличествуУсловий,omitempty"`
	OgranichenieRazmeraPodchinennykhSkidok                       *Boolean                                               `json:"ОграничениеРазмераПодчиненныхСкидок,omitempty"`
	UsloviiaPredostavleniia                                      *[]CatalogSkidkiNatsenkiUsloviiaPredostavleniiaRowType `json:"УсловияПредоставления,omitempty"`
	TsenovyeGruppy                                               *[]CatalogSkidkiNatsenkiTsenovyeGruppyRowType          `json:"ЦеновыеГруппы,omitempty"`
	NaborPodarkov                                                *[]CatalogSkidkiNatsenkiNaborPodarkovRowType           `json:"НаборПодарков,omitempty"`
	KhranilishcheNastroekKomponovkiDannykhType                   *String                                                `json:"ХранилищеНастроекКомпоновкиДанных_Type,omitempty"`
	KhranilishcheNastroekKomponovkiDannykhIskliuchenieType       *String                                                `json:"ХранилищеНастроекКомпоновкиДанныхИсключение_Type,omitempty"`
	KhranilishcheNastroekKomponovkiDannykh                       *Stream                                                `json:"ХранилищеНастроекКомпоновкиДанных,omitempty"`
	KhranilishcheNastroekKomponovkiDannykhIskliuchenie           *Stream                                                `json:"ХранилищеНастроекКомпоновкиДанныхИсключение,omitempty"`
}

func (CatalogSkidkiNatsenki) APIEntityType() string {
	return "Catalog_СкидкиНаценки"
}
func NewCatalogSkidkiNatsenki(data string, prevError error) (*CatalogSkidkiNatsenki, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogSkidkiNatsenki)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogSkidkiNatsenki(entity CatalogSkidkiNatsenki) (*CatalogSkidkiNatsenki, error) {
	return NewCatalogSkidkiNatsenki(c.createEntity(entity))
}
func (c *Client) CatalogSkidkiNatsenki(key PrimaryCatalogSkidkiNatsenki, fields []string) (*CatalogSkidkiNatsenki, error) {
	return NewCatalogSkidkiNatsenki(c.getEntity(key, fields))
}
func (c *Client) CatalogSkidkiNatsenkis(where Where) (*[]CatalogSkidkiNatsenki, error) {
	type ReturnObj struct {
		Value []CatalogSkidkiNatsenki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_СкидкиНаценки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogSkidkiNatsenki(key PrimaryCatalogSkidkiNatsenki, entity CatalogSkidkiNatsenki) (*CatalogSkidkiNatsenki, error) {
	return NewCatalogSkidkiNatsenki(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogSkidkiNatsenki(key PrimaryCatalogSkidkiNatsenki) error {
	return c.removeEntity(key)
}

type CatalogSkidkiNatsenkiUsloviiaPredostavleniia struct {
	Key                       Guid  `json:"Ref_Key,omitempty"`
	LineNumber                Int64 `json:"LineNumber,omitempty"`
	UsloviePredostavleniiaKey *Guid `json:"УсловиеПредоставления_Key,omitempty"`
}

func (CatalogSkidkiNatsenkiUsloviiaPredostavleniia) APIEntityType() string {
	return "Catalog_СкидкиНаценки_УсловияПредоставления"
}
func NewCatalogSkidkiNatsenkiUsloviiaPredostavleniia(data string, prevError error) (*CatalogSkidkiNatsenkiUsloviiaPredostavleniia, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogSkidkiNatsenkiUsloviiaPredostavleniia)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogSkidkiNatsenkiUsloviiaPredostavleniia(entity CatalogSkidkiNatsenkiUsloviiaPredostavleniia) (*CatalogSkidkiNatsenkiUsloviiaPredostavleniia, error) {
	return NewCatalogSkidkiNatsenkiUsloviiaPredostavleniia(c.createEntity(entity))
}
func (c *Client) CatalogSkidkiNatsenkiUsloviiaPredostavleniia(key PrimaryCatalogSkidkiNatsenkiUsloviiaPredostavleniia, fields []string) (*CatalogSkidkiNatsenkiUsloviiaPredostavleniia, error) {
	return NewCatalogSkidkiNatsenkiUsloviiaPredostavleniia(c.getEntity(key, fields))
}
func (c *Client) CatalogSkidkiNatsenkiUsloviiaPredostavleniias(where Where) (*[]CatalogSkidkiNatsenkiUsloviiaPredostavleniia, error) {
	type ReturnObj struct {
		Value []CatalogSkidkiNatsenkiUsloviiaPredostavleniia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_СкидкиНаценки_УсловияПредоставления", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogSkidkiNatsenkiUsloviiaPredostavleniia(key PrimaryCatalogSkidkiNatsenkiUsloviiaPredostavleniia, entity CatalogSkidkiNatsenkiUsloviiaPredostavleniia) (*CatalogSkidkiNatsenkiUsloviiaPredostavleniia, error) {
	return NewCatalogSkidkiNatsenkiUsloviiaPredostavleniia(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogSkidkiNatsenkiUsloviiaPredostavleniia(key PrimaryCatalogSkidkiNatsenkiUsloviiaPredostavleniia) error {
	return c.removeEntity(key)
}

type CatalogSkidkiNatsenkiTsenovyeGruppy struct {
	Key                     Guid    `json:"Ref_Key,omitempty"`
	LineNumber              Int64   `json:"LineNumber,omitempty"`
	TsenovaiaGruppaKey      *Guid   `json:"ЦеноваяГруппа_Key,omitempty"`
	ZnachenieSkidkiNatsenki *Double `json:"ЗначениеСкидкиНаценки,omitempty"`
}

func (CatalogSkidkiNatsenkiTsenovyeGruppy) APIEntityType() string {
	return "Catalog_СкидкиНаценки_ЦеновыеГруппы"
}
func NewCatalogSkidkiNatsenkiTsenovyeGruppy(data string, prevError error) (*CatalogSkidkiNatsenkiTsenovyeGruppy, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogSkidkiNatsenkiTsenovyeGruppy)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogSkidkiNatsenkiTsenovyeGruppy(entity CatalogSkidkiNatsenkiTsenovyeGruppy) (*CatalogSkidkiNatsenkiTsenovyeGruppy, error) {
	return NewCatalogSkidkiNatsenkiTsenovyeGruppy(c.createEntity(entity))
}
func (c *Client) CatalogSkidkiNatsenkiTsenovyeGruppy(key PrimaryCatalogSkidkiNatsenkiTsenovyeGruppy, fields []string) (*CatalogSkidkiNatsenkiTsenovyeGruppy, error) {
	return NewCatalogSkidkiNatsenkiTsenovyeGruppy(c.getEntity(key, fields))
}
func (c *Client) CatalogSkidkiNatsenkiTsenovyeGruppys(where Where) (*[]CatalogSkidkiNatsenkiTsenovyeGruppy, error) {
	type ReturnObj struct {
		Value []CatalogSkidkiNatsenkiTsenovyeGruppy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_СкидкиНаценки_ЦеновыеГруппы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogSkidkiNatsenkiTsenovyeGruppy(key PrimaryCatalogSkidkiNatsenkiTsenovyeGruppy, entity CatalogSkidkiNatsenkiTsenovyeGruppy) (*CatalogSkidkiNatsenkiTsenovyeGruppy, error) {
	return NewCatalogSkidkiNatsenkiTsenovyeGruppy(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogSkidkiNatsenkiTsenovyeGruppy(key PrimaryCatalogSkidkiNatsenkiTsenovyeGruppy) error {
	return c.removeEntity(key)
}

type CatalogSkidkiNatsenkiNaborPodarkov struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	ItemKey                        *Guid   `json:"Номенклатура_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Quantity                       *Double `json:"Количество,omitempty"`
	SizeKey                        *Guid   `json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
}

func (CatalogSkidkiNatsenkiNaborPodarkov) APIEntityType() string {
	return "Catalog_СкидкиНаценки_НаборПодарков"
}
func NewCatalogSkidkiNatsenkiNaborPodarkov(data string, prevError error) (*CatalogSkidkiNatsenkiNaborPodarkov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogSkidkiNatsenkiNaborPodarkov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogSkidkiNatsenkiNaborPodarkov(entity CatalogSkidkiNatsenkiNaborPodarkov) (*CatalogSkidkiNatsenkiNaborPodarkov, error) {
	return NewCatalogSkidkiNatsenkiNaborPodarkov(c.createEntity(entity))
}
func (c *Client) CatalogSkidkiNatsenkiNaborPodarkov(key PrimaryCatalogSkidkiNatsenkiNaborPodarkov, fields []string) (*CatalogSkidkiNatsenkiNaborPodarkov, error) {
	return NewCatalogSkidkiNatsenkiNaborPodarkov(c.getEntity(key, fields))
}
func (c *Client) CatalogSkidkiNatsenkiNaborPodarkovs(where Where) (*[]CatalogSkidkiNatsenkiNaborPodarkov, error) {
	type ReturnObj struct {
		Value []CatalogSkidkiNatsenkiNaborPodarkov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_СкидкиНаценки_НаборПодарков", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogSkidkiNatsenkiNaborPodarkov(key PrimaryCatalogSkidkiNatsenkiNaborPodarkov, entity CatalogSkidkiNatsenkiNaborPodarkov) (*CatalogSkidkiNatsenkiNaborPodarkov, error) {
	return NewCatalogSkidkiNatsenkiNaborPodarkov(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogSkidkiNatsenkiNaborPodarkov(key PrimaryCatalogSkidkiNatsenkiNaborPodarkov) error {
	return c.removeEntity(key)
}

type CatalogGruppyTsvetov struct {
	Key          Guid     `json:"Ref_Key,omitempty"`
	DataVersion  *String  `json:"DataVersion,omitempty"`
	Description  *String  `json:"Description,omitempty"`
	Code         *String  `json:"Code,omitempty"`
	OwnerKey     *Guid    `json:"Owner_Key,omitempty"`
	DeletionMark *Boolean `json:"DeletionMark,omitempty"`
}

func (CatalogGruppyTsvetov) APIEntityType() string {
	return "Catalog_ГруппыЦветов"
}
func NewCatalogGruppyTsvetov(data string, prevError error) (*CatalogGruppyTsvetov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogGruppyTsvetov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogGruppyTsvetov(entity CatalogGruppyTsvetov) (*CatalogGruppyTsvetov, error) {
	return NewCatalogGruppyTsvetov(c.createEntity(entity))
}
func (c *Client) CatalogGruppyTsvetov(key PrimaryCatalogGruppyTsvetov, fields []string) (*CatalogGruppyTsvetov, error) {
	return NewCatalogGruppyTsvetov(c.getEntity(key, fields))
}
func (c *Client) CatalogGruppyTsvetovs(where Where) (*[]CatalogGruppyTsvetov, error) {
	type ReturnObj struct {
		Value []CatalogGruppyTsvetov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ГруппыЦветов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogGruppyTsvetov(key PrimaryCatalogGruppyTsvetov, entity CatalogGruppyTsvetov) (*CatalogGruppyTsvetov, error) {
	return NewCatalogGruppyTsvetov(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogGruppyTsvetov(key PrimaryCatalogGruppyTsvetov) error {
	return c.removeEntity(key)
}

type DocumentDokumentRaschetovSKontragentom struct {
	Key                          Guid      `json:"Ref_Key,omitempty"`
	DataVersion                  *String   `json:"DataVersion,omitempty"`
	Number                       *String   `json:"Number,omitempty"`
	Date                         *DateTime `json:"Date,omitempty"`
	DeletionMark                 *Boolean  `json:"DeletionMark,omitempty"`
	Posted                       *Boolean  `json:"Posted,omitempty"`
	DataVkhodiashchegoDokumenta  *DateTime `json:"ДатаВходящегоДокумента,omitempty"`
	DogovorKontragentaKey        *Guid     `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanieKey         *Guid     `json:"ДокументОснование_Key,omitempty"`
	Comment                      *String   `json:"Комментарий,omitempty"`
	KontragentKey                *Guid     `json:"Контрагент_Key,omitempty"`
	NomerVkhodiashchegoDokumenta *String   `json:"НомерВходящегоДокумента,omitempty"`
	OrganizatsiiaKey             *Guid     `json:"Организация_Key,omitempty"`
	DepartmentKey                *Guid     `json:"Склад_Key,omitempty"`
	OperationType                *String   `json:"ВидОперации,omitempty"`
	SumOfDocument                *Double   `json:"СуммаДокумента,omitempty"`
}

func (DocumentDokumentRaschetovSKontragentom) APIEntityType() string {
	return "Document_ДокументРасчетовСКонтрагентом"
}
func NewDocumentDokumentRaschetovSKontragentom(data string, prevError error) (*DocumentDokumentRaschetovSKontragentom, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentDokumentRaschetovSKontragentom)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentDokumentRaschetovSKontragentom(entity DocumentDokumentRaschetovSKontragentom) (*DocumentDokumentRaschetovSKontragentom, error) {
	return NewDocumentDokumentRaschetovSKontragentom(c.createEntity(entity))
}
func (c *Client) DocumentDokumentRaschetovSKontragentom(key PrimaryDocumentDokumentRaschetovSKontragentom, fields []string) (*DocumentDokumentRaschetovSKontragentom, error) {
	return NewDocumentDokumentRaschetovSKontragentom(c.getEntity(key, fields))
}
func (c *Client) DocumentDokumentRaschetovSKontragentoms(where Where) (*[]DocumentDokumentRaschetovSKontragentom, error) {
	type ReturnObj struct {
		Value []DocumentDokumentRaschetovSKontragentom `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ДокументРасчетовСКонтрагентом", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentDokumentRaschetovSKontragentom(key PrimaryDocumentDokumentRaschetovSKontragentom, entity DocumentDokumentRaschetovSKontragentom) (*DocumentDokumentRaschetovSKontragentom, error) {
	return NewDocumentDokumentRaschetovSKontragentom(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentDokumentRaschetovSKontragentom(key PrimaryDocumentDokumentRaschetovSKontragentom) error {
	return c.removeEntity(key)
}

type CatalogDogovoryEkvairinga struct {
	Key                                        Guid                                                               `json:"Ref_Key,omitempty"`
	DataVersion                                *String                                                            `json:"DataVersion,omitempty"`
	Description                                *String                                                            `json:"Description,omitempty"`
	Code                                       *String                                                            `json:"Code,omitempty"`
	DeletionMark                               *Boolean                                                           `json:"DeletionMark,omitempty"`
	AvtomaticheskiVychitatSummuTorgovoiUstupki *Boolean                                                           `json:"АвтоматическиВычитатьСуммуТорговойУступки,omitempty"`
	DogovorVzaimoraschetovKey                  *Guid                                                              `json:"ДоговорВзаиморасчетов_Key,omitempty"`
	EkvairerKey                                *Guid                                                              `json:"Эквайрер_Key,omitempty"`
	TarifyZaRaschetnoeObsluzhivanie            *[]CatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanieRowType `json:"ТарифыЗаРасчетноеОбслуживание,omitempty"`
}

func (CatalogDogovoryEkvairinga) APIEntityType() string {
	return "Catalog_ДоговорыЭквайринга"
}
func NewCatalogDogovoryEkvairinga(data string, prevError error) (*CatalogDogovoryEkvairinga, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogDogovoryEkvairinga)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogDogovoryEkvairinga(entity CatalogDogovoryEkvairinga) (*CatalogDogovoryEkvairinga, error) {
	return NewCatalogDogovoryEkvairinga(c.createEntity(entity))
}
func (c *Client) CatalogDogovoryEkvairinga(key PrimaryCatalogDogovoryEkvairinga, fields []string) (*CatalogDogovoryEkvairinga, error) {
	return NewCatalogDogovoryEkvairinga(c.getEntity(key, fields))
}
func (c *Client) CatalogDogovoryEkvairingas(where Where) (*[]CatalogDogovoryEkvairinga, error) {
	type ReturnObj struct {
		Value []CatalogDogovoryEkvairinga `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ДоговорыЭквайринга", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogDogovoryEkvairinga(key PrimaryCatalogDogovoryEkvairinga, entity CatalogDogovoryEkvairinga) (*CatalogDogovoryEkvairinga, error) {
	return NewCatalogDogovoryEkvairinga(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogDogovoryEkvairinga(key PrimaryCatalogDogovoryEkvairinga) error {
	return c.removeEntity(key)
}

type CatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanie struct {
	Key                     Guid    `json:"Ref_Key,omitempty"`
	LineNumber              Int64   `json:"LineNumber,omitempty"`
	VidOplatyKey            *Guid   `json:"ВидОплаты_Key,omitempty"`
	ProtsentTorgovoiUstupki *Double `json:"ПроцентТорговойУступки,omitempty"`
}

func (CatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanie) APIEntityType() string {
	return "Catalog_ДоговорыЭквайринга_ТарифыЗаРасчетноеОбслуживание"
}
func NewCatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanie(data string, prevError error) (*CatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanie, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanie)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanie(entity CatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanie) (*CatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanie, error) {
	return NewCatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanie(c.createEntity(entity))
}
func (c *Client) CatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanie(key PrimaryCatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanie, fields []string) (*CatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanie, error) {
	return NewCatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanie(c.getEntity(key, fields))
}
func (c *Client) CatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanies(where Where) (*[]CatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanie, error) {
	type ReturnObj struct {
		Value []CatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanie `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ДоговорыЭквайринга_ТарифыЗаРасчетноеОбслуживание", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanie(key PrimaryCatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanie, entity CatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanie) (*CatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanie, error) {
	return NewCatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanie(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanie(key PrimaryCatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanie) error {
	return c.removeEntity(key)
}

type CatalogKachestvo struct {
	Key          Guid     `json:"Ref_Key,omitempty"`
	DataVersion  *String  `json:"DataVersion,omitempty"`
	Description  *String  `json:"Description,omitempty"`
	Code         *String  `json:"Code,omitempty"`
	DeletionMark *Boolean `json:"DeletionMark,omitempty"`
}

func (CatalogKachestvo) APIEntityType() string {
	return "Catalog_Качество"
}
func NewCatalogKachestvo(data string, prevError error) (*CatalogKachestvo, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogKachestvo)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogKachestvo(entity CatalogKachestvo) (*CatalogKachestvo, error) {
	return NewCatalogKachestvo(c.createEntity(entity))
}
func (c *Client) CatalogKachestvo(key PrimaryCatalogKachestvo, fields []string) (*CatalogKachestvo, error) {
	return NewCatalogKachestvo(c.getEntity(key, fields))
}
func (c *Client) CatalogKachestvos(where Where) (*[]CatalogKachestvo, error) {
	type ReturnObj struct {
		Value []CatalogKachestvo `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Качество", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogKachestvo(key PrimaryCatalogKachestvo, entity CatalogKachestvo) (*CatalogKachestvo, error) {
	return NewCatalogKachestvo(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogKachestvo(key PrimaryCatalogKachestvo) error {
	return c.removeEntity(key)
}

type DocumentUstanovkaTsenNomenklaturyKontragentov struct {
	Key                         Guid                                                            `json:"Ref_Key,omitempty"`
	DataVersion                 *String                                                         `json:"DataVersion,omitempty"`
	Number                      *String                                                         `json:"Number,omitempty"`
	Date                        *DateTime                                                       `json:"Date,omitempty"`
	DeletionMark                *Boolean                                                        `json:"DeletionMark,omitempty"`
	Posted                      *Boolean                                                        `json:"Posted,omitempty"`
	DokumentOsnovanie           *String                                                         `json:"ДокументОснование,omitempty"`
	Informatsiia                *String                                                         `json:"Информация,omitempty"`
	Comment                     *String                                                         `json:"Комментарий,omitempty"`
	KontragentKey               *Guid                                                           `json:"Контрагент_Key,omitempty"`
	NeProvoditNulevyeZnacheniia *Boolean                                                        `json:"НеПроводитьНулевыеЗначения,omitempty"`
	OtvetstvennyiKey            *Guid                                                           `json:"Ответственный_Key,omitempty"`
	TipyTsen                    *[]DocumentUstanovkaTsenNomenklaturyKontragentovTipyTsenRowType `json:"ТипыЦен,omitempty"`
	Goods                       *[]DocumentUstanovkaTsenNomenklaturyKontragentovTovaryRowType   `json:"Товары,omitempty"`
	DokumentOsnovanieType       *String                                                         `json:"ДокументОснование_Type,omitempty"`
}

func (DocumentUstanovkaTsenNomenklaturyKontragentov) APIEntityType() string {
	return "Document_УстановкаЦенНоменклатурыКонтрагентов"
}
func NewDocumentUstanovkaTsenNomenklaturyKontragentov(data string, prevError error) (*DocumentUstanovkaTsenNomenklaturyKontragentov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentUstanovkaTsenNomenklaturyKontragentov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentUstanovkaTsenNomenklaturyKontragentov(entity DocumentUstanovkaTsenNomenklaturyKontragentov) (*DocumentUstanovkaTsenNomenklaturyKontragentov, error) {
	return NewDocumentUstanovkaTsenNomenklaturyKontragentov(c.createEntity(entity))
}
func (c *Client) DocumentUstanovkaTsenNomenklaturyKontragentov(key PrimaryDocumentUstanovkaTsenNomenklaturyKontragentov, fields []string) (*DocumentUstanovkaTsenNomenklaturyKontragentov, error) {
	return NewDocumentUstanovkaTsenNomenklaturyKontragentov(c.getEntity(key, fields))
}
func (c *Client) DocumentUstanovkaTsenNomenklaturyKontragentovs(where Where) (*[]DocumentUstanovkaTsenNomenklaturyKontragentov, error) {
	type ReturnObj struct {
		Value []DocumentUstanovkaTsenNomenklaturyKontragentov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_УстановкаЦенНоменклатурыКонтрагентов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentUstanovkaTsenNomenklaturyKontragentov(key PrimaryDocumentUstanovkaTsenNomenklaturyKontragentov, entity DocumentUstanovkaTsenNomenklaturyKontragentov) (*DocumentUstanovkaTsenNomenklaturyKontragentov, error) {
	return NewDocumentUstanovkaTsenNomenklaturyKontragentov(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentUstanovkaTsenNomenklaturyKontragentov(key PrimaryDocumentUstanovkaTsenNomenklaturyKontragentov) error {
	return c.removeEntity(key)
}

type DocumentUstanovkaTsenNomenklaturyKontragentovTipyTsen struct {
	Key        Guid  `json:"Ref_Key,omitempty"`
	LineNumber Int64 `json:"LineNumber,omitempty"`
	TipTsenKey *Guid `json:"ТипЦен_Key,omitempty"`
}

func (DocumentUstanovkaTsenNomenklaturyKontragentovTipyTsen) APIEntityType() string {
	return "Document_УстановкаЦенНоменклатурыКонтрагентов_ТипыЦен"
}
func NewDocumentUstanovkaTsenNomenklaturyKontragentovTipyTsen(data string, prevError error) (*DocumentUstanovkaTsenNomenklaturyKontragentovTipyTsen, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentUstanovkaTsenNomenklaturyKontragentovTipyTsen)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentUstanovkaTsenNomenklaturyKontragentovTipyTsen(entity DocumentUstanovkaTsenNomenklaturyKontragentovTipyTsen) (*DocumentUstanovkaTsenNomenklaturyKontragentovTipyTsen, error) {
	return NewDocumentUstanovkaTsenNomenklaturyKontragentovTipyTsen(c.createEntity(entity))
}
func (c *Client) DocumentUstanovkaTsenNomenklaturyKontragentovTipyTsen(key PrimaryDocumentUstanovkaTsenNomenklaturyKontragentovTipyTsen, fields []string) (*DocumentUstanovkaTsenNomenklaturyKontragentovTipyTsen, error) {
	return NewDocumentUstanovkaTsenNomenklaturyKontragentovTipyTsen(c.getEntity(key, fields))
}
func (c *Client) DocumentUstanovkaTsenNomenklaturyKontragentovTipyTsens(where Where) (*[]DocumentUstanovkaTsenNomenklaturyKontragentovTipyTsen, error) {
	type ReturnObj struct {
		Value []DocumentUstanovkaTsenNomenklaturyKontragentovTipyTsen `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_УстановкаЦенНоменклатурыКонтрагентов_ТипыЦен", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentUstanovkaTsenNomenklaturyKontragentovTipyTsen(key PrimaryDocumentUstanovkaTsenNomenklaturyKontragentovTipyTsen, entity DocumentUstanovkaTsenNomenklaturyKontragentovTipyTsen) (*DocumentUstanovkaTsenNomenklaturyKontragentovTipyTsen, error) {
	return NewDocumentUstanovkaTsenNomenklaturyKontragentovTipyTsen(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentUstanovkaTsenNomenklaturyKontragentovTipyTsen(key PrimaryDocumentUstanovkaTsenNomenklaturyKontragentovTipyTsen) error {
	return c.removeEntity(key)
}

type DocumentUstanovkaTsenNomenklaturyKontragentovTovary struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	ValiutaKey                     *Guid   `json:"Валюта_Key,omitempty"`
	IndeksStrokiTablitsyTsen       *Int64  `json:"ИндексСтрокиТаблицыЦен,omitempty"`
	ItemKey                        *Guid   `json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid   `json:"Размер_Key,omitempty"`
	TipTsenKey                     *Guid   `json:"ТипЦен_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Double `json:"Цена,omitempty"`
}

func (DocumentUstanovkaTsenNomenklaturyKontragentovTovary) APIEntityType() string {
	return "Document_УстановкаЦенНоменклатурыКонтрагентов_Товары"
}
func NewDocumentUstanovkaTsenNomenklaturyKontragentovTovary(data string, prevError error) (*DocumentUstanovkaTsenNomenklaturyKontragentovTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentUstanovkaTsenNomenklaturyKontragentovTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentUstanovkaTsenNomenklaturyKontragentovTovary(entity DocumentUstanovkaTsenNomenklaturyKontragentovTovary) (*DocumentUstanovkaTsenNomenklaturyKontragentovTovary, error) {
	return NewDocumentUstanovkaTsenNomenklaturyKontragentovTovary(c.createEntity(entity))
}
func (c *Client) DocumentUstanovkaTsenNomenklaturyKontragentovTovary(key PrimaryDocumentUstanovkaTsenNomenklaturyKontragentovTovary, fields []string) (*DocumentUstanovkaTsenNomenklaturyKontragentovTovary, error) {
	return NewDocumentUstanovkaTsenNomenklaturyKontragentovTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentUstanovkaTsenNomenklaturyKontragentovTovarys(where Where) (*[]DocumentUstanovkaTsenNomenklaturyKontragentovTovary, error) {
	type ReturnObj struct {
		Value []DocumentUstanovkaTsenNomenklaturyKontragentovTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_УстановкаЦенНоменклатурыКонтрагентов_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentUstanovkaTsenNomenklaturyKontragentovTovary(key PrimaryDocumentUstanovkaTsenNomenklaturyKontragentovTovary, entity DocumentUstanovkaTsenNomenklaturyKontragentovTovary) (*DocumentUstanovkaTsenNomenklaturyKontragentovTovary, error) {
	return NewDocumentUstanovkaTsenNomenklaturyKontragentovTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentUstanovkaTsenNomenklaturyKontragentovTovary(key PrimaryDocumentUstanovkaTsenNomenklaturyKontragentovTovary) error {
	return c.removeEntity(key)
}

type DocumentProtsentPoterPoDavaltsam struct {
	Key                   Guid                                                `json:"Ref_Key,omitempty"`
	DataVersion           *String                                             `json:"DataVersion,omitempty"`
	Number                *String                                             `json:"Number,omitempty"`
	Date                  *DateTime                                           `json:"Date,omitempty"`
	DeletionMark          *Boolean                                            `json:"DeletionMark,omitempty"`
	Posted                *Boolean                                            `json:"Posted,omitempty"`
	DogovorKontragentaKey *Guid                                               `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanieKey  *Guid                                               `json:"ДокументОснование_Key,omitempty"`
	Comment               *String                                             `json:"Комментарий,omitempty"`
	KontragentKey         *Guid                                               `json:"Контрагент_Key,omitempty"`
	OrganizatsiiaKey      *Guid                                               `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey      *Guid                                               `json:"Ответственный_Key,omitempty"`
	Protsenty             *[]DocumentProtsentPoterPoDavaltsamProtsentyRowType `json:"Проценты,omitempty"`
}

func (DocumentProtsentPoterPoDavaltsam) APIEntityType() string {
	return "Document_ПроцентПотерьПоДавальцам"
}
func NewDocumentProtsentPoterPoDavaltsam(data string, prevError error) (*DocumentProtsentPoterPoDavaltsam, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentProtsentPoterPoDavaltsam)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentProtsentPoterPoDavaltsam(entity DocumentProtsentPoterPoDavaltsam) (*DocumentProtsentPoterPoDavaltsam, error) {
	return NewDocumentProtsentPoterPoDavaltsam(c.createEntity(entity))
}
func (c *Client) DocumentProtsentPoterPoDavaltsam(key PrimaryDocumentProtsentPoterPoDavaltsam, fields []string) (*DocumentProtsentPoterPoDavaltsam, error) {
	return NewDocumentProtsentPoterPoDavaltsam(c.getEntity(key, fields))
}
func (c *Client) DocumentProtsentPoterPoDavaltsams(where Where) (*[]DocumentProtsentPoterPoDavaltsam, error) {
	type ReturnObj struct {
		Value []DocumentProtsentPoterPoDavaltsam `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПроцентПотерьПоДавальцам", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentProtsentPoterPoDavaltsam(key PrimaryDocumentProtsentPoterPoDavaltsam, entity DocumentProtsentPoterPoDavaltsam) (*DocumentProtsentPoterPoDavaltsam, error) {
	return NewDocumentProtsentPoterPoDavaltsam(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentProtsentPoterPoDavaltsam(key PrimaryDocumentProtsentPoterPoDavaltsam) error {
	return c.removeEntity(key)
}

type DocumentProtsentPoterPoDavaltsamProtsenty struct {
	Key        Guid    `json:"Ref_Key,omitempty"`
	LineNumber Int64   `json:"LineNumber,omitempty"`
	ItemKey    *Guid   `json:"Номенклатура_Key,omitempty"`
	Protsent   *Double `json:"Процент,omitempty"`
}

func (DocumentProtsentPoterPoDavaltsamProtsenty) APIEntityType() string {
	return "Document_ПроцентПотерьПоДавальцам_Проценты"
}
func NewDocumentProtsentPoterPoDavaltsamProtsenty(data string, prevError error) (*DocumentProtsentPoterPoDavaltsamProtsenty, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentProtsentPoterPoDavaltsamProtsenty)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentProtsentPoterPoDavaltsamProtsenty(entity DocumentProtsentPoterPoDavaltsamProtsenty) (*DocumentProtsentPoterPoDavaltsamProtsenty, error) {
	return NewDocumentProtsentPoterPoDavaltsamProtsenty(c.createEntity(entity))
}
func (c *Client) DocumentProtsentPoterPoDavaltsamProtsenty(key PrimaryDocumentProtsentPoterPoDavaltsamProtsenty, fields []string) (*DocumentProtsentPoterPoDavaltsamProtsenty, error) {
	return NewDocumentProtsentPoterPoDavaltsamProtsenty(c.getEntity(key, fields))
}
func (c *Client) DocumentProtsentPoterPoDavaltsamProtsentys(where Where) (*[]DocumentProtsentPoterPoDavaltsamProtsenty, error) {
	type ReturnObj struct {
		Value []DocumentProtsentPoterPoDavaltsamProtsenty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПроцентПотерьПоДавальцам_Проценты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentProtsentPoterPoDavaltsamProtsenty(key PrimaryDocumentProtsentPoterPoDavaltsamProtsenty, entity DocumentProtsentPoterPoDavaltsamProtsenty) (*DocumentProtsentPoterPoDavaltsamProtsenty, error) {
	return NewDocumentProtsentPoterPoDavaltsamProtsenty(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentProtsentPoterPoDavaltsamProtsenty(key PrimaryDocumentProtsentPoterPoDavaltsamProtsenty) error {
	return c.removeEntity(key)
}

type CatalogTovarnyePozitsii struct {
	Key            Guid     `json:"Ref_Key,omitempty"`
	DataVersion    *String  `json:"DataVersion,omitempty"`
	Description    *String  `json:"Description,omitempty"`
	DeletionMark   *Boolean `json:"DeletionMark,omitempty"`
	Pozitsiia1     *String  `json:"Позиция1,omitempty"`
	Pozitsiia2     *String  `json:"Позиция2,omitempty"`
	Pozitsiia3     *String  `json:"Позиция3,omitempty"`
	Pozitsiia4     *String  `json:"Позиция4,omitempty"`
	Pozitsiia5     *String  `json:"Позиция5,omitempty"`
	Pozitsiia6     *String  `json:"Позиция6,omitempty"`
	Pozitsiia7     *String  `json:"Позиция7,omitempty"`
	Pozitsiia1Type *String  `json:"Позиция1_Type,omitempty"`
	Pozitsiia2Type *String  `json:"Позиция2_Type,omitempty"`
	Pozitsiia3Type *String  `json:"Позиция3_Type,omitempty"`
	Pozitsiia4Type *String  `json:"Позиция4_Type,omitempty"`
	Pozitsiia5Type *String  `json:"Позиция5_Type,omitempty"`
	Pozitsiia6Type *String  `json:"Позиция6_Type,omitempty"`
	Pozitsiia7Type *String  `json:"Позиция7_Type,omitempty"`
}

func (CatalogTovarnyePozitsii) APIEntityType() string {
	return "Catalog_ТоварныеПозиции"
}
func NewCatalogTovarnyePozitsii(data string, prevError error) (*CatalogTovarnyePozitsii, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogTovarnyePozitsii)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogTovarnyePozitsii(entity CatalogTovarnyePozitsii) (*CatalogTovarnyePozitsii, error) {
	return NewCatalogTovarnyePozitsii(c.createEntity(entity))
}
func (c *Client) CatalogTovarnyePozitsii(key PrimaryCatalogTovarnyePozitsii, fields []string) (*CatalogTovarnyePozitsii, error) {
	return NewCatalogTovarnyePozitsii(c.getEntity(key, fields))
}
func (c *Client) CatalogTovarnyePozitsiis(where Where) (*[]CatalogTovarnyePozitsii, error) {
	type ReturnObj struct {
		Value []CatalogTovarnyePozitsii `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ТоварныеПозиции", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogTovarnyePozitsii(key PrimaryCatalogTovarnyePozitsii, entity CatalogTovarnyePozitsii) (*CatalogTovarnyePozitsii, error) {
	return NewCatalogTovarnyePozitsii(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogTovarnyePozitsii(key PrimaryCatalogTovarnyePozitsii) error {
	return c.removeEntity(key)
}

type DocumentPlatezhnoePoruchenieIskhodiashchee struct {
	Key                        Guid                                                                     `json:"Ref_Key,omitempty"`
	DataVersion                *String                                                                  `json:"DataVersion,omitempty"`
	Number                     *String                                                                  `json:"Number,omitempty"`
	Date                       *DateTime                                                                `json:"Date,omitempty"`
	DeletionMark               *Boolean                                                                 `json:"DeletionMark,omitempty"`
	Posted                     *Boolean                                                                 `json:"Posted,omitempty"`
	ValiutaDokumentaKey        *Guid                                                                    `json:"ВалютаДокумента_Key,omitempty"`
	OperationType              *String                                                                  `json:"ВидОперации,omitempty"`
	VidPerechisleniiaVBiudzhet *String                                                                  `json:"ВидПеречисленияВБюджет,omitempty"`
	VidPlatezha                *String                                                                  `json:"ВидПлатежа,omitempty"`
	DataOplaty                 *DateTime                                                                `json:"ДатаОплаты,omitempty"`
	DogovorKontragentaKey      *Guid                                                                    `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie          *String                                                                  `json:"ДокументОснование,omitempty"`
	DokumentSozdanVIuTD        *Boolean                                                                 `json:"ДокументСозданВЮТД,omitempty"`
	IdentifikatorPlatezha      *String                                                                  `json:"ИдентификаторПлатежа,omitempty"`
	INNPlatelshchika           *String                                                                  `json:"ИННПлательщика,omitempty"`
	INNPoluchatelia            *String                                                                  `json:"ИННПолучателя,omitempty"`
	KodBK                      *String                                                                  `json:"КодБК,omitempty"`
	KodOKATO                   *String                                                                  `json:"КодОКАТО,omitempty"`
	Comment                    *String                                                                  `json:"Комментарий,omitempty"`
	KontragentKey              *Guid                                                                    `json:"Контрагент_Key,omitempty"`
	KPPPlatelshchika           *String                                                                  `json:"КПППлательщика,omitempty"`
	KPPPoluchatelia            *String                                                                  `json:"КПППолучателя,omitempty"`
	NaznacheniePlatezha        *String                                                                  `json:"НазначениеПлатежа,omitempty"`
	Oplacheno                  *Boolean                                                                 `json:"Оплачено,omitempty"`
	OrganizatsiiaKey           *Guid                                                                    `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey           *Guid                                                                    `json:"Ответственный_Key,omitempty"`
	OtrazhenoVOperUchete       *Boolean                                                                 `json:"ОтраженоВОперУчете,omitempty"`
	OcherednostPlatezha        *Int16                                                                   `json:"ОчередностьПлатежа,omitempty"`
	PerechislenieVBiudzhet     *Boolean                                                                 `json:"ПеречислениеВБюджет,omitempty"`
	PodrazdelenieKey           *Guid                                                                    `json:"Подразделение_Key,omitempty"`
	PokazatelDaty              *DateTime                                                                `json:"ПоказательДаты,omitempty"`
	PokazatelNomera            *String                                                                  `json:"ПоказательНомера,omitempty"`
	PokazatelOsnovaniia        *String                                                                  `json:"ПоказательОснования,omitempty"`
	PokazatelPerioda           *String                                                                  `json:"ПоказательПериода,omitempty"`
	PokazatelTipa              *String                                                                  `json:"ПоказательТипа,omitempty"`
	StatusSostavitelia         *String                                                                  `json:"СтатусСоставителя,omitempty"`
	TypeOfMovingMoneyKey       *Guid                                                                    `json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SumOfDocument              *Double                                                                  `json:"СуммаДокумента,omitempty"`
	SchetKontragentaKey        *Guid                                                                    `json:"СчетКонтрагента_Key,omitempty"`
	SchetOrganizatsiiKey       *Guid                                                                    `json:"СчетОрганизации_Key,omitempty"`
	TekstPlatelshchika         *String                                                                  `json:"ТекстПлательщика,omitempty"`
	TekstPoluchatelia          *String                                                                  `json:"ТекстПолучателя,omitempty"`
	TipDokumenta               *String                                                                  `json:"ТипДокумента,omitempty"`
	ChastichnaiaOplata         *Boolean                                                                 `json:"ЧастичнаяОплата,omitempty"`
	ExtendedPayments           *[]DocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezhaRowType `json:"РасшифровкаПлатежа,omitempty"`
	RekvizityKontragenta       *[]DocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragentaRowType `json:"РеквизитыКонтрагента,omitempty"`
	DokumentOsnovanieType      *String                                                                  `json:"ДокументОснование_Type,omitempty"`
}

func (DocumentPlatezhnoePoruchenieIskhodiashchee) APIEntityType() string {
	return "Document_ПлатежноеПоручениеИсходящее"
}
func NewDocumentPlatezhnoePoruchenieIskhodiashchee(data string, prevError error) (*DocumentPlatezhnoePoruchenieIskhodiashchee, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPlatezhnoePoruchenieIskhodiashchee)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPlatezhnoePoruchenieIskhodiashchee(entity DocumentPlatezhnoePoruchenieIskhodiashchee) (*DocumentPlatezhnoePoruchenieIskhodiashchee, error) {
	return NewDocumentPlatezhnoePoruchenieIskhodiashchee(c.createEntity(entity))
}
func (c *Client) DocumentPlatezhnoePoruchenieIskhodiashchee(key PrimaryDocumentPlatezhnoePoruchenieIskhodiashchee, fields []string) (*DocumentPlatezhnoePoruchenieIskhodiashchee, error) {
	return NewDocumentPlatezhnoePoruchenieIskhodiashchee(c.getEntity(key, fields))
}
func (c *Client) DocumentPlatezhnoePoruchenieIskhodiashchees(where Where) (*[]DocumentPlatezhnoePoruchenieIskhodiashchee, error) {
	type ReturnObj struct {
		Value []DocumentPlatezhnoePoruchenieIskhodiashchee `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПлатежноеПоручениеИсходящее", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPlatezhnoePoruchenieIskhodiashchee(key PrimaryDocumentPlatezhnoePoruchenieIskhodiashchee, entity DocumentPlatezhnoePoruchenieIskhodiashchee) (*DocumentPlatezhnoePoruchenieIskhodiashchee, error) {
	return NewDocumentPlatezhnoePoruchenieIskhodiashchee(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPlatezhnoePoruchenieIskhodiashchee(key PrimaryDocumentPlatezhnoePoruchenieIskhodiashchee) error {
	return c.removeEntity(key)
}

type DocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezha struct {
	Key                              Guid    `json:"Ref_Key,omitempty"`
	LineNumber                       Int64   `json:"LineNumber,omitempty"`
	DogovorKontragentaKey            *Guid   `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentPlanirovaniiaPlatezhaKey *Guid   `json:"ДокументПланированияПлатежа_Key,omitempty"`
	KratnostVzaimoraschetov          *Int64  `json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov              *Double `json:"КурсВзаиморасчетов,omitempty"`
	KursVzaimoraschetovPlan          *Double `json:"КурсВзаиморасчетовПлан,omitempty"`
	ProektKey                        *Guid   `json:"Проект_Key,omitempty"`
	Sdelka                           *String `json:"Сделка,omitempty"`
	StavkaNDS                        *String `json:"СтавкаНДС,omitempty"`
	TypeOfMovingMoneyKey             *Guid   `json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov             *Double `json:"СуммаВзаиморасчетов,omitempty"`
	SummaNDS                         *Double `json:"СуммаНДС,omitempty"`
	Sum                              *Double `json:"СуммаПлатежа,omitempty"`
	SummaPlatezhaPlan                *Double `json:"СуммаПлатежаПлан,omitempty"`
	SdelkaType                       *String `json:"Сделка_Type,omitempty"`
}

func (DocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezha) APIEntityType() string {
	return "Document_ПлатежноеПоручениеИсходящее_РасшифровкаПлатежа"
}
func NewDocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezha(data string, prevError error) (*DocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezha, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezha)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezha(entity DocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezha) (*DocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezha, error) {
	return NewDocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezha(c.createEntity(entity))
}
func (c *Client) DocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezha(key PrimaryDocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezha, fields []string) (*DocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezha, error) {
	return NewDocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezha(c.getEntity(key, fields))
}
func (c *Client) DocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezhas(where Where) (*[]DocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezha, error) {
	type ReturnObj struct {
		Value []DocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezha `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПлатежноеПоручениеИсходящее_РасшифровкаПлатежа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezha(key PrimaryDocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezha, entity DocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezha) (*DocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezha, error) {
	return NewDocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezha(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezha(key PrimaryDocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezha) error {
	return c.removeEntity(key)
}

type DocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragenta struct {
	Key            Guid    `json:"Ref_Key,omitempty"`
	LineNumber     Int64   `json:"LineNumber,omitempty"`
	Znachenie      *String `json:"Значение,omitempty"`
	Predstavlenie  *String `json:"Представление,omitempty"`
	Rekvizit       *String `json:"Реквизит,omitempty"`
	TipKontragenta *String `json:"ТипКонтрагента,omitempty"`
}

func (DocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragenta) APIEntityType() string {
	return "Document_ПлатежноеПоручениеИсходящее_РеквизитыКонтрагента"
}
func NewDocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragenta(data string, prevError error) (*DocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragenta, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragenta)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragenta(entity DocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragenta) (*DocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragenta, error) {
	return NewDocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragenta(c.createEntity(entity))
}
func (c *Client) DocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragenta(key PrimaryDocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragenta, fields []string) (*DocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragenta, error) {
	return NewDocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragenta(c.getEntity(key, fields))
}
func (c *Client) DocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragentas(where Where) (*[]DocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragenta, error) {
	type ReturnObj struct {
		Value []DocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragenta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПлатежноеПоручениеИсходящее_РеквизитыКонтрагента", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragenta(key PrimaryDocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragenta, entity DocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragenta) (*DocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragenta, error) {
	return NewDocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragenta(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragenta(key PrimaryDocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragenta) error {
	return c.removeEntity(key)
}

type CatalogfmOrganizatsionnoPravovyeFormy struct {
	Key                Guid     `json:"Ref_Key,omitempty"`
	DataVersion        *String  `json:"DataVersion,omitempty"`
	Description        *String  `json:"Description,omitempty"`
	Code               *String  `json:"Code,omitempty"`
	DeletionMark       *Boolean `json:"DeletionMark,omitempty"`
	PolnoeNaimenovanie *String  `json:"ПолноеНаименование,omitempty"`
}

func (CatalogfmOrganizatsionnoPravovyeFormy) APIEntityType() string {
	return "Catalog_фмОрганизационноПравовыеФормы"
}
func NewCatalogfmOrganizatsionnoPravovyeFormy(data string, prevError error) (*CatalogfmOrganizatsionnoPravovyeFormy, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogfmOrganizatsionnoPravovyeFormy)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogfmOrganizatsionnoPravovyeFormy(entity CatalogfmOrganizatsionnoPravovyeFormy) (*CatalogfmOrganizatsionnoPravovyeFormy, error) {
	return NewCatalogfmOrganizatsionnoPravovyeFormy(c.createEntity(entity))
}
func (c *Client) CatalogfmOrganizatsionnoPravovyeFormy(key PrimaryCatalogfmOrganizatsionnoPravovyeFormy, fields []string) (*CatalogfmOrganizatsionnoPravovyeFormy, error) {
	return NewCatalogfmOrganizatsionnoPravovyeFormy(c.getEntity(key, fields))
}
func (c *Client) CatalogfmOrganizatsionnoPravovyeFormys(where Where) (*[]CatalogfmOrganizatsionnoPravovyeFormy, error) {
	type ReturnObj struct {
		Value []CatalogfmOrganizatsionnoPravovyeFormy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_фмОрганизационноПравовыеФормы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogfmOrganizatsionnoPravovyeFormy(key PrimaryCatalogfmOrganizatsionnoPravovyeFormy, entity CatalogfmOrganizatsionnoPravovyeFormy) (*CatalogfmOrganizatsionnoPravovyeFormy, error) {
	return NewCatalogfmOrganizatsionnoPravovyeFormy(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogfmOrganizatsionnoPravovyeFormy(key PrimaryCatalogfmOrganizatsionnoPravovyeFormy) error {
	return c.removeEntity(key)
}

type CatalogTipyTsenNomenklatury struct {
	Key                       Guid     `json:"Ref_Key,omitempty"`
	DataVersion               *String  `json:"DataVersion,omitempty"`
	Description               *String  `json:"Description,omitempty"`
	Code                      *String  `json:"Code,omitempty"`
	DeletionMark              *Boolean `json:"DeletionMark,omitempty"`
	BazovyiTipTsenKey         *Guid    `json:"БазовыйТипЦен_Key,omitempty"`
	ValiutaTsenyKey           *Guid    `json:"ВалютаЦены_Key,omitempty"`
	VidSkidkiNatsenki         *String  `json:"ВидСкидкиНаценки,omitempty"`
	VygruzhatTsenyNaSait      *Boolean `json:"ВыгружатьЦеныНаСайт,omitempty"`
	Comment                   *String  `json:"Комментарий,omitempty"`
	NatsenkaNaSebestoimost    *Int16   `json:"НаценкаНаСебестоимость,omitempty"`
	OkrugliatVBolshuiuStoronu *Boolean `json:"ОкруглятьВБольшуюСторону,omitempty"`
	OkrugliatSummu            *Boolean `json:"ОкруглятьСумму,omitempty"`
	PoriadokOkrugleniia       *String  `json:"ПорядокОкругления,omitempty"`
	ProtsentSkidkiNatsenki    *Double  `json:"ПроцентСкидкиНаценки,omitempty"`
	Rasschityvaetsia          *Boolean `json:"Рассчитывается,omitempty"`
	TsenaVkliuchaetNDS        *Boolean `json:"ЦенаВключаетНДС,omitempty"`
	DliaSegmentov             *Boolean `json:"ДляСегментов,omitempty"`
	BIdentifikator            *String  `json:"Б_Идентификатор,omitempty"`
}

func (CatalogTipyTsenNomenklatury) APIEntityType() string {
	return "Catalog_ТипыЦенНоменклатуры"
}
func NewCatalogTipyTsenNomenklatury(data string, prevError error) (*CatalogTipyTsenNomenklatury, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogTipyTsenNomenklatury)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogTipyTsenNomenklatury(entity CatalogTipyTsenNomenklatury) (*CatalogTipyTsenNomenklatury, error) {
	return NewCatalogTipyTsenNomenklatury(c.createEntity(entity))
}
func (c *Client) CatalogTipyTsenNomenklatury(key PrimaryCatalogTipyTsenNomenklatury, fields []string) (*CatalogTipyTsenNomenklatury, error) {
	return NewCatalogTipyTsenNomenklatury(c.getEntity(key, fields))
}
func (c *Client) CatalogTipyTsenNomenklaturys(where Where) (*[]CatalogTipyTsenNomenklatury, error) {
	type ReturnObj struct {
		Value []CatalogTipyTsenNomenklatury `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ТипыЦенНоменклатуры", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogTipyTsenNomenklatury(key PrimaryCatalogTipyTsenNomenklatury, entity CatalogTipyTsenNomenklatury) (*CatalogTipyTsenNomenklatury, error) {
	return NewCatalogTipyTsenNomenklatury(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogTipyTsenNomenklatury(key PrimaryCatalogTipyTsenNomenklatury) error {
	return c.removeEntity(key)
}

type CatalogStatiOtchetaPoProdazham struct {
	Key          Guid     `json:"Ref_Key,omitempty"`
	DataVersion  *String  `json:"DataVersion,omitempty"`
	Description  *String  `json:"Description,omitempty"`
	Code         *String  `json:"Code,omitempty"`
	ParentKey    *Guid    `json:"Parent_Key,omitempty"`
	IsFolder     *Boolean `json:"IsFolder,omitempty"`
	DeletionMark *Boolean `json:"DeletionMark,omitempty"`
}

func (CatalogStatiOtchetaPoProdazham) APIEntityType() string {
	return "Catalog_СтатьиОтчетаПоПродажам"
}
func NewCatalogStatiOtchetaPoProdazham(data string, prevError error) (*CatalogStatiOtchetaPoProdazham, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogStatiOtchetaPoProdazham)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogStatiOtchetaPoProdazham(entity CatalogStatiOtchetaPoProdazham) (*CatalogStatiOtchetaPoProdazham, error) {
	return NewCatalogStatiOtchetaPoProdazham(c.createEntity(entity))
}
func (c *Client) CatalogStatiOtchetaPoProdazham(key PrimaryCatalogStatiOtchetaPoProdazham, fields []string) (*CatalogStatiOtchetaPoProdazham, error) {
	return NewCatalogStatiOtchetaPoProdazham(c.getEntity(key, fields))
}
func (c *Client) CatalogStatiOtchetaPoProdazhams(where Where) (*[]CatalogStatiOtchetaPoProdazham, error) {
	type ReturnObj struct {
		Value []CatalogStatiOtchetaPoProdazham `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_СтатьиОтчетаПоПродажам", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogStatiOtchetaPoProdazham(key PrimaryCatalogStatiOtchetaPoProdazham, entity CatalogStatiOtchetaPoProdazham) (*CatalogStatiOtchetaPoProdazham, error) {
	return NewCatalogStatiOtchetaPoProdazham(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogStatiOtchetaPoProdazham(key PrimaryCatalogStatiOtchetaPoProdazham) error {
	return c.removeEntity(key)
}

type CatalogVidyKodirovokiIzdelii struct {
	Key               Guid                                                    `json:"Ref_Key,omitempty"`
	DataVersion       *String                                                 `json:"DataVersion,omitempty"`
	Description       *String                                                 `json:"Description,omitempty"`
	Code              *String                                                 `json:"Code,omitempty"`
	DeletionMark      *Boolean                                                `json:"DeletionMark,omitempty"`
	ElementyKodirovki *[]CatalogVidyKodirovokiIzdeliiElementyKodirovkiRowType `json:"ЭлементыКодировки,omitempty"`
}

func (CatalogVidyKodirovokiIzdelii) APIEntityType() string {
	return "Catalog_ВидыКодировокиИзделий"
}
func NewCatalogVidyKodirovokiIzdelii(data string, prevError error) (*CatalogVidyKodirovokiIzdelii, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogVidyKodirovokiIzdelii)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogVidyKodirovokiIzdelii(entity CatalogVidyKodirovokiIzdelii) (*CatalogVidyKodirovokiIzdelii, error) {
	return NewCatalogVidyKodirovokiIzdelii(c.createEntity(entity))
}
func (c *Client) CatalogVidyKodirovokiIzdelii(key PrimaryCatalogVidyKodirovokiIzdelii, fields []string) (*CatalogVidyKodirovokiIzdelii, error) {
	return NewCatalogVidyKodirovokiIzdelii(c.getEntity(key, fields))
}
func (c *Client) CatalogVidyKodirovokiIzdeliis(where Where) (*[]CatalogVidyKodirovokiIzdelii, error) {
	type ReturnObj struct {
		Value []CatalogVidyKodirovokiIzdelii `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ВидыКодировокиИзделий", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogVidyKodirovokiIzdelii(key PrimaryCatalogVidyKodirovokiIzdelii, entity CatalogVidyKodirovokiIzdelii) (*CatalogVidyKodirovokiIzdelii, error) {
	return NewCatalogVidyKodirovokiIzdelii(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogVidyKodirovokiIzdelii(key PrimaryCatalogVidyKodirovokiIzdelii) error {
	return c.removeEntity(key)
}

type CatalogVidyKodirovokiIzdeliiElementyKodirovki struct {
	Key        Guid     `json:"Ref_Key,omitempty"`
	LineNumber Int64    `json:"LineNumber,omitempty"`
	Poriadok   *Int64   `json:"Порядок,omitempty"`
	Poteri     *Boolean `json:"Потери,omitempty"`
	Prais      *Boolean `json:"Прайс,omitempty"`
	ElementKey *Guid    `json:"Элемент_Key,omitempty"`
}

func (CatalogVidyKodirovokiIzdeliiElementyKodirovki) APIEntityType() string {
	return "Catalog_ВидыКодировокиИзделий_ЭлементыКодировки"
}
func NewCatalogVidyKodirovokiIzdeliiElementyKodirovki(data string, prevError error) (*CatalogVidyKodirovokiIzdeliiElementyKodirovki, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogVidyKodirovokiIzdeliiElementyKodirovki)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogVidyKodirovokiIzdeliiElementyKodirovki(entity CatalogVidyKodirovokiIzdeliiElementyKodirovki) (*CatalogVidyKodirovokiIzdeliiElementyKodirovki, error) {
	return NewCatalogVidyKodirovokiIzdeliiElementyKodirovki(c.createEntity(entity))
}
func (c *Client) CatalogVidyKodirovokiIzdeliiElementyKodirovki(key PrimaryCatalogVidyKodirovokiIzdeliiElementyKodirovki, fields []string) (*CatalogVidyKodirovokiIzdeliiElementyKodirovki, error) {
	return NewCatalogVidyKodirovokiIzdeliiElementyKodirovki(c.getEntity(key, fields))
}
func (c *Client) CatalogVidyKodirovokiIzdeliiElementyKodirovkis(where Where) (*[]CatalogVidyKodirovokiIzdeliiElementyKodirovki, error) {
	type ReturnObj struct {
		Value []CatalogVidyKodirovokiIzdeliiElementyKodirovki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ВидыКодировокиИзделий_ЭлементыКодировки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogVidyKodirovokiIzdeliiElementyKodirovki(key PrimaryCatalogVidyKodirovokiIzdeliiElementyKodirovki, entity CatalogVidyKodirovokiIzdeliiElementyKodirovki) (*CatalogVidyKodirovokiIzdeliiElementyKodirovki, error) {
	return NewCatalogVidyKodirovokiIzdeliiElementyKodirovki(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogVidyKodirovokiIzdeliiElementyKodirovki(key PrimaryCatalogVidyKodirovokiIzdeliiElementyKodirovki) error {
	return c.removeEntity(key)
}

type DocumentUstanovkaSkidokNomenklatury struct {
	Key                            Guid                                                             `json:"Ref_Key,omitempty"`
	DataVersion                    *String                                                          `json:"DataVersion,omitempty"`
	Number                         *String                                                          `json:"Number,omitempty"`
	Date                           *DateTime                                                        `json:"Date,omitempty"`
	DeletionMark                   *Boolean                                                         `json:"DeletionMark,omitempty"`
	Posted                         *Boolean                                                         `json:"Posted,omitempty"`
	ValiutaKey                     *Guid                                                            `json:"Валюта_Key,omitempty"`
	VidSkidki                      *String                                                          `json:"ВидСкидки,omitempty"`
	DataNachala                    *DateTime                                                        `json:"ДатаНачала,omitempty"`
	DataOkonchaniia                *DateTime                                                        `json:"ДатаОкончания,omitempty"`
	DliaVseiNomenklatury           *Boolean                                                         `json:"ДляВсейНоменклатуры,omitempty"`
	DliaVsekhPoluchatelei          *Boolean                                                         `json:"ДляВсехПолучателей,omitempty"`
	DokumentSozdanVIuTD            *Boolean                                                         `json:"ДокументСозданВЮТД,omitempty"`
	ZnachenieUsloviia              *String                                                          `json:"ЗначениеУсловия,omitempty"`
	Comment                        *String                                                          `json:"Комментарий,omitempty"`
	ObshcheeVremiaNachala          *DateTime                                                        `json:"ОбщееВремяНачала,omitempty"`
	ObshcheeVremiaOkonchaniia      *DateTime                                                        `json:"ОбщееВремяОкончания,omitempty"`
	OgranichenieSkidkiNatsenki     *Double                                                          `json:"ОграничениеСкидкиНаценки,omitempty"`
	OtvetstvennyiKey               *Guid                                                            `json:"Ответственный_Key,omitempty"`
	ParametryZapolneniiaBase64Data *Binary                                                          `json:"ПараметрыЗаполнения_Base64Data,omitempty"`
	PoDniamNedeli                  *Boolean                                                         `json:"ПоДнямНедели,omitempty"`
	ProtsentSkidkiNatsenki         *Double                                                          `json:"ПроцентСкидкиНаценки,omitempty"`
	TipSkidkiNatsenkiKey           *Guid                                                            `json:"ТипСкидкиНаценки_Key,omitempty"`
	Uslovie                        *String                                                          `json:"Условие,omitempty"`
	VremiaPoDniamNedeli            *[]DocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedeliRowType `json:"ВремяПоДнямНедели,omitempty"`
	DiskontnyeKarty                *[]DocumentUstanovkaSkidokNomenklaturyDiskontnyeKartyRowType     `json:"ДисконтныеКарты,omitempty"`
	PoluchateliSkidki              *[]DocumentUstanovkaSkidokNomenklaturyPoluchateliSkidkiRowType   `json:"ПолучателиСкидки,omitempty"`
	Goods                          *[]DocumentUstanovkaSkidokNomenklaturyTovaryRowType              `json:"Товары,omitempty"`
	ZnachenieUsloviiaType          *String                                                          `json:"ЗначениеУсловия_Type,omitempty"`
	ParametryZapolneniiaType       *String                                                          `json:"ПараметрыЗаполнения_Type,omitempty"`
	ParametryZapolneniia           *Stream                                                          `json:"ПараметрыЗаполнения,omitempty"`
}

func (DocumentUstanovkaSkidokNomenklatury) APIEntityType() string {
	return "Document_УстановкаСкидокНоменклатуры"
}
func NewDocumentUstanovkaSkidokNomenklatury(data string, prevError error) (*DocumentUstanovkaSkidokNomenklatury, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentUstanovkaSkidokNomenklatury)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentUstanovkaSkidokNomenklatury(entity DocumentUstanovkaSkidokNomenklatury) (*DocumentUstanovkaSkidokNomenklatury, error) {
	return NewDocumentUstanovkaSkidokNomenklatury(c.createEntity(entity))
}
func (c *Client) DocumentUstanovkaSkidokNomenklatury(key PrimaryDocumentUstanovkaSkidokNomenklatury, fields []string) (*DocumentUstanovkaSkidokNomenklatury, error) {
	return NewDocumentUstanovkaSkidokNomenklatury(c.getEntity(key, fields))
}
func (c *Client) DocumentUstanovkaSkidokNomenklaturys(where Where) (*[]DocumentUstanovkaSkidokNomenklatury, error) {
	type ReturnObj struct {
		Value []DocumentUstanovkaSkidokNomenklatury `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_УстановкаСкидокНоменклатуры", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentUstanovkaSkidokNomenklatury(key PrimaryDocumentUstanovkaSkidokNomenklatury, entity DocumentUstanovkaSkidokNomenklatury) (*DocumentUstanovkaSkidokNomenklatury, error) {
	return NewDocumentUstanovkaSkidokNomenklatury(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentUstanovkaSkidokNomenklatury(key PrimaryDocumentUstanovkaSkidokNomenklatury) error {
	return c.removeEntity(key)
}

type DocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedeli struct {
	Key               Guid      `json:"Ref_Key,omitempty"`
	LineNumber        Int64     `json:"LineNumber,omitempty"`
	VremiaNachala     *DateTime `json:"ВремяНачала,omitempty"`
	VremiaOkonchaniia *DateTime `json:"ВремяОкончания,omitempty"`
	Vybran            *Boolean  `json:"Выбран,omitempty"`
	DenNedeli         *String   `json:"ДеньНедели,omitempty"`
}

func (DocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedeli) APIEntityType() string {
	return "Document_УстановкаСкидокНоменклатуры_ВремяПоДнямНедели"
}
func NewDocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedeli(data string, prevError error) (*DocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedeli, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedeli)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedeli(entity DocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedeli) (*DocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedeli, error) {
	return NewDocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedeli(c.createEntity(entity))
}
func (c *Client) DocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedeli(key PrimaryDocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedeli, fields []string) (*DocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedeli, error) {
	return NewDocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedeli(c.getEntity(key, fields))
}
func (c *Client) DocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedelis(where Where) (*[]DocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedeli, error) {
	type ReturnObj struct {
		Value []DocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedeli `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_УстановкаСкидокНоменклатуры_ВремяПоДнямНедели", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedeli(key PrimaryDocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedeli, entity DocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedeli) (*DocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedeli, error) {
	return NewDocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedeli(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedeli(key PrimaryDocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedeli) error {
	return c.removeEntity(key)
}

type DocumentUstanovkaSkidokNomenklaturyDiskontnyeKarty struct {
	Key           Guid  `json:"Ref_Key,omitempty"`
	LineNumber    Int64 `json:"LineNumber,omitempty"`
	MemberCardKey *Guid `json:"ДисконтнаяКарта_Key,omitempty"`
}

func (DocumentUstanovkaSkidokNomenklaturyDiskontnyeKarty) APIEntityType() string {
	return "Document_УстановкаСкидокНоменклатуры_ДисконтныеКарты"
}
func NewDocumentUstanovkaSkidokNomenklaturyDiskontnyeKarty(data string, prevError error) (*DocumentUstanovkaSkidokNomenklaturyDiskontnyeKarty, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentUstanovkaSkidokNomenklaturyDiskontnyeKarty)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentUstanovkaSkidokNomenklaturyDiskontnyeKarty(entity DocumentUstanovkaSkidokNomenklaturyDiskontnyeKarty) (*DocumentUstanovkaSkidokNomenklaturyDiskontnyeKarty, error) {
	return NewDocumentUstanovkaSkidokNomenklaturyDiskontnyeKarty(c.createEntity(entity))
}
func (c *Client) DocumentUstanovkaSkidokNomenklaturyDiskontnyeKarty(key PrimaryDocumentUstanovkaSkidokNomenklaturyDiskontnyeKarty, fields []string) (*DocumentUstanovkaSkidokNomenklaturyDiskontnyeKarty, error) {
	return NewDocumentUstanovkaSkidokNomenklaturyDiskontnyeKarty(c.getEntity(key, fields))
}
func (c *Client) DocumentUstanovkaSkidokNomenklaturyDiskontnyeKartys(where Where) (*[]DocumentUstanovkaSkidokNomenklaturyDiskontnyeKarty, error) {
	type ReturnObj struct {
		Value []DocumentUstanovkaSkidokNomenklaturyDiskontnyeKarty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_УстановкаСкидокНоменклатуры_ДисконтныеКарты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentUstanovkaSkidokNomenklaturyDiskontnyeKarty(key PrimaryDocumentUstanovkaSkidokNomenklaturyDiskontnyeKarty, entity DocumentUstanovkaSkidokNomenklaturyDiskontnyeKarty) (*DocumentUstanovkaSkidokNomenklaturyDiskontnyeKarty, error) {
	return NewDocumentUstanovkaSkidokNomenklaturyDiskontnyeKarty(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentUstanovkaSkidokNomenklaturyDiskontnyeKarty(key PrimaryDocumentUstanovkaSkidokNomenklaturyDiskontnyeKarty) error {
	return c.removeEntity(key)
}

type DocumentUstanovkaSkidokNomenklaturyPoluchateliSkidki struct {
	Key            Guid    `json:"Ref_Key,omitempty"`
	LineNumber     Int64   `json:"LineNumber,omitempty"`
	Poluchatel     *String `json:"Получатель,omitempty"`
	PoluchatelType *String `json:"Получатель_Type,omitempty"`
}

func (DocumentUstanovkaSkidokNomenklaturyPoluchateliSkidki) APIEntityType() string {
	return "Document_УстановкаСкидокНоменклатуры_ПолучателиСкидки"
}
func NewDocumentUstanovkaSkidokNomenklaturyPoluchateliSkidki(data string, prevError error) (*DocumentUstanovkaSkidokNomenklaturyPoluchateliSkidki, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentUstanovkaSkidokNomenklaturyPoluchateliSkidki)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentUstanovkaSkidokNomenklaturyPoluchateliSkidki(entity DocumentUstanovkaSkidokNomenklaturyPoluchateliSkidki) (*DocumentUstanovkaSkidokNomenklaturyPoluchateliSkidki, error) {
	return NewDocumentUstanovkaSkidokNomenklaturyPoluchateliSkidki(c.createEntity(entity))
}
func (c *Client) DocumentUstanovkaSkidokNomenklaturyPoluchateliSkidki(key PrimaryDocumentUstanovkaSkidokNomenklaturyPoluchateliSkidki, fields []string) (*DocumentUstanovkaSkidokNomenklaturyPoluchateliSkidki, error) {
	return NewDocumentUstanovkaSkidokNomenklaturyPoluchateliSkidki(c.getEntity(key, fields))
}
func (c *Client) DocumentUstanovkaSkidokNomenklaturyPoluchateliSkidkis(where Where) (*[]DocumentUstanovkaSkidokNomenklaturyPoluchateliSkidki, error) {
	type ReturnObj struct {
		Value []DocumentUstanovkaSkidokNomenklaturyPoluchateliSkidki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_УстановкаСкидокНоменклатуры_ПолучателиСкидки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentUstanovkaSkidokNomenklaturyPoluchateliSkidki(key PrimaryDocumentUstanovkaSkidokNomenklaturyPoluchateliSkidki, entity DocumentUstanovkaSkidokNomenklaturyPoluchateliSkidki) (*DocumentUstanovkaSkidokNomenklaturyPoluchateliSkidki, error) {
	return NewDocumentUstanovkaSkidokNomenklaturyPoluchateliSkidki(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentUstanovkaSkidokNomenklaturyPoluchateliSkidki(key PrimaryDocumentUstanovkaSkidokNomenklaturyPoluchateliSkidki) error {
	return c.removeEntity(key)
}

type DocumentUstanovkaSkidokNomenklaturyTovary struct {
	Key                        Guid    `json:"Ref_Key,omitempty"`
	LineNumber                 Int64   `json:"LineNumber,omitempty"`
	ItemKey                    *Guid   `json:"Номенклатура_Key,omitempty"`
	OgranichenieSkidkiNatsenki *Double `json:"ОграничениеСкидкиНаценки,omitempty"`
	ProtsentSkidkiNatsenki     *Double `json:"ПроцентСкидкиНаценки,omitempty"`
}

func (DocumentUstanovkaSkidokNomenklaturyTovary) APIEntityType() string {
	return "Document_УстановкаСкидокНоменклатуры_Товары"
}
func NewDocumentUstanovkaSkidokNomenklaturyTovary(data string, prevError error) (*DocumentUstanovkaSkidokNomenklaturyTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentUstanovkaSkidokNomenklaturyTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentUstanovkaSkidokNomenklaturyTovary(entity DocumentUstanovkaSkidokNomenklaturyTovary) (*DocumentUstanovkaSkidokNomenklaturyTovary, error) {
	return NewDocumentUstanovkaSkidokNomenklaturyTovary(c.createEntity(entity))
}
func (c *Client) DocumentUstanovkaSkidokNomenklaturyTovary(key PrimaryDocumentUstanovkaSkidokNomenklaturyTovary, fields []string) (*DocumentUstanovkaSkidokNomenklaturyTovary, error) {
	return NewDocumentUstanovkaSkidokNomenklaturyTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentUstanovkaSkidokNomenklaturyTovarys(where Where) (*[]DocumentUstanovkaSkidokNomenklaturyTovary, error) {
	type ReturnObj struct {
		Value []DocumentUstanovkaSkidokNomenklaturyTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_УстановкаСкидокНоменклатуры_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentUstanovkaSkidokNomenklaturyTovary(key PrimaryDocumentUstanovkaSkidokNomenklaturyTovary, entity DocumentUstanovkaSkidokNomenklaturyTovary) (*DocumentUstanovkaSkidokNomenklaturyTovary, error) {
	return NewDocumentUstanovkaSkidokNomenklaturyTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentUstanovkaSkidokNomenklaturyTovary(key PrimaryDocumentUstanovkaSkidokNomenklaturyTovary) error {
	return c.removeEntity(key)
}

type CatalogUsloviiaPredostavleniiaSkidokNatsenok struct {
	Key                                                           Guid                                                                  `json:"Ref_Key,omitempty"`
	DataVersion                                                   *String                                                               `json:"DataVersion,omitempty"`
	Description                                                   *String                                                               `json:"Description,omitempty"`
	Code                                                          *String                                                               `json:"Code,omitempty"`
	ParentKey                                                     *Guid                                                                 `json:"Parent_Key,omitempty"`
	IsFolder                                                      *Boolean                                                              `json:"IsFolder,omitempty"`
	DeletionMark                                                  *Boolean                                                              `json:"DeletionMark,omitempty"`
	UsloviePredostavleniia                                        *String                                                               `json:"УсловиеПредоставления,omitempty"`
	VariantOpredeleniiaPeriodaNakopitelnoiSkidki                  *String                                                               `json:"ВариантОпределенияПериодаНакопительнойСкидки,omitempty"`
	VariantNakopleniia                                            *String                                                               `json:"ВариантНакопления,omitempty"`
	KriteriiOgranicheniiaPrimeneniiaZaObieemProdazh               *String                                                               `json:"КритерийОграниченияПримененияЗаОбъемПродаж,omitempty"`
	OblastOgranicheniia                                           *String                                                               `json:"ОбластьОграничения,omitempty"`
	ValiutaOgranicheniiaKey                                       *Guid                                                                 `json:"ВалютаОграничения_Key,omitempty"`
	GrafikOplaty                                                  *String                                                               `json:"ГрафикОплаты,omitempty"`
	FormaOplaty                                                   *String                                                               `json:"ФормаОплаты,omitempty"`
	ZnachenieUsloviiaOgranicheniia                                *Double                                                               `json:"ЗначениеУсловияОграничения,omitempty"`
	SegmentNomenklaturyOgranicheniiaKey                           *Guid                                                                 `json:"СегментНоменклатурыОграничения_Key,omitempty"`
	PeriodNakopleniia                                             *String                                                               `json:"ПериодНакопления,omitempty"`
	TipSravneniia                                                 *String                                                               `json:"ТипСравнения,omitempty"`
	GruppaPolzovateleiKey                                         *Guid                                                                 `json:"ГруппаПользователей_Key,omitempty"`
	DneiDoDniaRozhdeniia                                          *Int16                                                                `json:"ДнейДоДняРождения,omitempty"`
	DneiPosleDniaRozhdeniia                                       *Int16                                                                `json:"ДнейПослеДняРождения,omitempty"`
	PoriadkovyiNomerProdazhiKraten                                *Int64                                                                `json:"ПорядковыйНомерПродажиКратен,omitempty"`
	UchityvatPrimenennyeSkidkiVRamkakhPosledovatelnogoPrimeneniia *Boolean                                                              `json:"УчитыватьПримененныеСкидкиВРамкахПоследовательногоПрименения,omitempty"`
	UchityvatTekushchiiChekVNakopleniiakh                         *Boolean                                                              `json:"УчитыватьТекущийЧекВНакоплениях,omitempty"`
	VremiaDeistviia                                               *[]CatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviiaRowType `json:"ВремяДействия,omitempty"`
	Poluchateli                                                   *[]CatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchateliRowType     `json:"Получатели,omitempty"`
	KomplektPokupki                                               *[]CatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupkiRowType `json:"КомплектПокупки,omitempty"`
}

func (CatalogUsloviiaPredostavleniiaSkidokNatsenok) APIEntityType() string {
	return "Catalog_УсловияПредоставленияСкидокНаценок"
}
func NewCatalogUsloviiaPredostavleniiaSkidokNatsenok(data string, prevError error) (*CatalogUsloviiaPredostavleniiaSkidokNatsenok, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogUsloviiaPredostavleniiaSkidokNatsenok)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogUsloviiaPredostavleniiaSkidokNatsenok(entity CatalogUsloviiaPredostavleniiaSkidokNatsenok) (*CatalogUsloviiaPredostavleniiaSkidokNatsenok, error) {
	return NewCatalogUsloviiaPredostavleniiaSkidokNatsenok(c.createEntity(entity))
}
func (c *Client) CatalogUsloviiaPredostavleniiaSkidokNatsenok(key PrimaryCatalogUsloviiaPredostavleniiaSkidokNatsenok, fields []string) (*CatalogUsloviiaPredostavleniiaSkidokNatsenok, error) {
	return NewCatalogUsloviiaPredostavleniiaSkidokNatsenok(c.getEntity(key, fields))
}
func (c *Client) CatalogUsloviiaPredostavleniiaSkidokNatsenoks(where Where) (*[]CatalogUsloviiaPredostavleniiaSkidokNatsenok, error) {
	type ReturnObj struct {
		Value []CatalogUsloviiaPredostavleniiaSkidokNatsenok `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_УсловияПредоставленияСкидокНаценок", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogUsloviiaPredostavleniiaSkidokNatsenok(key PrimaryCatalogUsloviiaPredostavleniiaSkidokNatsenok, entity CatalogUsloviiaPredostavleniiaSkidokNatsenok) (*CatalogUsloviiaPredostavleniiaSkidokNatsenok, error) {
	return NewCatalogUsloviiaPredostavleniiaSkidokNatsenok(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogUsloviiaPredostavleniiaSkidokNatsenok(key PrimaryCatalogUsloviiaPredostavleniiaSkidokNatsenok) error {
	return c.removeEntity(key)
}

type CatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviia struct {
	Key               Guid      `json:"Ref_Key,omitempty"`
	LineNumber        Int64     `json:"LineNumber,omitempty"`
	DenNedeli         *String   `json:"ДеньНедели,omitempty"`
	VremiaNachala     *DateTime `json:"ВремяНачала,omitempty"`
	VremiaOkonchaniia *DateTime `json:"ВремяОкончания,omitempty"`
}

func (CatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviia) APIEntityType() string {
	return "Catalog_УсловияПредоставленияСкидокНаценок_ВремяДействия"
}
func NewCatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviia(data string, prevError error) (*CatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviia, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviia)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviia(entity CatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviia) (*CatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviia, error) {
	return NewCatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviia(c.createEntity(entity))
}
func (c *Client) CatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviia(key PrimaryCatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviia, fields []string) (*CatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviia, error) {
	return NewCatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviia(c.getEntity(key, fields))
}
func (c *Client) CatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviias(where Where) (*[]CatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviia, error) {
	type ReturnObj struct {
		Value []CatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_УсловияПредоставленияСкидокНаценок_ВремяДействия", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviia(key PrimaryCatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviia, entity CatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviia) (*CatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviia, error) {
	return NewCatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviia(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviia(key PrimaryCatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviia) error {
	return c.removeEntity(key)
}

type CatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchateli struct {
	Key            Guid    `json:"Ref_Key,omitempty"`
	LineNumber     Int64   `json:"LineNumber,omitempty"`
	Poluchatel     *String `json:"Получатель,omitempty"`
	PoluchatelType *String `json:"Получатель_Type,omitempty"`
}

func (CatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchateli) APIEntityType() string {
	return "Catalog_УсловияПредоставленияСкидокНаценок_Получатели"
}
func NewCatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchateli(data string, prevError error) (*CatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchateli, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchateli)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchateli(entity CatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchateli) (*CatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchateli, error) {
	return NewCatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchateli(c.createEntity(entity))
}
func (c *Client) CatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchateli(key PrimaryCatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchateli, fields []string) (*CatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchateli, error) {
	return NewCatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchateli(c.getEntity(key, fields))
}
func (c *Client) CatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchatelis(where Where) (*[]CatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchateli, error) {
	type ReturnObj struct {
		Value []CatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchateli `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_УсловияПредоставленияСкидокНаценок_Получатели", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchateli(key PrimaryCatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchateli, entity CatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchateli) (*CatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchateli, error) {
	return NewCatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchateli(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchateli(key PrimaryCatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchateli) error {
	return c.removeEntity(key)
}

type CatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupki struct {
	Key             Guid    `json:"Ref_Key,omitempty"`
	LineNumber      Int64   `json:"LineNumber,omitempty"`
	ItemKey         *Guid   `json:"Номенклатура_Key,omitempty"`
	Quantity        *Double `json:"Количество,omitempty"`
	TypeKey         *Guid   `json:"ТипИзделия_Key,omitempty"`
	SupplierKey     *Guid   `json:"Поставщик_Key,omitempty"`
	ProizvoditelKey *Guid   `json:"Производитель_Key,omitempty"`
}

func (CatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupki) APIEntityType() string {
	return "Catalog_УсловияПредоставленияСкидокНаценок_КомплектПокупки"
}
func NewCatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupki(data string, prevError error) (*CatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupki, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupki)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupki(entity CatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupki) (*CatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupki, error) {
	return NewCatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupki(c.createEntity(entity))
}
func (c *Client) CatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupki(key PrimaryCatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupki, fields []string) (*CatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupki, error) {
	return NewCatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupki(c.getEntity(key, fields))
}
func (c *Client) CatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupkis(where Where) (*[]CatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupki, error) {
	type ReturnObj struct {
		Value []CatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_УсловияПредоставленияСкидокНаценок_КомплектПокупки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupki(key PrimaryCatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupki, entity CatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupki) (*CatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupki, error) {
	return NewCatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupki(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupki(key PrimaryCatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupki) error {
	return c.removeEntity(key)
}

type OutPay struct {
	Key                                    Guid                                                          `json:"Ref_Key,omitempty"`
	DataVersion                            *String                                                       `json:"DataVersion,omitempty"`
	Number                                 *String                                                       `json:"Number,omitempty"`
	Date                                   *DateTime                                                     `json:"Date,omitempty"`
	DeletionMark                           *Boolean                                                      `json:"DeletionMark,omitempty"`
	Posted                                 *Boolean                                                      `json:"Posted,omitempty"`
	ValiutaVzaimoraschetovPodotchetnikaKey *Guid                                                         `json:"ВалютаВзаиморасчетовПодотчетника_Key,omitempty"`
	ValiutaDokumentaKey                    *Guid                                                         `json:"ВалютаДокумента_Key,omitempty"`
	VidVydachiDenezhnykhSredstv            *String                                                       `json:"ВидВыдачиДенежныхСредств,omitempty"`
	OperationType                          *String                                                       `json:"ВидОперации,omitempty"`
	Vydat                                  *String                                                       `json:"Выдать,omitempty"`
	DataPogasheniiaAvansa                  *DateTime                                                     `json:"ДатаПогашенияАванса,omitempty"`
	DogovorKontragentaKey                  *Guid                                                         `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie                      *String                                                       `json:"ДокументОснование,omitempty"`
	DokumentSozdanVIuTD                    *Boolean                                                      `json:"ДокументСозданВЮТД,omitempty"`
	ZaiavkaNaRaskhodovanieSredstvKey       *Guid                                                         `json:"ЗаявкаНаРасходованиеСредств_Key,omitempty"`
	KassaKey                               *Guid                                                         `json:"Касса_Key,omitempty"`
	Comment                                *String                                                       `json:"Комментарий,omitempty"`
	Kontragent                             *String                                                       `json:"Контрагент,omitempty"`
	NumberKKT                              *Int16                                                        `json:"НомерЧекаККМ,omitempty"`
	ObieiavlenieNaVznosNalichnymiKey       *Guid                                                         `json:"ОбъявлениеНаВзносНаличными_Key,omitempty"`
	Oplacheno                              *Boolean                                                      `json:"Оплачено,omitempty"`
	OrganizatsiiaKey                       *Guid                                                         `json:"Организация_Key,omitempty"`
	Osnovanie                              *String                                                       `json:"Основание,omitempty"`
	OtvetstvennyiKey                       *Guid                                                         `json:"Ответственный_Key,omitempty"`
	OtrazhenoVOperUchete                   *Boolean                                                      `json:"ОтраженоВОперУчете,omitempty"`
	PoDokumentu                            *String                                                       `json:"ПоДокументу,omitempty"`
	PodrazdelenieKey                       *Guid                                                         `json:"Подразделение_Key,omitempty"`
	Prilozhenie                            *String                                                       `json:"Приложение,omitempty"`
	RaschetnyiDokumentKey                  *Guid                                                         `json:"РасчетныйДокумент_Key,omitempty"`
	TypeOfMovingMoneyKey                   *Guid                                                         `json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SumOfDocument                          *Double                                                       `json:"СуммаДокумента,omitempty"`
	SchetOrganizatsiiKey                   *Guid                                                         `json:"СчетОрганизации_Key,omitempty"`
	TipDokumenta                           *String                                                       `json:"ТипДокумента,omitempty"`
	Pochta                                 *String                                                       `json:"Почта,omitempty"`
	Telefon                                *String                                                       `json:"Телефон,omitempty"`
	ProbitChekNaKKT                        *Boolean                                                      `json:"ПробитЧекНаККТ,omitempty"`
	KassaKKMKey                            *Guid                                                         `json:"КассаККМ_Key,omitempty"`
	GungNumber                             *Int16                                                        `json:"НомерСменыККМ,omitempty"`
	NastroikaRMKKey                        *Guid                                                         `json:"НастройкаРМК_Key,omitempty"`
	ExtendedPayments                       *[]DocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezhaRowType `json:"РасшифровкаПлатежа,omitempty"`
	Payments                               *[]DocumentRaskhodnyiKassovyiOrderOplataRowType               `json:"Оплата,omitempty"`
	Goods                                  *[]DocumentRaskhodnyiKassovyiOrderTovaryRowType               `json:"Товары,omitempty"`
	DokumentOsnovanieType                  *String                                                       `json:"ДокументОснование_Type,omitempty"`
	KontragentType                         *String                                                       `json:"Контрагент_Type,omitempty"`
}

func (OutPay) APIEntityType() string {
	return "Document_РасходныйКассовыйОрдер"
}
func NewOutPay(data string, prevError error) (*OutPay, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(OutPay)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateOutPay(entity OutPay) (*OutPay, error) {
	return NewOutPay(c.createEntity(entity))
}
func (c *Client) OutPay(key PrimaryOutPay, fields []string) (*OutPay, error) {
	return NewOutPay(c.getEntity(key, fields))
}
func (c *Client) OutPays(where Where) (*[]OutPay, error) {
	type ReturnObj struct {
		Value []OutPay `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_РасходныйКассовыйОрдер", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateOutPay(key PrimaryOutPay, entity OutPay) (*OutPay, error) {
	return NewOutPay(c.updateEntity(key, entity))
}
func (c *Client) DeleteOutPay(key PrimaryOutPay) error {
	return c.removeEntity(key)
}

type DocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezha struct {
	Key                              Guid    `json:"Ref_Key,omitempty"`
	LineNumber                       Int64   `json:"LineNumber,omitempty"`
	DogovorKontragentaKey            *Guid   `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentPlanirovaniiaPlatezhaKey *Guid   `json:"ДокументПланированияПлатежа_Key,omitempty"`
	KratnostVzaimoraschetov          *Int64  `json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov              *Double `json:"КурсВзаиморасчетов,omitempty"`
	KursVzaimoraschetovPlan          *Double `json:"КурсВзаиморасчетовПлан,omitempty"`
	ProektKey                        *Guid   `json:"Проект_Key,omitempty"`
	Sdelka                           *String `json:"Сделка,omitempty"`
	StavkaNDS                        *String `json:"СтавкаНДС,omitempty"`
	TypeOfMovingMoneyKey             *Guid   `json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov             *Double `json:"СуммаВзаиморасчетов,omitempty"`
	SummaNDS                         *Double `json:"СуммаНДС,omitempty"`
	Sum                              *Double `json:"СуммаПлатежа,omitempty"`
	SummaPlatezhaPlan                *Double `json:"СуммаПлатежаПлан,omitempty"`
	SdelkaType                       *String `json:"Сделка_Type,omitempty"`
}

func (DocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezha) APIEntityType() string {
	return "Document_РасходныйКассовыйОрдер_РасшифровкаПлатежа"
}
func NewDocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezha(data string, prevError error) (*DocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezha, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezha)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezha(entity DocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezha) (*DocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezha, error) {
	return NewDocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezha(c.createEntity(entity))
}
func (c *Client) DocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezha(key PrimaryDocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezha, fields []string) (*DocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezha, error) {
	return NewDocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezha(c.getEntity(key, fields))
}
func (c *Client) DocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezhas(where Where) (*[]DocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezha, error) {
	type ReturnObj struct {
		Value []DocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezha `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_РасходныйКассовыйОрдер_РасшифровкаПлатежа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezha(key PrimaryDocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezha, entity DocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezha) (*DocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezha, error) {
	return NewDocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezha(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezha(key PrimaryDocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezha) error {
	return c.removeEntity(key)
}

type DocumentRaskhodnyiKassovyiOrderOplata struct {
	Key        Guid    `json:"Ref_Key,omitempty"`
	LineNumber Int64   `json:"LineNumber,omitempty"`
	TipOplaty  *String `json:"ТипОплаты,omitempty"`
	Sum        *Double `json:"Сумма,omitempty"`
}

func (DocumentRaskhodnyiKassovyiOrderOplata) APIEntityType() string {
	return "Document_РасходныйКассовыйОрдер_Оплата"
}
func NewDocumentRaskhodnyiKassovyiOrderOplata(data string, prevError error) (*DocumentRaskhodnyiKassovyiOrderOplata, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentRaskhodnyiKassovyiOrderOplata)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentRaskhodnyiKassovyiOrderOplata(entity DocumentRaskhodnyiKassovyiOrderOplata) (*DocumentRaskhodnyiKassovyiOrderOplata, error) {
	return NewDocumentRaskhodnyiKassovyiOrderOplata(c.createEntity(entity))
}
func (c *Client) DocumentRaskhodnyiKassovyiOrderOplata(key PrimaryDocumentRaskhodnyiKassovyiOrderOplata, fields []string) (*DocumentRaskhodnyiKassovyiOrderOplata, error) {
	return NewDocumentRaskhodnyiKassovyiOrderOplata(c.getEntity(key, fields))
}
func (c *Client) DocumentRaskhodnyiKassovyiOrderOplatas(where Where) (*[]DocumentRaskhodnyiKassovyiOrderOplata, error) {
	type ReturnObj struct {
		Value []DocumentRaskhodnyiKassovyiOrderOplata `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_РасходныйКассовыйОрдер_Оплата", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentRaskhodnyiKassovyiOrderOplata(key PrimaryDocumentRaskhodnyiKassovyiOrderOplata, entity DocumentRaskhodnyiKassovyiOrderOplata) (*DocumentRaskhodnyiKassovyiOrderOplata, error) {
	return NewDocumentRaskhodnyiKassovyiOrderOplata(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentRaskhodnyiKassovyiOrderOplata(key PrimaryDocumentRaskhodnyiKassovyiOrderOplata) error {
	return c.removeEntity(key)
}

type DocumentRaskhodnyiKassovyiOrderTovary struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	Weight                         *Double `json:"Вес,omitempty"`
	Quantity                       *Int64  `json:"Количество,omitempty"`
	ItemKey                        *Guid   `json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid   `json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	StavkaNDS                      *String `json:"СтавкаНДС,omitempty"`
	Sum                            *Double `json:"Сумма,omitempty"`
	SummaNDS                       *Double `json:"СуммаНДС,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Double `json:"Цена,omitempty"`
	SummaSkidki                    *Double `json:"СуммаСкидки,omitempty"`
	VidTovaraKKT                   *String `json:"ВидТовараККТ,omitempty"`
	TipOplatyTovaraKKT             *String `json:"ТипОплатыТовараККТ,omitempty"`
	SummaOsn                       *Double `json:"СуммаОсн,omitempty"`
	Komitent                       *String `json:"Комитент,omitempty"`
	TelefonKomitenta               *String `json:"ТелефонКомитента,omitempty"`
	INNkomitenta                   *String `json:"ИННкомитента,omitempty"`
	SummaOpl                       *Double `json:"СуммаОпл,omitempty"`
}

func (DocumentRaskhodnyiKassovyiOrderTovary) APIEntityType() string {
	return "Document_РасходныйКассовыйОрдер_Товары"
}
func NewDocumentRaskhodnyiKassovyiOrderTovary(data string, prevError error) (*DocumentRaskhodnyiKassovyiOrderTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentRaskhodnyiKassovyiOrderTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentRaskhodnyiKassovyiOrderTovary(entity DocumentRaskhodnyiKassovyiOrderTovary) (*DocumentRaskhodnyiKassovyiOrderTovary, error) {
	return NewDocumentRaskhodnyiKassovyiOrderTovary(c.createEntity(entity))
}
func (c *Client) DocumentRaskhodnyiKassovyiOrderTovary(key PrimaryDocumentRaskhodnyiKassovyiOrderTovary, fields []string) (*DocumentRaskhodnyiKassovyiOrderTovary, error) {
	return NewDocumentRaskhodnyiKassovyiOrderTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentRaskhodnyiKassovyiOrderTovarys(where Where) (*[]DocumentRaskhodnyiKassovyiOrderTovary, error) {
	type ReturnObj struct {
		Value []DocumentRaskhodnyiKassovyiOrderTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_РасходныйКассовыйОрдер_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentRaskhodnyiKassovyiOrderTovary(key PrimaryDocumentRaskhodnyiKassovyiOrderTovary, entity DocumentRaskhodnyiKassovyiOrderTovary) (*DocumentRaskhodnyiKassovyiOrderTovary, error) {
	return NewDocumentRaskhodnyiKassovyiOrderTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentRaskhodnyiKassovyiOrderTovary(key PrimaryDocumentRaskhodnyiKassovyiOrderTovary) error {
	return c.removeEntity(key)
}

type DocumentSchetNaOplatuPostavshchika struct {
	Key                          Guid                                               `json:"Ref_Key,omitempty"`
	DataVersion                  *String                                            `json:"DataVersion,omitempty"`
	Number                       *String                                            `json:"Number,omitempty"`
	Date                         *DateTime                                          `json:"Date,omitempty"`
	DeletionMark                 *Boolean                                           `json:"DeletionMark,omitempty"`
	Posted                       *Boolean                                           `json:"Posted,omitempty"`
	ValiutaDokumentaKey          *Guid                                              `json:"ВалютаДокумента_Key,omitempty"`
	VremiaNapominaniia           *DateTime                                          `json:"ВремяНапоминания,omitempty"`
	DataVkhodiashchegoDokumenta  *DateTime                                          `json:"ДатаВходящегоДокумента,omitempty"`
	DataOplaty                   *DateTime                                          `json:"ДатаОплаты,omitempty"`
	DataPostupleniia             *DateTime                                          `json:"ДатаПоступления,omitempty"`
	DogovorKontragentaKey        *Guid                                              `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie            *String                                            `json:"ДокументОснование,omitempty"`
	Comment                      *String                                            `json:"Комментарий,omitempty"`
	KontaktnoeLitsoKey           *Guid                                              `json:"КонтактноеЛицо_Key,omitempty"`
	KontragentKey                *Guid                                              `json:"Контрагент_Key,omitempty"`
	KratnostVzaimoraschetov      *Int64                                             `json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov          *Double                                            `json:"КурсВзаиморасчетов,omitempty"`
	NapomnitOSobytii             *Boolean                                           `json:"НапомнитьОСобытии,omitempty"`
	NomerVkhodiashchegoDokumenta *String                                            `json:"НомерВходящегоДокумента,omitempty"`
	OrganizatsiiaKey             *Guid                                              `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey             *Guid                                              `json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey             *Guid                                              `json:"Подразделение_Key,omitempty"`
	DepartmentKey                *Guid                                              `json:"Склад_Key,omitempty"`
	StrukturnaiaEdinitsa         *String                                            `json:"СтруктурнаяЕдиница,omitempty"`
	SummaVkliuchaetNDS           *Boolean                                           `json:"СуммаВключаетНДС,omitempty"`
	SumOfDocument                *Double                                            `json:"СуммаДокумента,omitempty"`
	TipDokumenta                 *String                                            `json:"ТипДокумента,omitempty"`
	TipTsenKey                   *Guid                                              `json:"ТипЦен_Key,omitempty"`
	UchityvatNDS                 *Boolean                                           `json:"УчитыватьНДС,omitempty"`
	Goods                        *[]DocumentSchetNaOplatuPostavshchikaTovaryRowType `json:"Товары,omitempty"`
	Uslugi                       *[]DocumentSchetNaOplatuPostavshchikaUslugiRowType `json:"Услуги,omitempty"`
	DokumentOsnovanieType        *String                                            `json:"ДокументОснование_Type,omitempty"`
	StrukturnaiaEdinitsaType     *String                                            `json:"СтруктурнаяЕдиница_Type,omitempty"`
}

func (DocumentSchetNaOplatuPostavshchika) APIEntityType() string {
	return "Document_СчетНаОплатуПоставщика"
}
func NewDocumentSchetNaOplatuPostavshchika(data string, prevError error) (*DocumentSchetNaOplatuPostavshchika, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentSchetNaOplatuPostavshchika)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentSchetNaOplatuPostavshchika(entity DocumentSchetNaOplatuPostavshchika) (*DocumentSchetNaOplatuPostavshchika, error) {
	return NewDocumentSchetNaOplatuPostavshchika(c.createEntity(entity))
}
func (c *Client) DocumentSchetNaOplatuPostavshchika(key PrimaryDocumentSchetNaOplatuPostavshchika, fields []string) (*DocumentSchetNaOplatuPostavshchika, error) {
	return NewDocumentSchetNaOplatuPostavshchika(c.getEntity(key, fields))
}
func (c *Client) DocumentSchetNaOplatuPostavshchikas(where Where) (*[]DocumentSchetNaOplatuPostavshchika, error) {
	type ReturnObj struct {
		Value []DocumentSchetNaOplatuPostavshchika `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СчетНаОплатуПоставщика", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentSchetNaOplatuPostavshchika(key PrimaryDocumentSchetNaOplatuPostavshchika, entity DocumentSchetNaOplatuPostavshchika) (*DocumentSchetNaOplatuPostavshchika, error) {
	return NewDocumentSchetNaOplatuPostavshchika(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentSchetNaOplatuPostavshchika(key PrimaryDocumentSchetNaOplatuPostavshchika) error {
	return c.removeEntity(key)
}

type DocumentSchetNaOplatuPostavshchikaTovary struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	Weight                         *Double `json:"Вес,omitempty"`
	Quantity                       *Int64  `json:"Количество,omitempty"`
	ItemKey                        *Guid   `json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid   `json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	StavkaNDS                      *String `json:"СтавкаНДС,omitempty"`
	Sum                            *Double `json:"Сумма,omitempty"`
	SummaNDS                       *Double `json:"СуммаНДС,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Double `json:"Цена,omitempty"`
}

func (DocumentSchetNaOplatuPostavshchikaTovary) APIEntityType() string {
	return "Document_СчетНаОплатуПоставщика_Товары"
}
func NewDocumentSchetNaOplatuPostavshchikaTovary(data string, prevError error) (*DocumentSchetNaOplatuPostavshchikaTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentSchetNaOplatuPostavshchikaTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentSchetNaOplatuPostavshchikaTovary(entity DocumentSchetNaOplatuPostavshchikaTovary) (*DocumentSchetNaOplatuPostavshchikaTovary, error) {
	return NewDocumentSchetNaOplatuPostavshchikaTovary(c.createEntity(entity))
}
func (c *Client) DocumentSchetNaOplatuPostavshchikaTovary(key PrimaryDocumentSchetNaOplatuPostavshchikaTovary, fields []string) (*DocumentSchetNaOplatuPostavshchikaTovary, error) {
	return NewDocumentSchetNaOplatuPostavshchikaTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentSchetNaOplatuPostavshchikaTovarys(where Where) (*[]DocumentSchetNaOplatuPostavshchikaTovary, error) {
	type ReturnObj struct {
		Value []DocumentSchetNaOplatuPostavshchikaTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СчетНаОплатуПоставщика_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentSchetNaOplatuPostavshchikaTovary(key PrimaryDocumentSchetNaOplatuPostavshchikaTovary, entity DocumentSchetNaOplatuPostavshchikaTovary) (*DocumentSchetNaOplatuPostavshchikaTovary, error) {
	return NewDocumentSchetNaOplatuPostavshchikaTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentSchetNaOplatuPostavshchikaTovary(key PrimaryDocumentSchetNaOplatuPostavshchikaTovary) error {
	return c.removeEntity(key)
}

type DocumentSchetNaOplatuPostavshchikaUslugi struct {
	Key         Guid    `json:"Ref_Key,omitempty"`
	LineNumber  Int64   `json:"LineNumber,omitempty"`
	Quantity    *Int64  `json:"Количество,omitempty"`
	ItemKey     *Guid   `json:"Номенклатура_Key,omitempty"`
	Soderzhanie *String `json:"Содержание,omitempty"`
	StavkaNDS   *String `json:"СтавкаНДС,omitempty"`
	Sum         *Double `json:"Сумма,omitempty"`
	SummaNDS    *Double `json:"СуммаНДС,omitempty"`
	Cost        *Double `json:"Цена,omitempty"`
}

func (DocumentSchetNaOplatuPostavshchikaUslugi) APIEntityType() string {
	return "Document_СчетНаОплатуПоставщика_Услуги"
}
func NewDocumentSchetNaOplatuPostavshchikaUslugi(data string, prevError error) (*DocumentSchetNaOplatuPostavshchikaUslugi, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentSchetNaOplatuPostavshchikaUslugi)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentSchetNaOplatuPostavshchikaUslugi(entity DocumentSchetNaOplatuPostavshchikaUslugi) (*DocumentSchetNaOplatuPostavshchikaUslugi, error) {
	return NewDocumentSchetNaOplatuPostavshchikaUslugi(c.createEntity(entity))
}
func (c *Client) DocumentSchetNaOplatuPostavshchikaUslugi(key PrimaryDocumentSchetNaOplatuPostavshchikaUslugi, fields []string) (*DocumentSchetNaOplatuPostavshchikaUslugi, error) {
	return NewDocumentSchetNaOplatuPostavshchikaUslugi(c.getEntity(key, fields))
}
func (c *Client) DocumentSchetNaOplatuPostavshchikaUslugis(where Where) (*[]DocumentSchetNaOplatuPostavshchikaUslugi, error) {
	type ReturnObj struct {
		Value []DocumentSchetNaOplatuPostavshchikaUslugi `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СчетНаОплатуПоставщика_Услуги", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentSchetNaOplatuPostavshchikaUslugi(key PrimaryDocumentSchetNaOplatuPostavshchikaUslugi, entity DocumentSchetNaOplatuPostavshchikaUslugi) (*DocumentSchetNaOplatuPostavshchikaUslugi, error) {
	return NewDocumentSchetNaOplatuPostavshchikaUslugi(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentSchetNaOplatuPostavshchikaUslugi(key PrimaryDocumentSchetNaOplatuPostavshchikaUslugi) error {
	return c.removeEntity(key)
}

type DocumentReestrSpetssviaz struct {
	Key                   Guid                                      `json:"Ref_Key,omitempty"`
	DataVersion           *String                                   `json:"DataVersion,omitempty"`
	Number                *String                                   `json:"Number,omitempty"`
	Date                  *DateTime                                 `json:"Date,omitempty"`
	DeletionMark          *Boolean                                  `json:"DeletionMark,omitempty"`
	Posted                *Boolean                                  `json:"Posted,omitempty"`
	Comment               *String                                   `json:"Комментарий,omitempty"`
	OtpravitelKey         *Guid                                     `json:"Отправитель_Key,omitempty"`
	OrganizatsiiaKey      *Guid                                     `json:"Организация_Key,omitempty"`
	KontragentKey         *Guid                                     `json:"Контрагент_Key,omitempty"`
	DogovorKontragentaKey *Guid                                     `json:"ДоговорКонтрагента_Key,omitempty"`
	Klienty               *[]DocumentReestrSpetssviazKlientyRowType `json:"Клиенты,omitempty"`
}

func (DocumentReestrSpetssviaz) APIEntityType() string {
	return "Document_РеестрСпецсвязь"
}
func NewDocumentReestrSpetssviaz(data string, prevError error) (*DocumentReestrSpetssviaz, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentReestrSpetssviaz)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentReestrSpetssviaz(entity DocumentReestrSpetssviaz) (*DocumentReestrSpetssviaz, error) {
	return NewDocumentReestrSpetssviaz(c.createEntity(entity))
}
func (c *Client) DocumentReestrSpetssviaz(key PrimaryDocumentReestrSpetssviaz, fields []string) (*DocumentReestrSpetssviaz, error) {
	return NewDocumentReestrSpetssviaz(c.getEntity(key, fields))
}
func (c *Client) DocumentReestrSpetssviazs(where Where) (*[]DocumentReestrSpetssviaz, error) {
	type ReturnObj struct {
		Value []DocumentReestrSpetssviaz `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_РеестрСпецсвязь", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentReestrSpetssviaz(key PrimaryDocumentReestrSpetssviaz, entity DocumentReestrSpetssviaz) (*DocumentReestrSpetssviaz, error) {
	return NewDocumentReestrSpetssviaz(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentReestrSpetssviaz(key PrimaryDocumentReestrSpetssviaz) error {
	return c.removeEntity(key)
}

type DocumentReestrSpetssviazKlienty struct {
	Key           Guid    `json:"Ref_Key,omitempty"`
	LineNumber    Int64   `json:"LineNumber,omitempty"`
	KontragentKey *Guid   `json:"Контрагент_Key,omitempty"`
	Adres         *String `json:"Адрес,omitempty"`
	Telefon       *String `json:"Телефон,omitempty"`
	Weight        *Double `json:"Вес,omitempty"`
	Sum           *Double `json:"Сумма,omitempty"`
	Paket         *String `json:"Пакет,omitempty"`
	SummaPropisiu *String `json:"СуммаПрописью,omitempty"`
	GabarityKey   *Guid   `json:"Габариты_Key,omitempty"`
}

func (DocumentReestrSpetssviazKlienty) APIEntityType() string {
	return "Document_РеестрСпецсвязь_Клиенты"
}
func NewDocumentReestrSpetssviazKlienty(data string, prevError error) (*DocumentReestrSpetssviazKlienty, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentReestrSpetssviazKlienty)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentReestrSpetssviazKlienty(entity DocumentReestrSpetssviazKlienty) (*DocumentReestrSpetssviazKlienty, error) {
	return NewDocumentReestrSpetssviazKlienty(c.createEntity(entity))
}
func (c *Client) DocumentReestrSpetssviazKlienty(key PrimaryDocumentReestrSpetssviazKlienty, fields []string) (*DocumentReestrSpetssviazKlienty, error) {
	return NewDocumentReestrSpetssviazKlienty(c.getEntity(key, fields))
}
func (c *Client) DocumentReestrSpetssviazKlientys(where Where) (*[]DocumentReestrSpetssviazKlienty, error) {
	type ReturnObj struct {
		Value []DocumentReestrSpetssviazKlienty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_РеестрСпецсвязь_Клиенты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentReestrSpetssviazKlienty(key PrimaryDocumentReestrSpetssviazKlienty, entity DocumentReestrSpetssviazKlienty) (*DocumentReestrSpetssviazKlienty, error) {
	return NewDocumentReestrSpetssviazKlienty(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentReestrSpetssviazKlienty(key PrimaryDocumentReestrSpetssviazKlienty) error {
	return c.removeEntity(key)
}

type DocumentJournalKassovyeDokumenty struct {
	Ref                  String    `json:"Ref,omitempty"`
	Type                 *String   `json:"Type,omitempty"`
	Date                 *DateTime `json:"Date,omitempty"`
	DeletionMark         *Boolean  `json:"DeletionMark,omitempty"`
	Number               *String   `json:"Number,omitempty"`
	Posted               *Boolean  `json:"Posted,omitempty"`
	ValiutaKey           *Guid     `json:"Валюта_Key,omitempty"`
	OperationType        *String   `json:"ВидОперации,omitempty"`
	Informatsiia         *String   `json:"Информация,omitempty"`
	KassaKey             *Guid     `json:"Касса_Key,omitempty"`
	Comment              *String   `json:"Комментарий,omitempty"`
	Kontragent           *String   `json:"Контрагент,omitempty"`
	Oplacheno            *Boolean  `json:"Оплачено,omitempty"`
	OrganizatsiiaKey     *Guid     `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey     *Guid     `json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey     *Guid     `json:"Подразделение_Key,omitempty"`
	TypeOfMovingMoneyKey *Guid     `json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SumOfDocument        *Double   `json:"СуммаДокумента,omitempty"`
	RefType              String    `json:"Ref_Type,omitempty"`
	VidOperatsiiType     *String   `json:"ВидОперации_Type,omitempty"`
	InformatsiiaType     *String   `json:"Информация_Type,omitempty"`
	KontragentType       *String   `json:"Контрагент_Type,omitempty"`
}

func (DocumentJournalKassovyeDokumenty) APIEntityType() string {
	return "DocumentJournal_КассовыеДокументы"
}
func NewDocumentJournalKassovyeDokumenty(data string, prevError error) (*DocumentJournalKassovyeDokumenty, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentJournalKassovyeDokumenty)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentJournalKassovyeDokumenty(entity DocumentJournalKassovyeDokumenty) (*DocumentJournalKassovyeDokumenty, error) {
	return NewDocumentJournalKassovyeDokumenty(c.createEntity(entity))
}
func (c *Client) DocumentJournalKassovyeDokumenty(key PrimaryDocumentJournalKassovyeDokumenty, fields []string) (*DocumentJournalKassovyeDokumenty, error) {
	return NewDocumentJournalKassovyeDokumenty(c.getEntity(key, fields))
}
func (c *Client) DocumentJournalKassovyeDokumentys(where Where) (*[]DocumentJournalKassovyeDokumenty, error) {
	type ReturnObj struct {
		Value []DocumentJournalKassovyeDokumenty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("DocumentJournal_КассовыеДокументы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentJournalKassovyeDokumenty(key PrimaryDocumentJournalKassovyeDokumenty, entity DocumentJournalKassovyeDokumenty) (*DocumentJournalKassovyeDokumenty, error) {
	return NewDocumentJournalKassovyeDokumenty(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentJournalKassovyeDokumenty(key PrimaryDocumentJournalKassovyeDokumenty) error {
	return c.removeEntity(key)
}

type InitialInstance struct {
	Key                                   Guid                                                   `json:"Ref_Key,omitempty"`
	DataVersion                           *String                                                `json:"DataVersion,omitempty"`
	Number                                *String                                                `json:"Number,omitempty"`
	Date                                  *DateTime                                              `json:"Date,omitempty"`
	DeletionMark                          *Boolean                                               `json:"DeletionMark,omitempty"`
	Posted                                *Boolean                                               `json:"Posted,omitempty"`
	OperationType                         *String                                                `json:"ВидОперации,omitempty"`
	DataVkhodiashchegoDokumenta           *DateTime                                              `json:"ДатаВходящегоДокумента,omitempty"`
	Comment                               *String                                                `json:"Комментарий,omitempty"`
	NomerVkhodiashchegoDokumenta          *String                                                `json:"НомерВходящегоДокумента,omitempty"`
	OrganizatsiiaKey                      *Guid                                                  `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                      *Guid                                                  `json:"Ответственный_Key,omitempty"`
	DepartmentKey                         *Guid                                                  `json:"Склад_Key,omitempty"`
	SummaVkliuchaetNDS                    *Boolean                                               `json:"СуммаВключаетНДС,omitempty"`
	OformitProdazhiDatoiDokumentaProdazhi *Boolean                                               `json:"ОформитьПродажиДатойДокументаПродажи,omitempty"`
	Vzaimoraschety                        *[]DocumentVvodNachalnykhOstatkovVzaimoraschetyRowType `json:"Взаиморасчеты,omitempty"`
	Goods                                 *[]DocumentVvodNachalnykhOstatkovTovaryRowType         `json:"Товары,omitempty"`
}

func (InitialInstance) APIEntityType() string {
	return "Document_ВводНачальныхОстатков"
}
func NewInitialInstance(data string, prevError error) (*InitialInstance, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(InitialInstance)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateInitialInstance(entity InitialInstance) (*InitialInstance, error) {
	return NewInitialInstance(c.createEntity(entity))
}
func (c *Client) InitialInstance(key PrimaryInitialInstance, fields []string) (*InitialInstance, error) {
	return NewInitialInstance(c.getEntity(key, fields))
}
func (c *Client) InitialInstances(where Where) (*[]InitialInstance, error) {
	type ReturnObj struct {
		Value []InitialInstance `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВводНачальныхОстатков", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateInitialInstance(key PrimaryInitialInstance, entity InitialInstance) (*InitialInstance, error) {
	return NewInitialInstance(c.updateEntity(key, entity))
}
func (c *Client) DeleteInitialInstance(key PrimaryInitialInstance) error {
	return c.removeEntity(key)
}

type DocumentVvodNachalnykhOstatkovVzaimoraschety struct {
	Key                   Guid    `json:"Ref_Key,omitempty"`
	LineNumber            Int64   `json:"LineNumber,omitempty"`
	DogovorKontragentaKey *Guid   `json:"ДоговорКонтрагента_Key,omitempty"`
	KontragentKey         *Guid   `json:"Контрагент_Key,omitempty"`
	Sum                   *Double `json:"Сумма,omitempty"`
}

func (DocumentVvodNachalnykhOstatkovVzaimoraschety) APIEntityType() string {
	return "Document_ВводНачальныхОстатков_Взаиморасчеты"
}
func NewDocumentVvodNachalnykhOstatkovVzaimoraschety(data string, prevError error) (*DocumentVvodNachalnykhOstatkovVzaimoraschety, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentVvodNachalnykhOstatkovVzaimoraschety)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentVvodNachalnykhOstatkovVzaimoraschety(entity DocumentVvodNachalnykhOstatkovVzaimoraschety) (*DocumentVvodNachalnykhOstatkovVzaimoraschety, error) {
	return NewDocumentVvodNachalnykhOstatkovVzaimoraschety(c.createEntity(entity))
}
func (c *Client) DocumentVvodNachalnykhOstatkovVzaimoraschety(key PrimaryDocumentVvodNachalnykhOstatkovVzaimoraschety, fields []string) (*DocumentVvodNachalnykhOstatkovVzaimoraschety, error) {
	return NewDocumentVvodNachalnykhOstatkovVzaimoraschety(c.getEntity(key, fields))
}
func (c *Client) DocumentVvodNachalnykhOstatkovVzaimoraschetys(where Where) (*[]DocumentVvodNachalnykhOstatkovVzaimoraschety, error) {
	type ReturnObj struct {
		Value []DocumentVvodNachalnykhOstatkovVzaimoraschety `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВводНачальныхОстатков_Взаиморасчеты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentVvodNachalnykhOstatkovVzaimoraschety(key PrimaryDocumentVvodNachalnykhOstatkovVzaimoraschety, entity DocumentVvodNachalnykhOstatkovVzaimoraschety) (*DocumentVvodNachalnykhOstatkovVzaimoraschety, error) {
	return NewDocumentVvodNachalnykhOstatkovVzaimoraschety(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentVvodNachalnykhOstatkovVzaimoraschety(key PrimaryDocumentVvodNachalnykhOstatkovVzaimoraschety) error {
	return c.removeEntity(key)
}

type DocumentVvodNachalnykhOstatkovTovary struct {
	Key                            Guid     `json:"Ref_Key,omitempty"`
	LineNumber                     Int64    `json:"LineNumber,omitempty"`
	Weight                         *Double  `json:"Вес,omitempty"`
	DokumentOprikhodovaniiaKey     *Guid    `json:"ДокументОприходования_Key,omitempty"`
	DokumentProdazhiKey            *Guid    `json:"ДокументПродажи_Key,omitempty"`
	KachestvoKey                   *Guid    `json:"Качество_Key,omitempty"`
	Quantity                       *Double  `json:"Количество,omitempty"`
	Comment                        *String  `json:"Комментарий,omitempty"`
	NDSVkliuchenVStoimost          *Boolean `json:"НДСВключенВСтоимость,omitempty"`
	ItemKey                        *Guid    `json:"Номенклатура_Key,omitempty"`
	NomerGTDKey                    *Guid    `json:"НомерГТД_Key,omitempty"`
	Pasport                        *String  `json:"Паспорт,omitempty"`
	ProtsentRoznichnoiNatsenki     *Double  `json:"ПроцентРозничнойНаценки,omitempty"`
	ProtsentSkidkiNatsenki         *Double  `json:"ПроцентСкидкиНаценки,omitempty"`
	SizeKey                        *Guid    `json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid    `json:"СерияНоменклатуры_Key,omitempty"`
	StavkaNDS                      *String  `json:"СтавкаНДС,omitempty"`
	StavkaNDSProdazhi              *String  `json:"СтавкаНДСПродажи,omitempty"`
	StatusPartii                   *String  `json:"СтатусПартии,omitempty"`
	StranaProiskhozhdeniiaKey      *Guid    `json:"СтранаПроисхождения_Key,omitempty"`
	Sum                            *Double  `json:"Сумма,omitempty"`
	SummaNDS                       *Double  `json:"СуммаНДС,omitempty"`
	SummaNDSProdazhi               *Double  `json:"СуммаНДСПродажи,omitempty"`
	SummaProdazhi                  *Double  `json:"СуммаПродажи,omitempty"`
	SummaProdazhiBezSkidok         *Double  `json:"СуммаПродажиБезСкидок,omitempty"`
	KharakteristikaNomenklaturyKey *Guid    `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Double  `json:"Цена,omitempty"`
	RetailCost                     *Double  `json:"ЦенаВРознице,omitempty"`
	TsenaVRoznitseGr               *Double  `json:"ЦенаВРозницеГр,omitempty"`
	TsenaProdazhi                  *Double  `json:"ЦенаПродажи,omitempty"`
	StatusRaskhoda                 *String  `json:"СтатусРасхода,omitempty"`
}

func (DocumentVvodNachalnykhOstatkovTovary) APIEntityType() string {
	return "Document_ВводНачальныхОстатков_Товары"
}
func NewDocumentVvodNachalnykhOstatkovTovary(data string, prevError error) (*DocumentVvodNachalnykhOstatkovTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentVvodNachalnykhOstatkovTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentVvodNachalnykhOstatkovTovary(entity DocumentVvodNachalnykhOstatkovTovary) (*DocumentVvodNachalnykhOstatkovTovary, error) {
	return NewDocumentVvodNachalnykhOstatkovTovary(c.createEntity(entity))
}
func (c *Client) DocumentVvodNachalnykhOstatkovTovary(key PrimaryDocumentVvodNachalnykhOstatkovTovary, fields []string) (*DocumentVvodNachalnykhOstatkovTovary, error) {
	return NewDocumentVvodNachalnykhOstatkovTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentVvodNachalnykhOstatkovTovarys(where Where) (*[]DocumentVvodNachalnykhOstatkovTovary, error) {
	type ReturnObj struct {
		Value []DocumentVvodNachalnykhOstatkovTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВводНачальныхОстатков_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentVvodNachalnykhOstatkovTovary(key PrimaryDocumentVvodNachalnykhOstatkovTovary, entity DocumentVvodNachalnykhOstatkovTovary) (*DocumentVvodNachalnykhOstatkovTovary, error) {
	return NewDocumentVvodNachalnykhOstatkovTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentVvodNachalnykhOstatkovTovary(key PrimaryDocumentVvodNachalnykhOstatkovTovary) error {
	return c.removeEntity(key)
}

type Posting struct {
	Key                                Guid                                               `json:"Ref_Key,omitempty"`
	DataVersion                        *String                                            `json:"DataVersion,omitempty"`
	Number                             *String                                            `json:"Number,omitempty"`
	Date                               *DateTime                                          `json:"Date,omitempty"`
	DeletionMark                       *Boolean                                           `json:"DeletionMark,omitempty"`
	Posted                             *Boolean                                           `json:"Posted,omitempty"`
	Weight                             *Double                                            `json:"ВесДокумента,omitempty"`
	DokumentOsnovanie                  *String                                            `json:"ДокументОснование,omitempty"`
	DokumentSozdanVIuTD                *Boolean                                           `json:"ДокументСозданВЮТД,omitempty"`
	InventarizatsiiaTovarovNaSkladeKey *Guid                                              `json:"ИнвентаризацияТоваровНаСкладе_Key,omitempty"`
	KolichestvoDokumenta               *Int64                                             `json:"КоличествоДокумента,omitempty"`
	Comment                            *String                                            `json:"Комментарий,omitempty"`
	OrganizatsiiaKey                   *Guid                                              `json:"Организация_Key,omitempty"`
	Osnovanie                          *String                                            `json:"Основание,omitempty"`
	OtvetstvennyiKey                   *Guid                                              `json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey                   *Guid                                              `json:"Подразделение_Key,omitempty"`
	DepartmentKey                      *Guid                                              `json:"Склад_Key,omitempty"`
	SumOfDocument                      *Double                                            `json:"СуммаДокумента,omitempty"`
	SummaDokumentaRegl                 *Double                                            `json:"СуммаДокументаРегл,omitempty"`
	TipDokumenta                       *String                                            `json:"ТипДокумента,omitempty"`
	TipTsenKey                         *Guid                                              `json:"ТипЦен_Key,omitempty"`
	KhoziaistvennaiaOperatsiiaKey      *Guid                                              `json:"ХозяйственнаяОперация_Key,omitempty"`
	VystavkaOstatki                    *Boolean                                           `json:"ВыставкаОстатки,omitempty"`
	Goods                              *[]DocumentOprikhodovanieTovarovTovaryRowType      `json:"Товары,omitempty"`
	Sertifikaty                        *[]DocumentOprikhodovanieTovarovSertifikatyRowType `json:"Сертификаты,omitempty"`
	DokumentOsnovanieType              *String                                            `json:"ДокументОснование_Type,omitempty"`
}

func (Posting) APIEntityType() string {
	return "Document_ОприходованиеТоваров"
}
func NewPosting(data string, prevError error) (*Posting, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(Posting)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreatePosting(entity Posting) (*Posting, error) {
	return NewPosting(c.createEntity(entity))
}
func (c *Client) Posting(key PrimaryPosting, fields []string) (*Posting, error) {
	return NewPosting(c.getEntity(key, fields))
}
func (c *Client) Postings(where Where) (*[]Posting, error) {
	type ReturnObj struct {
		Value []Posting `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОприходованиеТоваров", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdatePosting(key PrimaryPosting, entity Posting) (*Posting, error) {
	return NewPosting(c.updateEntity(key, entity))
}
func (c *Client) DeletePosting(key PrimaryPosting) error {
	return c.removeEntity(key)
}

type DocumentOprikhodovanieTovarovTovary struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	Weight                         *Double `json:"Вес,omitempty"`
	KachestvoKey                   *Guid   `json:"Качество_Key,omitempty"`
	Quantity                       *Int64  `json:"Количество,omitempty"`
	ItemKey                        *Guid   `json:"Номенклатура_Key,omitempty"`
	Pasport                        *String `json:"Паспорт,omitempty"`
	ProtsentRoznichnoiNatsenki     *Double `json:"ПроцентРозничнойНаценки,omitempty"`
	SizeKey                        *Guid   `json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	Sum                            *Double `json:"Сумма,omitempty"`
	SummaRegl                      *Double `json:"СуммаРегл,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Double `json:"Цена,omitempty"`
	RetailCost                     *Double `json:"ЦенаВРознице,omitempty"`
	TsenaVRoznitseGr               *Double `json:"ЦенаВРозницеГр,omitempty"`
}

func (DocumentOprikhodovanieTovarovTovary) APIEntityType() string {
	return "Document_ОприходованиеТоваров_Товары"
}
func NewDocumentOprikhodovanieTovarovTovary(data string, prevError error) (*DocumentOprikhodovanieTovarovTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentOprikhodovanieTovarovTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentOprikhodovanieTovarovTovary(entity DocumentOprikhodovanieTovarovTovary) (*DocumentOprikhodovanieTovarovTovary, error) {
	return NewDocumentOprikhodovanieTovarovTovary(c.createEntity(entity))
}
func (c *Client) DocumentOprikhodovanieTovarovTovary(key PrimaryDocumentOprikhodovanieTovarovTovary, fields []string) (*DocumentOprikhodovanieTovarovTovary, error) {
	return NewDocumentOprikhodovanieTovarovTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentOprikhodovanieTovarovTovarys(where Where) (*[]DocumentOprikhodovanieTovarovTovary, error) {
	type ReturnObj struct {
		Value []DocumentOprikhodovanieTovarovTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОприходованиеТоваров_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentOprikhodovanieTovarovTovary(key PrimaryDocumentOprikhodovanieTovarovTovary, entity DocumentOprikhodovanieTovarovTovary) (*DocumentOprikhodovanieTovarovTovary, error) {
	return NewDocumentOprikhodovanieTovarovTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentOprikhodovanieTovarovTovary(key PrimaryDocumentOprikhodovanieTovarovTovary) error {
	return c.removeEntity(key)
}

type DocumentOprikhodovanieTovarovSertifikaty struct {
	Key           Guid    `json:"Ref_Key,omitempty"`
	LineNumber    Int64   `json:"LineNumber,omitempty"`
	SertifikatKey *Guid   `json:"Сертификат_Key,omitempty"`
	Sum           *Double `json:"Сумма,omitempty"`
}

func (DocumentOprikhodovanieTovarovSertifikaty) APIEntityType() string {
	return "Document_ОприходованиеТоваров_Сертификаты"
}
func NewDocumentOprikhodovanieTovarovSertifikaty(data string, prevError error) (*DocumentOprikhodovanieTovarovSertifikaty, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentOprikhodovanieTovarovSertifikaty)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentOprikhodovanieTovarovSertifikaty(entity DocumentOprikhodovanieTovarovSertifikaty) (*DocumentOprikhodovanieTovarovSertifikaty, error) {
	return NewDocumentOprikhodovanieTovarovSertifikaty(c.createEntity(entity))
}
func (c *Client) DocumentOprikhodovanieTovarovSertifikaty(key PrimaryDocumentOprikhodovanieTovarovSertifikaty, fields []string) (*DocumentOprikhodovanieTovarovSertifikaty, error) {
	return NewDocumentOprikhodovanieTovarovSertifikaty(c.getEntity(key, fields))
}
func (c *Client) DocumentOprikhodovanieTovarovSertifikatys(where Where) (*[]DocumentOprikhodovanieTovarovSertifikaty, error) {
	type ReturnObj struct {
		Value []DocumentOprikhodovanieTovarovSertifikaty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОприходованиеТоваров_Сертификаты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentOprikhodovanieTovarovSertifikaty(key PrimaryDocumentOprikhodovanieTovarovSertifikaty, entity DocumentOprikhodovanieTovarovSertifikaty) (*DocumentOprikhodovanieTovarovSertifikaty, error) {
	return NewDocumentOprikhodovanieTovarovSertifikaty(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentOprikhodovanieTovarovSertifikaty(key PrimaryDocumentOprikhodovanieTovarovSertifikaty) error {
	return c.removeEntity(key)
}

type CatalogKomplekty struct {
	Key          Guid     `json:"Ref_Key,omitempty"`
	DataVersion  *String  `json:"DataVersion,omitempty"`
	Description  *String  `json:"Description,omitempty"`
	Code         *String  `json:"Code,omitempty"`
	ParentKey    *Guid    `json:"Parent_Key,omitempty"`
	IsFolder     *Boolean `json:"IsFolder,omitempty"`
	DeletionMark *Boolean `json:"DeletionMark,omitempty"`
}

func (CatalogKomplekty) APIEntityType() string {
	return "Catalog_Комплекты"
}
func NewCatalogKomplekty(data string, prevError error) (*CatalogKomplekty, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogKomplekty)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogKomplekty(entity CatalogKomplekty) (*CatalogKomplekty, error) {
	return NewCatalogKomplekty(c.createEntity(entity))
}
func (c *Client) CatalogKomplekty(key PrimaryCatalogKomplekty, fields []string) (*CatalogKomplekty, error) {
	return NewCatalogKomplekty(c.getEntity(key, fields))
}
func (c *Client) CatalogKomplektys(where Where) (*[]CatalogKomplekty, error) {
	type ReturnObj struct {
		Value []CatalogKomplekty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Комплекты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogKomplekty(key PrimaryCatalogKomplekty, entity CatalogKomplekty) (*CatalogKomplekty, error) {
	return NewCatalogKomplekty(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogKomplekty(key PrimaryCatalogKomplekty) error {
	return c.removeEntity(key)
}

type DocumentPereotsenkaTovarovPriniatykhNaKomissiiu struct {
	Key                            Guid                                                            `json:"Ref_Key,omitempty"`
	DataVersion                    *String                                                         `json:"DataVersion,omitempty"`
	Number                         *String                                                         `json:"Number,omitempty"`
	Date                           *DateTime                                                       `json:"Date,omitempty"`
	DeletionMark                   *Boolean                                                        `json:"DeletionMark,omitempty"`
	Posted                         *Boolean                                                        `json:"Posted,omitempty"`
	ValiutaDokumentaKey            *Guid                                                           `json:"ВалютаДокумента_Key,omitempty"`
	DogovorKontragentaKey          *Guid                                                           `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie              *String                                                         `json:"ДокументОснование,omitempty"`
	Comment                        *String                                                         `json:"Комментарий,omitempty"`
	KontragentKey                  *Guid                                                           `json:"Контрагент_Key,omitempty"`
	KratnostVzaimoraschetov        *Int64                                                          `json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov            *Double                                                         `json:"КурсВзаиморасчетов,omitempty"`
	NDSVkliuchenVStoimost          *Boolean                                                        `json:"НДСВключенВСтоимость,omitempty"`
	OrganizatsiiaKey               *Guid                                                           `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey               *Guid                                                           `json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey               *Guid                                                           `json:"Подразделение_Key,omitempty"`
	Sdelka                         *String                                                         `json:"Сделка,omitempty"`
	DepartmentKey                  *Guid                                                           `json:"Склад_Key,omitempty"`
	SummaVkliuchaetNDS             *Boolean                                                        `json:"СуммаВключаетНДС,omitempty"`
	TipDokumenta                   *String                                                         `json:"ТипДокумента,omitempty"`
	TipTsenKey                     *Guid                                                           `json:"ТипЦен_Key,omitempty"`
	UchityvatNDS                   *Boolean                                                        `json:"УчитыватьНДС,omitempty"`
	KhoziaistvennaiaOperatsiiaKey  *Guid                                                           `json:"ХозяйственнаяОперация_Key,omitempty"`
	NastroikiZapolneniiaBase64Data *Binary                                                         `json:"НастройкиЗаполнения_Base64Data,omitempty"`
	Goods                          *[]DocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovaryRowType `json:"Товары,omitempty"`
	DokumentOsnovanieType          *String                                                         `json:"ДокументОснование_Type,omitempty"`
	SdelkaType                     *String                                                         `json:"Сделка_Type,omitempty"`
	NastroikiZapolneniiaType       *String                                                         `json:"НастройкиЗаполнения_Type,omitempty"`
	NastroikiZapolneniia           *Stream                                                         `json:"НастройкиЗаполнения,omitempty"`
}

func (DocumentPereotsenkaTovarovPriniatykhNaKomissiiu) APIEntityType() string {
	return "Document_ПереоценкаТоваровПринятыхНаКомиссию"
}
func NewDocumentPereotsenkaTovarovPriniatykhNaKomissiiu(data string, prevError error) (*DocumentPereotsenkaTovarovPriniatykhNaKomissiiu, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPereotsenkaTovarovPriniatykhNaKomissiiu)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPereotsenkaTovarovPriniatykhNaKomissiiu(entity DocumentPereotsenkaTovarovPriniatykhNaKomissiiu) (*DocumentPereotsenkaTovarovPriniatykhNaKomissiiu, error) {
	return NewDocumentPereotsenkaTovarovPriniatykhNaKomissiiu(c.createEntity(entity))
}
func (c *Client) DocumentPereotsenkaTovarovPriniatykhNaKomissiiu(key PrimaryDocumentPereotsenkaTovarovPriniatykhNaKomissiiu, fields []string) (*DocumentPereotsenkaTovarovPriniatykhNaKomissiiu, error) {
	return NewDocumentPereotsenkaTovarovPriniatykhNaKomissiiu(c.getEntity(key, fields))
}
func (c *Client) DocumentPereotsenkaTovarovPriniatykhNaKomissiius(where Where) (*[]DocumentPereotsenkaTovarovPriniatykhNaKomissiiu, error) {
	type ReturnObj struct {
		Value []DocumentPereotsenkaTovarovPriniatykhNaKomissiiu `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПереоценкаТоваровПринятыхНаКомиссию", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPereotsenkaTovarovPriniatykhNaKomissiiu(key PrimaryDocumentPereotsenkaTovarovPriniatykhNaKomissiiu, entity DocumentPereotsenkaTovarovPriniatykhNaKomissiiu) (*DocumentPereotsenkaTovarovPriniatykhNaKomissiiu, error) {
	return NewDocumentPereotsenkaTovarovPriniatykhNaKomissiiu(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPereotsenkaTovarovPriniatykhNaKomissiiu(key PrimaryDocumentPereotsenkaTovarovPriniatykhNaKomissiiu) error {
	return c.removeEntity(key)
}

type DocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovary struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	Weight                         *Double `json:"Вес,omitempty"`
	Quantity                       *Int64  `json:"Количество,omitempty"`
	ItemKey                        *Guid   `json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid   `json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	StavkaNDS                      *String `json:"СтавкаНДС,omitempty"`
	Sum                            *Double `json:"Сумма,omitempty"`
	SummaNDS                       *Double `json:"СуммаНДС,omitempty"`
	SummaStaraia                   *Double `json:"СуммаСтарая,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Double `json:"Цена,omitempty"`
	TsenaZaGramm                   *Double `json:"ЦенаЗаГрамм,omitempty"`
}

func (DocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovary) APIEntityType() string {
	return "Document_ПереоценкаТоваровПринятыхНаКомиссию_Товары"
}
func NewDocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovary(data string, prevError error) (*DocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovary(entity DocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovary) (*DocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovary, error) {
	return NewDocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovary(c.createEntity(entity))
}
func (c *Client) DocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovary(key PrimaryDocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovary, fields []string) (*DocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovary, error) {
	return NewDocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovarys(where Where) (*[]DocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovary, error) {
	type ReturnObj struct {
		Value []DocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПереоценкаТоваровПринятыхНаКомиссию_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovary(key PrimaryDocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovary, entity DocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovary) (*DocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovary, error) {
	return NewDocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovary(key PrimaryDocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovary) error {
	return c.removeEntity(key)
}

type DocumentElektronnoePismo struct {
	Key                                      Guid                                              `json:"Ref_Key,omitempty"`
	DataVersion                              *String                                           `json:"DataVersion,omitempty"`
	Number                                   *String                                           `json:"Number,omitempty"`
	Date                                     *DateTime                                         `json:"Date,omitempty"`
	DeletionMark                             *Boolean                                          `json:"DeletionMark,omitempty"`
	Posted                                   *Boolean                                          `json:"Posted,omitempty"`
	VidTekstaPisma                           *String                                           `json:"ВидТекстаПисьма,omitempty"`
	GruppaUchetnoiZapisiKey                  *Guid                                             `json:"ГруппаУчетнойЗаписи_Key,omitempty"`
	DataOtpravleniia                         *DateTime                                         `json:"ДатаОтправления,omitempty"`
	DataTransporta                           *DateTime                                         `json:"ДатаТранспорта,omitempty"`
	EstVlozheniia                            *Boolean                                          `json:"ЕстьВложения,omitempty"`
	IdentifikatorPisma                       *String                                           `json:"ИдентификаторПисьма,omitempty"`
	ImiaKompiuteraRedaktirovaniiaKhTMLTeksta *String                                           `json:"ИмяКомпьютераРедактированияХТМЛТекста,omitempty"`
	ImiaFailaRedaktirovaniiaKhTMLTeksta      *String                                           `json:"ИмяФайлаРедактированияХТМЛТекста,omitempty"`
	Comment                                  *String                                           `json:"Комментарий,omitempty"`
	Komu                                     *String                                           `json:"Кому,omitempty"`
	KomuPredstavlenie                        *String                                           `json:"КомуПредставление,omitempty"`
	Kopii                                    *String                                           `json:"Копии,omitempty"`
	KopiiPredstavlenie                       *String                                           `json:"КопииПредставление,omitempty"`
	NeRassmotreno                            *Boolean                                          `json:"НеРассмотрено,omitempty"`
	Osnovanie                                *String                                           `json:"Основание,omitempty"`
	Otvet                                    *Boolean                                          `json:"Ответ,omitempty"`
	OtvetstvennyiKey                         *Guid                                             `json:"Ответственный_Key,omitempty"`
	OtpravitelAdresElektronnoiPochty         *String                                           `json:"ОтправительАдресЭлектроннойПочты,omitempty"`
	OtpravitelImia                           *String                                           `json:"ОтправительИмя,omitempty"`
	OtpravitelPredstavlenie                  *String                                           `json:"ОтправительПредставление,omitempty"`
	Pereadresatsiia                          *Boolean                                          `json:"Переадресация,omitempty"`
	PochtovoeSoobshchenieBase64Data          *Binary                                           `json:"ПочтовоеСообщение_Base64Data,omitempty"`
	Predmet                                  *String                                           `json:"Предмет,omitempty"`
	RassmotretPosle                          *DateTime                                         `json:"РассмотретьПосле,omitempty"`
	SkrytyeKopii                             *String                                           `json:"СкрытыеКопии,omitempty"`
	SostoianiePotomkaPisma                   *String                                           `json:"СостояниеПотомкаПисьма,omitempty"`
	StatusPisma                              *String                                           `json:"СтатусПисьма,omitempty"`
	TekstPisma                               *String                                           `json:"ТекстПисьма,omitempty"`
	Tema                                     *String                                           `json:"Тема,omitempty"`
	UchetnaiaZapisKey                        *Guid                                             `json:"УчетнаяЗапись_Key,omitempty"`
	KomuTCh                                  *[]DocumentElektronnoePismoKomuTChRowType         `json:"КомуТЧ,omitempty"`
	KopiiTCh                                 *[]DocumentElektronnoePismoKopiiTChRowType        `json:"КопииТЧ,omitempty"`
	SkrytyeKopiiTCh                          *[]DocumentElektronnoePismoSkrytyeKopiiTChRowType `json:"СкрытыеКопииТЧ,omitempty"`
	OsnovanieType                            *String                                           `json:"Основание_Type,omitempty"`
	PochtovoeSoobshchenieType                *String                                           `json:"ПочтовоеСообщение_Type,omitempty"`
	PredmetType                              *String                                           `json:"Предмет_Type,omitempty"`
	PochtovoeSoobshchenie                    *Stream                                           `json:"ПочтовоеСообщение,omitempty"`
}

func (DocumentElektronnoePismo) APIEntityType() string {
	return "Document_ЭлектронноеПисьмо"
}
func NewDocumentElektronnoePismo(data string, prevError error) (*DocumentElektronnoePismo, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentElektronnoePismo)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentElektronnoePismo(entity DocumentElektronnoePismo) (*DocumentElektronnoePismo, error) {
	return NewDocumentElektronnoePismo(c.createEntity(entity))
}
func (c *Client) DocumentElektronnoePismo(key PrimaryDocumentElektronnoePismo, fields []string) (*DocumentElektronnoePismo, error) {
	return NewDocumentElektronnoePismo(c.getEntity(key, fields))
}
func (c *Client) DocumentElektronnoePismos(where Where) (*[]DocumentElektronnoePismo, error) {
	type ReturnObj struct {
		Value []DocumentElektronnoePismo `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЭлектронноеПисьмо", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentElektronnoePismo(key PrimaryDocumentElektronnoePismo, entity DocumentElektronnoePismo) (*DocumentElektronnoePismo, error) {
	return NewDocumentElektronnoePismo(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentElektronnoePismo(key PrimaryDocumentElektronnoePismo) error {
	return c.removeEntity(key)
}

type DocumentElektronnoePismoKomuTCh struct {
	Key                    Guid    `json:"Ref_Key,omitempty"`
	LineNumber             Int64   `json:"LineNumber,omitempty"`
	AdresElektronnoiPochty *String `json:"АдресЭлектроннойПочты,omitempty"`
	Predstavlenie          *String `json:"Представление,omitempty"`
}

func (DocumentElektronnoePismoKomuTCh) APIEntityType() string {
	return "Document_ЭлектронноеПисьмо_КомуТЧ"
}
func NewDocumentElektronnoePismoKomuTCh(data string, prevError error) (*DocumentElektronnoePismoKomuTCh, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentElektronnoePismoKomuTCh)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentElektronnoePismoKomuTCh(entity DocumentElektronnoePismoKomuTCh) (*DocumentElektronnoePismoKomuTCh, error) {
	return NewDocumentElektronnoePismoKomuTCh(c.createEntity(entity))
}
func (c *Client) DocumentElektronnoePismoKomuTCh(key PrimaryDocumentElektronnoePismoKomuTCh, fields []string) (*DocumentElektronnoePismoKomuTCh, error) {
	return NewDocumentElektronnoePismoKomuTCh(c.getEntity(key, fields))
}
func (c *Client) DocumentElektronnoePismoKomuTChs(where Where) (*[]DocumentElektronnoePismoKomuTCh, error) {
	type ReturnObj struct {
		Value []DocumentElektronnoePismoKomuTCh `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЭлектронноеПисьмо_КомуТЧ", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentElektronnoePismoKomuTCh(key PrimaryDocumentElektronnoePismoKomuTCh, entity DocumentElektronnoePismoKomuTCh) (*DocumentElektronnoePismoKomuTCh, error) {
	return NewDocumentElektronnoePismoKomuTCh(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentElektronnoePismoKomuTCh(key PrimaryDocumentElektronnoePismoKomuTCh) error {
	return c.removeEntity(key)
}

type DocumentElektronnoePismoKopiiTCh struct {
	Key                    Guid    `json:"Ref_Key,omitempty"`
	LineNumber             Int64   `json:"LineNumber,omitempty"`
	AdresElektronnoiPochty *String `json:"АдресЭлектроннойПочты,omitempty"`
	Predstavlenie          *String `json:"Представление,omitempty"`
}

func (DocumentElektronnoePismoKopiiTCh) APIEntityType() string {
	return "Document_ЭлектронноеПисьмо_КопииТЧ"
}
func NewDocumentElektronnoePismoKopiiTCh(data string, prevError error) (*DocumentElektronnoePismoKopiiTCh, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentElektronnoePismoKopiiTCh)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentElektronnoePismoKopiiTCh(entity DocumentElektronnoePismoKopiiTCh) (*DocumentElektronnoePismoKopiiTCh, error) {
	return NewDocumentElektronnoePismoKopiiTCh(c.createEntity(entity))
}
func (c *Client) DocumentElektronnoePismoKopiiTCh(key PrimaryDocumentElektronnoePismoKopiiTCh, fields []string) (*DocumentElektronnoePismoKopiiTCh, error) {
	return NewDocumentElektronnoePismoKopiiTCh(c.getEntity(key, fields))
}
func (c *Client) DocumentElektronnoePismoKopiiTChs(where Where) (*[]DocumentElektronnoePismoKopiiTCh, error) {
	type ReturnObj struct {
		Value []DocumentElektronnoePismoKopiiTCh `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЭлектронноеПисьмо_КопииТЧ", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentElektronnoePismoKopiiTCh(key PrimaryDocumentElektronnoePismoKopiiTCh, entity DocumentElektronnoePismoKopiiTCh) (*DocumentElektronnoePismoKopiiTCh, error) {
	return NewDocumentElektronnoePismoKopiiTCh(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentElektronnoePismoKopiiTCh(key PrimaryDocumentElektronnoePismoKopiiTCh) error {
	return c.removeEntity(key)
}

type DocumentElektronnoePismoSkrytyeKopiiTCh struct {
	Key                    Guid    `json:"Ref_Key,omitempty"`
	LineNumber             Int64   `json:"LineNumber,omitempty"`
	AdresElektronnoiPochty *String `json:"АдресЭлектроннойПочты,omitempty"`
	Predstavlenie          *String `json:"Представление,omitempty"`
}

func (DocumentElektronnoePismoSkrytyeKopiiTCh) APIEntityType() string {
	return "Document_ЭлектронноеПисьмо_СкрытыеКопииТЧ"
}
func NewDocumentElektronnoePismoSkrytyeKopiiTCh(data string, prevError error) (*DocumentElektronnoePismoSkrytyeKopiiTCh, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentElektronnoePismoSkrytyeKopiiTCh)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentElektronnoePismoSkrytyeKopiiTCh(entity DocumentElektronnoePismoSkrytyeKopiiTCh) (*DocumentElektronnoePismoSkrytyeKopiiTCh, error) {
	return NewDocumentElektronnoePismoSkrytyeKopiiTCh(c.createEntity(entity))
}
func (c *Client) DocumentElektronnoePismoSkrytyeKopiiTCh(key PrimaryDocumentElektronnoePismoSkrytyeKopiiTCh, fields []string) (*DocumentElektronnoePismoSkrytyeKopiiTCh, error) {
	return NewDocumentElektronnoePismoSkrytyeKopiiTCh(c.getEntity(key, fields))
}
func (c *Client) DocumentElektronnoePismoSkrytyeKopiiTChs(where Where) (*[]DocumentElektronnoePismoSkrytyeKopiiTCh, error) {
	type ReturnObj struct {
		Value []DocumentElektronnoePismoSkrytyeKopiiTCh `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЭлектронноеПисьмо_СкрытыеКопииТЧ", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentElektronnoePismoSkrytyeKopiiTCh(key PrimaryDocumentElektronnoePismoSkrytyeKopiiTCh, entity DocumentElektronnoePismoSkrytyeKopiiTCh) (*DocumentElektronnoePismoSkrytyeKopiiTCh, error) {
	return NewDocumentElektronnoePismoSkrytyeKopiiTCh(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentElektronnoePismoSkrytyeKopiiTCh(key PrimaryDocumentElektronnoePismoSkrytyeKopiiTCh) error {
	return c.removeEntity(key)
}

type CatalogGruppyDefektov struct {
	Key          Guid     `json:"Ref_Key,omitempty"`
	DataVersion  *String  `json:"DataVersion,omitempty"`
	Description  *String  `json:"Description,omitempty"`
	Code         *String  `json:"Code,omitempty"`
	OwnerKey     *Guid    `json:"Owner_Key,omitempty"`
	DeletionMark *Boolean `json:"DeletionMark,omitempty"`
}

func (CatalogGruppyDefektov) APIEntityType() string {
	return "Catalog_ГруппыДефектов"
}
func NewCatalogGruppyDefektov(data string, prevError error) (*CatalogGruppyDefektov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogGruppyDefektov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogGruppyDefektov(entity CatalogGruppyDefektov) (*CatalogGruppyDefektov, error) {
	return NewCatalogGruppyDefektov(c.createEntity(entity))
}
func (c *Client) CatalogGruppyDefektov(key PrimaryCatalogGruppyDefektov, fields []string) (*CatalogGruppyDefektov, error) {
	return NewCatalogGruppyDefektov(c.getEntity(key, fields))
}
func (c *Client) CatalogGruppyDefektovs(where Where) (*[]CatalogGruppyDefektov, error) {
	type ReturnObj struct {
		Value []CatalogGruppyDefektov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ГруппыДефектов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogGruppyDefektov(key PrimaryCatalogGruppyDefektov, entity CatalogGruppyDefektov) (*CatalogGruppyDefektov, error) {
	return NewCatalogGruppyDefektov(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogGruppyDefektov(key PrimaryCatalogGruppyDefektov) error {
	return c.removeEntity(key)
}

type CatalogfmAnketaKlientaBenefitsariia struct {
	Key                     Guid                                                           `json:"Ref_Key,omitempty"`
	DataVersion             *String                                                        `json:"DataVersion,omitempty"`
	Description             *String                                                        `json:"Description,omitempty"`
	Code                    *String                                                        `json:"Code,omitempty"`
	OwnerKey                *Guid                                                          `json:"Owner_Key,omitempty"`
	DeletionMark            *Boolean                                                       `json:"DeletionMark,omitempty"`
	Familiia                *String                                                        `json:"Фамилия,omitempty"`
	Imia                    *String                                                        `json:"Имя,omitempty"`
	Otchestvo               *String                                                        `json:"Отчество,omitempty"`
	KartochkaKontragentaKey *Guid                                                          `json:"КарточкаКонтрагента_Key,omitempty"`
	Deistvuiushchii         *Boolean                                                       `json:"Действующий,omitempty"`
	DannyeKontragenta       *[]CatalogfmAnketaKlientaBenefitsariiaDannyeKontragentaRowType `json:"ДанныеКонтрагента,omitempty"`
}

func (CatalogfmAnketaKlientaBenefitsariia) APIEntityType() string {
	return "Catalog_фмАнкетаКлиентаБенефицария"
}
func NewCatalogfmAnketaKlientaBenefitsariia(data string, prevError error) (*CatalogfmAnketaKlientaBenefitsariia, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogfmAnketaKlientaBenefitsariia)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogfmAnketaKlientaBenefitsariia(entity CatalogfmAnketaKlientaBenefitsariia) (*CatalogfmAnketaKlientaBenefitsariia, error) {
	return NewCatalogfmAnketaKlientaBenefitsariia(c.createEntity(entity))
}
func (c *Client) CatalogfmAnketaKlientaBenefitsariia(key PrimaryCatalogfmAnketaKlientaBenefitsariia, fields []string) (*CatalogfmAnketaKlientaBenefitsariia, error) {
	return NewCatalogfmAnketaKlientaBenefitsariia(c.getEntity(key, fields))
}
func (c *Client) CatalogfmAnketaKlientaBenefitsariias(where Where) (*[]CatalogfmAnketaKlientaBenefitsariia, error) {
	type ReturnObj struct {
		Value []CatalogfmAnketaKlientaBenefitsariia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_фмАнкетаКлиентаБенефицария", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogfmAnketaKlientaBenefitsariia(key PrimaryCatalogfmAnketaKlientaBenefitsariia, entity CatalogfmAnketaKlientaBenefitsariia) (*CatalogfmAnketaKlientaBenefitsariia, error) {
	return NewCatalogfmAnketaKlientaBenefitsariia(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogfmAnketaKlientaBenefitsariia(key PrimaryCatalogfmAnketaKlientaBenefitsariia) error {
	return c.removeEntity(key)
}

type CatalogfmAnketaKlientaBenefitsariiaDannyeKontragenta struct {
	Key           Guid    `json:"Ref_Key,omitempty"`
	LineNumber    Int64   `json:"LineNumber,omitempty"`
	Kliuch        *String `json:"Ключ,omitempty"`
	Znachenie     *String `json:"Значение,omitempty"`
	ZnachenieType *String `json:"Значение_Type,omitempty"`
}

func (CatalogfmAnketaKlientaBenefitsariiaDannyeKontragenta) APIEntityType() string {
	return "Catalog_фмАнкетаКлиентаБенефицария_ДанныеКонтрагента"
}
func NewCatalogfmAnketaKlientaBenefitsariiaDannyeKontragenta(data string, prevError error) (*CatalogfmAnketaKlientaBenefitsariiaDannyeKontragenta, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogfmAnketaKlientaBenefitsariiaDannyeKontragenta)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogfmAnketaKlientaBenefitsariiaDannyeKontragenta(entity CatalogfmAnketaKlientaBenefitsariiaDannyeKontragenta) (*CatalogfmAnketaKlientaBenefitsariiaDannyeKontragenta, error) {
	return NewCatalogfmAnketaKlientaBenefitsariiaDannyeKontragenta(c.createEntity(entity))
}
func (c *Client) CatalogfmAnketaKlientaBenefitsariiaDannyeKontragenta(key PrimaryCatalogfmAnketaKlientaBenefitsariiaDannyeKontragenta, fields []string) (*CatalogfmAnketaKlientaBenefitsariiaDannyeKontragenta, error) {
	return NewCatalogfmAnketaKlientaBenefitsariiaDannyeKontragenta(c.getEntity(key, fields))
}
func (c *Client) CatalogfmAnketaKlientaBenefitsariiaDannyeKontragentas(where Where) (*[]CatalogfmAnketaKlientaBenefitsariiaDannyeKontragenta, error) {
	type ReturnObj struct {
		Value []CatalogfmAnketaKlientaBenefitsariiaDannyeKontragenta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_фмАнкетаКлиентаБенефицария_ДанныеКонтрагента", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogfmAnketaKlientaBenefitsariiaDannyeKontragenta(key PrimaryCatalogfmAnketaKlientaBenefitsariiaDannyeKontragenta, entity CatalogfmAnketaKlientaBenefitsariiaDannyeKontragenta) (*CatalogfmAnketaKlientaBenefitsariiaDannyeKontragenta, error) {
	return NewCatalogfmAnketaKlientaBenefitsariiaDannyeKontragenta(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogfmAnketaKlientaBenefitsariiaDannyeKontragenta(key PrimaryCatalogfmAnketaKlientaBenefitsariiaDannyeKontragenta) error {
	return c.removeEntity(key)
}

type CatalogTsenovyeGruppy struct {
	Key          Guid     `json:"Ref_Key,omitempty"`
	DataVersion  *String  `json:"DataVersion,omitempty"`
	Description  *String  `json:"Description,omitempty"`
	DeletionMark *Boolean `json:"DeletionMark,omitempty"`
}

func (CatalogTsenovyeGruppy) APIEntityType() string {
	return "Catalog_ЦеновыеГруппы"
}
func NewCatalogTsenovyeGruppy(data string, prevError error) (*CatalogTsenovyeGruppy, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogTsenovyeGruppy)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogTsenovyeGruppy(entity CatalogTsenovyeGruppy) (*CatalogTsenovyeGruppy, error) {
	return NewCatalogTsenovyeGruppy(c.createEntity(entity))
}
func (c *Client) CatalogTsenovyeGruppy(key PrimaryCatalogTsenovyeGruppy, fields []string) (*CatalogTsenovyeGruppy, error) {
	return NewCatalogTsenovyeGruppy(c.getEntity(key, fields))
}
func (c *Client) CatalogTsenovyeGruppys(where Where) (*[]CatalogTsenovyeGruppy, error) {
	type ReturnObj struct {
		Value []CatalogTsenovyeGruppy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ЦеновыеГруппы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogTsenovyeGruppy(key PrimaryCatalogTsenovyeGruppy, entity CatalogTsenovyeGruppy) (*CatalogTsenovyeGruppy, error) {
	return NewCatalogTsenovyeGruppy(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogTsenovyeGruppy(key PrimaryCatalogTsenovyeGruppy) error {
	return c.removeEntity(key)
}

type CatalogPravilaTsenoobrazovaniia struct {
	Key                Guid                                                    `json:"Ref_Key,omitempty"`
	DataVersion        *String                                                 `json:"DataVersion,omitempty"`
	Description        *String                                                 `json:"Description,omitempty"`
	DeletionMark       *Boolean                                                `json:"DeletionMark,omitempty"`
	VidTsenKey         *Guid                                                   `json:"ВидЦен_Key,omitempty"`
	TsenaVkliuchaetNDS *Boolean                                                `json:"ЦенаВключаетНДС,omitempty"`
	Status             *String                                                 `json:"Статус,omitempty"`
	TsenovyeGruppy     *[]CatalogPravilaTsenoobrazovaniiaTsenovyeGruppyRowType `json:"ЦеновыеГруппы,omitempty"`
}

func (CatalogPravilaTsenoobrazovaniia) APIEntityType() string {
	return "Catalog_ПравилаЦенообразования"
}
func NewCatalogPravilaTsenoobrazovaniia(data string, prevError error) (*CatalogPravilaTsenoobrazovaniia, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogPravilaTsenoobrazovaniia)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogPravilaTsenoobrazovaniia(entity CatalogPravilaTsenoobrazovaniia) (*CatalogPravilaTsenoobrazovaniia, error) {
	return NewCatalogPravilaTsenoobrazovaniia(c.createEntity(entity))
}
func (c *Client) CatalogPravilaTsenoobrazovaniia(key PrimaryCatalogPravilaTsenoobrazovaniia, fields []string) (*CatalogPravilaTsenoobrazovaniia, error) {
	return NewCatalogPravilaTsenoobrazovaniia(c.getEntity(key, fields))
}
func (c *Client) CatalogPravilaTsenoobrazovaniias(where Where) (*[]CatalogPravilaTsenoobrazovaniia, error) {
	type ReturnObj struct {
		Value []CatalogPravilaTsenoobrazovaniia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ПравилаЦенообразования", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogPravilaTsenoobrazovaniia(key PrimaryCatalogPravilaTsenoobrazovaniia, entity CatalogPravilaTsenoobrazovaniia) (*CatalogPravilaTsenoobrazovaniia, error) {
	return NewCatalogPravilaTsenoobrazovaniia(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogPravilaTsenoobrazovaniia(key PrimaryCatalogPravilaTsenoobrazovaniia) error {
	return c.removeEntity(key)
}

type CatalogPravilaTsenoobrazovaniiaTsenovyeGruppy struct {
	Key                Guid  `json:"Ref_Key,omitempty"`
	LineNumber         Int64 `json:"LineNumber,omitempty"`
	TsenovaiaGruppaKey *Guid `json:"ЦеноваяГруппа_Key,omitempty"`
	VidTsenKey         *Guid `json:"ВидЦен_Key,omitempty"`
}

func (CatalogPravilaTsenoobrazovaniiaTsenovyeGruppy) APIEntityType() string {
	return "Catalog_ПравилаЦенообразования_ЦеновыеГруппы"
}
func NewCatalogPravilaTsenoobrazovaniiaTsenovyeGruppy(data string, prevError error) (*CatalogPravilaTsenoobrazovaniiaTsenovyeGruppy, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogPravilaTsenoobrazovaniiaTsenovyeGruppy)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogPravilaTsenoobrazovaniiaTsenovyeGruppy(entity CatalogPravilaTsenoobrazovaniiaTsenovyeGruppy) (*CatalogPravilaTsenoobrazovaniiaTsenovyeGruppy, error) {
	return NewCatalogPravilaTsenoobrazovaniiaTsenovyeGruppy(c.createEntity(entity))
}
func (c *Client) CatalogPravilaTsenoobrazovaniiaTsenovyeGruppy(key PrimaryCatalogPravilaTsenoobrazovaniiaTsenovyeGruppy, fields []string) (*CatalogPravilaTsenoobrazovaniiaTsenovyeGruppy, error) {
	return NewCatalogPravilaTsenoobrazovaniiaTsenovyeGruppy(c.getEntity(key, fields))
}
func (c *Client) CatalogPravilaTsenoobrazovaniiaTsenovyeGruppys(where Where) (*[]CatalogPravilaTsenoobrazovaniiaTsenovyeGruppy, error) {
	type ReturnObj struct {
		Value []CatalogPravilaTsenoobrazovaniiaTsenovyeGruppy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ПравилаЦенообразования_ЦеновыеГруппы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogPravilaTsenoobrazovaniiaTsenovyeGruppy(key PrimaryCatalogPravilaTsenoobrazovaniiaTsenovyeGruppy, entity CatalogPravilaTsenoobrazovaniiaTsenovyeGruppy) (*CatalogPravilaTsenoobrazovaniiaTsenovyeGruppy, error) {
	return NewCatalogPravilaTsenoobrazovaniiaTsenovyeGruppy(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogPravilaTsenoobrazovaniiaTsenovyeGruppy(key PrimaryCatalogPravilaTsenoobrazovaniiaTsenovyeGruppy) error {
	return c.removeEntity(key)
}

type DocumentObieiavlenieNaVznosNalichnymi struct {
	Key                   Guid      `json:"Ref_Key,omitempty"`
	DataVersion           *String   `json:"DataVersion,omitempty"`
	Number                *String   `json:"Number,omitempty"`
	Date                  *DateTime `json:"Date,omitempty"`
	DeletionMark          *Boolean  `json:"DeletionMark,omitempty"`
	Posted                *Boolean  `json:"Posted,omitempty"`
	ValiutaDokumentaKey   *Guid     `json:"ВалютаДокумента_Key,omitempty"`
	DataOplaty            *DateTime `json:"ДатаОплаты,omitempty"`
	DokumentOsnovanie     *String   `json:"ДокументОснование,omitempty"`
	KassaKey              *Guid     `json:"Касса_Key,omitempty"`
	Comment               *String   `json:"Комментарий,omitempty"`
	Oplacheno             *Boolean  `json:"Оплачено,omitempty"`
	OrganizatsiiaKey      *Guid     `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey      *Guid     `json:"Ответственный_Key,omitempty"`
	TypeOfMovingMoneyKey  *Guid     `json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SumOfDocument         *Double   `json:"СуммаДокумента,omitempty"`
	SchetOrganizatsiiKey  *Guid     `json:"СчетОрганизации_Key,omitempty"`
	TipDokumenta          *String   `json:"ТипДокумента,omitempty"`
	DokumentOsnovanieType *String   `json:"ДокументОснование_Type,omitempty"`
}

func (DocumentObieiavlenieNaVznosNalichnymi) APIEntityType() string {
	return "Document_ОбъявлениеНаВзносНаличными"
}
func NewDocumentObieiavlenieNaVznosNalichnymi(data string, prevError error) (*DocumentObieiavlenieNaVznosNalichnymi, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentObieiavlenieNaVznosNalichnymi)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentObieiavlenieNaVznosNalichnymi(entity DocumentObieiavlenieNaVznosNalichnymi) (*DocumentObieiavlenieNaVznosNalichnymi, error) {
	return NewDocumentObieiavlenieNaVznosNalichnymi(c.createEntity(entity))
}
func (c *Client) DocumentObieiavlenieNaVznosNalichnymi(key PrimaryDocumentObieiavlenieNaVznosNalichnymi, fields []string) (*DocumentObieiavlenieNaVznosNalichnymi, error) {
	return NewDocumentObieiavlenieNaVznosNalichnymi(c.getEntity(key, fields))
}
func (c *Client) DocumentObieiavlenieNaVznosNalichnymis(where Where) (*[]DocumentObieiavlenieNaVznosNalichnymi, error) {
	type ReturnObj struct {
		Value []DocumentObieiavlenieNaVznosNalichnymi `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОбъявлениеНаВзносНаличными", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentObieiavlenieNaVznosNalichnymi(key PrimaryDocumentObieiavlenieNaVznosNalichnymi, entity DocumentObieiavlenieNaVznosNalichnymi) (*DocumentObieiavlenieNaVznosNalichnymi, error) {
	return NewDocumentObieiavlenieNaVznosNalichnymi(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentObieiavlenieNaVznosNalichnymi(key PrimaryDocumentObieiavlenieNaVznosNalichnymi) error {
	return c.removeEntity(key)
}

type CatalogValiuty struct {
	Key                       Guid     `json:"Ref_Key,omitempty"`
	DataVersion               *String  `json:"DataVersion,omitempty"`
	Description               *String  `json:"Description,omitempty"`
	Code                      *String  `json:"Code,omitempty"`
	DeletionMark              *Boolean `json:"DeletionMark,omitempty"`
	NaimenovaniePolnoe        *String  `json:"НаименованиеПолное,omitempty"`
	ParametryPropisiNaRusskom *String  `json:"ПараметрыПрописиНаРусском,omitempty"`
	SposobUstanovkiKursa      *String  `json:"СпособУстановкиКурса,omitempty"`
	BIdentifikator            *String  `json:"Б_Идентификатор,omitempty"`
	BNomerVersii              *String  `json:"Б_НомерВерсии,omitempty"`
}

func (CatalogValiuty) APIEntityType() string {
	return "Catalog_Валюты"
}
func NewCatalogValiuty(data string, prevError error) (*CatalogValiuty, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogValiuty)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogValiuty(entity CatalogValiuty) (*CatalogValiuty, error) {
	return NewCatalogValiuty(c.createEntity(entity))
}
func (c *Client) CatalogValiuty(key PrimaryCatalogValiuty, fields []string) (*CatalogValiuty, error) {
	return NewCatalogValiuty(c.getEntity(key, fields))
}
func (c *Client) CatalogValiutys(where Where) (*[]CatalogValiuty, error) {
	type ReturnObj struct {
		Value []CatalogValiuty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Валюты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogValiuty(key PrimaryCatalogValiuty, entity CatalogValiuty) (*CatalogValiuty, error) {
	return NewCatalogValiuty(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogValiuty(key PrimaryCatalogValiuty) error {
	return c.removeEntity(key)
}

type DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochku struct {
	Key                             Guid                                                                                 `json:"Ref_Key,omitempty"`
	DataVersion                     *String                                                                              `json:"DataVersion,omitempty"`
	Number                          *String                                                                              `json:"Number,omitempty"`
	Date                            *DateTime                                                                            `json:"Date,omitempty"`
	DeletionMark                    *Boolean                                                                             `json:"DeletionMark,omitempty"`
	Posted                          *Boolean                                                                             `json:"Posted,omitempty"`
	BankovskiiSchetKontragentaKey   *Guid                                                                                `json:"БанковскийСчетКонтрагента_Key,omitempty"`
	ValiutaDokumentaKey             *Guid                                                                                `json:"ВалютаДокумента_Key,omitempty"`
	Weight                          *Double                                                                              `json:"ВесДокумента,omitempty"`
	GruzootpravitelKey              *Guid                                                                                `json:"Грузоотправитель_Key,omitempty"`
	GruzopoluchatelKey              *Guid                                                                                `json:"Грузополучатель_Key,omitempty"`
	DataVkhodiashchegoDokumenta     *DateTime                                                                            `json:"ДатаВходящегоДокумента,omitempty"`
	DliaKontroliaUnikalnosti        *String                                                                              `json:"ДляКонтроляУникальности,omitempty"`
	DogovorKontragentaKey           *Guid                                                                                `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie               *String                                                                              `json:"ДокументОснование,omitempty"`
	DokumentPeremeshcheniiaKey      *Guid                                                                                `json:"ДокументПеремещения_Key,omitempty"`
	DokumentSozdanVIuTD             *Boolean                                                                             `json:"ДокументСозданВЮТД,omitempty"`
	KolichestvoDokumenta            *Int64                                                                               `json:"КоличествоДокумента,omitempty"`
	Comment                         *String                                                                              `json:"Комментарий,omitempty"`
	KontragentKey                   *Guid                                                                                `json:"Контрагент_Key,omitempty"`
	Koef                            *Double                                                                              `json:"Коэф,omitempty"`
	KratnostVzaimoraschetov         *Int64                                                                               `json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov             *Double                                                                              `json:"КурсВзаиморасчетов,omitempty"`
	NDSVkliuchenVStoimost           *Boolean                                                                             `json:"НДСВключенВСтоимость,omitempty"`
	NomerVkhodiashchegoDokumenta    *String                                                                              `json:"НомерВходящегоДокумента,omitempty"`
	OrganizatsiiaKey                *Guid                                                                                `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                *Guid                                                                                `json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey                *Guid                                                                                `json:"Подразделение_Key,omitempty"`
	RegistrirovatTseny              *Boolean                                                                             `json:"РегистрироватьЦены,omitempty"`
	RegistrirovatTsenyPostavshchika *Boolean                                                                             `json:"РегистрироватьЦеныПоставщика,omitempty"`
	Sdelka                          *String                                                                              `json:"Сделка,omitempty"`
	DepartmentKey                   *Guid                                                                                `json:"Склад_Key,omitempty"`
	SummaVkliuchaetNDS              *Boolean                                                                             `json:"СуммаВключаетНДС,omitempty"`
	SumOfDocument                   *Double                                                                              `json:"СуммаДокумента,omitempty"`
	TipDokumenta                    *String                                                                              `json:"ТипДокумента,omitempty"`
	TipSkidkiNatsenkiKey            *Guid                                                                                `json:"ТипСкидкиНаценки_Key,omitempty"`
	TipTsenKey                      *Guid                                                                                `json:"ТипЦен_Key,omitempty"`
	UsloviiaOplatyKey               *Guid                                                                                `json:"УсловияОплаты_Key,omitempty"`
	UchityvatNDS                    *Boolean                                                                             `json:"УчитыватьНДС,omitempty"`
	KhoziaistvennaiaOperatsiiaKey   *Guid                                                                                `json:"ХозяйственнаяОперация_Key,omitempty"`
	VystavkaOstatki                 *Boolean                                                                             `json:"ВыставкаОстатки,omitempty"`
	Goods                           *[]DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovaryRowType `json:"Товары,omitempty"`
	Uslugi                          *[]DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugiRowType `json:"Услуги,omitempty"`
	DokumentOsnovanieType           *String                                                                              `json:"ДокументОснование_Type,omitempty"`
	SdelkaType                      *String                                                                              `json:"Сделка_Type,omitempty"`
}

func (DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochku) APIEntityType() string {
	return "Document_ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку"
}
func NewDocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochku(data string, prevError error) (*DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochku, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochku)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochku(entity DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochku) (*DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochku, error) {
	return NewDocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochku(c.createEntity(entity))
}
func (c *Client) DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochku(key PrimaryDocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochku, fields []string) (*DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochku, error) {
	return NewDocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochku(c.getEntity(key, fields))
}
func (c *Client) DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkus(where Where) (*[]DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochku, error) {
	type ReturnObj struct {
		Value []DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochku `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochku(key PrimaryDocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochku, entity DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochku) (*DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochku, error) {
	return NewDocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochku(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochku(key PrimaryDocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochku) error {
	return c.removeEntity(key)
}

type DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovary struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	Weight                         *Double `json:"Вес,omitempty"`
	EdinitsaIzmereniiaKey          *Guid   `json:"ЕдиницаИзмерения_Key,omitempty"`
	KachestvoKey                   *Guid   `json:"Качество_Key,omitempty"`
	Quantity                       *Int64  `json:"Количество,omitempty"`
	Koef                           *Double `json:"Коэф,omitempty"`
	Koeffitsient                   *Double `json:"Коэффициент,omitempty"`
	ItemKey                        *Guid   `json:"Номенклатура_Key,omitempty"`
	Pasport                        *String `json:"Паспорт,omitempty"`
	ProektKey                      *Guid   `json:"Проект_Key,omitempty"`
	ProtsentRoznichnoiNatsenki     *Double `json:"ПроцентРозничнойНаценки,omitempty"`
	SizeKey                        *Guid   `json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	StavkaNDS                      *String `json:"СтавкаНДС,omitempty"`
	Sum                            *Double `json:"Сумма,omitempty"`
	SummaNDS                       *Double `json:"СуммаНДС,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Double `json:"Цена,omitempty"`
	RetailCost                     *Double `json:"ЦенаВРознице,omitempty"`
	TsenaVRoznitseGr               *Double `json:"ЦенаВРозницеГр,omitempty"`
}

func (DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovary) APIEntityType() string {
	return "Document_ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку_Товары"
}
func NewDocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovary(data string, prevError error) (*DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovary(entity DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovary) (*DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovary, error) {
	return NewDocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovary(c.createEntity(entity))
}
func (c *Client) DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovary(key PrimaryDocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovary, fields []string) (*DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovary, error) {
	return NewDocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovarys(where Where) (*[]DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovary, error) {
	type ReturnObj struct {
		Value []DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovary(key PrimaryDocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovary, entity DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovary) (*DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovary, error) {
	return NewDocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovary(key PrimaryDocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovary) error {
	return c.removeEntity(key)
}

type DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugi struct {
	Key                      Guid    `json:"Ref_Key,omitempty"`
	LineNumber               Int64   `json:"LineNumber,omitempty"`
	Quantity                 *Int64  `json:"Количество,omitempty"`
	ItemKey                  *Guid   `json:"Номенклатура_Key,omitempty"`
	NomenklaturnaiaGruppaKey *Guid   `json:"НоменклатурнаяГруппа_Key,omitempty"`
	PodrazdelenieKey         *Guid   `json:"Подразделение_Key,omitempty"`
	ProektKey                *Guid   `json:"Проект_Key,omitempty"`
	Soderzhanie              *String `json:"Содержание,omitempty"`
	StavkaNDS                *String `json:"СтавкаНДС,omitempty"`
	StatiaZatratKey          *Guid   `json:"СтатьяЗатрат_Key,omitempty"`
	Sum                      *Double `json:"Сумма,omitempty"`
	SummaNDS                 *Double `json:"СуммаНДС,omitempty"`
	Cost                     *Double `json:"Цена,omitempty"`
}

func (DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugi) APIEntityType() string {
	return "Document_ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку_Услуги"
}
func NewDocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugi(data string, prevError error) (*DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugi, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugi)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugi(entity DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugi) (*DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugi, error) {
	return NewDocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugi(c.createEntity(entity))
}
func (c *Client) DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugi(key PrimaryDocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugi, fields []string) (*DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugi, error) {
	return NewDocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugi(c.getEntity(key, fields))
}
func (c *Client) DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugis(where Where) (*[]DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugi, error) {
	type ReturnObj struct {
		Value []DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugi `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку_Услуги", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugi(key PrimaryDocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugi, entity DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugi) (*DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugi, error) {
	return NewDocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugi(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugi(key PrimaryDocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugi) error {
	return c.removeEntity(key)
}

type CatalogKassyKKM struct {
	Key                        Guid     `json:"Ref_Key,omitempty"`
	DataVersion                *String  `json:"DataVersion,omitempty"`
	Description                *String  `json:"Description,omitempty"`
	Code                       *String  `json:"Code,omitempty"`
	DeletionMark               *Boolean `json:"DeletionMark,omitempty"`
	KorrespondiruiushchiiSchet *String  `json:"КорреспондирующийСчет,omitempty"`
}

func (CatalogKassyKKM) APIEntityType() string {
	return "Catalog_КассыККМ"
}
func NewCatalogKassyKKM(data string, prevError error) (*CatalogKassyKKM, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogKassyKKM)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogKassyKKM(entity CatalogKassyKKM) (*CatalogKassyKKM, error) {
	return NewCatalogKassyKKM(c.createEntity(entity))
}
func (c *Client) CatalogKassyKKM(key PrimaryCatalogKassyKKM, fields []string) (*CatalogKassyKKM, error) {
	return NewCatalogKassyKKM(c.getEntity(key, fields))
}
func (c *Client) CatalogKassyKKMs(where Where) (*[]CatalogKassyKKM, error) {
	type ReturnObj struct {
		Value []CatalogKassyKKM `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_КассыККМ", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogKassyKKM(key PrimaryCatalogKassyKKM, entity CatalogKassyKKM) (*CatalogKassyKKM, error) {
	return NewCatalogKassyKKM(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogKassyKKM(key PrimaryCatalogKassyKKM) error {
	return c.removeEntity(key)
}

type Probe struct {
	Key            Guid     `json:"Ref_Key,omitempty"`
	DataVersion    *String  `json:"DataVersion,omitempty"`
	Description    *String  `json:"Description,omitempty"`
	Code           *String  `json:"Code,omitempty"`
	DeletionMark   *Boolean `json:"DeletionMark,omitempty"`
	MetallKey      *Guid    `json:"Металл_Key,omitempty"`
	Proba          *Double  `json:"Проба,omitempty"`
	BIdentifikator *String  `json:"Б_Идентификатор,omitempty"`
}

func (Probe) APIEntityType() string {
	return "Catalog_Пробы"
}
func NewProbe(data string, prevError error) (*Probe, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(Probe)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateProbe(entity Probe) (*Probe, error) {
	return NewProbe(c.createEntity(entity))
}
func (c *Client) Probe(key PrimaryProbe, fields []string) (*Probe, error) {
	return NewProbe(c.getEntity(key, fields))
}
func (c *Client) Probes(where Where) (*[]Probe, error) {
	type ReturnObj struct {
		Value []Probe `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Пробы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateProbe(key PrimaryProbe, entity Probe) (*Probe, error) {
	return NewProbe(c.updateEntity(key, entity))
}
func (c *Client) DeleteProbe(key PrimaryProbe) error {
	return c.removeEntity(key)
}

type CatalogGruppyDostupa struct {
	Key                                          Guid                                              `json:"Ref_Key,omitempty"`
	DataVersion                                  *String                                           `json:"DataVersion,omitempty"`
	Description                                  *String                                           `json:"Description,omitempty"`
	ParentKey                                    *Guid                                             `json:"Parent_Key,omitempty"`
	IsFolder                                     *Boolean                                          `json:"IsFolder,omitempty"`
	DeletionMark                                 *Boolean                                          `json:"DeletionMark,omitempty"`
	ProfilKey                                    *Guid                                             `json:"Профиль_Key,omitempty"`
	PolzovatelKey                                *Guid                                             `json:"Пользователь_Key,omitempty"`
	Opisanie                                     *String                                           `json:"Описание,omitempty"`
	OtvetstvennyiKey                             *Guid                                             `json:"Ответственный_Key,omitempty"`
	OsnovnaiaGruppaDostupaPostavliaemogoProfilia *Boolean                                          `json:"ОсновнаяГруппаДоступаПоставляемогоПрофиля,omitempty"`
	RazreshenieNaProsmotrZakupochnoiTseny        *Boolean                                          `json:"РазрешениеНаПросмотрЗакупочнойЦены,omitempty"`
	Polzovateli                                  *[]CatalogGruppyDostupaPolzovateliRowType         `json:"Пользователи,omitempty"`
	VidyDostupa                                  *[]CatalogGruppyDostupaVidyDostupaRowType         `json:"ВидыДоступа,omitempty"`
	ZnacheniiaDostupa                            *[]CatalogGruppyDostupaZnacheniiaDostupaRowType   `json:"ЗначенияДоступа,omitempty"`
	DostupPoPodsistemam                          *[]CatalogGruppyDostupaDostupPoPodsistemamRowType `json:"ДоступПоПодсистемам,omitempty"`
}

func (CatalogGruppyDostupa) APIEntityType() string {
	return "Catalog_ГруппыДоступа"
}
func NewCatalogGruppyDostupa(data string, prevError error) (*CatalogGruppyDostupa, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogGruppyDostupa)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogGruppyDostupa(entity CatalogGruppyDostupa) (*CatalogGruppyDostupa, error) {
	return NewCatalogGruppyDostupa(c.createEntity(entity))
}
func (c *Client) CatalogGruppyDostupa(key PrimaryCatalogGruppyDostupa, fields []string) (*CatalogGruppyDostupa, error) {
	return NewCatalogGruppyDostupa(c.getEntity(key, fields))
}
func (c *Client) CatalogGruppyDostupas(where Where) (*[]CatalogGruppyDostupa, error) {
	type ReturnObj struct {
		Value []CatalogGruppyDostupa `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ГруппыДоступа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogGruppyDostupa(key PrimaryCatalogGruppyDostupa, entity CatalogGruppyDostupa) (*CatalogGruppyDostupa, error) {
	return NewCatalogGruppyDostupa(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogGruppyDostupa(key PrimaryCatalogGruppyDostupa) error {
	return c.removeEntity(key)
}

type CatalogGruppyDostupaPolzovateli struct {
	Key            Guid    `json:"Ref_Key,omitempty"`
	LineNumber     Int64   `json:"LineNumber,omitempty"`
	Polzovatel     *String `json:"Пользователь,omitempty"`
	PolzovatelType *String `json:"Пользователь_Type,omitempty"`
}

func (CatalogGruppyDostupaPolzovateli) APIEntityType() string {
	return "Catalog_ГруппыДоступа_Пользователи"
}
func NewCatalogGruppyDostupaPolzovateli(data string, prevError error) (*CatalogGruppyDostupaPolzovateli, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogGruppyDostupaPolzovateli)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogGruppyDostupaPolzovateli(entity CatalogGruppyDostupaPolzovateli) (*CatalogGruppyDostupaPolzovateli, error) {
	return NewCatalogGruppyDostupaPolzovateli(c.createEntity(entity))
}
func (c *Client) CatalogGruppyDostupaPolzovateli(key PrimaryCatalogGruppyDostupaPolzovateli, fields []string) (*CatalogGruppyDostupaPolzovateli, error) {
	return NewCatalogGruppyDostupaPolzovateli(c.getEntity(key, fields))
}
func (c *Client) CatalogGruppyDostupaPolzovatelis(where Where) (*[]CatalogGruppyDostupaPolzovateli, error) {
	type ReturnObj struct {
		Value []CatalogGruppyDostupaPolzovateli `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ГруппыДоступа_Пользователи", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogGruppyDostupaPolzovateli(key PrimaryCatalogGruppyDostupaPolzovateli, entity CatalogGruppyDostupaPolzovateli) (*CatalogGruppyDostupaPolzovateli, error) {
	return NewCatalogGruppyDostupaPolzovateli(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogGruppyDostupaPolzovateli(key PrimaryCatalogGruppyDostupaPolzovateli) error {
	return c.removeEntity(key)
}

type CatalogGruppyDostupaVidyDostupa struct {
	Key            Guid     `json:"Ref_Key,omitempty"`
	LineNumber     Int64    `json:"LineNumber,omitempty"`
	VidDostupa     *String  `json:"ВидДоступа,omitempty"`
	VseRazresheny  *Boolean `json:"ВсеРазрешены,omitempty"`
	VidDostupaType *String  `json:"ВидДоступа_Type,omitempty"`
}

func (CatalogGruppyDostupaVidyDostupa) APIEntityType() string {
	return "Catalog_ГруппыДоступа_ВидыДоступа"
}
func NewCatalogGruppyDostupaVidyDostupa(data string, prevError error) (*CatalogGruppyDostupaVidyDostupa, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogGruppyDostupaVidyDostupa)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogGruppyDostupaVidyDostupa(entity CatalogGruppyDostupaVidyDostupa) (*CatalogGruppyDostupaVidyDostupa, error) {
	return NewCatalogGruppyDostupaVidyDostupa(c.createEntity(entity))
}
func (c *Client) CatalogGruppyDostupaVidyDostupa(key PrimaryCatalogGruppyDostupaVidyDostupa, fields []string) (*CatalogGruppyDostupaVidyDostupa, error) {
	return NewCatalogGruppyDostupaVidyDostupa(c.getEntity(key, fields))
}
func (c *Client) CatalogGruppyDostupaVidyDostupas(where Where) (*[]CatalogGruppyDostupaVidyDostupa, error) {
	type ReturnObj struct {
		Value []CatalogGruppyDostupaVidyDostupa `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ГруппыДоступа_ВидыДоступа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogGruppyDostupaVidyDostupa(key PrimaryCatalogGruppyDostupaVidyDostupa, entity CatalogGruppyDostupaVidyDostupa) (*CatalogGruppyDostupaVidyDostupa, error) {
	return NewCatalogGruppyDostupaVidyDostupa(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogGruppyDostupaVidyDostupa(key PrimaryCatalogGruppyDostupaVidyDostupa) error {
	return c.removeEntity(key)
}

type CatalogGruppyDostupaZnacheniiaDostupa struct {
	Key                  Guid    `json:"Ref_Key,omitempty"`
	LineNumber           Int64   `json:"LineNumber,omitempty"`
	VidDostupa           *String `json:"ВидДоступа,omitempty"`
	ZnachenieDostupa     *String `json:"ЗначениеДоступа,omitempty"`
	VidDostupaType       *String `json:"ВидДоступа_Type,omitempty"`
	ZnachenieDostupaType *String `json:"ЗначениеДоступа_Type,omitempty"`
}

func (CatalogGruppyDostupaZnacheniiaDostupa) APIEntityType() string {
	return "Catalog_ГруппыДоступа_ЗначенияДоступа"
}
func NewCatalogGruppyDostupaZnacheniiaDostupa(data string, prevError error) (*CatalogGruppyDostupaZnacheniiaDostupa, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogGruppyDostupaZnacheniiaDostupa)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogGruppyDostupaZnacheniiaDostupa(entity CatalogGruppyDostupaZnacheniiaDostupa) (*CatalogGruppyDostupaZnacheniiaDostupa, error) {
	return NewCatalogGruppyDostupaZnacheniiaDostupa(c.createEntity(entity))
}
func (c *Client) CatalogGruppyDostupaZnacheniiaDostupa(key PrimaryCatalogGruppyDostupaZnacheniiaDostupa, fields []string) (*CatalogGruppyDostupaZnacheniiaDostupa, error) {
	return NewCatalogGruppyDostupaZnacheniiaDostupa(c.getEntity(key, fields))
}
func (c *Client) CatalogGruppyDostupaZnacheniiaDostupas(where Where) (*[]CatalogGruppyDostupaZnacheniiaDostupa, error) {
	type ReturnObj struct {
		Value []CatalogGruppyDostupaZnacheniiaDostupa `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ГруппыДоступа_ЗначенияДоступа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogGruppyDostupaZnacheniiaDostupa(key PrimaryCatalogGruppyDostupaZnacheniiaDostupa, entity CatalogGruppyDostupaZnacheniiaDostupa) (*CatalogGruppyDostupaZnacheniiaDostupa, error) {
	return NewCatalogGruppyDostupaZnacheniiaDostupa(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogGruppyDostupaZnacheniiaDostupa(key PrimaryCatalogGruppyDostupaZnacheniiaDostupa) error {
	return c.removeEntity(key)
}

type CatalogGruppyDostupaDostupPoPodsistemam struct {
	Key            Guid     `json:"Ref_Key,omitempty"`
	LineNumber     Int64    `json:"LineNumber,omitempty"`
	ImiaPodsistemy *String  `json:"ИмяПодсистемы,omitempty"`
	ImiaObieekta   *String  `json:"ИмяОбъекта,omitempty"`
	Prosmotr       *Boolean `json:"Просмотр,omitempty"`
	Redaktirovanie *Boolean `json:"Редактирование,omitempty"`
	Pechat         *Boolean `json:"Печать,omitempty"`
	PokazVersii    *Boolean `json:"ПоказВерсии,omitempty"`
}

func (CatalogGruppyDostupaDostupPoPodsistemam) APIEntityType() string {
	return "Catalog_ГруппыДоступа_ДоступПоПодсистемам"
}
func NewCatalogGruppyDostupaDostupPoPodsistemam(data string, prevError error) (*CatalogGruppyDostupaDostupPoPodsistemam, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogGruppyDostupaDostupPoPodsistemam)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogGruppyDostupaDostupPoPodsistemam(entity CatalogGruppyDostupaDostupPoPodsistemam) (*CatalogGruppyDostupaDostupPoPodsistemam, error) {
	return NewCatalogGruppyDostupaDostupPoPodsistemam(c.createEntity(entity))
}
func (c *Client) CatalogGruppyDostupaDostupPoPodsistemam(key PrimaryCatalogGruppyDostupaDostupPoPodsistemam, fields []string) (*CatalogGruppyDostupaDostupPoPodsistemam, error) {
	return NewCatalogGruppyDostupaDostupPoPodsistemam(c.getEntity(key, fields))
}
func (c *Client) CatalogGruppyDostupaDostupPoPodsistemams(where Where) (*[]CatalogGruppyDostupaDostupPoPodsistemam, error) {
	type ReturnObj struct {
		Value []CatalogGruppyDostupaDostupPoPodsistemam `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ГруппыДоступа_ДоступПоПодсистемам", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogGruppyDostupaDostupPoPodsistemam(key PrimaryCatalogGruppyDostupaDostupPoPodsistemam, entity CatalogGruppyDostupaDostupPoPodsistemam) (*CatalogGruppyDostupaDostupPoPodsistemam, error) {
	return NewCatalogGruppyDostupaDostupPoPodsistemam(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogGruppyDostupaDostupPoPodsistemam(key PrimaryCatalogGruppyDostupaDostupPoPodsistemam) error {
	return c.removeEntity(key)
}

type CatalogVidyKontaktnoiInformatsii struct {
	Key                              Guid     `json:"Ref_Key,omitempty"`
	DataVersion                      *String  `json:"DataVersion,omitempty"`
	Description                      *String  `json:"Description,omitempty"`
	Code                             *String  `json:"Code,omitempty"`
	DeletionMark                     *Boolean `json:"DeletionMark,omitempty"`
	VidObieektaKontaktnoiInformatsii *String  `json:"ВидОбъектаКонтактнойИнформации,omitempty"`
	Tip                              *String  `json:"Тип,omitempty"`
}

func (CatalogVidyKontaktnoiInformatsii) APIEntityType() string {
	return "Catalog_ВидыКонтактнойИнформации"
}
func NewCatalogVidyKontaktnoiInformatsii(data string, prevError error) (*CatalogVidyKontaktnoiInformatsii, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogVidyKontaktnoiInformatsii)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogVidyKontaktnoiInformatsii(entity CatalogVidyKontaktnoiInformatsii) (*CatalogVidyKontaktnoiInformatsii, error) {
	return NewCatalogVidyKontaktnoiInformatsii(c.createEntity(entity))
}
func (c *Client) CatalogVidyKontaktnoiInformatsii(key PrimaryCatalogVidyKontaktnoiInformatsii, fields []string) (*CatalogVidyKontaktnoiInformatsii, error) {
	return NewCatalogVidyKontaktnoiInformatsii(c.getEntity(key, fields))
}
func (c *Client) CatalogVidyKontaktnoiInformatsiis(where Where) (*[]CatalogVidyKontaktnoiInformatsii, error) {
	type ReturnObj struct {
		Value []CatalogVidyKontaktnoiInformatsii `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ВидыКонтактнойИнформации", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogVidyKontaktnoiInformatsii(key PrimaryCatalogVidyKontaktnoiInformatsii, entity CatalogVidyKontaktnoiInformatsii) (*CatalogVidyKontaktnoiInformatsii, error) {
	return NewCatalogVidyKontaktnoiInformatsii(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogVidyKontaktnoiInformatsii(key PrimaryCatalogVidyKontaktnoiInformatsii) error {
	return c.removeEntity(key)
}

type CatalogNomenklaturnyeGruppy struct {
	Key                           Guid     `json:"Ref_Key,omitempty"`
	DataVersion                   *String  `json:"DataVersion,omitempty"`
	Description                   *String  `json:"Description,omitempty"`
	Code                          *String  `json:"Code,omitempty"`
	DeletionMark                  *Boolean `json:"DeletionMark,omitempty"`
	BazovaiaEdinitsaIzmereniiaKey *Guid    `json:"БазоваяЕдиницаИзмерения_Key,omitempty"`
	StavkaNDS                     *String  `json:"СтавкаНДС,omitempty"`
}

func (CatalogNomenklaturnyeGruppy) APIEntityType() string {
	return "Catalog_НоменклатурныеГруппы"
}
func NewCatalogNomenklaturnyeGruppy(data string, prevError error) (*CatalogNomenklaturnyeGruppy, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogNomenklaturnyeGruppy)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogNomenklaturnyeGruppy(entity CatalogNomenklaturnyeGruppy) (*CatalogNomenklaturnyeGruppy, error) {
	return NewCatalogNomenklaturnyeGruppy(c.createEntity(entity))
}
func (c *Client) CatalogNomenklaturnyeGruppy(key PrimaryCatalogNomenklaturnyeGruppy, fields []string) (*CatalogNomenklaturnyeGruppy, error) {
	return NewCatalogNomenklaturnyeGruppy(c.getEntity(key, fields))
}
func (c *Client) CatalogNomenklaturnyeGruppys(where Where) (*[]CatalogNomenklaturnyeGruppy, error) {
	type ReturnObj struct {
		Value []CatalogNomenklaturnyeGruppy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НоменклатурныеГруппы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogNomenklaturnyeGruppy(key PrimaryCatalogNomenklaturnyeGruppy, entity CatalogNomenklaturnyeGruppy) (*CatalogNomenklaturnyeGruppy, error) {
	return NewCatalogNomenklaturnyeGruppy(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogNomenklaturnyeGruppy(key PrimaryCatalogNomenklaturnyeGruppy) error {
	return c.removeEntity(key)
}

type DocumentReestrSchetov struct {
	Key                     Guid                                  `json:"Ref_Key,omitempty"`
	DataVersion             *String                               `json:"DataVersion,omitempty"`
	Number                  *String                               `json:"Number,omitempty"`
	Date                    *DateTime                             `json:"Date,omitempty"`
	DeletionMark            *Boolean                              `json:"DeletionMark,omitempty"`
	Posted                  *Boolean                              `json:"Posted,omitempty"`
	DataAkkreditiva         *DateTime                             `json:"ДатаАккредитива,omitempty"`
	DataZakrytiia           *DateTime                             `json:"ДатаЗакрытия,omitempty"`
	DokumentOsnovanieKey    *Guid                                 `json:"ДокументОснование_Key,omitempty"`
	IspolniaiushchiiBankKey *Guid                                 `json:"ИсполняющийБанк_Key,omitempty"`
	Comment                 *String                               `json:"Комментарий,omitempty"`
	KontragentKey           *Guid                                 `json:"Контрагент_Key,omitempty"`
	NomerAkkreditiva        *String                               `json:"НомерАккредитива,omitempty"`
	OrganizatsiiaKey        *Guid                                 `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey        *Guid                                 `json:"Ответственный_Key,omitempty"`
	SummaAkkreditiva        *Double                               `json:"СуммаАккредитива,omitempty"`
	SchetKontragentaKey     *Guid                                 `json:"СчетКонтрагента_Key,omitempty"`
	SchetOrganizatsiiKey    *Guid                                 `json:"СчетОрганизации_Key,omitempty"`
	Reestr                  *[]DocumentReestrSchetovReestrRowType `json:"Реестр,omitempty"`
}

func (DocumentReestrSchetov) APIEntityType() string {
	return "Document_РеестрСчетов"
}
func NewDocumentReestrSchetov(data string, prevError error) (*DocumentReestrSchetov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentReestrSchetov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentReestrSchetov(entity DocumentReestrSchetov) (*DocumentReestrSchetov, error) {
	return NewDocumentReestrSchetov(c.createEntity(entity))
}
func (c *Client) DocumentReestrSchetov(key PrimaryDocumentReestrSchetov, fields []string) (*DocumentReestrSchetov, error) {
	return NewDocumentReestrSchetov(c.getEntity(key, fields))
}
func (c *Client) DocumentReestrSchetovs(where Where) (*[]DocumentReestrSchetov, error) {
	type ReturnObj struct {
		Value []DocumentReestrSchetov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_РеестрСчетов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentReestrSchetov(key PrimaryDocumentReestrSchetov, entity DocumentReestrSchetov) (*DocumentReestrSchetov, error) {
	return NewDocumentReestrSchetov(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentReestrSchetov(key PrimaryDocumentReestrSchetov) error {
	return c.removeEntity(key)
}

type DocumentReestrSchetovReestr struct {
	Key            Guid      `json:"Ref_Key,omitempty"`
	LineNumber     Int64     `json:"LineNumber,omitempty"`
	VidTransporta  *String   `json:"ВидТранспорта,omitempty"`
	DataOtgruzki   *DateTime `json:"ДатаОтгрузки,omitempty"`
	NomerDokumenta *String   `json:"НомерДокумента,omitempty"`
	Sum            *Double   `json:"Сумма,omitempty"`
}

func (DocumentReestrSchetovReestr) APIEntityType() string {
	return "Document_РеестрСчетов_Реестр"
}
func NewDocumentReestrSchetovReestr(data string, prevError error) (*DocumentReestrSchetovReestr, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentReestrSchetovReestr)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentReestrSchetovReestr(entity DocumentReestrSchetovReestr) (*DocumentReestrSchetovReestr, error) {
	return NewDocumentReestrSchetovReestr(c.createEntity(entity))
}
func (c *Client) DocumentReestrSchetovReestr(key PrimaryDocumentReestrSchetovReestr, fields []string) (*DocumentReestrSchetovReestr, error) {
	return NewDocumentReestrSchetovReestr(c.getEntity(key, fields))
}
func (c *Client) DocumentReestrSchetovReestrs(where Where) (*[]DocumentReestrSchetovReestr, error) {
	type ReturnObj struct {
		Value []DocumentReestrSchetovReestr `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_РеестрСчетов_Реестр", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentReestrSchetovReestr(key PrimaryDocumentReestrSchetovReestr, entity DocumentReestrSchetovReestr) (*DocumentReestrSchetovReestr, error) {
	return NewDocumentReestrSchetovReestr(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentReestrSchetovReestr(key PrimaryDocumentReestrSchetovReestr) error {
	return c.removeEntity(key)
}

type DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiu struct {
	Key                   Guid                                                                `json:"Ref_Key,omitempty"`
	DataVersion           *String                                                             `json:"DataVersion,omitempty"`
	Number                *String                                                             `json:"Number,omitempty"`
	Date                  *DateTime                                                           `json:"Date,omitempty"`
	DeletionMark          *Boolean                                                            `json:"DeletionMark,omitempty"`
	Posted                *Boolean                                                            `json:"Posted,omitempty"`
	DogovorKontragentaKey *Guid                                                               `json:"ДоговорКонтрагента_Key,omitempty"`
	Comment               *String                                                             `json:"Комментарий,omitempty"`
	KontragentKey         *Guid                                                               `json:"Контрагент_Key,omitempty"`
	OrganizatsiiaKey      *Guid                                                               `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey      *Guid                                                               `json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey      *Guid                                                               `json:"Подразделение_Key,omitempty"`
	Sdelka                *String                                                             `json:"Сделка,omitempty"`
	Goods                 *[]DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovaryRowType `json:"Товары,omitempty"`
	SdelkaType            *String                                                             `json:"Сделка_Type,omitempty"`
}

func (DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiu) APIEntityType() string {
	return "Document_ИнвентаризацияТоваровОтданныхНаКомиссию"
}
func NewDocumentInventarizatsiiaTovarovOtdannykhNaKomissiiu(data string, prevError error) (*DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiu, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiu)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentInventarizatsiiaTovarovOtdannykhNaKomissiiu(entity DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiu) (*DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiu, error) {
	return NewDocumentInventarizatsiiaTovarovOtdannykhNaKomissiiu(c.createEntity(entity))
}
func (c *Client) DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiu(key PrimaryDocumentInventarizatsiiaTovarovOtdannykhNaKomissiiu, fields []string) (*DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiu, error) {
	return NewDocumentInventarizatsiiaTovarovOtdannykhNaKomissiiu(c.getEntity(key, fields))
}
func (c *Client) DocumentInventarizatsiiaTovarovOtdannykhNaKomissiius(where Where) (*[]DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiu, error) {
	type ReturnObj struct {
		Value []DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiu `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ИнвентаризацияТоваровОтданныхНаКомиссию", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentInventarizatsiiaTovarovOtdannykhNaKomissiiu(key PrimaryDocumentInventarizatsiiaTovarovOtdannykhNaKomissiiu, entity DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiu) (*DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiu, error) {
	return NewDocumentInventarizatsiiaTovarovOtdannykhNaKomissiiu(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentInventarizatsiiaTovarovOtdannykhNaKomissiiu(key PrimaryDocumentInventarizatsiiaTovarovOtdannykhNaKomissiiu) error {
	return c.removeEntity(key)
}

type DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovary struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	Weight                         *Double `json:"Вес,omitempty"`
	VesUchet                       *Double `json:"ВесУчет,omitempty"`
	Quantity                       *Int64  `json:"Количество,omitempty"`
	KolichestvoUchet               *Int64  `json:"КоличествоУчет,omitempty"`
	ItemKey                        *Guid   `json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid   `json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
}

func (DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovary) APIEntityType() string {
	return "Document_ИнвентаризацияТоваровОтданныхНаКомиссию_Товары"
}
func NewDocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovary(data string, prevError error) (*DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovary(entity DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovary) (*DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovary, error) {
	return NewDocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovary(c.createEntity(entity))
}
func (c *Client) DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovary(key PrimaryDocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovary, fields []string) (*DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovary, error) {
	return NewDocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovarys(where Where) (*[]DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovary, error) {
	type ReturnObj struct {
		Value []DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ИнвентаризацияТоваровОтданныхНаКомиссию_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovary(key PrimaryDocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovary, entity DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovary) (*DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovary, error) {
	return NewDocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovary(key PrimaryDocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovary) error {
	return c.removeEntity(key)
}

type CatalogKlassifikatorStranMira struct {
	Key                Guid     `json:"Ref_Key,omitempty"`
	DataVersion        *String  `json:"DataVersion,omitempty"`
	Description        *String  `json:"Description,omitempty"`
	Code               *String  `json:"Code,omitempty"`
	DeletionMark       *Boolean `json:"DeletionMark,omitempty"`
	NaimenovaniePolnoe *String  `json:"НаименованиеПолное,omitempty"`
	KodAlfa2           *String  `json:"КодАльфа2,omitempty"`
}

func (CatalogKlassifikatorStranMira) APIEntityType() string {
	return "Catalog_КлассификаторСтранМира"
}
func NewCatalogKlassifikatorStranMira(data string, prevError error) (*CatalogKlassifikatorStranMira, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogKlassifikatorStranMira)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogKlassifikatorStranMira(entity CatalogKlassifikatorStranMira) (*CatalogKlassifikatorStranMira, error) {
	return NewCatalogKlassifikatorStranMira(c.createEntity(entity))
}
func (c *Client) CatalogKlassifikatorStranMira(key PrimaryCatalogKlassifikatorStranMira, fields []string) (*CatalogKlassifikatorStranMira, error) {
	return NewCatalogKlassifikatorStranMira(c.getEntity(key, fields))
}
func (c *Client) CatalogKlassifikatorStranMiras(where Where) (*[]CatalogKlassifikatorStranMira, error) {
	type ReturnObj struct {
		Value []CatalogKlassifikatorStranMira `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_КлассификаторСтранМира", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogKlassifikatorStranMira(key PrimaryCatalogKlassifikatorStranMira, entity CatalogKlassifikatorStranMira) (*CatalogKlassifikatorStranMira, error) {
	return NewCatalogKlassifikatorStranMira(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogKlassifikatorStranMira(key PrimaryCatalogKlassifikatorStranMira) error {
	return c.removeEntity(key)
}

type CatalogKlassifikatorEdinitsIzmereniia struct {
	Key                         Guid     `json:"Ref_Key,omitempty"`
	DataVersion                 *String  `json:"DataVersion,omitempty"`
	Description                 *String  `json:"Description,omitempty"`
	Code                        *String  `json:"Code,omitempty"`
	DeletionMark                *Boolean `json:"DeletionMark,omitempty"`
	NaimenovaniePolnoe          *String  `json:"НаименованиеПолное,omitempty"`
	MezhdunarodnoeSokrashchenie *String  `json:"МеждународноеСокращение,omitempty"`
	TipEdinitsyIzmereniia       *String  `json:"ТипЕдиницыИзмерения,omitempty"`
	BIdentifikator              *String  `json:"Б_Идентификатор,omitempty"`
}

func (CatalogKlassifikatorEdinitsIzmereniia) APIEntityType() string {
	return "Catalog_КлассификаторЕдиницИзмерения"
}
func NewCatalogKlassifikatorEdinitsIzmereniia(data string, prevError error) (*CatalogKlassifikatorEdinitsIzmereniia, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogKlassifikatorEdinitsIzmereniia)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogKlassifikatorEdinitsIzmereniia(entity CatalogKlassifikatorEdinitsIzmereniia) (*CatalogKlassifikatorEdinitsIzmereniia, error) {
	return NewCatalogKlassifikatorEdinitsIzmereniia(c.createEntity(entity))
}
func (c *Client) CatalogKlassifikatorEdinitsIzmereniia(key PrimaryCatalogKlassifikatorEdinitsIzmereniia, fields []string) (*CatalogKlassifikatorEdinitsIzmereniia, error) {
	return NewCatalogKlassifikatorEdinitsIzmereniia(c.getEntity(key, fields))
}
func (c *Client) CatalogKlassifikatorEdinitsIzmereniias(where Where) (*[]CatalogKlassifikatorEdinitsIzmereniia, error) {
	type ReturnObj struct {
		Value []CatalogKlassifikatorEdinitsIzmereniia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_КлассификаторЕдиницИзмерения", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogKlassifikatorEdinitsIzmereniia(key PrimaryCatalogKlassifikatorEdinitsIzmereniia, entity CatalogKlassifikatorEdinitsIzmereniia) (*CatalogKlassifikatorEdinitsIzmereniia, error) {
	return NewCatalogKlassifikatorEdinitsIzmereniia(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogKlassifikatorEdinitsIzmereniia(key PrimaryCatalogKlassifikatorEdinitsIzmereniia) error {
	return c.removeEntity(key)
}

type CatalogNastroikiRMK struct {
	Key                                                          Guid                                                   `json:"Ref_Key,omitempty"`
	DataVersion                                                  *String                                                `json:"DataVersion,omitempty"`
	Description                                                  *String                                                `json:"Description,omitempty"`
	Code                                                         *String                                                `json:"Code,omitempty"`
	DeletionMark                                                 *Boolean                                               `json:"DeletionMark,omitempty"`
	VidAvtorizatsii                                              *String                                                `json:"ВидАвторизации,omitempty"`
	VidOplaty2                                                   *String                                                `json:"ВидОплаты2,omitempty"`
	VidOplaty2PoUmolchaniiuKey                                   *Guid                                                  `json:"ВидОплаты2ПоУмолчанию_Key,omitempty"`
	VidOplaty3                                                   *String                                                `json:"ВидОплаты3,omitempty"`
	VidOplaty3PoUmolchaniiuKey                                   *Guid                                                  `json:"ВидОплаты3ПоУмолчанию_Key,omitempty"`
	VidOplaty4                                                   *String                                                `json:"ВидОплаты4,omitempty"`
	VidOplaty4PoUmolchaniiuKey                                   *Guid                                                  `json:"ВидОплаты4ПоУмолчанию_Key,omitempty"`
	VyvoditSpisokSertifikatovPriOplate                           *Boolean                                               `json:"ВыводитьСписокСертификатовПриОплате,omitempty"`
	ZakryvatPodborPriVyboreTovara                                *Boolean                                               `json:"ЗакрыватьПодборПриВыбореТовара,omitempty"`
	ZapretitProdazhuNizheSebestoimosti                           *Boolean                                               `json:"ЗапретитьПродажуНижеСебестоимости,omitempty"`
	IntervalProverkiOtvetaNaZaprosProverkiSertifikata            *Int16                                                 `json:"ИнтервалПроверкиОтветаНаЗапросПроверкиСертификата,omitempty"`
	IspolzovatAvtomaticheskieSkidki                              *Boolean                                               `json:"ИспользоватьАвтоматическиеСкидки,omitempty"`
	IspolzovatVidOplaty2                                         *Boolean                                               `json:"ИспользоватьВидОплаты2,omitempty"`
	IspolzovatVidOplaty3                                         *Boolean                                               `json:"ИспользоватьВидОплаты3,omitempty"`
	IspolzovatVidOplaty4                                         *Boolean                                               `json:"ИспользоватьВидОплаты4,omitempty"`
	IspolzovatVidOplatySertifikatom                              *Boolean                                               `json:"ИспользоватьВидОплатыСертификатом,omitempty"`
	IspolzovatObmenStarykhIzdeliiNaNovye                         *Boolean                                               `json:"ИспользоватьОбменСтарыхИзделийНаНовые,omitempty"`
	IspolzovatOplatuSertifikatami                                *Boolean                                               `json:"ИспользоватьОплатуСертификатами,omitempty"`
	IspolzovatRuchnyeSkidki                                      *Boolean                                               `json:"ИспользоватьРучныеСкидки,omitempty"`
	KontrolirovatOstatokPriProvedenii                            *Boolean                                               `json:"КонтролироватьОстатокПриПроведении,omitempty"`
	MaksimalnoeVremiaOzhidaniiaOtvetaNaZaprosProverkiSertifikata *Int16                                                 `json:"МаксимальноеВремяОжиданияОтветаНаЗапросПроверкиСертификата,omitempty"`
	NaimenovanieSummyDoplatyZaTovaryPoSertifikatam               *String                                                `json:"НаименованиеСуммыДоплатыЗаТоварыПоСертификатам,omitempty"`
	NastroikiObmenaDannymiKey                                    *Guid                                                  `json:"НастройкиОбменаДанными_Key,omitempty"`
	OrganizatsiiaKey                                             *Guid                                                  `json:"Организация_Key,omitempty"`
	OtobrazhatKlaviaturuPriZapuske                               *Boolean                                               `json:"ОтображатьКлавиатуруПриЗапуске,omitempty"`
	PechatatVtoroiEkzempliarTovarnogoCheka                       *Boolean                                               `json:"ПечататьВторойЭкземплярТоварногоЧека,omitempty"`
	PechatatVtoroiEkzempliarTovarnogoChekaNaPrintere             *Boolean                                               `json:"ПечататьВторойЭкземплярТоварногоЧекаНаПринтере,omitempty"`
	PechatatImiaKassira                                          *Boolean                                               `json:"ПечататьИмяКассира,omitempty"`
	PechatatNazvanieDiskontnoiKarty                              *Boolean                                               `json:"ПечататьНазваниеДисконтнойКарты,omitempty"`
	PechatatNazvaniePlatezhnoiKarty                              *Boolean                                               `json:"ПечататьНазваниеПлатежнойКарты,omitempty"`
	PechatatNumeratsiiuPozitsii                                  *Boolean                                               `json:"ПечататьНумерациюПозиций,omitempty"`
	PechatatSummuNachislennogoBonusa                             *Boolean                                               `json:"ПечататьСуммуНачисленногоБонуса,omitempty"`
	PechatatTovarnyiChekNaPrintere                               *Boolean                                               `json:"ПечататьТоварныйЧекНаПринтере,omitempty"`
	PechatatTovarnyiChekPriRegistratsiiProdazhi                  *Boolean                                               `json:"ПечататьТоварныйЧекПриРегистрацииПродажи,omitempty"`
	PechatatShtrikhkodPriRegistratsiiProdazhi                    *Boolean                                               `json:"ПечататьШтрихкодПриРегистрацииПродажи,omitempty"`
	PoriadokOkrugleniiaSumm                                      *String                                                `json:"ПорядокОкругленияСумм,omitempty"`
	PriVozvrateRaspechatyvatPaketDokumentov                      *Boolean                                               `json:"ПриВозвратеРаспечатыватьПакетДокументов,omitempty"`
	PriVozvrateRaspechatyvatPaketDokumentovNaPrintere            *Boolean                                               `json:"ПриВозвратеРаспечатыватьПакетДокументовНаПринтере,omitempty"`
	ProtsentOgranicheniiaSummySkidki                             *Double                                                `json:"ПроцентОграниченияСуммыСкидки,omitempty"`
	RezhimProverkiSertifikatov                                   *Int16                                                 `json:"РежимПроверкиСертификатов,omitempty"`
	DepartmentKey                                                *Guid                                                  `json:"Склад_Key,omitempty"`
	SposobPrimeneniiaNeskolkikhSkidok                            *String                                                `json:"СпособПримененияНесколькихСкидок,omitempty"`
	ShablonChekaKey                                              *Guid                                                  `json:"ШаблонЧека_Key,omitempty"`
	IspolzovatAvtomaticheskieSkidkiMarketing                     *Boolean                                               `json:"ИспользоватьАвтоматическиеСкидкиМаркетинг,omitempty"`
	KassaKKMKey                                                  *Guid                                                  `json:"КассаККМ_Key,omitempty"`
	IspolzovatProdazhuUslug                                      *Boolean                                               `json:"ИспользоватьПродажуУслуг,omitempty"`
	TrebovatVvodPasportnykhDannykh                               *Boolean                                               `json:"ТребоватьВводПаспортныхДанных,omitempty"`
	ZapolniatAnketuKlientaPriProdazhe                            *Boolean                                               `json:"ЗаполнятьАнкетуКлиентаПриПродаже,omitempty"`
	ZapolniatAnketuKlientaPriSkupke                              *Boolean                                               `json:"ЗаполнятьАнкетуКлиентаПриСкупке,omitempty"`
	PechatatTovarnyiChekPriSkupke                                *Boolean                                               `json:"ПечататьТоварныйЧекПриСкупке,omitempty"`
	PechatatSkupochnuiuKvitantsiiuPriSkupke                      *Boolean                                               `json:"ПечататьСкупочнуюКвитанциюПриСкупке,omitempty"`
	KolichestvoEkzempliarovTovarnogoChekaPriSkupke               *Int16                                                 `json:"КоличествоЭкземпляровТоварногоЧекаПриСкупке,omitempty"`
	KolichestvoEkzempliarovSkupochnoiKvitantsiiPriSkupke         *Int16                                                 `json:"КоличествоЭкземпляровСкупочнойКвитанцииПриСкупке,omitempty"`
	VidProbitiiaSkupki                                           *String                                                `json:"ВидПробитияСкупки,omitempty"`
	RazreshitZamenuKarty                                         *Boolean                                               `json:"РазрешитьЗаменуКарты,omitempty"`
	RazreshitVozvratNeDenVDenPoCheku                             *Boolean                                               `json:"РазрешитьВозвратНеДеньВДеньПоЧеку,omitempty"`
	PeredachaNomenklaturyKlientuPriPolnomPogasheniiRassrochki    *Boolean                                               `json:"ПередачаНоменклатурыКлиентуПриПолномПогашенииРассрочки,omitempty"`
	NeVyvoditInformatsiiuOKomitenteVChek                         *Boolean                                               `json:"НеВыводитьИнформациюОКомитентеВЧек,omitempty"`
	RazreshitVozvratNalichnymiPriProdazhePoBeznalichnomuRaschetu *Boolean                                               `json:"РазрешитьВозвратНаличнымиПриПродажеПоБезналичномуРасчету,omitempty"`
	PoriadokPrimeneniiaSkidok                                    *[]CatalogNastroikiRMKPoriadokPrimeneniiaSkidokRowType `json:"ПорядокПримененияСкидок,omitempty"`
	SostavNaimenovaniia                                          *[]CatalogNastroikiRMKSostavNaimenovaniiaRowType       `json:"СоставНаименования,omitempty"`
}

func (CatalogNastroikiRMK) APIEntityType() string {
	return "Catalog_НастройкиРМК"
}
func NewCatalogNastroikiRMK(data string, prevError error) (*CatalogNastroikiRMK, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogNastroikiRMK)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogNastroikiRMK(entity CatalogNastroikiRMK) (*CatalogNastroikiRMK, error) {
	return NewCatalogNastroikiRMK(c.createEntity(entity))
}
func (c *Client) CatalogNastroikiRMK(key PrimaryCatalogNastroikiRMK, fields []string) (*CatalogNastroikiRMK, error) {
	return NewCatalogNastroikiRMK(c.getEntity(key, fields))
}
func (c *Client) CatalogNastroikiRMKs(where Where) (*[]CatalogNastroikiRMK, error) {
	type ReturnObj struct {
		Value []CatalogNastroikiRMK `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкиРМК", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogNastroikiRMK(key PrimaryCatalogNastroikiRMK, entity CatalogNastroikiRMK) (*CatalogNastroikiRMK, error) {
	return NewCatalogNastroikiRMK(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogNastroikiRMK(key PrimaryCatalogNastroikiRMK) error {
	return c.removeEntity(key)
}

type CatalogNastroikiRMKPoriadokPrimeneniiaSkidok struct {
	Key           Guid    `json:"Ref_Key,omitempty"`
	LineNumber    Int64   `json:"LineNumber,omitempty"`
	UslovieSkidki *String `json:"УсловиеСкидки,omitempty"`
}

func (CatalogNastroikiRMKPoriadokPrimeneniiaSkidok) APIEntityType() string {
	return "Catalog_НастройкиРМК_ПорядокПримененияСкидок"
}
func NewCatalogNastroikiRMKPoriadokPrimeneniiaSkidok(data string, prevError error) (*CatalogNastroikiRMKPoriadokPrimeneniiaSkidok, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogNastroikiRMKPoriadokPrimeneniiaSkidok)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogNastroikiRMKPoriadokPrimeneniiaSkidok(entity CatalogNastroikiRMKPoriadokPrimeneniiaSkidok) (*CatalogNastroikiRMKPoriadokPrimeneniiaSkidok, error) {
	return NewCatalogNastroikiRMKPoriadokPrimeneniiaSkidok(c.createEntity(entity))
}
func (c *Client) CatalogNastroikiRMKPoriadokPrimeneniiaSkidok(key PrimaryCatalogNastroikiRMKPoriadokPrimeneniiaSkidok, fields []string) (*CatalogNastroikiRMKPoriadokPrimeneniiaSkidok, error) {
	return NewCatalogNastroikiRMKPoriadokPrimeneniiaSkidok(c.getEntity(key, fields))
}
func (c *Client) CatalogNastroikiRMKPoriadokPrimeneniiaSkidoks(where Where) (*[]CatalogNastroikiRMKPoriadokPrimeneniiaSkidok, error) {
	type ReturnObj struct {
		Value []CatalogNastroikiRMKPoriadokPrimeneniiaSkidok `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкиРМК_ПорядокПримененияСкидок", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogNastroikiRMKPoriadokPrimeneniiaSkidok(key PrimaryCatalogNastroikiRMKPoriadokPrimeneniiaSkidok, entity CatalogNastroikiRMKPoriadokPrimeneniiaSkidok) (*CatalogNastroikiRMKPoriadokPrimeneniiaSkidok, error) {
	return NewCatalogNastroikiRMKPoriadokPrimeneniiaSkidok(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogNastroikiRMKPoriadokPrimeneniiaSkidok(key PrimaryCatalogNastroikiRMKPoriadokPrimeneniiaSkidok) error {
	return c.removeEntity(key)
}

type CatalogNastroikiRMKSostavNaimenovaniia struct {
	Key                  Guid    `json:"Ref_Key,omitempty"`
	LineNumber           Int64   `json:"LineNumber,omitempty"`
	SimvolyDo            *String `json:"СимволыДо,omitempty"`
	SimvolyPosle         *String `json:"СимволыПосле,omitempty"`
	ElementNaimenovaniia *String `json:"ЭлементНаименования,omitempty"`
}

func (CatalogNastroikiRMKSostavNaimenovaniia) APIEntityType() string {
	return "Catalog_НастройкиРМК_СоставНаименования"
}
func NewCatalogNastroikiRMKSostavNaimenovaniia(data string, prevError error) (*CatalogNastroikiRMKSostavNaimenovaniia, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogNastroikiRMKSostavNaimenovaniia)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogNastroikiRMKSostavNaimenovaniia(entity CatalogNastroikiRMKSostavNaimenovaniia) (*CatalogNastroikiRMKSostavNaimenovaniia, error) {
	return NewCatalogNastroikiRMKSostavNaimenovaniia(c.createEntity(entity))
}
func (c *Client) CatalogNastroikiRMKSostavNaimenovaniia(key PrimaryCatalogNastroikiRMKSostavNaimenovaniia, fields []string) (*CatalogNastroikiRMKSostavNaimenovaniia, error) {
	return NewCatalogNastroikiRMKSostavNaimenovaniia(c.getEntity(key, fields))
}
func (c *Client) CatalogNastroikiRMKSostavNaimenovaniias(where Where) (*[]CatalogNastroikiRMKSostavNaimenovaniia, error) {
	type ReturnObj struct {
		Value []CatalogNastroikiRMKSostavNaimenovaniia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкиРМК_СоставНаименования", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogNastroikiRMKSostavNaimenovaniia(key PrimaryCatalogNastroikiRMKSostavNaimenovaniia, entity CatalogNastroikiRMKSostavNaimenovaniia) (*CatalogNastroikiRMKSostavNaimenovaniia, error) {
	return NewCatalogNastroikiRMKSostavNaimenovaniia(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogNastroikiRMKSostavNaimenovaniia(key PrimaryCatalogNastroikiRMKSostavNaimenovaniia) error {
	return c.removeEntity(key)
}

type CatalogKharakteristikiNomenklatury struct {
	Key                    Guid                                                        `json:"Ref_Key,omitempty"`
	DataVersion            *String                                                     `json:"DataVersion,omitempty"`
	Description            *String                                                     `json:"Description,omitempty"`
	Code                   *String                                                     `json:"Code,omitempty"`
	OwnerKey               *Guid                                                       `json:"Owner_Key,omitempty"`
	DeletionMark           *Boolean                                                    `json:"DeletionMark,omitempty"`
	PolnoeNaimenovanie     *String                                                     `json:"ПолноеНаименование,omitempty"`
	PerechenKamnei         *String                                                     `json:"ПереченьКамней,omitempty"`
	PerechenKamneiTranslit *String                                                     `json:"ПереченьКамнейТранслит,omitempty"`
	BIdentifikator         *String                                                     `json:"Б_Идентификатор,omitempty"`
	BNomerVersii           *String                                                     `json:"Б_НомерВерсии,omitempty"`
	Spetsifikatsiia        *[]CatalogKharakteristikiNomenklaturySpetsifikatsiiaRowType `json:"Спецификация,omitempty"`
}

func (CatalogKharakteristikiNomenklatury) APIEntityType() string {
	return "Catalog_ХарактеристикиНоменклатуры"
}
func NewCatalogKharakteristikiNomenklatury(data string, prevError error) (*CatalogKharakteristikiNomenklatury, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogKharakteristikiNomenklatury)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogKharakteristikiNomenklatury(entity CatalogKharakteristikiNomenklatury) (*CatalogKharakteristikiNomenklatury, error) {
	return NewCatalogKharakteristikiNomenklatury(c.createEntity(entity))
}
func (c *Client) CatalogKharakteristikiNomenklatury(key PrimaryCatalogKharakteristikiNomenklatury, fields []string) (*CatalogKharakteristikiNomenklatury, error) {
	return NewCatalogKharakteristikiNomenklatury(c.getEntity(key, fields))
}
func (c *Client) CatalogKharakteristikiNomenklaturys(where Where) (*[]CatalogKharakteristikiNomenklatury, error) {
	type ReturnObj struct {
		Value []CatalogKharakteristikiNomenklatury `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ХарактеристикиНоменклатуры", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogKharakteristikiNomenklatury(key PrimaryCatalogKharakteristikiNomenklatury, entity CatalogKharakteristikiNomenklatury) (*CatalogKharakteristikiNomenklatury, error) {
	return NewCatalogKharakteristikiNomenklatury(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogKharakteristikiNomenklatury(key PrimaryCatalogKharakteristikiNomenklatury) error {
	return c.removeEntity(key)
}

type CatalogKharakteristikiNomenklaturySpetsifikatsiia struct {
	Key              Guid    `json:"Ref_Key,omitempty"`
	LineNumber       Int64   `json:"LineNumber,omitempty"`
	Weight           *Double `json:"Вес,omitempty"`
	GruppaDefektaKey *Guid   `json:"ГруппаДефекта_Key,omitempty"`
	GruppaTsvetaKey  *Guid   `json:"ГруппаЦвета_Key,omitempty"`
	KamenKey         *Guid   `json:"Камень_Key,omitempty"`
	Quantity         *Double `json:"Количество,omitempty"`
	ItemKey          *Guid   `json:"Номенклатура_Key,omitempty"`
	Razmer1          *Double `json:"Размер1,omitempty"`
	Razmer2          *Double `json:"Размер2,omitempty"`
	Razmer3          *Double `json:"Размер3,omitempty"`
	RassevKey        *Guid   `json:"Рассев_Key,omitempty"`
	FormaOgrankiKey  *Guid   `json:"ФормаОгранки_Key,omitempty"`
	TsvetKamniaKey   *Guid   `json:"ЦветКамня_Key,omitempty"`
}

func (CatalogKharakteristikiNomenklaturySpetsifikatsiia) APIEntityType() string {
	return "Catalog_ХарактеристикиНоменклатуры_Спецификация"
}
func NewCatalogKharakteristikiNomenklaturySpetsifikatsiia(data string, prevError error) (*CatalogKharakteristikiNomenklaturySpetsifikatsiia, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogKharakteristikiNomenklaturySpetsifikatsiia)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogKharakteristikiNomenklaturySpetsifikatsiia(entity CatalogKharakteristikiNomenklaturySpetsifikatsiia) (*CatalogKharakteristikiNomenklaturySpetsifikatsiia, error) {
	return NewCatalogKharakteristikiNomenklaturySpetsifikatsiia(c.createEntity(entity))
}
func (c *Client) CatalogKharakteristikiNomenklaturySpetsifikatsiia(key PrimaryCatalogKharakteristikiNomenklaturySpetsifikatsiia, fields []string) (*CatalogKharakteristikiNomenklaturySpetsifikatsiia, error) {
	return NewCatalogKharakteristikiNomenklaturySpetsifikatsiia(c.getEntity(key, fields))
}
func (c *Client) CatalogKharakteristikiNomenklaturySpetsifikatsiias(where Where) (*[]CatalogKharakteristikiNomenklaturySpetsifikatsiia, error) {
	type ReturnObj struct {
		Value []CatalogKharakteristikiNomenklaturySpetsifikatsiia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ХарактеристикиНоменклатуры_Спецификация", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogKharakteristikiNomenklaturySpetsifikatsiia(key PrimaryCatalogKharakteristikiNomenklaturySpetsifikatsiia, entity CatalogKharakteristikiNomenklaturySpetsifikatsiia) (*CatalogKharakteristikiNomenklaturySpetsifikatsiia, error) {
	return NewCatalogKharakteristikiNomenklaturySpetsifikatsiia(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogKharakteristikiNomenklaturySpetsifikatsiia(key PrimaryCatalogKharakteristikiNomenklaturySpetsifikatsiia) error {
	return c.removeEntity(key)
}

type DocumentOtborTovarov struct {
	Key                            Guid                                        `json:"Ref_Key,omitempty"`
	DataVersion                    *String                                     `json:"DataVersion,omitempty"`
	Number                         *String                                     `json:"Number,omitempty"`
	Date                           *DateTime                                   `json:"Date,omitempty"`
	DeletionMark                   *Boolean                                    `json:"DeletionMark,omitempty"`
	Posted                         *Boolean                                    `json:"Posted,omitempty"`
	BankovskiiSchetOrganizatsiiKey *Guid                                       `json:"БанковскийСчетОрганизации_Key,omitempty"`
	ValiutaDokumentaKey            *Guid                                       `json:"ВалютаДокумента_Key,omitempty"`
	Weight                         *Double                                     `json:"ВесДокумента,omitempty"`
	DogovorKontragentaKey          *Guid                                       `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie              *String                                     `json:"ДокументОснование,omitempty"`
	ZakazKlientaKey                *Guid                                       `json:"ЗаказКлиента_Key,omitempty"`
	KolichestvoDokumenta           *Int64                                      `json:"КоличествоДокумента,omitempty"`
	Comment                        *String                                     `json:"Комментарий,omitempty"`
	KontragentKey                  *Guid                                       `json:"Контрагент_Key,omitempty"`
	KratnostVzaimoraschetov        *Int64                                      `json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov            *Double                                     `json:"КурсВзаиморасчетов,omitempty"`
	OrganizatsiiaKey               *Guid                                       `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey               *Guid                                       `json:"Ответственный_Key,omitempty"`
	DepartmentKey                  *Guid                                       `json:"Склад_Key,omitempty"`
	Soglasovano                    *Boolean                                    `json:"Согласовано,omitempty"`
	SummaVkliuchaetNDS             *Boolean                                    `json:"СуммаВключаетНДС,omitempty"`
	SumOfDocument                  *Double                                     `json:"СуммаДокумента,omitempty"`
	SkhemaRealizatsiiKey           *Guid                                       `json:"СхемаРеализации_Key,omitempty"`
	TipTsenKey                     *Guid                                       `json:"ТипЦен_Key,omitempty"`
	UchityvatNDS                   *Boolean                                    `json:"УчитыватьНДС,omitempty"`
	Goods                          *[]DocumentOtborTovarovTovaryRowType        `json:"Товары,omitempty"`
	TovaryKOtboru                  *[]DocumentOtborTovarovTovaryKOtboruRowType `json:"ТоварыКОтбору,omitempty"`
	DokumentOsnovanieType          *String                                     `json:"ДокументОснование_Type,omitempty"`
}

func (DocumentOtborTovarov) APIEntityType() string {
	return "Document_ОтборТоваров"
}
func NewDocumentOtborTovarov(data string, prevError error) (*DocumentOtborTovarov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentOtborTovarov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentOtborTovarov(entity DocumentOtborTovarov) (*DocumentOtborTovarov, error) {
	return NewDocumentOtborTovarov(c.createEntity(entity))
}
func (c *Client) DocumentOtborTovarov(key PrimaryDocumentOtborTovarov, fields []string) (*DocumentOtborTovarov, error) {
	return NewDocumentOtborTovarov(c.getEntity(key, fields))
}
func (c *Client) DocumentOtborTovarovs(where Where) (*[]DocumentOtborTovarov, error) {
	type ReturnObj struct {
		Value []DocumentOtborTovarov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтборТоваров", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentOtborTovarov(key PrimaryDocumentOtborTovarov, entity DocumentOtborTovarov) (*DocumentOtborTovarov, error) {
	return NewDocumentOtborTovarov(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentOtborTovarov(key PrimaryDocumentOtborTovarov) error {
	return c.removeEntity(key)
}

type DocumentOtborTovarovTovary struct {
	Key                                        Guid    `json:"Ref_Key,omitempty"`
	LineNumber                                 Int64   `json:"LineNumber,omitempty"`
	Weight                                     *Double `json:"Вес,omitempty"`
	ZnachenieUsloviiaAvtomaticheskoiSkidki     *String `json:"ЗначениеУсловияАвтоматическойСкидки,omitempty"`
	Quantity                                   *Int64  `json:"Количество,omitempty"`
	ItemKey                                    *Guid   `json:"Номенклатура_Key,omitempty"`
	PercentAutoDiscount                        *Double `json:"ПроцентАвтоматическойСкидки,omitempty"`
	PercentManualDiscount                      *Double `json:"ПроцентРучнойСкидки,omitempty"`
	SizeKey                                    *Guid   `json:"Размер_Key,omitempty"`
	InstanceKey                                *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	StavkaNDS                                  *String `json:"СтавкаНДС,omitempty"`
	Sum                                        *Double `json:"Сумма,omitempty"`
	SummaNDS                                   *Double `json:"СуммаНДС,omitempty"`
	UslovieAvtomaticheskoiSkidki               *String `json:"УсловиеАвтоматическойСкидки,omitempty"`
	KharakteristikaNomenklaturyKey             *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                                       *Double `json:"Цена,omitempty"`
	SumManualDiscount                          *Double `json:"СуммаРучнойСкидки,omitempty"`
	SumAutoDiscount                            *Double `json:"СуммаАвтоматическойСкидки,omitempty"`
	ZnachenieUsloviiaAvtomaticheskoiSkidkiType *String `json:"ЗначениеУсловияАвтоматическойСкидки_Type,omitempty"`
}

func (DocumentOtborTovarovTovary) APIEntityType() string {
	return "Document_ОтборТоваров_Товары"
}
func NewDocumentOtborTovarovTovary(data string, prevError error) (*DocumentOtborTovarovTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentOtborTovarovTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentOtborTovarovTovary(entity DocumentOtborTovarovTovary) (*DocumentOtborTovarovTovary, error) {
	return NewDocumentOtborTovarovTovary(c.createEntity(entity))
}
func (c *Client) DocumentOtborTovarovTovary(key PrimaryDocumentOtborTovarovTovary, fields []string) (*DocumentOtborTovarovTovary, error) {
	return NewDocumentOtborTovarovTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentOtborTovarovTovarys(where Where) (*[]DocumentOtborTovarovTovary, error) {
	type ReturnObj struct {
		Value []DocumentOtborTovarovTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтборТоваров_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentOtborTovarovTovary(key PrimaryDocumentOtborTovarovTovary, entity DocumentOtborTovarovTovary) (*DocumentOtborTovarovTovary, error) {
	return NewDocumentOtborTovarovTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentOtborTovarovTovary(key PrimaryDocumentOtborTovarovTovary) error {
	return c.removeEntity(key)
}

type DocumentOtborTovarovTovaryKOtboru struct {
	Key         Guid    `json:"Ref_Key,omitempty"`
	LineNumber  Int64   `json:"LineNumber,omitempty"`
	Weight      *Double `json:"Вес,omitempty"`
	Quantity    *Int64  `json:"Количество,omitempty"`
	ItemKey     *Guid   `json:"Номенклатура_Key,omitempty"`
	SizeKey     *Guid   `json:"Размер_Key,omitempty"`
	InstanceKey *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
}

func (DocumentOtborTovarovTovaryKOtboru) APIEntityType() string {
	return "Document_ОтборТоваров_ТоварыКОтбору"
}
func NewDocumentOtborTovarovTovaryKOtboru(data string, prevError error) (*DocumentOtborTovarovTovaryKOtboru, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentOtborTovarovTovaryKOtboru)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentOtborTovarovTovaryKOtboru(entity DocumentOtborTovarovTovaryKOtboru) (*DocumentOtborTovarovTovaryKOtboru, error) {
	return NewDocumentOtborTovarovTovaryKOtboru(c.createEntity(entity))
}
func (c *Client) DocumentOtborTovarovTovaryKOtboru(key PrimaryDocumentOtborTovarovTovaryKOtboru, fields []string) (*DocumentOtborTovarovTovaryKOtboru, error) {
	return NewDocumentOtborTovarovTovaryKOtboru(c.getEntity(key, fields))
}
func (c *Client) DocumentOtborTovarovTovaryKOtborus(where Where) (*[]DocumentOtborTovarovTovaryKOtboru, error) {
	type ReturnObj struct {
		Value []DocumentOtborTovarovTovaryKOtboru `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтборТоваров_ТоварыКОтбору", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentOtborTovarovTovaryKOtboru(key PrimaryDocumentOtborTovarovTovaryKOtboru, entity DocumentOtborTovarovTovaryKOtboru) (*DocumentOtborTovarovTovaryKOtboru, error) {
	return NewDocumentOtborTovarovTovaryKOtboru(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentOtborTovarovTovaryKOtboru(key PrimaryDocumentOtborTovarovTovaryKOtboru) error {
	return c.removeEntity(key)
}

type CatalogSposobyDostavkiTovara struct {
	Key          Guid     `json:"Ref_Key,omitempty"`
	DataVersion  *String  `json:"DataVersion,omitempty"`
	Description  *String  `json:"Description,omitempty"`
	Code         *String  `json:"Code,omitempty"`
	DeletionMark *Boolean `json:"DeletionMark,omitempty"`
}

func (CatalogSposobyDostavkiTovara) APIEntityType() string {
	return "Catalog_СпособыДоставкиТовара"
}
func NewCatalogSposobyDostavkiTovara(data string, prevError error) (*CatalogSposobyDostavkiTovara, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogSposobyDostavkiTovara)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogSposobyDostavkiTovara(entity CatalogSposobyDostavkiTovara) (*CatalogSposobyDostavkiTovara, error) {
	return NewCatalogSposobyDostavkiTovara(c.createEntity(entity))
}
func (c *Client) CatalogSposobyDostavkiTovara(key PrimaryCatalogSposobyDostavkiTovara, fields []string) (*CatalogSposobyDostavkiTovara, error) {
	return NewCatalogSposobyDostavkiTovara(c.getEntity(key, fields))
}
func (c *Client) CatalogSposobyDostavkiTovaras(where Where) (*[]CatalogSposobyDostavkiTovara, error) {
	type ReturnObj struct {
		Value []CatalogSposobyDostavkiTovara `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_СпособыДоставкиТовара", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogSposobyDostavkiTovara(key PrimaryCatalogSposobyDostavkiTovara, entity CatalogSposobyDostavkiTovara) (*CatalogSposobyDostavkiTovara, error) {
	return NewCatalogSposobyDostavkiTovara(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogSposobyDostavkiTovara(key PrimaryCatalogSposobyDostavkiTovara) error {
	return c.removeEntity(key)
}

type CatalogPodrazdeleniia struct {
	Key          Guid     `json:"Ref_Key,omitempty"`
	DataVersion  *String  `json:"DataVersion,omitempty"`
	Description  *String  `json:"Description,omitempty"`
	Code         *String  `json:"Code,omitempty"`
	ParentKey    *Guid    `json:"Parent_Key,omitempty"`
	DeletionMark *Boolean `json:"DeletionMark,omitempty"`
}

func (CatalogPodrazdeleniia) APIEntityType() string {
	return "Catalog_Подразделения"
}
func NewCatalogPodrazdeleniia(data string, prevError error) (*CatalogPodrazdeleniia, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogPodrazdeleniia)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogPodrazdeleniia(entity CatalogPodrazdeleniia) (*CatalogPodrazdeleniia, error) {
	return NewCatalogPodrazdeleniia(c.createEntity(entity))
}
func (c *Client) CatalogPodrazdeleniia(key PrimaryCatalogPodrazdeleniia, fields []string) (*CatalogPodrazdeleniia, error) {
	return NewCatalogPodrazdeleniia(c.getEntity(key, fields))
}
func (c *Client) CatalogPodrazdeleniias(where Where) (*[]CatalogPodrazdeleniia, error) {
	type ReturnObj struct {
		Value []CatalogPodrazdeleniia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Подразделения", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogPodrazdeleniia(key PrimaryCatalogPodrazdeleniia, entity CatalogPodrazdeleniia) (*CatalogPodrazdeleniia, error) {
	return NewCatalogPodrazdeleniia(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogPodrazdeleniia(key PrimaryCatalogPodrazdeleniia) error {
	return c.removeEntity(key)
}

type DocumentJournalPreiskuranty struct {
	Ref             String    `json:"Ref,omitempty"`
	Type            *String   `json:"Type,omitempty"`
	Date            *DateTime `json:"Date,omitempty"`
	DeletionMark    *Boolean  `json:"DeletionMark,omitempty"`
	Number          *String   `json:"Number,omitempty"`
	Posted          *Boolean  `json:"Posted,omitempty"`
	KamenKey        *Guid     `json:"Камень_Key,omitempty"`
	Komentarii      *String   `json:"Коментарий,omitempty"`
	RassevKey       *Guid     `json:"Рассев_Key,omitempty"`
	FormaOgrankiKey *Guid     `json:"ФормаОгранки_Key,omitempty"`
	RefType         String    `json:"Ref_Type,omitempty"`
}

func (DocumentJournalPreiskuranty) APIEntityType() string {
	return "DocumentJournal_Прейскуранты"
}
func NewDocumentJournalPreiskuranty(data string, prevError error) (*DocumentJournalPreiskuranty, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentJournalPreiskuranty)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentJournalPreiskuranty(entity DocumentJournalPreiskuranty) (*DocumentJournalPreiskuranty, error) {
	return NewDocumentJournalPreiskuranty(c.createEntity(entity))
}
func (c *Client) DocumentJournalPreiskuranty(key PrimaryDocumentJournalPreiskuranty, fields []string) (*DocumentJournalPreiskuranty, error) {
	return NewDocumentJournalPreiskuranty(c.getEntity(key, fields))
}
func (c *Client) DocumentJournalPreiskurantys(where Where) (*[]DocumentJournalPreiskuranty, error) {
	type ReturnObj struct {
		Value []DocumentJournalPreiskuranty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("DocumentJournal_Прейскуранты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentJournalPreiskuranty(key PrimaryDocumentJournalPreiskuranty, entity DocumentJournalPreiskuranty) (*DocumentJournalPreiskuranty, error) {
	return NewDocumentJournalPreiskuranty(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentJournalPreiskuranty(key PrimaryDocumentJournalPreiskuranty) error {
	return c.removeEntity(key)
}

type CatalogRelizyIuvelirnykhSalonov struct {
	Key                                  Guid                                                        `json:"Ref_Key,omitempty"`
	DataVersion                          *String                                                     `json:"DataVersion,omitempty"`
	Description                          *String                                                     `json:"Description,omitempty"`
	DeletionMark                         *Boolean                                                    `json:"DeletionMark,omitempty"`
	NomerVersiiKonfiguratsii             *String                                                     `json:"НомерВерсииКонфигурации,omitempty"`
	TipFailaPostavki                     *String                                                     `json:"ТипФайлаПоставки,omitempty"`
	KhranilishcheFailaPostavkiBase64Data *Binary                                                     `json:"ХранилищеФайлаПоставки_Base64Data,omitempty"`
	ObnovliaemyeRelizy                   *[]CatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizyRowType `json:"ОбновляемыеРелизы,omitempty"`
	KhranilishcheFailaPostavkiType       *String                                                     `json:"ХранилищеФайлаПоставки_Type,omitempty"`
	KhranilishcheFailaPostavki           *Stream                                                     `json:"ХранилищеФайлаПоставки,omitempty"`
}

func (CatalogRelizyIuvelirnykhSalonov) APIEntityType() string {
	return "Catalog_РелизыЮвелирныхСалонов"
}
func NewCatalogRelizyIuvelirnykhSalonov(data string, prevError error) (*CatalogRelizyIuvelirnykhSalonov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogRelizyIuvelirnykhSalonov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogRelizyIuvelirnykhSalonov(entity CatalogRelizyIuvelirnykhSalonov) (*CatalogRelizyIuvelirnykhSalonov, error) {
	return NewCatalogRelizyIuvelirnykhSalonov(c.createEntity(entity))
}
func (c *Client) CatalogRelizyIuvelirnykhSalonov(key PrimaryCatalogRelizyIuvelirnykhSalonov, fields []string) (*CatalogRelizyIuvelirnykhSalonov, error) {
	return NewCatalogRelizyIuvelirnykhSalonov(c.getEntity(key, fields))
}
func (c *Client) CatalogRelizyIuvelirnykhSalonovs(where Where) (*[]CatalogRelizyIuvelirnykhSalonov, error) {
	type ReturnObj struct {
		Value []CatalogRelizyIuvelirnykhSalonov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_РелизыЮвелирныхСалонов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogRelizyIuvelirnykhSalonov(key PrimaryCatalogRelizyIuvelirnykhSalonov, entity CatalogRelizyIuvelirnykhSalonov) (*CatalogRelizyIuvelirnykhSalonov, error) {
	return NewCatalogRelizyIuvelirnykhSalonov(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogRelizyIuvelirnykhSalonov(key PrimaryCatalogRelizyIuvelirnykhSalonov) error {
	return c.removeEntity(key)
}

type CatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizy struct {
	Key                       Guid  `json:"Ref_Key,omitempty"`
	LineNumber                Int64 `json:"LineNumber,omitempty"`
	RelizIuvelirnogoSalonaKey *Guid `json:"РелизЮвелирногоСалона_Key,omitempty"`
}

func (CatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizy) APIEntityType() string {
	return "Catalog_РелизыЮвелирныхСалонов_ОбновляемыеРелизы"
}
func NewCatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizy(data string, prevError error) (*CatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizy, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizy)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizy(entity CatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizy) (*CatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizy, error) {
	return NewCatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizy(c.createEntity(entity))
}
func (c *Client) CatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizy(key PrimaryCatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizy, fields []string) (*CatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizy, error) {
	return NewCatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizy(c.getEntity(key, fields))
}
func (c *Client) CatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizys(where Where) (*[]CatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizy, error) {
	type ReturnObj struct {
		Value []CatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_РелизыЮвелирныхСалонов_ОбновляемыеРелизы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizy(key PrimaryCatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizy, entity CatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizy) (*CatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizy, error) {
	return NewCatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizy(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizy(key PrimaryCatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizy) error {
	return c.removeEntity(key)
}

type DocumentOtchetKomissioneraOProdazhakh struct {
	Key                                         Guid                                                             `json:"Ref_Key,omitempty"`
	DataVersion                                 *String                                                          `json:"DataVersion,omitempty"`
	Number                                      *String                                                          `json:"Number,omitempty"`
	Date                                        *DateTime                                                        `json:"Date,omitempty"`
	DeletionMark                                *Boolean                                                         `json:"DeletionMark,omitempty"`
	Posted                                      *Boolean                                                         `json:"Posted,omitempty"`
	ValiutaDokumentaKey                         *Guid                                                            `json:"ВалютаДокумента_Key,omitempty"`
	Weight                                      *Double                                                          `json:"ВесДокумента,omitempty"`
	DataVkhodiashchegoDokumenta                 *DateTime                                                        `json:"ДатаВходящегоДокумента,omitempty"`
	DogovorKontragentaKey                       *Guid                                                            `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie                           *String                                                          `json:"ДокументОснование,omitempty"`
	DokumentSozdanVIuTD                         *Boolean                                                         `json:"ДокументСозданВЮТД,omitempty"`
	KolichestvoDokumenta                        *Int64                                                           `json:"КоличествоДокумента,omitempty"`
	Comment                                     *String                                                          `json:"Комментарий,omitempty"`
	KontragentKey                               *Guid                                                            `json:"Контрагент_Key,omitempty"`
	KratnostVzaimoraschetov                     *Int64                                                           `json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov                         *Double                                                          `json:"КурсВзаиморасчетов,omitempty"`
	NomenklaturnaiaGruppaKey                    *Guid                                                            `json:"НоменклатурнаяГруппа_Key,omitempty"`
	NomerVkhodiashchegoDokumenta                *String                                                          `json:"НомерВходящегоДокумента,omitempty"`
	OrganizatsiiaKey                            *Guid                                                            `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                            *Guid                                                            `json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey                            *Guid                                                            `json:"Подразделение_Key,omitempty"`
	ProektKey                                   *Guid                                                            `json:"Проект_Key,omitempty"`
	ProtsentKomissionnogoVoznagrazhdeniia       *Double                                                          `json:"ПроцентКомиссионногоВознаграждения,omitempty"`
	Sdelka                                      *String                                                          `json:"Сделка,omitempty"`
	SposobRaschetaKomissionnogoVoznagrazhdeniia *String                                                          `json:"СпособРасчетаКомиссионногоВознаграждения,omitempty"`
	StavkaNDSVoznagrazhdeniia                   *String                                                          `json:"СтавкаНДСВознаграждения,omitempty"`
	StatiaZatratKey                             *Guid                                                            `json:"СтатьяЗатрат_Key,omitempty"`
	SummaVkliuchaetNDS                          *Boolean                                                         `json:"СуммаВключаетНДС,omitempty"`
	SummaVoznagrazhdeniia                       *Double                                                          `json:"СуммаВознаграждения,omitempty"`
	SumOfDocument                               *Double                                                          `json:"СуммаДокумента,omitempty"`
	TipDokumenta                                *String                                                          `json:"ТипДокумента,omitempty"`
	TipTsenKey                                  *Guid                                                            `json:"ТипЦен_Key,omitempty"`
	UderzhatKomissionnoeVoznagrazhdenie         *Boolean                                                         `json:"УдержатьКомиссионноеВознаграждение,omitempty"`
	UsloviiaOplatyKey                           *Guid                                                            `json:"УсловияОплаты_Key,omitempty"`
	UchityvatNDS                                *Boolean                                                         `json:"УчитыватьНДС,omitempty"`
	KhoziaistvennaiaOperatsiiaKey               *Guid                                                            `json:"ХозяйственнаяОперация_Key,omitempty"`
	DenezhnyeSredstva                           *[]DocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstvaRowType `json:"ДенежныеСредства,omitempty"`
	Goods                                       *[]DocumentOtchetKomissioneraOProdazhakhTovaryRowType            `json:"Товары,omitempty"`
	DokumentOsnovanieType                       *String                                                          `json:"ДокументОснование_Type,omitempty"`
	SdelkaType                                  *String                                                          `json:"Сделка_Type,omitempty"`
}

func (DocumentOtchetKomissioneraOProdazhakh) APIEntityType() string {
	return "Document_ОтчетКомиссионераОПродажах"
}
func NewDocumentOtchetKomissioneraOProdazhakh(data string, prevError error) (*DocumentOtchetKomissioneraOProdazhakh, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentOtchetKomissioneraOProdazhakh)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentOtchetKomissioneraOProdazhakh(entity DocumentOtchetKomissioneraOProdazhakh) (*DocumentOtchetKomissioneraOProdazhakh, error) {
	return NewDocumentOtchetKomissioneraOProdazhakh(c.createEntity(entity))
}
func (c *Client) DocumentOtchetKomissioneraOProdazhakh(key PrimaryDocumentOtchetKomissioneraOProdazhakh, fields []string) (*DocumentOtchetKomissioneraOProdazhakh, error) {
	return NewDocumentOtchetKomissioneraOProdazhakh(c.getEntity(key, fields))
}
func (c *Client) DocumentOtchetKomissioneraOProdazhakhs(where Where) (*[]DocumentOtchetKomissioneraOProdazhakh, error) {
	type ReturnObj struct {
		Value []DocumentOtchetKomissioneraOProdazhakh `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетКомиссионераОПродажах", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentOtchetKomissioneraOProdazhakh(key PrimaryDocumentOtchetKomissioneraOProdazhakh, entity DocumentOtchetKomissioneraOProdazhakh) (*DocumentOtchetKomissioneraOProdazhakh, error) {
	return NewDocumentOtchetKomissioneraOProdazhakh(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentOtchetKomissioneraOProdazhakh(key PrimaryDocumentOtchetKomissioneraOProdazhakh) error {
	return c.removeEntity(key)
}

type DocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstva struct {
	Key                   Guid    `json:"Ref_Key,omitempty"`
	LineNumber            Int64   `json:"LineNumber,omitempty"`
	VidOtchetaPoPlatezham *String `json:"ВидОтчетаПоПлатежам,omitempty"`
	StavkaNDS             *String `json:"СтавкаНДС,omitempty"`
	Sum                   *Double `json:"Сумма,omitempty"`
	SummaNDS              *Double `json:"СуммаНДС,omitempty"`
}

func (DocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstva) APIEntityType() string {
	return "Document_ОтчетКомиссионераОПродажах_ДенежныеСредства"
}
func NewDocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstva(data string, prevError error) (*DocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstva, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstva)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstva(entity DocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstva) (*DocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstva, error) {
	return NewDocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstva(c.createEntity(entity))
}
func (c *Client) DocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstva(key PrimaryDocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstva, fields []string) (*DocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstva, error) {
	return NewDocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstva(c.getEntity(key, fields))
}
func (c *Client) DocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstvas(where Where) (*[]DocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstva, error) {
	type ReturnObj struct {
		Value []DocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstva `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетКомиссионераОПродажах_ДенежныеСредства", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstva(key PrimaryDocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstva, entity DocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstva) (*DocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstva, error) {
	return NewDocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstva(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstva(key PrimaryDocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstva) error {
	return c.removeEntity(key)
}

type DocumentOtchetKomissioneraOProdazhakhTovary struct {
	Key                            Guid      `json:"Ref_Key,omitempty"`
	LineNumber                     Int64     `json:"LineNumber,omitempty"`
	Weight                         *Double   `json:"Вес,omitempty"`
	Quantity                       *Int64    `json:"Количество,omitempty"`
	ItemKey                        *Guid     `json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid     `json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid     `json:"СерияНоменклатуры_Key,omitempty"`
	StavkaNDS                      *String   `json:"СтавкаНДС,omitempty"`
	Sum                            *Double   `json:"Сумма,omitempty"`
	SummaVoznagrazhdeniia          *Double   `json:"СуммаВознаграждения,omitempty"`
	SummaNDS                       *Double   `json:"СуммаНДС,omitempty"`
	SummaNDSVoznagrazhdeniia       *Double   `json:"СуммаНДСВознаграждения,omitempty"`
	SummaNDSPeredachi              *Double   `json:"СуммаНДСПередачи,omitempty"`
	SummaPeredachi                 *Double   `json:"СуммаПередачи,omitempty"`
	KharakteristikaNomenklaturyKey *Guid     `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Double   `json:"Цена,omitempty"`
	TsenaPeredachi                 *Double   `json:"ЦенаПередачи,omitempty"`
	DataSchetaFakturyKomissionera  *DateTime `json:"ДатаСчетаФактурыКомиссионера,omitempty"`
	PokupatelKey                   *Guid     `json:"Покупатель_Key,omitempty"`
	NomerSchetaFakturyKomissionera *String   `json:"НомерСчетаФактурыКомиссионера,omitempty"`
}

func (DocumentOtchetKomissioneraOProdazhakhTovary) APIEntityType() string {
	return "Document_ОтчетКомиссионераОПродажах_Товары"
}
func NewDocumentOtchetKomissioneraOProdazhakhTovary(data string, prevError error) (*DocumentOtchetKomissioneraOProdazhakhTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentOtchetKomissioneraOProdazhakhTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentOtchetKomissioneraOProdazhakhTovary(entity DocumentOtchetKomissioneraOProdazhakhTovary) (*DocumentOtchetKomissioneraOProdazhakhTovary, error) {
	return NewDocumentOtchetKomissioneraOProdazhakhTovary(c.createEntity(entity))
}
func (c *Client) DocumentOtchetKomissioneraOProdazhakhTovary(key PrimaryDocumentOtchetKomissioneraOProdazhakhTovary, fields []string) (*DocumentOtchetKomissioneraOProdazhakhTovary, error) {
	return NewDocumentOtchetKomissioneraOProdazhakhTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentOtchetKomissioneraOProdazhakhTovarys(where Where) (*[]DocumentOtchetKomissioneraOProdazhakhTovary, error) {
	type ReturnObj struct {
		Value []DocumentOtchetKomissioneraOProdazhakhTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетКомиссионераОПродажах_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentOtchetKomissioneraOProdazhakhTovary(key PrimaryDocumentOtchetKomissioneraOProdazhakhTovary, entity DocumentOtchetKomissioneraOProdazhakhTovary) (*DocumentOtchetKomissioneraOProdazhakhTovary, error) {
	return NewDocumentOtchetKomissioneraOProdazhakhTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentOtchetKomissioneraOProdazhakhTovary(key PrimaryDocumentOtchetKomissioneraOProdazhakhTovary) error {
	return c.removeEntity(key)
}

type CatalogTovarnyeKategorii struct {
	Key                      Guid     `json:"Ref_Key,omitempty"`
	DataVersion              *String  `json:"DataVersion,omitempty"`
	Description              *String  `json:"Description,omitempty"`
	DeletionMark             *Boolean `json:"DeletionMark,omitempty"`
	NomenklaturnaiaGruppaKey *Guid    `json:"НоменклатурнаяГруппа_Key,omitempty"`
}

func (CatalogTovarnyeKategorii) APIEntityType() string {
	return "Catalog_ТоварныеКатегории"
}
func NewCatalogTovarnyeKategorii(data string, prevError error) (*CatalogTovarnyeKategorii, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogTovarnyeKategorii)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogTovarnyeKategorii(entity CatalogTovarnyeKategorii) (*CatalogTovarnyeKategorii, error) {
	return NewCatalogTovarnyeKategorii(c.createEntity(entity))
}
func (c *Client) CatalogTovarnyeKategorii(key PrimaryCatalogTovarnyeKategorii, fields []string) (*CatalogTovarnyeKategorii, error) {
	return NewCatalogTovarnyeKategorii(c.getEntity(key, fields))
}
func (c *Client) CatalogTovarnyeKategoriis(where Where) (*[]CatalogTovarnyeKategorii, error) {
	type ReturnObj struct {
		Value []CatalogTovarnyeKategorii `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ТоварныеКатегории", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogTovarnyeKategorii(key PrimaryCatalogTovarnyeKategorii, entity CatalogTovarnyeKategorii) (*CatalogTovarnyeKategorii, error) {
	return NewCatalogTovarnyeKategorii(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogTovarnyeKategorii(key PrimaryCatalogTovarnyeKategorii) error {
	return c.removeEntity(key)
}

type CatalogDokumentyUdostoveriaiushchieLichnost struct {
	Key          Guid     `json:"Ref_Key,omitempty"`
	DataVersion  *String  `json:"DataVersion,omitempty"`
	Description  *String  `json:"Description,omitempty"`
	DeletionMark *Boolean `json:"DeletionMark,omitempty"`
	KodIMNS      *String  `json:"КодИМНС,omitempty"`
	KodPFR       *String  `json:"КодПФР,omitempty"`
}

func (CatalogDokumentyUdostoveriaiushchieLichnost) APIEntityType() string {
	return "Catalog_ДокументыУдостоверяющиеЛичность"
}
func NewCatalogDokumentyUdostoveriaiushchieLichnost(data string, prevError error) (*CatalogDokumentyUdostoveriaiushchieLichnost, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogDokumentyUdostoveriaiushchieLichnost)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogDokumentyUdostoveriaiushchieLichnost(entity CatalogDokumentyUdostoveriaiushchieLichnost) (*CatalogDokumentyUdostoveriaiushchieLichnost, error) {
	return NewCatalogDokumentyUdostoveriaiushchieLichnost(c.createEntity(entity))
}
func (c *Client) CatalogDokumentyUdostoveriaiushchieLichnost(key PrimaryCatalogDokumentyUdostoveriaiushchieLichnost, fields []string) (*CatalogDokumentyUdostoveriaiushchieLichnost, error) {
	return NewCatalogDokumentyUdostoveriaiushchieLichnost(c.getEntity(key, fields))
}
func (c *Client) CatalogDokumentyUdostoveriaiushchieLichnosts(where Where) (*[]CatalogDokumentyUdostoveriaiushchieLichnost, error) {
	type ReturnObj struct {
		Value []CatalogDokumentyUdostoveriaiushchieLichnost `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ДокументыУдостоверяющиеЛичность", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogDokumentyUdostoveriaiushchieLichnost(key PrimaryCatalogDokumentyUdostoveriaiushchieLichnost, entity CatalogDokumentyUdostoveriaiushchieLichnost) (*CatalogDokumentyUdostoveriaiushchieLichnost, error) {
	return NewCatalogDokumentyUdostoveriaiushchieLichnost(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogDokumentyUdostoveriaiushchieLichnost(key PrimaryCatalogDokumentyUdostoveriaiushchieLichnost) error {
	return c.removeEntity(key)
}

type CatalogFiltryDliaElektronnykhPisem struct {
	Key                Guid                                                        `json:"Ref_Key,omitempty"`
	DataVersion        *String                                                     `json:"DataVersion,omitempty"`
	Description        *String                                                     `json:"Description,omitempty"`
	Code               *String                                                     `json:"Code,omitempty"`
	OwnerKey           *Guid                                                       `json:"Owner_Key,omitempty"`
	DeletionMark       *Boolean                                                    `json:"DeletionMark,omitempty"`
	Ispolzovanie       *Boolean                                                    `json:"Использование,omitempty"`
	OperatsiiaUsloviia *Boolean                                                    `json:"ОперацияУсловия,omitempty"`
	Poriadok           *Int64                                                      `json:"Порядок,omitempty"`
	DeistviiaFiltra    *[]CatalogFiltryDliaElektronnykhPisemDeistviiaFiltraRowType `json:"ДействияФильтра,omitempty"`
	UsloviiaFiltra     *[]CatalogFiltryDliaElektronnykhPisemUsloviiaFiltraRowType  `json:"УсловияФильтра,omitempty"`
}

func (CatalogFiltryDliaElektronnykhPisem) APIEntityType() string {
	return "Catalog_ФильтрыДляЭлектронныхПисем"
}
func NewCatalogFiltryDliaElektronnykhPisem(data string, prevError error) (*CatalogFiltryDliaElektronnykhPisem, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogFiltryDliaElektronnykhPisem)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogFiltryDliaElektronnykhPisem(entity CatalogFiltryDliaElektronnykhPisem) (*CatalogFiltryDliaElektronnykhPisem, error) {
	return NewCatalogFiltryDliaElektronnykhPisem(c.createEntity(entity))
}
func (c *Client) CatalogFiltryDliaElektronnykhPisem(key PrimaryCatalogFiltryDliaElektronnykhPisem, fields []string) (*CatalogFiltryDliaElektronnykhPisem, error) {
	return NewCatalogFiltryDliaElektronnykhPisem(c.getEntity(key, fields))
}
func (c *Client) CatalogFiltryDliaElektronnykhPisems(where Where) (*[]CatalogFiltryDliaElektronnykhPisem, error) {
	type ReturnObj struct {
		Value []CatalogFiltryDliaElektronnykhPisem `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ФильтрыДляЭлектронныхПисем", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogFiltryDliaElektronnykhPisem(key PrimaryCatalogFiltryDliaElektronnykhPisem, entity CatalogFiltryDliaElektronnykhPisem) (*CatalogFiltryDliaElektronnykhPisem, error) {
	return NewCatalogFiltryDliaElektronnykhPisem(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogFiltryDliaElektronnykhPisem(key PrimaryCatalogFiltryDliaElektronnykhPisem) error {
	return c.removeEntity(key)
}

type CatalogFiltryDliaElektronnykhPisemDeistviiaFiltra struct {
	Key            Guid    `json:"Ref_Key,omitempty"`
	LineNumber     Int64   `json:"LineNumber,omitempty"`
	GruppaPisemKey *Guid   `json:"ГруппаПисем_Key,omitempty"`
	DeistvieFiltra *String `json:"ДействиеФильтра,omitempty"`
}

func (CatalogFiltryDliaElektronnykhPisemDeistviiaFiltra) APIEntityType() string {
	return "Catalog_ФильтрыДляЭлектронныхПисем_ДействияФильтра"
}
func NewCatalogFiltryDliaElektronnykhPisemDeistviiaFiltra(data string, prevError error) (*CatalogFiltryDliaElektronnykhPisemDeistviiaFiltra, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogFiltryDliaElektronnykhPisemDeistviiaFiltra)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogFiltryDliaElektronnykhPisemDeistviiaFiltra(entity CatalogFiltryDliaElektronnykhPisemDeistviiaFiltra) (*CatalogFiltryDliaElektronnykhPisemDeistviiaFiltra, error) {
	return NewCatalogFiltryDliaElektronnykhPisemDeistviiaFiltra(c.createEntity(entity))
}
func (c *Client) CatalogFiltryDliaElektronnykhPisemDeistviiaFiltra(key PrimaryCatalogFiltryDliaElektronnykhPisemDeistviiaFiltra, fields []string) (*CatalogFiltryDliaElektronnykhPisemDeistviiaFiltra, error) {
	return NewCatalogFiltryDliaElektronnykhPisemDeistviiaFiltra(c.getEntity(key, fields))
}
func (c *Client) CatalogFiltryDliaElektronnykhPisemDeistviiaFiltras(where Where) (*[]CatalogFiltryDliaElektronnykhPisemDeistviiaFiltra, error) {
	type ReturnObj struct {
		Value []CatalogFiltryDliaElektronnykhPisemDeistviiaFiltra `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ФильтрыДляЭлектронныхПисем_ДействияФильтра", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogFiltryDliaElektronnykhPisemDeistviiaFiltra(key PrimaryCatalogFiltryDliaElektronnykhPisemDeistviiaFiltra, entity CatalogFiltryDliaElektronnykhPisemDeistviiaFiltra) (*CatalogFiltryDliaElektronnykhPisemDeistviiaFiltra, error) {
	return NewCatalogFiltryDliaElektronnykhPisemDeistviiaFiltra(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogFiltryDliaElektronnykhPisemDeistviiaFiltra(key PrimaryCatalogFiltryDliaElektronnykhPisemDeistviiaFiltra) error {
	return c.removeEntity(key)
}

type CatalogFiltryDliaElektronnykhPisemUsloviiaFiltra struct {
	Key                Guid     `json:"Ref_Key,omitempty"`
	LineNumber         Int64    `json:"LineNumber,omitempty"`
	ZnachenieUsloviia  *String  `json:"ЗначениеУсловия,omitempty"`
	OtritsanieUsloviia *Boolean `json:"ОтрицаниеУсловия,omitempty"`
	Uslovie            *String  `json:"Условие,omitempty"`
}

func (CatalogFiltryDliaElektronnykhPisemUsloviiaFiltra) APIEntityType() string {
	return "Catalog_ФильтрыДляЭлектронныхПисем_УсловияФильтра"
}
func NewCatalogFiltryDliaElektronnykhPisemUsloviiaFiltra(data string, prevError error) (*CatalogFiltryDliaElektronnykhPisemUsloviiaFiltra, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogFiltryDliaElektronnykhPisemUsloviiaFiltra)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogFiltryDliaElektronnykhPisemUsloviiaFiltra(entity CatalogFiltryDliaElektronnykhPisemUsloviiaFiltra) (*CatalogFiltryDliaElektronnykhPisemUsloviiaFiltra, error) {
	return NewCatalogFiltryDliaElektronnykhPisemUsloviiaFiltra(c.createEntity(entity))
}
func (c *Client) CatalogFiltryDliaElektronnykhPisemUsloviiaFiltra(key PrimaryCatalogFiltryDliaElektronnykhPisemUsloviiaFiltra, fields []string) (*CatalogFiltryDliaElektronnykhPisemUsloviiaFiltra, error) {
	return NewCatalogFiltryDliaElektronnykhPisemUsloviiaFiltra(c.getEntity(key, fields))
}
func (c *Client) CatalogFiltryDliaElektronnykhPisemUsloviiaFiltras(where Where) (*[]CatalogFiltryDliaElektronnykhPisemUsloviiaFiltra, error) {
	type ReturnObj struct {
		Value []CatalogFiltryDliaElektronnykhPisemUsloviiaFiltra `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ФильтрыДляЭлектронныхПисем_УсловияФильтра", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogFiltryDliaElektronnykhPisemUsloviiaFiltra(key PrimaryCatalogFiltryDliaElektronnykhPisemUsloviiaFiltra, entity CatalogFiltryDliaElektronnykhPisemUsloviiaFiltra) (*CatalogFiltryDliaElektronnykhPisemUsloviiaFiltra, error) {
	return NewCatalogFiltryDliaElektronnykhPisemUsloviiaFiltra(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogFiltryDliaElektronnykhPisemUsloviiaFiltra(key PrimaryCatalogFiltryDliaElektronnykhPisemUsloviiaFiltra) error {
	return c.removeEntity(key)
}

type DocumentPreiskurantTsenNaTsvKamni struct {
	Key             Guid                                                `json:"Ref_Key,omitempty"`
	DataVersion     *String                                             `json:"DataVersion,omitempty"`
	Number          *String                                             `json:"Number,omitempty"`
	Date            *DateTime                                           `json:"Date,omitempty"`
	DeletionMark    *Boolean                                            `json:"DeletionMark,omitempty"`
	Posted          *Boolean                                            `json:"Posted,omitempty"`
	KamenKey        *Guid                                               `json:"Камень_Key,omitempty"`
	Comment         *String                                             `json:"Комментарий,omitempty"`
	RassevKey       *Guid                                               `json:"Рассев_Key,omitempty"`
	TipTsenKey      *Guid                                               `json:"ТипЦен_Key,omitempty"`
	FormaOgrankiKey *Guid                                               `json:"ФормаОгранки_Key,omitempty"`
	TsvetKamniaKey  *Guid                                               `json:"ЦветКамня_Key,omitempty"`
	Tablitsa        *[]DocumentPreiskurantTsenNaTsvKamniTablitsaRowType `json:"Таблица,omitempty"`
}

func (DocumentPreiskurantTsenNaTsvKamni) APIEntityType() string {
	return "Document_ПрейскурантЦенНаЦвКамни"
}
func NewDocumentPreiskurantTsenNaTsvKamni(data string, prevError error) (*DocumentPreiskurantTsenNaTsvKamni, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPreiskurantTsenNaTsvKamni)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPreiskurantTsenNaTsvKamni(entity DocumentPreiskurantTsenNaTsvKamni) (*DocumentPreiskurantTsenNaTsvKamni, error) {
	return NewDocumentPreiskurantTsenNaTsvKamni(c.createEntity(entity))
}
func (c *Client) DocumentPreiskurantTsenNaTsvKamni(key PrimaryDocumentPreiskurantTsenNaTsvKamni, fields []string) (*DocumentPreiskurantTsenNaTsvKamni, error) {
	return NewDocumentPreiskurantTsenNaTsvKamni(c.getEntity(key, fields))
}
func (c *Client) DocumentPreiskurantTsenNaTsvKamnis(where Where) (*[]DocumentPreiskurantTsenNaTsvKamni, error) {
	type ReturnObj struct {
		Value []DocumentPreiskurantTsenNaTsvKamni `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПрейскурантЦенНаЦвКамни", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPreiskurantTsenNaTsvKamni(key PrimaryDocumentPreiskurantTsenNaTsvKamni, entity DocumentPreiskurantTsenNaTsvKamni) (*DocumentPreiskurantTsenNaTsvKamni, error) {
	return NewDocumentPreiskurantTsenNaTsvKamni(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPreiskurantTsenNaTsvKamni(key PrimaryDocumentPreiskurantTsenNaTsvKamni) error {
	return c.removeEntity(key)
}

type DocumentPreiskurantTsenNaTsvKamniTablitsa struct {
	Key             Guid    `json:"Ref_Key,omitempty"`
	LineNumber      Int64   `json:"LineNumber,omitempty"`
	Razmer1Do       *Double `json:"Размер1До,omitempty"`
	Razmer1Ot       *Double `json:"Размер1От,omitempty"`
	RassevKey       *Guid   `json:"Рассев_Key,omitempty"`
	FormaOgrankiKey *Guid   `json:"ФормаОгранки_Key,omitempty"`
	TsvetKamniaKey  *Guid   `json:"ЦветКамня_Key,omitempty"`
	Cost            *Int64  `json:"Цена,omitempty"`
}

func (DocumentPreiskurantTsenNaTsvKamniTablitsa) APIEntityType() string {
	return "Document_ПрейскурантЦенНаЦвКамни_Таблица"
}
func NewDocumentPreiskurantTsenNaTsvKamniTablitsa(data string, prevError error) (*DocumentPreiskurantTsenNaTsvKamniTablitsa, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPreiskurantTsenNaTsvKamniTablitsa)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPreiskurantTsenNaTsvKamniTablitsa(entity DocumentPreiskurantTsenNaTsvKamniTablitsa) (*DocumentPreiskurantTsenNaTsvKamniTablitsa, error) {
	return NewDocumentPreiskurantTsenNaTsvKamniTablitsa(c.createEntity(entity))
}
func (c *Client) DocumentPreiskurantTsenNaTsvKamniTablitsa(key PrimaryDocumentPreiskurantTsenNaTsvKamniTablitsa, fields []string) (*DocumentPreiskurantTsenNaTsvKamniTablitsa, error) {
	return NewDocumentPreiskurantTsenNaTsvKamniTablitsa(c.getEntity(key, fields))
}
func (c *Client) DocumentPreiskurantTsenNaTsvKamniTablitsas(where Where) (*[]DocumentPreiskurantTsenNaTsvKamniTablitsa, error) {
	type ReturnObj struct {
		Value []DocumentPreiskurantTsenNaTsvKamniTablitsa `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПрейскурантЦенНаЦвКамни_Таблица", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPreiskurantTsenNaTsvKamniTablitsa(key PrimaryDocumentPreiskurantTsenNaTsvKamniTablitsa, entity DocumentPreiskurantTsenNaTsvKamniTablitsa) (*DocumentPreiskurantTsenNaTsvKamniTablitsa, error) {
	return NewDocumentPreiskurantTsenNaTsvKamniTablitsa(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPreiskurantTsenNaTsvKamniTablitsa(key PrimaryDocumentPreiskurantTsenNaTsvKamniTablitsa) error {
	return c.removeEntity(key)
}

type Size struct {
	Key            Guid     `json:"Ref_Key,omitempty"`
	DataVersion    *String  `json:"DataVersion,omitempty"`
	Description    *String  `json:"Description,omitempty"`
	Code           *String  `json:"Code,omitempty"`
	DeletionMark   *Boolean `json:"DeletionMark,omitempty"`
	BIdentifikator *String  `json:"Б_Идентификатор,omitempty"`
}

func (Size) APIEntityType() string {
	return "Catalog_Размер"
}
func NewSize(data string, prevError error) (*Size, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(Size)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateSize(entity Size) (*Size, error) {
	return NewSize(c.createEntity(entity))
}
func (c *Client) Size(key PrimarySize, fields []string) (*Size, error) {
	return NewSize(c.getEntity(key, fields))
}
func (c *Client) Sizes(where Where) (*[]Size, error) {
	type ReturnObj struct {
		Value []Size `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Размер", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateSize(key PrimarySize, entity Size) (*Size, error) {
	return NewSize(c.updateEntity(key, entity))
}
func (c *Client) DeleteSize(key PrimarySize) error {
	return c.removeEntity(key)
}

type CatalogTipyDragotsennykhMetallov struct {
	Key            Guid     `json:"Ref_Key,omitempty"`
	DataVersion    *String  `json:"DataVersion,omitempty"`
	Code           *String  `json:"Code,omitempty"`
	DeletionMark   *Boolean `json:"DeletionMark,omitempty"`
	ProbaChistoty  *Double  `json:"ПробаЧистоты,omitempty"`
	BIdentifikator *String  `json:"Б_Идентификатор,omitempty"`
}

func (CatalogTipyDragotsennykhMetallov) APIEntityType() string {
	return "Catalog_ТипыДрагоценныхМеталлов"
}
func NewCatalogTipyDragotsennykhMetallov(data string, prevError error) (*CatalogTipyDragotsennykhMetallov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogTipyDragotsennykhMetallov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogTipyDragotsennykhMetallov(entity CatalogTipyDragotsennykhMetallov) (*CatalogTipyDragotsennykhMetallov, error) {
	return NewCatalogTipyDragotsennykhMetallov(c.createEntity(entity))
}
func (c *Client) CatalogTipyDragotsennykhMetallov(key PrimaryCatalogTipyDragotsennykhMetallov, fields []string) (*CatalogTipyDragotsennykhMetallov, error) {
	return NewCatalogTipyDragotsennykhMetallov(c.getEntity(key, fields))
}
func (c *Client) CatalogTipyDragotsennykhMetallovs(where Where) (*[]CatalogTipyDragotsennykhMetallov, error) {
	type ReturnObj struct {
		Value []CatalogTipyDragotsennykhMetallov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ТипыДрагоценныхМеталлов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogTipyDragotsennykhMetallov(key PrimaryCatalogTipyDragotsennykhMetallov, entity CatalogTipyDragotsennykhMetallov) (*CatalogTipyDragotsennykhMetallov, error) {
	return NewCatalogTipyDragotsennykhMetallov(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogTipyDragotsennykhMetallov(key PrimaryCatalogTipyDragotsennykhMetallov) error {
	return c.removeEntity(key)
}

type DocumentTelemarketing struct {
	Key                Guid                                      `json:"Ref_Key,omitempty"`
	DataVersion        *String                                   `json:"DataVersion,omitempty"`
	Number             *String                                   `json:"Number,omitempty"`
	Date               *DateTime                                 `json:"Date,omitempty"`
	DeletionMark       *Boolean                                  `json:"DeletionMark,omitempty"`
	Posted             *Boolean                                  `json:"Posted,omitempty"`
	AvtorKey           *Guid                                     `json:"Автор_Key,omitempty"`
	Osnovanie          *String                                   `json:"Основание,omitempty"`
	Comment            *String                                   `json:"Комментарий,omitempty"`
	Vazhnost           *String                                   `json:"Важность,omitempty"`
	ProektKey          *Guid                                     `json:"Проект_Key,omitempty"`
	SostoianieSobytiia *String                                   `json:"СостояниеСобытия,omitempty"`
	OtvetstvennyiKey   *Guid                                     `json:"Ответственный_Key,omitempty"`
	Tema               *String                                   `json:"Тема,omitempty"`
	TipovaiaAnketaKey  *Guid                                     `json:"ТиповаяАнкета_Key,omitempty"`
	VremiaNapominaniia *DateTime                                 `json:"ВремяНапоминания,omitempty"`
	NapomnitOSobytii   *Boolean                                  `json:"НапомнитьОСобытии,omitempty"`
	Uchastniki         *[]DocumentTelemarketingUchastnikiRowType `json:"Участники,omitempty"`
	OsnovanieType      *String                                   `json:"Основание_Type,omitempty"`
}

func (DocumentTelemarketing) APIEntityType() string {
	return "Document_Телемаркетинг"
}
func NewDocumentTelemarketing(data string, prevError error) (*DocumentTelemarketing, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentTelemarketing)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentTelemarketing(entity DocumentTelemarketing) (*DocumentTelemarketing, error) {
	return NewDocumentTelemarketing(c.createEntity(entity))
}
func (c *Client) DocumentTelemarketing(key PrimaryDocumentTelemarketing, fields []string) (*DocumentTelemarketing, error) {
	return NewDocumentTelemarketing(c.getEntity(key, fields))
}
func (c *Client) DocumentTelemarketings(where Where) (*[]DocumentTelemarketing, error) {
	type ReturnObj struct {
		Value []DocumentTelemarketing `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_Телемаркетинг", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentTelemarketing(key PrimaryDocumentTelemarketing, entity DocumentTelemarketing) (*DocumentTelemarketing, error) {
	return NewDocumentTelemarketing(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentTelemarketing(key PrimaryDocumentTelemarketing) error {
	return c.removeEntity(key)
}

type DocumentTelemarketingUchastniki struct {
	Key                     Guid     `json:"Ref_Key,omitempty"`
	LineNumber              Int64    `json:"LineNumber,omitempty"`
	KontragentKey           *Guid    `json:"Контрагент_Key,omitempty"`
	NaimenovaniePolnoe      *String  `json:"НаименованиеПолное,omitempty"`
	KontaktnoeLitsoKey      *Guid    `json:"КонтактноеЛицо_Key,omitempty"`
	Telefon                 *String  `json:"Телефон,omitempty"`
	RezultatObrabotkiZvonka *String  `json:"РезультатОбработкиЗвонка,omitempty"`
	EstInteres              *Boolean `json:"ЕстьИнтерес,omitempty"`
	SobytieKey              *Guid    `json:"Событие_Key,omitempty"`
	OprosKey                *Guid    `json:"Опрос_Key,omitempty"`
	Opisanie                *String  `json:"Описание,omitempty"`
}

func (DocumentTelemarketingUchastniki) APIEntityType() string {
	return "Document_Телемаркетинг_Участники"
}
func NewDocumentTelemarketingUchastniki(data string, prevError error) (*DocumentTelemarketingUchastniki, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentTelemarketingUchastniki)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentTelemarketingUchastniki(entity DocumentTelemarketingUchastniki) (*DocumentTelemarketingUchastniki, error) {
	return NewDocumentTelemarketingUchastniki(c.createEntity(entity))
}
func (c *Client) DocumentTelemarketingUchastniki(key PrimaryDocumentTelemarketingUchastniki, fields []string) (*DocumentTelemarketingUchastniki, error) {
	return NewDocumentTelemarketingUchastniki(c.getEntity(key, fields))
}
func (c *Client) DocumentTelemarketingUchastnikis(where Where) (*[]DocumentTelemarketingUchastniki, error) {
	type ReturnObj struct {
		Value []DocumentTelemarketingUchastniki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_Телемаркетинг_Участники", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentTelemarketingUchastniki(key PrimaryDocumentTelemarketingUchastniki, entity DocumentTelemarketingUchastniki) (*DocumentTelemarketingUchastniki, error) {
	return NewDocumentTelemarketingUchastniki(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentTelemarketingUchastniki(key PrimaryDocumentTelemarketingUchastniki) error {
	return c.removeEntity(key)
}

type DocumentVozvratDavalcheskogoMetalla struct {
	Key                   Guid      `json:"Ref_Key,omitempty"`
	DataVersion           *String   `json:"DataVersion,omitempty"`
	Number                *String   `json:"Number,omitempty"`
	Date                  *DateTime `json:"Date,omitempty"`
	DeletionMark          *Boolean  `json:"DeletionMark,omitempty"`
	Posted                *Boolean  `json:"Posted,omitempty"`
	Weight                *Double   `json:"Вес,omitempty"`
	DogovorKontragentaKey *Guid     `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanieKey  *Guid     `json:"ДокументОснование_Key,omitempty"`
	Comment               *String   `json:"Комментарий,omitempty"`
	KontragentKey         *Guid     `json:"Контрагент_Key,omitempty"`
	ItemKey               *Guid     `json:"Номенклатура_Key,omitempty"`
	OrganizatsiiaKey      *Guid     `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey      *Guid     `json:"Ответственный_Key,omitempty"`
	DepartmentKey         *Guid     `json:"Склад_Key,omitempty"`
}

func (DocumentVozvratDavalcheskogoMetalla) APIEntityType() string {
	return "Document_ВозвратДавальческогоМеталла"
}
func NewDocumentVozvratDavalcheskogoMetalla(data string, prevError error) (*DocumentVozvratDavalcheskogoMetalla, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentVozvratDavalcheskogoMetalla)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentVozvratDavalcheskogoMetalla(entity DocumentVozvratDavalcheskogoMetalla) (*DocumentVozvratDavalcheskogoMetalla, error) {
	return NewDocumentVozvratDavalcheskogoMetalla(c.createEntity(entity))
}
func (c *Client) DocumentVozvratDavalcheskogoMetalla(key PrimaryDocumentVozvratDavalcheskogoMetalla, fields []string) (*DocumentVozvratDavalcheskogoMetalla, error) {
	return NewDocumentVozvratDavalcheskogoMetalla(c.getEntity(key, fields))
}
func (c *Client) DocumentVozvratDavalcheskogoMetallas(where Where) (*[]DocumentVozvratDavalcheskogoMetalla, error) {
	type ReturnObj struct {
		Value []DocumentVozvratDavalcheskogoMetalla `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВозвратДавальческогоМеталла", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentVozvratDavalcheskogoMetalla(key PrimaryDocumentVozvratDavalcheskogoMetalla, entity DocumentVozvratDavalcheskogoMetalla) (*DocumentVozvratDavalcheskogoMetalla, error) {
	return NewDocumentVozvratDavalcheskogoMetalla(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentVozvratDavalcheskogoMetalla(key PrimaryDocumentVozvratDavalcheskogoMetalla) error {
	return c.removeEntity(key)
}

type CatalogAdresnyeSokrashcheniia struct {
	Key           Guid     `json:"Ref_Key,omitempty"`
	DataVersion   *String  `json:"DataVersion,omitempty"`
	Description   *String  `json:"Description,omitempty"`
	Code          *String  `json:"Code,omitempty"`
	DeletionMark  *Boolean `json:"DeletionMark,omitempty"`
	Sokrashchenie *String  `json:"Сокращение,omitempty"`
	Uroven        *Int16   `json:"Уровень,omitempty"`
}

func (CatalogAdresnyeSokrashcheniia) APIEntityType() string {
	return "Catalog_АдресныеСокращения"
}
func NewCatalogAdresnyeSokrashcheniia(data string, prevError error) (*CatalogAdresnyeSokrashcheniia, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogAdresnyeSokrashcheniia)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogAdresnyeSokrashcheniia(entity CatalogAdresnyeSokrashcheniia) (*CatalogAdresnyeSokrashcheniia, error) {
	return NewCatalogAdresnyeSokrashcheniia(c.createEntity(entity))
}
func (c *Client) CatalogAdresnyeSokrashcheniia(key PrimaryCatalogAdresnyeSokrashcheniia, fields []string) (*CatalogAdresnyeSokrashcheniia, error) {
	return NewCatalogAdresnyeSokrashcheniia(c.getEntity(key, fields))
}
func (c *Client) CatalogAdresnyeSokrashcheniias(where Where) (*[]CatalogAdresnyeSokrashcheniia, error) {
	type ReturnObj struct {
		Value []CatalogAdresnyeSokrashcheniia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_АдресныеСокращения", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogAdresnyeSokrashcheniia(key PrimaryCatalogAdresnyeSokrashcheniia, entity CatalogAdresnyeSokrashcheniia) (*CatalogAdresnyeSokrashcheniia, error) {
	return NewCatalogAdresnyeSokrashcheniia(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogAdresnyeSokrashcheniia(key PrimaryCatalogAdresnyeSokrashcheniia) error {
	return c.removeEntity(key)
}

type DocumentRassylkaAnket struct {
	Key                                                 Guid                                       `json:"Ref_Key,omitempty"`
	DataVersion                                         *String                                    `json:"DataVersion,omitempty"`
	Number                                              *String                                    `json:"Number,omitempty"`
	Date                                                *DateTime                                  `json:"Date,omitempty"`
	DeletionMark                                        *Boolean                                   `json:"DeletionMark,omitempty"`
	Posted                                              *Boolean                                   `json:"Posted,omitempty"`
	AnketaKey                                           *Guid                                      `json:"Анкета_Key,omitempty"`
	PervichnaiaRassylkaKey                              *Guid                                      `json:"ПервичнаяРассылка_Key,omitempty"`
	SUvedomleniemOPoluchenii                            *Boolean                                   `json:"СУведомлениемОПолучении,omitempty"`
	TekstPisma                                          *String                                    `json:"ТекстПисьма,omitempty"`
	UchetnaiaZapisDliaOtpravki                          *String                                    `json:"УчетнаяЗаписьДляОтправки,omitempty"`
	ElektronnyiAdresOtvetov                             *String                                    `json:"ЭлектронныйАдресОтветов,omitempty"`
	ElektronnyiAdresOtvetovVstroennyiPochtovyiKlientKey *Guid                                      `json:"ЭлектронныйАдресОтветовВстроенныйПочтовыйКлиент_Key,omitempty"`
	Vlozheniia                                          *[]DocumentRassylkaAnketVlozheniiaRowType  `json:"Вложения,omitempty"`
	Poluchateli                                         *[]DocumentRassylkaAnketPoluchateliRowType `json:"Получатели,omitempty"`
	UchetnaiaZapisDliaOtpravkiType                      *String                                    `json:"УчетнаяЗаписьДляОтправки_Type,omitempty"`
	ElektronnyiAdresOtvetovType                         *String                                    `json:"ЭлектронныйАдресОтветов_Type,omitempty"`
}

func (DocumentRassylkaAnket) APIEntityType() string {
	return "Document_РассылкаАнкет"
}
func NewDocumentRassylkaAnket(data string, prevError error) (*DocumentRassylkaAnket, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentRassylkaAnket)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentRassylkaAnket(entity DocumentRassylkaAnket) (*DocumentRassylkaAnket, error) {
	return NewDocumentRassylkaAnket(c.createEntity(entity))
}
func (c *Client) DocumentRassylkaAnket(key PrimaryDocumentRassylkaAnket, fields []string) (*DocumentRassylkaAnket, error) {
	return NewDocumentRassylkaAnket(c.getEntity(key, fields))
}
func (c *Client) DocumentRassylkaAnkets(where Where) (*[]DocumentRassylkaAnket, error) {
	type ReturnObj struct {
		Value []DocumentRassylkaAnket `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_РассылкаАнкет", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentRassylkaAnket(key PrimaryDocumentRassylkaAnket, entity DocumentRassylkaAnket) (*DocumentRassylkaAnket, error) {
	return NewDocumentRassylkaAnket(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentRassylkaAnket(key PrimaryDocumentRassylkaAnket) error {
	return c.removeEntity(key)
}

type DocumentRassylkaAnketVlozheniia struct {
	Key                 Guid    `json:"Ref_Key,omitempty"`
	LineNumber          Int64   `json:"LineNumber,omitempty"`
	VlozhenieBase64Data *Binary `json:"Вложение_Base64Data,omitempty"`
	ImiaFaila           *String `json:"ИмяФайла,omitempty"`
	VlozhenieType       *String `json:"Вложение_Type,omitempty"`
	Vlozhenie           *Stream `json:"Вложение,omitempty"`
}

func (DocumentRassylkaAnketVlozheniia) APIEntityType() string {
	return "Document_РассылкаАнкет_Вложения"
}
func NewDocumentRassylkaAnketVlozheniia(data string, prevError error) (*DocumentRassylkaAnketVlozheniia, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentRassylkaAnketVlozheniia)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentRassylkaAnketVlozheniia(entity DocumentRassylkaAnketVlozheniia) (*DocumentRassylkaAnketVlozheniia, error) {
	return NewDocumentRassylkaAnketVlozheniia(c.createEntity(entity))
}
func (c *Client) DocumentRassylkaAnketVlozheniia(key PrimaryDocumentRassylkaAnketVlozheniia, fields []string) (*DocumentRassylkaAnketVlozheniia, error) {
	return NewDocumentRassylkaAnketVlozheniia(c.getEntity(key, fields))
}
func (c *Client) DocumentRassylkaAnketVlozheniias(where Where) (*[]DocumentRassylkaAnketVlozheniia, error) {
	type ReturnObj struct {
		Value []DocumentRassylkaAnketVlozheniia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_РассылкаАнкет_Вложения", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentRassylkaAnketVlozheniia(key PrimaryDocumentRassylkaAnketVlozheniia, entity DocumentRassylkaAnketVlozheniia) (*DocumentRassylkaAnketVlozheniia, error) {
	return NewDocumentRassylkaAnketVlozheniia(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentRassylkaAnketVlozheniia(key PrimaryDocumentRassylkaAnketVlozheniia) error {
	return c.removeEntity(key)
}

type DocumentRassylkaAnketPoluchateli struct {
	Key         Guid    `json:"Ref_Key,omitempty"`
	LineNumber  Int64   `json:"LineNumber,omitempty"`
	Obieekt     *String `json:"Объект,omitempty"`
	Poluchatel  *String `json:"Получатель,omitempty"`
	ObieektType *String `json:"Объект_Type,omitempty"`
}

func (DocumentRassylkaAnketPoluchateli) APIEntityType() string {
	return "Document_РассылкаАнкет_Получатели"
}
func NewDocumentRassylkaAnketPoluchateli(data string, prevError error) (*DocumentRassylkaAnketPoluchateli, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentRassylkaAnketPoluchateli)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentRassylkaAnketPoluchateli(entity DocumentRassylkaAnketPoluchateli) (*DocumentRassylkaAnketPoluchateli, error) {
	return NewDocumentRassylkaAnketPoluchateli(c.createEntity(entity))
}
func (c *Client) DocumentRassylkaAnketPoluchateli(key PrimaryDocumentRassylkaAnketPoluchateli, fields []string) (*DocumentRassylkaAnketPoluchateli, error) {
	return NewDocumentRassylkaAnketPoluchateli(c.getEntity(key, fields))
}
func (c *Client) DocumentRassylkaAnketPoluchatelis(where Where) (*[]DocumentRassylkaAnketPoluchateli, error) {
	type ReturnObj struct {
		Value []DocumentRassylkaAnketPoluchateli `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_РассылкаАнкет_Получатели", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentRassylkaAnketPoluchateli(key PrimaryDocumentRassylkaAnketPoluchateli, entity DocumentRassylkaAnketPoluchateli) (*DocumentRassylkaAnketPoluchateli, error) {
	return NewDocumentRassylkaAnketPoluchateli(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentRassylkaAnketPoluchateli(key PrimaryDocumentRassylkaAnketPoluchateli) error {
	return c.removeEntity(key)
}

type CatalogVidyDeiatelnostiKontragentov struct {
	Key          Guid     `json:"Ref_Key,omitempty"`
	DataVersion  *String  `json:"DataVersion,omitempty"`
	Description  *String  `json:"Description,omitempty"`
	Code         *String  `json:"Code,omitempty"`
	DeletionMark *Boolean `json:"DeletionMark,omitempty"`
}

func (CatalogVidyDeiatelnostiKontragentov) APIEntityType() string {
	return "Catalog_ВидыДеятельностиКонтрагентов"
}
func NewCatalogVidyDeiatelnostiKontragentov(data string, prevError error) (*CatalogVidyDeiatelnostiKontragentov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogVidyDeiatelnostiKontragentov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogVidyDeiatelnostiKontragentov(entity CatalogVidyDeiatelnostiKontragentov) (*CatalogVidyDeiatelnostiKontragentov, error) {
	return NewCatalogVidyDeiatelnostiKontragentov(c.createEntity(entity))
}
func (c *Client) CatalogVidyDeiatelnostiKontragentov(key PrimaryCatalogVidyDeiatelnostiKontragentov, fields []string) (*CatalogVidyDeiatelnostiKontragentov, error) {
	return NewCatalogVidyDeiatelnostiKontragentov(c.getEntity(key, fields))
}
func (c *Client) CatalogVidyDeiatelnostiKontragentovs(where Where) (*[]CatalogVidyDeiatelnostiKontragentov, error) {
	type ReturnObj struct {
		Value []CatalogVidyDeiatelnostiKontragentov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ВидыДеятельностиКонтрагентов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogVidyDeiatelnostiKontragentov(key PrimaryCatalogVidyDeiatelnostiKontragentov, entity CatalogVidyDeiatelnostiKontragentov) (*CatalogVidyDeiatelnostiKontragentov, error) {
	return NewCatalogVidyDeiatelnostiKontragentov(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogVidyDeiatelnostiKontragentov(key PrimaryCatalogVidyDeiatelnostiKontragentov) error {
	return c.removeEntity(key)
}

type CatalogTorgovoeOborudovanie struct {
	Key                        Guid     `json:"Ref_Key,omitempty"`
	DataVersion                *String  `json:"DataVersion,omitempty"`
	Description                *String  `json:"Description,omitempty"`
	Code                       *String  `json:"Code,omitempty"`
	DeletionMark               *Boolean `json:"DeletionMark,omitempty"`
	Vid                        *String  `json:"Вид,omitempty"`
	Model                      *String  `json:"Модель,omitempty"`
	ObrabotkaObsluzhivaniiaKey *Guid    `json:"ОбработкаОбслуживания_Key,omitempty"`
}

func (CatalogTorgovoeOborudovanie) APIEntityType() string {
	return "Catalog_ТорговоеОборудование"
}
func NewCatalogTorgovoeOborudovanie(data string, prevError error) (*CatalogTorgovoeOborudovanie, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogTorgovoeOborudovanie)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogTorgovoeOborudovanie(entity CatalogTorgovoeOborudovanie) (*CatalogTorgovoeOborudovanie, error) {
	return NewCatalogTorgovoeOborudovanie(c.createEntity(entity))
}
func (c *Client) CatalogTorgovoeOborudovanie(key PrimaryCatalogTorgovoeOborudovanie, fields []string) (*CatalogTorgovoeOborudovanie, error) {
	return NewCatalogTorgovoeOborudovanie(c.getEntity(key, fields))
}
func (c *Client) CatalogTorgovoeOborudovanies(where Where) (*[]CatalogTorgovoeOborudovanie, error) {
	type ReturnObj struct {
		Value []CatalogTorgovoeOborudovanie `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ТорговоеОборудование", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogTorgovoeOborudovanie(key PrimaryCatalogTorgovoeOborudovanie, entity CatalogTorgovoeOborudovanie) (*CatalogTorgovoeOborudovanie, error) {
	return NewCatalogTorgovoeOborudovanie(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogTorgovoeOborudovanie(key PrimaryCatalogTorgovoeOborudovanie) error {
	return c.removeEntity(key)
}

type CatalogSkhemyRealizatsii struct {
	Key                       Guid                                          `json:"Ref_Key,omitempty"`
	DataVersion               *String                                       `json:"DataVersion,omitempty"`
	Description               *String                                       `json:"Description,omitempty"`
	Code                      *String                                       `json:"Code,omitempty"`
	DeletionMark              *Boolean                                      `json:"DeletionMark,omitempty"`
	OrganizatsiiaKey          *Guid                                         `json:"Организация_Key,omitempty"`
	OrganizatsiiaProdavetsKey *Guid                                         `json:"ОрганизацияПродавец_Key,omitempty"`
	EtapySkhemy               *[]CatalogSkhemyRealizatsiiEtapySkhemyRowType `json:"ЭтапыСхемы,omitempty"`
}

func (CatalogSkhemyRealizatsii) APIEntityType() string {
	return "Catalog_СхемыРеализации"
}
func NewCatalogSkhemyRealizatsii(data string, prevError error) (*CatalogSkhemyRealizatsii, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogSkhemyRealizatsii)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogSkhemyRealizatsii(entity CatalogSkhemyRealizatsii) (*CatalogSkhemyRealizatsii, error) {
	return NewCatalogSkhemyRealizatsii(c.createEntity(entity))
}
func (c *Client) CatalogSkhemyRealizatsii(key PrimaryCatalogSkhemyRealizatsii, fields []string) (*CatalogSkhemyRealizatsii, error) {
	return NewCatalogSkhemyRealizatsii(c.getEntity(key, fields))
}
func (c *Client) CatalogSkhemyRealizatsiis(where Where) (*[]CatalogSkhemyRealizatsii, error) {
	type ReturnObj struct {
		Value []CatalogSkhemyRealizatsii `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_СхемыРеализации", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogSkhemyRealizatsii(key PrimaryCatalogSkhemyRealizatsii, entity CatalogSkhemyRealizatsii) (*CatalogSkhemyRealizatsii, error) {
	return NewCatalogSkhemyRealizatsii(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogSkhemyRealizatsii(key PrimaryCatalogSkhemyRealizatsii) error {
	return c.removeEntity(key)
}

type CatalogSkhemyRealizatsiiEtapySkhemy struct {
	Key                       Guid     `json:"Ref_Key,omitempty"`
	LineNumber                Int64    `json:"LineNumber,omitempty"`
	DogovorPokupkiKey         *Guid    `json:"ДоговорПокупки_Key,omitempty"`
	DogovorProdazhiKey        *Guid    `json:"ДоговорПродажи_Key,omitempty"`
	ZnachenieNatsenki         *String  `json:"ЗначениеНаценки,omitempty"`
	KontragentPokupatelKey    *Guid    `json:"КонтрагентПокупатель_Key,omitempty"`
	KontragentProdavetsKey    *Guid    `json:"КонтрагентПродавец_Key,omitempty"`
	OkrugliatVBolshuiuStoronu *Boolean `json:"ОкруглятьВБольшуюСторону,omitempty"`
	OrganizatsiiaPokupatelKey *Guid    `json:"ОрганизацияПокупатель_Key,omitempty"`
	OrganizatsiiaProdavetsKey *Guid    `json:"ОрганизацияПродавец_Key,omitempty"`
	PoriadokOkrugleniia       *String  `json:"ПорядокОкругления,omitempty"`
	SposobNatsenki            *Int16   `json:"СпособНаценки,omitempty"`
	TipNatsenki               *Int16   `json:"ТипНаценки,omitempty"`
	ZnachenieNatsenkiType     *String  `json:"ЗначениеНаценки_Type,omitempty"`
}

func (CatalogSkhemyRealizatsiiEtapySkhemy) APIEntityType() string {
	return "Catalog_СхемыРеализации_ЭтапыСхемы"
}
func NewCatalogSkhemyRealizatsiiEtapySkhemy(data string, prevError error) (*CatalogSkhemyRealizatsiiEtapySkhemy, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogSkhemyRealizatsiiEtapySkhemy)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogSkhemyRealizatsiiEtapySkhemy(entity CatalogSkhemyRealizatsiiEtapySkhemy) (*CatalogSkhemyRealizatsiiEtapySkhemy, error) {
	return NewCatalogSkhemyRealizatsiiEtapySkhemy(c.createEntity(entity))
}
func (c *Client) CatalogSkhemyRealizatsiiEtapySkhemy(key PrimaryCatalogSkhemyRealizatsiiEtapySkhemy, fields []string) (*CatalogSkhemyRealizatsiiEtapySkhemy, error) {
	return NewCatalogSkhemyRealizatsiiEtapySkhemy(c.getEntity(key, fields))
}
func (c *Client) CatalogSkhemyRealizatsiiEtapySkhemys(where Where) (*[]CatalogSkhemyRealizatsiiEtapySkhemy, error) {
	type ReturnObj struct {
		Value []CatalogSkhemyRealizatsiiEtapySkhemy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_СхемыРеализации_ЭтапыСхемы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogSkhemyRealizatsiiEtapySkhemy(key PrimaryCatalogSkhemyRealizatsiiEtapySkhemy, entity CatalogSkhemyRealizatsiiEtapySkhemy) (*CatalogSkhemyRealizatsiiEtapySkhemy, error) {
	return NewCatalogSkhemyRealizatsiiEtapySkhemy(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogSkhemyRealizatsiiEtapySkhemy(key PrimaryCatalogSkhemyRealizatsiiEtapySkhemy) error {
	return c.removeEntity(key)
}

type CatalogPodkliuchaemoeOborudovanie struct {
	Key                     Guid     `json:"Ref_Key,omitempty"`
	DataVersion             *String  `json:"DataVersion,omitempty"`
	Description             *String  `json:"Description,omitempty"`
	DeletionMark            *Boolean `json:"DeletionMark,omitempty"`
	VersiiaKomponenty       *String  `json:"ВерсияКомпоненты,omitempty"`
	IdentifikatorUstroistva *String  `json:"ИдентификаторУстройства,omitempty"`
	UstroistvoOtkliucheno   *Boolean `json:"УстройствоОтключено,omitempty"`
	UstroistvoIspolzuetsia  *Boolean `json:"УстройствоИспользуется,omitempty"`
	ObrabotchikDraivera     *String  `json:"ОбработчикДрайвера,omitempty"`
	ParametryBase64Data     *Binary  `json:"Параметры_Base64Data,omitempty"`
	RabocheeMestoKey        *Guid    `json:"РабочееМесто_Key,omitempty"`
	TipOborudovaniia        *String  `json:"ТипОборудования,omitempty"`
	TrebuetsiaPereustanovka *Boolean `json:"ТребуетсяПереустановка,omitempty"`
	ParametryType           *String  `json:"Параметры_Type,omitempty"`
	Parametry               *Stream  `json:"Параметры,omitempty"`
}

func (CatalogPodkliuchaemoeOborudovanie) APIEntityType() string {
	return "Catalog_ПодключаемоеОборудование"
}
func NewCatalogPodkliuchaemoeOborudovanie(data string, prevError error) (*CatalogPodkliuchaemoeOborudovanie, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogPodkliuchaemoeOborudovanie)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogPodkliuchaemoeOborudovanie(entity CatalogPodkliuchaemoeOborudovanie) (*CatalogPodkliuchaemoeOborudovanie, error) {
	return NewCatalogPodkliuchaemoeOborudovanie(c.createEntity(entity))
}
func (c *Client) CatalogPodkliuchaemoeOborudovanie(key PrimaryCatalogPodkliuchaemoeOborudovanie, fields []string) (*CatalogPodkliuchaemoeOborudovanie, error) {
	return NewCatalogPodkliuchaemoeOborudovanie(c.getEntity(key, fields))
}
func (c *Client) CatalogPodkliuchaemoeOborudovanies(where Where) (*[]CatalogPodkliuchaemoeOborudovanie, error) {
	type ReturnObj struct {
		Value []CatalogPodkliuchaemoeOborudovanie `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ПодключаемоеОборудование", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogPodkliuchaemoeOborudovanie(key PrimaryCatalogPodkliuchaemoeOborudovanie, entity CatalogPodkliuchaemoeOborudovanie) (*CatalogPodkliuchaemoeOborudovanie, error) {
	return NewCatalogPodkliuchaemoeOborudovanie(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogPodkliuchaemoeOborudovanie(key PrimaryCatalogPodkliuchaemoeOborudovanie) error {
	return c.removeEntity(key)
}

type DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnoshenii struct {
	Key                                Guid                                                                                                     `json:"Ref_Key,omitempty"`
	DataVersion                        *String                                                                                                  `json:"DataVersion,omitempty"`
	Number                             *String                                                                                                  `json:"Number,omitempty"`
	Date                               *DateTime                                                                                                `json:"Date,omitempty"`
	DeletionMark                       *Boolean                                                                                                 `json:"DeletionMark,omitempty"`
	Posted                             *Boolean                                                                                                 `json:"Posted,omitempty"`
	XKlassKon                          *Double                                                                                                  `json:"XКлассКон,omitempty"`
	XKlassNach                         *Double                                                                                                  `json:"XКлассНач,omitempty"`
	YKlassKon                          *Double                                                                                                  `json:"YКлассКон,omitempty"`
	YKlassNach                         *Double                                                                                                  `json:"YКлассНач,omitempty"`
	ZKlassKon                          *Double                                                                                                  `json:"ZКлассКон,omitempty"`
	ZKlassNach                         *Double                                                                                                  `json:"ZКлассНач,omitempty"`
	DataOkonchaniia                    *DateTime                                                                                                `json:"ДатаОкончания,omitempty"`
	KolichestvoPeriodovAnaliza         *Int16                                                                                                   `json:"КоличествоПериодовАнализа,omitempty"`
	Comment                            *String                                                                                                  `json:"Комментарий,omitempty"`
	Periodichnost                      *String                                                                                                  `json:"Периодичность,omitempty"`
	RazovyiPokupatelKon                *Int64                                                                                                   `json:"РазовыйПокупательКон,omitempty"`
	RazovyiPokupatelNach               *Int64                                                                                                   `json:"РазовыйПокупательНач,omitempty"`
	TablitsaRaspredeleniiaKontragentov *[]DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentovRowType `json:"ТаблицаРаспределенияКонтрагентов,omitempty"`
}

func (DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnoshenii) APIEntityType() string {
	return "Document_КлассификацияПокупателейПоСтадиямВзаимоотношений"
}
func NewDocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnoshenii(data string, prevError error) (*DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnoshenii, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnoshenii)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnoshenii(entity DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnoshenii) (*DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnoshenii, error) {
	return NewDocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnoshenii(c.createEntity(entity))
}
func (c *Client) DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnoshenii(key PrimaryDocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnoshenii, fields []string) (*DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnoshenii, error) {
	return NewDocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnoshenii(c.getEntity(key, fields))
}
func (c *Client) DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniis(where Where) (*[]DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnoshenii, error) {
	type ReturnObj struct {
		Value []DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnoshenii `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_КлассификацияПокупателейПоСтадиямВзаимоотношений", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnoshenii(key PrimaryDocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnoshenii, entity DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnoshenii) (*DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnoshenii, error) {
	return NewDocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnoshenii(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnoshenii(key PrimaryDocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnoshenii) error {
	return c.removeEntity(key)
}

type DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentov struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	XYZKlassifikatsiia             *String `json:"XYZКлассификация,omitempty"`
	XYZKlassifikatsiiaStaraia      *String `json:"XYZКлассификацияСтарая,omitempty"`
	ZnachenieParametra             *Double `json:"ЗначениеПараметра,omitempty"`
	IndeksSortirovki               *Int16  `json:"ИндексСортировки,omitempty"`
	KolichestvoDokumentov          *Int64  `json:"КоличествоДокументов,omitempty"`
	KontragentKey                  *Guid   `json:"Контрагент_Key,omitempty"`
	KoeffitsientVariatsii          *Double `json:"КоэффициентВариации,omitempty"`
	MenedzherKontragentaKey        *Guid   `json:"МенеджерКонтрагента_Key,omitempty"`
	StadiiaVzaimootnoshenii        *String `json:"СтадияВзаимоотношений,omitempty"`
	StadiiaVzaimootnosheniiStaraia *String `json:"СтадияВзаимоотношенийСтарая,omitempty"`
}

func (DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentov) APIEntityType() string {
	return "Document_КлассификацияПокупателейПоСтадиямВзаимоотношений_ТаблицаРаспределенияКонтрагентов"
}
func NewDocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentov(data string, prevError error) (*DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentov(entity DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentov) (*DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentov, error) {
	return NewDocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentov(c.createEntity(entity))
}
func (c *Client) DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentov(key PrimaryDocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentov, fields []string) (*DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentov, error) {
	return NewDocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentov(c.getEntity(key, fields))
}
func (c *Client) DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentovs(where Where) (*[]DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentov, error) {
	type ReturnObj struct {
		Value []DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_КлассификацияПокупателейПоСтадиямВзаимоотношений_ТаблицаРаспределенияКонтрагентов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentov(key PrimaryDocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentov, entity DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentov) (*DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentov, error) {
	return NewDocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentov(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentov(key PrimaryDocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentov) error {
	return c.removeEntity(key)
}

type CatalogGabarity struct {
	Key          Guid     `json:"Ref_Key,omitempty"`
	DataVersion  *String  `json:"DataVersion,omitempty"`
	Description  *String  `json:"Description,omitempty"`
	Code         *String  `json:"Code,omitempty"`
	DeletionMark *Boolean `json:"DeletionMark,omitempty"`
}

func (CatalogGabarity) APIEntityType() string {
	return "Catalog_Габариты"
}
func NewCatalogGabarity(data string, prevError error) (*CatalogGabarity, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogGabarity)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogGabarity(entity CatalogGabarity) (*CatalogGabarity, error) {
	return NewCatalogGabarity(c.createEntity(entity))
}
func (c *Client) CatalogGabarity(key PrimaryCatalogGabarity, fields []string) (*CatalogGabarity, error) {
	return NewCatalogGabarity(c.getEntity(key, fields))
}
func (c *Client) CatalogGabaritys(where Where) (*[]CatalogGabarity, error) {
	type ReturnObj struct {
		Value []CatalogGabarity `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Габариты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogGabarity(key PrimaryCatalogGabarity, entity CatalogGabarity) (*CatalogGabarity, error) {
	return NewCatalogGabarity(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogGabarity(key PrimaryCatalogGabarity) error {
	return c.removeEntity(key)
}

type DocumentZakazKlienta struct {
	Key                             Guid                                 `json:"Ref_Key,omitempty"`
	DataVersion                     *String                              `json:"DataVersion,omitempty"`
	Number                          *String                              `json:"Number,omitempty"`
	Date                            *DateTime                            `json:"Date,omitempty"`
	DeletionMark                    *Boolean                             `json:"DeletionMark,omitempty"`
	Posted                          *Boolean                             `json:"Posted,omitempty"`
	AvtoRezervirovanie              *Boolean                             `json:"АвтоРезервирование,omitempty"`
	AdresDostavki                   *String                              `json:"АдресДоставки,omitempty"`
	ValiutaDokumentaKey             *Guid                                `json:"ВалютаДокумента_Key,omitempty"`
	Weight                          *Double                              `json:"ВесДокумента,omitempty"`
	VremiaNapominaniia              *DateTime                            `json:"ВремяНапоминания,omitempty"`
	DataOplaty                      *DateTime                            `json:"ДатаОплаты,omitempty"`
	DataOtgruzki                    *DateTime                            `json:"ДатаОтгрузки,omitempty"`
	DogovorKontragentaKey           *Guid                                `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie               *String                              `json:"ДокументОснование,omitempty"`
	KolichestvoDokumenta            *Int64                               `json:"КоличествоДокумента,omitempty"`
	Comment                         *String                              `json:"Комментарий,omitempty"`
	KontaktnoeLitsoKey              *Guid                                `json:"КонтактноеЛицо_Key,omitempty"`
	KontragentKey                   *Guid                                `json:"Контрагент_Key,omitempty"`
	KratnostVzaimoraschetov         *Int64                               `json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov             *Double                              `json:"КурсВзаиморасчетов,omitempty"`
	NapomnitOSobytii                *Boolean                             `json:"НапомнитьОСобытии,omitempty"`
	OrganizatsiiaKey                *Guid                                `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                *Guid                                `json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey                *Guid                                `json:"Подразделение_Key,omitempty"`
	DepartmentKey                   *Guid                                `json:"Склад_Key,omitempty"`
	Soglasovano                     *Boolean                             `json:"Согласовано,omitempty"`
	StrukturnaiaEdinitsa            *String                              `json:"СтруктурнаяЕдиница,omitempty"`
	SummaVkliuchaetNDS              *Boolean                             `json:"СуммаВключаетНДС,omitempty"`
	SumOfDocument                   *Double                              `json:"СуммаДокумента,omitempty"`
	SkhemaRealizatsiiKey            *Guid                                `json:"СхемаРеализации_Key,omitempty"`
	TipDokumenta                    *String                              `json:"ТипДокумента,omitempty"`
	TipTsenKey                      *Guid                                `json:"ТипЦен_Key,omitempty"`
	UchityvatNDS                    *Boolean                             `json:"УчитыватьНДС,omitempty"`
	KhoziaistvennaiaOperatsiiaKey   *Guid                                `json:"ХозяйственнаяОперация_Key,omitempty"`
	NomerInternetDokumenta          *String                              `json:"НомерИнтернетДокумента,omitempty"`
	DataInternetDokumenta           *DateTime                            `json:"ДатаИнтернетДокумента,omitempty"`
	StatusInternetDokumenta         *String                              `json:"СтатусИнтернетДокумента,omitempty"`
	UnikalnyiNomerInternetDokumenta *String                              `json:"УникальныйНомерИнтернетДокумента,omitempty"`
	InternetZakaz                   *Boolean                             `json:"ИнтернетЗаказ,omitempty"`
	AdresElektronnoiPochty          *String                              `json:"АдресЭлектроннойПочты,omitempty"`
	UsloviiaOplatyKey               *Guid                                `json:"УсловияОплаты_Key,omitempty"`
	BDataDokumenta                  *DateTime                            `json:"Б_ДатаДокумента,omitempty"`
	BIdentifikator                  *String                              `json:"Б_Идентификатор,omitempty"`
	BNomerVersii                    *String                              `json:"Б_НомерВерсии,omitempty"`
	Goods                           *[]DocumentZakazKlientaTovaryRowType `json:"Товары,omitempty"`
	DokumentOsnovanieType           *String                              `json:"ДокументОснование_Type,omitempty"`
	StrukturnaiaEdinitsaType        *String                              `json:"СтруктурнаяЕдиница_Type,omitempty"`
}

func (DocumentZakazKlienta) APIEntityType() string {
	return "Document_ЗаказКлиента"
}
func NewDocumentZakazKlienta(data string, prevError error) (*DocumentZakazKlienta, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentZakazKlienta)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentZakazKlienta(entity DocumentZakazKlienta) (*DocumentZakazKlienta, error) {
	return NewDocumentZakazKlienta(c.createEntity(entity))
}
func (c *Client) DocumentZakazKlienta(key PrimaryDocumentZakazKlienta, fields []string) (*DocumentZakazKlienta, error) {
	return NewDocumentZakazKlienta(c.getEntity(key, fields))
}
func (c *Client) DocumentZakazKlientas(where Where) (*[]DocumentZakazKlienta, error) {
	type ReturnObj struct {
		Value []DocumentZakazKlienta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗаказКлиента", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentZakazKlienta(key PrimaryDocumentZakazKlienta, entity DocumentZakazKlienta) (*DocumentZakazKlienta, error) {
	return NewDocumentZakazKlienta(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentZakazKlienta(key PrimaryDocumentZakazKlienta) error {
	return c.removeEntity(key)
}

type DocumentZakazKlientaTovary struct {
	Key                                        Guid    `json:"Ref_Key,omitempty"`
	LineNumber                                 Int64   `json:"LineNumber,omitempty"`
	Weight                                     *Double `json:"Вес,omitempty"`
	ZnachenieUsloviiaAvtomaticheskoiSkidki     *String `json:"ЗначениеУсловияАвтоматическойСкидки,omitempty"`
	Quantity                                   *Int64  `json:"Количество,omitempty"`
	ItemKey                                    *Guid   `json:"Номенклатура_Key,omitempty"`
	PercentAutoDiscount                        *Double `json:"ПроцентАвтоматическойСкидки,omitempty"`
	PercentManualDiscount                      *Double `json:"ПроцентРучнойСкидки,omitempty"`
	SizeKey                                    *Guid   `json:"Размер_Key,omitempty"`
	Razmestit                                  *Int64  `json:"Разместить,omitempty"`
	Rezervirovat                               *Int64  `json:"Резервировать,omitempty"`
	StavkaNDS                                  *String `json:"СтавкаНДС,omitempty"`
	Sum                                        *Double `json:"Сумма,omitempty"`
	SummaNDS                                   *Double `json:"СуммаНДС,omitempty"`
	UslovieAvtomaticheskoiSkidki               *String `json:"УсловиеАвтоматическойСкидки,omitempty"`
	Cost                                       *Double `json:"Цена,omitempty"`
	InstanceKey                                *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	SumAutoDiscount                            *Double `json:"СуммаАвтоматическойСкидки,omitempty"`
	SumManualDiscount                          *Double `json:"СуммаРучнойСкидки,omitempty"`
	KharakteristikaNomenklaturyKey             *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	ZnachenieUsloviiaAvtomaticheskoiSkidkiType *String `json:"ЗначениеУсловияАвтоматическойСкидки_Type,omitempty"`
}

func (DocumentZakazKlientaTovary) APIEntityType() string {
	return "Document_ЗаказКлиента_Товары"
}
func NewDocumentZakazKlientaTovary(data string, prevError error) (*DocumentZakazKlientaTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentZakazKlientaTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentZakazKlientaTovary(entity DocumentZakazKlientaTovary) (*DocumentZakazKlientaTovary, error) {
	return NewDocumentZakazKlientaTovary(c.createEntity(entity))
}
func (c *Client) DocumentZakazKlientaTovary(key PrimaryDocumentZakazKlientaTovary, fields []string) (*DocumentZakazKlientaTovary, error) {
	return NewDocumentZakazKlientaTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentZakazKlientaTovarys(where Where) (*[]DocumentZakazKlientaTovary, error) {
	type ReturnObj struct {
		Value []DocumentZakazKlientaTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗаказКлиента_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentZakazKlientaTovary(key PrimaryDocumentZakazKlientaTovary, entity DocumentZakazKlientaTovary) (*DocumentZakazKlientaTovary, error) {
	return NewDocumentZakazKlientaTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentZakazKlientaTovary(key PrimaryDocumentZakazKlientaTovary) error {
	return c.removeEntity(key)
}

type ArriveFromManufacturing struct {
	Key                                          Guid                                                           `json:"Ref_Key,omitempty"`
	DataVersion                                  *String                                                        `json:"DataVersion,omitempty"`
	Number                                       *String                                                        `json:"Number,omitempty"`
	Date                                         *DateTime                                                      `json:"Date,omitempty"`
	DeletionMark                                 *Boolean                                                       `json:"DeletionMark,omitempty"`
	Posted                                       *Boolean                                                       `json:"Posted,omitempty"`
	ValiutaDokumentaKey                          *Guid                                                          `json:"ВалютаДокумента_Key,omitempty"`
	Weight                                       *Double                                                        `json:"ВесДокумента,omitempty"`
	DataVkhodiashchegoDokumenta                  *DateTime                                                      `json:"ДатаВходящегоДокумента,omitempty"`
	DogovorKontragentaKey                        *Guid                                                          `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie                            *String                                                        `json:"ДокументОснование,omitempty"`
	IspolzovatSebestoimostSNDS                   *Boolean                                                       `json:"ИспользоватьСебестоимостьСНДС,omitempty"`
	KolichestvoDokumenta                         *Int64                                                         `json:"КоличествоДокумента,omitempty"`
	Comment                                      *String                                                        `json:"Комментарий,omitempty"`
	KontragentKey                                *Guid                                                          `json:"Контрагент_Key,omitempty"`
	KratnostVzaimoraschetov                      *Int64                                                         `json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov                          *Double                                                        `json:"КурсВзаиморасчетов,omitempty"`
	MaterialVProizvodstve                        *String                                                        `json:"МатериалВПроизводстве,omitempty"`
	NomerVkhodiashchegoDokumenta                 *String                                                        `json:"НомерВходящегоДокумента,omitempty"`
	OrganizatsiiaKey                             *Guid                                                          `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                             *Guid                                                          `json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey                             *Guid                                                          `json:"Подразделение_Key,omitempty"`
	Poteri                                       *Double                                                        `json:"Потери,omitempty"`
	PoteriVProtsentakh                           *Boolean                                                       `json:"ПотериВПроцентах,omitempty"`
	PoteriPostrochno                             *Boolean                                                       `json:"ПотериПострочно,omitempty"`
	ProektKey                                    *Guid                                                          `json:"Проект_Key,omitempty"`
	RegistrirovatTseny                           *Boolean                                                       `json:"РегистрироватьЦены,omitempty"`
	RegistrirovatTsenyPostavshchika              *Boolean                                                       `json:"РегистрироватьЦеныПоставщика,omitempty"`
	Sdelka                                       *String                                                        `json:"Сделка,omitempty"`
	DepartmentKey                                *Guid                                                          `json:"Склад_Key,omitempty"`
	SobstvennoeProizvodstvo                      *Boolean                                                       `json:"СобственноеПроизводство,omitempty"`
	SummaVkliuchaetNDS                           *Boolean                                                       `json:"СуммаВключаетНДС,omitempty"`
	SumOfDocument                                *Double                                                        `json:"СуммаДокумента,omitempty"`
	TipDokumenta                                 *String                                                        `json:"ТипДокумента,omitempty"`
	TipTsenKey                                   *Guid                                                          `json:"ТипЦен_Key,omitempty"`
	UsloviiaOplatyKey                            *Guid                                                          `json:"УсловияОплаты_Key,omitempty"`
	UchityvatVesVstavok                          *Boolean                                                       `json:"УчитыватьВесВставок,omitempty"`
	UchityvatNDS                                 *Boolean                                                       `json:"УчитыватьНДС,omitempty"`
	KhoziaistvennaiaOperatsiiaKey                *Guid                                                          `json:"ХозяйственнаяОперация_Key,omitempty"`
	RuchnoeZapolnenieIzraskhodovannykhMaterialov *Boolean                                                       `json:"РучноеЗаполнениеИзрасходованныхМатериалов,omitempty"`
	ProizvodstvennyiUchastokKey                  *Guid                                                          `json:"ПроизводственныйУчасток_Key,omitempty"`
	UslugaDliaVyvodaVPechatnyeFormyKey           *Guid                                                          `json:"УслугаДляВыводаВПечатныеФормы_Key,omitempty"`
	RuchnoiUchetVesaVstavok                      *Boolean                                                       `json:"РучнойУчетВесаВставок,omitempty"`
	Goods                                        *[]DocumentPostuplenieProduktsiiIzProizvodstvaTovaryRowType    `json:"Товары,omitempty"`
	Materialy                                    *[]DocumentPostuplenieProduktsiiIzProizvodstvaMaterialyRowType `json:"Материалы,omitempty"`
	DokumentOsnovanieType                        *String                                                        `json:"ДокументОснование_Type,omitempty"`
	SdelkaType                                   *String                                                        `json:"Сделка_Type,omitempty"`
}

func (ArriveFromManufacturing) APIEntityType() string {
	return "Document_ПоступлениеПродукцииИзПроизводства"
}
func NewArriveFromManufacturing(data string, prevError error) (*ArriveFromManufacturing, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(ArriveFromManufacturing)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateArriveFromManufacturing(entity ArriveFromManufacturing) (*ArriveFromManufacturing, error) {
	return NewArriveFromManufacturing(c.createEntity(entity))
}
func (c *Client) ArriveFromManufacturing(key PrimaryArriveFromManufacturing, fields []string) (*ArriveFromManufacturing, error) {
	return NewArriveFromManufacturing(c.getEntity(key, fields))
}
func (c *Client) ArriveFromManufacturings(where Where) (*[]ArriveFromManufacturing, error) {
	type ReturnObj struct {
		Value []ArriveFromManufacturing `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПоступлениеПродукцииИзПроизводства", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateArriveFromManufacturing(key PrimaryArriveFromManufacturing, entity ArriveFromManufacturing) (*ArriveFromManufacturing, error) {
	return NewArriveFromManufacturing(c.updateEntity(key, entity))
}
func (c *Client) DeleteArriveFromManufacturing(key PrimaryArriveFromManufacturing) error {
	return c.removeEntity(key)
}

type ArriveFromManufacturingInstance struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	Weight                         *Double `json:"Вес,omitempty"`
	VesPoter                       *Double `json:"ВесПотерь,omitempty"`
	ZakazKlientaKey                *Guid   `json:"ЗаказКлиента_Key,omitempty"`
	KachestvoKey                   *Guid   `json:"Качество_Key,omitempty"`
	Quantity                       *Int64  `json:"Количество,omitempty"`
	ItemKey                        *Guid   `json:"Номенклатура_Key,omitempty"`
	Pasport                        *String `json:"Паспорт,omitempty"`
	ProtsentPoter                  *Double `json:"ПроцентПотерь,omitempty"`
	SizeKey                        *Guid   `json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	DepartmentKey                  *Guid   `json:"Склад_Key,omitempty"`
	StavkaNDS                      *String `json:"СтавкаНДС,omitempty"`
	StoimostVstavok                *Double `json:"СтоимостьВставок,omitempty"`
	StoimostMetalla                *Double `json:"СтоимостьМеталла,omitempty"`
	StoimostRabot                  *Double `json:"СтоимостьРабот,omitempty"`
	Sum                            *Double `json:"Сумма,omitempty"`
	SummaNDS                       *Double `json:"СуммаНДС,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Double `json:"Цена,omitempty"`
	CostOfWork                     *Double `json:"ЦенаРабот,omitempty"`
	SummaNDSVstavok                *Double `json:"СуммаНДСВставок,omitempty"`
	SummaNDSMetalla                *Double `json:"СуммаНДСМеталла,omitempty"`
	SummaNDSRabot                  *Double `json:"СуммаНДСРабот,omitempty"`
	VesVstavok                     *Double `json:"ВесВставок,omitempty"`
}

func (ArriveFromManufacturingInstance) APIEntityType() string {
	return "Document_ПоступлениеПродукцииИзПроизводства_Товары"
}
func NewArriveFromManufacturingInstance(data string, prevError error) (*ArriveFromManufacturingInstance, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(ArriveFromManufacturingInstance)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateArriveFromManufacturingInstance(entity ArriveFromManufacturingInstance) (*ArriveFromManufacturingInstance, error) {
	return NewArriveFromManufacturingInstance(c.createEntity(entity))
}
func (c *Client) ArriveFromManufacturingInstance(key PrimaryArriveFromManufacturingInstance, fields []string) (*ArriveFromManufacturingInstance, error) {
	return NewArriveFromManufacturingInstance(c.getEntity(key, fields))
}
func (c *Client) ArriveFromManufacturingInstances(where Where) (*[]ArriveFromManufacturingInstance, error) {
	type ReturnObj struct {
		Value []ArriveFromManufacturingInstance `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПоступлениеПродукцииИзПроизводства_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateArriveFromManufacturingInstance(key PrimaryArriveFromManufacturingInstance, entity ArriveFromManufacturingInstance) (*ArriveFromManufacturingInstance, error) {
	return NewArriveFromManufacturingInstance(c.updateEntity(key, entity))
}
func (c *Client) DeleteArriveFromManufacturingInstance(key PrimaryArriveFromManufacturingInstance) error {
	return c.removeEntity(key)
}

type DocumentPostuplenieProduktsiiIzProizvodstvaMaterialy struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	Weight                         *Double `json:"Вес,omitempty"`
	Quantity                       *Int64  `json:"Количество,omitempty"`
	Nomenklatura                   *String `json:"Номенклатура,omitempty"`
	SizeKey                        *Guid   `json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	ItemType                       *String `json:"Номенклатура_Type,omitempty"`
}

func (DocumentPostuplenieProduktsiiIzProizvodstvaMaterialy) APIEntityType() string {
	return "Document_ПоступлениеПродукцииИзПроизводства_Материалы"
}
func NewDocumentPostuplenieProduktsiiIzProizvodstvaMaterialy(data string, prevError error) (*DocumentPostuplenieProduktsiiIzProizvodstvaMaterialy, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPostuplenieProduktsiiIzProizvodstvaMaterialy)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPostuplenieProduktsiiIzProizvodstvaMaterialy(entity DocumentPostuplenieProduktsiiIzProizvodstvaMaterialy) (*DocumentPostuplenieProduktsiiIzProizvodstvaMaterialy, error) {
	return NewDocumentPostuplenieProduktsiiIzProizvodstvaMaterialy(c.createEntity(entity))
}
func (c *Client) DocumentPostuplenieProduktsiiIzProizvodstvaMaterialy(key PrimaryDocumentPostuplenieProduktsiiIzProizvodstvaMaterialy, fields []string) (*DocumentPostuplenieProduktsiiIzProizvodstvaMaterialy, error) {
	return NewDocumentPostuplenieProduktsiiIzProizvodstvaMaterialy(c.getEntity(key, fields))
}
func (c *Client) DocumentPostuplenieProduktsiiIzProizvodstvaMaterialys(where Where) (*[]DocumentPostuplenieProduktsiiIzProizvodstvaMaterialy, error) {
	type ReturnObj struct {
		Value []DocumentPostuplenieProduktsiiIzProizvodstvaMaterialy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПоступлениеПродукцииИзПроизводства_Материалы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPostuplenieProduktsiiIzProizvodstvaMaterialy(key PrimaryDocumentPostuplenieProduktsiiIzProizvodstvaMaterialy, entity DocumentPostuplenieProduktsiiIzProizvodstvaMaterialy) (*DocumentPostuplenieProduktsiiIzProizvodstvaMaterialy, error) {
	return NewDocumentPostuplenieProduktsiiIzProizvodstvaMaterialy(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPostuplenieProduktsiiIzProizvodstvaMaterialy(key PrimaryDocumentPostuplenieProduktsiiIzProizvodstvaMaterialy) error {
	return c.removeEntity(key)
}

type DocumentJournalZakazyPostavshchikam struct {
	Ref              String    `json:"Ref,omitempty"`
	Type             *String   `json:"Type,omitempty"`
	Date             *DateTime `json:"Date,omitempty"`
	DeletionMark     *Boolean  `json:"DeletionMark,omitempty"`
	Number           *String   `json:"Number,omitempty"`
	Posted           *Boolean  `json:"Posted,omitempty"`
	ValiutaKey       *Guid     `json:"Валюта_Key,omitempty"`
	DataOplaty       *DateTime `json:"ДатаОплаты,omitempty"`
	DataPostupleniia *DateTime `json:"ДатаПоступления,omitempty"`
	InformatsiiaKey  *Guid     `json:"Информация_Key,omitempty"`
	Comment          *String   `json:"Комментарий,omitempty"`
	OrganizatsiiaKey *Guid     `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey *Guid     `json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey *Guid     `json:"Подразделение_Key,omitempty"`
	Sum              *Double   `json:"Сумма,omitempty"`
	RefType          String    `json:"Ref_Type,omitempty"`
}

func (DocumentJournalZakazyPostavshchikam) APIEntityType() string {
	return "DocumentJournal_ЗаказыПоставщикам"
}
func NewDocumentJournalZakazyPostavshchikam(data string, prevError error) (*DocumentJournalZakazyPostavshchikam, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentJournalZakazyPostavshchikam)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentJournalZakazyPostavshchikam(entity DocumentJournalZakazyPostavshchikam) (*DocumentJournalZakazyPostavshchikam, error) {
	return NewDocumentJournalZakazyPostavshchikam(c.createEntity(entity))
}
func (c *Client) DocumentJournalZakazyPostavshchikam(key PrimaryDocumentJournalZakazyPostavshchikam, fields []string) (*DocumentJournalZakazyPostavshchikam, error) {
	return NewDocumentJournalZakazyPostavshchikam(c.getEntity(key, fields))
}
func (c *Client) DocumentJournalZakazyPostavshchikams(where Where) (*[]DocumentJournalZakazyPostavshchikam, error) {
	type ReturnObj struct {
		Value []DocumentJournalZakazyPostavshchikam `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("DocumentJournal_ЗаказыПоставщикам", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentJournalZakazyPostavshchikam(key PrimaryDocumentJournalZakazyPostavshchikam, entity DocumentJournalZakazyPostavshchikam) (*DocumentJournalZakazyPostavshchikam, error) {
	return NewDocumentJournalZakazyPostavshchikam(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentJournalZakazyPostavshchikam(key PrimaryDocumentJournalZakazyPostavshchikam) error {
	return c.removeEntity(key)
}

type DocumentJournalSkladskieDokumenty struct {
	Ref               String    `json:"Ref,omitempty"`
	Type              *String   `json:"Type,omitempty"`
	Date              *DateTime `json:"Date,omitempty"`
	DeletionMark      *Boolean  `json:"DeletionMark,omitempty"`
	Number            *String   `json:"Number,omitempty"`
	Posted            *Boolean  `json:"Posted,omitempty"`
	ValiutaKey        *Guid     `json:"Валюта_Key,omitempty"`
	Comment           *String   `json:"Комментарий,omitempty"`
	Kontragent        *String   `json:"Контрагент,omitempty"`
	OrganizatsiiaKey  *Guid     `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey  *Guid     `json:"Ответственный_Key,omitempty"`
	Podrazdelenie     *String   `json:"Подразделение,omitempty"`
	Sklad             *String   `json:"Склад,omitempty"`
	Sum               *Double   `json:"Сумма,omitempty"`
	RefType           String    `json:"Ref_Type,omitempty"`
	KontragentType    *String   `json:"Контрагент_Type,omitempty"`
	PodrazdelenieType *String   `json:"Подразделение_Type,omitempty"`
	SkladType         *String   `json:"Склад_Type,omitempty"`
}

func (DocumentJournalSkladskieDokumenty) APIEntityType() string {
	return "DocumentJournal_СкладскиеДокументы"
}
func NewDocumentJournalSkladskieDokumenty(data string, prevError error) (*DocumentJournalSkladskieDokumenty, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentJournalSkladskieDokumenty)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentJournalSkladskieDokumenty(entity DocumentJournalSkladskieDokumenty) (*DocumentJournalSkladskieDokumenty, error) {
	return NewDocumentJournalSkladskieDokumenty(c.createEntity(entity))
}
func (c *Client) DocumentJournalSkladskieDokumenty(key PrimaryDocumentJournalSkladskieDokumenty, fields []string) (*DocumentJournalSkladskieDokumenty, error) {
	return NewDocumentJournalSkladskieDokumenty(c.getEntity(key, fields))
}
func (c *Client) DocumentJournalSkladskieDokumentys(where Where) (*[]DocumentJournalSkladskieDokumenty, error) {
	type ReturnObj struct {
		Value []DocumentJournalSkladskieDokumenty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("DocumentJournal_СкладскиеДокументы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentJournalSkladskieDokumenty(key PrimaryDocumentJournalSkladskieDokumenty, entity DocumentJournalSkladskieDokumenty) (*DocumentJournalSkladskieDokumenty, error) {
	return NewDocumentJournalSkladskieDokumenty(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentJournalSkladskieDokumenty(key PrimaryDocumentJournalSkladskieDokumenty) error {
	return c.removeEntity(key)
}

type CatalogsmsUsloviiaOtboraDiskontnykhKart struct {
	Key           Guid     `json:"Ref_Key,omitempty"`
	DataVersion   *String  `json:"DataVersion,omitempty"`
	Description   *String  `json:"Description,omitempty"`
	Code          *Int64   `json:"Code,omitempty"`
	DeletionMark  *Boolean `json:"DeletionMark,omitempty"`
	Deistvie      *String  `json:"Действие,omitempty"`
	Comment       *String  `json:"Комментарий,omitempty"`
	Predstavlenie *String  `json:"Представление,omitempty"`
}

func (CatalogsmsUsloviiaOtboraDiskontnykhKart) APIEntityType() string {
	return "Catalog_смсУсловияОтбораДисконтныхКарт"
}
func NewCatalogsmsUsloviiaOtboraDiskontnykhKart(data string, prevError error) (*CatalogsmsUsloviiaOtboraDiskontnykhKart, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogsmsUsloviiaOtboraDiskontnykhKart)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogsmsUsloviiaOtboraDiskontnykhKart(entity CatalogsmsUsloviiaOtboraDiskontnykhKart) (*CatalogsmsUsloviiaOtboraDiskontnykhKart, error) {
	return NewCatalogsmsUsloviiaOtboraDiskontnykhKart(c.createEntity(entity))
}
func (c *Client) CatalogsmsUsloviiaOtboraDiskontnykhKart(key PrimaryCatalogsmsUsloviiaOtboraDiskontnykhKart, fields []string) (*CatalogsmsUsloviiaOtboraDiskontnykhKart, error) {
	return NewCatalogsmsUsloviiaOtboraDiskontnykhKart(c.getEntity(key, fields))
}
func (c *Client) CatalogsmsUsloviiaOtboraDiskontnykhKarts(where Where) (*[]CatalogsmsUsloviiaOtboraDiskontnykhKart, error) {
	type ReturnObj struct {
		Value []CatalogsmsUsloviiaOtboraDiskontnykhKart `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_смсУсловияОтбораДисконтныхКарт", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogsmsUsloviiaOtboraDiskontnykhKart(key PrimaryCatalogsmsUsloviiaOtboraDiskontnykhKart, entity CatalogsmsUsloviiaOtboraDiskontnykhKart) (*CatalogsmsUsloviiaOtboraDiskontnykhKart, error) {
	return NewCatalogsmsUsloviiaOtboraDiskontnykhKart(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogsmsUsloviiaOtboraDiskontnykhKart(key PrimaryCatalogsmsUsloviiaOtboraDiskontnykhKart) error {
	return c.removeEntity(key)
}

type Arrive struct {
	Key                             Guid                                            `json:"Ref_Key,omitempty"`
	DataVersion                     *String                                         `json:"DataVersion,omitempty"`
	Number                          *String                                         `json:"Number,omitempty"`
	Date                            *DateTime                                       `json:"Date,omitempty"`
	DeletionMark                    *Boolean                                        `json:"DeletionMark,omitempty"`
	Posted                          *Boolean                                        `json:"Posted,omitempty"`
	BankovskiiSchetKontragentaKey   *Guid                                           `json:"БанковскийСчетКонтрагента_Key,omitempty"`
	ValiutaDokumentaKey             *Guid                                           `json:"ВалютаДокумента_Key,omitempty"`
	Weight                          *Double                                         `json:"ВесДокумента,omitempty"`
	GruzootpravitelKey              *Guid                                           `json:"Грузоотправитель_Key,omitempty"`
	GruzopoluchatelKey              *Guid                                           `json:"Грузополучатель_Key,omitempty"`
	DataVkhodiashchegoDokumenta     *DateTime                                       `json:"ДатаВходящегоДокумента,omitempty"`
	DogovorKontragentaKey           *Guid                                           `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie               *String                                         `json:"ДокументОснование,omitempty"`
	DokumentSozdanVIuTD             *Boolean                                        `json:"ДокументСозданВЮТД,omitempty"`
	KolichestvoDokumenta            *Int64                                          `json:"КоличествоДокумента,omitempty"`
	Comment                         *String                                         `json:"Комментарий,omitempty"`
	KontragentKey                   *Guid                                           `json:"Контрагент_Key,omitempty"`
	Koef                            *Double                                         `json:"Коэф,omitempty"`
	KratnostVzaimoraschetov         *Int64                                          `json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov             *Double                                         `json:"КурсВзаиморасчетов,omitempty"`
	NDSVkliuchenVStoimost           *Boolean                                        `json:"НДСВключенВСтоимость,omitempty"`
	NomerVkhodiashchegoDokumenta    *String                                         `json:"НомерВходящегоДокумента,omitempty"`
	OrganizatsiiaKey                *Guid                                           `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                *Guid                                           `json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey                *Guid                                           `json:"Подразделение_Key,omitempty"`
	RegistrirovatTseny              *Boolean                                        `json:"РегистрироватьЦены,omitempty"`
	RegistrirovatTsenyPostavshchika *Boolean                                        `json:"РегистрироватьЦеныПоставщика,omitempty"`
	Sdelka                          *String                                         `json:"Сделка,omitempty"`
	SkladOrderKey                   *Guid                                           `json:"СкладОрдер_Key,omitempty"`
	SummaVkliuchaetNDS              *Boolean                                        `json:"СуммаВключаетНДС,omitempty"`
	SumOfDocument                   *Double                                         `json:"СуммаДокумента,omitempty"`
	TipDokumenta                    *String                                         `json:"ТипДокумента,omitempty"`
	TipTsenKey                      *Guid                                           `json:"ТипЦен_Key,omitempty"`
	UsloviiaOplatyKey               *Guid                                           `json:"УсловияОплаты_Key,omitempty"`
	UchityvatNDS                    *Boolean                                        `json:"УчитыватьНДС,omitempty"`
	KhoziaistvennaiaOperatsiiaKey   *Guid                                           `json:"ХозяйственнаяОперация_Key,omitempty"`
	ZagruzhenIzUIuP                 *Boolean                                        `json:"ЗагруженИзУЮП,omitempty"`
	VystavkaOstatki                 *Boolean                                        `json:"ВыставкаОстатки,omitempty"`
	Goods                           *[]DocumentPostuplenieTovarovUslugTovaryRowType `json:"Товары,omitempty"`
	Uslugi                          *[]DocumentPostuplenieTovarovUslugUslugiRowType `json:"Услуги,omitempty"`
	DokumentOsnovanieType           *String                                         `json:"ДокументОснование_Type,omitempty"`
	SdelkaType                      *String                                         `json:"Сделка_Type,omitempty"`
}

func (Arrive) APIEntityType() string {
	return "Document_ПоступлениеТоваровУслуг"
}
func NewArrive(data string, prevError error) (*Arrive, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(Arrive)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateArrive(entity Arrive) (*Arrive, error) {
	return NewArrive(c.createEntity(entity))
}
func (c *Client) Arrive(key PrimaryArrive, fields []string) (*Arrive, error) {
	return NewArrive(c.getEntity(key, fields))
}
func (c *Client) Arrives(where Where) (*[]Arrive, error) {
	type ReturnObj struct {
		Value []Arrive `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПоступлениеТоваровУслуг", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateArrive(key PrimaryArrive, entity Arrive) (*Arrive, error) {
	return NewArrive(c.updateEntity(key, entity))
}
func (c *Client) DeleteArrive(key PrimaryArrive) error {
	return c.removeEntity(key)
}

type DocumentPostuplenieTovarovUslugTovary struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	Weight                         *Double `json:"Вес,omitempty"`
	EdinitsaIzmereniiaKey          *Guid   `json:"ЕдиницаИзмерения_Key,omitempty"`
	ZakazKlientaKey                *Guid   `json:"ЗаказКлиента_Key,omitempty"`
	KachestvoKey                   *Guid   `json:"Качество_Key,omitempty"`
	Quantity                       *Int64  `json:"Количество,omitempty"`
	Koef                           *Double `json:"Коэф,omitempty"`
	Koeffitsient                   *Double `json:"Коэффициент,omitempty"`
	NaborKey                       *Guid   `json:"Набор_Key,omitempty"`
	ItemKey                        *Guid   `json:"Номенклатура_Key,omitempty"`
	NomerGTDKey                    *Guid   `json:"НомерГТД_Key,omitempty"`
	NomerNabora                    *Int64  `json:"НомерНабора,omitempty"`
	Pasport                        *String `json:"Паспорт,omitempty"`
	ProektKey                      *Guid   `json:"Проект_Key,omitempty"`
	SizeKey                        *Guid   `json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	DepartmentKey                  *Guid   `json:"Склад_Key,omitempty"`
	StavkaNDS                      *String `json:"СтавкаНДС,omitempty"`
	StranaProiskhozhdeniiaKey      *Guid   `json:"СтранаПроисхождения_Key,omitempty"`
	Sum                            *Double `json:"Сумма,omitempty"`
	SummaNDS                       *Double `json:"СуммаНДС,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Double `json:"Цена,omitempty"`
}

func (DocumentPostuplenieTovarovUslugTovary) APIEntityType() string {
	return "Document_ПоступлениеТоваровУслуг_Товары"
}
func NewDocumentPostuplenieTovarovUslugTovary(data string, prevError error) (*DocumentPostuplenieTovarovUslugTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPostuplenieTovarovUslugTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPostuplenieTovarovUslugTovary(entity DocumentPostuplenieTovarovUslugTovary) (*DocumentPostuplenieTovarovUslugTovary, error) {
	return NewDocumentPostuplenieTovarovUslugTovary(c.createEntity(entity))
}
func (c *Client) DocumentPostuplenieTovarovUslugTovary(key PrimaryDocumentPostuplenieTovarovUslugTovary, fields []string) (*DocumentPostuplenieTovarovUslugTovary, error) {
	return NewDocumentPostuplenieTovarovUslugTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentPostuplenieTovarovUslugTovarys(where Where) (*[]DocumentPostuplenieTovarovUslugTovary, error) {
	type ReturnObj struct {
		Value []DocumentPostuplenieTovarovUslugTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПоступлениеТоваровУслуг_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPostuplenieTovarovUslugTovary(key PrimaryDocumentPostuplenieTovarovUslugTovary, entity DocumentPostuplenieTovarovUslugTovary) (*DocumentPostuplenieTovarovUslugTovary, error) {
	return NewDocumentPostuplenieTovarovUslugTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPostuplenieTovarovUslugTovary(key PrimaryDocumentPostuplenieTovarovUslugTovary) error {
	return c.removeEntity(key)
}

type DocumentPostuplenieTovarovUslugUslugi struct {
	Key                      Guid    `json:"Ref_Key,omitempty"`
	LineNumber               Int64   `json:"LineNumber,omitempty"`
	Quantity                 *Int64  `json:"Количество,omitempty"`
	ItemKey                  *Guid   `json:"Номенклатура_Key,omitempty"`
	NomenklaturnaiaGruppaKey *Guid   `json:"НоменклатурнаяГруппа_Key,omitempty"`
	PodrazdelenieKey         *Guid   `json:"Подразделение_Key,omitempty"`
	ProektKey                *Guid   `json:"Проект_Key,omitempty"`
	Soderzhanie              *String `json:"Содержание,omitempty"`
	StavkaNDS                *String `json:"СтавкаНДС,omitempty"`
	StatiaZatratKey          *Guid   `json:"СтатьяЗатрат_Key,omitempty"`
	Sum                      *Double `json:"Сумма,omitempty"`
	SummaNDS                 *Double `json:"СуммаНДС,omitempty"`
	Cost                     *Double `json:"Цена,omitempty"`
}

func (DocumentPostuplenieTovarovUslugUslugi) APIEntityType() string {
	return "Document_ПоступлениеТоваровУслуг_Услуги"
}
func NewDocumentPostuplenieTovarovUslugUslugi(data string, prevError error) (*DocumentPostuplenieTovarovUslugUslugi, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPostuplenieTovarovUslugUslugi)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPostuplenieTovarovUslugUslugi(entity DocumentPostuplenieTovarovUslugUslugi) (*DocumentPostuplenieTovarovUslugUslugi, error) {
	return NewDocumentPostuplenieTovarovUslugUslugi(c.createEntity(entity))
}
func (c *Client) DocumentPostuplenieTovarovUslugUslugi(key PrimaryDocumentPostuplenieTovarovUslugUslugi, fields []string) (*DocumentPostuplenieTovarovUslugUslugi, error) {
	return NewDocumentPostuplenieTovarovUslugUslugi(c.getEntity(key, fields))
}
func (c *Client) DocumentPostuplenieTovarovUslugUslugis(where Where) (*[]DocumentPostuplenieTovarovUslugUslugi, error) {
	type ReturnObj struct {
		Value []DocumentPostuplenieTovarovUslugUslugi `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПоступлениеТоваровУслуг_Услуги", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPostuplenieTovarovUslugUslugi(key PrimaryDocumentPostuplenieTovarovUslugUslugi, entity DocumentPostuplenieTovarovUslugUslugi) (*DocumentPostuplenieTovarovUslugUslugi, error) {
	return NewDocumentPostuplenieTovarovUslugUslugi(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPostuplenieTovarovUslugUslugi(key PrimaryDocumentPostuplenieTovarovUslugUslugi) error {
	return c.removeEntity(key)
}

type DocumentSchetFakturaVydannyi struct {
	Key                                                   Guid      `json:"Ref_Key,omitempty"`
	DataVersion                                           *String   `json:"DataVersion,omitempty"`
	Number                                                *String   `json:"Number,omitempty"`
	Date                                                  *DateTime `json:"Date,omitempty"`
	DeletionMark                                          *Boolean  `json:"DeletionMark,omitempty"`
	Posted                                                *Boolean  `json:"Posted,omitempty"`
	ValiutaDokumentaKey                                   *Guid     `json:"ВалютаДокумента_Key,omitempty"`
	ValiutnaiaSumma                                       *Double   `json:"ВалютнаяСумма,omitempty"`
	DataPlatezhnoRaschetnogoDokumenta                     *DateTime `json:"ДатаПлатежноРасчетногоДокумента,omitempty"`
	DogovorKontragentaKey                                 *Guid     `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie                                     *String   `json:"ДокументОснование,omitempty"`
	DokumentSozdanVIuTD                                   *Boolean  `json:"ДокументСозданВЮТД,omitempty"`
	Comment                                               *String   `json:"Комментарий,omitempty"`
	KontragentKey                                         *Guid     `json:"Контрагент_Key,omitempty"`
	NaAvans                                               *Boolean  `json:"НаАванс,omitempty"`
	NomerPlatezhnoRaschetnogoDokumenta                    *String   `json:"НомерПлатежноРасчетногоДокумента,omitempty"`
	OrganizatsiiaKey                                      *Guid     `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                                      *Guid     `json:"Ответственный_Key,omitempty"`
	Pod0                                                  *Boolean  `json:"Под0,omitempty"`
	StavkaNDS                                             *String   `json:"СтавкаНДС,omitempty"`
	Sum                                                   *Double   `json:"Сумма,omitempty"`
	SumOfDocument                                         *Double   `json:"СуммаДокумента,omitempty"`
	SummaNDS                                              *Double   `json:"СуммаНДС,omitempty"`
	SformirovanPriVvodeNachalnykhOstatkovNDS              *Boolean  `json:"СформированПриВводеНачальныхОстатковНДС,omitempty"`
	TipDokumenta                                          *String   `json:"ТипДокумента,omitempty"`
	SchetFakturaOsnovanieKey                              *Guid     `json:"СчетФактураОснование_Key,omitempty"`
	Ispravlenie                                           *Boolean  `json:"Исправление,omitempty"`
	NomerIspravleniia                                     *String   `json:"НомерИсправления,omitempty"`
	Korrektirovochnyi                                     *Boolean  `json:"Корректировочный,omitempty"`
	IskhodnyiDokumentKey                                  *Guid     `json:"ИсходныйДокумент_Key,omitempty"`
	NomerIskhodnogoDokumenta                              *String   `json:"НомерИсходногоДокумента,omitempty"`
	DataIskhodnogoDokumenta                               *DateTime `json:"ДатаИсходногоДокумента,omitempty"`
	NomerIspravleniiaIskhodnogoDokumenta                  *String   `json:"НомерИсправленияИсходногоДокумента,omitempty"`
	DataIspravleniiaIskhodnogoDokumenta                   *DateTime `json:"ДатаИсправленияИсходногоДокумента,omitempty"`
	VystavlenVElektronnomVide                             *Boolean  `json:"ВыставленВЭлектронномВиде,omitempty"`
	DataVystavleniia                                      *DateTime `json:"ДатаВыставления,omitempty"`
	SummaDokumentaKomissiia                               *Double   `json:"СуммаДокументаКомиссия,omitempty"`
	SummaNDSDokumentaKomissiia                            *Double   `json:"СуммаНДСДокументаКомиссия,omitempty"`
	NaimenovanieTovaraUslugiDliaPechatiKorrektirovkiPoNDS *String   `json:"НаименованиеТовараУслугиДляПечатиКорректировкиПоНДС,omitempty"`
	DokumentOsnovanieType                                 *String   `json:"ДокументОснование_Type,omitempty"`
}

func (DocumentSchetFakturaVydannyi) APIEntityType() string {
	return "Document_СчетФактураВыданный"
}
func NewDocumentSchetFakturaVydannyi(data string, prevError error) (*DocumentSchetFakturaVydannyi, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentSchetFakturaVydannyi)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentSchetFakturaVydannyi(entity DocumentSchetFakturaVydannyi) (*DocumentSchetFakturaVydannyi, error) {
	return NewDocumentSchetFakturaVydannyi(c.createEntity(entity))
}
func (c *Client) DocumentSchetFakturaVydannyi(key PrimaryDocumentSchetFakturaVydannyi, fields []string) (*DocumentSchetFakturaVydannyi, error) {
	return NewDocumentSchetFakturaVydannyi(c.getEntity(key, fields))
}
func (c *Client) DocumentSchetFakturaVydannyis(where Where) (*[]DocumentSchetFakturaVydannyi, error) {
	type ReturnObj struct {
		Value []DocumentSchetFakturaVydannyi `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СчетФактураВыданный", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentSchetFakturaVydannyi(key PrimaryDocumentSchetFakturaVydannyi, entity DocumentSchetFakturaVydannyi) (*DocumentSchetFakturaVydannyi, error) {
	return NewDocumentSchetFakturaVydannyi(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentSchetFakturaVydannyi(key PrimaryDocumentSchetFakturaVydannyi) error {
	return c.removeEntity(key)
}

type DocumentPlanProdazhPoSalonam struct {
	Key                Guid                                               `json:"Ref_Key,omitempty"`
	DataVersion        *String                                            `json:"DataVersion,omitempty"`
	Number             *String                                            `json:"Number,omitempty"`
	Date               *DateTime                                          `json:"Date,omitempty"`
	DeletionMark       *Boolean                                           `json:"DeletionMark,omitempty"`
	Posted             *Boolean                                           `json:"Posted,omitempty"`
	PlanovyiPeriod     *DateTime                                          `json:"ПлановыйПериод,omitempty"`
	SummaPlana         *Double                                            `json:"СуммаПлана,omitempty"`
	Comment            *String                                            `json:"Комментарий,omitempty"`
	PoDniam            *Boolean                                           `json:"ПоДням,omitempty"`
	DetalizatsiiaPlana *Boolean                                           `json:"ДетализацияПлана,omitempty"`
	KalendarPlanaKey   *Guid                                              `json:"КалендарьПлана_Key,omitempty"`
	Salony             *[]DocumentPlanProdazhPoSalonamSalonyRowType       `json:"Салоны,omitempty"`
	DniPoGrafiku       *[]DocumentPlanProdazhPoSalonamDniPoGrafikuRowType `json:"ДниПоГрафику,omitempty"`
}

func (DocumentPlanProdazhPoSalonam) APIEntityType() string {
	return "Document_ПланПродажПоСалонам"
}
func NewDocumentPlanProdazhPoSalonam(data string, prevError error) (*DocumentPlanProdazhPoSalonam, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPlanProdazhPoSalonam)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPlanProdazhPoSalonam(entity DocumentPlanProdazhPoSalonam) (*DocumentPlanProdazhPoSalonam, error) {
	return NewDocumentPlanProdazhPoSalonam(c.createEntity(entity))
}
func (c *Client) DocumentPlanProdazhPoSalonam(key PrimaryDocumentPlanProdazhPoSalonam, fields []string) (*DocumentPlanProdazhPoSalonam, error) {
	return NewDocumentPlanProdazhPoSalonam(c.getEntity(key, fields))
}
func (c *Client) DocumentPlanProdazhPoSalonams(where Where) (*[]DocumentPlanProdazhPoSalonam, error) {
	type ReturnObj struct {
		Value []DocumentPlanProdazhPoSalonam `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПланПродажПоСалонам", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPlanProdazhPoSalonam(key PrimaryDocumentPlanProdazhPoSalonam, entity DocumentPlanProdazhPoSalonam) (*DocumentPlanProdazhPoSalonam, error) {
	return NewDocumentPlanProdazhPoSalonam(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPlanProdazhPoSalonam(key PrimaryDocumentPlanProdazhPoSalonam) error {
	return c.removeEntity(key)
}

type DocumentPlanProdazhPoSalonamSalony struct {
	Key                        Guid      `json:"Ref_Key,omitempty"`
	LineNumber                 Int64     `json:"LineNumber,omitempty"`
	SalonKey                   *Guid     `json:"Салон_Key,omitempty"`
	SummaPlana                 *Double   `json:"СуммаПлана,omitempty"`
	Primechanie                *String   `json:"Примечание,omitempty"`
	IndeksStrokiIzTablitsyDnei *Int64    `json:"ИндексСтрокиИзТаблицыДней,omitempty"`
	SummaPlanaDnevnaia         *Double   `json:"СуммаПланаДневная,omitempty"`
	DenPoGrafiku               *DateTime `json:"ДеньПоГрафику,omitempty"`
	SummaPlanaFakt             *Double   `json:"СуммаПланаФакт,omitempty"`
	PlanEst                    *Boolean  `json:"ПланЕсть,omitempty"`
	KU                         *Double   `json:"КУ,omitempty"`
	FormulaDliaRasschetaKey    *Guid     `json:"ФормулаДляРассчета_Key,omitempty"`
	RasshifrovkaFormuly        *String   `json:"РасшифровкаФормулы,omitempty"`
}

func (DocumentPlanProdazhPoSalonamSalony) APIEntityType() string {
	return "Document_ПланПродажПоСалонам_Салоны"
}
func NewDocumentPlanProdazhPoSalonamSalony(data string, prevError error) (*DocumentPlanProdazhPoSalonamSalony, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPlanProdazhPoSalonamSalony)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPlanProdazhPoSalonamSalony(entity DocumentPlanProdazhPoSalonamSalony) (*DocumentPlanProdazhPoSalonamSalony, error) {
	return NewDocumentPlanProdazhPoSalonamSalony(c.createEntity(entity))
}
func (c *Client) DocumentPlanProdazhPoSalonamSalony(key PrimaryDocumentPlanProdazhPoSalonamSalony, fields []string) (*DocumentPlanProdazhPoSalonamSalony, error) {
	return NewDocumentPlanProdazhPoSalonamSalony(c.getEntity(key, fields))
}
func (c *Client) DocumentPlanProdazhPoSalonamSalonys(where Where) (*[]DocumentPlanProdazhPoSalonamSalony, error) {
	type ReturnObj struct {
		Value []DocumentPlanProdazhPoSalonamSalony `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПланПродажПоСалонам_Салоны", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPlanProdazhPoSalonamSalony(key PrimaryDocumentPlanProdazhPoSalonamSalony, entity DocumentPlanProdazhPoSalonamSalony) (*DocumentPlanProdazhPoSalonamSalony, error) {
	return NewDocumentPlanProdazhPoSalonamSalony(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPlanProdazhPoSalonamSalony(key PrimaryDocumentPlanProdazhPoSalonamSalony) error {
	return c.removeEntity(key)
}

type DocumentPlanProdazhPoSalonamDniPoGrafiku struct {
	Key          Guid   `json:"Ref_Key,omitempty"`
	LineNumber   Int64  `json:"LineNumber,omitempty"`
	DenPoGrafiku *Int16 `json:"ДеньПоГрафику,omitempty"`
}

func (DocumentPlanProdazhPoSalonamDniPoGrafiku) APIEntityType() string {
	return "Document_ПланПродажПоСалонам_ДниПоГрафику"
}
func NewDocumentPlanProdazhPoSalonamDniPoGrafiku(data string, prevError error) (*DocumentPlanProdazhPoSalonamDniPoGrafiku, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPlanProdazhPoSalonamDniPoGrafiku)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPlanProdazhPoSalonamDniPoGrafiku(entity DocumentPlanProdazhPoSalonamDniPoGrafiku) (*DocumentPlanProdazhPoSalonamDniPoGrafiku, error) {
	return NewDocumentPlanProdazhPoSalonamDniPoGrafiku(c.createEntity(entity))
}
func (c *Client) DocumentPlanProdazhPoSalonamDniPoGrafiku(key PrimaryDocumentPlanProdazhPoSalonamDniPoGrafiku, fields []string) (*DocumentPlanProdazhPoSalonamDniPoGrafiku, error) {
	return NewDocumentPlanProdazhPoSalonamDniPoGrafiku(c.getEntity(key, fields))
}
func (c *Client) DocumentPlanProdazhPoSalonamDniPoGrafikus(where Where) (*[]DocumentPlanProdazhPoSalonamDniPoGrafiku, error) {
	type ReturnObj struct {
		Value []DocumentPlanProdazhPoSalonamDniPoGrafiku `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПланПродажПоСалонам_ДниПоГрафику", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPlanProdazhPoSalonamDniPoGrafiku(key PrimaryDocumentPlanProdazhPoSalonamDniPoGrafiku, entity DocumentPlanProdazhPoSalonamDniPoGrafiku) (*DocumentPlanProdazhPoSalonamDniPoGrafiku, error) {
	return NewDocumentPlanProdazhPoSalonamDniPoGrafiku(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPlanProdazhPoSalonamDniPoGrafiku(key PrimaryDocumentPlanProdazhPoSalonamDniPoGrafiku) error {
	return c.removeEntity(key)
}

type CatalogBankovskieScheta struct {
	Key                                          Guid      `json:"Ref_Key,omitempty"`
	DataVersion                                  *String   `json:"DataVersion,omitempty"`
	Description                                  *String   `json:"Description,omitempty"`
	Code                                         *String   `json:"Code,omitempty"`
	Owner                                        *String   `json:"Owner,omitempty"`
	DeletionMark                                 *Boolean  `json:"DeletionMark,omitempty"`
	BankKey                                      *Guid     `json:"Банк_Key,omitempty"`
	BankDliaRaschetovKey                         *Guid     `json:"БанкДляРасчетов_Key,omitempty"`
	ValiutaDenezhnykhSredstvKey                  *Guid     `json:"ВалютаДенежныхСредств_Key,omitempty"`
	VidScheta                                    *String   `json:"ВидСчета,omitempty"`
	DataZakrytiia                                *DateTime `json:"ДатаЗакрытия,omitempty"`
	DataOtkrytiia                                *DateTime `json:"ДатаОткрытия,omitempty"`
	KontragentDliaOgranicheniiaPravDostupaKey    *Guid     `json:"КонтрагентДляОграниченияПравДоступа_Key,omitempty"`
	MesiatsPropisiu                              *Boolean  `json:"МесяцПрописью,omitempty"`
	NomerIDataRazresheniia                       *String   `json:"НомерИДатаРазрешения,omitempty"`
	NomerScheta                                  *String   `json:"НомерСчета,omitempty"`
	OrganizatsiiaDliaOgranicheniiaPravDostupaKey *Guid     `json:"ОрганизацияДляОграниченияПравДоступа_Key,omitempty"`
	SummaBezKopeek                               *Boolean  `json:"СуммаБезКопеек,omitempty"`
	TekstKorrespondenta                          *String   `json:"ТекстКорреспондента,omitempty"`
	TekstNaznacheniia                            *String   `json:"ТекстНазначения,omitempty"`
	OwnerType                                    *String   `json:"Owner_Type,omitempty"`
}

func (CatalogBankovskieScheta) APIEntityType() string {
	return "Catalog_БанковскиеСчета"
}
func NewCatalogBankovskieScheta(data string, prevError error) (*CatalogBankovskieScheta, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogBankovskieScheta)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogBankovskieScheta(entity CatalogBankovskieScheta) (*CatalogBankovskieScheta, error) {
	return NewCatalogBankovskieScheta(c.createEntity(entity))
}
func (c *Client) CatalogBankovskieScheta(key PrimaryCatalogBankovskieScheta, fields []string) (*CatalogBankovskieScheta, error) {
	return NewCatalogBankovskieScheta(c.getEntity(key, fields))
}
func (c *Client) CatalogBankovskieSchetas(where Where) (*[]CatalogBankovskieScheta, error) {
	type ReturnObj struct {
		Value []CatalogBankovskieScheta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_БанковскиеСчета", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogBankovskieScheta(key PrimaryCatalogBankovskieScheta, entity CatalogBankovskieScheta) (*CatalogBankovskieScheta, error) {
	return NewCatalogBankovskieScheta(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogBankovskieScheta(key PrimaryCatalogBankovskieScheta) error {
	return c.removeEntity(key)
}

type DocumentStornirovanieOtchetaKomitentuOProdazhakh struct {
	Key                                         Guid                                                                        `json:"Ref_Key,omitempty"`
	DataVersion                                 *String                                                                     `json:"DataVersion,omitempty"`
	Number                                      *String                                                                     `json:"Number,omitempty"`
	Date                                        *DateTime                                                                   `json:"Date,omitempty"`
	DeletionMark                                *Boolean                                                                    `json:"DeletionMark,omitempty"`
	Posted                                      *Boolean                                                                    `json:"Posted,omitempty"`
	ValiutaDokumentaKey                         *Guid                                                                       `json:"ВалютаДокумента_Key,omitempty"`
	Weight                                      *Double                                                                     `json:"ВесДокумента,omitempty"`
	DogovorKontragentaKey                       *Guid                                                                       `json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie                           *String                                                                     `json:"ДокументОснование,omitempty"`
	KolichestvoDokumenta                        *Int64                                                                      `json:"КоличествоДокумента,omitempty"`
	Comment                                     *String                                                                     `json:"Комментарий,omitempty"`
	KontragentKey                               *Guid                                                                       `json:"Контрагент_Key,omitempty"`
	KratnostVzaimoraschetov                     *Int64                                                                      `json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov                         *Double                                                                     `json:"КурсВзаиморасчетов,omitempty"`
	OrganizatsiiaKey                            *Guid                                                                       `json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                            *Guid                                                                       `json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey                            *Guid                                                                       `json:"Подразделение_Key,omitempty"`
	ProtsentKomissionnogoVoznagrazhdeniia       *Double                                                                     `json:"ПроцентКомиссионногоВознаграждения,omitempty"`
	Sdelka                                      *String                                                                     `json:"Сделка,omitempty"`
	SposobRaschetaKomissionnogoVoznagrazhdeniia *String                                                                     `json:"СпособРасчетаКомиссионногоВознаграждения,omitempty"`
	StavkaNDSVoznagrazhdeniia                   *String                                                                     `json:"СтавкаНДСВознаграждения,omitempty"`
	SummaVoznagrazhdeniia                       *Double                                                                     `json:"СуммаВознаграждения,omitempty"`
	SumOfDocument                               *Double                                                                     `json:"СуммаДокумента,omitempty"`
	TipDokumenta                                *String                                                                     `json:"ТипДокумента,omitempty"`
	TipTsenKey                                  *Guid                                                                       `json:"ТипЦен_Key,omitempty"`
	UderzhatKomissionnoeVoznagrazhdenie         *Boolean                                                                    `json:"УдержатьКомиссионноеВознаграждение,omitempty"`
	UsloviiaOplatyKey                           *Guid                                                                       `json:"УсловияОплаты_Key,omitempty"`
	KhoziaistvennaiaOperatsiiaKey               *Guid                                                                       `json:"ХозяйственнаяОперация_Key,omitempty"`
	DenezhnyeSredstva                           *[]DocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstvaRowType `json:"ДенежныеСредства,omitempty"`
	Goods                                       *[]DocumentStornirovanieOtchetaKomitentuOProdazhakhTovaryRowType            `json:"Товары,omitempty"`
	DokumentOsnovanieType                       *String                                                                     `json:"ДокументОснование_Type,omitempty"`
	SdelkaType                                  *String                                                                     `json:"Сделка_Type,omitempty"`
}

func (DocumentStornirovanieOtchetaKomitentuOProdazhakh) APIEntityType() string {
	return "Document_СторнированиеОтчетаКомитентуОПродажах"
}
func NewDocumentStornirovanieOtchetaKomitentuOProdazhakh(data string, prevError error) (*DocumentStornirovanieOtchetaKomitentuOProdazhakh, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentStornirovanieOtchetaKomitentuOProdazhakh)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentStornirovanieOtchetaKomitentuOProdazhakh(entity DocumentStornirovanieOtchetaKomitentuOProdazhakh) (*DocumentStornirovanieOtchetaKomitentuOProdazhakh, error) {
	return NewDocumentStornirovanieOtchetaKomitentuOProdazhakh(c.createEntity(entity))
}
func (c *Client) DocumentStornirovanieOtchetaKomitentuOProdazhakh(key PrimaryDocumentStornirovanieOtchetaKomitentuOProdazhakh, fields []string) (*DocumentStornirovanieOtchetaKomitentuOProdazhakh, error) {
	return NewDocumentStornirovanieOtchetaKomitentuOProdazhakh(c.getEntity(key, fields))
}
func (c *Client) DocumentStornirovanieOtchetaKomitentuOProdazhakhs(where Where) (*[]DocumentStornirovanieOtchetaKomitentuOProdazhakh, error) {
	type ReturnObj struct {
		Value []DocumentStornirovanieOtchetaKomitentuOProdazhakh `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СторнированиеОтчетаКомитентуОПродажах", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentStornirovanieOtchetaKomitentuOProdazhakh(key PrimaryDocumentStornirovanieOtchetaKomitentuOProdazhakh, entity DocumentStornirovanieOtchetaKomitentuOProdazhakh) (*DocumentStornirovanieOtchetaKomitentuOProdazhakh, error) {
	return NewDocumentStornirovanieOtchetaKomitentuOProdazhakh(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentStornirovanieOtchetaKomitentuOProdazhakh(key PrimaryDocumentStornirovanieOtchetaKomitentuOProdazhakh) error {
	return c.removeEntity(key)
}

type DocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstva struct {
	Key                   Guid    `json:"Ref_Key,omitempty"`
	LineNumber            Int64   `json:"LineNumber,omitempty"`
	VidOtchetaPoPlatezham *String `json:"ВидОтчетаПоПлатежам,omitempty"`
	StavkaNDS             *String `json:"СтавкаНДС,omitempty"`
	Sum                   *Double `json:"Сумма,omitempty"`
	SummaNDS              *Double `json:"СуммаНДС,omitempty"`
}

func (DocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstva) APIEntityType() string {
	return "Document_СторнированиеОтчетаКомитентуОПродажах_ДенежныеСредства"
}
func NewDocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstva(data string, prevError error) (*DocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstva, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstva)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstva(entity DocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstva) (*DocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstva, error) {
	return NewDocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstva(c.createEntity(entity))
}
func (c *Client) DocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstva(key PrimaryDocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstva, fields []string) (*DocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstva, error) {
	return NewDocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstva(c.getEntity(key, fields))
}
func (c *Client) DocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstvas(where Where) (*[]DocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstva, error) {
	type ReturnObj struct {
		Value []DocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstva `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СторнированиеОтчетаКомитентуОПродажах_ДенежныеСредства", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstva(key PrimaryDocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstva, entity DocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstva) (*DocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstva, error) {
	return NewDocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstva(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstva(key PrimaryDocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstva) error {
	return c.removeEntity(key)
}

type DocumentStornirovanieOtchetaKomitentuOProdazhakhTovary struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	Weight                         *Double `json:"Вес,omitempty"`
	DokumentPostupleniia           *String `json:"ДокументПоступления,omitempty"`
	Quantity                       *Int64  `json:"Количество,omitempty"`
	ItemKey                        *Guid   `json:"Номенклатура_Key,omitempty"`
	OtchetKomitentuKey             *Guid   `json:"ОтчетКомитенту_Key,omitempty"`
	SizeKey                        *Guid   `json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	Sum                            *Double `json:"Сумма,omitempty"`
	SummaVoznagrazhdeniia          *Double `json:"СуммаВознаграждения,omitempty"`
	SummaNDSVoznagrazhdeniia       *Double `json:"СуммаНДСВознаграждения,omitempty"`
	SummaPostupleniia              *Double `json:"СуммаПоступления,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Double `json:"Цена,omitempty"`
	TsenaPostupleniia              *Double `json:"ЦенаПоступления,omitempty"`
	DokumentPostupleniiaType       *String `json:"ДокументПоступления_Type,omitempty"`
}

func (DocumentStornirovanieOtchetaKomitentuOProdazhakhTovary) APIEntityType() string {
	return "Document_СторнированиеОтчетаКомитентуОПродажах_Товары"
}
func NewDocumentStornirovanieOtchetaKomitentuOProdazhakhTovary(data string, prevError error) (*DocumentStornirovanieOtchetaKomitentuOProdazhakhTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentStornirovanieOtchetaKomitentuOProdazhakhTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentStornirovanieOtchetaKomitentuOProdazhakhTovary(entity DocumentStornirovanieOtchetaKomitentuOProdazhakhTovary) (*DocumentStornirovanieOtchetaKomitentuOProdazhakhTovary, error) {
	return NewDocumentStornirovanieOtchetaKomitentuOProdazhakhTovary(c.createEntity(entity))
}
func (c *Client) DocumentStornirovanieOtchetaKomitentuOProdazhakhTovary(key PrimaryDocumentStornirovanieOtchetaKomitentuOProdazhakhTovary, fields []string) (*DocumentStornirovanieOtchetaKomitentuOProdazhakhTovary, error) {
	return NewDocumentStornirovanieOtchetaKomitentuOProdazhakhTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentStornirovanieOtchetaKomitentuOProdazhakhTovarys(where Where) (*[]DocumentStornirovanieOtchetaKomitentuOProdazhakhTovary, error) {
	type ReturnObj struct {
		Value []DocumentStornirovanieOtchetaKomitentuOProdazhakhTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СторнированиеОтчетаКомитентуОПродажах_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentStornirovanieOtchetaKomitentuOProdazhakhTovary(key PrimaryDocumentStornirovanieOtchetaKomitentuOProdazhakhTovary, entity DocumentStornirovanieOtchetaKomitentuOProdazhakhTovary) (*DocumentStornirovanieOtchetaKomitentuOProdazhakhTovary, error) {
	return NewDocumentStornirovanieOtchetaKomitentuOProdazhakhTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentStornirovanieOtchetaKomitentuOProdazhakhTovary(key PrimaryDocumentStornirovanieOtchetaKomitentuOProdazhakhTovary) error {
	return c.removeEntity(key)
}

type DocumentPeredachaVRemont struct {
	Key                      Guid                                                       `json:"Ref_Key,omitempty"`
	DataVersion              *String                                                    `json:"DataVersion,omitempty"`
	Number                   *String                                                    `json:"Number,omitempty"`
	Date                     *DateTime                                                  `json:"Date,omitempty"`
	DeletionMark             *Boolean                                                   `json:"DeletionMark,omitempty"`
	Posted                   *Boolean                                                   `json:"Posted,omitempty"`
	OrganizatsiiaKey         *Guid                                                      `json:"Организация_Key,omitempty"`
	DepartmentKey            *Guid                                                      `json:"Склад_Key,omitempty"`
	KontragentKey            *Guid                                                      `json:"Контрагент_Key,omitempty"`
	DogovorKontragentaKey    *Guid                                                      `json:"ДоговорКонтрагента_Key,omitempty"`
	SobstvennaiaMasterskaia  *Boolean                                                   `json:"СобственнаяМастерская,omitempty"`
	KolichestvoDokumenta     *Int64                                                     `json:"КоличествоДокумента,omitempty"`
	Weight                   *Double                                                    `json:"ВесДокумента,omitempty"`
	IzdeliiaPriniatyeVRemont *[]DocumentPeredachaVRemontIzdeliiaPriniatyeVRemontRowType `json:"ИзделияПринятыеВРемонт,omitempty"`
	Goods                    *[]DocumentPeredachaVRemontTovaryRowType                   `json:"Товары,omitempty"`
}

func (DocumentPeredachaVRemont) APIEntityType() string {
	return "Document_ПередачаВРемонт"
}
func NewDocumentPeredachaVRemont(data string, prevError error) (*DocumentPeredachaVRemont, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPeredachaVRemont)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPeredachaVRemont(entity DocumentPeredachaVRemont) (*DocumentPeredachaVRemont, error) {
	return NewDocumentPeredachaVRemont(c.createEntity(entity))
}
func (c *Client) DocumentPeredachaVRemont(key PrimaryDocumentPeredachaVRemont, fields []string) (*DocumentPeredachaVRemont, error) {
	return NewDocumentPeredachaVRemont(c.getEntity(key, fields))
}
func (c *Client) DocumentPeredachaVRemonts(where Where) (*[]DocumentPeredachaVRemont, error) {
	type ReturnObj struct {
		Value []DocumentPeredachaVRemont `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПередачаВРемонт", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPeredachaVRemont(key PrimaryDocumentPeredachaVRemont, entity DocumentPeredachaVRemont) (*DocumentPeredachaVRemont, error) {
	return NewDocumentPeredachaVRemont(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPeredachaVRemont(key PrimaryDocumentPeredachaVRemont) error {
	return c.removeEntity(key)
}

type DocumentPeredachaVRemontIzdeliiaPriniatyeVRemont struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	KliuchNomenklaturyKey          *Guid   `json:"КлючНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid   `json:"Размер_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	InstanceKey                    *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	DokumentOprikhodovaniiaKey     *Guid   `json:"ДокументОприходования_Key,omitempty"`
	Weight                         *Double `json:"Вес,omitempty"`
	Quantity                       *Int64  `json:"Количество,omitempty"`
}

func (DocumentPeredachaVRemontIzdeliiaPriniatyeVRemont) APIEntityType() string {
	return "Document_ПередачаВРемонт_ИзделияПринятыеВРемонт"
}
func NewDocumentPeredachaVRemontIzdeliiaPriniatyeVRemont(data string, prevError error) (*DocumentPeredachaVRemontIzdeliiaPriniatyeVRemont, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPeredachaVRemontIzdeliiaPriniatyeVRemont)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPeredachaVRemontIzdeliiaPriniatyeVRemont(entity DocumentPeredachaVRemontIzdeliiaPriniatyeVRemont) (*DocumentPeredachaVRemontIzdeliiaPriniatyeVRemont, error) {
	return NewDocumentPeredachaVRemontIzdeliiaPriniatyeVRemont(c.createEntity(entity))
}
func (c *Client) DocumentPeredachaVRemontIzdeliiaPriniatyeVRemont(key PrimaryDocumentPeredachaVRemontIzdeliiaPriniatyeVRemont, fields []string) (*DocumentPeredachaVRemontIzdeliiaPriniatyeVRemont, error) {
	return NewDocumentPeredachaVRemontIzdeliiaPriniatyeVRemont(c.getEntity(key, fields))
}
func (c *Client) DocumentPeredachaVRemontIzdeliiaPriniatyeVRemonts(where Where) (*[]DocumentPeredachaVRemontIzdeliiaPriniatyeVRemont, error) {
	type ReturnObj struct {
		Value []DocumentPeredachaVRemontIzdeliiaPriniatyeVRemont `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПередачаВРемонт_ИзделияПринятыеВРемонт", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPeredachaVRemontIzdeliiaPriniatyeVRemont(key PrimaryDocumentPeredachaVRemontIzdeliiaPriniatyeVRemont, entity DocumentPeredachaVRemontIzdeliiaPriniatyeVRemont) (*DocumentPeredachaVRemontIzdeliiaPriniatyeVRemont, error) {
	return NewDocumentPeredachaVRemontIzdeliiaPriniatyeVRemont(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPeredachaVRemontIzdeliiaPriniatyeVRemont(key PrimaryDocumentPeredachaVRemontIzdeliiaPriniatyeVRemont) error {
	return c.removeEntity(key)
}

type DocumentPeredachaVRemontTovary struct {
	Key                            Guid    `json:"Ref_Key,omitempty"`
	LineNumber                     Int64   `json:"LineNumber,omitempty"`
	Weight                         *Double `json:"Вес,omitempty"`
	KachestvoKey                   *Guid   `json:"Качество_Key,omitempty"`
	Quantity                       *Int64  `json:"Количество,omitempty"`
	ItemKey                        *Guid   `json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid   `json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `json:"ХарактеристикаНоменклатуры_Key,omitempty"`
}

func (DocumentPeredachaVRemontTovary) APIEntityType() string {
	return "Document_ПередачаВРемонт_Товары"
}
func NewDocumentPeredachaVRemontTovary(data string, prevError error) (*DocumentPeredachaVRemontTovary, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(DocumentPeredachaVRemontTovary)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateDocumentPeredachaVRemontTovary(entity DocumentPeredachaVRemontTovary) (*DocumentPeredachaVRemontTovary, error) {
	return NewDocumentPeredachaVRemontTovary(c.createEntity(entity))
}
func (c *Client) DocumentPeredachaVRemontTovary(key PrimaryDocumentPeredachaVRemontTovary, fields []string) (*DocumentPeredachaVRemontTovary, error) {
	return NewDocumentPeredachaVRemontTovary(c.getEntity(key, fields))
}
func (c *Client) DocumentPeredachaVRemontTovarys(where Where) (*[]DocumentPeredachaVRemontTovary, error) {
	type ReturnObj struct {
		Value []DocumentPeredachaVRemontTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПередачаВРемонт_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateDocumentPeredachaVRemontTovary(key PrimaryDocumentPeredachaVRemontTovary, entity DocumentPeredachaVRemontTovary) (*DocumentPeredachaVRemontTovary, error) {
	return NewDocumentPeredachaVRemontTovary(c.updateEntity(key, entity))
}
func (c *Client) DeleteDocumentPeredachaVRemontTovary(key PrimaryDocumentPeredachaVRemontTovary) error {
	return c.removeEntity(key)
}

type CatalogPolzovateli struct {
	Key                        Guid     `json:"Ref_Key,omitempty"`
	DataVersion                *String  `json:"DataVersion,omitempty"`
	Description                *String  `json:"Description,omitempty"`
	Code                       *String  `json:"Code,omitempty"`
	ParentKey                  *Guid    `json:"Parent_Key,omitempty"`
	IsFolder                   *Boolean `json:"IsFolder,omitempty"`
	DeletionMark               *Boolean `json:"DeletionMark,omitempty"`
	Number                     *String  `json:"Номер,omitempty"`
	StrategiiaDostupaKZapisiam *String  `json:"СтратегияДоступаКЗаписям,omitempty"`
	FizLitsoKey                *Guid    `json:"ФизЛицо_Key,omitempty"`
	ProfilKey                  *Guid    `json:"Профиль_Key,omitempty"`
}

func (CatalogPolzovateli) APIEntityType() string {
	return "Catalog_Пользователи"
}
func NewCatalogPolzovateli(data string, prevError error) (*CatalogPolzovateli, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogPolzovateli)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogPolzovateli(entity CatalogPolzovateli) (*CatalogPolzovateli, error) {
	return NewCatalogPolzovateli(c.createEntity(entity))
}
func (c *Client) CatalogPolzovateli(key PrimaryCatalogPolzovateli, fields []string) (*CatalogPolzovateli, error) {
	return NewCatalogPolzovateli(c.getEntity(key, fields))
}
func (c *Client) CatalogPolzovatelis(where Where) (*[]CatalogPolzovateli, error) {
	type ReturnObj struct {
		Value []CatalogPolzovateli `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Пользователи", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogPolzovateli(key PrimaryCatalogPolzovateli, entity CatalogPolzovateli) (*CatalogPolzovateli, error) {
	return NewCatalogPolzovateli(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogPolzovateli(key PrimaryCatalogPolzovateli) error {
	return c.removeEntity(key)
}

type CatalogTsenovyeKoridory struct {
	Key          Guid     `json:"Ref_Key,omitempty"`
	DataVersion  *String  `json:"DataVersion,omitempty"`
	Description  *String  `json:"Description,omitempty"`
	Code         *String  `json:"Code,omitempty"`
	ParentKey    *Guid    `json:"Parent_Key,omitempty"`
	IsFolder     *Boolean `json:"IsFolder,omitempty"`
	DeletionMark *Boolean `json:"DeletionMark,omitempty"`
	TsenaOt      *Int64   `json:"ЦенаОт,omitempty"`
	TsenaDo      *Int64   `json:"ЦенаДо,omitempty"`
}

func (CatalogTsenovyeKoridory) APIEntityType() string {
	return "Catalog_ЦеновыеКоридоры"
}
func NewCatalogTsenovyeKoridory(data string, prevError error) (*CatalogTsenovyeKoridory, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogTsenovyeKoridory)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogTsenovyeKoridory(entity CatalogTsenovyeKoridory) (*CatalogTsenovyeKoridory, error) {
	return NewCatalogTsenovyeKoridory(c.createEntity(entity))
}
func (c *Client) CatalogTsenovyeKoridory(key PrimaryCatalogTsenovyeKoridory, fields []string) (*CatalogTsenovyeKoridory, error) {
	return NewCatalogTsenovyeKoridory(c.getEntity(key, fields))
}
func (c *Client) CatalogTsenovyeKoridorys(where Where) (*[]CatalogTsenovyeKoridory, error) {
	type ReturnObj struct {
		Value []CatalogTsenovyeKoridory `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ЦеновыеКоридоры", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogTsenovyeKoridory(key PrimaryCatalogTsenovyeKoridory, entity CatalogTsenovyeKoridory) (*CatalogTsenovyeKoridory, error) {
	return NewCatalogTsenovyeKoridory(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogTsenovyeKoridory(key PrimaryCatalogTsenovyeKoridory) error {
	return c.removeEntity(key)
}

type CatalogGruppySkladov struct {
	Key          Guid                                 `json:"Ref_Key,omitempty"`
	DataVersion  *String                              `json:"DataVersion,omitempty"`
	Description  *String                              `json:"Description,omitempty"`
	Code         *String                              `json:"Code,omitempty"`
	DeletionMark *Boolean                             `json:"DeletionMark,omitempty"`
	Sklady       *[]CatalogGruppySkladovSkladyRowType `json:"Склады,omitempty"`
}

func (CatalogGruppySkladov) APIEntityType() string {
	return "Catalog_ГруппыСкладов"
}
func NewCatalogGruppySkladov(data string, prevError error) (*CatalogGruppySkladov, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogGruppySkladov)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogGruppySkladov(entity CatalogGruppySkladov) (*CatalogGruppySkladov, error) {
	return NewCatalogGruppySkladov(c.createEntity(entity))
}
func (c *Client) CatalogGruppySkladov(key PrimaryCatalogGruppySkladov, fields []string) (*CatalogGruppySkladov, error) {
	return NewCatalogGruppySkladov(c.getEntity(key, fields))
}
func (c *Client) CatalogGruppySkladovs(where Where) (*[]CatalogGruppySkladov, error) {
	type ReturnObj struct {
		Value []CatalogGruppySkladov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ГруппыСкладов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogGruppySkladov(key PrimaryCatalogGruppySkladov, entity CatalogGruppySkladov) (*CatalogGruppySkladov, error) {
	return NewCatalogGruppySkladov(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogGruppySkladov(key PrimaryCatalogGruppySkladov) error {
	return c.removeEntity(key)
}

type CatalogGruppySkladovSklady struct {
	Key           Guid  `json:"Ref_Key,omitempty"`
	LineNumber    Int64 `json:"LineNumber,omitempty"`
	DepartmentKey *Guid `json:"Склад_Key,omitempty"`
}

func (CatalogGruppySkladovSklady) APIEntityType() string {
	return "Catalog_ГруппыСкладов_Склады"
}
func NewCatalogGruppySkladovSklady(data string, prevError error) (*CatalogGruppySkladovSklady, error) {
	if prevError != nil {
		return nil, prevError
	}
	result := new(CatalogGruppySkladovSklady)
	err := json.Unmarshal([]byte(data), result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
func (c *Client) CreateCatalogGruppySkladovSklady(entity CatalogGruppySkladovSklady) (*CatalogGruppySkladovSklady, error) {
	return NewCatalogGruppySkladovSklady(c.createEntity(entity))
}
func (c *Client) CatalogGruppySkladovSklady(key PrimaryCatalogGruppySkladovSklady, fields []string) (*CatalogGruppySkladovSklady, error) {
	return NewCatalogGruppySkladovSklady(c.getEntity(key, fields))
}
func (c *Client) CatalogGruppySkladovSkladys(where Where) (*[]CatalogGruppySkladovSklady, error) {
	type ReturnObj struct {
		Value []CatalogGruppySkladovSklady `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ГруппыСкладов_Склады", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result.Value, nil
}
func (c *Client) UpdateCatalogGruppySkladovSklady(key PrimaryCatalogGruppySkladovSklady, entity CatalogGruppySkladovSklady) (*CatalogGruppySkladovSklady, error) {
	return NewCatalogGruppySkladovSklady(c.updateEntity(key, entity))
}
func (c *Client) DeleteCatalogGruppySkladovSklady(key PrimaryCatalogGruppySkladovSklady) error {
	return c.removeEntity(key)
}
