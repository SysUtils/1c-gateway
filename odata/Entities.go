package odata

import (
	"encoding/json"
	"fmt"
	"net/url"
)

func (c *Client) AccumulationRegisterPartiiTovarovVProizvodstve(Recorder String, RecorderType String) (*AccumulationRegisterPartiiTovarovVProizvodstve, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ПартииТоваровВПроизводстве", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterPartiiTovarovVProizvodstve{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterPartiiTovarovVProizvodstve(Recorder String, RecorderType String, entity interface{}) (*AccumulationRegisterPartiiTovarovVProizvodstve, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ПартииТоваровВПроизводстве", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterPartiiTovarovVProizvodstve{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterPartiiTovarovVProizvodstve(Recorder String, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ПартииТоваровВПроизводстве", args)
}

func (c *Client) CreateAccumulationRegisterPartiiTovarovVProizvodstve(data AccumulationRegisterPartiiTovarovVProizvodstve) (*AccumulationRegisterPartiiTovarovVProizvodstve, error) {
	raw, err := c.createEntity("AccumulationRegister_ПартииТоваровВПроизводстве", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterPartiiTovarovVProizvodstve{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterPartiiTovarovVProizvodstves(where Where) ([]AccumulationRegisterPartiiTovarovVProizvodstve, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterPartiiTovarovVProizvodstve `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ПартииТоваровВПроизводстве", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterPartiiTovarovVProizvodstveRecordType(Recorder String, LineNumber Int, RecorderType String) (*AccumulationRegisterPartiiTovarovVProizvodstveRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ПартииТоваровВПроизводстве_RecordType", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterPartiiTovarovVProizvodstveRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterPartiiTovarovVProizvodstveRecordType(Recorder String, LineNumber Int, RecorderType String, entity interface{}) (*AccumulationRegisterPartiiTovarovVProizvodstveRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ПартииТоваровВПроизводстве_RecordType", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterPartiiTovarovVProizvodstveRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterPartiiTovarovVProizvodstveRecordType(Recorder String, LineNumber Int, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ПартииТоваровВПроизводстве_RecordType", args)
}

func (c *Client) CreateAccumulationRegisterPartiiTovarovVProizvodstveRecordType(data AccumulationRegisterPartiiTovarovVProizvodstveRecordType) (*AccumulationRegisterPartiiTovarovVProizvodstveRecordType, error) {
	raw, err := c.createEntity("AccumulationRegister_ПартииТоваровВПроизводстве_RecordType", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterPartiiTovarovVProizvodstveRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterPartiiTovarovVProizvodstveRecordTypes(where Where) ([]AccumulationRegisterPartiiTovarovVProizvodstveRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterPartiiTovarovVProizvodstveRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ПартииТоваровВПроизводстве_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterVzaimoraschetySPodotchetnymiLitsami(Recorder String, RecorderType String) (*AccumulationRegisterVzaimoraschetySPodotchetnymiLitsami, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ВзаиморасчетыСПодотчетнымиЛицами", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterVzaimoraschetySPodotchetnymiLitsami{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterVzaimoraschetySPodotchetnymiLitsami(Recorder String, RecorderType String, entity interface{}) (*AccumulationRegisterVzaimoraschetySPodotchetnymiLitsami, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ВзаиморасчетыСПодотчетнымиЛицами", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterVzaimoraschetySPodotchetnymiLitsami{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterVzaimoraschetySPodotchetnymiLitsami(Recorder String, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ВзаиморасчетыСПодотчетнымиЛицами", args)
}

func (c *Client) CreateAccumulationRegisterVzaimoraschetySPodotchetnymiLitsami(data AccumulationRegisterVzaimoraschetySPodotchetnymiLitsami) (*AccumulationRegisterVzaimoraschetySPodotchetnymiLitsami, error) {
	raw, err := c.createEntity("AccumulationRegister_ВзаиморасчетыСПодотчетнымиЛицами", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterVzaimoraschetySPodotchetnymiLitsami{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterVzaimoraschetySPodotchetnymiLitsamis(where Where) ([]AccumulationRegisterVzaimoraschetySPodotchetnymiLitsami, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterVzaimoraschetySPodotchetnymiLitsami `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ВзаиморасчетыСПодотчетнымиЛицами", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRecordType(Recorder String, LineNumber Int, RecorderType String) (*AccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ВзаиморасчетыСПодотчетнымиЛицами_RecordType", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRecordType(Recorder String, LineNumber Int, RecorderType String, entity interface{}) (*AccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ВзаиморасчетыСПодотчетнымиЛицами_RecordType", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRecordType(Recorder String, LineNumber Int, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ВзаиморасчетыСПодотчетнымиЛицами_RecordType", args)
}

func (c *Client) CreateAccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRecordType(data AccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRecordType) (*AccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRecordType, error) {
	raw, err := c.createEntity("AccumulationRegister_ВзаиморасчетыСПодотчетнымиЛицами_RecordType", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRecordTypes(where Where) ([]AccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ВзаиморасчетыСПодотчетнымиЛицами_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterVnutrennieZakazy(Recorder String, RecorderType String) (*AccumulationRegisterVnutrennieZakazy, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ВнутренниеЗаказы", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterVnutrennieZakazy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterVnutrennieZakazy(Recorder String, RecorderType String, entity interface{}) (*AccumulationRegisterVnutrennieZakazy, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ВнутренниеЗаказы", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterVnutrennieZakazy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterVnutrennieZakazy(Recorder String, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ВнутренниеЗаказы", args)
}

func (c *Client) CreateAccumulationRegisterVnutrennieZakazy(data AccumulationRegisterVnutrennieZakazy) (*AccumulationRegisterVnutrennieZakazy, error) {
	raw, err := c.createEntity("AccumulationRegister_ВнутренниеЗаказы", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterVnutrennieZakazy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterVnutrennieZakazys(where Where) ([]AccumulationRegisterVnutrennieZakazy, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterVnutrennieZakazy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ВнутренниеЗаказы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterVnutrennieZakazyRecordType(Recorder String, LineNumber Int, RecorderType String) (*AccumulationRegisterVnutrennieZakazyRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ВнутренниеЗаказы_RecordType", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterVnutrennieZakazyRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterVnutrennieZakazyRecordType(Recorder String, LineNumber Int, RecorderType String, entity interface{}) (*AccumulationRegisterVnutrennieZakazyRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ВнутренниеЗаказы_RecordType", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterVnutrennieZakazyRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterVnutrennieZakazyRecordType(Recorder String, LineNumber Int, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ВнутренниеЗаказы_RecordType", args)
}

func (c *Client) CreateAccumulationRegisterVnutrennieZakazyRecordType(data AccumulationRegisterVnutrennieZakazyRecordType) (*AccumulationRegisterVnutrennieZakazyRecordType, error) {
	raw, err := c.createEntity("AccumulationRegister_ВнутренниеЗаказы_RecordType", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterVnutrennieZakazyRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterVnutrennieZakazyRecordTypes(where Where) ([]AccumulationRegisterVnutrennieZakazyRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterVnutrennieZakazyRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ВнутренниеЗаказы_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterDenezhnyeSredstvaKomitenta(Recorder String, RecorderType String) (*AccumulationRegisterDenezhnyeSredstvaKomitenta, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ДенежныеСредстваКомитента", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDenezhnyeSredstvaKomitenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterDenezhnyeSredstvaKomitenta(Recorder String, RecorderType String, entity interface{}) (*AccumulationRegisterDenezhnyeSredstvaKomitenta, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ДенежныеСредстваКомитента", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDenezhnyeSredstvaKomitenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterDenezhnyeSredstvaKomitenta(Recorder String, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ДенежныеСредстваКомитента", args)
}

func (c *Client) CreateAccumulationRegisterDenezhnyeSredstvaKomitenta(data AccumulationRegisterDenezhnyeSredstvaKomitenta) (*AccumulationRegisterDenezhnyeSredstvaKomitenta, error) {
	raw, err := c.createEntity("AccumulationRegister_ДенежныеСредстваКомитента", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDenezhnyeSredstvaKomitenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterDenezhnyeSredstvaKomitentas(where Where) ([]AccumulationRegisterDenezhnyeSredstvaKomitenta, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterDenezhnyeSredstvaKomitenta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ДенежныеСредстваКомитента", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterDenezhnyeSredstvaKomitentaRecordType(Recorder String, LineNumber Int, RecorderType String) (*AccumulationRegisterDenezhnyeSredstvaKomitentaRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ДенежныеСредстваКомитента_RecordType", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDenezhnyeSredstvaKomitentaRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterDenezhnyeSredstvaKomitentaRecordType(Recorder String, LineNumber Int, RecorderType String, entity interface{}) (*AccumulationRegisterDenezhnyeSredstvaKomitentaRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ДенежныеСредстваКомитента_RecordType", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDenezhnyeSredstvaKomitentaRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterDenezhnyeSredstvaKomitentaRecordType(Recorder String, LineNumber Int, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ДенежныеСредстваКомитента_RecordType", args)
}

func (c *Client) CreateAccumulationRegisterDenezhnyeSredstvaKomitentaRecordType(data AccumulationRegisterDenezhnyeSredstvaKomitentaRecordType) (*AccumulationRegisterDenezhnyeSredstvaKomitentaRecordType, error) {
	raw, err := c.createEntity("AccumulationRegister_ДенежныеСредстваКомитента_RecordType", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDenezhnyeSredstvaKomitentaRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterDenezhnyeSredstvaKomitentaRecordTypes(where Where) ([]AccumulationRegisterDenezhnyeSredstvaKomitentaRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterDenezhnyeSredstvaKomitentaRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ДенежныеСредстваКомитента_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterZakazyKlientov(Recorder String, RecorderType String) (*AccumulationRegisterZakazyKlientov, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ЗаказыКлиентов", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterZakazyKlientov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterZakazyKlientov(Recorder String, RecorderType String, entity interface{}) (*AccumulationRegisterZakazyKlientov, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ЗаказыКлиентов", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterZakazyKlientov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterZakazyKlientov(Recorder String, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ЗаказыКлиентов", args)
}

func (c *Client) CreateAccumulationRegisterZakazyKlientov(data AccumulationRegisterZakazyKlientov) (*AccumulationRegisterZakazyKlientov, error) {
	raw, err := c.createEntity("AccumulationRegister_ЗаказыКлиентов", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterZakazyKlientov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterZakazyKlientovs(where Where) ([]AccumulationRegisterZakazyKlientov, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterZakazyKlientov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ЗаказыКлиентов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterZakazyKlientovRecordType(Recorder String, LineNumber Int, RecorderType String) (*AccumulationRegisterZakazyKlientovRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ЗаказыКлиентов_RecordType", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterZakazyKlientovRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterZakazyKlientovRecordType(Recorder String, LineNumber Int, RecorderType String, entity interface{}) (*AccumulationRegisterZakazyKlientovRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ЗаказыКлиентов_RecordType", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterZakazyKlientovRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterZakazyKlientovRecordType(Recorder String, LineNumber Int, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ЗаказыКлиентов_RecordType", args)
}

func (c *Client) CreateAccumulationRegisterZakazyKlientovRecordType(data AccumulationRegisterZakazyKlientovRecordType) (*AccumulationRegisterZakazyKlientovRecordType, error) {
	raw, err := c.createEntity("AccumulationRegister_ЗаказыКлиентов_RecordType", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterZakazyKlientovRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterZakazyKlientovRecordTypes(where Where) ([]AccumulationRegisterZakazyKlientovRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterZakazyKlientovRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ЗаказыКлиентов_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterSummyPoFinmonitoringuRoznitsa(Recorder String, RecorderType String) (*AccumulationRegisterSummyPoFinmonitoringuRoznitsa, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_СуммыПоФинмониторингуРозница", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSummyPoFinmonitoringuRoznitsa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterSummyPoFinmonitoringuRoznitsa(Recorder String, RecorderType String, entity interface{}) (*AccumulationRegisterSummyPoFinmonitoringuRoznitsa, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_СуммыПоФинмониторингуРозница", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSummyPoFinmonitoringuRoznitsa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterSummyPoFinmonitoringuRoznitsa(Recorder String, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_СуммыПоФинмониторингуРозница", args)
}

func (c *Client) CreateAccumulationRegisterSummyPoFinmonitoringuRoznitsa(data AccumulationRegisterSummyPoFinmonitoringuRoznitsa) (*AccumulationRegisterSummyPoFinmonitoringuRoznitsa, error) {
	raw, err := c.createEntity("AccumulationRegister_СуммыПоФинмониторингуРозница", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSummyPoFinmonitoringuRoznitsa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterSummyPoFinmonitoringuRoznitsas(where Where) ([]AccumulationRegisterSummyPoFinmonitoringuRoznitsa, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterSummyPoFinmonitoringuRoznitsa `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_СуммыПоФинмониторингуРозница", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterSummyPoFinmonitoringuRoznitsaRecordType(Recorder String, LineNumber Int, RecorderType String) (*AccumulationRegisterSummyPoFinmonitoringuRoznitsaRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_СуммыПоФинмониторингуРозница_RecordType", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSummyPoFinmonitoringuRoznitsaRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterSummyPoFinmonitoringuRoznitsaRecordType(Recorder String, LineNumber Int, RecorderType String, entity interface{}) (*AccumulationRegisterSummyPoFinmonitoringuRoznitsaRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_СуммыПоФинмониторингуРозница_RecordType", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSummyPoFinmonitoringuRoznitsaRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterSummyPoFinmonitoringuRoznitsaRecordType(Recorder String, LineNumber Int, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_СуммыПоФинмониторингуРозница_RecordType", args)
}

func (c *Client) CreateAccumulationRegisterSummyPoFinmonitoringuRoznitsaRecordType(data AccumulationRegisterSummyPoFinmonitoringuRoznitsaRecordType) (*AccumulationRegisterSummyPoFinmonitoringuRoznitsaRecordType, error) {
	raw, err := c.createEntity("AccumulationRegister_СуммыПоФинмониторингуРозница_RecordType", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSummyPoFinmonitoringuRoznitsaRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterSummyPoFinmonitoringuRoznitsaRecordTypes(where Where) ([]AccumulationRegisterSummyPoFinmonitoringuRoznitsaRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterSummyPoFinmonitoringuRoznitsaRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_СуммыПоФинмониторингуРозница_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterDenezhnyeSredstvaKPolucheniiu(Recorder String, RecorderType String) (*AccumulationRegisterDenezhnyeSredstvaKPolucheniiu, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ДенежныеСредстваКПолучению", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDenezhnyeSredstvaKPolucheniiu{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterDenezhnyeSredstvaKPolucheniiu(Recorder String, RecorderType String, entity interface{}) (*AccumulationRegisterDenezhnyeSredstvaKPolucheniiu, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ДенежныеСредстваКПолучению", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDenezhnyeSredstvaKPolucheniiu{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterDenezhnyeSredstvaKPolucheniiu(Recorder String, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ДенежныеСредстваКПолучению", args)
}

func (c *Client) CreateAccumulationRegisterDenezhnyeSredstvaKPolucheniiu(data AccumulationRegisterDenezhnyeSredstvaKPolucheniiu) (*AccumulationRegisterDenezhnyeSredstvaKPolucheniiu, error) {
	raw, err := c.createEntity("AccumulationRegister_ДенежныеСредстваКПолучению", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDenezhnyeSredstvaKPolucheniiu{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterDenezhnyeSredstvaKPolucheniius(where Where) ([]AccumulationRegisterDenezhnyeSredstvaKPolucheniiu, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterDenezhnyeSredstvaKPolucheniiu `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ДенежныеСредстваКПолучению", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterDenezhnyeSredstvaKPolucheniiuRecordType(Recorder String, LineNumber Int, RecorderType String) (*AccumulationRegisterDenezhnyeSredstvaKPolucheniiuRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ДенежныеСредстваКПолучению_RecordType", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDenezhnyeSredstvaKPolucheniiuRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterDenezhnyeSredstvaKPolucheniiuRecordType(Recorder String, LineNumber Int, RecorderType String, entity interface{}) (*AccumulationRegisterDenezhnyeSredstvaKPolucheniiuRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ДенежныеСредстваКПолучению_RecordType", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDenezhnyeSredstvaKPolucheniiuRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterDenezhnyeSredstvaKPolucheniiuRecordType(Recorder String, LineNumber Int, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ДенежныеСредстваКПолучению_RecordType", args)
}

func (c *Client) CreateAccumulationRegisterDenezhnyeSredstvaKPolucheniiuRecordType(data AccumulationRegisterDenezhnyeSredstvaKPolucheniiuRecordType) (*AccumulationRegisterDenezhnyeSredstvaKPolucheniiuRecordType, error) {
	raw, err := c.createEntity("AccumulationRegister_ДенежныеСредстваКПолучению_RecordType", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDenezhnyeSredstvaKPolucheniiuRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterDenezhnyeSredstvaKPolucheniiuRecordTypes(where Where) ([]AccumulationRegisterDenezhnyeSredstvaKPolucheniiuRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterDenezhnyeSredstvaKPolucheniiuRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ДенежныеСредстваКПолучению_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterProdazhiPoDiskontnymKartam(Recorder String, RecorderType String) (*AccumulationRegisterProdazhiPoDiskontnymKartam, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ПродажиПоДисконтнымКартам", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterProdazhiPoDiskontnymKartam{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterProdazhiPoDiskontnymKartam(Recorder String, RecorderType String, entity interface{}) (*AccumulationRegisterProdazhiPoDiskontnymKartam, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ПродажиПоДисконтнымКартам", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterProdazhiPoDiskontnymKartam{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterProdazhiPoDiskontnymKartam(Recorder String, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ПродажиПоДисконтнымКартам", args)
}

func (c *Client) CreateAccumulationRegisterProdazhiPoDiskontnymKartam(data AccumulationRegisterProdazhiPoDiskontnymKartam) (*AccumulationRegisterProdazhiPoDiskontnymKartam, error) {
	raw, err := c.createEntity("AccumulationRegister_ПродажиПоДисконтнымКартам", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterProdazhiPoDiskontnymKartam{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterProdazhiPoDiskontnymKartams(where Where) ([]AccumulationRegisterProdazhiPoDiskontnymKartam, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterProdazhiPoDiskontnymKartam `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ПродажиПоДисконтнымКартам", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterProdazhiPoDiskontnymKartamRecordType(Recorder String, LineNumber Int, RecorderType String) (*AccumulationRegisterProdazhiPoDiskontnymKartamRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ПродажиПоДисконтнымКартам_RecordType", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterProdazhiPoDiskontnymKartamRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterProdazhiPoDiskontnymKartamRecordType(Recorder String, LineNumber Int, RecorderType String, entity interface{}) (*AccumulationRegisterProdazhiPoDiskontnymKartamRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ПродажиПоДисконтнымКартам_RecordType", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterProdazhiPoDiskontnymKartamRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterProdazhiPoDiskontnymKartamRecordType(Recorder String, LineNumber Int, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ПродажиПоДисконтнымКартам_RecordType", args)
}

func (c *Client) CreateAccumulationRegisterProdazhiPoDiskontnymKartamRecordType(data AccumulationRegisterProdazhiPoDiskontnymKartamRecordType) (*AccumulationRegisterProdazhiPoDiskontnymKartamRecordType, error) {
	raw, err := c.createEntity("AccumulationRegister_ПродажиПоДисконтнымКартам_RecordType", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterProdazhiPoDiskontnymKartamRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterProdazhiPoDiskontnymKartamRecordTypes(where Where) ([]AccumulationRegisterProdazhiPoDiskontnymKartamRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterProdazhiPoDiskontnymKartamRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ПродажиПоДисконтнымКартам_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterTovaryPoluchennye(Recorder String, RecorderType String) (*AccumulationRegisterTovaryPoluchennye, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ТоварыПолученные", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterTovaryPoluchennye{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterTovaryPoluchennye(Recorder String, RecorderType String, entity interface{}) (*AccumulationRegisterTovaryPoluchennye, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ТоварыПолученные", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterTovaryPoluchennye{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterTovaryPoluchennye(Recorder String, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ТоварыПолученные", args)
}

func (c *Client) CreateAccumulationRegisterTovaryPoluchennye(data AccumulationRegisterTovaryPoluchennye) (*AccumulationRegisterTovaryPoluchennye, error) {
	raw, err := c.createEntity("AccumulationRegister_ТоварыПолученные", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterTovaryPoluchennye{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterTovaryPoluchennyes(where Where) ([]AccumulationRegisterTovaryPoluchennye, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterTovaryPoluchennye `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ТоварыПолученные", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterTovaryPoluchennyeRecordType(Recorder String, LineNumber Int, RecorderType String) (*AccumulationRegisterTovaryPoluchennyeRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ТоварыПолученные_RecordType", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterTovaryPoluchennyeRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterTovaryPoluchennyeRecordType(Recorder String, LineNumber Int, RecorderType String, entity interface{}) (*AccumulationRegisterTovaryPoluchennyeRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ТоварыПолученные_RecordType", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterTovaryPoluchennyeRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterTovaryPoluchennyeRecordType(Recorder String, LineNumber Int, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ТоварыПолученные_RecordType", args)
}

func (c *Client) CreateAccumulationRegisterTovaryPoluchennyeRecordType(data AccumulationRegisterTovaryPoluchennyeRecordType) (*AccumulationRegisterTovaryPoluchennyeRecordType, error) {
	raw, err := c.createEntity("AccumulationRegister_ТоварыПолученные_RecordType", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterTovaryPoluchennyeRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterTovaryPoluchennyeRecordTypes(where Where) ([]AccumulationRegisterTovaryPoluchennyeRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterTovaryPoluchennyeRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ТоварыПолученные_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterSvobodnyeOstatki(Recorder String, RecorderType String) (*AccumulationRegisterSvobodnyeOstatki, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_СвободныеОстатки", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSvobodnyeOstatki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterSvobodnyeOstatki(Recorder String, RecorderType String, entity interface{}) (*AccumulationRegisterSvobodnyeOstatki, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_СвободныеОстатки", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSvobodnyeOstatki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterSvobodnyeOstatki(Recorder String, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_СвободныеОстатки", args)
}

func (c *Client) CreateAccumulationRegisterSvobodnyeOstatki(data AccumulationRegisterSvobodnyeOstatki) (*AccumulationRegisterSvobodnyeOstatki, error) {
	raw, err := c.createEntity("AccumulationRegister_СвободныеОстатки", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSvobodnyeOstatki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterSvobodnyeOstatkis(where Where) ([]AccumulationRegisterSvobodnyeOstatki, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterSvobodnyeOstatki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_СвободныеОстатки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterSvobodnyeOstatkiRecordType(Recorder String, LineNumber Int, RecorderType String) (*AccumulationRegisterSvobodnyeOstatkiRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_СвободныеОстатки_RecordType", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSvobodnyeOstatkiRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterSvobodnyeOstatkiRecordType(Recorder String, LineNumber Int, RecorderType String, entity interface{}) (*AccumulationRegisterSvobodnyeOstatkiRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_СвободныеОстатки_RecordType", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSvobodnyeOstatkiRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterSvobodnyeOstatkiRecordType(Recorder String, LineNumber Int, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_СвободныеОстатки_RecordType", args)
}

func (c *Client) CreateAccumulationRegisterSvobodnyeOstatkiRecordType(data AccumulationRegisterSvobodnyeOstatkiRecordType) (*AccumulationRegisterSvobodnyeOstatkiRecordType, error) {
	raw, err := c.createEntity("AccumulationRegister_СвободныеОстатки_RecordType", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSvobodnyeOstatkiRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterSvobodnyeOstatkiRecordTypes(where Where) ([]AccumulationRegisterSvobodnyeOstatkiRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterSvobodnyeOstatkiRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_СвободныеОстатки_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterSummyVRassrochku(Recorder String, RecorderType String) (*AccumulationRegisterSummyVRassrochku, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_СуммыВРассрочку", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSummyVRassrochku{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterSummyVRassrochku(Recorder String, RecorderType String, entity interface{}) (*AccumulationRegisterSummyVRassrochku, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_СуммыВРассрочку", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSummyVRassrochku{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterSummyVRassrochku(Recorder String, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_СуммыВРассрочку", args)
}

func (c *Client) CreateAccumulationRegisterSummyVRassrochku(data AccumulationRegisterSummyVRassrochku) (*AccumulationRegisterSummyVRassrochku, error) {
	raw, err := c.createEntity("AccumulationRegister_СуммыВРассрочку", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSummyVRassrochku{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterSummyVRassrochkus(where Where) ([]AccumulationRegisterSummyVRassrochku, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterSummyVRassrochku `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_СуммыВРассрочку", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterSummyVRassrochkuRecordType(Recorder String, LineNumber Int, RecorderType String) (*AccumulationRegisterSummyVRassrochkuRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_СуммыВРассрочку_RecordType", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSummyVRassrochkuRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterSummyVRassrochkuRecordType(Recorder String, LineNumber Int, RecorderType String, entity interface{}) (*AccumulationRegisterSummyVRassrochkuRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_СуммыВРассрочку_RecordType", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSummyVRassrochkuRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterSummyVRassrochkuRecordType(Recorder String, LineNumber Int, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_СуммыВРассрочку_RecordType", args)
}

func (c *Client) CreateAccumulationRegisterSummyVRassrochkuRecordType(data AccumulationRegisterSummyVRassrochkuRecordType) (*AccumulationRegisterSummyVRassrochkuRecordType, error) {
	raw, err := c.createEntity("AccumulationRegister_СуммыВРассрочку_RecordType", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSummyVRassrochkuRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterSummyVRassrochkuRecordTypes(where Where) ([]AccumulationRegisterSummyVRassrochkuRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterSummyVRassrochkuRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_СуммыВРассрочку_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterGrafikPlatezhei(Recorder String, RecorderType String) (*AccumulationRegisterGrafikPlatezhei, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ГрафикПлатежей", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterGrafikPlatezhei{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterGrafikPlatezhei(Recorder String, RecorderType String, entity interface{}) (*AccumulationRegisterGrafikPlatezhei, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ГрафикПлатежей", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterGrafikPlatezhei{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterGrafikPlatezhei(Recorder String, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ГрафикПлатежей", args)
}

func (c *Client) CreateAccumulationRegisterGrafikPlatezhei(data AccumulationRegisterGrafikPlatezhei) (*AccumulationRegisterGrafikPlatezhei, error) {
	raw, err := c.createEntity("AccumulationRegister_ГрафикПлатежей", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterGrafikPlatezhei{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterGrafikPlatezheis(where Where) ([]AccumulationRegisterGrafikPlatezhei, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterGrafikPlatezhei `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ГрафикПлатежей", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterGrafikPlatezheiRecordType(Recorder String, LineNumber Int, RecorderType String) (*AccumulationRegisterGrafikPlatezheiRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ГрафикПлатежей_RecordType", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterGrafikPlatezheiRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterGrafikPlatezheiRecordType(Recorder String, LineNumber Int, RecorderType String, entity interface{}) (*AccumulationRegisterGrafikPlatezheiRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ГрафикПлатежей_RecordType", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterGrafikPlatezheiRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterGrafikPlatezheiRecordType(Recorder String, LineNumber Int, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ГрафикПлатежей_RecordType", args)
}

func (c *Client) CreateAccumulationRegisterGrafikPlatezheiRecordType(data AccumulationRegisterGrafikPlatezheiRecordType) (*AccumulationRegisterGrafikPlatezheiRecordType, error) {
	raw, err := c.createEntity("AccumulationRegister_ГрафикПлатежей_RecordType", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterGrafikPlatezheiRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterGrafikPlatezheiRecordTypes(where Where) ([]AccumulationRegisterGrafikPlatezheiRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterGrafikPlatezheiRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ГрафикПлатежей_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterRoznichnaiaVyruchka(Recorder String, RecorderType String) (*AccumulationRegisterRoznichnaiaVyruchka, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_РозничнаяВыручка", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterRoznichnaiaVyruchka{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterRoznichnaiaVyruchka(Recorder String, RecorderType String, entity interface{}) (*AccumulationRegisterRoznichnaiaVyruchka, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_РозничнаяВыручка", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterRoznichnaiaVyruchka{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterRoznichnaiaVyruchka(Recorder String, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_РозничнаяВыручка", args)
}

func (c *Client) CreateAccumulationRegisterRoznichnaiaVyruchka(data AccumulationRegisterRoznichnaiaVyruchka) (*AccumulationRegisterRoznichnaiaVyruchka, error) {
	raw, err := c.createEntity("AccumulationRegister_РозничнаяВыручка", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterRoznichnaiaVyruchka{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterRoznichnaiaVyruchkas(where Where) ([]AccumulationRegisterRoznichnaiaVyruchka, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterRoznichnaiaVyruchka `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_РозничнаяВыручка", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterRoznichnaiaVyruchkaRecordType(Recorder String, LineNumber Int, RecorderType String) (*AccumulationRegisterRoznichnaiaVyruchkaRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_РозничнаяВыручка_RecordType", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterRoznichnaiaVyruchkaRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterRoznichnaiaVyruchkaRecordType(Recorder String, LineNumber Int, RecorderType String, entity interface{}) (*AccumulationRegisterRoznichnaiaVyruchkaRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_РозничнаяВыручка_RecordType", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterRoznichnaiaVyruchkaRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterRoznichnaiaVyruchkaRecordType(Recorder String, LineNumber Int, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_РозничнаяВыручка_RecordType", args)
}

func (c *Client) CreateAccumulationRegisterRoznichnaiaVyruchkaRecordType(data AccumulationRegisterRoznichnaiaVyruchkaRecordType) (*AccumulationRegisterRoznichnaiaVyruchkaRecordType, error) {
	raw, err := c.createEntity("AccumulationRegister_РозничнаяВыручка_RecordType", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterRoznichnaiaVyruchkaRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterRoznichnaiaVyruchkaRecordTypes(where Where) ([]AccumulationRegisterRoznichnaiaVyruchkaRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterRoznichnaiaVyruchkaRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_РозничнаяВыручка_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterTovaryVPuti(Recorder String, RecorderType String) (*AccumulationRegisterTovaryVPuti, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ТоварыВПути", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterTovaryVPuti{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterTovaryVPuti(Recorder String, RecorderType String, entity interface{}) (*AccumulationRegisterTovaryVPuti, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ТоварыВПути", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterTovaryVPuti{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterTovaryVPuti(Recorder String, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ТоварыВПути", args)
}

func (c *Client) CreateAccumulationRegisterTovaryVPuti(data AccumulationRegisterTovaryVPuti) (*AccumulationRegisterTovaryVPuti, error) {
	raw, err := c.createEntity("AccumulationRegister_ТоварыВПути", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterTovaryVPuti{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterTovaryVPutis(where Where) ([]AccumulationRegisterTovaryVPuti, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterTovaryVPuti `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ТоварыВПути", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterTovaryVPutiRecordType(Recorder String, LineNumber Int, RecorderType String) (*AccumulationRegisterTovaryVPutiRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ТоварыВПути_RecordType", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterTovaryVPutiRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterTovaryVPutiRecordType(Recorder String, LineNumber Int, RecorderType String, entity interface{}) (*AccumulationRegisterTovaryVPutiRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ТоварыВПути_RecordType", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterTovaryVPutiRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterTovaryVPutiRecordType(Recorder String, LineNumber Int, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ТоварыВПути_RecordType", args)
}

func (c *Client) CreateAccumulationRegisterTovaryVPutiRecordType(data AccumulationRegisterTovaryVPutiRecordType) (*AccumulationRegisterTovaryVPutiRecordType, error) {
	raw, err := c.createEntity("AccumulationRegister_ТоварыВПути_RecordType", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterTovaryVPutiRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterTovaryVPutiRecordTypes(where Where) ([]AccumulationRegisterTovaryVPutiRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterTovaryVPutiRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ТоварыВПути_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterPoteriMetallaVProizvodstve(Recorder String, RecorderType String) (*AccumulationRegisterPoteriMetallaVProizvodstve, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ПотериМеталлаВПроизводстве", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterPoteriMetallaVProizvodstve{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterPoteriMetallaVProizvodstve(Recorder String, RecorderType String, entity interface{}) (*AccumulationRegisterPoteriMetallaVProizvodstve, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ПотериМеталлаВПроизводстве", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterPoteriMetallaVProizvodstve{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterPoteriMetallaVProizvodstve(Recorder String, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ПотериМеталлаВПроизводстве", args)
}

func (c *Client) CreateAccumulationRegisterPoteriMetallaVProizvodstve(data AccumulationRegisterPoteriMetallaVProizvodstve) (*AccumulationRegisterPoteriMetallaVProizvodstve, error) {
	raw, err := c.createEntity("AccumulationRegister_ПотериМеталлаВПроизводстве", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterPoteriMetallaVProizvodstve{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterPoteriMetallaVProizvodstves(where Where) ([]AccumulationRegisterPoteriMetallaVProizvodstve, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterPoteriMetallaVProizvodstve `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ПотериМеталлаВПроизводстве", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterPoteriMetallaVProizvodstveRecordType(Recorder String, LineNumber Int, RecorderType String) (*AccumulationRegisterPoteriMetallaVProizvodstveRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ПотериМеталлаВПроизводстве_RecordType", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterPoteriMetallaVProizvodstveRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterPoteriMetallaVProizvodstveRecordType(Recorder String, LineNumber Int, RecorderType String, entity interface{}) (*AccumulationRegisterPoteriMetallaVProizvodstveRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ПотериМеталлаВПроизводстве_RecordType", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterPoteriMetallaVProizvodstveRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterPoteriMetallaVProizvodstveRecordType(Recorder String, LineNumber Int, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ПотериМеталлаВПроизводстве_RecordType", args)
}

func (c *Client) CreateAccumulationRegisterPoteriMetallaVProizvodstveRecordType(data AccumulationRegisterPoteriMetallaVProizvodstveRecordType) (*AccumulationRegisterPoteriMetallaVProizvodstveRecordType, error) {
	raw, err := c.createEntity("AccumulationRegister_ПотериМеталлаВПроизводстве_RecordType", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterPoteriMetallaVProizvodstveRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterPoteriMetallaVProizvodstveRecordTypes(where Where) ([]AccumulationRegisterPoteriMetallaVProizvodstveRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterPoteriMetallaVProizvodstveRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ПотериМеталлаВПроизводстве_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterPartiiTovarovNaSkladakh(Recorder String, RecorderType String) (*AccumulationRegisterPartiiTovarovNaSkladakh, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ПартииТоваровНаСкладах", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterPartiiTovarovNaSkladakh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterPartiiTovarovNaSkladakh(Recorder String, RecorderType String, entity interface{}) (*AccumulationRegisterPartiiTovarovNaSkladakh, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ПартииТоваровНаСкладах", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterPartiiTovarovNaSkladakh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterPartiiTovarovNaSkladakh(Recorder String, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ПартииТоваровНаСкладах", args)
}

func (c *Client) CreateAccumulationRegisterPartiiTovarovNaSkladakh(data AccumulationRegisterPartiiTovarovNaSkladakh) (*AccumulationRegisterPartiiTovarovNaSkladakh, error) {
	raw, err := c.createEntity("AccumulationRegister_ПартииТоваровНаСкладах", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterPartiiTovarovNaSkladakh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterPartiiTovarovNaSkladakhs(where Where) ([]AccumulationRegisterPartiiTovarovNaSkladakh, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterPartiiTovarovNaSkladakh `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ПартииТоваровНаСкладах", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) ProductActionDocument(Recorder String, LineNumber Int, RecorderType String) (*ProductActionDocument, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ПартииТоваровНаСкладах_RecordType", args, []string{})
	if err != nil {
		return nil, err
	}
	result := ProductActionDocument{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateProductActionDocument(Recorder String, LineNumber Int, RecorderType String, entity interface{}) (*ProductActionDocument, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ПартииТоваровНаСкладах_RecordType", args, entity)
	if err != nil {
		return nil, err
	}
	result := ProductActionDocument{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveProductActionDocument(Recorder String, LineNumber Int, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ПартииТоваровНаСкладах_RecordType", args)
}

func (c *Client) CreateProductActionDocument(data ProductActionDocument) (*ProductActionDocument, error) {
	raw, err := c.createEntity("AccumulationRegister_ПартииТоваровНаСкладах_RecordType", data)
	if err != nil {
		return nil, err
	}
	result := ProductActionDocument{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) ProductActionDocuments(where Where) ([]ProductActionDocument, error) {
	type ReturnObj struct {
		Value []ProductActionDocument `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ПартииТоваровНаСкладах_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterSummyDokumentovDliaObmena(Recorder String, RecorderType String) (*AccumulationRegisterSummyDokumentovDliaObmena, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_СуммыДокументовДляОбмена", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSummyDokumentovDliaObmena{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterSummyDokumentovDliaObmena(Recorder String, RecorderType String, entity interface{}) (*AccumulationRegisterSummyDokumentovDliaObmena, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_СуммыДокументовДляОбмена", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSummyDokumentovDliaObmena{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterSummyDokumentovDliaObmena(Recorder String, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_СуммыДокументовДляОбмена", args)
}

func (c *Client) CreateAccumulationRegisterSummyDokumentovDliaObmena(data AccumulationRegisterSummyDokumentovDliaObmena) (*AccumulationRegisterSummyDokumentovDliaObmena, error) {
	raw, err := c.createEntity("AccumulationRegister_СуммыДокументовДляОбмена", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSummyDokumentovDliaObmena{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterSummyDokumentovDliaObmenas(where Where) ([]AccumulationRegisterSummyDokumentovDliaObmena, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterSummyDokumentovDliaObmena `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_СуммыДокументовДляОбмена", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterSummyDokumentovDliaObmenaRecordType(Recorder String, LineNumber Int, RecorderType String) (*AccumulationRegisterSummyDokumentovDliaObmenaRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_СуммыДокументовДляОбмена_RecordType", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSummyDokumentovDliaObmenaRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterSummyDokumentovDliaObmenaRecordType(Recorder String, LineNumber Int, RecorderType String, entity interface{}) (*AccumulationRegisterSummyDokumentovDliaObmenaRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_СуммыДокументовДляОбмена_RecordType", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSummyDokumentovDliaObmenaRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterSummyDokumentovDliaObmenaRecordType(Recorder String, LineNumber Int, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_СуммыДокументовДляОбмена_RecordType", args)
}

func (c *Client) CreateAccumulationRegisterSummyDokumentovDliaObmenaRecordType(data AccumulationRegisterSummyDokumentovDliaObmenaRecordType) (*AccumulationRegisterSummyDokumentovDliaObmenaRecordType, error) {
	raw, err := c.createEntity("AccumulationRegister_СуммыДокументовДляОбмена_RecordType", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSummyDokumentovDliaObmenaRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterSummyDokumentovDliaObmenaRecordTypes(where Where) ([]AccumulationRegisterSummyDokumentovDliaObmenaRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterSummyDokumentovDliaObmenaRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_СуммыДокументовДляОбмена_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterDvizheniiaDenezhnykhSredstv(Recorder String, RecorderType String) (*AccumulationRegisterDvizheniiaDenezhnykhSredstv, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ДвиженияДенежныхСредств", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDvizheniiaDenezhnykhSredstv{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterDvizheniiaDenezhnykhSredstv(Recorder String, RecorderType String, entity interface{}) (*AccumulationRegisterDvizheniiaDenezhnykhSredstv, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ДвиженияДенежныхСредств", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDvizheniiaDenezhnykhSredstv{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterDvizheniiaDenezhnykhSredstv(Recorder String, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ДвиженияДенежныхСредств", args)
}

func (c *Client) CreateAccumulationRegisterDvizheniiaDenezhnykhSredstv(data AccumulationRegisterDvizheniiaDenezhnykhSredstv) (*AccumulationRegisterDvizheniiaDenezhnykhSredstv, error) {
	raw, err := c.createEntity("AccumulationRegister_ДвиженияДенежныхСредств", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDvizheniiaDenezhnykhSredstv{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterDvizheniiaDenezhnykhSredstvs(where Where) ([]AccumulationRegisterDvizheniiaDenezhnykhSredstv, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterDvizheniiaDenezhnykhSredstv `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ДвиженияДенежныхСредств", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterDvizheniiaDenezhnykhSredstvRecordType(Recorder String, LineNumber Int, RecorderType String) (*AccumulationRegisterDvizheniiaDenezhnykhSredstvRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ДвиженияДенежныхСредств_RecordType", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDvizheniiaDenezhnykhSredstvRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterDvizheniiaDenezhnykhSredstvRecordType(Recorder String, LineNumber Int, RecorderType String, entity interface{}) (*AccumulationRegisterDvizheniiaDenezhnykhSredstvRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ДвиженияДенежныхСредств_RecordType", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDvizheniiaDenezhnykhSredstvRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterDvizheniiaDenezhnykhSredstvRecordType(Recorder String, LineNumber Int, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ДвиженияДенежныхСредств_RecordType", args)
}

func (c *Client) CreateAccumulationRegisterDvizheniiaDenezhnykhSredstvRecordType(data AccumulationRegisterDvizheniiaDenezhnykhSredstvRecordType) (*AccumulationRegisterDvizheniiaDenezhnykhSredstvRecordType, error) {
	raw, err := c.createEntity("AccumulationRegister_ДвиженияДенежныхСредств_RecordType", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDvizheniiaDenezhnykhSredstvRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterDvizheniiaDenezhnykhSredstvRecordTypes(where Where) ([]AccumulationRegisterDvizheniiaDenezhnykhSredstvRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterDvizheniiaDenezhnykhSredstvRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ДвиженияДенежныхСредств_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterProdazhiPoStatiam(Recorder String, RecorderType String) (*AccumulationRegisterProdazhiPoStatiam, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ПродажиПоСтатьям", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterProdazhiPoStatiam{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterProdazhiPoStatiam(Recorder String, RecorderType String, entity interface{}) (*AccumulationRegisterProdazhiPoStatiam, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ПродажиПоСтатьям", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterProdazhiPoStatiam{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterProdazhiPoStatiam(Recorder String, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ПродажиПоСтатьям", args)
}

func (c *Client) CreateAccumulationRegisterProdazhiPoStatiam(data AccumulationRegisterProdazhiPoStatiam) (*AccumulationRegisterProdazhiPoStatiam, error) {
	raw, err := c.createEntity("AccumulationRegister_ПродажиПоСтатьям", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterProdazhiPoStatiam{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterProdazhiPoStatiams(where Where) ([]AccumulationRegisterProdazhiPoStatiam, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterProdazhiPoStatiam `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ПродажиПоСтатьям", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterProdazhiPoStatiamRecordType(Recorder String, LineNumber Int, RecorderType String) (*AccumulationRegisterProdazhiPoStatiamRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ПродажиПоСтатьям_RecordType", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterProdazhiPoStatiamRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterProdazhiPoStatiamRecordType(Recorder String, LineNumber Int, RecorderType String, entity interface{}) (*AccumulationRegisterProdazhiPoStatiamRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ПродажиПоСтатьям_RecordType", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterProdazhiPoStatiamRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterProdazhiPoStatiamRecordType(Recorder String, LineNumber Int, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ПродажиПоСтатьям_RecordType", args)
}

func (c *Client) CreateAccumulationRegisterProdazhiPoStatiamRecordType(data AccumulationRegisterProdazhiPoStatiamRecordType) (*AccumulationRegisterProdazhiPoStatiamRecordType, error) {
	raw, err := c.createEntity("AccumulationRegister_ПродажиПоСтатьям_RecordType", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterProdazhiPoStatiamRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterProdazhiPoStatiamRecordTypes(where Where) ([]AccumulationRegisterProdazhiPoStatiamRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterProdazhiPoStatiamRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ПродажиПоСтатьям_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) InformationRegisterTsenyNomenklatury(Recorder String, RecorderType String) (*InformationRegisterTsenyNomenklatury, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("InformationRegister_ЦеныНоменклатуры", args, []string{})
	if err != nil {
		return nil, err
	}
	result := InformationRegisterTsenyNomenklatury{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateInformationRegisterTsenyNomenklatury(Recorder String, RecorderType String, entity interface{}) (*InformationRegisterTsenyNomenklatury, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("InformationRegister_ЦеныНоменклатуры", args, entity)
	if err != nil {
		return nil, err
	}
	result := InformationRegisterTsenyNomenklatury{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveInformationRegisterTsenyNomenklatury(Recorder String, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("InformationRegister_ЦеныНоменклатуры", args)
}

func (c *Client) CreateInformationRegisterTsenyNomenklatury(data InformationRegisterTsenyNomenklatury) (*InformationRegisterTsenyNomenklatury, error) {
	raw, err := c.createEntity("InformationRegister_ЦеныНоменклатуры", data)
	if err != nil {
		return nil, err
	}
	result := InformationRegisterTsenyNomenklatury{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) InformationRegisterTsenyNomenklaturys(where Where) ([]InformationRegisterTsenyNomenklatury, error) {
	type ReturnObj struct {
		Value []InformationRegisterTsenyNomenklatury `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("InformationRegister_ЦеныНоменклатуры", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) InformationRegisterTsenyNomenklaturyRecordType(Period Time, ТипЦенKey Guid, СегментНоменклатурыKey Guid, ItemKey Guid, InstanceKey Guid, ХарактеристикаНоменклатурыKey Guid, SizeKey Guid) (*InformationRegisterTsenyNomenklaturyRecordType, error) {
	args := []string{fmt.Sprintf("ТипЦен_Key=guid'%s' ", url.PathEscape(string(ТипЦенKey))), fmt.Sprintf("СегментНоменклатуры_Key=guid'%s' ", url.PathEscape(string(СегментНоменклатурыKey))), fmt.Sprintf("Номенклатура_Key=guid'%s' ", url.PathEscape(string(ItemKey))), fmt.Sprintf("СерияНоменклатуры_Key=guid'%s' ", url.PathEscape(string(InstanceKey))), fmt.Sprintf("ХарактеристикаНоменклатуры_Key=guid'%s' ", url.PathEscape(string(ХарактеристикаНоменклатурыKey))), fmt.Sprintf("Размер_Key=guid'%s' ", url.PathEscape(string(SizeKey)))}
	raw, err := c.getEntity("InformationRegister_ЦеныНоменклатуры_RecordType", args, []string{})
	if err != nil {
		return nil, err
	}
	result := InformationRegisterTsenyNomenklaturyRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateInformationRegisterTsenyNomenklaturyRecordType(Period Time, ТипЦенKey Guid, СегментНоменклатурыKey Guid, ItemKey Guid, InstanceKey Guid, ХарактеристикаНоменклатурыKey Guid, SizeKey Guid, entity interface{}) (*InformationRegisterTsenyNomenklaturyRecordType, error) {
	args := []string{fmt.Sprintf("ТипЦен_Key=guid'%s' ", url.PathEscape(string(ТипЦенKey))), fmt.Sprintf("СегментНоменклатуры_Key=guid'%s' ", url.PathEscape(string(СегментНоменклатурыKey))), fmt.Sprintf("Номенклатура_Key=guid'%s' ", url.PathEscape(string(ItemKey))), fmt.Sprintf("СерияНоменклатуры_Key=guid'%s' ", url.PathEscape(string(InstanceKey))), fmt.Sprintf("ХарактеристикаНоменклатуры_Key=guid'%s' ", url.PathEscape(string(ХарактеристикаНоменклатурыKey))), fmt.Sprintf("Размер_Key=guid'%s' ", url.PathEscape(string(SizeKey)))}
	raw, err := c.updateEntity("InformationRegister_ЦеныНоменклатуры_RecordType", args, entity)
	if err != nil {
		return nil, err
	}
	result := InformationRegisterTsenyNomenklaturyRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveInformationRegisterTsenyNomenklaturyRecordType(Period Time, ТипЦенKey Guid, СегментНоменклатурыKey Guid, ItemKey Guid, InstanceKey Guid, ХарактеристикаНоменклатурыKey Guid, SizeKey Guid) error {
	args := []string{fmt.Sprintf("ТипЦен_Key=guid'%s' ", url.PathEscape(string(ТипЦенKey))), fmt.Sprintf("СегментНоменклатуры_Key=guid'%s' ", url.PathEscape(string(СегментНоменклатурыKey))), fmt.Sprintf("Номенклатура_Key=guid'%s' ", url.PathEscape(string(ItemKey))), fmt.Sprintf("СерияНоменклатуры_Key=guid'%s' ", url.PathEscape(string(InstanceKey))), fmt.Sprintf("ХарактеристикаНоменклатуры_Key=guid'%s' ", url.PathEscape(string(ХарактеристикаНоменклатурыKey))), fmt.Sprintf("Размер_Key=guid'%s' ", url.PathEscape(string(SizeKey)))}
	return c.removeEntity("InformationRegister_ЦеныНоменклатуры_RecordType", args)
}

func (c *Client) CreateInformationRegisterTsenyNomenklaturyRecordType(data InformationRegisterTsenyNomenklaturyRecordType) (*InformationRegisterTsenyNomenklaturyRecordType, error) {
	raw, err := c.createEntity("InformationRegister_ЦеныНоменклатуры_RecordType", data)
	if err != nil {
		return nil, err
	}
	result := InformationRegisterTsenyNomenklaturyRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) InformationRegisterTsenyNomenklaturyRecordTypes(where Where) ([]InformationRegisterTsenyNomenklaturyRecordType, error) {
	type ReturnObj struct {
		Value []InformationRegisterTsenyNomenklaturyRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("InformationRegister_ЦеныНоменклатуры_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitse(Recorder String, RecorderType String) (*AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitse, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_СводныеДанныеПоПродажамВРознице", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitse{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterSvodnyeDannyePoProdazhamVRoznitse(Recorder String, RecorderType String, entity interface{}) (*AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitse, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_СводныеДанныеПоПродажамВРознице", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitse{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterSvodnyeDannyePoProdazhamVRoznitse(Recorder String, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_СводныеДанныеПоПродажамВРознице", args)
}

func (c *Client) CreateAccumulationRegisterSvodnyeDannyePoProdazhamVRoznitse(data AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitse) (*AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitse, error) {
	raw, err := c.createEntity("AccumulationRegister_СводныеДанныеПоПродажамВРознице", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitse{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitses(where Where) ([]AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitse, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitse `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_СводныеДанныеПоПродажамВРознице", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRecordType(Recorder String, LineNumber Int, RecorderType String) (*AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_СводныеДанныеПоПродажамВРознице_RecordType", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRecordType(Recorder String, LineNumber Int, RecorderType String, entity interface{}) (*AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_СводныеДанныеПоПродажамВРознице_RecordType", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRecordType(Recorder String, LineNumber Int, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_СводныеДанныеПоПродажамВРознице_RecordType", args)
}

func (c *Client) CreateAccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRecordType(data AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRecordType) (*AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRecordType, error) {
	raw, err := c.createEntity("AccumulationRegister_СводныеДанныеПоПродажамВРознице_RecordType", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRecordTypes(where Where) ([]AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_СводныеДанныеПоПродажамВРознице_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterDenezhnyeSredstvaVRezerve(Recorder String, RecorderType String) (*AccumulationRegisterDenezhnyeSredstvaVRezerve, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ДенежныеСредстваВРезерве", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDenezhnyeSredstvaVRezerve{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterDenezhnyeSredstvaVRezerve(Recorder String, RecorderType String, entity interface{}) (*AccumulationRegisterDenezhnyeSredstvaVRezerve, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ДенежныеСредстваВРезерве", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDenezhnyeSredstvaVRezerve{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterDenezhnyeSredstvaVRezerve(Recorder String, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ДенежныеСредстваВРезерве", args)
}

func (c *Client) CreateAccumulationRegisterDenezhnyeSredstvaVRezerve(data AccumulationRegisterDenezhnyeSredstvaVRezerve) (*AccumulationRegisterDenezhnyeSredstvaVRezerve, error) {
	raw, err := c.createEntity("AccumulationRegister_ДенежныеСредстваВРезерве", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDenezhnyeSredstvaVRezerve{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterDenezhnyeSredstvaVRezerves(where Where) ([]AccumulationRegisterDenezhnyeSredstvaVRezerve, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterDenezhnyeSredstvaVRezerve `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ДенежныеСредстваВРезерве", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterDenezhnyeSredstvaVRezerveRecordType(Recorder String, LineNumber Int, RecorderType String) (*AccumulationRegisterDenezhnyeSredstvaVRezerveRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ДенежныеСредстваВРезерве_RecordType", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDenezhnyeSredstvaVRezerveRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterDenezhnyeSredstvaVRezerveRecordType(Recorder String, LineNumber Int, RecorderType String, entity interface{}) (*AccumulationRegisterDenezhnyeSredstvaVRezerveRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ДенежныеСредстваВРезерве_RecordType", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDenezhnyeSredstvaVRezerveRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterDenezhnyeSredstvaVRezerveRecordType(Recorder String, LineNumber Int, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ДенежныеСредстваВРезерве_RecordType", args)
}

func (c *Client) CreateAccumulationRegisterDenezhnyeSredstvaVRezerveRecordType(data AccumulationRegisterDenezhnyeSredstvaVRezerveRecordType) (*AccumulationRegisterDenezhnyeSredstvaVRezerveRecordType, error) {
	raw, err := c.createEntity("AccumulationRegister_ДенежныеСредстваВРезерве_RecordType", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDenezhnyeSredstvaVRezerveRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterDenezhnyeSredstvaVRezerveRecordTypes(where Where) ([]AccumulationRegisterDenezhnyeSredstvaVRezerveRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterDenezhnyeSredstvaVRezerveRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ДенежныеСредстваВРезерве_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakh(Recorder String, RecorderType String) (*AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakh, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ТоварыВНеавтоматизированныхТорговыхТочках", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakh(Recorder String, RecorderType String, entity interface{}) (*AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakh, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ТоварыВНеавтоматизированныхТорговыхТочках", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakh(Recorder String, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ТоварыВНеавтоматизированныхТорговыхТочках", args)
}

func (c *Client) CreateAccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakh(data AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakh) (*AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakh, error) {
	raw, err := c.createEntity("AccumulationRegister_ТоварыВНеавтоматизированныхТорговыхТочках", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhs(where Where) ([]AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakh, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakh `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ТоварыВНеавтоматизированныхТорговыхТочках", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRecordType(Recorder String, LineNumber Int, RecorderType String) (*AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ТоварыВНеавтоматизированныхТорговыхТочках_RecordType", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRecordType(Recorder String, LineNumber Int, RecorderType String, entity interface{}) (*AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ТоварыВНеавтоматизированныхТорговыхТочках_RecordType", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRecordType(Recorder String, LineNumber Int, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ТоварыВНеавтоматизированныхТорговыхТочках_RecordType", args)
}

func (c *Client) CreateAccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRecordType(data AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRecordType) (*AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRecordType, error) {
	raw, err := c.createEntity("AccumulationRegister_ТоварыВНеавтоматизированныхТорговыхТочках_RecordType", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRecordTypes(where Where) ([]AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ТоварыВНеавтоматизированныхТорговыхТочках_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterDavalcheskiiMetallPoteri(Recorder String, RecorderType String) (*AccumulationRegisterDavalcheskiiMetallPoteri, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ДавальческийМеталлПотери", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDavalcheskiiMetallPoteri{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterDavalcheskiiMetallPoteri(Recorder String, RecorderType String, entity interface{}) (*AccumulationRegisterDavalcheskiiMetallPoteri, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ДавальческийМеталлПотери", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDavalcheskiiMetallPoteri{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterDavalcheskiiMetallPoteri(Recorder String, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ДавальческийМеталлПотери", args)
}

func (c *Client) CreateAccumulationRegisterDavalcheskiiMetallPoteri(data AccumulationRegisterDavalcheskiiMetallPoteri) (*AccumulationRegisterDavalcheskiiMetallPoteri, error) {
	raw, err := c.createEntity("AccumulationRegister_ДавальческийМеталлПотери", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDavalcheskiiMetallPoteri{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterDavalcheskiiMetallPoteris(where Where) ([]AccumulationRegisterDavalcheskiiMetallPoteri, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterDavalcheskiiMetallPoteri `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ДавальческийМеталлПотери", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterDavalcheskiiMetallPoteriRecordType(Recorder String, LineNumber Int, RecorderType String) (*AccumulationRegisterDavalcheskiiMetallPoteriRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ДавальческийМеталлПотери_RecordType", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDavalcheskiiMetallPoteriRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterDavalcheskiiMetallPoteriRecordType(Recorder String, LineNumber Int, RecorderType String, entity interface{}) (*AccumulationRegisterDavalcheskiiMetallPoteriRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ДавальческийМеталлПотери_RecordType", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDavalcheskiiMetallPoteriRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterDavalcheskiiMetallPoteriRecordType(Recorder String, LineNumber Int, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ДавальческийМеталлПотери_RecordType", args)
}

func (c *Client) CreateAccumulationRegisterDavalcheskiiMetallPoteriRecordType(data AccumulationRegisterDavalcheskiiMetallPoteriRecordType) (*AccumulationRegisterDavalcheskiiMetallPoteriRecordType, error) {
	raw, err := c.createEntity("AccumulationRegister_ДавальческийМеталлПотери_RecordType", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDavalcheskiiMetallPoteriRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterDavalcheskiiMetallPoteriRecordTypes(where Where) ([]AccumulationRegisterDavalcheskiiMetallPoteriRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterDavalcheskiiMetallPoteriRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ДавальческийМеталлПотери_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) InformationRegisterTsenyPoPreiskurantu(Recorder String, RecorderType String) (*InformationRegisterTsenyPoPreiskurantu, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("InformationRegister_ЦеныПоПрейскуранту", args, []string{})
	if err != nil {
		return nil, err
	}
	result := InformationRegisterTsenyPoPreiskurantu{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateInformationRegisterTsenyPoPreiskurantu(Recorder String, RecorderType String, entity interface{}) (*InformationRegisterTsenyPoPreiskurantu, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("InformationRegister_ЦеныПоПрейскуранту", args, entity)
	if err != nil {
		return nil, err
	}
	result := InformationRegisterTsenyPoPreiskurantu{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveInformationRegisterTsenyPoPreiskurantu(Recorder String, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("InformationRegister_ЦеныПоПрейскуранту", args)
}

func (c *Client) CreateInformationRegisterTsenyPoPreiskurantu(data InformationRegisterTsenyPoPreiskurantu) (*InformationRegisterTsenyPoPreiskurantu, error) {
	raw, err := c.createEntity("InformationRegister_ЦеныПоПрейскуранту", data)
	if err != nil {
		return nil, err
	}
	result := InformationRegisterTsenyPoPreiskurantu{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) InformationRegisterTsenyPoPreiskurantus(where Where) ([]InformationRegisterTsenyPoPreiskurantu, error) {
	type ReturnObj struct {
		Value []InformationRegisterTsenyPoPreiskurantu `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("InformationRegister_ЦеныПоПрейскуранту", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) InformationRegisterTsenyPoPreiskurantuRecordType(Period Time, КаменьKey Guid, ФормаОгранкиKey Guid, ЦветКамняKey Guid, ГруппаЦветаKey Guid, ГруппаДефектаKey Guid, РассевKey Guid, Размер1От Float, Размер1До Float) (*InformationRegisterTsenyPoPreiskurantuRecordType, error) {
	args := []string{fmt.Sprintf("Камень_Key=guid'%s' ", url.PathEscape(string(КаменьKey))), fmt.Sprintf("ФормаОгранки_Key=guid'%s' ", url.PathEscape(string(ФормаОгранкиKey))), fmt.Sprintf("ЦветКамня_Key=guid'%s' ", url.PathEscape(string(ЦветКамняKey))), fmt.Sprintf("ГруппаЦвета_Key=guid'%s' ", url.PathEscape(string(ГруппаЦветаKey))), fmt.Sprintf("ГруппаДефекта_Key=guid'%s' ", url.PathEscape(string(ГруппаДефектаKey))), fmt.Sprintf("Рассев_Key=guid'%s' ", url.PathEscape(string(РассевKey))), fmt.Sprintf("Размер1От=%f ", Размер1От), fmt.Sprintf("Размер1До=%f ", Размер1До)}
	raw, err := c.getEntity("InformationRegister_ЦеныПоПрейскуранту_RecordType", args, []string{})
	if err != nil {
		return nil, err
	}
	result := InformationRegisterTsenyPoPreiskurantuRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateInformationRegisterTsenyPoPreiskurantuRecordType(Period Time, КаменьKey Guid, ФормаОгранкиKey Guid, ЦветКамняKey Guid, ГруппаЦветаKey Guid, ГруппаДефектаKey Guid, РассевKey Guid, Размер1От Float, Размер1До Float, entity interface{}) (*InformationRegisterTsenyPoPreiskurantuRecordType, error) {
	args := []string{fmt.Sprintf("Камень_Key=guid'%s' ", url.PathEscape(string(КаменьKey))), fmt.Sprintf("ФормаОгранки_Key=guid'%s' ", url.PathEscape(string(ФормаОгранкиKey))), fmt.Sprintf("ЦветКамня_Key=guid'%s' ", url.PathEscape(string(ЦветКамняKey))), fmt.Sprintf("ГруппаЦвета_Key=guid'%s' ", url.PathEscape(string(ГруппаЦветаKey))), fmt.Sprintf("ГруппаДефекта_Key=guid'%s' ", url.PathEscape(string(ГруппаДефектаKey))), fmt.Sprintf("Рассев_Key=guid'%s' ", url.PathEscape(string(РассевKey))), fmt.Sprintf("Размер1От=%f ", Размер1От), fmt.Sprintf("Размер1До=%f ", Размер1До)}
	raw, err := c.updateEntity("InformationRegister_ЦеныПоПрейскуранту_RecordType", args, entity)
	if err != nil {
		return nil, err
	}
	result := InformationRegisterTsenyPoPreiskurantuRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveInformationRegisterTsenyPoPreiskurantuRecordType(Period Time, КаменьKey Guid, ФормаОгранкиKey Guid, ЦветКамняKey Guid, ГруппаЦветаKey Guid, ГруппаДефектаKey Guid, РассевKey Guid, Размер1От Float, Размер1До Float) error {
	args := []string{fmt.Sprintf("Камень_Key=guid'%s' ", url.PathEscape(string(КаменьKey))), fmt.Sprintf("ФормаОгранки_Key=guid'%s' ", url.PathEscape(string(ФормаОгранкиKey))), fmt.Sprintf("ЦветКамня_Key=guid'%s' ", url.PathEscape(string(ЦветКамняKey))), fmt.Sprintf("ГруппаЦвета_Key=guid'%s' ", url.PathEscape(string(ГруппаЦветаKey))), fmt.Sprintf("ГруппаДефекта_Key=guid'%s' ", url.PathEscape(string(ГруппаДефектаKey))), fmt.Sprintf("Рассев_Key=guid'%s' ", url.PathEscape(string(РассевKey))), fmt.Sprintf("Размер1От=%f ", Размер1От), fmt.Sprintf("Размер1До=%f ", Размер1До)}
	return c.removeEntity("InformationRegister_ЦеныПоПрейскуранту_RecordType", args)
}

func (c *Client) CreateInformationRegisterTsenyPoPreiskurantuRecordType(data InformationRegisterTsenyPoPreiskurantuRecordType) (*InformationRegisterTsenyPoPreiskurantuRecordType, error) {
	raw, err := c.createEntity("InformationRegister_ЦеныПоПрейскуранту_RecordType", data)
	if err != nil {
		return nil, err
	}
	result := InformationRegisterTsenyPoPreiskurantuRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) InformationRegisterTsenyPoPreiskurantuRecordTypes(where Where) ([]InformationRegisterTsenyPoPreiskurantuRecordType, error) {
	type ReturnObj struct {
		Value []InformationRegisterTsenyPoPreiskurantuRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("InformationRegister_ЦеныПоПрейскуранту_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterTovaryVOtbore(Recorder String, RecorderType String) (*AccumulationRegisterTovaryVOtbore, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ТоварыВОтборе", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterTovaryVOtbore{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterTovaryVOtbore(Recorder String, RecorderType String, entity interface{}) (*AccumulationRegisterTovaryVOtbore, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ТоварыВОтборе", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterTovaryVOtbore{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterTovaryVOtbore(Recorder String, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ТоварыВОтборе", args)
}

func (c *Client) CreateAccumulationRegisterTovaryVOtbore(data AccumulationRegisterTovaryVOtbore) (*AccumulationRegisterTovaryVOtbore, error) {
	raw, err := c.createEntity("AccumulationRegister_ТоварыВОтборе", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterTovaryVOtbore{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterTovaryVOtbores(where Where) ([]AccumulationRegisterTovaryVOtbore, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterTovaryVOtbore `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ТоварыВОтборе", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterTovaryVOtboreRecordType(Recorder String, LineNumber Int, RecorderType String) (*AccumulationRegisterTovaryVOtboreRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ТоварыВОтборе_RecordType", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterTovaryVOtboreRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterTovaryVOtboreRecordType(Recorder String, LineNumber Int, RecorderType String, entity interface{}) (*AccumulationRegisterTovaryVOtboreRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ТоварыВОтборе_RecordType", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterTovaryVOtboreRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterTovaryVOtboreRecordType(Recorder String, LineNumber Int, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ТоварыВОтборе_RecordType", args)
}

func (c *Client) CreateAccumulationRegisterTovaryVOtboreRecordType(data AccumulationRegisterTovaryVOtboreRecordType) (*AccumulationRegisterTovaryVOtboreRecordType, error) {
	raw, err := c.createEntity("AccumulationRegister_ТоварыВОтборе_RecordType", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterTovaryVOtboreRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterTovaryVOtboreRecordTypes(where Where) ([]AccumulationRegisterTovaryVOtboreRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterTovaryVOtboreRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ТоварыВОтборе_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterRealizovannyeTovary(Recorder String, RecorderType String) (*AccumulationRegisterRealizovannyeTovary, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_РеализованныеТовары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterRealizovannyeTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterRealizovannyeTovary(Recorder String, RecorderType String, entity interface{}) (*AccumulationRegisterRealizovannyeTovary, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_РеализованныеТовары", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterRealizovannyeTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterRealizovannyeTovary(Recorder String, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_РеализованныеТовары", args)
}

func (c *Client) CreateAccumulationRegisterRealizovannyeTovary(data AccumulationRegisterRealizovannyeTovary) (*AccumulationRegisterRealizovannyeTovary, error) {
	raw, err := c.createEntity("AccumulationRegister_РеализованныеТовары", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterRealizovannyeTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterRealizovannyeTovarys(where Where) ([]AccumulationRegisterRealizovannyeTovary, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterRealizovannyeTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_РеализованныеТовары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterRealizovannyeTovaryRecordType(Recorder String, LineNumber Int, RecorderType String) (*AccumulationRegisterRealizovannyeTovaryRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_РеализованныеТовары_RecordType", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterRealizovannyeTovaryRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterRealizovannyeTovaryRecordType(Recorder String, LineNumber Int, RecorderType String, entity interface{}) (*AccumulationRegisterRealizovannyeTovaryRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_РеализованныеТовары_RecordType", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterRealizovannyeTovaryRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterRealizovannyeTovaryRecordType(Recorder String, LineNumber Int, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_РеализованныеТовары_RecordType", args)
}

func (c *Client) CreateAccumulationRegisterRealizovannyeTovaryRecordType(data AccumulationRegisterRealizovannyeTovaryRecordType) (*AccumulationRegisterRealizovannyeTovaryRecordType, error) {
	raw, err := c.createEntity("AccumulationRegister_РеализованныеТовары_RecordType", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterRealizovannyeTovaryRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterRealizovannyeTovaryRecordTypes(where Where) ([]AccumulationRegisterRealizovannyeTovaryRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterRealizovannyeTovaryRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_РеализованныеТовары_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterDenezhnyeSredstvaKomissionera(Recorder String, RecorderType String) (*AccumulationRegisterDenezhnyeSredstvaKomissionera, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ДенежныеСредстваКомиссионера", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDenezhnyeSredstvaKomissionera{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterDenezhnyeSredstvaKomissionera(Recorder String, RecorderType String, entity interface{}) (*AccumulationRegisterDenezhnyeSredstvaKomissionera, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ДенежныеСредстваКомиссионера", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDenezhnyeSredstvaKomissionera{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterDenezhnyeSredstvaKomissionera(Recorder String, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ДенежныеСредстваКомиссионера", args)
}

func (c *Client) CreateAccumulationRegisterDenezhnyeSredstvaKomissionera(data AccumulationRegisterDenezhnyeSredstvaKomissionera) (*AccumulationRegisterDenezhnyeSredstvaKomissionera, error) {
	raw, err := c.createEntity("AccumulationRegister_ДенежныеСредстваКомиссионера", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDenezhnyeSredstvaKomissionera{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterDenezhnyeSredstvaKomissioneras(where Where) ([]AccumulationRegisterDenezhnyeSredstvaKomissionera, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterDenezhnyeSredstvaKomissionera `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ДенежныеСредстваКомиссионера", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterDenezhnyeSredstvaKomissioneraRecordType(Recorder String, LineNumber Int, RecorderType String) (*AccumulationRegisterDenezhnyeSredstvaKomissioneraRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ДенежныеСредстваКомиссионера_RecordType", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDenezhnyeSredstvaKomissioneraRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterDenezhnyeSredstvaKomissioneraRecordType(Recorder String, LineNumber Int, RecorderType String, entity interface{}) (*AccumulationRegisterDenezhnyeSredstvaKomissioneraRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ДенежныеСредстваКомиссионера_RecordType", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDenezhnyeSredstvaKomissioneraRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterDenezhnyeSredstvaKomissioneraRecordType(Recorder String, LineNumber Int, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ДенежныеСредстваКомиссионера_RecordType", args)
}

func (c *Client) CreateAccumulationRegisterDenezhnyeSredstvaKomissioneraRecordType(data AccumulationRegisterDenezhnyeSredstvaKomissioneraRecordType) (*AccumulationRegisterDenezhnyeSredstvaKomissioneraRecordType, error) {
	raw, err := c.createEntity("AccumulationRegister_ДенежныеСредстваКомиссионера_RecordType", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDenezhnyeSredstvaKomissioneraRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterDenezhnyeSredstvaKomissioneraRecordTypes(where Where) ([]AccumulationRegisterDenezhnyeSredstvaKomissioneraRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterDenezhnyeSredstvaKomissioneraRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ДенежныеСредстваКомиссионера_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterProdazhi1(Recorder String, RecorderType String) (*AccumulationRegisterProdazhi1, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_Продажи1", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterProdazhi1{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterProdazhi1(Recorder String, RecorderType String, entity interface{}) (*AccumulationRegisterProdazhi1, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_Продажи1", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterProdazhi1{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterProdazhi1(Recorder String, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_Продажи1", args)
}

func (c *Client) CreateAccumulationRegisterProdazhi1(data AccumulationRegisterProdazhi1) (*AccumulationRegisterProdazhi1, error) {
	raw, err := c.createEntity("AccumulationRegister_Продажи1", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterProdazhi1{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterProdazhi1s(where Where) ([]AccumulationRegisterProdazhi1, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterProdazhi1 `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_Продажи1", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterProdazhi1RecordType(Recorder String, LineNumber Int, RecorderType String) (*AccumulationRegisterProdazhi1RecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_Продажи1_RecordType", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterProdazhi1RecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterProdazhi1RecordType(Recorder String, LineNumber Int, RecorderType String, entity interface{}) (*AccumulationRegisterProdazhi1RecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_Продажи1_RecordType", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterProdazhi1RecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterProdazhi1RecordType(Recorder String, LineNumber Int, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_Продажи1_RecordType", args)
}

func (c *Client) CreateAccumulationRegisterProdazhi1RecordType(data AccumulationRegisterProdazhi1RecordType) (*AccumulationRegisterProdazhi1RecordType, error) {
	raw, err := c.createEntity("AccumulationRegister_Продажи1_RecordType", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterProdazhi1RecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterProdazhi1RecordTypes(where Where) ([]AccumulationRegisterProdazhi1RecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterProdazhi1RecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_Продажи1_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterTovaryNaSkladakhAM(Recorder String, RecorderType String) (*AccumulationRegisterTovaryNaSkladakhAM, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ТоварыНаСкладахАМ", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterTovaryNaSkladakhAM{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterTovaryNaSkladakhAM(Recorder String, RecorderType String, entity interface{}) (*AccumulationRegisterTovaryNaSkladakhAM, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ТоварыНаСкладахАМ", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterTovaryNaSkladakhAM{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterTovaryNaSkladakhAM(Recorder String, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ТоварыНаСкладахАМ", args)
}

func (c *Client) CreateAccumulationRegisterTovaryNaSkladakhAM(data AccumulationRegisterTovaryNaSkladakhAM) (*AccumulationRegisterTovaryNaSkladakhAM, error) {
	raw, err := c.createEntity("AccumulationRegister_ТоварыНаСкладахАМ", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterTovaryNaSkladakhAM{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterTovaryNaSkladakhAMs(where Where) ([]AccumulationRegisterTovaryNaSkladakhAM, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterTovaryNaSkladakhAM `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ТоварыНаСкладахАМ", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterTovaryNaSkladakhAMRecordType(Recorder String, LineNumber Int, RecorderType String) (*AccumulationRegisterTovaryNaSkladakhAMRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ТоварыНаСкладахАМ_RecordType", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterTovaryNaSkladakhAMRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterTovaryNaSkladakhAMRecordType(Recorder String, LineNumber Int, RecorderType String, entity interface{}) (*AccumulationRegisterTovaryNaSkladakhAMRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ТоварыНаСкладахАМ_RecordType", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterTovaryNaSkladakhAMRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterTovaryNaSkladakhAMRecordType(Recorder String, LineNumber Int, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ТоварыНаСкладахАМ_RecordType", args)
}

func (c *Client) CreateAccumulationRegisterTovaryNaSkladakhAMRecordType(data AccumulationRegisterTovaryNaSkladakhAMRecordType) (*AccumulationRegisterTovaryNaSkladakhAMRecordType, error) {
	raw, err := c.createEntity("AccumulationRegister_ТоварыНаСкладахАМ_RecordType", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterTovaryNaSkladakhAMRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterTovaryNaSkladakhAMRecordTypes(where Where) ([]AccumulationRegisterTovaryNaSkladakhAMRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterTovaryNaSkladakhAMRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ТоварыНаСкладахАМ_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterSummyPoFinmonitoringu(Recorder String, RecorderType String) (*AccumulationRegisterSummyPoFinmonitoringu, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_СуммыПоФинмониторингу", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSummyPoFinmonitoringu{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterSummyPoFinmonitoringu(Recorder String, RecorderType String, entity interface{}) (*AccumulationRegisterSummyPoFinmonitoringu, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_СуммыПоФинмониторингу", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSummyPoFinmonitoringu{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterSummyPoFinmonitoringu(Recorder String, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_СуммыПоФинмониторингу", args)
}

func (c *Client) CreateAccumulationRegisterSummyPoFinmonitoringu(data AccumulationRegisterSummyPoFinmonitoringu) (*AccumulationRegisterSummyPoFinmonitoringu, error) {
	raw, err := c.createEntity("AccumulationRegister_СуммыПоФинмониторингу", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSummyPoFinmonitoringu{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterSummyPoFinmonitoringus(where Where) ([]AccumulationRegisterSummyPoFinmonitoringu, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterSummyPoFinmonitoringu `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_СуммыПоФинмониторингу", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterSummyPoFinmonitoringuRecordType(Recorder String, LineNumber Int, RecorderType String) (*AccumulationRegisterSummyPoFinmonitoringuRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_СуммыПоФинмониторингу_RecordType", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSummyPoFinmonitoringuRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterSummyPoFinmonitoringuRecordType(Recorder String, LineNumber Int, RecorderType String, entity interface{}) (*AccumulationRegisterSummyPoFinmonitoringuRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_СуммыПоФинмониторингу_RecordType", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSummyPoFinmonitoringuRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterSummyPoFinmonitoringuRecordType(Recorder String, LineNumber Int, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_СуммыПоФинмониторингу_RecordType", args)
}

func (c *Client) CreateAccumulationRegisterSummyPoFinmonitoringuRecordType(data AccumulationRegisterSummyPoFinmonitoringuRecordType) (*AccumulationRegisterSummyPoFinmonitoringuRecordType, error) {
	raw, err := c.createEntity("AccumulationRegister_СуммыПоФинмониторингу_RecordType", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSummyPoFinmonitoringuRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterSummyPoFinmonitoringuRecordTypes(where Where) ([]AccumulationRegisterSummyPoFinmonitoringuRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterSummyPoFinmonitoringuRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_СуммыПоФинмониторингу_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) InformationRegisterTsenyNomenklaturyKontragentov(Recorder String, RecorderType String) (*InformationRegisterTsenyNomenklaturyKontragentov, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("InformationRegister_ЦеныНоменклатурыКонтрагентов", args, []string{})
	if err != nil {
		return nil, err
	}
	result := InformationRegisterTsenyNomenklaturyKontragentov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateInformationRegisterTsenyNomenklaturyKontragentov(Recorder String, RecorderType String, entity interface{}) (*InformationRegisterTsenyNomenklaturyKontragentov, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("InformationRegister_ЦеныНоменклатурыКонтрагентов", args, entity)
	if err != nil {
		return nil, err
	}
	result := InformationRegisterTsenyNomenklaturyKontragentov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveInformationRegisterTsenyNomenklaturyKontragentov(Recorder String, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("InformationRegister_ЦеныНоменклатурыКонтрагентов", args)
}

func (c *Client) CreateInformationRegisterTsenyNomenklaturyKontragentov(data InformationRegisterTsenyNomenklaturyKontragentov) (*InformationRegisterTsenyNomenklaturyKontragentov, error) {
	raw, err := c.createEntity("InformationRegister_ЦеныНоменклатурыКонтрагентов", data)
	if err != nil {
		return nil, err
	}
	result := InformationRegisterTsenyNomenklaturyKontragentov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) InformationRegisterTsenyNomenklaturyKontragentovs(where Where) ([]InformationRegisterTsenyNomenklaturyKontragentov, error) {
	type ReturnObj struct {
		Value []InformationRegisterTsenyNomenklaturyKontragentov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("InformationRegister_ЦеныНоменклатурыКонтрагентов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) InformationRegisterTsenyNomenklaturyKontragentovRecordType(Period Time, ТипЦенKey Guid, ItemKey Guid, InstanceKey Guid, ХарактеристикаНоменклатурыKey Guid, SizeKey Guid) (*InformationRegisterTsenyNomenklaturyKontragentovRecordType, error) {
	args := []string{fmt.Sprintf("ТипЦен_Key=guid'%s' ", url.PathEscape(string(ТипЦенKey))), fmt.Sprintf("Номенклатура_Key=guid'%s' ", url.PathEscape(string(ItemKey))), fmt.Sprintf("СерияНоменклатуры_Key=guid'%s' ", url.PathEscape(string(InstanceKey))), fmt.Sprintf("ХарактеристикаНоменклатуры_Key=guid'%s' ", url.PathEscape(string(ХарактеристикаНоменклатурыKey))), fmt.Sprintf("Размер_Key=guid'%s' ", url.PathEscape(string(SizeKey)))}
	raw, err := c.getEntity("InformationRegister_ЦеныНоменклатурыКонтрагентов_RecordType", args, []string{})
	if err != nil {
		return nil, err
	}
	result := InformationRegisterTsenyNomenklaturyKontragentovRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateInformationRegisterTsenyNomenklaturyKontragentovRecordType(Period Time, ТипЦенKey Guid, ItemKey Guid, InstanceKey Guid, ХарактеристикаНоменклатурыKey Guid, SizeKey Guid, entity interface{}) (*InformationRegisterTsenyNomenklaturyKontragentovRecordType, error) {
	args := []string{fmt.Sprintf("ТипЦен_Key=guid'%s' ", url.PathEscape(string(ТипЦенKey))), fmt.Sprintf("Номенклатура_Key=guid'%s' ", url.PathEscape(string(ItemKey))), fmt.Sprintf("СерияНоменклатуры_Key=guid'%s' ", url.PathEscape(string(InstanceKey))), fmt.Sprintf("ХарактеристикаНоменклатуры_Key=guid'%s' ", url.PathEscape(string(ХарактеристикаНоменклатурыKey))), fmt.Sprintf("Размер_Key=guid'%s' ", url.PathEscape(string(SizeKey)))}
	raw, err := c.updateEntity("InformationRegister_ЦеныНоменклатурыКонтрагентов_RecordType", args, entity)
	if err != nil {
		return nil, err
	}
	result := InformationRegisterTsenyNomenklaturyKontragentovRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveInformationRegisterTsenyNomenklaturyKontragentovRecordType(Period Time, ТипЦенKey Guid, ItemKey Guid, InstanceKey Guid, ХарактеристикаНоменклатурыKey Guid, SizeKey Guid) error {
	args := []string{fmt.Sprintf("ТипЦен_Key=guid'%s' ", url.PathEscape(string(ТипЦенKey))), fmt.Sprintf("Номенклатура_Key=guid'%s' ", url.PathEscape(string(ItemKey))), fmt.Sprintf("СерияНоменклатуры_Key=guid'%s' ", url.PathEscape(string(InstanceKey))), fmt.Sprintf("ХарактеристикаНоменклатуры_Key=guid'%s' ", url.PathEscape(string(ХарактеристикаНоменклатурыKey))), fmt.Sprintf("Размер_Key=guid'%s' ", url.PathEscape(string(SizeKey)))}
	return c.removeEntity("InformationRegister_ЦеныНоменклатурыКонтрагентов_RecordType", args)
}

func (c *Client) CreateInformationRegisterTsenyNomenklaturyKontragentovRecordType(data InformationRegisterTsenyNomenklaturyKontragentovRecordType) (*InformationRegisterTsenyNomenklaturyKontragentovRecordType, error) {
	raw, err := c.createEntity("InformationRegister_ЦеныНоменклатурыКонтрагентов_RecordType", data)
	if err != nil {
		return nil, err
	}
	result := InformationRegisterTsenyNomenklaturyKontragentovRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) InformationRegisterTsenyNomenklaturyKontragentovRecordTypes(where Where) ([]InformationRegisterTsenyNomenklaturyKontragentovRecordType, error) {
	type ReturnObj struct {
		Value []InformationRegisterTsenyNomenklaturyKontragentovRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("InformationRegister_ЦеныНоменклатурыКонтрагентов_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterVzaimoraschetySKontragentami(Recorder String, RecorderType String) (*AccumulationRegisterVzaimoraschetySKontragentami, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ВзаиморасчетыСКонтрагентами", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterVzaimoraschetySKontragentami{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterVzaimoraschetySKontragentami(Recorder String, RecorderType String, entity interface{}) (*AccumulationRegisterVzaimoraschetySKontragentami, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ВзаиморасчетыСКонтрагентами", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterVzaimoraschetySKontragentami{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterVzaimoraschetySKontragentami(Recorder String, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ВзаиморасчетыСКонтрагентами", args)
}

func (c *Client) CreateAccumulationRegisterVzaimoraschetySKontragentami(data AccumulationRegisterVzaimoraschetySKontragentami) (*AccumulationRegisterVzaimoraschetySKontragentami, error) {
	raw, err := c.createEntity("AccumulationRegister_ВзаиморасчетыСКонтрагентами", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterVzaimoraschetySKontragentami{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterVzaimoraschetySKontragentamis(where Where) ([]AccumulationRegisterVzaimoraschetySKontragentami, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterVzaimoraschetySKontragentami `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ВзаиморасчетыСКонтрагентами", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterVzaimoraschetySKontragentamiRecordType(Recorder String, LineNumber Int, RecorderType String) (*AccumulationRegisterVzaimoraschetySKontragentamiRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ВзаиморасчетыСКонтрагентами_RecordType", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterVzaimoraschetySKontragentamiRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterVzaimoraschetySKontragentamiRecordType(Recorder String, LineNumber Int, RecorderType String, entity interface{}) (*AccumulationRegisterVzaimoraschetySKontragentamiRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ВзаиморасчетыСКонтрагентами_RecordType", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterVzaimoraschetySKontragentamiRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterVzaimoraschetySKontragentamiRecordType(Recorder String, LineNumber Int, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ВзаиморасчетыСКонтрагентами_RecordType", args)
}

func (c *Client) CreateAccumulationRegisterVzaimoraschetySKontragentamiRecordType(data AccumulationRegisterVzaimoraschetySKontragentamiRecordType) (*AccumulationRegisterVzaimoraschetySKontragentamiRecordType, error) {
	raw, err := c.createEntity("AccumulationRegister_ВзаиморасчетыСКонтрагентами_RecordType", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterVzaimoraschetySKontragentamiRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterVzaimoraschetySKontragentamiRecordTypes(where Where) ([]AccumulationRegisterVzaimoraschetySKontragentamiRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterVzaimoraschetySKontragentamiRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ВзаиморасчетыСКонтрагентами_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterSummyPokupokPoDiskontnymKartam(Recorder String, RecorderType String) (*AccumulationRegisterSummyPokupokPoDiskontnymKartam, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_СуммыПокупокПоДисконтнымКартам", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSummyPokupokPoDiskontnymKartam{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterSummyPokupokPoDiskontnymKartam(Recorder String, RecorderType String, entity interface{}) (*AccumulationRegisterSummyPokupokPoDiskontnymKartam, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_СуммыПокупокПоДисконтнымКартам", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSummyPokupokPoDiskontnymKartam{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterSummyPokupokPoDiskontnymKartam(Recorder String, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_СуммыПокупокПоДисконтнымКартам", args)
}

func (c *Client) CreateAccumulationRegisterSummyPokupokPoDiskontnymKartam(data AccumulationRegisterSummyPokupokPoDiskontnymKartam) (*AccumulationRegisterSummyPokupokPoDiskontnymKartam, error) {
	raw, err := c.createEntity("AccumulationRegister_СуммыПокупокПоДисконтнымКартам", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSummyPokupokPoDiskontnymKartam{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterSummyPokupokPoDiskontnymKartams(where Where) ([]AccumulationRegisterSummyPokupokPoDiskontnymKartam, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterSummyPokupokPoDiskontnymKartam `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_СуммыПокупокПоДисконтнымКартам", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterSummyPokupokPoDiskontnymKartamRecordType(Recorder String, LineNumber Int, RecorderType String) (*AccumulationRegisterSummyPokupokPoDiskontnymKartamRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_СуммыПокупокПоДисконтнымКартам_RecordType", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSummyPokupokPoDiskontnymKartamRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterSummyPokupokPoDiskontnymKartamRecordType(Recorder String, LineNumber Int, RecorderType String, entity interface{}) (*AccumulationRegisterSummyPokupokPoDiskontnymKartamRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_СуммыПокупокПоДисконтнымКартам_RecordType", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSummyPokupokPoDiskontnymKartamRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterSummyPokupokPoDiskontnymKartamRecordType(Recorder String, LineNumber Int, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_СуммыПокупокПоДисконтнымКартам_RecordType", args)
}

func (c *Client) CreateAccumulationRegisterSummyPokupokPoDiskontnymKartamRecordType(data AccumulationRegisterSummyPokupokPoDiskontnymKartamRecordType) (*AccumulationRegisterSummyPokupokPoDiskontnymKartamRecordType, error) {
	raw, err := c.createEntity("AccumulationRegister_СуммыПокупокПоДисконтнымКартам_RecordType", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterSummyPokupokPoDiskontnymKartamRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterSummyPokupokPoDiskontnymKartamRecordTypes(where Where) ([]AccumulationRegisterSummyPokupokPoDiskontnymKartamRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterSummyPokupokPoDiskontnymKartamRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_СуммыПокупокПоДисконтнымКартам_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterVypolneniePlanaProdazh(Recorder String, RecorderType String) (*AccumulationRegisterVypolneniePlanaProdazh, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ВыполнениеПланаПродаж", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterVypolneniePlanaProdazh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterVypolneniePlanaProdazh(Recorder String, RecorderType String, entity interface{}) (*AccumulationRegisterVypolneniePlanaProdazh, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ВыполнениеПланаПродаж", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterVypolneniePlanaProdazh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterVypolneniePlanaProdazh(Recorder String, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ВыполнениеПланаПродаж", args)
}

func (c *Client) CreateAccumulationRegisterVypolneniePlanaProdazh(data AccumulationRegisterVypolneniePlanaProdazh) (*AccumulationRegisterVypolneniePlanaProdazh, error) {
	raw, err := c.createEntity("AccumulationRegister_ВыполнениеПланаПродаж", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterVypolneniePlanaProdazh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterVypolneniePlanaProdazhs(where Where) ([]AccumulationRegisterVypolneniePlanaProdazh, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterVypolneniePlanaProdazh `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ВыполнениеПланаПродаж", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterVypolneniePlanaProdazhRecordType(Recorder String, LineNumber Int, RecorderType String) (*AccumulationRegisterVypolneniePlanaProdazhRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ВыполнениеПланаПродаж_RecordType", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterVypolneniePlanaProdazhRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterVypolneniePlanaProdazhRecordType(Recorder String, LineNumber Int, RecorderType String, entity interface{}) (*AccumulationRegisterVypolneniePlanaProdazhRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ВыполнениеПланаПродаж_RecordType", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterVypolneniePlanaProdazhRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterVypolneniePlanaProdazhRecordType(Recorder String, LineNumber Int, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ВыполнениеПланаПродаж_RecordType", args)
}

func (c *Client) CreateAccumulationRegisterVypolneniePlanaProdazhRecordType(data AccumulationRegisterVypolneniePlanaProdazhRecordType) (*AccumulationRegisterVypolneniePlanaProdazhRecordType, error) {
	raw, err := c.createEntity("AccumulationRegister_ВыполнениеПланаПродаж_RecordType", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterVypolneniePlanaProdazhRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterVypolneniePlanaProdazhRecordTypes(where Where) ([]AccumulationRegisterVypolneniePlanaProdazhRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterVypolneniePlanaProdazhRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ВыполнениеПланаПродаж_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterDavalcheskiiMetall(Recorder String, RecorderType String) (*AccumulationRegisterDavalcheskiiMetall, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ДавальческийМеталл", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDavalcheskiiMetall{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterDavalcheskiiMetall(Recorder String, RecorderType String, entity interface{}) (*AccumulationRegisterDavalcheskiiMetall, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ДавальческийМеталл", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDavalcheskiiMetall{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterDavalcheskiiMetall(Recorder String, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ДавальческийМеталл", args)
}

func (c *Client) CreateAccumulationRegisterDavalcheskiiMetall(data AccumulationRegisterDavalcheskiiMetall) (*AccumulationRegisterDavalcheskiiMetall, error) {
	raw, err := c.createEntity("AccumulationRegister_ДавальческийМеталл", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDavalcheskiiMetall{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterDavalcheskiiMetalls(where Where) ([]AccumulationRegisterDavalcheskiiMetall, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterDavalcheskiiMetall `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ДавальческийМеталл", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterDavalcheskiiMetallRecordType(Recorder String, LineNumber Int, RecorderType String) (*AccumulationRegisterDavalcheskiiMetallRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ДавальческийМеталл_RecordType", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDavalcheskiiMetallRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterDavalcheskiiMetallRecordType(Recorder String, LineNumber Int, RecorderType String, entity interface{}) (*AccumulationRegisterDavalcheskiiMetallRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ДавальческийМеталл_RecordType", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDavalcheskiiMetallRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterDavalcheskiiMetallRecordType(Recorder String, LineNumber Int, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ДавальческийМеталл_RecordType", args)
}

func (c *Client) CreateAccumulationRegisterDavalcheskiiMetallRecordType(data AccumulationRegisterDavalcheskiiMetallRecordType) (*AccumulationRegisterDavalcheskiiMetallRecordType, error) {
	raw, err := c.createEntity("AccumulationRegister_ДавальческийМеталл_RecordType", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDavalcheskiiMetallRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterDavalcheskiiMetallRecordTypes(where Where) ([]AccumulationRegisterDavalcheskiiMetallRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterDavalcheskiiMetallRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ДавальческийМеталл_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterDenezhnyeSredstva(Recorder String, RecorderType String) (*AccumulationRegisterDenezhnyeSredstva, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ДенежныеСредства", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDenezhnyeSredstva{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterDenezhnyeSredstva(Recorder String, RecorderType String, entity interface{}) (*AccumulationRegisterDenezhnyeSredstva, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ДенежныеСредства", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDenezhnyeSredstva{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterDenezhnyeSredstva(Recorder String, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ДенежныеСредства", args)
}

func (c *Client) CreateAccumulationRegisterDenezhnyeSredstva(data AccumulationRegisterDenezhnyeSredstva) (*AccumulationRegisterDenezhnyeSredstva, error) {
	raw, err := c.createEntity("AccumulationRegister_ДенежныеСредства", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDenezhnyeSredstva{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterDenezhnyeSredstvas(where Where) ([]AccumulationRegisterDenezhnyeSredstva, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterDenezhnyeSredstva `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ДенежныеСредства", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterDenezhnyeSredstvaRecordType(Recorder String, LineNumber Int, RecorderType String) (*AccumulationRegisterDenezhnyeSredstvaRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ДенежныеСредства_RecordType", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDenezhnyeSredstvaRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterDenezhnyeSredstvaRecordType(Recorder String, LineNumber Int, RecorderType String, entity interface{}) (*AccumulationRegisterDenezhnyeSredstvaRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ДенежныеСредства_RecordType", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDenezhnyeSredstvaRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterDenezhnyeSredstvaRecordType(Recorder String, LineNumber Int, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ДенежныеСредства_RecordType", args)
}

func (c *Client) CreateAccumulationRegisterDenezhnyeSredstvaRecordType(data AccumulationRegisterDenezhnyeSredstvaRecordType) (*AccumulationRegisterDenezhnyeSredstvaRecordType, error) {
	raw, err := c.createEntity("AccumulationRegister_ДенежныеСредства_RecordType", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDenezhnyeSredstvaRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterDenezhnyeSredstvaRecordTypes(where Where) ([]AccumulationRegisterDenezhnyeSredstvaRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterDenezhnyeSredstvaRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ДенежныеСредства_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterTovaryPeredannye(Recorder String, RecorderType String) (*AccumulationRegisterTovaryPeredannye, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ТоварыПереданные", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterTovaryPeredannye{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterTovaryPeredannye(Recorder String, RecorderType String, entity interface{}) (*AccumulationRegisterTovaryPeredannye, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ТоварыПереданные", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterTovaryPeredannye{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterTovaryPeredannye(Recorder String, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ТоварыПереданные", args)
}

func (c *Client) CreateAccumulationRegisterTovaryPeredannye(data AccumulationRegisterTovaryPeredannye) (*AccumulationRegisterTovaryPeredannye, error) {
	raw, err := c.createEntity("AccumulationRegister_ТоварыПереданные", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterTovaryPeredannye{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterTovaryPeredannyes(where Where) ([]AccumulationRegisterTovaryPeredannye, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterTovaryPeredannye `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ТоварыПереданные", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterTovaryPeredannyeRecordType(Recorder String, LineNumber Int, RecorderType String) (*AccumulationRegisterTovaryPeredannyeRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ТоварыПереданные_RecordType", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterTovaryPeredannyeRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterTovaryPeredannyeRecordType(Recorder String, LineNumber Int, RecorderType String, entity interface{}) (*AccumulationRegisterTovaryPeredannyeRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ТоварыПереданные_RecordType", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterTovaryPeredannyeRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterTovaryPeredannyeRecordType(Recorder String, LineNumber Int, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ТоварыПереданные_RecordType", args)
}

func (c *Client) CreateAccumulationRegisterTovaryPeredannyeRecordType(data AccumulationRegisterTovaryPeredannyeRecordType) (*AccumulationRegisterTovaryPeredannyeRecordType, error) {
	raw, err := c.createEntity("AccumulationRegister_ТоварыПереданные_RecordType", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterTovaryPeredannyeRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterTovaryPeredannyeRecordTypes(where Where) ([]AccumulationRegisterTovaryPeredannyeRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterTovaryPeredannyeRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ТоварыПереданные_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterDenezhnyeSredstvaKSpisaniiu(Recorder String, RecorderType String) (*AccumulationRegisterDenezhnyeSredstvaKSpisaniiu, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ДенежныеСредстваКСписанию", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDenezhnyeSredstvaKSpisaniiu{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterDenezhnyeSredstvaKSpisaniiu(Recorder String, RecorderType String, entity interface{}) (*AccumulationRegisterDenezhnyeSredstvaKSpisaniiu, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ДенежныеСредстваКСписанию", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDenezhnyeSredstvaKSpisaniiu{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterDenezhnyeSredstvaKSpisaniiu(Recorder String, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ДенежныеСредстваКСписанию", args)
}

func (c *Client) CreateAccumulationRegisterDenezhnyeSredstvaKSpisaniiu(data AccumulationRegisterDenezhnyeSredstvaKSpisaniiu) (*AccumulationRegisterDenezhnyeSredstvaKSpisaniiu, error) {
	raw, err := c.createEntity("AccumulationRegister_ДенежныеСредстваКСписанию", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDenezhnyeSredstvaKSpisaniiu{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterDenezhnyeSredstvaKSpisaniius(where Where) ([]AccumulationRegisterDenezhnyeSredstvaKSpisaniiu, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterDenezhnyeSredstvaKSpisaniiu `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ДенежныеСредстваКСписанию", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) AccumulationRegisterDenezhnyeSredstvaKSpisaniiuRecordType(Recorder String, LineNumber Int, RecorderType String) (*AccumulationRegisterDenezhnyeSredstvaKSpisaniiuRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.getEntity("AccumulationRegister_ДенежныеСредстваКСписанию_RecordType", args, []string{})
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDenezhnyeSredstvaKSpisaniiuRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateAccumulationRegisterDenezhnyeSredstvaKSpisaniiuRecordType(Recorder String, LineNumber Int, RecorderType String, entity interface{}) (*AccumulationRegisterDenezhnyeSredstvaKSpisaniiuRecordType, error) {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	raw, err := c.updateEntity("AccumulationRegister_ДенежныеСредстваКСписанию_RecordType", args, entity)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDenezhnyeSredstvaKSpisaniiuRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveAccumulationRegisterDenezhnyeSredstvaKSpisaniiuRecordType(Recorder String, LineNumber Int, RecorderType String) error {
	args := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(Recorder))), fmt.Sprintf("LineNumber=%d ", LineNumber), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(RecorderType)))}
	return c.removeEntity("AccumulationRegister_ДенежныеСредстваКСписанию_RecordType", args)
}

func (c *Client) CreateAccumulationRegisterDenezhnyeSredstvaKSpisaniiuRecordType(data AccumulationRegisterDenezhnyeSredstvaKSpisaniiuRecordType) (*AccumulationRegisterDenezhnyeSredstvaKSpisaniiuRecordType, error) {
	raw, err := c.createEntity("AccumulationRegister_ДенежныеСредстваКСписанию_RecordType", data)
	if err != nil {
		return nil, err
	}
	result := AccumulationRegisterDenezhnyeSredstvaKSpisaniiuRecordType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) AccumulationRegisterDenezhnyeSredstvaKSpisaniiuRecordTypes(where Where) ([]AccumulationRegisterDenezhnyeSredstvaKSpisaniiuRecordType, error) {
	type ReturnObj struct {
		Value []AccumulationRegisterDenezhnyeSredstvaKSpisaniiuRecordType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("AccumulationRegister_ДенежныеСредстваКСписанию_RecordType", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogDogovoryKontragentov(Key Guid) (*CatalogDogovoryKontragentov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ДоговорыКонтрагентов", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogDogovoryKontragentov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogDogovoryKontragentov(Key Guid, entity interface{}) (*CatalogDogovoryKontragentov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ДоговорыКонтрагентов", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogDogovoryKontragentov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogDogovoryKontragentov(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ДоговорыКонтрагентов", args)
}

func (c *Client) CreateCatalogDogovoryKontragentov(data CatalogDogovoryKontragentov) (*CatalogDogovoryKontragentov, error) {
	raw, err := c.createEntity("Catalog_ДоговорыКонтрагентов", data)
	if err != nil {
		return nil, err
	}
	result := CatalogDogovoryKontragentov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogDogovoryKontragentovs(where Where) ([]CatalogDogovoryKontragentov, error) {
	type ReturnObj struct {
		Value []CatalogDogovoryKontragentov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ДоговорыКонтрагентов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) Order(Key Guid) (*Order, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ЧекККМ", args, []string{})
	if err != nil {
		return nil, err
	}
	result := Order{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateOrder(Key Guid, entity interface{}) (*Order, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ЧекККМ", args, entity)
	if err != nil {
		return nil, err
	}
	result := Order{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveOrder(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ЧекККМ", args)
}

func (c *Client) CreateOrder(data Order) (*Order, error) {
	raw, err := c.createEntity("Document_ЧекККМ", data)
	if err != nil {
		return nil, err
	}
	result := Order{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) Orders(where Where) ([]Order, error) {
	type ReturnObj struct {
		Value []Order `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЧекККМ", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentChekKKMOplata(Key Guid, LineNumber Int) (*DocumentChekKKMOplata, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ЧекККМ_Оплата", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentChekKKMOplata{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentChekKKMOplata(Key Guid, LineNumber Int, entity interface{}) (*DocumentChekKKMOplata, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ЧекККМ_Оплата", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentChekKKMOplata{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentChekKKMOplata(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ЧекККМ_Оплата", args)
}

func (c *Client) CreateDocumentChekKKMOplata(data DocumentChekKKMOplata) (*DocumentChekKKMOplata, error) {
	raw, err := c.createEntity("Document_ЧекККМ_Оплата", data)
	if err != nil {
		return nil, err
	}
	result := DocumentChekKKMOplata{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentChekKKMOplatas(where Where) ([]DocumentChekKKMOplata, error) {
	type ReturnObj struct {
		Value []DocumentChekKKMOplata `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЧекККМ_Оплата", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentChekKKMOplataSertifikatami(Key Guid, LineNumber Int) (*DocumentChekKKMOplataSertifikatami, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ЧекККМ_ОплатаСертификатами", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentChekKKMOplataSertifikatami{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentChekKKMOplataSertifikatami(Key Guid, LineNumber Int, entity interface{}) (*DocumentChekKKMOplataSertifikatami, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ЧекККМ_ОплатаСертификатами", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentChekKKMOplataSertifikatami{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentChekKKMOplataSertifikatami(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ЧекККМ_ОплатаСертификатами", args)
}

func (c *Client) CreateDocumentChekKKMOplataSertifikatami(data DocumentChekKKMOplataSertifikatami) (*DocumentChekKKMOplataSertifikatami, error) {
	raw, err := c.createEntity("Document_ЧекККМ_ОплатаСертификатами", data)
	if err != nil {
		return nil, err
	}
	result := DocumentChekKKMOplataSertifikatami{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentChekKKMOplataSertifikatamis(where Where) ([]DocumentChekKKMOplataSertifikatami, error) {
	type ReturnObj struct {
		Value []DocumentChekKKMOplataSertifikatami `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЧекККМ_ОплатаСертификатами", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentChekKKMProdazhaSertifikatov(Key Guid, LineNumber Int) (*DocumentChekKKMProdazhaSertifikatov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ЧекККМ_ПродажаСертификатов", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentChekKKMProdazhaSertifikatov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentChekKKMProdazhaSertifikatov(Key Guid, LineNumber Int, entity interface{}) (*DocumentChekKKMProdazhaSertifikatov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ЧекККМ_ПродажаСертификатов", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentChekKKMProdazhaSertifikatov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentChekKKMProdazhaSertifikatov(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ЧекККМ_ПродажаСертификатов", args)
}

func (c *Client) CreateDocumentChekKKMProdazhaSertifikatov(data DocumentChekKKMProdazhaSertifikatov) (*DocumentChekKKMProdazhaSertifikatov, error) {
	raw, err := c.createEntity("Document_ЧекККМ_ПродажаСертификатов", data)
	if err != nil {
		return nil, err
	}
	result := DocumentChekKKMProdazhaSertifikatov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentChekKKMProdazhaSertifikatovs(where Where) ([]DocumentChekKKMProdazhaSertifikatov, error) {
	type ReturnObj struct {
		Value []DocumentChekKKMProdazhaSertifikatov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЧекККМ_ПродажаСертификатов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentChekKKMTovary(Key Guid, LineNumber Int) (*DocumentChekKKMTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ЧекККМ_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentChekKKMTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentChekKKMTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentChekKKMTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ЧекККМ_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentChekKKMTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentChekKKMTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ЧекККМ_Товары", args)
}

func (c *Client) CreateDocumentChekKKMTovary(data DocumentChekKKMTovary) (*DocumentChekKKMTovary, error) {
	raw, err := c.createEntity("Document_ЧекККМ_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentChekKKMTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentChekKKMTovarys(where Where) ([]DocumentChekKKMTovary, error) {
	type ReturnObj struct {
		Value []DocumentChekKKMTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЧекККМ_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentChekKKMDokumentyObmena(Key Guid, LineNumber Int) (*DocumentChekKKMDokumentyObmena, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ЧекККМ_ДокументыОбмена", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentChekKKMDokumentyObmena{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentChekKKMDokumentyObmena(Key Guid, LineNumber Int, entity interface{}) (*DocumentChekKKMDokumentyObmena, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ЧекККМ_ДокументыОбмена", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentChekKKMDokumentyObmena{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentChekKKMDokumentyObmena(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ЧекККМ_ДокументыОбмена", args)
}

func (c *Client) CreateDocumentChekKKMDokumentyObmena(data DocumentChekKKMDokumentyObmena) (*DocumentChekKKMDokumentyObmena, error) {
	raw, err := c.createEntity("Document_ЧекККМ_ДокументыОбмена", data)
	if err != nil {
		return nil, err
	}
	result := DocumentChekKKMDokumentyObmena{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentChekKKMDokumentyObmenas(where Where) ([]DocumentChekKKMDokumentyObmena, error) {
	type ReturnObj struct {
		Value []DocumentChekKKMDokumentyObmena `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЧекККМ_ДокументыОбмена", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentChekKKMDogovoraRassrochkiProdazha(Key Guid, LineNumber Int) (*DocumentChekKKMDogovoraRassrochkiProdazha, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ЧекККМ_ДоговораРассрочкиПродажа", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentChekKKMDogovoraRassrochkiProdazha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentChekKKMDogovoraRassrochkiProdazha(Key Guid, LineNumber Int, entity interface{}) (*DocumentChekKKMDogovoraRassrochkiProdazha, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ЧекККМ_ДоговораРассрочкиПродажа", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentChekKKMDogovoraRassrochkiProdazha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentChekKKMDogovoraRassrochkiProdazha(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ЧекККМ_ДоговораРассрочкиПродажа", args)
}

func (c *Client) CreateDocumentChekKKMDogovoraRassrochkiProdazha(data DocumentChekKKMDogovoraRassrochkiProdazha) (*DocumentChekKKMDogovoraRassrochkiProdazha, error) {
	raw, err := c.createEntity("Document_ЧекККМ_ДоговораРассрочкиПродажа", data)
	if err != nil {
		return nil, err
	}
	result := DocumentChekKKMDogovoraRassrochkiProdazha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentChekKKMDogovoraRassrochkiProdazhas(where Where) ([]DocumentChekKKMDogovoraRassrochkiProdazha, error) {
	type ReturnObj struct {
		Value []DocumentChekKKMDogovoraRassrochkiProdazha `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЧекККМ_ДоговораРассрочкиПродажа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentChekKKMDogovoraRassrochkiOplata(Key Guid, LineNumber Int) (*DocumentChekKKMDogovoraRassrochkiOplata, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ЧекККМ_ДоговораРассрочкиОплата", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentChekKKMDogovoraRassrochkiOplata{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentChekKKMDogovoraRassrochkiOplata(Key Guid, LineNumber Int, entity interface{}) (*DocumentChekKKMDogovoraRassrochkiOplata, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ЧекККМ_ДоговораРассрочкиОплата", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentChekKKMDogovoraRassrochkiOplata{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentChekKKMDogovoraRassrochkiOplata(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ЧекККМ_ДоговораРассрочкиОплата", args)
}

func (c *Client) CreateDocumentChekKKMDogovoraRassrochkiOplata(data DocumentChekKKMDogovoraRassrochkiOplata) (*DocumentChekKKMDogovoraRassrochkiOplata, error) {
	raw, err := c.createEntity("Document_ЧекККМ_ДоговораРассрочкиОплата", data)
	if err != nil {
		return nil, err
	}
	result := DocumentChekKKMDogovoraRassrochkiOplata{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentChekKKMDogovoraRassrochkiOplatas(where Where) ([]DocumentChekKKMDogovoraRassrochkiOplata, error) {
	type ReturnObj struct {
		Value []DocumentChekKKMDogovoraRassrochkiOplata `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЧекККМ_ДоговораРассрочкиОплата", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentChekKKMOplataBallami(Key Guid, LineNumber Int) (*DocumentChekKKMOplataBallami, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ЧекККМ_ОплатаБаллами", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentChekKKMOplataBallami{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentChekKKMOplataBallami(Key Guid, LineNumber Int, entity interface{}) (*DocumentChekKKMOplataBallami, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ЧекККМ_ОплатаБаллами", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentChekKKMOplataBallami{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentChekKKMOplataBallami(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ЧекККМ_ОплатаБаллами", args)
}

func (c *Client) CreateDocumentChekKKMOplataBallami(data DocumentChekKKMOplataBallami) (*DocumentChekKKMOplataBallami, error) {
	raw, err := c.createEntity("Document_ЧекККМ_ОплатаБаллами", data)
	if err != nil {
		return nil, err
	}
	result := DocumentChekKKMOplataBallami{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentChekKKMOplataBallamis(where Where) ([]DocumentChekKKMOplataBallami, error) {
	type ReturnObj struct {
		Value []DocumentChekKKMOplataBallami `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЧекККМ_ОплатаБаллами", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentChekKKMSkidkiNatsenki(Key Guid, LineNumber Int) (*DocumentChekKKMSkidkiNatsenki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ЧекККМ_СкидкиНаценки", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentChekKKMSkidkiNatsenki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentChekKKMSkidkiNatsenki(Key Guid, LineNumber Int, entity interface{}) (*DocumentChekKKMSkidkiNatsenki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ЧекККМ_СкидкиНаценки", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentChekKKMSkidkiNatsenki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentChekKKMSkidkiNatsenki(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ЧекККМ_СкидкиНаценки", args)
}

func (c *Client) CreateDocumentChekKKMSkidkiNatsenki(data DocumentChekKKMSkidkiNatsenki) (*DocumentChekKKMSkidkiNatsenki, error) {
	raw, err := c.createEntity("Document_ЧекККМ_СкидкиНаценки", data)
	if err != nil {
		return nil, err
	}
	result := DocumentChekKKMSkidkiNatsenki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentChekKKMSkidkiNatsenkis(where Where) ([]DocumentChekKKMSkidkiNatsenki, error) {
	type ReturnObj struct {
		Value []DocumentChekKKMSkidkiNatsenki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЧекККМ_СкидкиНаценки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentChekKKMUpravliaemyeSkidki(Key Guid, LineNumber Int) (*DocumentChekKKMUpravliaemyeSkidki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ЧекККМ_УправляемыеСкидки", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentChekKKMUpravliaemyeSkidki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentChekKKMUpravliaemyeSkidki(Key Guid, LineNumber Int, entity interface{}) (*DocumentChekKKMUpravliaemyeSkidki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ЧекККМ_УправляемыеСкидки", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentChekKKMUpravliaemyeSkidki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentChekKKMUpravliaemyeSkidki(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ЧекККМ_УправляемыеСкидки", args)
}

func (c *Client) CreateDocumentChekKKMUpravliaemyeSkidki(data DocumentChekKKMUpravliaemyeSkidki) (*DocumentChekKKMUpravliaemyeSkidki, error) {
	raw, err := c.createEntity("Document_ЧекККМ_УправляемыеСкидки", data)
	if err != nil {
		return nil, err
	}
	result := DocumentChekKKMUpravliaemyeSkidki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentChekKKMUpravliaemyeSkidkis(where Where) ([]DocumentChekKKMUpravliaemyeSkidki, error) {
	type ReturnObj struct {
		Value []DocumentChekKKMUpravliaemyeSkidki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЧекККМ_УправляемыеСкидки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentChekKKMPodarki(Key Guid, LineNumber Int) (*DocumentChekKKMPodarki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ЧекККМ_Подарки", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentChekKKMPodarki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentChekKKMPodarki(Key Guid, LineNumber Int, entity interface{}) (*DocumentChekKKMPodarki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ЧекККМ_Подарки", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentChekKKMPodarki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentChekKKMPodarki(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ЧекККМ_Подарки", args)
}

func (c *Client) CreateDocumentChekKKMPodarki(data DocumentChekKKMPodarki) (*DocumentChekKKMPodarki, error) {
	raw, err := c.createEntity("Document_ЧекККМ_Подарки", data)
	if err != nil {
		return nil, err
	}
	result := DocumentChekKKMPodarki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentChekKKMPodarkis(where Where) ([]DocumentChekKKMPodarki, error) {
	type ReturnObj struct {
		Value []DocumentChekKKMPodarki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЧекККМ_Подарки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentChekKKMKupony(Key Guid, LineNumber Int) (*DocumentChekKKMKupony, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ЧекККМ_Купоны", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentChekKKMKupony{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentChekKKMKupony(Key Guid, LineNumber Int, entity interface{}) (*DocumentChekKKMKupony, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ЧекККМ_Купоны", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentChekKKMKupony{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentChekKKMKupony(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ЧекККМ_Купоны", args)
}

func (c *Client) CreateDocumentChekKKMKupony(data DocumentChekKKMKupony) (*DocumentChekKKMKupony, error) {
	raw, err := c.createEntity("Document_ЧекККМ_Купоны", data)
	if err != nil {
		return nil, err
	}
	result := DocumentChekKKMKupony{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentChekKKMKuponys(where Where) ([]DocumentChekKKMKupony, error) {
	type ReturnObj struct {
		Value []DocumentChekKKMKupony `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЧекККМ_Купоны", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPereotsenkaValiutnykhSredstv(Key Guid) (*DocumentPereotsenkaValiutnykhSredstv, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ПереоценкаВалютныхСредств", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPereotsenkaValiutnykhSredstv{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPereotsenkaValiutnykhSredstv(Key Guid, entity interface{}) (*DocumentPereotsenkaValiutnykhSredstv, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ПереоценкаВалютныхСредств", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPereotsenkaValiutnykhSredstv{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPereotsenkaValiutnykhSredstv(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ПереоценкаВалютныхСредств", args)
}

func (c *Client) CreateDocumentPereotsenkaValiutnykhSredstv(data DocumentPereotsenkaValiutnykhSredstv) (*DocumentPereotsenkaValiutnykhSredstv, error) {
	raw, err := c.createEntity("Document_ПереоценкаВалютныхСредств", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPereotsenkaValiutnykhSredstv{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPereotsenkaValiutnykhSredstvs(where Where) ([]DocumentPereotsenkaValiutnykhSredstv, error) {
	type ReturnObj struct {
		Value []DocumentPereotsenkaValiutnykhSredstv `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПереоценкаВалютныхСредств", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogTipySkidokNatsenok(Key Guid) (*CatalogTipySkidokNatsenok, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ТипыСкидокНаценок", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogTipySkidokNatsenok{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogTipySkidokNatsenok(Key Guid, entity interface{}) (*CatalogTipySkidokNatsenok, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ТипыСкидокНаценок", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogTipySkidokNatsenok{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogTipySkidokNatsenok(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ТипыСкидокНаценок", args)
}

func (c *Client) CreateCatalogTipySkidokNatsenok(data CatalogTipySkidokNatsenok) (*CatalogTipySkidokNatsenok, error) {
	raw, err := c.createEntity("Catalog_ТипыСкидокНаценок", data)
	if err != nil {
		return nil, err
	}
	result := CatalogTipySkidokNatsenok{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogTipySkidokNatsenoks(where Where) ([]CatalogTipySkidokNatsenok, error) {
	type ReturnObj struct {
		Value []CatalogTipySkidokNatsenok `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ТипыСкидокНаценок", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogTipySkidokNatsenokVremiaPoDniamNedeli(Key Guid, LineNumber Int) (*CatalogTipySkidokNatsenokVremiaPoDniamNedeli, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_ТипыСкидокНаценок_ВремяПоДнямНедели", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogTipySkidokNatsenokVremiaPoDniamNedeli{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogTipySkidokNatsenokVremiaPoDniamNedeli(Key Guid, LineNumber Int, entity interface{}) (*CatalogTipySkidokNatsenokVremiaPoDniamNedeli, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_ТипыСкидокНаценок_ВремяПоДнямНедели", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogTipySkidokNatsenokVremiaPoDniamNedeli{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogTipySkidokNatsenokVremiaPoDniamNedeli(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_ТипыСкидокНаценок_ВремяПоДнямНедели", args)
}

func (c *Client) CreateCatalogTipySkidokNatsenokVremiaPoDniamNedeli(data CatalogTipySkidokNatsenokVremiaPoDniamNedeli) (*CatalogTipySkidokNatsenokVremiaPoDniamNedeli, error) {
	raw, err := c.createEntity("Catalog_ТипыСкидокНаценок_ВремяПоДнямНедели", data)
	if err != nil {
		return nil, err
	}
	result := CatalogTipySkidokNatsenokVremiaPoDniamNedeli{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogTipySkidokNatsenokVremiaPoDniamNedelis(where Where) ([]CatalogTipySkidokNatsenokVremiaPoDniamNedeli, error) {
	type ReturnObj struct {
		Value []CatalogTipySkidokNatsenokVremiaPoDniamNedeli `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ТипыСкидокНаценок_ВремяПоДнямНедели", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogVidyKodirovokiTsepei(Key Guid) (*CatalogVidyKodirovokiTsepei, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ВидыКодировокиЦепей", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogVidyKodirovokiTsepei{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogVidyKodirovokiTsepei(Key Guid, entity interface{}) (*CatalogVidyKodirovokiTsepei, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ВидыКодировокиЦепей", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogVidyKodirovokiTsepei{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogVidyKodirovokiTsepei(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ВидыКодировокиЦепей", args)
}

func (c *Client) CreateCatalogVidyKodirovokiTsepei(data CatalogVidyKodirovokiTsepei) (*CatalogVidyKodirovokiTsepei, error) {
	raw, err := c.createEntity("Catalog_ВидыКодировокиЦепей", data)
	if err != nil {
		return nil, err
	}
	result := CatalogVidyKodirovokiTsepei{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogVidyKodirovokiTsepeis(where Where) ([]CatalogVidyKodirovokiTsepei, error) {
	type ReturnObj struct {
		Value []CatalogVidyKodirovokiTsepei `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ВидыКодировокиЦепей", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogVidyKodirovokiTsepeiElementyKodirovki(Key Guid, LineNumber Int) (*CatalogVidyKodirovokiTsepeiElementyKodirovki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_ВидыКодировокиЦепей_ЭлементыКодировки", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogVidyKodirovokiTsepeiElementyKodirovki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogVidyKodirovokiTsepeiElementyKodirovki(Key Guid, LineNumber Int, entity interface{}) (*CatalogVidyKodirovokiTsepeiElementyKodirovki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_ВидыКодировокиЦепей_ЭлементыКодировки", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogVidyKodirovokiTsepeiElementyKodirovki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogVidyKodirovokiTsepeiElementyKodirovki(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_ВидыКодировокиЦепей_ЭлементыКодировки", args)
}

func (c *Client) CreateCatalogVidyKodirovokiTsepeiElementyKodirovki(data CatalogVidyKodirovokiTsepeiElementyKodirovki) (*CatalogVidyKodirovokiTsepeiElementyKodirovki, error) {
	raw, err := c.createEntity("Catalog_ВидыКодировокиЦепей_ЭлементыКодировки", data)
	if err != nil {
		return nil, err
	}
	result := CatalogVidyKodirovokiTsepeiElementyKodirovki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogVidyKodirovokiTsepeiElementyKodirovkis(where Where) ([]CatalogVidyKodirovokiTsepeiElementyKodirovki, error) {
	type ReturnObj struct {
		Value []CatalogVidyKodirovokiTsepeiElementyKodirovki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ВидыКодировокиЦепей_ЭлементыКодировки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistv(Key Guid, LineNumber Int) (*CatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistv, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_ВидыКодировокиЦепей_СоответствиеЗначенийКодровкиЗначениямСвойств", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistv{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistv(Key Guid, LineNumber Int, entity interface{}) (*CatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistv, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_ВидыКодировокиЦепей_СоответствиеЗначенийКодровкиЗначениямСвойств", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistv{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistv(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_ВидыКодировокиЦепей_СоответствиеЗначенийКодровкиЗначениямСвойств", args)
}

func (c *Client) CreateCatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistv(data CatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistv) (*CatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistv, error) {
	raw, err := c.createEntity("Catalog_ВидыКодировокиЦепей_СоответствиеЗначенийКодровкиЗначениямСвойств", data)
	if err != nil {
		return nil, err
	}
	result := CatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistv{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistvs(where Where) ([]CatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistv, error) {
	type ReturnObj struct {
		Value []CatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistv `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ВидыКодировокиЦепей_СоответствиеЗначенийКодровкиЗначениямСвойств", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentOtchetKomitentuOProdazhakh(Key Guid) (*DocumentOtchetKomitentuOProdazhakh, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ОтчетКомитентуОПродажах", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetKomitentuOProdazhakh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentOtchetKomitentuOProdazhakh(Key Guid, entity interface{}) (*DocumentOtchetKomitentuOProdazhakh, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ОтчетКомитентуОПродажах", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetKomitentuOProdazhakh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentOtchetKomitentuOProdazhakh(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ОтчетКомитентуОПродажах", args)
}

func (c *Client) CreateDocumentOtchetKomitentuOProdazhakh(data DocumentOtchetKomitentuOProdazhakh) (*DocumentOtchetKomitentuOProdazhakh, error) {
	raw, err := c.createEntity("Document_ОтчетКомитентуОПродажах", data)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetKomitentuOProdazhakh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentOtchetKomitentuOProdazhakhs(where Where) ([]DocumentOtchetKomitentuOProdazhakh, error) {
	type ReturnObj struct {
		Value []DocumentOtchetKomitentuOProdazhakh `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетКомитентуОПродажах", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentOtchetKomitentuOProdazhakhDenezhnyeSredstva(Key Guid, LineNumber Int) (*DocumentOtchetKomitentuOProdazhakhDenezhnyeSredstva, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ОтчетКомитентуОПродажах_ДенежныеСредства", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetKomitentuOProdazhakhDenezhnyeSredstva{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentOtchetKomitentuOProdazhakhDenezhnyeSredstva(Key Guid, LineNumber Int, entity interface{}) (*DocumentOtchetKomitentuOProdazhakhDenezhnyeSredstva, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ОтчетКомитентуОПродажах_ДенежныеСредства", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetKomitentuOProdazhakhDenezhnyeSredstva{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentOtchetKomitentuOProdazhakhDenezhnyeSredstva(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ОтчетКомитентуОПродажах_ДенежныеСредства", args)
}

func (c *Client) CreateDocumentOtchetKomitentuOProdazhakhDenezhnyeSredstva(data DocumentOtchetKomitentuOProdazhakhDenezhnyeSredstva) (*DocumentOtchetKomitentuOProdazhakhDenezhnyeSredstva, error) {
	raw, err := c.createEntity("Document_ОтчетКомитентуОПродажах_ДенежныеСредства", data)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetKomitentuOProdazhakhDenezhnyeSredstva{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentOtchetKomitentuOProdazhakhDenezhnyeSredstvas(where Where) ([]DocumentOtchetKomitentuOProdazhakhDenezhnyeSredstva, error) {
	type ReturnObj struct {
		Value []DocumentOtchetKomitentuOProdazhakhDenezhnyeSredstva `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетКомитентуОПродажах_ДенежныеСредства", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentOtchetKomitentuOProdazhakhTovary(Key Guid, LineNumber Int) (*DocumentOtchetKomitentuOProdazhakhTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ОтчетКомитентуОПродажах_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetKomitentuOProdazhakhTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentOtchetKomitentuOProdazhakhTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentOtchetKomitentuOProdazhakhTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ОтчетКомитентуОПродажах_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetKomitentuOProdazhakhTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentOtchetKomitentuOProdazhakhTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ОтчетКомитентуОПродажах_Товары", args)
}

func (c *Client) CreateDocumentOtchetKomitentuOProdazhakhTovary(data DocumentOtchetKomitentuOProdazhakhTovary) (*DocumentOtchetKomitentuOProdazhakhTovary, error) {
	raw, err := c.createEntity("Document_ОтчетКомитентуОПродажах_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetKomitentuOProdazhakhTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentOtchetKomitentuOProdazhakhTovarys(where Where) ([]DocumentOtchetKomitentuOProdazhakhTovary, error) {
	type ReturnObj struct {
		Value []DocumentOtchetKomitentuOProdazhakhTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетКомитентуОПродажах_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogKassy(Key Guid) (*CatalogKassy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_Кассы", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogKassy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogKassy(Key Guid, entity interface{}) (*CatalogKassy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_Кассы", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogKassy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogKassy(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_Кассы", args)
}

func (c *Client) CreateCatalogKassy(data CatalogKassy) (*CatalogKassy, error) {
	raw, err := c.createEntity("Catalog_Кассы", data)
	if err != nil {
		return nil, err
	}
	result := CatalogKassy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogKassys(where Where) ([]CatalogKassy, error) {
	type ReturnObj struct {
		Value []CatalogKassy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Кассы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogKassiry(Key Guid) (*CatalogKassiry, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_Кассиры", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogKassiry{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogKassiry(Key Guid, entity interface{}) (*CatalogKassiry, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_Кассиры", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogKassiry{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogKassiry(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_Кассиры", args)
}

func (c *Client) CreateCatalogKassiry(data CatalogKassiry) (*CatalogKassiry, error) {
	raw, err := c.createEntity("Catalog_Кассиры", data)
	if err != nil {
		return nil, err
	}
	result := CatalogKassiry{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogKassirys(where Where) ([]CatalogKassiry, error) {
	type ReturnObj struct {
		Value []CatalogKassiry `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Кассиры", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentZaiavkaNaPereotsenkuTovarov(Key Guid) (*DocumentZaiavkaNaPereotsenkuTovarov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ЗаявкаНаПереоценкуТоваров", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentZaiavkaNaPereotsenkuTovarov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentZaiavkaNaPereotsenkuTovarov(Key Guid, entity interface{}) (*DocumentZaiavkaNaPereotsenkuTovarov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ЗаявкаНаПереоценкуТоваров", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentZaiavkaNaPereotsenkuTovarov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentZaiavkaNaPereotsenkuTovarov(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ЗаявкаНаПереоценкуТоваров", args)
}

func (c *Client) CreateDocumentZaiavkaNaPereotsenkuTovarov(data DocumentZaiavkaNaPereotsenkuTovarov) (*DocumentZaiavkaNaPereotsenkuTovarov, error) {
	raw, err := c.createEntity("Document_ЗаявкаНаПереоценкуТоваров", data)
	if err != nil {
		return nil, err
	}
	result := DocumentZaiavkaNaPereotsenkuTovarov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentZaiavkaNaPereotsenkuTovarovs(where Where) ([]DocumentZaiavkaNaPereotsenkuTovarov, error) {
	type ReturnObj struct {
		Value []DocumentZaiavkaNaPereotsenkuTovarov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗаявкаНаПереоценкуТоваров", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentZaiavkaNaPereotsenkuTovarovTovary(Key Guid, LineNumber Int) (*DocumentZaiavkaNaPereotsenkuTovarovTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ЗаявкаНаПереоценкуТоваров_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentZaiavkaNaPereotsenkuTovarovTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentZaiavkaNaPereotsenkuTovarovTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentZaiavkaNaPereotsenkuTovarovTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ЗаявкаНаПереоценкуТоваров_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentZaiavkaNaPereotsenkuTovarovTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentZaiavkaNaPereotsenkuTovarovTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ЗаявкаНаПереоценкуТоваров_Товары", args)
}

func (c *Client) CreateDocumentZaiavkaNaPereotsenkuTovarovTovary(data DocumentZaiavkaNaPereotsenkuTovarovTovary) (*DocumentZaiavkaNaPereotsenkuTovarovTovary, error) {
	raw, err := c.createEntity("Document_ЗаявкаНаПереоценкуТоваров_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentZaiavkaNaPereotsenkuTovarovTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentZaiavkaNaPereotsenkuTovarovTovarys(where Where) ([]DocumentZaiavkaNaPereotsenkuTovarovTovary, error) {
	type ReturnObj struct {
		Value []DocumentZaiavkaNaPereotsenkuTovarovTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗаявкаНаПереоценкуТоваров_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogProizvodstvennyeUchastki(Key Guid) (*CatalogProizvodstvennyeUchastki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ПроизводственныеУчастки", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogProizvodstvennyeUchastki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogProizvodstvennyeUchastki(Key Guid, entity interface{}) (*CatalogProizvodstvennyeUchastki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ПроизводственныеУчастки", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogProizvodstvennyeUchastki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogProizvodstvennyeUchastki(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ПроизводственныеУчастки", args)
}

func (c *Client) CreateCatalogProizvodstvennyeUchastki(data CatalogProizvodstvennyeUchastki) (*CatalogProizvodstvennyeUchastki, error) {
	raw, err := c.createEntity("Catalog_ПроизводственныеУчастки", data)
	if err != nil {
		return nil, err
	}
	result := CatalogProizvodstvennyeUchastki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogProizvodstvennyeUchastkis(where Where) ([]CatalogProizvodstvennyeUchastki, error) {
	type ReturnObj struct {
		Value []CatalogProizvodstvennyeUchastki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ПроизводственныеУчастки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentZakrytieZakazovKlientov(Key Guid) (*DocumentZakrytieZakazovKlientov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ЗакрытиеЗаказовКлиентов", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentZakrytieZakazovKlientov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentZakrytieZakazovKlientov(Key Guid, entity interface{}) (*DocumentZakrytieZakazovKlientov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ЗакрытиеЗаказовКлиентов", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentZakrytieZakazovKlientov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentZakrytieZakazovKlientov(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ЗакрытиеЗаказовКлиентов", args)
}

func (c *Client) CreateDocumentZakrytieZakazovKlientov(data DocumentZakrytieZakazovKlientov) (*DocumentZakrytieZakazovKlientov, error) {
	raw, err := c.createEntity("Document_ЗакрытиеЗаказовКлиентов", data)
	if err != nil {
		return nil, err
	}
	result := DocumentZakrytieZakazovKlientov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentZakrytieZakazovKlientovs(where Where) ([]DocumentZakrytieZakazovKlientov, error) {
	type ReturnObj struct {
		Value []DocumentZakrytieZakazovKlientov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗакрытиеЗаказовКлиентов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentZakrytieZakazovKlientovZakazy(Key Guid, LineNumber Int) (*DocumentZakrytieZakazovKlientovZakazy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ЗакрытиеЗаказовКлиентов_Заказы", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentZakrytieZakazovKlientovZakazy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentZakrytieZakazovKlientovZakazy(Key Guid, LineNumber Int, entity interface{}) (*DocumentZakrytieZakazovKlientovZakazy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ЗакрытиеЗаказовКлиентов_Заказы", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentZakrytieZakazovKlientovZakazy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentZakrytieZakazovKlientovZakazy(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ЗакрытиеЗаказовКлиентов_Заказы", args)
}

func (c *Client) CreateDocumentZakrytieZakazovKlientovZakazy(data DocumentZakrytieZakazovKlientovZakazy) (*DocumentZakrytieZakazovKlientovZakazy, error) {
	raw, err := c.createEntity("Document_ЗакрытиеЗаказовКлиентов_Заказы", data)
	if err != nil {
		return nil, err
	}
	result := DocumentZakrytieZakazovKlientovZakazy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentZakrytieZakazovKlientovZakazys(where Where) ([]DocumentZakrytieZakazovKlientovZakazy, error) {
	type ReturnObj struct {
		Value []DocumentZakrytieZakazovKlientovZakazy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗакрытиеЗаказовКлиентов_Заказы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogProekty(Key Guid) (*CatalogProekty, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_Проекты", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogProekty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogProekty(Key Guid, entity interface{}) (*CatalogProekty, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_Проекты", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogProekty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogProekty(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_Проекты", args)
}

func (c *Client) CreateCatalogProekty(data CatalogProekty) (*CatalogProekty, error) {
	raw, err := c.createEntity("Catalog_Проекты", data)
	if err != nil {
		return nil, err
	}
	result := CatalogProekty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogProektys(where Where) ([]CatalogProekty, error) {
	type ReturnObj struct {
		Value []CatalogProekty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Проекты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPlatezhnoePoruchenieVkhodiashchee(Key Guid) (*DocumentPlatezhnoePoruchenieVkhodiashchee, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ПлатежноеПоручениеВходящее", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnoePoruchenieVkhodiashchee{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPlatezhnoePoruchenieVkhodiashchee(Key Guid, entity interface{}) (*DocumentPlatezhnoePoruchenieVkhodiashchee, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ПлатежноеПоручениеВходящее", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnoePoruchenieVkhodiashchee{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPlatezhnoePoruchenieVkhodiashchee(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ПлатежноеПоручениеВходящее", args)
}

func (c *Client) CreateDocumentPlatezhnoePoruchenieVkhodiashchee(data DocumentPlatezhnoePoruchenieVkhodiashchee) (*DocumentPlatezhnoePoruchenieVkhodiashchee, error) {
	raw, err := c.createEntity("Document_ПлатежноеПоручениеВходящее", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnoePoruchenieVkhodiashchee{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPlatezhnoePoruchenieVkhodiashchees(where Where) ([]DocumentPlatezhnoePoruchenieVkhodiashchee, error) {
	type ReturnObj struct {
		Value []DocumentPlatezhnoePoruchenieVkhodiashchee `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПлатежноеПоручениеВходящее", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezha(Key Guid, LineNumber Int) (*DocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezha, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ПлатежноеПоручениеВходящее_РасшифровкаПлатежа", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezha(Key Guid, LineNumber Int, entity interface{}) (*DocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezha, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ПлатежноеПоручениеВходящее_РасшифровкаПлатежа", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezha(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ПлатежноеПоручениеВходящее_РасшифровкаПлатежа", args)
}

func (c *Client) CreateDocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezha(data DocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezha) (*DocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezha, error) {
	raw, err := c.createEntity("Document_ПлатежноеПоручениеВходящее_РасшифровкаПлатежа", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezhas(where Where) ([]DocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezha, error) {
	type ReturnObj struct {
		Value []DocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezha `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПлатежноеПоручениеВходящее_РасшифровкаПлатежа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragenta(Key Guid, LineNumber Int) (*DocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragenta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ПлатежноеПоручениеВходящее_РеквизитыКонтрагента", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragenta(Key Guid, LineNumber Int, entity interface{}) (*DocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragenta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ПлатежноеПоручениеВходящее_РеквизитыКонтрагента", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragenta(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ПлатежноеПоручениеВходящее_РеквизитыКонтрагента", args)
}

func (c *Client) CreateDocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragenta(data DocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragenta) (*DocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragenta, error) {
	raw, err := c.createEntity("Document_ПлатежноеПоручениеВходящее_РеквизитыКонтрагента", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragentas(where Where) ([]DocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragenta, error) {
	type ReturnObj struct {
		Value []DocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragenta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПлатежноеПоручениеВходящее_РеквизитыКонтрагента", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentVydachaZakaza(Key Guid) (*DocumentVydachaZakaza, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ВыдачаЗаказа", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentVydachaZakaza{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentVydachaZakaza(Key Guid, entity interface{}) (*DocumentVydachaZakaza, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ВыдачаЗаказа", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentVydachaZakaza{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentVydachaZakaza(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ВыдачаЗаказа", args)
}

func (c *Client) CreateDocumentVydachaZakaza(data DocumentVydachaZakaza) (*DocumentVydachaZakaza, error) {
	raw, err := c.createEntity("Document_ВыдачаЗаказа", data)
	if err != nil {
		return nil, err
	}
	result := DocumentVydachaZakaza{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentVydachaZakazas(where Where) ([]DocumentVydachaZakaza, error) {
	type ReturnObj struct {
		Value []DocumentVydachaZakaza `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВыдачаЗаказа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogFormyOgranki(Key Guid) (*CatalogFormyOgranki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ФормыОгранки", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogFormyOgranki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogFormyOgranki(Key Guid, entity interface{}) (*CatalogFormyOgranki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ФормыОгранки", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogFormyOgranki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogFormyOgranki(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ФормыОгранки", args)
}

func (c *Client) CreateCatalogFormyOgranki(data CatalogFormyOgranki) (*CatalogFormyOgranki, error) {
	raw, err := c.createEntity("Catalog_ФормыОгранки", data)
	if err != nil {
		return nil, err
	}
	result := CatalogFormyOgranki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogFormyOgrankis(where Where) ([]CatalogFormyOgranki, error) {
	type ReturnObj struct {
		Value []CatalogFormyOgranki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ФормыОгранки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogFormatyMagazinov(Key Guid) (*CatalogFormatyMagazinov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ФорматыМагазинов", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogFormatyMagazinov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogFormatyMagazinov(Key Guid, entity interface{}) (*CatalogFormatyMagazinov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ФорматыМагазинов", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogFormatyMagazinov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogFormatyMagazinov(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ФорматыМагазинов", args)
}

func (c *Client) CreateCatalogFormatyMagazinov(data CatalogFormatyMagazinov) (*CatalogFormatyMagazinov, error) {
	raw, err := c.createEntity("Catalog_ФорматыМагазинов", data)
	if err != nil {
		return nil, err
	}
	result := CatalogFormatyMagazinov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogFormatyMagazinovs(where Where) ([]CatalogFormatyMagazinov, error) {
	type ReturnObj struct {
		Value []CatalogFormatyMagazinov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ФорматыМагазинов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogRabochieMesta(Key Guid) (*CatalogRabochieMesta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_РабочиеМеста", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogRabochieMesta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogRabochieMesta(Key Guid, entity interface{}) (*CatalogRabochieMesta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_РабочиеМеста", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogRabochieMesta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogRabochieMesta(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_РабочиеМеста", args)
}

func (c *Client) CreateCatalogRabochieMesta(data CatalogRabochieMesta) (*CatalogRabochieMesta, error) {
	raw, err := c.createEntity("Catalog_РабочиеМеста", data)
	if err != nil {
		return nil, err
	}
	result := CatalogRabochieMesta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogRabochieMestas(where Where) ([]CatalogRabochieMesta, error) {
	type ReturnObj struct {
		Value []CatalogRabochieMesta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_РабочиеМеста", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogNastroikiVypolneniiaObmena(Key Guid) (*CatalogNastroikiVypolneniiaObmena, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_НастройкиВыполненияОбмена", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiVypolneniiaObmena{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogNastroikiVypolneniiaObmena(Key Guid, entity interface{}) (*CatalogNastroikiVypolneniiaObmena, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_НастройкиВыполненияОбмена", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiVypolneniiaObmena{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogNastroikiVypolneniiaObmena(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_НастройкиВыполненияОбмена", args)
}

func (c *Client) CreateCatalogNastroikiVypolneniiaObmena(data CatalogNastroikiVypolneniiaObmena) (*CatalogNastroikiVypolneniiaObmena, error) {
	raw, err := c.createEntity("Catalog_НастройкиВыполненияОбмена", data)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiVypolneniiaObmena{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogNastroikiVypolneniiaObmenas(where Where) ([]CatalogNastroikiVypolneniiaObmena, error) {
	type ReturnObj struct {
		Value []CatalogNastroikiVypolneniiaObmena `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкиВыполненияОбмена", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogNastroikiVypolneniiaObmenaNastroikiObmena(Key Guid, LineNumber Int) (*CatalogNastroikiVypolneniiaObmenaNastroikiObmena, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_НастройкиВыполненияОбмена_НастройкиОбмена", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiVypolneniiaObmenaNastroikiObmena{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogNastroikiVypolneniiaObmenaNastroikiObmena(Key Guid, LineNumber Int, entity interface{}) (*CatalogNastroikiVypolneniiaObmenaNastroikiObmena, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_НастройкиВыполненияОбмена_НастройкиОбмена", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiVypolneniiaObmenaNastroikiObmena{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogNastroikiVypolneniiaObmenaNastroikiObmena(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_НастройкиВыполненияОбмена_НастройкиОбмена", args)
}

func (c *Client) CreateCatalogNastroikiVypolneniiaObmenaNastroikiObmena(data CatalogNastroikiVypolneniiaObmenaNastroikiObmena) (*CatalogNastroikiVypolneniiaObmenaNastroikiObmena, error) {
	raw, err := c.createEntity("Catalog_НастройкиВыполненияОбмена_НастройкиОбмена", data)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiVypolneniiaObmenaNastroikiObmena{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogNastroikiVypolneniiaObmenaNastroikiObmenas(where Where) ([]CatalogNastroikiVypolneniiaObmenaNastroikiObmena, error) {
	type ReturnObj struct {
		Value []CatalogNastroikiVypolneniiaObmenaNastroikiObmena `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкиВыполненияОбмена_НастройкиОбмена", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkami(Key Guid, LineNumber Int) (*CatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkami, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_НастройкиВыполненияОбмена_СообщенияНеЯвляющиесяОшибками", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkami{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkami(Key Guid, LineNumber Int, entity interface{}) (*CatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkami, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_НастройкиВыполненияОбмена_СообщенияНеЯвляющиесяОшибками", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkami{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkami(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_НастройкиВыполненияОбмена_СообщенияНеЯвляющиесяОшибками", args)
}

func (c *Client) CreateCatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkami(data CatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkami) (*CatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkami, error) {
	raw, err := c.createEntity("Catalog_НастройкиВыполненияОбмена_СообщенияНеЯвляющиесяОшибками", data)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkami{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkamis(where Where) ([]CatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkami, error) {
	type ReturnObj struct {
		Value []CatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkami `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкиВыполненияОбмена_СообщенияНеЯвляющиесяОшибками", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogZnacheniiaSvoistvObieektov(Key Guid) (*CatalogZnacheniiaSvoistvObieektov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ЗначенияСвойствОбъектов", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogZnacheniiaSvoistvObieektov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogZnacheniiaSvoistvObieektov(Key Guid, entity interface{}) (*CatalogZnacheniiaSvoistvObieektov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ЗначенияСвойствОбъектов", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogZnacheniiaSvoistvObieektov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogZnacheniiaSvoistvObieektov(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ЗначенияСвойствОбъектов", args)
}

func (c *Client) CreateCatalogZnacheniiaSvoistvObieektov(data CatalogZnacheniiaSvoistvObieektov) (*CatalogZnacheniiaSvoistvObieektov, error) {
	raw, err := c.createEntity("Catalog_ЗначенияСвойствОбъектов", data)
	if err != nil {
		return nil, err
	}
	result := CatalogZnacheniiaSvoistvObieektov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogZnacheniiaSvoistvObieektovs(where Where) ([]CatalogZnacheniiaSvoistvObieektov, error) {
	type ReturnObj struct {
		Value []CatalogZnacheniiaSvoistvObieektov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ЗначенияСвойствОбъектов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentRealizatsiiaTovarovUslug(Key Guid) (*DocumentRealizatsiiaTovarovUslug, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_РеализацияТоваровУслуг", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentRealizatsiiaTovarovUslug{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentRealizatsiiaTovarovUslug(Key Guid, entity interface{}) (*DocumentRealizatsiiaTovarovUslug, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_РеализацияТоваровУслуг", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentRealizatsiiaTovarovUslug{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentRealizatsiiaTovarovUslug(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_РеализацияТоваровУслуг", args)
}

func (c *Client) CreateDocumentRealizatsiiaTovarovUslug(data DocumentRealizatsiiaTovarovUslug) (*DocumentRealizatsiiaTovarovUslug, error) {
	raw, err := c.createEntity("Document_РеализацияТоваровУслуг", data)
	if err != nil {
		return nil, err
	}
	result := DocumentRealizatsiiaTovarovUslug{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentRealizatsiiaTovarovUslugs(where Where) ([]DocumentRealizatsiiaTovarovUslug, error) {
	type ReturnObj struct {
		Value []DocumentRealizatsiiaTovarovUslug `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_РеализацияТоваровУслуг", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentRealizatsiiaTovarovUslugTovary(Key Guid, LineNumber Int) (*DocumentRealizatsiiaTovarovUslugTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_РеализацияТоваровУслуг_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentRealizatsiiaTovarovUslugTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentRealizatsiiaTovarovUslugTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentRealizatsiiaTovarovUslugTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_РеализацияТоваровУслуг_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentRealizatsiiaTovarovUslugTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentRealizatsiiaTovarovUslugTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_РеализацияТоваровУслуг_Товары", args)
}

func (c *Client) CreateDocumentRealizatsiiaTovarovUslugTovary(data DocumentRealizatsiiaTovarovUslugTovary) (*DocumentRealizatsiiaTovarovUslugTovary, error) {
	raw, err := c.createEntity("Document_РеализацияТоваровУслуг_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentRealizatsiiaTovarovUslugTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentRealizatsiiaTovarovUslugTovarys(where Where) ([]DocumentRealizatsiiaTovarovUslugTovary, error) {
	type ReturnObj struct {
		Value []DocumentRealizatsiiaTovarovUslugTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_РеализацияТоваровУслуг_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentRealizatsiiaTovarovUslugUslugi(Key Guid, LineNumber Int) (*DocumentRealizatsiiaTovarovUslugUslugi, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_РеализацияТоваровУслуг_Услуги", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentRealizatsiiaTovarovUslugUslugi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentRealizatsiiaTovarovUslugUslugi(Key Guid, LineNumber Int, entity interface{}) (*DocumentRealizatsiiaTovarovUslugUslugi, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_РеализацияТоваровУслуг_Услуги", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentRealizatsiiaTovarovUslugUslugi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentRealizatsiiaTovarovUslugUslugi(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_РеализацияТоваровУслуг_Услуги", args)
}

func (c *Client) CreateDocumentRealizatsiiaTovarovUslugUslugi(data DocumentRealizatsiiaTovarovUslugUslugi) (*DocumentRealizatsiiaTovarovUslugUslugi, error) {
	raw, err := c.createEntity("Document_РеализацияТоваровУслуг_Услуги", data)
	if err != nil {
		return nil, err
	}
	result := DocumentRealizatsiiaTovarovUslugUslugi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentRealizatsiiaTovarovUslugUslugis(where Where) ([]DocumentRealizatsiiaTovarovUslugUslugi, error) {
	type ReturnObj struct {
		Value []DocumentRealizatsiiaTovarovUslugUslugi `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_РеализацияТоваровУслуг_Услуги", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentSobytie(Key Guid) (*DocumentSobytie, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_Событие", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentSobytie{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentSobytie(Key Guid, entity interface{}) (*DocumentSobytie, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_Событие", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentSobytie{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentSobytie(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_Событие", args)
}

func (c *Client) CreateDocumentSobytie(data DocumentSobytie) (*DocumentSobytie, error) {
	raw, err := c.createEntity("Document_Событие", data)
	if err != nil {
		return nil, err
	}
	result := DocumentSobytie{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentSobyties(where Where) ([]DocumentSobytie, error) {
	type ReturnObj struct {
		Value []DocumentSobytie `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_Событие", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentSobytieStoronnieLitsa(Key Guid, LineNumber Int) (*DocumentSobytieStoronnieLitsa, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_Событие_СторонниеЛица", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentSobytieStoronnieLitsa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentSobytieStoronnieLitsa(Key Guid, LineNumber Int, entity interface{}) (*DocumentSobytieStoronnieLitsa, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_Событие_СторонниеЛица", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentSobytieStoronnieLitsa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentSobytieStoronnieLitsa(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_Событие_СторонниеЛица", args)
}

func (c *Client) CreateDocumentSobytieStoronnieLitsa(data DocumentSobytieStoronnieLitsa) (*DocumentSobytieStoronnieLitsa, error) {
	raw, err := c.createEntity("Document_Событие_СторонниеЛица", data)
	if err != nil {
		return nil, err
	}
	result := DocumentSobytieStoronnieLitsa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentSobytieStoronnieLitsas(where Where) ([]DocumentSobytieStoronnieLitsa, error) {
	type ReturnObj struct {
		Value []DocumentSobytieStoronnieLitsa `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_Событие_СторонниеЛица", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogVariantyOtvetovOprosov(Key Guid) (*CatalogVariantyOtvetovOprosov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ВариантыОтветовОпросов", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogVariantyOtvetovOprosov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogVariantyOtvetovOprosov(Key Guid, entity interface{}) (*CatalogVariantyOtvetovOprosov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ВариантыОтветовОпросов", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogVariantyOtvetovOprosov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogVariantyOtvetovOprosov(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ВариантыОтветовОпросов", args)
}

func (c *Client) CreateCatalogVariantyOtvetovOprosov(data CatalogVariantyOtvetovOprosov) (*CatalogVariantyOtvetovOprosov, error) {
	raw, err := c.createEntity("Catalog_ВариантыОтветовОпросов", data)
	if err != nil {
		return nil, err
	}
	result := CatalogVariantyOtvetovOprosov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogVariantyOtvetovOprosovs(where Where) ([]CatalogVariantyOtvetovOprosov, error) {
	type ReturnObj struct {
		Value []CatalogVariantyOtvetovOprosov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ВариантыОтветовОпросов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogGruppyPisemElektronnoiPochty(Key Guid) (*CatalogGruppyPisemElektronnoiPochty, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ГруппыПисемЭлектроннойПочты", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogGruppyPisemElektronnoiPochty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogGruppyPisemElektronnoiPochty(Key Guid, entity interface{}) (*CatalogGruppyPisemElektronnoiPochty, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ГруппыПисемЭлектроннойПочты", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogGruppyPisemElektronnoiPochty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogGruppyPisemElektronnoiPochty(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ГруппыПисемЭлектроннойПочты", args)
}

func (c *Client) CreateCatalogGruppyPisemElektronnoiPochty(data CatalogGruppyPisemElektronnoiPochty) (*CatalogGruppyPisemElektronnoiPochty, error) {
	raw, err := c.createEntity("Catalog_ГруппыПисемЭлектроннойПочты", data)
	if err != nil {
		return nil, err
	}
	result := CatalogGruppyPisemElektronnoiPochty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogGruppyPisemElektronnoiPochtys(where Where) ([]CatalogGruppyPisemElektronnoiPochty, error) {
	type ReturnObj struct {
		Value []CatalogGruppyPisemElektronnoiPochty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ГруппыПисемЭлектроннойПочты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogGruppyPochtovoiRassylki(Key Guid) (*CatalogGruppyPochtovoiRassylki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ГруппыПочтовойРассылки", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogGruppyPochtovoiRassylki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogGruppyPochtovoiRassylki(Key Guid, entity interface{}) (*CatalogGruppyPochtovoiRassylki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ГруппыПочтовойРассылки", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogGruppyPochtovoiRassylki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogGruppyPochtovoiRassylki(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ГруппыПочтовойРассылки", args)
}

func (c *Client) CreateCatalogGruppyPochtovoiRassylki(data CatalogGruppyPochtovoiRassylki) (*CatalogGruppyPochtovoiRassylki, error) {
	raw, err := c.createEntity("Catalog_ГруппыПочтовойРассылки", data)
	if err != nil {
		return nil, err
	}
	result := CatalogGruppyPochtovoiRassylki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogGruppyPochtovoiRassylkis(where Where) ([]CatalogGruppyPochtovoiRassylki, error) {
	type ReturnObj struct {
		Value []CatalogGruppyPochtovoiRassylki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ГруппыПочтовойРассылки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogNastroikiOtchetov(Key Guid) (*CatalogNastroikiOtchetov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_НастройкиОтчетов", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiOtchetov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogNastroikiOtchetov(Key Guid, entity interface{}) (*CatalogNastroikiOtchetov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_НастройкиОтчетов", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiOtchetov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogNastroikiOtchetov(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_НастройкиОтчетов", args)
}

func (c *Client) CreateCatalogNastroikiOtchetov(data CatalogNastroikiOtchetov) (*CatalogNastroikiOtchetov, error) {
	raw, err := c.createEntity("Catalog_НастройкиОтчетов", data)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiOtchetov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogNastroikiOtchetovs(where Where) ([]CatalogNastroikiOtchetov, error) {
	type ReturnObj struct {
		Value []CatalogNastroikiOtchetov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкиОтчетов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogNastroikiOtchetovGruppyNastroekIPolzovateli(Key Guid, LineNumber Int) (*CatalogNastroikiOtchetovGruppyNastroekIPolzovateli, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_НастройкиОтчетов_ГруппыНастроекИПользователи", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiOtchetovGruppyNastroekIPolzovateli{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogNastroikiOtchetovGruppyNastroekIPolzovateli(Key Guid, LineNumber Int, entity interface{}) (*CatalogNastroikiOtchetovGruppyNastroekIPolzovateli, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_НастройкиОтчетов_ГруппыНастроекИПользователи", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiOtchetovGruppyNastroekIPolzovateli{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogNastroikiOtchetovGruppyNastroekIPolzovateli(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_НастройкиОтчетов_ГруппыНастроекИПользователи", args)
}

func (c *Client) CreateCatalogNastroikiOtchetovGruppyNastroekIPolzovateli(data CatalogNastroikiOtchetovGruppyNastroekIPolzovateli) (*CatalogNastroikiOtchetovGruppyNastroekIPolzovateli, error) {
	raw, err := c.createEntity("Catalog_НастройкиОтчетов_ГруппыНастроекИПользователи", data)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiOtchetovGruppyNastroekIPolzovateli{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogNastroikiOtchetovGruppyNastroekIPolzovatelis(where Where) ([]CatalogNastroikiOtchetovGruppyNastroekIPolzovateli, error) {
	type ReturnObj struct {
		Value []CatalogNastroikiOtchetovGruppyNastroekIPolzovateli `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкиОтчетов_ГруппыНастроекИПользователи", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartam(Key Guid) (*CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartam, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_СхемыНакопительныхСкидокПоДисконтнымКартам", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartam{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartam(Key Guid, entity interface{}) (*CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartam, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_СхемыНакопительныхСкидокПоДисконтнымКартам", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartam{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartam(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_СхемыНакопительныхСкидокПоДисконтнымКартам", args)
}

func (c *Client) CreateCatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartam(data CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartam) (*CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartam, error) {
	raw, err := c.createEntity("Catalog_СхемыНакопительныхСкидокПоДисконтнымКартам", data)
	if err != nil {
		return nil, err
	}
	result := CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartam{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartams(where Where) ([]CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartam, error) {
	type ReturnObj struct {
		Value []CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartam `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_СхемыНакопительныхСкидокПоДисконтнымКартам", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidki(Key Guid, LineNumber Int) (*CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_СхемыНакопительныхСкидокПоДисконтнымКартам_Скидки", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidki(Key Guid, LineNumber Int, entity interface{}) (*CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_СхемыНакопительныхСкидокПоДисконтнымКартам_Скидки", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidki(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_СхемыНакопительныхСкидокПоДисконтнымКартам_Скидки", args)
}

func (c *Client) CreateCatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidki(data CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidki) (*CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidki, error) {
	raw, err := c.createEntity("Catalog_СхемыНакопительныхСкидокПоДисконтнымКартам_Скидки", data)
	if err != nil {
		return nil, err
	}
	result := CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidkis(where Where) ([]CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidki, error) {
	type ReturnObj struct {
		Value []CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_СхемыНакопительныхСкидокПоДисконтнымКартам_Скидки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) Department(Key Guid) (*Department, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_Склады", args, []string{})
	if err != nil {
		return nil, err
	}
	result := Department{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDepartment(Key Guid, entity interface{}) (*Department, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_Склады", args, entity)
	if err != nil {
		return nil, err
	}
	result := Department{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDepartment(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_Склады", args)
}

func (c *Client) CreateDepartment(data Department) (*Department, error) {
	raw, err := c.createEntity("Catalog_Склады", data)
	if err != nil {
		return nil, err
	}
	result := Department{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) Departments(where Where) ([]Department, error) {
	type ReturnObj struct {
		Value []Department `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Склады", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogKodyVidovTovarov(Key Guid) (*CatalogKodyVidovTovarov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_КодыВидовТоваров", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogKodyVidovTovarov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogKodyVidovTovarov(Key Guid, entity interface{}) (*CatalogKodyVidovTovarov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_КодыВидовТоваров", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogKodyVidovTovarov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogKodyVidovTovarov(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_КодыВидовТоваров", args)
}

func (c *Client) CreateCatalogKodyVidovTovarov(data CatalogKodyVidovTovarov) (*CatalogKodyVidovTovarov, error) {
	raw, err := c.createEntity("Catalog_КодыВидовТоваров", data)
	if err != nil {
		return nil, err
	}
	result := CatalogKodyVidovTovarov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogKodyVidovTovarovs(where Where) ([]CatalogKodyVidovTovarov, error) {
	type ReturnObj struct {
		Value []CatalogKodyVidovTovarov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_КодыВидовТоваров", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogRassevy(Key Guid) (*CatalogRassevy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_Рассевы", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogRassevy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogRassevy(Key Guid, entity interface{}) (*CatalogRassevy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_Рассевы", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogRassevy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogRassevy(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_Рассевы", args)
}

func (c *Client) CreateCatalogRassevy(data CatalogRassevy) (*CatalogRassevy, error) {
	raw, err := c.createEntity("Catalog_Рассевы", data)
	if err != nil {
		return nil, err
	}
	result := CatalogRassevy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogRassevys(where Where) ([]CatalogRassevy, error) {
	type ReturnObj struct {
		Value []CatalogRassevy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Рассевы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogPrichinyZakrytiiaZakazov(Key Guid) (*CatalogPrichinyZakrytiiaZakazov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ПричиныЗакрытияЗаказов", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogPrichinyZakrytiiaZakazov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogPrichinyZakrytiiaZakazov(Key Guid, entity interface{}) (*CatalogPrichinyZakrytiiaZakazov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ПричиныЗакрытияЗаказов", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogPrichinyZakrytiiaZakazov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogPrichinyZakrytiiaZakazov(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ПричиныЗакрытияЗаказов", args)
}

func (c *Client) CreateCatalogPrichinyZakrytiiaZakazov(data CatalogPrichinyZakrytiiaZakazov) (*CatalogPrichinyZakrytiiaZakazov, error) {
	raw, err := c.createEntity("Catalog_ПричиныЗакрытияЗаказов", data)
	if err != nil {
		return nil, err
	}
	result := CatalogPrichinyZakrytiiaZakazov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogPrichinyZakrytiiaZakazovs(where Where) ([]CatalogPrichinyZakrytiiaZakazov, error) {
	type ReturnObj struct {
		Value []CatalogPrichinyZakrytiiaZakazov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ПричиныЗакрытияЗаказов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogSegmentyNomenklatury(Key Guid) (*CatalogSegmentyNomenklatury, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_СегментыНоменклатуры", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogSegmentyNomenklatury{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogSegmentyNomenklatury(Key Guid, entity interface{}) (*CatalogSegmentyNomenklatury, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_СегментыНоменклатуры", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogSegmentyNomenklatury{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogSegmentyNomenklatury(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_СегментыНоменклатуры", args)
}

func (c *Client) CreateCatalogSegmentyNomenklatury(data CatalogSegmentyNomenklatury) (*CatalogSegmentyNomenklatury, error) {
	raw, err := c.createEntity("Catalog_СегментыНоменклатуры", data)
	if err != nil {
		return nil, err
	}
	result := CatalogSegmentyNomenklatury{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogSegmentyNomenklaturys(where Where) ([]CatalogSegmentyNomenklatury, error) {
	type ReturnObj struct {
		Value []CatalogSegmentyNomenklatury `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_СегментыНоменклатуры", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogSostavStrokiCheka(Key Guid) (*CatalogSostavStrokiCheka, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_СоставСтрокиЧека", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogSostavStrokiCheka{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogSostavStrokiCheka(Key Guid, entity interface{}) (*CatalogSostavStrokiCheka, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_СоставСтрокиЧека", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogSostavStrokiCheka{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogSostavStrokiCheka(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_СоставСтрокиЧека", args)
}

func (c *Client) CreateCatalogSostavStrokiCheka(data CatalogSostavStrokiCheka) (*CatalogSostavStrokiCheka, error) {
	raw, err := c.createEntity("Catalog_СоставСтрокиЧека", data)
	if err != nil {
		return nil, err
	}
	result := CatalogSostavStrokiCheka{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogSostavStrokiChekas(where Where) ([]CatalogSostavStrokiCheka, error) {
	type ReturnObj struct {
		Value []CatalogSostavStrokiCheka `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_СоставСтрокиЧека", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogUsloviiaPriemaIzdeliiNaKomissiiu(Key Guid) (*CatalogUsloviiaPriemaIzdeliiNaKomissiiu, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_УсловияПриемаИзделийНаКомиссию", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogUsloviiaPriemaIzdeliiNaKomissiiu{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogUsloviiaPriemaIzdeliiNaKomissiiu(Key Guid, entity interface{}) (*CatalogUsloviiaPriemaIzdeliiNaKomissiiu, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_УсловияПриемаИзделийНаКомиссию", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogUsloviiaPriemaIzdeliiNaKomissiiu{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogUsloviiaPriemaIzdeliiNaKomissiiu(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_УсловияПриемаИзделийНаКомиссию", args)
}

func (c *Client) CreateCatalogUsloviiaPriemaIzdeliiNaKomissiiu(data CatalogUsloviiaPriemaIzdeliiNaKomissiiu) (*CatalogUsloviiaPriemaIzdeliiNaKomissiiu, error) {
	raw, err := c.createEntity("Catalog_УсловияПриемаИзделийНаКомиссию", data)
	if err != nil {
		return nil, err
	}
	result := CatalogUsloviiaPriemaIzdeliiNaKomissiiu{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogUsloviiaPriemaIzdeliiNaKomissiius(where Where) ([]CatalogUsloviiaPriemaIzdeliiNaKomissiiu, error) {
	type ReturnObj struct {
		Value []CatalogUsloviiaPriemaIzdeliiNaKomissiiu `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_УсловияПриемаИзделийНаКомиссию", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenok(Key Guid, LineNumber Int) (*CatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenok, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_УсловияПриемаИзделийНаКомиссию_ГрафикУценок", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenok{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenok(Key Guid, LineNumber Int, entity interface{}) (*CatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenok, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_УсловияПриемаИзделийНаКомиссию_ГрафикУценок", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenok{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenok(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_УсловияПриемаИзделийНаКомиссию_ГрафикУценок", args)
}

func (c *Client) CreateCatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenok(data CatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenok) (*CatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenok, error) {
	raw, err := c.createEntity("Catalog_УсловияПриемаИзделийНаКомиссию_ГрафикУценок", data)
	if err != nil {
		return nil, err
	}
	result := CatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenok{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenoks(where Where) ([]CatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenok, error) {
	type ReturnObj struct {
		Value []CatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenok `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_УсловияПриемаИзделийНаКомиссию_ГрафикУценок", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogIstochnikiInformatsiiPriObrashcheniiPokupatelei(Key Guid) (*CatalogIstochnikiInformatsiiPriObrashcheniiPokupatelei, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ИсточникиИнформацииПриОбращенииПокупателей", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogIstochnikiInformatsiiPriObrashcheniiPokupatelei{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogIstochnikiInformatsiiPriObrashcheniiPokupatelei(Key Guid, entity interface{}) (*CatalogIstochnikiInformatsiiPriObrashcheniiPokupatelei, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ИсточникиИнформацииПриОбращенииПокупателей", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogIstochnikiInformatsiiPriObrashcheniiPokupatelei{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogIstochnikiInformatsiiPriObrashcheniiPokupatelei(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ИсточникиИнформацииПриОбращенииПокупателей", args)
}

func (c *Client) CreateCatalogIstochnikiInformatsiiPriObrashcheniiPokupatelei(data CatalogIstochnikiInformatsiiPriObrashcheniiPokupatelei) (*CatalogIstochnikiInformatsiiPriObrashcheniiPokupatelei, error) {
	raw, err := c.createEntity("Catalog_ИсточникиИнформацииПриОбращенииПокупателей", data)
	if err != nil {
		return nil, err
	}
	result := CatalogIstochnikiInformatsiiPriObrashcheniiPokupatelei{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogIstochnikiInformatsiiPriObrashcheniiPokupateleis(where Where) ([]CatalogIstochnikiInformatsiiPriObrashcheniiPokupatelei, error) {
	type ReturnObj struct {
		Value []CatalogIstochnikiInformatsiiPriObrashcheniiPokupatelei `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ИсточникиИнформацииПриОбращенииПокупателей", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentKorrektirovkaDolga(Key Guid) (*DocumentKorrektirovkaDolga, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_КорректировкаДолга", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentKorrektirovkaDolga{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentKorrektirovkaDolga(Key Guid, entity interface{}) (*DocumentKorrektirovkaDolga, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_КорректировкаДолга", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentKorrektirovkaDolga{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentKorrektirovkaDolga(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_КорректировкаДолга", args)
}

func (c *Client) CreateDocumentKorrektirovkaDolga(data DocumentKorrektirovkaDolga) (*DocumentKorrektirovkaDolga, error) {
	raw, err := c.createEntity("Document_КорректировкаДолга", data)
	if err != nil {
		return nil, err
	}
	result := DocumentKorrektirovkaDolga{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentKorrektirovkaDolgas(where Where) ([]DocumentKorrektirovkaDolga, error) {
	type ReturnObj struct {
		Value []DocumentKorrektirovkaDolga `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_КорректировкаДолга", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentKorrektirovkaDolgaSummyDolga(Key Guid, LineNumber Int) (*DocumentKorrektirovkaDolgaSummyDolga, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_КорректировкаДолга_СуммыДолга", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentKorrektirovkaDolgaSummyDolga{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentKorrektirovkaDolgaSummyDolga(Key Guid, LineNumber Int, entity interface{}) (*DocumentKorrektirovkaDolgaSummyDolga, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_КорректировкаДолга_СуммыДолга", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentKorrektirovkaDolgaSummyDolga{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentKorrektirovkaDolgaSummyDolga(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_КорректировкаДолга_СуммыДолга", args)
}

func (c *Client) CreateDocumentKorrektirovkaDolgaSummyDolga(data DocumentKorrektirovkaDolgaSummyDolga) (*DocumentKorrektirovkaDolgaSummyDolga, error) {
	raw, err := c.createEntity("Document_КорректировкаДолга_СуммыДолга", data)
	if err != nil {
		return nil, err
	}
	result := DocumentKorrektirovkaDolgaSummyDolga{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentKorrektirovkaDolgaSummyDolgas(where Where) ([]DocumentKorrektirovkaDolgaSummyDolga, error) {
	type ReturnObj struct {
		Value []DocumentKorrektirovkaDolgaSummyDolga `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_КорректировкаДолга_СуммыДолга", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) PayType(Key Guid) (*PayType, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ВидыОплатЧекаККМ", args, []string{})
	if err != nil {
		return nil, err
	}
	result := PayType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdatePayType(Key Guid, entity interface{}) (*PayType, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ВидыОплатЧекаККМ", args, entity)
	if err != nil {
		return nil, err
	}
	result := PayType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemovePayType(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ВидыОплатЧекаККМ", args)
}

func (c *Client) CreatePayType(data PayType) (*PayType, error) {
	raw, err := c.createEntity("Catalog_ВидыОплатЧекаККМ", data)
	if err != nil {
		return nil, err
	}
	result := PayType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) PayTypes(where Where) ([]PayType, error) {
	type ReturnObj struct {
		Value []PayType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ВидыОплатЧекаККМ", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogKhranilishcheShablonov(Key Guid) (*CatalogKhranilishcheShablonov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ХранилищеШаблонов", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogKhranilishcheShablonov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogKhranilishcheShablonov(Key Guid, entity interface{}) (*CatalogKhranilishcheShablonov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ХранилищеШаблонов", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogKhranilishcheShablonov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogKhranilishcheShablonov(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ХранилищеШаблонов", args)
}

func (c *Client) CreateCatalogKhranilishcheShablonov(data CatalogKhranilishcheShablonov) (*CatalogKhranilishcheShablonov, error) {
	raw, err := c.createEntity("Catalog_ХранилищеШаблонов", data)
	if err != nil {
		return nil, err
	}
	result := CatalogKhranilishcheShablonov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogKhranilishcheShablonovs(where Where) ([]CatalogKhranilishcheShablonov, error) {
	type ReturnObj struct {
		Value []CatalogKhranilishcheShablonov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ХранилищеШаблонов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentZaiavkaNaRaskhodovanieSredstv(Key Guid) (*DocumentZaiavkaNaRaskhodovanieSredstv, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ЗаявкаНаРасходованиеСредств", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentZaiavkaNaRaskhodovanieSredstv{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentZaiavkaNaRaskhodovanieSredstv(Key Guid, entity interface{}) (*DocumentZaiavkaNaRaskhodovanieSredstv, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ЗаявкаНаРасходованиеСредств", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentZaiavkaNaRaskhodovanieSredstv{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentZaiavkaNaRaskhodovanieSredstv(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ЗаявкаНаРасходованиеСредств", args)
}

func (c *Client) CreateDocumentZaiavkaNaRaskhodovanieSredstv(data DocumentZaiavkaNaRaskhodovanieSredstv) (*DocumentZaiavkaNaRaskhodovanieSredstv, error) {
	raw, err := c.createEntity("Document_ЗаявкаНаРасходованиеСредств", data)
	if err != nil {
		return nil, err
	}
	result := DocumentZaiavkaNaRaskhodovanieSredstv{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentZaiavkaNaRaskhodovanieSredstvs(where Where) ([]DocumentZaiavkaNaRaskhodovanieSredstv, error) {
	type ReturnObj struct {
		Value []DocumentZaiavkaNaRaskhodovanieSredstv `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗаявкаНаРасходованиеСредств", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezha(Key Guid, LineNumber Int) (*DocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezha, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ЗаявкаНаРасходованиеСредств_РасшифровкаПлатежа", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezha(Key Guid, LineNumber Int, entity interface{}) (*DocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezha, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ЗаявкаНаРасходованиеСредств_РасшифровкаПлатежа", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezha(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ЗаявкаНаРасходованиеСредств_РасшифровкаПлатежа", args)
}

func (c *Client) CreateDocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezha(data DocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezha) (*DocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezha, error) {
	raw, err := c.createEntity("Document_ЗаявкаНаРасходованиеСредств_РасшифровкаПлатежа", data)
	if err != nil {
		return nil, err
	}
	result := DocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezhas(where Where) ([]DocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezha, error) {
	type ReturnObj struct {
		Value []DocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezha `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗаявкаНаРасходованиеСредств_РасшифровкаПлатежа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavki(Key Guid, LineNumber Int) (*DocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ЗаявкаНаРасходованиеСредств_РазмещениеЗаявки", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavki(Key Guid, LineNumber Int, entity interface{}) (*DocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ЗаявкаНаРасходованиеСредств_РазмещениеЗаявки", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavki(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ЗаявкаНаРасходованиеСредств_РазмещениеЗаявки", args)
}

func (c *Client) CreateDocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavki(data DocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavki) (*DocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavki, error) {
	raw, err := c.createEntity("Document_ЗаявкаНаРасходованиеСредств_РазмещениеЗаявки", data)
	if err != nil {
		return nil, err
	}
	result := DocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavkis(where Where) ([]DocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavki, error) {
	type ReturnObj struct {
		Value []DocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗаявкаНаРасходованиеСредств_РазмещениеЗаявки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentZakrytieZakazovPostavshchikam(Key Guid) (*DocumentZakrytieZakazovPostavshchikam, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ЗакрытиеЗаказовПоставщикам", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentZakrytieZakazovPostavshchikam{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentZakrytieZakazovPostavshchikam(Key Guid, entity interface{}) (*DocumentZakrytieZakazovPostavshchikam, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ЗакрытиеЗаказовПоставщикам", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentZakrytieZakazovPostavshchikam{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentZakrytieZakazovPostavshchikam(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ЗакрытиеЗаказовПоставщикам", args)
}

func (c *Client) CreateDocumentZakrytieZakazovPostavshchikam(data DocumentZakrytieZakazovPostavshchikam) (*DocumentZakrytieZakazovPostavshchikam, error) {
	raw, err := c.createEntity("Document_ЗакрытиеЗаказовПоставщикам", data)
	if err != nil {
		return nil, err
	}
	result := DocumentZakrytieZakazovPostavshchikam{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentZakrytieZakazovPostavshchikams(where Where) ([]DocumentZakrytieZakazovPostavshchikam, error) {
	type ReturnObj struct {
		Value []DocumentZakrytieZakazovPostavshchikam `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗакрытиеЗаказовПоставщикам", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentZakrytieZakazovPostavshchikamZakazy(Key Guid, LineNumber Int) (*DocumentZakrytieZakazovPostavshchikamZakazy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ЗакрытиеЗаказовПоставщикам_Заказы", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentZakrytieZakazovPostavshchikamZakazy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentZakrytieZakazovPostavshchikamZakazy(Key Guid, LineNumber Int, entity interface{}) (*DocumentZakrytieZakazovPostavshchikamZakazy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ЗакрытиеЗаказовПоставщикам_Заказы", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentZakrytieZakazovPostavshchikamZakazy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentZakrytieZakazovPostavshchikamZakazy(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ЗакрытиеЗаказовПоставщикам_Заказы", args)
}

func (c *Client) CreateDocumentZakrytieZakazovPostavshchikamZakazy(data DocumentZakrytieZakazovPostavshchikamZakazy) (*DocumentZakrytieZakazovPostavshchikamZakazy, error) {
	raw, err := c.createEntity("Document_ЗакрытиеЗаказовПоставщикам_Заказы", data)
	if err != nil {
		return nil, err
	}
	result := DocumentZakrytieZakazovPostavshchikamZakazy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentZakrytieZakazovPostavshchikamZakazys(where Where) ([]DocumentZakrytieZakazovPostavshchikamZakazy, error) {
	type ReturnObj struct {
		Value []DocumentZakrytieZakazovPostavshchikamZakazy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗакрытиеЗаказовПоставщикам_Заказы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogVidyKamnei(Key Guid) (*CatalogVidyKamnei, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ВидыКамней", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogVidyKamnei{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogVidyKamnei(Key Guid, entity interface{}) (*CatalogVidyKamnei, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ВидыКамней", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogVidyKamnei{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogVidyKamnei(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ВидыКамней", args)
}

func (c *Client) CreateCatalogVidyKamnei(data CatalogVidyKamnei) (*CatalogVidyKamnei, error) {
	raw, err := c.createEntity("Catalog_ВидыКамней", data)
	if err != nil {
		return nil, err
	}
	result := CatalogVidyKamnei{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogVidyKamneis(where Where) ([]CatalogVidyKamnei, error) {
	type ReturnObj struct {
		Value []CatalogVidyKamnei `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ВидыКамней", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentAnketyKlientovDliaFinMonitoringa(Key Guid) (*DocumentAnketyKlientovDliaFinMonitoringa, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_АнкетыКлиентовДляФинМониторинга", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentAnketyKlientovDliaFinMonitoringa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentAnketyKlientovDliaFinMonitoringa(Key Guid, entity interface{}) (*DocumentAnketyKlientovDliaFinMonitoringa, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_АнкетыКлиентовДляФинМониторинга", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentAnketyKlientovDliaFinMonitoringa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentAnketyKlientovDliaFinMonitoringa(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_АнкетыКлиентовДляФинМониторинга", args)
}

func (c *Client) CreateDocumentAnketyKlientovDliaFinMonitoringa(data DocumentAnketyKlientovDliaFinMonitoringa) (*DocumentAnketyKlientovDliaFinMonitoringa, error) {
	raw, err := c.createEntity("Document_АнкетыКлиентовДляФинМониторинга", data)
	if err != nil {
		return nil, err
	}
	result := DocumentAnketyKlientovDliaFinMonitoringa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentAnketyKlientovDliaFinMonitoringas(where Where) ([]DocumentAnketyKlientovDliaFinMonitoringa, error) {
	type ReturnObj struct {
		Value []DocumentAnketyKlientovDliaFinMonitoringa `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_АнкетыКлиентовДляФинМониторинга", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentAnketyKlientovDliaFinMonitoringaAnkety(Key Guid, LineNumber Int) (*DocumentAnketyKlientovDliaFinMonitoringaAnkety, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_АнкетыКлиентовДляФинМониторинга_Анкеты", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentAnketyKlientovDliaFinMonitoringaAnkety{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentAnketyKlientovDliaFinMonitoringaAnkety(Key Guid, LineNumber Int, entity interface{}) (*DocumentAnketyKlientovDliaFinMonitoringaAnkety, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_АнкетыКлиентовДляФинМониторинга_Анкеты", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentAnketyKlientovDliaFinMonitoringaAnkety{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentAnketyKlientovDliaFinMonitoringaAnkety(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_АнкетыКлиентовДляФинМониторинга_Анкеты", args)
}

func (c *Client) CreateDocumentAnketyKlientovDliaFinMonitoringaAnkety(data DocumentAnketyKlientovDliaFinMonitoringaAnkety) (*DocumentAnketyKlientovDliaFinMonitoringaAnkety, error) {
	raw, err := c.createEntity("Document_АнкетыКлиентовДляФинМониторинга_Анкеты", data)
	if err != nil {
		return nil, err
	}
	result := DocumentAnketyKlientovDliaFinMonitoringaAnkety{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentAnketyKlientovDliaFinMonitoringaAnketys(where Where) ([]DocumentAnketyKlientovDliaFinMonitoringaAnkety, error) {
	type ReturnObj struct {
		Value []DocumentAnketyKlientovDliaFinMonitoringaAnkety `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_АнкетыКлиентовДляФинМониторинга_Анкеты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogDogovoryRassrochki(Key Guid) (*CatalogDogovoryRassrochki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ДоговорыРассрочки", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogDogovoryRassrochki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogDogovoryRassrochki(Key Guid, entity interface{}) (*CatalogDogovoryRassrochki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ДоговорыРассрочки", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogDogovoryRassrochki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogDogovoryRassrochki(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ДоговорыРассрочки", args)
}

func (c *Client) CreateCatalogDogovoryRassrochki(data CatalogDogovoryRassrochki) (*CatalogDogovoryRassrochki, error) {
	raw, err := c.createEntity("Catalog_ДоговорыРассрочки", data)
	if err != nil {
		return nil, err
	}
	result := CatalogDogovoryRassrochki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogDogovoryRassrochkis(where Where) ([]CatalogDogovoryRassrochki, error) {
	type ReturnObj struct {
		Value []CatalogDogovoryRassrochki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ДоговорыРассрочки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogSertifikaty(Key Guid) (*CatalogSertifikaty, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_Сертификаты", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogSertifikaty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogSertifikaty(Key Guid, entity interface{}) (*CatalogSertifikaty, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_Сертификаты", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogSertifikaty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogSertifikaty(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_Сертификаты", args)
}

func (c *Client) CreateCatalogSertifikaty(data CatalogSertifikaty) (*CatalogSertifikaty, error) {
	raw, err := c.createEntity("Catalog_Сертификаты", data)
	if err != nil {
		return nil, err
	}
	result := CatalogSertifikaty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogSertifikatys(where Where) ([]CatalogSertifikaty, error) {
	type ReturnObj struct {
		Value []CatalogSertifikaty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Сертификаты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPostuplenieDavalcheskogoMetalla(Key Guid) (*DocumentPostuplenieDavalcheskogoMetalla, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ПоступлениеДавальческогоМеталла", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPostuplenieDavalcheskogoMetalla{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPostuplenieDavalcheskogoMetalla(Key Guid, entity interface{}) (*DocumentPostuplenieDavalcheskogoMetalla, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ПоступлениеДавальческогоМеталла", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPostuplenieDavalcheskogoMetalla{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPostuplenieDavalcheskogoMetalla(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ПоступлениеДавальческогоМеталла", args)
}

func (c *Client) CreateDocumentPostuplenieDavalcheskogoMetalla(data DocumentPostuplenieDavalcheskogoMetalla) (*DocumentPostuplenieDavalcheskogoMetalla, error) {
	raw, err := c.createEntity("Document_ПоступлениеДавальческогоМеталла", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPostuplenieDavalcheskogoMetalla{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPostuplenieDavalcheskogoMetallas(where Where) ([]DocumentPostuplenieDavalcheskogoMetalla, error) {
	type ReturnObj struct {
		Value []DocumentPostuplenieDavalcheskogoMetalla `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПоступлениеДавальческогоМеталла", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentInkassovoePorucheniePeredannoe(Key Guid) (*DocumentInkassovoePorucheniePeredannoe, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ИнкассовоеПоручениеПереданное", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentInkassovoePorucheniePeredannoe{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentInkassovoePorucheniePeredannoe(Key Guid, entity interface{}) (*DocumentInkassovoePorucheniePeredannoe, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ИнкассовоеПоручениеПереданное", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentInkassovoePorucheniePeredannoe{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentInkassovoePorucheniePeredannoe(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ИнкассовоеПоручениеПереданное", args)
}

func (c *Client) CreateDocumentInkassovoePorucheniePeredannoe(data DocumentInkassovoePorucheniePeredannoe) (*DocumentInkassovoePorucheniePeredannoe, error) {
	raw, err := c.createEntity("Document_ИнкассовоеПоручениеПереданное", data)
	if err != nil {
		return nil, err
	}
	result := DocumentInkassovoePorucheniePeredannoe{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentInkassovoePorucheniePeredannoes(where Where) ([]DocumentInkassovoePorucheniePeredannoe, error) {
	type ReturnObj struct {
		Value []DocumentInkassovoePorucheniePeredannoe `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ИнкассовоеПоручениеПереданное", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezha(Key Guid, LineNumber Int) (*DocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezha, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ИнкассовоеПоручениеПереданное_РасшифровкаПлатежа", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezha(Key Guid, LineNumber Int, entity interface{}) (*DocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezha, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ИнкассовоеПоручениеПереданное_РасшифровкаПлатежа", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezha(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ИнкассовоеПоручениеПереданное_РасшифровкаПлатежа", args)
}

func (c *Client) CreateDocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezha(data DocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezha) (*DocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezha, error) {
	raw, err := c.createEntity("Document_ИнкассовоеПоручениеПереданное_РасшифровкаПлатежа", data)
	if err != nil {
		return nil, err
	}
	result := DocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezhas(where Where) ([]DocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezha, error) {
	type ReturnObj struct {
		Value []DocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezha `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ИнкассовоеПоручениеПереданное_РасшифровкаПлатежа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentInkassovoePorucheniePeredannoeRekvizityKontragenta(Key Guid, LineNumber Int) (*DocumentInkassovoePorucheniePeredannoeRekvizityKontragenta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ИнкассовоеПоручениеПереданное_РеквизитыКонтрагента", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentInkassovoePorucheniePeredannoeRekvizityKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentInkassovoePorucheniePeredannoeRekvizityKontragenta(Key Guid, LineNumber Int, entity interface{}) (*DocumentInkassovoePorucheniePeredannoeRekvizityKontragenta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ИнкассовоеПоручениеПереданное_РеквизитыКонтрагента", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentInkassovoePorucheniePeredannoeRekvizityKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentInkassovoePorucheniePeredannoeRekvizityKontragenta(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ИнкассовоеПоручениеПереданное_РеквизитыКонтрагента", args)
}

func (c *Client) CreateDocumentInkassovoePorucheniePeredannoeRekvizityKontragenta(data DocumentInkassovoePorucheniePeredannoeRekvizityKontragenta) (*DocumentInkassovoePorucheniePeredannoeRekvizityKontragenta, error) {
	raw, err := c.createEntity("Document_ИнкассовоеПоручениеПереданное_РеквизитыКонтрагента", data)
	if err != nil {
		return nil, err
	}
	result := DocumentInkassovoePorucheniePeredannoeRekvizityKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentInkassovoePorucheniePeredannoeRekvizityKontragentas(where Where) ([]DocumentInkassovoePorucheniePeredannoeRekvizityKontragenta, error) {
	type ReturnObj struct {
		Value []DocumentInkassovoePorucheniePeredannoeRekvizityKontragenta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ИнкассовоеПоручениеПереданное_РеквизитыКонтрагента", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogFormulyDliaRascheta(Key Guid) (*CatalogFormulyDliaRascheta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ФормулыДляРасчета", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogFormulyDliaRascheta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogFormulyDliaRascheta(Key Guid, entity interface{}) (*CatalogFormulyDliaRascheta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ФормулыДляРасчета", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogFormulyDliaRascheta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogFormulyDliaRascheta(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ФормулыДляРасчета", args)
}

func (c *Client) CreateCatalogFormulyDliaRascheta(data CatalogFormulyDliaRascheta) (*CatalogFormulyDliaRascheta, error) {
	raw, err := c.createEntity("Catalog_ФормулыДляРасчета", data)
	if err != nil {
		return nil, err
	}
	result := CatalogFormulyDliaRascheta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogFormulyDliaRaschetas(where Where) ([]CatalogFormulyDliaRascheta, error) {
	type ReturnObj struct {
		Value []CatalogFormulyDliaRascheta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ФормулыДляРасчета", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogKupony(Key Guid) (*CatalogKupony, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_Купоны", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogKupony{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogKupony(Key Guid, entity interface{}) (*CatalogKupony, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_Купоны", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogKupony{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogKupony(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_Купоны", args)
}

func (c *Client) CreateCatalogKupony(data CatalogKupony) (*CatalogKupony, error) {
	raw, err := c.createEntity("Catalog_Купоны", data)
	if err != nil {
		return nil, err
	}
	result := CatalogKupony{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogKuponys(where Where) ([]CatalogKupony, error) {
	type ReturnObj struct {
		Value []CatalogKupony `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Купоны", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) Correcting(Key Guid) (*Correcting, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_КорректировкаЗаписейРегистровНакопления", args, []string{})
	if err != nil {
		return nil, err
	}
	result := Correcting{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCorrecting(Key Guid, entity interface{}) (*Correcting, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_КорректировкаЗаписейРегистровНакопления", args, entity)
	if err != nil {
		return nil, err
	}
	result := Correcting{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCorrecting(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_КорректировкаЗаписейРегистровНакопления", args)
}

func (c *Client) CreateCorrecting(data Correcting) (*Correcting, error) {
	raw, err := c.createEntity("Document_КорректировкаЗаписейРегистровНакопления", data)
	if err != nil {
		return nil, err
	}
	result := Correcting{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) Correctings(where Where) ([]Correcting, error) {
	type ReturnObj struct {
		Value []Correcting `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_КорректировкаЗаписейРегистровНакопления", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniia(Key Guid, LineNumber Int) (*DocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_КорректировкаЗаписейРегистровНакопления_ТаблицаРегистровНакопления", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniia(Key Guid, LineNumber Int, entity interface{}) (*DocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_КорректировкаЗаписейРегистровНакопления_ТаблицаРегистровНакопления", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniia(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_КорректировкаЗаписейРегистровНакопления_ТаблицаРегистровНакопления", args)
}

func (c *Client) CreateDocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniia(data DocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniia) (*DocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniia, error) {
	raw, err := c.createEntity("Document_КорректировкаЗаписейРегистровНакопления_ТаблицаРегистровНакопления", data)
	if err != nil {
		return nil, err
	}
	result := DocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniias(where Where) ([]DocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniia, error) {
	type ReturnObj struct {
		Value []DocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_КорректировкаЗаписейРегистровНакопления_ТаблицаРегистровНакопления", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentInternetZakaz(Key Guid) (*DocumentInternetZakaz, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ИнтернетЗаказ", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentInternetZakaz{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentInternetZakaz(Key Guid, entity interface{}) (*DocumentInternetZakaz, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ИнтернетЗаказ", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentInternetZakaz{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentInternetZakaz(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ИнтернетЗаказ", args)
}

func (c *Client) CreateDocumentInternetZakaz(data DocumentInternetZakaz) (*DocumentInternetZakaz, error) {
	raw, err := c.createEntity("Document_ИнтернетЗаказ", data)
	if err != nil {
		return nil, err
	}
	result := DocumentInternetZakaz{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentInternetZakazs(where Where) ([]DocumentInternetZakaz, error) {
	type ReturnObj struct {
		Value []DocumentInternetZakaz `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ИнтернетЗаказ", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentInternetZakazTovaryInternetZakaza(Key Guid, LineNumber Int) (*DocumentInternetZakazTovaryInternetZakaza, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ИнтернетЗаказ_ТоварыИнтернетЗаказа", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentInternetZakazTovaryInternetZakaza{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentInternetZakazTovaryInternetZakaza(Key Guid, LineNumber Int, entity interface{}) (*DocumentInternetZakazTovaryInternetZakaza, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ИнтернетЗаказ_ТоварыИнтернетЗаказа", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentInternetZakazTovaryInternetZakaza{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentInternetZakazTovaryInternetZakaza(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ИнтернетЗаказ_ТоварыИнтернетЗаказа", args)
}

func (c *Client) CreateDocumentInternetZakazTovaryInternetZakaza(data DocumentInternetZakazTovaryInternetZakaza) (*DocumentInternetZakazTovaryInternetZakaza, error) {
	raw, err := c.createEntity("Document_ИнтернетЗаказ_ТоварыИнтернетЗаказа", data)
	if err != nil {
		return nil, err
	}
	result := DocumentInternetZakazTovaryInternetZakaza{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentInternetZakazTovaryInternetZakazas(where Where) ([]DocumentInternetZakazTovaryInternetZakaza, error) {
	type ReturnObj struct {
		Value []DocumentInternetZakazTovaryInternetZakaza `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ИнтернетЗаказ_ТоварыИнтернетЗаказа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentInternetZakazTovary(Key Guid, LineNumber Int) (*DocumentInternetZakazTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ИнтернетЗаказ_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentInternetZakazTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentInternetZakazTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentInternetZakazTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ИнтернетЗаказ_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentInternetZakazTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentInternetZakazTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ИнтернетЗаказ_Товары", args)
}

func (c *Client) CreateDocumentInternetZakazTovary(data DocumentInternetZakazTovary) (*DocumentInternetZakazTovary, error) {
	raw, err := c.createEntity("Document_ИнтернетЗаказ_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentInternetZakazTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentInternetZakazTovarys(where Where) ([]DocumentInternetZakazTovary, error) {
	type ReturnObj struct {
		Value []DocumentInternetZakazTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ИнтернетЗаказ_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogRegiony(Key Guid) (*CatalogRegiony, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_Регионы", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogRegiony{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogRegiony(Key Guid, entity interface{}) (*CatalogRegiony, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_Регионы", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogRegiony{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogRegiony(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_Регионы", args)
}

func (c *Client) CreateCatalogRegiony(data CatalogRegiony) (*CatalogRegiony, error) {
	raw, err := c.createEntity("Catalog_Регионы", data)
	if err != nil {
		return nil, err
	}
	result := CatalogRegiony{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogRegionys(where Where) ([]CatalogRegiony, error) {
	type ReturnObj struct {
		Value []CatalogRegiony `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Регионы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) SaleJournal(Key Guid) (*SaleJournal, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ОтчетОРозничныхПродажах", args, []string{})
	if err != nil {
		return nil, err
	}
	result := SaleJournal{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateSaleJournal(Key Guid, entity interface{}) (*SaleJournal, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ОтчетОРозничныхПродажах", args, entity)
	if err != nil {
		return nil, err
	}
	result := SaleJournal{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveSaleJournal(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ОтчетОРозничныхПродажах", args)
}

func (c *Client) CreateSaleJournal(data SaleJournal) (*SaleJournal, error) {
	raw, err := c.createEntity("Document_ОтчетОРозничныхПродажах", data)
	if err != nil {
		return nil, err
	}
	result := SaleJournal{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) SaleJournals(where Where) ([]SaleJournal, error) {
	type ReturnObj struct {
		Value []SaleJournal `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетОРозничныхПродажах", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentOtchetORoznichnykhProdazhakhBonusy(Key Guid, LineNumber Int) (*DocumentOtchetORoznichnykhProdazhakhBonusy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ОтчетОРозничныхПродажах_Бонусы", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetORoznichnykhProdazhakhBonusy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentOtchetORoznichnykhProdazhakhBonusy(Key Guid, LineNumber Int, entity interface{}) (*DocumentOtchetORoznichnykhProdazhakhBonusy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ОтчетОРозничныхПродажах_Бонусы", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetORoznichnykhProdazhakhBonusy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentOtchetORoznichnykhProdazhakhBonusy(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ОтчетОРозничныхПродажах_Бонусы", args)
}

func (c *Client) CreateDocumentOtchetORoznichnykhProdazhakhBonusy(data DocumentOtchetORoznichnykhProdazhakhBonusy) (*DocumentOtchetORoznichnykhProdazhakhBonusy, error) {
	raw, err := c.createEntity("Document_ОтчетОРозничныхПродажах_Бонусы", data)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetORoznichnykhProdazhakhBonusy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentOtchetORoznichnykhProdazhakhBonusys(where Where) ([]DocumentOtchetORoznichnykhProdazhakhBonusy, error) {
	type ReturnObj struct {
		Value []DocumentOtchetORoznichnykhProdazhakhBonusy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетОРозничныхПродажах_Бонусы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditami(Key Guid, LineNumber Int) (*DocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditami, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ОтчетОРозничныхПродажах_ОплатаБанковскимиКредитами", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditami{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditami(Key Guid, LineNumber Int, entity interface{}) (*DocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditami, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ОтчетОРозничныхПродажах_ОплатаБанковскимиКредитами", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditami{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditami(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ОтчетОРозничныхПродажах_ОплатаБанковскимиКредитами", args)
}

func (c *Client) CreateDocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditami(data DocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditami) (*DocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditami, error) {
	raw, err := c.createEntity("Document_ОтчетОРозничныхПродажах_ОплатаБанковскимиКредитами", data)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditami{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditamis(where Where) ([]DocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditami, error) {
	type ReturnObj struct {
		Value []DocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditami `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетОРозничныхПродажах_ОплатаБанковскимиКредитами", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartami(Key Guid, LineNumber Int) (*DocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartami, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ОтчетОРозничныхПродажах_ОплатаПлатежнымиКартами", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartami{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartami(Key Guid, LineNumber Int, entity interface{}) (*DocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartami, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ОтчетОРозничныхПродажах_ОплатаПлатежнымиКартами", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartami{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartami(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ОтчетОРозничныхПродажах_ОплатаПлатежнымиКартами", args)
}

func (c *Client) CreateDocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartami(data DocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartami) (*DocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartami, error) {
	raw, err := c.createEntity("Document_ОтчетОРозничныхПродажах_ОплатаПлатежнымиКартами", data)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartami{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartamis(where Where) ([]DocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartami, error) {
	type ReturnObj struct {
		Value []DocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartami `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетОРозничныхПродажах_ОплатаПлатежнымиКартами", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentOtchetORoznichnykhProdazhakhOplataSertifikatami(Key Guid, LineNumber Int) (*DocumentOtchetORoznichnykhProdazhakhOplataSertifikatami, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ОтчетОРозничныхПродажах_ОплатаСертификатами", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetORoznichnykhProdazhakhOplataSertifikatami{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentOtchetORoznichnykhProdazhakhOplataSertifikatami(Key Guid, LineNumber Int, entity interface{}) (*DocumentOtchetORoznichnykhProdazhakhOplataSertifikatami, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ОтчетОРозничныхПродажах_ОплатаСертификатами", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetORoznichnykhProdazhakhOplataSertifikatami{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentOtchetORoznichnykhProdazhakhOplataSertifikatami(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ОтчетОРозничныхПродажах_ОплатаСертификатами", args)
}

func (c *Client) CreateDocumentOtchetORoznichnykhProdazhakhOplataSertifikatami(data DocumentOtchetORoznichnykhProdazhakhOplataSertifikatami) (*DocumentOtchetORoznichnykhProdazhakhOplataSertifikatami, error) {
	raw, err := c.createEntity("Document_ОтчетОРозничныхПродажах_ОплатаСертификатами", data)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetORoznichnykhProdazhakhOplataSertifikatami{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentOtchetORoznichnykhProdazhakhOplataSertifikatamis(where Where) ([]DocumentOtchetORoznichnykhProdazhakhOplataSertifikatami, error) {
	type ReturnObj struct {
		Value []DocumentOtchetORoznichnykhProdazhakhOplataSertifikatami `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетОРозничныхПродажах_ОплатаСертификатами", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatov(Key Guid, LineNumber Int) (*DocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ОтчетОРозничныхПродажах_ПродажаСертификатов", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatov(Key Guid, LineNumber Int, entity interface{}) (*DocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ОтчетОРозничныхПродажах_ПродажаСертификатов", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatov(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ОтчетОРозничныхПродажах_ПродажаСертификатов", args)
}

func (c *Client) CreateDocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatov(data DocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatov) (*DocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatov, error) {
	raw, err := c.createEntity("Document_ОтчетОРозничныхПродажах_ПродажаСертификатов", data)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatovs(where Where) ([]DocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatov, error) {
	type ReturnObj struct {
		Value []DocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетОРозничныхПродажах_ПродажаСертификатов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentOtchetORoznichnykhProdazhakhTovary(Key Guid, LineNumber Int) (*DocumentOtchetORoznichnykhProdazhakhTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ОтчетОРозничныхПродажах_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetORoznichnykhProdazhakhTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentOtchetORoznichnykhProdazhakhTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentOtchetORoznichnykhProdazhakhTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ОтчетОРозничныхПродажах_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetORoznichnykhProdazhakhTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentOtchetORoznichnykhProdazhakhTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ОтчетОРозничныхПродажах_Товары", args)
}

func (c *Client) CreateDocumentOtchetORoznichnykhProdazhakhTovary(data DocumentOtchetORoznichnykhProdazhakhTovary) (*DocumentOtchetORoznichnykhProdazhakhTovary, error) {
	raw, err := c.createEntity("Document_ОтчетОРозничныхПродажах_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetORoznichnykhProdazhakhTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentOtchetORoznichnykhProdazhakhTovarys(where Where) ([]DocumentOtchetORoznichnykhProdazhakhTovary, error) {
	type ReturnObj struct {
		Value []DocumentOtchetORoznichnykhProdazhakhTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетОРозничныхПродажах_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazha(Key Guid, LineNumber Int) (*DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazha, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ОтчетОРозничныхПродажах_ДоговораРассрочкиПродажа", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazha(Key Guid, LineNumber Int, entity interface{}) (*DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazha, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ОтчетОРозничныхПродажах_ДоговораРассрочкиПродажа", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazha(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ОтчетОРозничныхПродажах_ДоговораРассрочкиПродажа", args)
}

func (c *Client) CreateDocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazha(data DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazha) (*DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazha, error) {
	raw, err := c.createEntity("Document_ОтчетОРозничныхПродажах_ДоговораРассрочкиПродажа", data)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazhas(where Where) ([]DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazha, error) {
	type ReturnObj struct {
		Value []DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazha `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетОРозничныхПродажах_ДоговораРассрочкиПродажа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentOtchetORoznichnykhProdazhakhDokumentyObmena(Key Guid, LineNumber Int) (*DocumentOtchetORoznichnykhProdazhakhDokumentyObmena, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ОтчетОРозничныхПродажах_ДокументыОбмена", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetORoznichnykhProdazhakhDokumentyObmena{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentOtchetORoznichnykhProdazhakhDokumentyObmena(Key Guid, LineNumber Int, entity interface{}) (*DocumentOtchetORoznichnykhProdazhakhDokumentyObmena, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ОтчетОРозничныхПродажах_ДокументыОбмена", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetORoznichnykhProdazhakhDokumentyObmena{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentOtchetORoznichnykhProdazhakhDokumentyObmena(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ОтчетОРозничныхПродажах_ДокументыОбмена", args)
}

func (c *Client) CreateDocumentOtchetORoznichnykhProdazhakhDokumentyObmena(data DocumentOtchetORoznichnykhProdazhakhDokumentyObmena) (*DocumentOtchetORoznichnykhProdazhakhDokumentyObmena, error) {
	raw, err := c.createEntity("Document_ОтчетОРозничныхПродажах_ДокументыОбмена", data)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetORoznichnykhProdazhakhDokumentyObmena{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentOtchetORoznichnykhProdazhakhDokumentyObmenas(where Where) ([]DocumentOtchetORoznichnykhProdazhakhDokumentyObmena, error) {
	type ReturnObj struct {
		Value []DocumentOtchetORoznichnykhProdazhakhDokumentyObmena `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетОРозничныхПродажах_ДокументыОбмена", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplata(Key Guid, LineNumber Int) (*DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplata, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ОтчетОРозничныхПродажах_ДоговораРассрочкиОплата", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplata{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplata(Key Guid, LineNumber Int, entity interface{}) (*DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplata, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ОтчетОРозничныхПродажах_ДоговораРассрочкиОплата", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplata{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplata(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ОтчетОРозничныхПродажах_ДоговораРассрочкиОплата", args)
}

func (c *Client) CreateDocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplata(data DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplata) (*DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplata, error) {
	raw, err := c.createEntity("Document_ОтчетОРозничныхПродажах_ДоговораРассрочкиОплата", data)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplata{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplatas(where Where) ([]DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplata, error) {
	type ReturnObj struct {
		Value []DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplata `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетОРозничныхПродажах_ДоговораРассрочкиОплата", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentOtchetORoznichnykhProdazhakhOplataBallami(Key Guid, LineNumber Int) (*DocumentOtchetORoznichnykhProdazhakhOplataBallami, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ОтчетОРозничныхПродажах_ОплатаБаллами", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetORoznichnykhProdazhakhOplataBallami{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentOtchetORoznichnykhProdazhakhOplataBallami(Key Guid, LineNumber Int, entity interface{}) (*DocumentOtchetORoznichnykhProdazhakhOplataBallami, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ОтчетОРозничныхПродажах_ОплатаБаллами", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetORoznichnykhProdazhakhOplataBallami{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentOtchetORoznichnykhProdazhakhOplataBallami(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ОтчетОРозничныхПродажах_ОплатаБаллами", args)
}

func (c *Client) CreateDocumentOtchetORoznichnykhProdazhakhOplataBallami(data DocumentOtchetORoznichnykhProdazhakhOplataBallami) (*DocumentOtchetORoznichnykhProdazhakhOplataBallami, error) {
	raw, err := c.createEntity("Document_ОтчетОРозничныхПродажах_ОплатаБаллами", data)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetORoznichnykhProdazhakhOplataBallami{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentOtchetORoznichnykhProdazhakhOplataBallamis(where Where) ([]DocumentOtchetORoznichnykhProdazhakhOplataBallami, error) {
	type ReturnObj struct {
		Value []DocumentOtchetORoznichnykhProdazhakhOplataBallami `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетОРозничныхПродажах_ОплатаБаллами", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentOtchetORoznichnykhProdazhakhSkidkiNatsenki(Key Guid, LineNumber Int) (*DocumentOtchetORoznichnykhProdazhakhSkidkiNatsenki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ОтчетОРозничныхПродажах_СкидкиНаценки", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetORoznichnykhProdazhakhSkidkiNatsenki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentOtchetORoznichnykhProdazhakhSkidkiNatsenki(Key Guid, LineNumber Int, entity interface{}) (*DocumentOtchetORoznichnykhProdazhakhSkidkiNatsenki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ОтчетОРозничныхПродажах_СкидкиНаценки", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetORoznichnykhProdazhakhSkidkiNatsenki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentOtchetORoznichnykhProdazhakhSkidkiNatsenki(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ОтчетОРозничныхПродажах_СкидкиНаценки", args)
}

func (c *Client) CreateDocumentOtchetORoznichnykhProdazhakhSkidkiNatsenki(data DocumentOtchetORoznichnykhProdazhakhSkidkiNatsenki) (*DocumentOtchetORoznichnykhProdazhakhSkidkiNatsenki, error) {
	raw, err := c.createEntity("Document_ОтчетОРозничныхПродажах_СкидкиНаценки", data)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetORoznichnykhProdazhakhSkidkiNatsenki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentOtchetORoznichnykhProdazhakhSkidkiNatsenkis(where Where) ([]DocumentOtchetORoznichnykhProdazhakhSkidkiNatsenki, error) {
	type ReturnObj struct {
		Value []DocumentOtchetORoznichnykhProdazhakhSkidkiNatsenki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетОРозничныхПродажах_СкидкиНаценки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentOtchetORoznichnykhProdazhakhKupony(Key Guid, LineNumber Int) (*DocumentOtchetORoznichnykhProdazhakhKupony, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ОтчетОРозничныхПродажах_Купоны", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetORoznichnykhProdazhakhKupony{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentOtchetORoznichnykhProdazhakhKupony(Key Guid, LineNumber Int, entity interface{}) (*DocumentOtchetORoznichnykhProdazhakhKupony, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ОтчетОРозничныхПродажах_Купоны", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetORoznichnykhProdazhakhKupony{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentOtchetORoznichnykhProdazhakhKupony(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ОтчетОРозничныхПродажах_Купоны", args)
}

func (c *Client) CreateDocumentOtchetORoznichnykhProdazhakhKupony(data DocumentOtchetORoznichnykhProdazhakhKupony) (*DocumentOtchetORoznichnykhProdazhakhKupony, error) {
	raw, err := c.createEntity("Document_ОтчетОРозничныхПродажах_Купоны", data)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetORoznichnykhProdazhakhKupony{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentOtchetORoznichnykhProdazhakhKuponys(where Where) ([]DocumentOtchetORoznichnykhProdazhakhKupony, error) {
	type ReturnObj struct {
		Value []DocumentOtchetORoznichnykhProdazhakhKupony `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетОРозничныхПродажах_Купоны", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentOtmenaSkidokNomenklatury(Key Guid) (*DocumentOtmenaSkidokNomenklatury, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ОтменаСкидокНоменклатуры", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentOtmenaSkidokNomenklatury{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentOtmenaSkidokNomenklatury(Key Guid, entity interface{}) (*DocumentOtmenaSkidokNomenklatury, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ОтменаСкидокНоменклатуры", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentOtmenaSkidokNomenklatury{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentOtmenaSkidokNomenklatury(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ОтменаСкидокНоменклатуры", args)
}

func (c *Client) CreateDocumentOtmenaSkidokNomenklatury(data DocumentOtmenaSkidokNomenklatury) (*DocumentOtmenaSkidokNomenklatury, error) {
	raw, err := c.createEntity("Document_ОтменаСкидокНоменклатуры", data)
	if err != nil {
		return nil, err
	}
	result := DocumentOtmenaSkidokNomenklatury{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentOtmenaSkidokNomenklaturys(where Where) ([]DocumentOtmenaSkidokNomenklatury, error) {
	type ReturnObj struct {
		Value []DocumentOtmenaSkidokNomenklatury `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтменаСкидокНоменклатуры", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentOtmenaSkidokNomenklaturyDokumenty(Key Guid, LineNumber Int) (*DocumentOtmenaSkidokNomenklaturyDokumenty, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ОтменаСкидокНоменклатуры_Документы", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentOtmenaSkidokNomenklaturyDokumenty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentOtmenaSkidokNomenklaturyDokumenty(Key Guid, LineNumber Int, entity interface{}) (*DocumentOtmenaSkidokNomenklaturyDokumenty, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ОтменаСкидокНоменклатуры_Документы", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentOtmenaSkidokNomenklaturyDokumenty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentOtmenaSkidokNomenklaturyDokumenty(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ОтменаСкидокНоменклатуры_Документы", args)
}

func (c *Client) CreateDocumentOtmenaSkidokNomenklaturyDokumenty(data DocumentOtmenaSkidokNomenklaturyDokumenty) (*DocumentOtmenaSkidokNomenklaturyDokumenty, error) {
	raw, err := c.createEntity("Document_ОтменаСкидокНоменклатуры_Документы", data)
	if err != nil {
		return nil, err
	}
	result := DocumentOtmenaSkidokNomenklaturyDokumenty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentOtmenaSkidokNomenklaturyDokumentys(where Where) ([]DocumentOtmenaSkidokNomenklaturyDokumenty, error) {
	type ReturnObj struct {
		Value []DocumentOtmenaSkidokNomenklaturyDokumenty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтменаСкидокНоменклатуры_Документы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogTovarnyeGruppy(Key Guid) (*CatalogTovarnyeGruppy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ТоварныеГруппы", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogTovarnyeGruppy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogTovarnyeGruppy(Key Guid, entity interface{}) (*CatalogTovarnyeGruppy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ТоварныеГруппы", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogTovarnyeGruppy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogTovarnyeGruppy(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ТоварныеГруппы", args)
}

func (c *Client) CreateCatalogTovarnyeGruppy(data CatalogTovarnyeGruppy) (*CatalogTovarnyeGruppy, error) {
	raw, err := c.createEntity("Catalog_ТоварныеГруппы", data)
	if err != nil {
		return nil, err
	}
	result := CatalogTovarnyeGruppy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogTovarnyeGruppys(where Where) ([]CatalogTovarnyeGruppy, error) {
	type ReturnObj struct {
		Value []CatalogTovarnyeGruppy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ТоварныеГруппы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstv(Key Guid) (*DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstv, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ПлатежныйОрдерПоступлениеДенежныхСредств", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstv{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstv(Key Guid, entity interface{}) (*DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstv, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ПлатежныйОрдерПоступлениеДенежныхСредств", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstv{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstv(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ПлатежныйОрдерПоступлениеДенежныхСредств", args)
}

func (c *Client) CreateDocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstv(data DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstv) (*DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstv, error) {
	raw, err := c.createEntity("Document_ПлатежныйОрдерПоступлениеДенежныхСредств", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstv{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvs(where Where) ([]DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstv, error) {
	type ReturnObj struct {
		Value []DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstv `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПлатежныйОрдерПоступлениеДенежныхСредств", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezha(Key Guid, LineNumber Int) (*DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezha, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ПлатежныйОрдерПоступлениеДенежныхСредств_РасшифровкаПлатежа", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezha(Key Guid, LineNumber Int, entity interface{}) (*DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezha, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ПлатежныйОрдерПоступлениеДенежныхСредств_РасшифровкаПлатежа", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezha(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ПлатежныйОрдерПоступлениеДенежныхСредств_РасшифровкаПлатежа", args)
}

func (c *Client) CreateDocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezha(data DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezha) (*DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezha, error) {
	raw, err := c.createEntity("Document_ПлатежныйОрдерПоступлениеДенежныхСредств_РасшифровкаПлатежа", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezhas(where Where) ([]DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezha, error) {
	type ReturnObj struct {
		Value []DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezha `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПлатежныйОрдерПоступлениеДенежныхСредств_РасшифровкаПлатежа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragenta(Key Guid, LineNumber Int) (*DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragenta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ПлатежныйОрдерПоступлениеДенежныхСредств_РеквизитыКонтрагента", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragenta(Key Guid, LineNumber Int, entity interface{}) (*DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragenta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ПлатежныйОрдерПоступлениеДенежныхСредств_РеквизитыКонтрагента", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragenta(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ПлатежныйОрдерПоступлениеДенежныхСредств_РеквизитыКонтрагента", args)
}

func (c *Client) CreateDocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragenta(data DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragenta) (*DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragenta, error) {
	raw, err := c.createEntity("Document_ПлатежныйОрдерПоступлениеДенежныхСредств_РеквизитыКонтрагента", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragentas(where Where) ([]DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragenta, error) {
	type ReturnObj struct {
		Value []DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragenta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПлатежныйОрдерПоступлениеДенежныхСредств_РеквизитыКонтрагента", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogOrderKey(Key Guid) (*CatalogOrderKey, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_КлючиПродаж", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogOrderKey{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogOrderKey(Key Guid, entity interface{}) (*CatalogOrderKey, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_КлючиПродаж", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogOrderKey{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogOrderKey(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_КлючиПродаж", args)
}

func (c *Client) CreateCatalogOrderKey(data CatalogOrderKey) (*CatalogOrderKey, error) {
	raw, err := c.createEntity("Catalog_КлючиПродаж", data)
	if err != nil {
		return nil, err
	}
	result := CatalogOrderKey{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogOrderKeys(where Where) ([]CatalogOrderKey, error) {
	type ReturnObj struct {
		Value []CatalogOrderKey `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_КлючиПродаж", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentKassovyiChekKorrektsii(Key Guid) (*DocumentKassovyiChekKorrektsii, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_КассовыйЧекКоррекции", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentKassovyiChekKorrektsii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentKassovyiChekKorrektsii(Key Guid, entity interface{}) (*DocumentKassovyiChekKorrektsii, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_КассовыйЧекКоррекции", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentKassovyiChekKorrektsii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentKassovyiChekKorrektsii(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_КассовыйЧекКоррекции", args)
}

func (c *Client) CreateDocumentKassovyiChekKorrektsii(data DocumentKassovyiChekKorrektsii) (*DocumentKassovyiChekKorrektsii, error) {
	raw, err := c.createEntity("Document_КассовыйЧекКоррекции", data)
	if err != nil {
		return nil, err
	}
	result := DocumentKassovyiChekKorrektsii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentKassovyiChekKorrektsiis(where Where) ([]DocumentKassovyiChekKorrektsii, error) {
	type ReturnObj struct {
		Value []DocumentKassovyiChekKorrektsii `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_КассовыйЧекКоррекции", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentKassovyiChekKorrektsiiOplata(Key Guid, LineNumber Int) (*DocumentKassovyiChekKorrektsiiOplata, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_КассовыйЧекКоррекции_Оплата", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentKassovyiChekKorrektsiiOplata{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentKassovyiChekKorrektsiiOplata(Key Guid, LineNumber Int, entity interface{}) (*DocumentKassovyiChekKorrektsiiOplata, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_КассовыйЧекКоррекции_Оплата", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentKassovyiChekKorrektsiiOplata{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentKassovyiChekKorrektsiiOplata(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_КассовыйЧекКоррекции_Оплата", args)
}

func (c *Client) CreateDocumentKassovyiChekKorrektsiiOplata(data DocumentKassovyiChekKorrektsiiOplata) (*DocumentKassovyiChekKorrektsiiOplata, error) {
	raw, err := c.createEntity("Document_КассовыйЧекКоррекции_Оплата", data)
	if err != nil {
		return nil, err
	}
	result := DocumentKassovyiChekKorrektsiiOplata{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentKassovyiChekKorrektsiiOplatas(where Where) ([]DocumentKassovyiChekKorrektsiiOplata, error) {
	type ReturnObj struct {
		Value []DocumentKassovyiChekKorrektsiiOplata `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_КассовыйЧекКоррекции_Оплата", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentSchetNaOplatuPokupateliu(Key Guid) (*DocumentSchetNaOplatuPokupateliu, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_СчетНаОплатуПокупателю", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentSchetNaOplatuPokupateliu{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentSchetNaOplatuPokupateliu(Key Guid, entity interface{}) (*DocumentSchetNaOplatuPokupateliu, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_СчетНаОплатуПокупателю", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentSchetNaOplatuPokupateliu{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentSchetNaOplatuPokupateliu(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_СчетНаОплатуПокупателю", args)
}

func (c *Client) CreateDocumentSchetNaOplatuPokupateliu(data DocumentSchetNaOplatuPokupateliu) (*DocumentSchetNaOplatuPokupateliu, error) {
	raw, err := c.createEntity("Document_СчетНаОплатуПокупателю", data)
	if err != nil {
		return nil, err
	}
	result := DocumentSchetNaOplatuPokupateliu{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentSchetNaOplatuPokupatelius(where Where) ([]DocumentSchetNaOplatuPokupateliu, error) {
	type ReturnObj struct {
		Value []DocumentSchetNaOplatuPokupateliu `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СчетНаОплатуПокупателю", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentSchetNaOplatuPokupateliuTovary(Key Guid, LineNumber Int) (*DocumentSchetNaOplatuPokupateliuTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_СчетНаОплатуПокупателю_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentSchetNaOplatuPokupateliuTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentSchetNaOplatuPokupateliuTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentSchetNaOplatuPokupateliuTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_СчетНаОплатуПокупателю_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentSchetNaOplatuPokupateliuTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentSchetNaOplatuPokupateliuTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_СчетНаОплатуПокупателю_Товары", args)
}

func (c *Client) CreateDocumentSchetNaOplatuPokupateliuTovary(data DocumentSchetNaOplatuPokupateliuTovary) (*DocumentSchetNaOplatuPokupateliuTovary, error) {
	raw, err := c.createEntity("Document_СчетНаОплатуПокупателю_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentSchetNaOplatuPokupateliuTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentSchetNaOplatuPokupateliuTovarys(where Where) ([]DocumentSchetNaOplatuPokupateliuTovary, error) {
	type ReturnObj struct {
		Value []DocumentSchetNaOplatuPokupateliuTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СчетНаОплатуПокупателю_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentSchetNaOplatuPokupateliuUslugi(Key Guid, LineNumber Int) (*DocumentSchetNaOplatuPokupateliuUslugi, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_СчетНаОплатуПокупателю_Услуги", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentSchetNaOplatuPokupateliuUslugi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentSchetNaOplatuPokupateliuUslugi(Key Guid, LineNumber Int, entity interface{}) (*DocumentSchetNaOplatuPokupateliuUslugi, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_СчетНаОплатуПокупателю_Услуги", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentSchetNaOplatuPokupateliuUslugi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentSchetNaOplatuPokupateliuUslugi(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_СчетНаОплатуПокупателю_Услуги", args)
}

func (c *Client) CreateDocumentSchetNaOplatuPokupateliuUslugi(data DocumentSchetNaOplatuPokupateliuUslugi) (*DocumentSchetNaOplatuPokupateliuUslugi, error) {
	raw, err := c.createEntity("Document_СчетНаОплатуПокупателю_Услуги", data)
	if err != nil {
		return nil, err
	}
	result := DocumentSchetNaOplatuPokupateliuUslugi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentSchetNaOplatuPokupateliuUslugis(where Where) ([]DocumentSchetNaOplatuPokupateliuUslugi, error) {
	type ReturnObj struct {
		Value []DocumentSchetNaOplatuPokupateliuUslugi `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СчетНаОплатуПокупателю_Услуги", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogNastroikiObmenaDannymi(Key Guid) (*CatalogNastroikiObmenaDannymi, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_НастройкиОбменаДанными", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiObmenaDannymi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogNastroikiObmenaDannymi(Key Guid, entity interface{}) (*CatalogNastroikiObmenaDannymi, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_НастройкиОбменаДанными", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiObmenaDannymi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogNastroikiObmenaDannymi(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_НастройкиОбменаДанными", args)
}

func (c *Client) CreateCatalogNastroikiObmenaDannymi(data CatalogNastroikiObmenaDannymi) (*CatalogNastroikiObmenaDannymi, error) {
	raw, err := c.createEntity("Catalog_НастройкиОбменаДанными", data)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiObmenaDannymi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogNastroikiObmenaDannymis(where Where) ([]CatalogNastroikiObmenaDannymi, error) {
	type ReturnObj struct {
		Value []CatalogNastroikiObmenaDannymi `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкиОбменаДанными", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektov(Key Guid, LineNumber Int) (*CatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_НастройкиОбменаДанными_НастройкаВариантовПоискаОбъектов", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektov(Key Guid, LineNumber Int, entity interface{}) (*CatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_НастройкиОбменаДанными_НастройкаВариантовПоискаОбъектов", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektov(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_НастройкиОбменаДанными_НастройкаВариантовПоискаОбъектов", args)
}

func (c *Client) CreateCatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektov(data CatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektov) (*CatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektov, error) {
	raw, err := c.createEntity("Catalog_НастройкиОбменаДанными_НастройкаВариантовПоискаОбъектов", data)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektovs(where Where) ([]CatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektov, error) {
	type ReturnObj struct {
		Value []CatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкиОбменаДанными_НастройкаВариантовПоискаОбъектов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykh(Key Guid, LineNumber Int) (*CatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykh, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_НастройкиОбменаДанными_НастройкаВыгрузкиДанных", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykh(Key Guid, LineNumber Int, entity interface{}) (*CatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykh, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_НастройкиОбменаДанными_НастройкаВыгрузкиДанных", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykh(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_НастройкиОбменаДанными_НастройкаВыгрузкиДанных", args)
}

func (c *Client) CreateCatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykh(data CatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykh) (*CatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykh, error) {
	raw, err := c.createEntity("Catalog_НастройкиОбменаДанными_НастройкаВыгрузкиДанных", data)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykhs(where Where) ([]CatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykh, error) {
	type ReturnObj struct {
		Value []CatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykh `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкиОбменаДанными_НастройкаВыгрузкиДанных", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkami(Key Guid, LineNumber Int) (*CatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkami, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_НастройкиОбменаДанными_СообщенияНеЯвляющиесяОшибками", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkami{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkami(Key Guid, LineNumber Int, entity interface{}) (*CatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkami, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_НастройкиОбменаДанными_СообщенияНеЯвляющиесяОшибками", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkami{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkami(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_НастройкиОбменаДанными_СообщенияНеЯвляющиесяОшибками", args)
}

func (c *Client) CreateCatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkami(data CatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkami) (*CatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkami, error) {
	raw, err := c.createEntity("Catalog_НастройкиОбменаДанными_СообщенияНеЯвляющиесяОшибками", data)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkami{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkamis(where Where) ([]CatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkami, error) {
	type ReturnObj struct {
		Value []CatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkami `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкиОбменаДанными_СообщенияНеЯвляющиесяОшибками", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentJournalBankovskieRaschetnyeDokumenty(Ref String, RefType String) (*DocumentJournalBankovskieRaschetnyeDokumenty, error) {
	args := []string{fmt.Sprintf("Ref='%s' ", url.PathEscape(string(Ref))), fmt.Sprintf("Ref_Type='%s' ", url.PathEscape(string(RefType)))}
	raw, err := c.getEntity("DocumentJournal_БанковскиеРасчетныеДокументы", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentJournalBankovskieRaschetnyeDokumenty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentJournalBankovskieRaschetnyeDokumenty(Ref String, RefType String, entity interface{}) (*DocumentJournalBankovskieRaschetnyeDokumenty, error) {
	args := []string{fmt.Sprintf("Ref='%s' ", url.PathEscape(string(Ref))), fmt.Sprintf("Ref_Type='%s' ", url.PathEscape(string(RefType)))}
	raw, err := c.updateEntity("DocumentJournal_БанковскиеРасчетныеДокументы", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentJournalBankovskieRaschetnyeDokumenty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentJournalBankovskieRaschetnyeDokumenty(Ref String, RefType String) error {
	args := []string{fmt.Sprintf("Ref='%s' ", url.PathEscape(string(Ref))), fmt.Sprintf("Ref_Type='%s' ", url.PathEscape(string(RefType)))}
	return c.removeEntity("DocumentJournal_БанковскиеРасчетныеДокументы", args)
}

func (c *Client) CreateDocumentJournalBankovskieRaschetnyeDokumenty(data DocumentJournalBankovskieRaschetnyeDokumenty) (*DocumentJournalBankovskieRaschetnyeDokumenty, error) {
	raw, err := c.createEntity("DocumentJournal_БанковскиеРасчетныеДокументы", data)
	if err != nil {
		return nil, err
	}
	result := DocumentJournalBankovskieRaschetnyeDokumenty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentJournalBankovskieRaschetnyeDokumentys(where Where) ([]DocumentJournalBankovskieRaschetnyeDokumenty, error) {
	type ReturnObj struct {
		Value []DocumentJournalBankovskieRaschetnyeDokumenty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("DocumentJournal_БанковскиеРасчетныеДокументы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentZamenaDiskontnoiKarty(Key Guid) (*DocumentZamenaDiskontnoiKarty, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ЗаменаДисконтнойКарты", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentZamenaDiskontnoiKarty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentZamenaDiskontnoiKarty(Key Guid, entity interface{}) (*DocumentZamenaDiskontnoiKarty, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ЗаменаДисконтнойКарты", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentZamenaDiskontnoiKarty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentZamenaDiskontnoiKarty(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ЗаменаДисконтнойКарты", args)
}

func (c *Client) CreateDocumentZamenaDiskontnoiKarty(data DocumentZamenaDiskontnoiKarty) (*DocumentZamenaDiskontnoiKarty, error) {
	raw, err := c.createEntity("Document_ЗаменаДисконтнойКарты", data)
	if err != nil {
		return nil, err
	}
	result := DocumentZamenaDiskontnoiKarty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentZamenaDiskontnoiKartys(where Where) ([]DocumentZamenaDiskontnoiKarty, error) {
	type ReturnObj struct {
		Value []DocumentZamenaDiskontnoiKarty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗаменаДисконтнойКарты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) ReturnToSupplier(Key Guid) (*ReturnToSupplier, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ВозвратТоваровПоставщику", args, []string{})
	if err != nil {
		return nil, err
	}
	result := ReturnToSupplier{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateReturnToSupplier(Key Guid, entity interface{}) (*ReturnToSupplier, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ВозвратТоваровПоставщику", args, entity)
	if err != nil {
		return nil, err
	}
	result := ReturnToSupplier{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveReturnToSupplier(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ВозвратТоваровПоставщику", args)
}

func (c *Client) CreateReturnToSupplier(data ReturnToSupplier) (*ReturnToSupplier, error) {
	raw, err := c.createEntity("Document_ВозвратТоваровПоставщику", data)
	if err != nil {
		return nil, err
	}
	result := ReturnToSupplier{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) ReturnToSuppliers(where Where) ([]ReturnToSupplier, error) {
	type ReturnObj struct {
		Value []ReturnToSupplier `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВозвратТоваровПоставщику", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentVozvratTovarovPostavshchikuTovary(Key Guid, LineNumber Int) (*DocumentVozvratTovarovPostavshchikuTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ВозвратТоваровПоставщику_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentVozvratTovarovPostavshchikuTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentVozvratTovarovPostavshchikuTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentVozvratTovarovPostavshchikuTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ВозвратТоваровПоставщику_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentVozvratTovarovPostavshchikuTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentVozvratTovarovPostavshchikuTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ВозвратТоваровПоставщику_Товары", args)
}

func (c *Client) CreateDocumentVozvratTovarovPostavshchikuTovary(data DocumentVozvratTovarovPostavshchikuTovary) (*DocumentVozvratTovarovPostavshchikuTovary, error) {
	raw, err := c.createEntity("Document_ВозвратТоваровПоставщику_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentVozvratTovarovPostavshchikuTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentVozvratTovarovPostavshchikuTovarys(where Where) ([]DocumentVozvratTovarovPostavshchikuTovary, error) {
	type ReturnObj struct {
		Value []DocumentVozvratTovarovPostavshchikuTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВозвратТоваровПоставщику_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentInventarizatsiiaTovarovNaSklade(Key Guid) (*DocumentInventarizatsiiaTovarovNaSklade, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ИнвентаризацияТоваровНаСкладе", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentInventarizatsiiaTovarovNaSklade{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentInventarizatsiiaTovarovNaSklade(Key Guid, entity interface{}) (*DocumentInventarizatsiiaTovarovNaSklade, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ИнвентаризацияТоваровНаСкладе", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentInventarizatsiiaTovarovNaSklade{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentInventarizatsiiaTovarovNaSklade(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ИнвентаризацияТоваровНаСкладе", args)
}

func (c *Client) CreateDocumentInventarizatsiiaTovarovNaSklade(data DocumentInventarizatsiiaTovarovNaSklade) (*DocumentInventarizatsiiaTovarovNaSklade, error) {
	raw, err := c.createEntity("Document_ИнвентаризацияТоваровНаСкладе", data)
	if err != nil {
		return nil, err
	}
	result := DocumentInventarizatsiiaTovarovNaSklade{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentInventarizatsiiaTovarovNaSklades(where Where) ([]DocumentInventarizatsiiaTovarovNaSklade, error) {
	type ReturnObj struct {
		Value []DocumentInventarizatsiiaTovarovNaSklade `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ИнвентаризацияТоваровНаСкладе", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentInventarizatsiiaTovarovNaSkladeTovary(Key Guid, LineNumber Int) (*DocumentInventarizatsiiaTovarovNaSkladeTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ИнвентаризацияТоваровНаСкладе_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentInventarizatsiiaTovarovNaSkladeTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentInventarizatsiiaTovarovNaSkladeTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentInventarizatsiiaTovarovNaSkladeTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ИнвентаризацияТоваровНаСкладе_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentInventarizatsiiaTovarovNaSkladeTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentInventarizatsiiaTovarovNaSkladeTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ИнвентаризацияТоваровНаСкладе_Товары", args)
}

func (c *Client) CreateDocumentInventarizatsiiaTovarovNaSkladeTovary(data DocumentInventarizatsiiaTovarovNaSkladeTovary) (*DocumentInventarizatsiiaTovarovNaSkladeTovary, error) {
	raw, err := c.createEntity("Document_ИнвентаризацияТоваровНаСкладе_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentInventarizatsiiaTovarovNaSkladeTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentInventarizatsiiaTovarovNaSkladeTovarys(where Where) ([]DocumentInventarizatsiiaTovarovNaSkladeTovary, error) {
	type ReturnObj struct {
		Value []DocumentInventarizatsiiaTovarovNaSkladeTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ИнвентаризацияТоваровНаСкладе_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii(Key Guid, LineNumber Int) (*DocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ИнвентаризацияТоваровНаСкладе_УсловияПроведенияИнвентаризации", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii(Key Guid, LineNumber Int, entity interface{}) (*DocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ИнвентаризацияТоваровНаСкладе_УсловияПроведенияИнвентаризации", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ИнвентаризацияТоваровНаСкладе_УсловияПроведенияИнвентаризации", args)
}

func (c *Client) CreateDocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii(data DocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii) (*DocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii, error) {
	raw, err := c.createEntity("Document_ИнвентаризацияТоваровНаСкладе_УсловияПроведенияИнвентаризации", data)
	if err != nil {
		return nil, err
	}
	result := DocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsiis(where Where) ([]DocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii, error) {
	type ReturnObj struct {
		Value []DocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ИнвентаризацияТоваровНаСкладе_УсловияПроведенияИнвентаризации", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentInventarizatsiiaTovarovNaSkladeSertifikaty(Key Guid, LineNumber Int) (*DocumentInventarizatsiiaTovarovNaSkladeSertifikaty, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ИнвентаризацияТоваровНаСкладе_Сертификаты", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentInventarizatsiiaTovarovNaSkladeSertifikaty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentInventarizatsiiaTovarovNaSkladeSertifikaty(Key Guid, LineNumber Int, entity interface{}) (*DocumentInventarizatsiiaTovarovNaSkladeSertifikaty, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ИнвентаризацияТоваровНаСкладе_Сертификаты", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentInventarizatsiiaTovarovNaSkladeSertifikaty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentInventarizatsiiaTovarovNaSkladeSertifikaty(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ИнвентаризацияТоваровНаСкладе_Сертификаты", args)
}

func (c *Client) CreateDocumentInventarizatsiiaTovarovNaSkladeSertifikaty(data DocumentInventarizatsiiaTovarovNaSkladeSertifikaty) (*DocumentInventarizatsiiaTovarovNaSkladeSertifikaty, error) {
	raw, err := c.createEntity("Document_ИнвентаризацияТоваровНаСкладе_Сертификаты", data)
	if err != nil {
		return nil, err
	}
	result := DocumentInventarizatsiiaTovarovNaSkladeSertifikaty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentInventarizatsiiaTovarovNaSkladeSertifikatys(where Where) ([]DocumentInventarizatsiiaTovarovNaSkladeSertifikaty, error) {
	type ReturnObj struct {
		Value []DocumentInventarizatsiiaTovarovNaSkladeSertifikaty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ИнвентаризацияТоваровНаСкладе_Сертификаты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentInventarizatsiiaTovarovNaSkladeTovaryVPuti(Key Guid, LineNumber Int) (*DocumentInventarizatsiiaTovarovNaSkladeTovaryVPuti, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ИнвентаризацияТоваровНаСкладе_ТоварыВПути", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentInventarizatsiiaTovarovNaSkladeTovaryVPuti{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentInventarizatsiiaTovarovNaSkladeTovaryVPuti(Key Guid, LineNumber Int, entity interface{}) (*DocumentInventarizatsiiaTovarovNaSkladeTovaryVPuti, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ИнвентаризацияТоваровНаСкладе_ТоварыВПути", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentInventarizatsiiaTovarovNaSkladeTovaryVPuti{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentInventarizatsiiaTovarovNaSkladeTovaryVPuti(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ИнвентаризацияТоваровНаСкладе_ТоварыВПути", args)
}

func (c *Client) CreateDocumentInventarizatsiiaTovarovNaSkladeTovaryVPuti(data DocumentInventarizatsiiaTovarovNaSkladeTovaryVPuti) (*DocumentInventarizatsiiaTovarovNaSkladeTovaryVPuti, error) {
	raw, err := c.createEntity("Document_ИнвентаризацияТоваровНаСкладе_ТоварыВПути", data)
	if err != nil {
		return nil, err
	}
	result := DocumentInventarizatsiiaTovarovNaSkladeTovaryVPuti{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentInventarizatsiiaTovarovNaSkladeTovaryVPutis(where Where) ([]DocumentInventarizatsiiaTovarovNaSkladeTovaryVPuti, error) {
	type ReturnObj struct {
		Value []DocumentInventarizatsiiaTovarovNaSkladeTovaryVPuti `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ИнвентаризацияТоваровНаСкладе_ТоварыВПути", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPrikhodnyiKassovyiOrder(Key Guid) (*DocumentPrikhodnyiKassovyiOrder, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ПриходныйКассовыйОрдер", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPrikhodnyiKassovyiOrder{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPrikhodnyiKassovyiOrder(Key Guid, entity interface{}) (*DocumentPrikhodnyiKassovyiOrder, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ПриходныйКассовыйОрдер", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPrikhodnyiKassovyiOrder{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPrikhodnyiKassovyiOrder(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ПриходныйКассовыйОрдер", args)
}

func (c *Client) CreateDocumentPrikhodnyiKassovyiOrder(data DocumentPrikhodnyiKassovyiOrder) (*DocumentPrikhodnyiKassovyiOrder, error) {
	raw, err := c.createEntity("Document_ПриходныйКассовыйОрдер", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPrikhodnyiKassovyiOrder{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPrikhodnyiKassovyiOrders(where Where) ([]DocumentPrikhodnyiKassovyiOrder, error) {
	type ReturnObj struct {
		Value []DocumentPrikhodnyiKassovyiOrder `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПриходныйКассовыйОрдер", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezha(Key Guid, LineNumber Int) (*DocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezha, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ПриходныйКассовыйОрдер_РасшифровкаПлатежа", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezha(Key Guid, LineNumber Int, entity interface{}) (*DocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezha, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ПриходныйКассовыйОрдер_РасшифровкаПлатежа", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezha(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ПриходныйКассовыйОрдер_РасшифровкаПлатежа", args)
}

func (c *Client) CreateDocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezha(data DocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezha) (*DocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezha, error) {
	raw, err := c.createEntity("Document_ПриходныйКассовыйОрдер_РасшифровкаПлатежа", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezhas(where Where) ([]DocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezha, error) {
	type ReturnObj struct {
		Value []DocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezha `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПриходныйКассовыйОрдер_РасшифровкаПлатежа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPrikhodnyiKassovyiOrderOplata(Key Guid, LineNumber Int) (*DocumentPrikhodnyiKassovyiOrderOplata, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ПриходныйКассовыйОрдер_Оплата", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPrikhodnyiKassovyiOrderOplata{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPrikhodnyiKassovyiOrderOplata(Key Guid, LineNumber Int, entity interface{}) (*DocumentPrikhodnyiKassovyiOrderOplata, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ПриходныйКассовыйОрдер_Оплата", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPrikhodnyiKassovyiOrderOplata{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPrikhodnyiKassovyiOrderOplata(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ПриходныйКассовыйОрдер_Оплата", args)
}

func (c *Client) CreateDocumentPrikhodnyiKassovyiOrderOplata(data DocumentPrikhodnyiKassovyiOrderOplata) (*DocumentPrikhodnyiKassovyiOrderOplata, error) {
	raw, err := c.createEntity("Document_ПриходныйКассовыйОрдер_Оплата", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPrikhodnyiKassovyiOrderOplata{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPrikhodnyiKassovyiOrderOplatas(where Where) ([]DocumentPrikhodnyiKassovyiOrderOplata, error) {
	type ReturnObj struct {
		Value []DocumentPrikhodnyiKassovyiOrderOplata `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПриходныйКассовыйОрдер_Оплата", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPrikhodnyiKassovyiOrderTovary(Key Guid, LineNumber Int) (*DocumentPrikhodnyiKassovyiOrderTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ПриходныйКассовыйОрдер_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPrikhodnyiKassovyiOrderTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPrikhodnyiKassovyiOrderTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentPrikhodnyiKassovyiOrderTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ПриходныйКассовыйОрдер_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPrikhodnyiKassovyiOrderTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPrikhodnyiKassovyiOrderTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ПриходныйКассовыйОрдер_Товары", args)
}

func (c *Client) CreateDocumentPrikhodnyiKassovyiOrderTovary(data DocumentPrikhodnyiKassovyiOrderTovary) (*DocumentPrikhodnyiKassovyiOrderTovary, error) {
	raw, err := c.createEntity("Document_ПриходныйКассовыйОрдер_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPrikhodnyiKassovyiOrderTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPrikhodnyiKassovyiOrderTovarys(where Where) ([]DocumentPrikhodnyiKassovyiOrderTovary, error) {
	type ReturnObj struct {
		Value []DocumentPrikhodnyiKassovyiOrderTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПриходныйКассовыйОрдер_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogPrichinyVozvrata(Key Guid) (*CatalogPrichinyVozvrata, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ПричиныВозврата", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogPrichinyVozvrata{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogPrichinyVozvrata(Key Guid, entity interface{}) (*CatalogPrichinyVozvrata, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ПричиныВозврата", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogPrichinyVozvrata{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogPrichinyVozvrata(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ПричиныВозврата", args)
}

func (c *Client) CreateCatalogPrichinyVozvrata(data CatalogPrichinyVozvrata) (*CatalogPrichinyVozvrata, error) {
	raw, err := c.createEntity("Catalog_ПричиныВозврата", data)
	if err != nil {
		return nil, err
	}
	result := CatalogPrichinyVozvrata{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogPrichinyVozvratas(where Where) ([]CatalogPrichinyVozvrata, error) {
	type ReturnObj struct {
		Value []CatalogPrichinyVozvrata `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ПричиныВозврата", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentDenezhnyiChek(Key Guid) (*DocumentDenezhnyiChek, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ДенежныйЧек", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentDenezhnyiChek{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentDenezhnyiChek(Key Guid, entity interface{}) (*DocumentDenezhnyiChek, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ДенежныйЧек", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentDenezhnyiChek{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentDenezhnyiChek(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ДенежныйЧек", args)
}

func (c *Client) CreateDocumentDenezhnyiChek(data DocumentDenezhnyiChek) (*DocumentDenezhnyiChek, error) {
	raw, err := c.createEntity("Document_ДенежныйЧек", data)
	if err != nil {
		return nil, err
	}
	result := DocumentDenezhnyiChek{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentDenezhnyiCheks(where Where) ([]DocumentDenezhnyiChek, error) {
	type ReturnObj struct {
		Value []DocumentDenezhnyiChek `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ДенежныйЧек", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentVozvratMaterialovIzProizvodstva(Key Guid) (*DocumentVozvratMaterialovIzProizvodstva, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ВозвратМатериаловИзПроизводства", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentVozvratMaterialovIzProizvodstva{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentVozvratMaterialovIzProizvodstva(Key Guid, entity interface{}) (*DocumentVozvratMaterialovIzProizvodstva, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ВозвратМатериаловИзПроизводства", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentVozvratMaterialovIzProizvodstva{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentVozvratMaterialovIzProizvodstva(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ВозвратМатериаловИзПроизводства", args)
}

func (c *Client) CreateDocumentVozvratMaterialovIzProizvodstva(data DocumentVozvratMaterialovIzProizvodstva) (*DocumentVozvratMaterialovIzProizvodstva, error) {
	raw, err := c.createEntity("Document_ВозвратМатериаловИзПроизводства", data)
	if err != nil {
		return nil, err
	}
	result := DocumentVozvratMaterialovIzProizvodstva{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentVozvratMaterialovIzProizvodstvas(where Where) ([]DocumentVozvratMaterialovIzProizvodstva, error) {
	type ReturnObj struct {
		Value []DocumentVozvratMaterialovIzProizvodstva `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВозвратМатериаловИзПроизводства", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentVozvratMaterialovIzProizvodstvaTovary(Key Guid, LineNumber Int) (*DocumentVozvratMaterialovIzProizvodstvaTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ВозвратМатериаловИзПроизводства_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentVozvratMaterialovIzProizvodstvaTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentVozvratMaterialovIzProizvodstvaTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentVozvratMaterialovIzProizvodstvaTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ВозвратМатериаловИзПроизводства_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentVozvratMaterialovIzProizvodstvaTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentVozvratMaterialovIzProizvodstvaTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ВозвратМатериаловИзПроизводства_Товары", args)
}

func (c *Client) CreateDocumentVozvratMaterialovIzProizvodstvaTovary(data DocumentVozvratMaterialovIzProizvodstvaTovary) (*DocumentVozvratMaterialovIzProizvodstvaTovary, error) {
	raw, err := c.createEntity("Document_ВозвратМатериаловИзПроизводства_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentVozvratMaterialovIzProizvodstvaTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentVozvratMaterialovIzProizvodstvaTovarys(where Where) ([]DocumentVozvratMaterialovIzProizvodstvaTovary, error) {
	type ReturnObj struct {
		Value []DocumentVozvratMaterialovIzProizvodstvaTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВозвратМатериаловИзПроизводства_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPereotsenkaTovarovOtdannykhNaKomissiiu(Key Guid) (*DocumentPereotsenkaTovarovOtdannykhNaKomissiiu, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ПереоценкаТоваровОтданныхНаКомиссию", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPereotsenkaTovarovOtdannykhNaKomissiiu{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPereotsenkaTovarovOtdannykhNaKomissiiu(Key Guid, entity interface{}) (*DocumentPereotsenkaTovarovOtdannykhNaKomissiiu, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ПереоценкаТоваровОтданныхНаКомиссию", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPereotsenkaTovarovOtdannykhNaKomissiiu{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPereotsenkaTovarovOtdannykhNaKomissiiu(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ПереоценкаТоваровОтданныхНаКомиссию", args)
}

func (c *Client) CreateDocumentPereotsenkaTovarovOtdannykhNaKomissiiu(data DocumentPereotsenkaTovarovOtdannykhNaKomissiiu) (*DocumentPereotsenkaTovarovOtdannykhNaKomissiiu, error) {
	raw, err := c.createEntity("Document_ПереоценкаТоваровОтданныхНаКомиссию", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPereotsenkaTovarovOtdannykhNaKomissiiu{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPereotsenkaTovarovOtdannykhNaKomissiius(where Where) ([]DocumentPereotsenkaTovarovOtdannykhNaKomissiiu, error) {
	type ReturnObj struct {
		Value []DocumentPereotsenkaTovarovOtdannykhNaKomissiiu `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПереоценкаТоваровОтданныхНаКомиссию", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovary(Key Guid, LineNumber Int) (*DocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ПереоценкаТоваровОтданныхНаКомиссию_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ПереоценкаТоваровОтданныхНаКомиссию_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ПереоценкаТоваровОтданныхНаКомиссию_Товары", args)
}

func (c *Client) CreateDocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovary(data DocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovary) (*DocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovary, error) {
	raw, err := c.createEntity("Document_ПереоценкаТоваровОтданныхНаКомиссию_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovarys(where Where) ([]DocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovary, error) {
	type ReturnObj struct {
		Value []DocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПереоценкаТоваровОтданныхНаКомиссию_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentVvodNachalnykhOstatkovPoRaskhodamUSN(Key Guid) (*DocumentVvodNachalnykhOstatkovPoRaskhodamUSN, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ВводНачальныхОстатковПоРасходамУСН", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentVvodNachalnykhOstatkovPoRaskhodamUSN{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentVvodNachalnykhOstatkovPoRaskhodamUSN(Key Guid, entity interface{}) (*DocumentVvodNachalnykhOstatkovPoRaskhodamUSN, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ВводНачальныхОстатковПоРасходамУСН", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentVvodNachalnykhOstatkovPoRaskhodamUSN{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentVvodNachalnykhOstatkovPoRaskhodamUSN(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ВводНачальныхОстатковПоРасходамУСН", args)
}

func (c *Client) CreateDocumentVvodNachalnykhOstatkovPoRaskhodamUSN(data DocumentVvodNachalnykhOstatkovPoRaskhodamUSN) (*DocumentVvodNachalnykhOstatkovPoRaskhodamUSN, error) {
	raw, err := c.createEntity("Document_ВводНачальныхОстатковПоРасходамУСН", data)
	if err != nil {
		return nil, err
	}
	result := DocumentVvodNachalnykhOstatkovPoRaskhodamUSN{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentVvodNachalnykhOstatkovPoRaskhodamUSNs(where Where) ([]DocumentVvodNachalnykhOstatkovPoRaskhodamUSN, error) {
	type ReturnObj struct {
		Value []DocumentVvodNachalnykhOstatkovPoRaskhodamUSN `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВводНачальныхОстатковПоРасходамУСН", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliami(Key Guid, LineNumber Int) (*DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliami, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ВводНачальныхОстатковПоРасходамУСН_ВзаиморасчетыСПокупателями", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliami{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliami(Key Guid, LineNumber Int, entity interface{}) (*DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliami, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ВводНачальныхОстатковПоРасходамУСН_ВзаиморасчетыСПокупателями", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliami{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliami(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ВводНачальныхОстатковПоРасходамУСН_ВзаиморасчетыСПокупателями", args)
}

func (c *Client) CreateDocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliami(data DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliami) (*DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliami, error) {
	raw, err := c.createEntity("Document_ВводНачальныхОстатковПоРасходамУСН_ВзаиморасчетыСПокупателями", data)
	if err != nil {
		return nil, err
	}
	result := DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliami{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliamis(where Where) ([]DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliami, error) {
	type ReturnObj struct {
		Value []DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliami `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВводНачальныхОстатковПоРасходамУСН_ВзаиморасчетыСПокупателями", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannye(Key Guid, LineNumber Int) (*DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannye, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ВводНачальныхОстатковПоРасходамУСН_ТоварыПроданные", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannye{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannye(Key Guid, LineNumber Int, entity interface{}) (*DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannye, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ВводНачальныхОстатковПоРасходамУСН_ТоварыПроданные", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannye{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannye(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ВводНачальныхОстатковПоРасходамУСН_ТоварыПроданные", args)
}

func (c *Client) CreateDocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannye(data DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannye) (*DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannye, error) {
	raw, err := c.createEntity("Document_ВводНачальныхОстатковПоРасходамУСН_ТоварыПроданные", data)
	if err != nil {
		return nil, err
	}
	result := DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannye{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannyes(where Where) ([]DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannye, error) {
	type ReturnObj struct {
		Value []DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannye `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВводНачальныхОстатковПоРасходамУСН_ТоварыПроданные", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikami(Key Guid, LineNumber Int) (*DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikami, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ВводНачальныхОстатковПоРасходамУСН_ВзаиморасчетыСПоставщиками", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikami{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikami(Key Guid, LineNumber Int, entity interface{}) (*DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikami, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ВводНачальныхОстатковПоРасходамУСН_ВзаиморасчетыСПоставщиками", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikami{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikami(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ВводНачальныхОстатковПоРасходамУСН_ВзаиморасчетыСПоставщиками", args)
}

func (c *Client) CreateDocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikami(data DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikami) (*DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikami, error) {
	raw, err := c.createEntity("Document_ВводНачальныхОстатковПоРасходамУСН_ВзаиморасчетыСПоставщиками", data)
	if err != nil {
		return nil, err
	}
	result := DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikami{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikamis(where Where) ([]DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikami, error) {
	type ReturnObj struct {
		Value []DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikami `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВводНачальныхОстатковПоРасходамУСН_ВзаиморасчетыСПоставщиками", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakh(Key Guid, LineNumber Int) (*DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakh, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ВводНачальныхОстатковПоРасходамУСН_ТоварыНаОстатках", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakh(Key Guid, LineNumber Int, entity interface{}) (*DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakh, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ВводНачальныхОстатковПоРасходамУСН_ТоварыНаОстатках", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakh(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ВводНачальныхОстатковПоРасходамУСН_ТоварыНаОстатках", args)
}

func (c *Client) CreateDocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakh(data DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakh) (*DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakh, error) {
	raw, err := c.createEntity("Document_ВводНачальныхОстатковПоРасходамУСН_ТоварыНаОстатках", data)
	if err != nil {
		return nil, err
	}
	result := DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakhs(where Where) ([]DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakh, error) {
	type ReturnObj struct {
		Value []DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakh `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВводНачальныхОстатковПоРасходамУСН_ТоварыНаОстатках", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentGTDImport(Key Guid) (*DocumentGTDImport, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ГТДИмпорт", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentGTDImport{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentGTDImport(Key Guid, entity interface{}) (*DocumentGTDImport, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ГТДИмпорт", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentGTDImport{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentGTDImport(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ГТДИмпорт", args)
}

func (c *Client) CreateDocumentGTDImport(data DocumentGTDImport) (*DocumentGTDImport, error) {
	raw, err := c.createEntity("Document_ГТДИмпорт", data)
	if err != nil {
		return nil, err
	}
	result := DocumentGTDImport{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentGTDImports(where Where) ([]DocumentGTDImport, error) {
	type ReturnObj struct {
		Value []DocumentGTDImport `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ГТДИмпорт", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentGTDImportRazdely(Key Guid, LineNumber Int) (*DocumentGTDImportRazdely, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ГТДИмпорт_Разделы", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentGTDImportRazdely{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentGTDImportRazdely(Key Guid, LineNumber Int, entity interface{}) (*DocumentGTDImportRazdely, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ГТДИмпорт_Разделы", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentGTDImportRazdely{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentGTDImportRazdely(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ГТДИмпорт_Разделы", args)
}

func (c *Client) CreateDocumentGTDImportRazdely(data DocumentGTDImportRazdely) (*DocumentGTDImportRazdely, error) {
	raw, err := c.createEntity("Document_ГТДИмпорт_Разделы", data)
	if err != nil {
		return nil, err
	}
	result := DocumentGTDImportRazdely{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentGTDImportRazdelys(where Where) ([]DocumentGTDImportRazdely, error) {
	type ReturnObj struct {
		Value []DocumentGTDImportRazdely `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ГТДИмпорт_Разделы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentGTDImportTovary(Key Guid, LineNumber Int) (*DocumentGTDImportTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ГТДИмпорт_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentGTDImportTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentGTDImportTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentGTDImportTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ГТДИмпорт_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentGTDImportTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentGTDImportTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ГТДИмпорт_Товары", args)
}

func (c *Client) CreateDocumentGTDImportTovary(data DocumentGTDImportTovary) (*DocumentGTDImportTovary, error) {
	raw, err := c.createEntity("Document_ГТДИмпорт_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentGTDImportTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentGTDImportTovarys(where Where) ([]DocumentGTDImportTovary, error) {
	type ReturnObj struct {
		Value []DocumentGTDImportTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ГТДИмпорт_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentAktSverki(Key Guid) (*DocumentAktSverki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_АктСверки", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentAktSverki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentAktSverki(Key Guid, entity interface{}) (*DocumentAktSverki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_АктСверки", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentAktSverki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentAktSverki(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_АктСверки", args)
}

func (c *Client) CreateDocumentAktSverki(data DocumentAktSverki) (*DocumentAktSverki, error) {
	raw, err := c.createEntity("Document_АктСверки", data)
	if err != nil {
		return nil, err
	}
	result := DocumentAktSverki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentAktSverkis(where Where) ([]DocumentAktSverki, error) {
	type ReturnObj struct {
		Value []DocumentAktSverki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_АктСверки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentAktSverkiTovary(Key Guid, LineNumber Int) (*DocumentAktSverkiTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_АктСверки_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentAktSverkiTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentAktSverkiTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentAktSverkiTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_АктСверки_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentAktSverkiTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentAktSverkiTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_АктСверки_Товары", args)
}

func (c *Client) CreateDocumentAktSverkiTovary(data DocumentAktSverkiTovary) (*DocumentAktSverkiTovary, error) {
	raw, err := c.createEntity("Document_АктСверки_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentAktSverkiTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentAktSverkiTovarys(where Where) ([]DocumentAktSverkiTovary, error) {
	type ReturnObj struct {
		Value []DocumentAktSverkiTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_АктСверки_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogFaily(Key Guid) (*CatalogFaily, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_Файлы", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogFaily{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogFaily(Key Guid, entity interface{}) (*CatalogFaily, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_Файлы", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogFaily{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogFaily(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_Файлы", args)
}

func (c *Client) CreateCatalogFaily(data CatalogFaily) (*CatalogFaily, error) {
	raw, err := c.createEntity("Catalog_Файлы", data)
	if err != nil {
		return nil, err
	}
	result := CatalogFaily{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogFailys(where Where) ([]CatalogFaily, error) {
	type ReturnObj struct {
		Value []CatalogFaily `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Файлы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogFailyDopolnitelnyeRekvizity(Key Guid, LineNumber Int) (*CatalogFailyDopolnitelnyeRekvizity, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_Файлы_ДополнительныеРеквизиты", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogFailyDopolnitelnyeRekvizity{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogFailyDopolnitelnyeRekvizity(Key Guid, LineNumber Int, entity interface{}) (*CatalogFailyDopolnitelnyeRekvizity, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_Файлы_ДополнительныеРеквизиты", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogFailyDopolnitelnyeRekvizity{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogFailyDopolnitelnyeRekvizity(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_Файлы_ДополнительныеРеквизиты", args)
}

func (c *Client) CreateCatalogFailyDopolnitelnyeRekvizity(data CatalogFailyDopolnitelnyeRekvizity) (*CatalogFailyDopolnitelnyeRekvizity, error) {
	raw, err := c.createEntity("Catalog_Файлы_ДополнительныеРеквизиты", data)
	if err != nil {
		return nil, err
	}
	result := CatalogFailyDopolnitelnyeRekvizity{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogFailyDopolnitelnyeRekvizitys(where Where) ([]CatalogFailyDopolnitelnyeRekvizity, error) {
	type ReturnObj struct {
		Value []CatalogFailyDopolnitelnyeRekvizity `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Файлы_ДополнительныеРеквизиты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogFailySertifikatyShifrovaniia(Key Guid, LineNumber Int) (*CatalogFailySertifikatyShifrovaniia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_Файлы_СертификатыШифрования", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogFailySertifikatyShifrovaniia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogFailySertifikatyShifrovaniia(Key Guid, LineNumber Int, entity interface{}) (*CatalogFailySertifikatyShifrovaniia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_Файлы_СертификатыШифрования", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogFailySertifikatyShifrovaniia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogFailySertifikatyShifrovaniia(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_Файлы_СертификатыШифрования", args)
}

func (c *Client) CreateCatalogFailySertifikatyShifrovaniia(data CatalogFailySertifikatyShifrovaniia) (*CatalogFailySertifikatyShifrovaniia, error) {
	raw, err := c.createEntity("Catalog_Файлы_СертификатыШифрования", data)
	if err != nil {
		return nil, err
	}
	result := CatalogFailySertifikatyShifrovaniia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogFailySertifikatyShifrovaniias(where Where) ([]CatalogFailySertifikatyShifrovaniia, error) {
	type ReturnObj struct {
		Value []CatalogFailySertifikatyShifrovaniia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Файлы_СертификатыШифрования", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogUchetnyeZapisiElektronnoiPochty(Key Guid) (*CatalogUchetnyeZapisiElektronnoiPochty, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_УчетныеЗаписиЭлектроннойПочты", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogUchetnyeZapisiElektronnoiPochty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogUchetnyeZapisiElektronnoiPochty(Key Guid, entity interface{}) (*CatalogUchetnyeZapisiElektronnoiPochty, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_УчетныеЗаписиЭлектроннойПочты", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogUchetnyeZapisiElektronnoiPochty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogUchetnyeZapisiElektronnoiPochty(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_УчетныеЗаписиЭлектроннойПочты", args)
}

func (c *Client) CreateCatalogUchetnyeZapisiElektronnoiPochty(data CatalogUchetnyeZapisiElektronnoiPochty) (*CatalogUchetnyeZapisiElektronnoiPochty, error) {
	raw, err := c.createEntity("Catalog_УчетныеЗаписиЭлектроннойПочты", data)
	if err != nil {
		return nil, err
	}
	result := CatalogUchetnyeZapisiElektronnoiPochty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogUchetnyeZapisiElektronnoiPochtys(where Where) ([]CatalogUchetnyeZapisiElektronnoiPochty, error) {
	type ReturnObj struct {
		Value []CatalogUchetnyeZapisiElektronnoiPochty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_УчетныеЗаписиЭлектроннойПочты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisi(Key Guid, LineNumber Int) (*CatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisi, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_УчетныеЗаписиЭлектроннойПочты_ДоступКУчетнойЗаписи", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisi(Key Guid, LineNumber Int, entity interface{}) (*CatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisi, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_УчетныеЗаписиЭлектроннойПочты_ДоступКУчетнойЗаписи", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisi(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_УчетныеЗаписиЭлектроннойПочты_ДоступКУчетнойЗаписи", args)
}

func (c *Client) CreateCatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisi(data CatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisi) (*CatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisi, error) {
	raw, err := c.createEntity("Catalog_УчетныеЗаписиЭлектроннойПочты_ДоступКУчетнойЗаписи", data)
	if err != nil {
		return nil, err
	}
	result := CatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisis(where Where) ([]CatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisi, error) {
	type ReturnObj struct {
		Value []CatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisi `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_УчетныеЗаписиЭлектроннойПочты_ДоступКУчетнойЗаписи", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPlaniruemoePostuplenieDenezhnykhSredstv(Key Guid) (*DocumentPlaniruemoePostuplenieDenezhnykhSredstv, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ПланируемоеПоступлениеДенежныхСредств", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPlaniruemoePostuplenieDenezhnykhSredstv{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPlaniruemoePostuplenieDenezhnykhSredstv(Key Guid, entity interface{}) (*DocumentPlaniruemoePostuplenieDenezhnykhSredstv, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ПланируемоеПоступлениеДенежныхСредств", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPlaniruemoePostuplenieDenezhnykhSredstv{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPlaniruemoePostuplenieDenezhnykhSredstv(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ПланируемоеПоступлениеДенежныхСредств", args)
}

func (c *Client) CreateDocumentPlaniruemoePostuplenieDenezhnykhSredstv(data DocumentPlaniruemoePostuplenieDenezhnykhSredstv) (*DocumentPlaniruemoePostuplenieDenezhnykhSredstv, error) {
	raw, err := c.createEntity("Document_ПланируемоеПоступлениеДенежныхСредств", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPlaniruemoePostuplenieDenezhnykhSredstv{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPlaniruemoePostuplenieDenezhnykhSredstvs(where Where) ([]DocumentPlaniruemoePostuplenieDenezhnykhSredstv, error) {
	type ReturnObj struct {
		Value []DocumentPlaniruemoePostuplenieDenezhnykhSredstv `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПланируемоеПоступлениеДенежныхСредств", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezha(Key Guid, LineNumber Int) (*DocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezha, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ПланируемоеПоступлениеДенежныхСредств_РасшифровкаПлатежа", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezha(Key Guid, LineNumber Int, entity interface{}) (*DocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezha, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ПланируемоеПоступлениеДенежныхСредств_РасшифровкаПлатежа", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezha(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ПланируемоеПоступлениеДенежныхСредств_РасшифровкаПлатежа", args)
}

func (c *Client) CreateDocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezha(data DocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezha) (*DocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezha, error) {
	raw, err := c.createEntity("Document_ПланируемоеПоступлениеДенежныхСредств_РасшифровкаПлатежа", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezhas(where Where) ([]DocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezha, error) {
	type ReturnObj struct {
		Value []DocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezha `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПланируемоеПоступлениеДенежныхСредств_РасшифровкаПлатежа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPreiskurantTsenNaKamni(Key Guid) (*DocumentPreiskurantTsenNaKamni, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ПрейскурантЦенНаКамни", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPreiskurantTsenNaKamni{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPreiskurantTsenNaKamni(Key Guid, entity interface{}) (*DocumentPreiskurantTsenNaKamni, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ПрейскурантЦенНаКамни", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPreiskurantTsenNaKamni{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPreiskurantTsenNaKamni(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ПрейскурантЦенНаКамни", args)
}

func (c *Client) CreateDocumentPreiskurantTsenNaKamni(data DocumentPreiskurantTsenNaKamni) (*DocumentPreiskurantTsenNaKamni, error) {
	raw, err := c.createEntity("Document_ПрейскурантЦенНаКамни", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPreiskurantTsenNaKamni{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPreiskurantTsenNaKamnis(where Where) ([]DocumentPreiskurantTsenNaKamni, error) {
	type ReturnObj struct {
		Value []DocumentPreiskurantTsenNaKamni `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПрейскурантЦенНаКамни", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) Purchase(Key Guid) (*Purchase, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_СкупкаТоваров", args, []string{})
	if err != nil {
		return nil, err
	}
	result := Purchase{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdatePurchase(Key Guid, entity interface{}) (*Purchase, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_СкупкаТоваров", args, entity)
	if err != nil {
		return nil, err
	}
	result := Purchase{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemovePurchase(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_СкупкаТоваров", args)
}

func (c *Client) CreatePurchase(data Purchase) (*Purchase, error) {
	raw, err := c.createEntity("Document_СкупкаТоваров", data)
	if err != nil {
		return nil, err
	}
	result := Purchase{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) Purchases(where Where) ([]Purchase, error) {
	type ReturnObj struct {
		Value []Purchase `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СкупкаТоваров", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentSkupkaTovarovTovary(Key Guid, LineNumber Int) (*DocumentSkupkaTovarovTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_СкупкаТоваров_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentSkupkaTovarovTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentSkupkaTovarovTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentSkupkaTovarovTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_СкупкаТоваров_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentSkupkaTovarovTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentSkupkaTovarovTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_СкупкаТоваров_Товары", args)
}

func (c *Client) CreateDocumentSkupkaTovarovTovary(data DocumentSkupkaTovarovTovary) (*DocumentSkupkaTovarovTovary, error) {
	raw, err := c.createEntity("Document_СкупкаТоваров_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentSkupkaTovarovTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentSkupkaTovarovTovarys(where Where) ([]DocumentSkupkaTovarovTovary, error) {
	type ReturnObj struct {
		Value []DocumentSkupkaTovarovTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СкупкаТоваров_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentSchetFakturaPoluchennyi(Key Guid) (*DocumentSchetFakturaPoluchennyi, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_СчетФактураПолученный", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentSchetFakturaPoluchennyi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentSchetFakturaPoluchennyi(Key Guid, entity interface{}) (*DocumentSchetFakturaPoluchennyi, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_СчетФактураПолученный", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentSchetFakturaPoluchennyi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentSchetFakturaPoluchennyi(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_СчетФактураПолученный", args)
}

func (c *Client) CreateDocumentSchetFakturaPoluchennyi(data DocumentSchetFakturaPoluchennyi) (*DocumentSchetFakturaPoluchennyi, error) {
	raw, err := c.createEntity("Document_СчетФактураПолученный", data)
	if err != nil {
		return nil, err
	}
	result := DocumentSchetFakturaPoluchennyi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentSchetFakturaPoluchennyis(where Where) ([]DocumentSchetFakturaPoluchennyi, error) {
	type ReturnObj struct {
		Value []DocumentSchetFakturaPoluchennyi `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СчетФактураПолученный", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliam(Key Guid, LineNumber Int) (*DocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliam, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_СчетФактураПолученный_СчетаФактурыВыданныеПокупателям", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliam{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliam(Key Guid, LineNumber Int, entity interface{}) (*DocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliam, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_СчетФактураПолученный_СчетаФактурыВыданныеПокупателям", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliam{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliam(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_СчетФактураПолученный_СчетаФактурыВыданныеПокупателям", args)
}

func (c *Client) CreateDocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliam(data DocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliam) (*DocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliam, error) {
	raw, err := c.createEntity("Document_СчетФактураПолученный_СчетаФактурыВыданныеПокупателям", data)
	if err != nil {
		return nil, err
	}
	result := DocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliam{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliams(where Where) ([]DocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliam, error) {
	type ReturnObj struct {
		Value []DocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliam `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СчетФактураПолученный_СчетаФактурыВыданныеПокупателям", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentAktKhimicheskogoAnalizaMetalla(Key Guid) (*DocumentAktKhimicheskogoAnalizaMetalla, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_АктХимическогоАнализаМеталла", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentAktKhimicheskogoAnalizaMetalla{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentAktKhimicheskogoAnalizaMetalla(Key Guid, entity interface{}) (*DocumentAktKhimicheskogoAnalizaMetalla, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_АктХимическогоАнализаМеталла", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentAktKhimicheskogoAnalizaMetalla{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentAktKhimicheskogoAnalizaMetalla(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_АктХимическогоАнализаМеталла", args)
}

func (c *Client) CreateDocumentAktKhimicheskogoAnalizaMetalla(data DocumentAktKhimicheskogoAnalizaMetalla) (*DocumentAktKhimicheskogoAnalizaMetalla, error) {
	raw, err := c.createEntity("Document_АктХимическогоАнализаМеталла", data)
	if err != nil {
		return nil, err
	}
	result := DocumentAktKhimicheskogoAnalizaMetalla{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentAktKhimicheskogoAnalizaMetallas(where Where) ([]DocumentAktKhimicheskogoAnalizaMetalla, error) {
	type ReturnObj struct {
		Value []DocumentAktKhimicheskogoAnalizaMetalla `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_АктХимическогоАнализаМеталла", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogfmKartochkaKontragenta(Key Guid) (*CatalogfmKartochkaKontragenta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_фмКарточкаКонтрагента", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogfmKartochkaKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogfmKartochkaKontragenta(Key Guid, entity interface{}) (*CatalogfmKartochkaKontragenta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_фмКарточкаКонтрагента", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogfmKartochkaKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogfmKartochkaKontragenta(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_фмКарточкаКонтрагента", args)
}

func (c *Client) CreateCatalogfmKartochkaKontragenta(data CatalogfmKartochkaKontragenta) (*CatalogfmKartochkaKontragenta, error) {
	raw, err := c.createEntity("Catalog_фмКарточкаКонтрагента", data)
	if err != nil {
		return nil, err
	}
	result := CatalogfmKartochkaKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogfmKartochkaKontragentas(where Where) ([]CatalogfmKartochkaKontragenta, error) {
	type ReturnObj struct {
		Value []CatalogfmKartochkaKontragenta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_фмКарточкаКонтрагента", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogfmKartochkaKontragentaDannyeKontragenta(Key Guid, LineNumber Int) (*CatalogfmKartochkaKontragentaDannyeKontragenta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_фмКарточкаКонтрагента_ДанныеКонтрагента", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogfmKartochkaKontragentaDannyeKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogfmKartochkaKontragentaDannyeKontragenta(Key Guid, LineNumber Int, entity interface{}) (*CatalogfmKartochkaKontragentaDannyeKontragenta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_фмКарточкаКонтрагента_ДанныеКонтрагента", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogfmKartochkaKontragentaDannyeKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogfmKartochkaKontragentaDannyeKontragenta(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_фмКарточкаКонтрагента_ДанныеКонтрагента", args)
}

func (c *Client) CreateCatalogfmKartochkaKontragentaDannyeKontragenta(data CatalogfmKartochkaKontragentaDannyeKontragenta) (*CatalogfmKartochkaKontragentaDannyeKontragenta, error) {
	raw, err := c.createEntity("Catalog_фмКарточкаКонтрагента_ДанныеКонтрагента", data)
	if err != nil {
		return nil, err
	}
	result := CatalogfmKartochkaKontragentaDannyeKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogfmKartochkaKontragentaDannyeKontragentas(where Where) ([]CatalogfmKartochkaKontragentaDannyeKontragenta, error) {
	type ReturnObj struct {
		Value []CatalogfmKartochkaKontragentaDannyeKontragenta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_фмКарточкаКонтрагента_ДанныеКонтрагента", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentSpisanieProsrochennykhSertifikatov(Key Guid) (*DocumentSpisanieProsrochennykhSertifikatov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_СписаниеПросроченныхСертификатов", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentSpisanieProsrochennykhSertifikatov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentSpisanieProsrochennykhSertifikatov(Key Guid, entity interface{}) (*DocumentSpisanieProsrochennykhSertifikatov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_СписаниеПросроченныхСертификатов", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentSpisanieProsrochennykhSertifikatov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentSpisanieProsrochennykhSertifikatov(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_СписаниеПросроченныхСертификатов", args)
}

func (c *Client) CreateDocumentSpisanieProsrochennykhSertifikatov(data DocumentSpisanieProsrochennykhSertifikatov) (*DocumentSpisanieProsrochennykhSertifikatov, error) {
	raw, err := c.createEntity("Document_СписаниеПросроченныхСертификатов", data)
	if err != nil {
		return nil, err
	}
	result := DocumentSpisanieProsrochennykhSertifikatov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentSpisanieProsrochennykhSertifikatovs(where Where) ([]DocumentSpisanieProsrochennykhSertifikatov, error) {
	type ReturnObj struct {
		Value []DocumentSpisanieProsrochennykhSertifikatov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СписаниеПросроченныхСертификатов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentSpisanieProsrochennykhSertifikatovSertifikaty(Key Guid, LineNumber Int) (*DocumentSpisanieProsrochennykhSertifikatovSertifikaty, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_СписаниеПросроченныхСертификатов_Сертификаты", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentSpisanieProsrochennykhSertifikatovSertifikaty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentSpisanieProsrochennykhSertifikatovSertifikaty(Key Guid, LineNumber Int, entity interface{}) (*DocumentSpisanieProsrochennykhSertifikatovSertifikaty, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_СписаниеПросроченныхСертификатов_Сертификаты", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentSpisanieProsrochennykhSertifikatovSertifikaty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentSpisanieProsrochennykhSertifikatovSertifikaty(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_СписаниеПросроченныхСертификатов_Сертификаты", args)
}

func (c *Client) CreateDocumentSpisanieProsrochennykhSertifikatovSertifikaty(data DocumentSpisanieProsrochennykhSertifikatovSertifikaty) (*DocumentSpisanieProsrochennykhSertifikatovSertifikaty, error) {
	raw, err := c.createEntity("Document_СписаниеПросроченныхСертификатов_Сертификаты", data)
	if err != nil {
		return nil, err
	}
	result := DocumentSpisanieProsrochennykhSertifikatovSertifikaty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentSpisanieProsrochennykhSertifikatovSertifikatys(where Where) ([]DocumentSpisanieProsrochennykhSertifikatovSertifikaty, error) {
	type ReturnObj struct {
		Value []DocumentSpisanieProsrochennykhSertifikatovSertifikaty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СписаниеПросроченныхСертификатов_Сертификаты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentZakrytieAvansovPoGrafikuPlatezhei(Key Guid) (*DocumentZakrytieAvansovPoGrafikuPlatezhei, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ЗакрытиеАвансовПоГрафикуПлатежей", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentZakrytieAvansovPoGrafikuPlatezhei{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentZakrytieAvansovPoGrafikuPlatezhei(Key Guid, entity interface{}) (*DocumentZakrytieAvansovPoGrafikuPlatezhei, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ЗакрытиеАвансовПоГрафикуПлатежей", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentZakrytieAvansovPoGrafikuPlatezhei{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentZakrytieAvansovPoGrafikuPlatezhei(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ЗакрытиеАвансовПоГрафикуПлатежей", args)
}

func (c *Client) CreateDocumentZakrytieAvansovPoGrafikuPlatezhei(data DocumentZakrytieAvansovPoGrafikuPlatezhei) (*DocumentZakrytieAvansovPoGrafikuPlatezhei, error) {
	raw, err := c.createEntity("Document_ЗакрытиеАвансовПоГрафикуПлатежей", data)
	if err != nil {
		return nil, err
	}
	result := DocumentZakrytieAvansovPoGrafikuPlatezhei{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentZakrytieAvansovPoGrafikuPlatezheis(where Where) ([]DocumentZakrytieAvansovPoGrafikuPlatezhei, error) {
	type ReturnObj struct {
		Value []DocumentZakrytieAvansovPoGrafikuPlatezhei `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗакрытиеАвансовПоГрафикуПлатежей", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentZakrytieAvansovPoGrafikuPlatezheiKontragenty(Key Guid, LineNumber Int) (*DocumentZakrytieAvansovPoGrafikuPlatezheiKontragenty, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ЗакрытиеАвансовПоГрафикуПлатежей_Контрагенты", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentZakrytieAvansovPoGrafikuPlatezheiKontragenty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentZakrytieAvansovPoGrafikuPlatezheiKontragenty(Key Guid, LineNumber Int, entity interface{}) (*DocumentZakrytieAvansovPoGrafikuPlatezheiKontragenty, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ЗакрытиеАвансовПоГрафикуПлатежей_Контрагенты", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentZakrytieAvansovPoGrafikuPlatezheiKontragenty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentZakrytieAvansovPoGrafikuPlatezheiKontragenty(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ЗакрытиеАвансовПоГрафикуПлатежей_Контрагенты", args)
}

func (c *Client) CreateDocumentZakrytieAvansovPoGrafikuPlatezheiKontragenty(data DocumentZakrytieAvansovPoGrafikuPlatezheiKontragenty) (*DocumentZakrytieAvansovPoGrafikuPlatezheiKontragenty, error) {
	raw, err := c.createEntity("Document_ЗакрытиеАвансовПоГрафикуПлатежей_Контрагенты", data)
	if err != nil {
		return nil, err
	}
	result := DocumentZakrytieAvansovPoGrafikuPlatezheiKontragenty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentZakrytieAvansovPoGrafikuPlatezheiKontragentys(where Where) ([]DocumentZakrytieAvansovPoGrafikuPlatezheiKontragenty, error) {
	type ReturnObj struct {
		Value []DocumentZakrytieAvansovPoGrafikuPlatezheiKontragenty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗакрытиеАвансовПоГрафикуПлатежей_Контрагенты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogTipySistemNalogooblozheniiaKKT(Key Guid) (*CatalogTipySistemNalogooblozheniiaKKT, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ТипыСистемНалогообложенияККТ", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogTipySistemNalogooblozheniiaKKT{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogTipySistemNalogooblozheniiaKKT(Key Guid, entity interface{}) (*CatalogTipySistemNalogooblozheniiaKKT, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ТипыСистемНалогообложенияККТ", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogTipySistemNalogooblozheniiaKKT{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogTipySistemNalogooblozheniiaKKT(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ТипыСистемНалогообложенияККТ", args)
}

func (c *Client) CreateCatalogTipySistemNalogooblozheniiaKKT(data CatalogTipySistemNalogooblozheniiaKKT) (*CatalogTipySistemNalogooblozheniiaKKT, error) {
	raw, err := c.createEntity("Catalog_ТипыСистемНалогообложенияККТ", data)
	if err != nil {
		return nil, err
	}
	result := CatalogTipySistemNalogooblozheniiaKKT{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogTipySistemNalogooblozheniiaKKTs(where Where) ([]CatalogTipySistemNalogooblozheniiaKKT, error) {
	type ReturnObj struct {
		Value []CatalogTipySistemNalogooblozheniiaKKT `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ТипыСистемНалогообложенияККТ", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentAkkreditivPeredannyi(Key Guid) (*DocumentAkkreditivPeredannyi, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_АккредитивПереданный", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentAkkreditivPeredannyi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentAkkreditivPeredannyi(Key Guid, entity interface{}) (*DocumentAkkreditivPeredannyi, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_АккредитивПереданный", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentAkkreditivPeredannyi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentAkkreditivPeredannyi(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_АккредитивПереданный", args)
}

func (c *Client) CreateDocumentAkkreditivPeredannyi(data DocumentAkkreditivPeredannyi) (*DocumentAkkreditivPeredannyi, error) {
	raw, err := c.createEntity("Document_АккредитивПереданный", data)
	if err != nil {
		return nil, err
	}
	result := DocumentAkkreditivPeredannyi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentAkkreditivPeredannyis(where Where) ([]DocumentAkkreditivPeredannyi, error) {
	type ReturnObj struct {
		Value []DocumentAkkreditivPeredannyi `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_АккредитивПереданный", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentAkkreditivPeredannyiRasshifrovkaPlatezha(Key Guid, LineNumber Int) (*DocumentAkkreditivPeredannyiRasshifrovkaPlatezha, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_АккредитивПереданный_РасшифровкаПлатежа", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentAkkreditivPeredannyiRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentAkkreditivPeredannyiRasshifrovkaPlatezha(Key Guid, LineNumber Int, entity interface{}) (*DocumentAkkreditivPeredannyiRasshifrovkaPlatezha, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_АккредитивПереданный_РасшифровкаПлатежа", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentAkkreditivPeredannyiRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentAkkreditivPeredannyiRasshifrovkaPlatezha(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_АккредитивПереданный_РасшифровкаПлатежа", args)
}

func (c *Client) CreateDocumentAkkreditivPeredannyiRasshifrovkaPlatezha(data DocumentAkkreditivPeredannyiRasshifrovkaPlatezha) (*DocumentAkkreditivPeredannyiRasshifrovkaPlatezha, error) {
	raw, err := c.createEntity("Document_АккредитивПереданный_РасшифровкаПлатежа", data)
	if err != nil {
		return nil, err
	}
	result := DocumentAkkreditivPeredannyiRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentAkkreditivPeredannyiRasshifrovkaPlatezhas(where Where) ([]DocumentAkkreditivPeredannyiRasshifrovkaPlatezha, error) {
	type ReturnObj struct {
		Value []DocumentAkkreditivPeredannyiRasshifrovkaPlatezha `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_АккредитивПереданный_РасшифровкаПлатежа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentAkkreditivPeredannyiRekvizityKontragenta(Key Guid, LineNumber Int) (*DocumentAkkreditivPeredannyiRekvizityKontragenta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_АккредитивПереданный_РеквизитыКонтрагента", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentAkkreditivPeredannyiRekvizityKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentAkkreditivPeredannyiRekvizityKontragenta(Key Guid, LineNumber Int, entity interface{}) (*DocumentAkkreditivPeredannyiRekvizityKontragenta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_АккредитивПереданный_РеквизитыКонтрагента", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentAkkreditivPeredannyiRekvizityKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentAkkreditivPeredannyiRekvizityKontragenta(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_АккредитивПереданный_РеквизитыКонтрагента", args)
}

func (c *Client) CreateDocumentAkkreditivPeredannyiRekvizityKontragenta(data DocumentAkkreditivPeredannyiRekvizityKontragenta) (*DocumentAkkreditivPeredannyiRekvizityKontragenta, error) {
	raw, err := c.createEntity("Document_АккредитивПереданный_РеквизитыКонтрагента", data)
	if err != nil {
		return nil, err
	}
	result := DocumentAkkreditivPeredannyiRekvizityKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentAkkreditivPeredannyiRekvizityKontragentas(where Where) ([]DocumentAkkreditivPeredannyiRekvizityKontragenta, error) {
	type ReturnObj struct {
		Value []DocumentAkkreditivPeredannyiRekvizityKontragenta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_АккредитивПереданный_РеквизитыКонтрагента", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) Supplier(Key Guid) (*Supplier, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_Контрагенты", args, []string{})
	if err != nil {
		return nil, err
	}
	result := Supplier{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateSupplier(Key Guid, entity interface{}) (*Supplier, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_Контрагенты", args, entity)
	if err != nil {
		return nil, err
	}
	result := Supplier{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveSupplier(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_Контрагенты", args)
}

func (c *Client) CreateSupplier(data Supplier) (*Supplier, error) {
	raw, err := c.createEntity("Catalog_Контрагенты", data)
	if err != nil {
		return nil, err
	}
	result := Supplier{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) Suppliers(where Where) ([]Supplier, error) {
	type ReturnObj struct {
		Value []Supplier `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Контрагенты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogKontragentyVidyDeiatelnosti(Key Guid, LineNumber Int) (*CatalogKontragentyVidyDeiatelnosti, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_Контрагенты_ВидыДеятельности", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogKontragentyVidyDeiatelnosti{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogKontragentyVidyDeiatelnosti(Key Guid, LineNumber Int, entity interface{}) (*CatalogKontragentyVidyDeiatelnosti, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_Контрагенты_ВидыДеятельности", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogKontragentyVidyDeiatelnosti{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogKontragentyVidyDeiatelnosti(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_Контрагенты_ВидыДеятельности", args)
}

func (c *Client) CreateCatalogKontragentyVidyDeiatelnosti(data CatalogKontragentyVidyDeiatelnosti) (*CatalogKontragentyVidyDeiatelnosti, error) {
	raw, err := c.createEntity("Catalog_Контрагенты_ВидыДеятельности", data)
	if err != nil {
		return nil, err
	}
	result := CatalogKontragentyVidyDeiatelnosti{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogKontragentyVidyDeiatelnostis(where Where) ([]CatalogKontragentyVidyDeiatelnosti, error) {
	type ReturnObj struct {
		Value []CatalogKontragentyVidyDeiatelnosti `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Контрагенты_ВидыДеятельности", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentInformatsionnoeSoobshchenie(Key Guid) (*DocumentInformatsionnoeSoobshchenie, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ИнформационноеСообщение", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentInformatsionnoeSoobshchenie{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentInformatsionnoeSoobshchenie(Key Guid, entity interface{}) (*DocumentInformatsionnoeSoobshchenie, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ИнформационноеСообщение", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentInformatsionnoeSoobshchenie{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentInformatsionnoeSoobshchenie(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ИнформационноеСообщение", args)
}

func (c *Client) CreateDocumentInformatsionnoeSoobshchenie(data DocumentInformatsionnoeSoobshchenie) (*DocumentInformatsionnoeSoobshchenie, error) {
	raw, err := c.createEntity("Document_ИнформационноеСообщение", data)
	if err != nil {
		return nil, err
	}
	result := DocumentInformatsionnoeSoobshchenie{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentInformatsionnoeSoobshchenies(where Where) ([]DocumentInformatsionnoeSoobshchenie, error) {
	type ReturnObj struct {
		Value []DocumentInformatsionnoeSoobshchenie `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ИнформационноеСообщение", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogVlozheniiaElektronnykhPisem(Key Guid) (*CatalogVlozheniiaElektronnykhPisem, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ВложенияЭлектронныхПисем", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogVlozheniiaElektronnykhPisem{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogVlozheniiaElektronnykhPisem(Key Guid, entity interface{}) (*CatalogVlozheniiaElektronnykhPisem, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ВложенияЭлектронныхПисем", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogVlozheniiaElektronnykhPisem{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogVlozheniiaElektronnykhPisem(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ВложенияЭлектронныхПисем", args)
}

func (c *Client) CreateCatalogVlozheniiaElektronnykhPisem(data CatalogVlozheniiaElektronnykhPisem) (*CatalogVlozheniiaElektronnykhPisem, error) {
	raw, err := c.createEntity("Catalog_ВложенияЭлектронныхПисем", data)
	if err != nil {
		return nil, err
	}
	result := CatalogVlozheniiaElektronnykhPisem{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogVlozheniiaElektronnykhPisems(where Where) ([]CatalogVlozheniiaElektronnykhPisem, error) {
	type ReturnObj struct {
		Value []CatalogVlozheniiaElektronnykhPisem `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ВложенияЭлектронныхПисем", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPlatezhnoeTrebovanieVystavlennoe(Key Guid) (*DocumentPlatezhnoeTrebovanieVystavlennoe, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ПлатежноеТребованиеВыставленное", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnoeTrebovanieVystavlennoe{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPlatezhnoeTrebovanieVystavlennoe(Key Guid, entity interface{}) (*DocumentPlatezhnoeTrebovanieVystavlennoe, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ПлатежноеТребованиеВыставленное", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnoeTrebovanieVystavlennoe{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPlatezhnoeTrebovanieVystavlennoe(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ПлатежноеТребованиеВыставленное", args)
}

func (c *Client) CreateDocumentPlatezhnoeTrebovanieVystavlennoe(data DocumentPlatezhnoeTrebovanieVystavlennoe) (*DocumentPlatezhnoeTrebovanieVystavlennoe, error) {
	raw, err := c.createEntity("Document_ПлатежноеТребованиеВыставленное", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnoeTrebovanieVystavlennoe{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPlatezhnoeTrebovanieVystavlennoes(where Where) ([]DocumentPlatezhnoeTrebovanieVystavlennoe, error) {
	type ReturnObj struct {
		Value []DocumentPlatezhnoeTrebovanieVystavlennoe `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПлатежноеТребованиеВыставленное", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezha(Key Guid, LineNumber Int) (*DocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezha, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ПлатежноеТребованиеВыставленное_РасшифровкаПлатежа", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezha(Key Guid, LineNumber Int, entity interface{}) (*DocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezha, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ПлатежноеТребованиеВыставленное_РасшифровкаПлатежа", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezha(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ПлатежноеТребованиеВыставленное_РасшифровкаПлатежа", args)
}

func (c *Client) CreateDocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezha(data DocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezha) (*DocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezha, error) {
	raw, err := c.createEntity("Document_ПлатежноеТребованиеВыставленное_РасшифровкаПлатежа", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezhas(where Where) ([]DocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezha, error) {
	type ReturnObj struct {
		Value []DocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezha `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПлатежноеТребованиеВыставленное_РасшифровкаПлатежа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragenta(Key Guid, LineNumber Int) (*DocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragenta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ПлатежноеТребованиеВыставленное_РеквизитыКонтрагента", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragenta(Key Guid, LineNumber Int, entity interface{}) (*DocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragenta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ПлатежноеТребованиеВыставленное_РеквизитыКонтрагента", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragenta(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ПлатежноеТребованиеВыставленное_РеквизитыКонтрагента", args)
}

func (c *Client) CreateDocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragenta(data DocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragenta) (*DocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragenta, error) {
	raw, err := c.createEntity("Document_ПлатежноеТребованиеВыставленное_РеквизитыКонтрагента", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragentas(where Where) ([]DocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragenta, error) {
	type ReturnObj struct {
		Value []DocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragenta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПлатежноеТребованиеВыставленное_РеквизитыКонтрагента", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentMarketingovaiaAktsiia(Key Guid) (*DocumentMarketingovaiaAktsiia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_МаркетинговаяАкция", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentMarketingovaiaAktsiia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentMarketingovaiaAktsiia(Key Guid, entity interface{}) (*DocumentMarketingovaiaAktsiia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_МаркетинговаяАкция", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentMarketingovaiaAktsiia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentMarketingovaiaAktsiia(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_МаркетинговаяАкция", args)
}

func (c *Client) CreateDocumentMarketingovaiaAktsiia(data DocumentMarketingovaiaAktsiia) (*DocumentMarketingovaiaAktsiia, error) {
	raw, err := c.createEntity("Document_МаркетинговаяАкция", data)
	if err != nil {
		return nil, err
	}
	result := DocumentMarketingovaiaAktsiia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentMarketingovaiaAktsiias(where Where) ([]DocumentMarketingovaiaAktsiia, error) {
	type ReturnObj struct {
		Value []DocumentMarketingovaiaAktsiia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_МаркетинговаяАкция", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentMarketingovaiaAktsiiaMagaziny(Key Guid, LineNumber Int) (*DocumentMarketingovaiaAktsiiaMagaziny, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_МаркетинговаяАкция_Магазины", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentMarketingovaiaAktsiiaMagaziny{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentMarketingovaiaAktsiiaMagaziny(Key Guid, LineNumber Int, entity interface{}) (*DocumentMarketingovaiaAktsiiaMagaziny, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_МаркетинговаяАкция_Магазины", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentMarketingovaiaAktsiiaMagaziny{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentMarketingovaiaAktsiiaMagaziny(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_МаркетинговаяАкция_Магазины", args)
}

func (c *Client) CreateDocumentMarketingovaiaAktsiiaMagaziny(data DocumentMarketingovaiaAktsiiaMagaziny) (*DocumentMarketingovaiaAktsiiaMagaziny, error) {
	raw, err := c.createEntity("Document_МаркетинговаяАкция_Магазины", data)
	if err != nil {
		return nil, err
	}
	result := DocumentMarketingovaiaAktsiiaMagaziny{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentMarketingovaiaAktsiiaMagazinys(where Where) ([]DocumentMarketingovaiaAktsiiaMagaziny, error) {
	type ReturnObj struct {
		Value []DocumentMarketingovaiaAktsiiaMagaziny `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_МаркетинговаяАкция_Магазины", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentMarketingovaiaAktsiiaSkidkiNatsenki(Key Guid, LineNumber Int) (*DocumentMarketingovaiaAktsiiaSkidkiNatsenki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_МаркетинговаяАкция_СкидкиНаценки", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentMarketingovaiaAktsiiaSkidkiNatsenki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentMarketingovaiaAktsiiaSkidkiNatsenki(Key Guid, LineNumber Int, entity interface{}) (*DocumentMarketingovaiaAktsiiaSkidkiNatsenki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_МаркетинговаяАкция_СкидкиНаценки", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentMarketingovaiaAktsiiaSkidkiNatsenki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentMarketingovaiaAktsiiaSkidkiNatsenki(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_МаркетинговаяАкция_СкидкиНаценки", args)
}

func (c *Client) CreateDocumentMarketingovaiaAktsiiaSkidkiNatsenki(data DocumentMarketingovaiaAktsiiaSkidkiNatsenki) (*DocumentMarketingovaiaAktsiiaSkidkiNatsenki, error) {
	raw, err := c.createEntity("Document_МаркетинговаяАкция_СкидкиНаценки", data)
	if err != nil {
		return nil, err
	}
	result := DocumentMarketingovaiaAktsiiaSkidkiNatsenki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentMarketingovaiaAktsiiaSkidkiNatsenkis(where Where) ([]DocumentMarketingovaiaAktsiiaSkidkiNatsenki, error) {
	type ReturnObj struct {
		Value []DocumentMarketingovaiaAktsiiaSkidkiNatsenki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_МаркетинговаяАкция_СкидкиНаценки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupa(Key Guid, LineNumber Int) (*DocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupa, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_МаркетинговаяАкция_НаборыЗначенийДоступа", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupa(Key Guid, LineNumber Int, entity interface{}) (*DocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupa, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_МаркетинговаяАкция_НаборыЗначенийДоступа", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupa(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_МаркетинговаяАкция_НаборыЗначенийДоступа", args)
}

func (c *Client) CreateDocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupa(data DocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupa) (*DocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupa, error) {
	raw, err := c.createEntity("Document_МаркетинговаяАкция_НаборыЗначенийДоступа", data)
	if err != nil {
		return nil, err
	}
	result := DocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupas(where Where) ([]DocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupa, error) {
	type ReturnObj struct {
		Value []DocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupa `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_МаркетинговаяАкция_НаборыЗначенийДоступа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogStsenariiObmenovDannymi(Key Guid) (*CatalogStsenariiObmenovDannymi, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_СценарииОбменовДанными", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogStsenariiObmenovDannymi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogStsenariiObmenovDannymi(Key Guid, entity interface{}) (*CatalogStsenariiObmenovDannymi, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_СценарииОбменовДанными", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogStsenariiObmenovDannymi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogStsenariiObmenovDannymi(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_СценарииОбменовДанными", args)
}

func (c *Client) CreateCatalogStsenariiObmenovDannymi(data CatalogStsenariiObmenovDannymi) (*CatalogStsenariiObmenovDannymi, error) {
	raw, err := c.createEntity("Catalog_СценарииОбменовДанными", data)
	if err != nil {
		return nil, err
	}
	result := CatalogStsenariiObmenovDannymi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogStsenariiObmenovDannymis(where Where) ([]CatalogStsenariiObmenovDannymi, error) {
	type ReturnObj struct {
		Value []CatalogStsenariiObmenovDannymi `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_СценарииОбменовДанными", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogStsenariiObmenovDannymiNastroikiObmena(Key Guid, LineNumber Int) (*CatalogStsenariiObmenovDannymiNastroikiObmena, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_СценарииОбменовДанными_НастройкиОбмена", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogStsenariiObmenovDannymiNastroikiObmena{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogStsenariiObmenovDannymiNastroikiObmena(Key Guid, LineNumber Int, entity interface{}) (*CatalogStsenariiObmenovDannymiNastroikiObmena, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_СценарииОбменовДанными_НастройкиОбмена", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogStsenariiObmenovDannymiNastroikiObmena{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogStsenariiObmenovDannymiNastroikiObmena(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_СценарииОбменовДанными_НастройкиОбмена", args)
}

func (c *Client) CreateCatalogStsenariiObmenovDannymiNastroikiObmena(data CatalogStsenariiObmenovDannymiNastroikiObmena) (*CatalogStsenariiObmenovDannymiNastroikiObmena, error) {
	raw, err := c.createEntity("Catalog_СценарииОбменовДанными_НастройкиОбмена", data)
	if err != nil {
		return nil, err
	}
	result := CatalogStsenariiObmenovDannymiNastroikiObmena{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogStsenariiObmenovDannymiNastroikiObmenas(where Where) ([]CatalogStsenariiObmenovDannymiNastroikiObmena, error) {
	type ReturnObj struct {
		Value []CatalogStsenariiObmenovDannymiNastroikiObmena `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_СценарииОбменовДанными_НастройкиОбмена", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) Item(Key Guid) (*Item, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_Номенклатура", args, []string{})
	if err != nil {
		return nil, err
	}
	result := Item{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateItem(Key Guid, entity interface{}) (*Item, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_Номенклатура", args, entity)
	if err != nil {
		return nil, err
	}
	result := Item{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveItem(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_Номенклатура", args)
}

func (c *Client) CreateItem(data Item) (*Item, error) {
	raw, err := c.createEntity("Catalog_Номенклатура", data)
	if err != nil {
		return nil, err
	}
	result := Item{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) Items(where Where) ([]Item, error) {
	type ReturnObj struct {
		Value []Item `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Номенклатура", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogNomenklaturaSostavLigatury(Key Guid, LineNumber Int) (*CatalogNomenklaturaSostavLigatury, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_Номенклатура_СоставЛигатуры", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogNomenklaturaSostavLigatury{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogNomenklaturaSostavLigatury(Key Guid, LineNumber Int, entity interface{}) (*CatalogNomenklaturaSostavLigatury, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_Номенклатура_СоставЛигатуры", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogNomenklaturaSostavLigatury{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogNomenklaturaSostavLigatury(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_Номенклатура_СоставЛигатуры", args)
}

func (c *Client) CreateCatalogNomenklaturaSostavLigatury(data CatalogNomenklaturaSostavLigatury) (*CatalogNomenklaturaSostavLigatury, error) {
	raw, err := c.createEntity("Catalog_Номенклатура_СоставЛигатуры", data)
	if err != nil {
		return nil, err
	}
	result := CatalogNomenklaturaSostavLigatury{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogNomenklaturaSostavLigaturys(where Where) ([]CatalogNomenklaturaSostavLigatury, error) {
	type ReturnObj struct {
		Value []CatalogNomenklaturaSostavLigatury `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Номенклатура_СоставЛигатуры", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentOpros(Key Guid) (*DocumentOpros, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_Опрос", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentOpros{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentOpros(Key Guid, entity interface{}) (*DocumentOpros, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_Опрос", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentOpros{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentOpros(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_Опрос", args)
}

func (c *Client) CreateDocumentOpros(data DocumentOpros) (*DocumentOpros, error) {
	raw, err := c.createEntity("Document_Опрос", data)
	if err != nil {
		return nil, err
	}
	result := DocumentOpros{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentOpross(where Where) ([]DocumentOpros, error) {
	type ReturnObj struct {
		Value []DocumentOpros `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_Опрос", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentOprosVoprosy(Key Guid, LineNumber Int) (*DocumentOprosVoprosy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_Опрос_Вопросы", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentOprosVoprosy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentOprosVoprosy(Key Guid, LineNumber Int, entity interface{}) (*DocumentOprosVoprosy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_Опрос_Вопросы", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentOprosVoprosy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentOprosVoprosy(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_Опрос_Вопросы", args)
}

func (c *Client) CreateDocumentOprosVoprosy(data DocumentOprosVoprosy) (*DocumentOprosVoprosy, error) {
	raw, err := c.createEntity("Document_Опрос_Вопросы", data)
	if err != nil {
		return nil, err
	}
	result := DocumentOprosVoprosy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentOprosVoprosys(where Where) ([]DocumentOprosVoprosy, error) {
	type ReturnObj struct {
		Value []DocumentOprosVoprosy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_Опрос_Вопросы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentOprosSostavnoiOtvet(Key Guid, LineNumber Int) (*DocumentOprosSostavnoiOtvet, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_Опрос_СоставнойОтвет", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentOprosSostavnoiOtvet{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentOprosSostavnoiOtvet(Key Guid, LineNumber Int, entity interface{}) (*DocumentOprosSostavnoiOtvet, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_Опрос_СоставнойОтвет", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentOprosSostavnoiOtvet{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentOprosSostavnoiOtvet(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_Опрос_СоставнойОтвет", args)
}

func (c *Client) CreateDocumentOprosSostavnoiOtvet(data DocumentOprosSostavnoiOtvet) (*DocumentOprosSostavnoiOtvet, error) {
	raw, err := c.createEntity("Document_Опрос_СоставнойОтвет", data)
	if err != nil {
		return nil, err
	}
	result := DocumentOprosSostavnoiOtvet{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentOprosSostavnoiOtvets(where Where) ([]DocumentOprosSostavnoiOtvet, error) {
	type ReturnObj struct {
		Value []DocumentOprosSostavnoiOtvet `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_Опрос_СоставнойОтвет", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogGruppyPoluchateleiSkidki(Key Guid) (*CatalogGruppyPoluchateleiSkidki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ГруппыПолучателейСкидки", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogGruppyPoluchateleiSkidki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogGruppyPoluchateleiSkidki(Key Guid, entity interface{}) (*CatalogGruppyPoluchateleiSkidki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ГруппыПолучателейСкидки", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogGruppyPoluchateleiSkidki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogGruppyPoluchateleiSkidki(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ГруппыПолучателейСкидки", args)
}

func (c *Client) CreateCatalogGruppyPoluchateleiSkidki(data CatalogGruppyPoluchateleiSkidki) (*CatalogGruppyPoluchateleiSkidki, error) {
	raw, err := c.createEntity("Catalog_ГруппыПолучателейСкидки", data)
	if err != nil {
		return nil, err
	}
	result := CatalogGruppyPoluchateleiSkidki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogGruppyPoluchateleiSkidkis(where Where) ([]CatalogGruppyPoluchateleiSkidki, error) {
	type ReturnObj struct {
		Value []CatalogGruppyPoluchateleiSkidki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ГруппыПолучателейСкидки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) Reassessment(Key Guid) (*Reassessment, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ПереоценкаТоваровВНТТ", args, []string{})
	if err != nil {
		return nil, err
	}
	result := Reassessment{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateReassessment(Key Guid, entity interface{}) (*Reassessment, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ПереоценкаТоваровВНТТ", args, entity)
	if err != nil {
		return nil, err
	}
	result := Reassessment{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveReassessment(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ПереоценкаТоваровВНТТ", args)
}

func (c *Client) CreateReassessment(data Reassessment) (*Reassessment, error) {
	raw, err := c.createEntity("Document_ПереоценкаТоваровВНТТ", data)
	if err != nil {
		return nil, err
	}
	result := Reassessment{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) Reassessments(where Where) ([]Reassessment, error) {
	type ReturnObj struct {
		Value []Reassessment `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПереоценкаТоваровВНТТ", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPereotsenkaTovarovVNTTTovary(Key Guid, LineNumber Int) (*DocumentPereotsenkaTovarovVNTTTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ПереоценкаТоваровВНТТ_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPereotsenkaTovarovVNTTTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPereotsenkaTovarovVNTTTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentPereotsenkaTovarovVNTTTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ПереоценкаТоваровВНТТ_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPereotsenkaTovarovVNTTTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPereotsenkaTovarovVNTTTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ПереоценкаТоваровВНТТ_Товары", args)
}

func (c *Client) CreateDocumentPereotsenkaTovarovVNTTTovary(data DocumentPereotsenkaTovarovVNTTTovary) (*DocumentPereotsenkaTovarovVNTTTovary, error) {
	raw, err := c.createEntity("Document_ПереоценкаТоваровВНТТ_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPereotsenkaTovarovVNTTTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPereotsenkaTovarovVNTTTovarys(where Where) ([]DocumentPereotsenkaTovarovVNTTTovary, error) {
	type ReturnObj struct {
		Value []DocumentPereotsenkaTovarovVNTTTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПереоценкаТоваровВНТТ_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogTomaKhraneniiaFailov(Key Guid) (*CatalogTomaKhraneniiaFailov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ТомаХраненияФайлов", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogTomaKhraneniiaFailov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogTomaKhraneniiaFailov(Key Guid, entity interface{}) (*CatalogTomaKhraneniiaFailov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ТомаХраненияФайлов", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogTomaKhraneniiaFailov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogTomaKhraneniiaFailov(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ТомаХраненияФайлов", args)
}

func (c *Client) CreateCatalogTomaKhraneniiaFailov(data CatalogTomaKhraneniiaFailov) (*CatalogTomaKhraneniiaFailov, error) {
	raw, err := c.createEntity("Catalog_ТомаХраненияФайлов", data)
	if err != nil {
		return nil, err
	}
	result := CatalogTomaKhraneniiaFailov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogTomaKhraneniiaFailovs(where Where) ([]CatalogTomaKhraneniiaFailov, error) {
	type ReturnObj struct {
		Value []CatalogTomaKhraneniiaFailov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ТомаХраненияФайлов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentJournalProizvodstvennyeDokumenty(Ref String, RefType String) (*DocumentJournalProizvodstvennyeDokumenty, error) {
	args := []string{fmt.Sprintf("Ref='%s' ", url.PathEscape(string(Ref))), fmt.Sprintf("Ref_Type='%s' ", url.PathEscape(string(RefType)))}
	raw, err := c.getEntity("DocumentJournal_ПроизводственныеДокументы", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentJournalProizvodstvennyeDokumenty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentJournalProizvodstvennyeDokumenty(Ref String, RefType String, entity interface{}) (*DocumentJournalProizvodstvennyeDokumenty, error) {
	args := []string{fmt.Sprintf("Ref='%s' ", url.PathEscape(string(Ref))), fmt.Sprintf("Ref_Type='%s' ", url.PathEscape(string(RefType)))}
	raw, err := c.updateEntity("DocumentJournal_ПроизводственныеДокументы", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentJournalProizvodstvennyeDokumenty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentJournalProizvodstvennyeDokumenty(Ref String, RefType String) error {
	args := []string{fmt.Sprintf("Ref='%s' ", url.PathEscape(string(Ref))), fmt.Sprintf("Ref_Type='%s' ", url.PathEscape(string(RefType)))}
	return c.removeEntity("DocumentJournal_ПроизводственныеДокументы", args)
}

func (c *Client) CreateDocumentJournalProizvodstvennyeDokumenty(data DocumentJournalProizvodstvennyeDokumenty) (*DocumentJournalProizvodstvennyeDokumenty, error) {
	raw, err := c.createEntity("DocumentJournal_ПроизводственныеДокументы", data)
	if err != nil {
		return nil, err
	}
	result := DocumentJournalProizvodstvennyeDokumenty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentJournalProizvodstvennyeDokumentys(where Where) ([]DocumentJournalProizvodstvennyeDokumenty, error) {
	type ReturnObj struct {
		Value []DocumentJournalProizvodstvennyeDokumenty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("DocumentJournal_ПроизводственныеДокументы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentIzmeneniePravDostupa(Key Guid) (*DocumentIzmeneniePravDostupa, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ИзменениеПравДоступа", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentIzmeneniePravDostupa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentIzmeneniePravDostupa(Key Guid, entity interface{}) (*DocumentIzmeneniePravDostupa, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ИзменениеПравДоступа", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentIzmeneniePravDostupa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentIzmeneniePravDostupa(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ИзменениеПравДоступа", args)
}

func (c *Client) CreateDocumentIzmeneniePravDostupa(data DocumentIzmeneniePravDostupa) (*DocumentIzmeneniePravDostupa, error) {
	raw, err := c.createEntity("Document_ИзменениеПравДоступа", data)
	if err != nil {
		return nil, err
	}
	result := DocumentIzmeneniePravDostupa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentIzmeneniePravDostupas(where Where) ([]DocumentIzmeneniePravDostupa, error) {
	type ReturnObj struct {
		Value []DocumentIzmeneniePravDostupa `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ИзменениеПравДоступа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogNastroikaAssortimentnoiMatritsy(Key Guid) (*CatalogNastroikaAssortimentnoiMatritsy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_НастройкаАссортиментнойМатрицы", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikaAssortimentnoiMatritsy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogNastroikaAssortimentnoiMatritsy(Key Guid, entity interface{}) (*CatalogNastroikaAssortimentnoiMatritsy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_НастройкаАссортиментнойМатрицы", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikaAssortimentnoiMatritsy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogNastroikaAssortimentnoiMatritsy(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_НастройкаАссортиментнойМатрицы", args)
}

func (c *Client) CreateCatalogNastroikaAssortimentnoiMatritsy(data CatalogNastroikaAssortimentnoiMatritsy) (*CatalogNastroikaAssortimentnoiMatritsy, error) {
	raw, err := c.createEntity("Catalog_НастройкаАссортиментнойМатрицы", data)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikaAssortimentnoiMatritsy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogNastroikaAssortimentnoiMatritsys(where Where) ([]CatalogNastroikaAssortimentnoiMatritsy, error) {
	type ReturnObj struct {
		Value []CatalogNastroikaAssortimentnoiMatritsy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкаАссортиментнойМатрицы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGrupp(Key Guid, LineNumber Int) (*CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGrupp, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_НастройкаАссортиментнойМатрицы_НастройкаТоварныхГрупп", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGrupp{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGrupp(Key Guid, LineNumber Int, entity interface{}) (*CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGrupp, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_НастройкаАссортиментнойМатрицы_НастройкаТоварныхГрупп", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGrupp{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGrupp(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_НастройкаАссортиментнойМатрицы_НастройкаТоварныхГрупп", args)
}

func (c *Client) CreateCatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGrupp(data CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGrupp) (*CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGrupp, error) {
	raw, err := c.createEntity("Catalog_НастройкаАссортиментнойМатрицы_НастройкаТоварныхГрупп", data)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGrupp{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGrupps(where Where) ([]CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGrupp, error) {
	type ReturnObj struct {
		Value []CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGrupp `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкаАссортиментнойМатрицы_НастройкаТоварныхГрупп", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategorii(Key Guid, LineNumber Int) (*CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategorii, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_НастройкаАссортиментнойМатрицы_НастройкаТоварныхКатегорий", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategorii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategorii(Key Guid, LineNumber Int, entity interface{}) (*CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategorii, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_НастройкаАссортиментнойМатрицы_НастройкаТоварныхКатегорий", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategorii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategorii(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_НастройкаАссортиментнойМатрицы_НастройкаТоварныхКатегорий", args)
}

func (c *Client) CreateCatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategorii(data CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategorii) (*CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategorii, error) {
	raw, err := c.createEntity("Catalog_НастройкаАссортиментнойМатрицы_НастройкаТоварныхКатегорий", data)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategorii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategoriis(where Where) ([]CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategorii, error) {
	type ReturnObj struct {
		Value []CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategorii `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкаАссортиментнойМатрицы_НастройкаТоварныхКатегорий", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsii(Key Guid, LineNumber Int) (*CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsii, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_НастройкаАссортиментнойМатрицы_НастройкаТоварныхПозиций", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsii(Key Guid, LineNumber Int, entity interface{}) (*CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsii, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_НастройкаАссортиментнойМатрицы_НастройкаТоварныхПозиций", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsii(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_НастройкаАссортиментнойМатрицы_НастройкаТоварныхПозиций", args)
}

func (c *Client) CreateCatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsii(data CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsii) (*CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsii, error) {
	raw, err := c.createEntity("Catalog_НастройкаАссортиментнойМатрицы_НастройкаТоварныхПозиций", data)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsiis(where Where) ([]CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsii, error) {
	type ReturnObj struct {
		Value []CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsii `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкаАссортиментнойМатрицы_НастройкаТоварныхПозиций", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentJournalDokumentyKontragentov(Ref String, RefType String) (*DocumentJournalDokumentyKontragentov, error) {
	args := []string{fmt.Sprintf("Ref='%s' ", url.PathEscape(string(Ref))), fmt.Sprintf("Ref_Type='%s' ", url.PathEscape(string(RefType)))}
	raw, err := c.getEntity("DocumentJournal_ДокументыКонтрагентов", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentJournalDokumentyKontragentov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentJournalDokumentyKontragentov(Ref String, RefType String, entity interface{}) (*DocumentJournalDokumentyKontragentov, error) {
	args := []string{fmt.Sprintf("Ref='%s' ", url.PathEscape(string(Ref))), fmt.Sprintf("Ref_Type='%s' ", url.PathEscape(string(RefType)))}
	raw, err := c.updateEntity("DocumentJournal_ДокументыКонтрагентов", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentJournalDokumentyKontragentov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentJournalDokumentyKontragentov(Ref String, RefType String) error {
	args := []string{fmt.Sprintf("Ref='%s' ", url.PathEscape(string(Ref))), fmt.Sprintf("Ref_Type='%s' ", url.PathEscape(string(RefType)))}
	return c.removeEntity("DocumentJournal_ДокументыКонтрагентов", args)
}

func (c *Client) CreateDocumentJournalDokumentyKontragentov(data DocumentJournalDokumentyKontragentov) (*DocumentJournalDokumentyKontragentov, error) {
	raw, err := c.createEntity("DocumentJournal_ДокументыКонтрагентов", data)
	if err != nil {
		return nil, err
	}
	result := DocumentJournalDokumentyKontragentov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentJournalDokumentyKontragentovs(where Where) ([]DocumentJournalDokumentyKontragentov, error) {
	type ReturnObj struct {
		Value []DocumentJournalDokumentyKontragentov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("DocumentJournal_ДокументыКонтрагентов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) MoveInstance(Key Guid) (*MoveInstance, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ПеремещениеТоваров", args, []string{})
	if err != nil {
		return nil, err
	}
	result := MoveInstance{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateMoveInstance(Key Guid, entity interface{}) (*MoveInstance, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ПеремещениеТоваров", args, entity)
	if err != nil {
		return nil, err
	}
	result := MoveInstance{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveMoveInstance(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ПеремещениеТоваров", args)
}

func (c *Client) CreateMoveInstance(data MoveInstance) (*MoveInstance, error) {
	raw, err := c.createEntity("Document_ПеремещениеТоваров", data)
	if err != nil {
		return nil, err
	}
	result := MoveInstance{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) MoveInstances(where Where) ([]MoveInstance, error) {
	type ReturnObj struct {
		Value []MoveInstance `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПеремещениеТоваров", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPeremeshchenieTovarovSertifikaty(Key Guid, LineNumber Int) (*DocumentPeremeshchenieTovarovSertifikaty, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ПеремещениеТоваров_Сертификаты", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPeremeshchenieTovarovSertifikaty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPeremeshchenieTovarovSertifikaty(Key Guid, LineNumber Int, entity interface{}) (*DocumentPeremeshchenieTovarovSertifikaty, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ПеремещениеТоваров_Сертификаты", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPeremeshchenieTovarovSertifikaty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPeremeshchenieTovarovSertifikaty(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ПеремещениеТоваров_Сертификаты", args)
}

func (c *Client) CreateDocumentPeremeshchenieTovarovSertifikaty(data DocumentPeremeshchenieTovarovSertifikaty) (*DocumentPeremeshchenieTovarovSertifikaty, error) {
	raw, err := c.createEntity("Document_ПеремещениеТоваров_Сертификаты", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPeremeshchenieTovarovSertifikaty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPeremeshchenieTovarovSertifikatys(where Where) ([]DocumentPeremeshchenieTovarovSertifikaty, error) {
	type ReturnObj struct {
		Value []DocumentPeremeshchenieTovarovSertifikaty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПеремещениеТоваров_Сертификаты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPeremeshchenieTovarovTovary(Key Guid, LineNumber Int) (*DocumentPeremeshchenieTovarovTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ПеремещениеТоваров_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPeremeshchenieTovarovTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPeremeshchenieTovarovTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentPeremeshchenieTovarovTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ПеремещениеТоваров_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPeremeshchenieTovarovTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPeremeshchenieTovarovTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ПеремещениеТоваров_Товары", args)
}

func (c *Client) CreateDocumentPeremeshchenieTovarovTovary(data DocumentPeremeshchenieTovarovTovary) (*DocumentPeremeshchenieTovarovTovary, error) {
	raw, err := c.createEntity("Document_ПеремещениеТоваров_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPeremeshchenieTovarovTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPeremeshchenieTovarovTovarys(where Where) ([]DocumentPeremeshchenieTovarovTovary, error) {
	type ReturnObj struct {
		Value []DocumentPeremeshchenieTovarovTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПеремещениеТоваров_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPeremeshchenieTovarovSpisokZaiavok(Key Guid, LineNumber Int) (*DocumentPeremeshchenieTovarovSpisokZaiavok, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ПеремещениеТоваров_СписокЗаявок", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPeremeshchenieTovarovSpisokZaiavok{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPeremeshchenieTovarovSpisokZaiavok(Key Guid, LineNumber Int, entity interface{}) (*DocumentPeremeshchenieTovarovSpisokZaiavok, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ПеремещениеТоваров_СписокЗаявок", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPeremeshchenieTovarovSpisokZaiavok{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPeremeshchenieTovarovSpisokZaiavok(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ПеремещениеТоваров_СписокЗаявок", args)
}

func (c *Client) CreateDocumentPeremeshchenieTovarovSpisokZaiavok(data DocumentPeremeshchenieTovarovSpisokZaiavok) (*DocumentPeremeshchenieTovarovSpisokZaiavok, error) {
	raw, err := c.createEntity("Document_ПеремещениеТоваров_СписокЗаявок", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPeremeshchenieTovarovSpisokZaiavok{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPeremeshchenieTovarovSpisokZaiavoks(where Where) ([]DocumentPeremeshchenieTovarovSpisokZaiavok, error) {
	type ReturnObj struct {
		Value []DocumentPeremeshchenieTovarovSpisokZaiavok `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПеремещениеТоваров_СписокЗаявок", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentZakrytieZaiavokNaRaskhodovanieSredstv(Key Guid) (*DocumentZakrytieZaiavokNaRaskhodovanieSredstv, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ЗакрытиеЗаявокНаРасходованиеСредств", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentZakrytieZaiavokNaRaskhodovanieSredstv{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentZakrytieZaiavokNaRaskhodovanieSredstv(Key Guid, entity interface{}) (*DocumentZakrytieZaiavokNaRaskhodovanieSredstv, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ЗакрытиеЗаявокНаРасходованиеСредств", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentZakrytieZaiavokNaRaskhodovanieSredstv{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentZakrytieZaiavokNaRaskhodovanieSredstv(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ЗакрытиеЗаявокНаРасходованиеСредств", args)
}

func (c *Client) CreateDocumentZakrytieZaiavokNaRaskhodovanieSredstv(data DocumentZakrytieZaiavokNaRaskhodovanieSredstv) (*DocumentZakrytieZaiavokNaRaskhodovanieSredstv, error) {
	raw, err := c.createEntity("Document_ЗакрытиеЗаявокНаРасходованиеСредств", data)
	if err != nil {
		return nil, err
	}
	result := DocumentZakrytieZaiavokNaRaskhodovanieSredstv{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentZakrytieZaiavokNaRaskhodovanieSredstvs(where Where) ([]DocumentZakrytieZaiavokNaRaskhodovanieSredstv, error) {
	type ReturnObj struct {
		Value []DocumentZakrytieZaiavokNaRaskhodovanieSredstv `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗакрытиеЗаявокНаРасходованиеСредств", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstv(Key Guid, LineNumber Int) (*DocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstv, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ЗакрытиеЗаявокНаРасходованиеСредств_ЗаявкиНаРасходованиеСредств", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstv{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstv(Key Guid, LineNumber Int, entity interface{}) (*DocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstv, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ЗакрытиеЗаявокНаРасходованиеСредств_ЗаявкиНаРасходованиеСредств", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstv{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstv(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ЗакрытиеЗаявокНаРасходованиеСредств_ЗаявкиНаРасходованиеСредств", args)
}

func (c *Client) CreateDocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstv(data DocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstv) (*DocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstv, error) {
	raw, err := c.createEntity("Document_ЗакрытиеЗаявокНаРасходованиеСредств_ЗаявкиНаРасходованиеСредств", data)
	if err != nil {
		return nil, err
	}
	result := DocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstv{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstvs(where Where) ([]DocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstv, error) {
	type ReturnObj struct {
		Value []DocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstv `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗакрытиеЗаявокНаРасходованиеСредств_ЗаявкиНаРасходованиеСредств", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) MemberCard(Key Guid) (*MemberCard, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ДисконтныеКарты", args, []string{})
	if err != nil {
		return nil, err
	}
	result := MemberCard{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateMemberCard(Key Guid, entity interface{}) (*MemberCard, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ДисконтныеКарты", args, entity)
	if err != nil {
		return nil, err
	}
	result := MemberCard{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveMemberCard(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ДисконтныеКарты", args)
}

func (c *Client) CreateMemberCard(data MemberCard) (*MemberCard, error) {
	raw, err := c.createEntity("Catalog_ДисконтныеКарты", data)
	if err != nil {
		return nil, err
	}
	result := MemberCard{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) MemberCards(where Where) ([]MemberCard, error) {
	type ReturnObj struct {
		Value []MemberCard `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ДисконтныеКарты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentABCKlassifikatsiiaPokupatelei(Key Guid) (*DocumentABCKlassifikatsiiaPokupatelei, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ABCКлассификацияПокупателей", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentABCKlassifikatsiiaPokupatelei{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentABCKlassifikatsiiaPokupatelei(Key Guid, entity interface{}) (*DocumentABCKlassifikatsiiaPokupatelei, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ABCКлассификацияПокупателей", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentABCKlassifikatsiiaPokupatelei{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentABCKlassifikatsiiaPokupatelei(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ABCКлассификацияПокупателей", args)
}

func (c *Client) CreateDocumentABCKlassifikatsiiaPokupatelei(data DocumentABCKlassifikatsiiaPokupatelei) (*DocumentABCKlassifikatsiiaPokupatelei, error) {
	raw, err := c.createEntity("Document_ABCКлассификацияПокупателей", data)
	if err != nil {
		return nil, err
	}
	result := DocumentABCKlassifikatsiiaPokupatelei{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentABCKlassifikatsiiaPokupateleis(where Where) ([]DocumentABCKlassifikatsiiaPokupatelei, error) {
	type ReturnObj struct {
		Value []DocumentABCKlassifikatsiiaPokupatelei `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ABCКлассификацияПокупателей", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentov(Key Guid, LineNumber Int) (*DocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ABCКлассификацияПокупателей_ТаблицаРаспределенияКонтрагентов", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentov(Key Guid, LineNumber Int, entity interface{}) (*DocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ABCКлассификацияПокупателей_ТаблицаРаспределенияКонтрагентов", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentov(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ABCКлассификацияПокупателей_ТаблицаРаспределенияКонтрагентов", args)
}

func (c *Client) CreateDocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentov(data DocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentov) (*DocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentov, error) {
	raw, err := c.createEntity("Document_ABCКлассификацияПокупателей_ТаблицаРаспределенияКонтрагентов", data)
	if err != nil {
		return nil, err
	}
	result := DocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentovs(where Where) ([]DocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentov, error) {
	type ReturnObj struct {
		Value []DocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ABCКлассификацияПокупателей_ТаблицаРаспределенияКонтрагентов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogIdentifikatoryObieektovMetadannykh(Key Guid) (*CatalogIdentifikatoryObieektovMetadannykh, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ИдентификаторыОбъектовМетаданных", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogIdentifikatoryObieektovMetadannykh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogIdentifikatoryObieektovMetadannykh(Key Guid, entity interface{}) (*CatalogIdentifikatoryObieektovMetadannykh, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ИдентификаторыОбъектовМетаданных", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogIdentifikatoryObieektovMetadannykh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogIdentifikatoryObieektovMetadannykh(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ИдентификаторыОбъектовМетаданных", args)
}

func (c *Client) CreateCatalogIdentifikatoryObieektovMetadannykh(data CatalogIdentifikatoryObieektovMetadannykh) (*CatalogIdentifikatoryObieektovMetadannykh, error) {
	raw, err := c.createEntity("Catalog_ИдентификаторыОбъектовМетаданных", data)
	if err != nil {
		return nil, err
	}
	result := CatalogIdentifikatoryObieektovMetadannykh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogIdentifikatoryObieektovMetadannykhs(where Where) ([]CatalogIdentifikatoryObieektovMetadannykh, error) {
	type ReturnObj struct {
		Value []CatalogIdentifikatoryObieektovMetadannykh `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ИдентификаторыОбъектовМетаданных", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentSvodnaiaInventarizatsiiaTovarovNaSklade(Key Guid) (*DocumentSvodnaiaInventarizatsiiaTovarovNaSklade, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_СводнаяИнвентаризацияТоваровНаСкладе", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentSvodnaiaInventarizatsiiaTovarovNaSklade{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentSvodnaiaInventarizatsiiaTovarovNaSklade(Key Guid, entity interface{}) (*DocumentSvodnaiaInventarizatsiiaTovarovNaSklade, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_СводнаяИнвентаризацияТоваровНаСкладе", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentSvodnaiaInventarizatsiiaTovarovNaSklade{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentSvodnaiaInventarizatsiiaTovarovNaSklade(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_СводнаяИнвентаризацияТоваровНаСкладе", args)
}

func (c *Client) CreateDocumentSvodnaiaInventarizatsiiaTovarovNaSklade(data DocumentSvodnaiaInventarizatsiiaTovarovNaSklade) (*DocumentSvodnaiaInventarizatsiiaTovarovNaSklade, error) {
	raw, err := c.createEntity("Document_СводнаяИнвентаризацияТоваровНаСкладе", data)
	if err != nil {
		return nil, err
	}
	result := DocumentSvodnaiaInventarizatsiiaTovarovNaSklade{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentSvodnaiaInventarizatsiiaTovarovNaSklades(where Where) ([]DocumentSvodnaiaInventarizatsiiaTovarovNaSklade, error) {
	type ReturnObj struct {
		Value []DocumentSvodnaiaInventarizatsiiaTovarovNaSklade `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СводнаяИнвентаризацияТоваровНаСкладе", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikaty(Key Guid, LineNumber Int) (*DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikaty, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_СводнаяИнвентаризацияТоваровНаСкладе_Сертификаты", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikaty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikaty(Key Guid, LineNumber Int, entity interface{}) (*DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikaty, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_СводнаяИнвентаризацияТоваровНаСкладе_Сертификаты", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikaty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikaty(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_СводнаяИнвентаризацияТоваровНаСкладе_Сертификаты", args)
}

func (c *Client) CreateDocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikaty(data DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikaty) (*DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikaty, error) {
	raw, err := c.createEntity("Document_СводнаяИнвентаризацияТоваровНаСкладе_Сертификаты", data)
	if err != nil {
		return nil, err
	}
	result := DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikaty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikatys(where Where) ([]DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikaty, error) {
	type ReturnObj struct {
		Value []DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikaty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СводнаяИнвентаризацияТоваровНаСкладе_Сертификаты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii(Key Guid, LineNumber Int) (*DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_СводнаяИнвентаризацияТоваровНаСкладе_УсловияПроведенияИнвентаризации", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii(Key Guid, LineNumber Int, entity interface{}) (*DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_СводнаяИнвентаризацияТоваровНаСкладе_УсловияПроведенияИнвентаризации", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_СводнаяИнвентаризацияТоваровНаСкладе_УсловияПроведенияИнвентаризации", args)
}

func (c *Client) CreateDocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii(data DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii) (*DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii, error) {
	raw, err := c.createEntity("Document_СводнаяИнвентаризацияТоваровНаСкладе_УсловияПроведенияИнвентаризации", data)
	if err != nil {
		return nil, err
	}
	result := DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsiis(where Where) ([]DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii, error) {
	type ReturnObj struct {
		Value []DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СводнаяИнвентаризацияТоваровНаСкладе_УсловияПроведенияИнвентаризации", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentKorrektirovkaRealizatsii(Key Guid) (*DocumentKorrektirovkaRealizatsii, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_КорректировкаРеализации", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentKorrektirovkaRealizatsii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentKorrektirovkaRealizatsii(Key Guid, entity interface{}) (*DocumentKorrektirovkaRealizatsii, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_КорректировкаРеализации", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentKorrektirovkaRealizatsii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentKorrektirovkaRealizatsii(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_КорректировкаРеализации", args)
}

func (c *Client) CreateDocumentKorrektirovkaRealizatsii(data DocumentKorrektirovkaRealizatsii) (*DocumentKorrektirovkaRealizatsii, error) {
	raw, err := c.createEntity("Document_КорректировкаРеализации", data)
	if err != nil {
		return nil, err
	}
	result := DocumentKorrektirovkaRealizatsii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentKorrektirovkaRealizatsiis(where Where) ([]DocumentKorrektirovkaRealizatsii, error) {
	type ReturnObj struct {
		Value []DocumentKorrektirovkaRealizatsii `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_КорректировкаРеализации", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentKorrektirovkaRealizatsiiTovary(Key Guid, LineNumber Int) (*DocumentKorrektirovkaRealizatsiiTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_КорректировкаРеализации_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentKorrektirovkaRealizatsiiTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentKorrektirovkaRealizatsiiTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentKorrektirovkaRealizatsiiTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_КорректировкаРеализации_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentKorrektirovkaRealizatsiiTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentKorrektirovkaRealizatsiiTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_КорректировкаРеализации_Товары", args)
}

func (c *Client) CreateDocumentKorrektirovkaRealizatsiiTovary(data DocumentKorrektirovkaRealizatsiiTovary) (*DocumentKorrektirovkaRealizatsiiTovary, error) {
	raw, err := c.createEntity("Document_КорректировкаРеализации_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentKorrektirovkaRealizatsiiTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentKorrektirovkaRealizatsiiTovarys(where Where) ([]DocumentKorrektirovkaRealizatsiiTovary, error) {
	type ReturnObj struct {
		Value []DocumentKorrektirovkaRealizatsiiTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_КорректировкаРеализации_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentKorrektirovkaRealizatsiiUslugi(Key Guid, LineNumber Int) (*DocumentKorrektirovkaRealizatsiiUslugi, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_КорректировкаРеализации_Услуги", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentKorrektirovkaRealizatsiiUslugi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentKorrektirovkaRealizatsiiUslugi(Key Guid, LineNumber Int, entity interface{}) (*DocumentKorrektirovkaRealizatsiiUslugi, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_КорректировкаРеализации_Услуги", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentKorrektirovkaRealizatsiiUslugi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentKorrektirovkaRealizatsiiUslugi(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_КорректировкаРеализации_Услуги", args)
}

func (c *Client) CreateDocumentKorrektirovkaRealizatsiiUslugi(data DocumentKorrektirovkaRealizatsiiUslugi) (*DocumentKorrektirovkaRealizatsiiUslugi, error) {
	raw, err := c.createEntity("Document_КорректировкаРеализации_Услуги", data)
	if err != nil {
		return nil, err
	}
	result := DocumentKorrektirovkaRealizatsiiUslugi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentKorrektirovkaRealizatsiiUslugis(where Where) ([]DocumentKorrektirovkaRealizatsiiUslugi, error) {
	type ReturnObj struct {
		Value []DocumentKorrektirovkaRealizatsiiUslugi `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_КорректировкаРеализации_Услуги", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogVidyDefektov(Key Guid) (*CatalogVidyDefektov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ВидыДефектов", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogVidyDefektov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogVidyDefektov(Key Guid, entity interface{}) (*CatalogVidyDefektov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ВидыДефектов", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogVidyDefektov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogVidyDefektov(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ВидыДефектов", args)
}

func (c *Client) CreateCatalogVidyDefektov(data CatalogVidyDefektov) (*CatalogVidyDefektov, error) {
	raw, err := c.createEntity("Catalog_ВидыДефектов", data)
	if err != nil {
		return nil, err
	}
	result := CatalogVidyDefektov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogVidyDefektovs(where Where) ([]CatalogVidyDefektov, error) {
	type ReturnObj struct {
		Value []CatalogVidyDefektov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ВидыДефектов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentDoverennost(Key Guid) (*DocumentDoverennost, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_Доверенность", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentDoverennost{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentDoverennost(Key Guid, entity interface{}) (*DocumentDoverennost, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_Доверенность", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentDoverennost{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentDoverennost(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_Доверенность", args)
}

func (c *Client) CreateDocumentDoverennost(data DocumentDoverennost) (*DocumentDoverennost, error) {
	raw, err := c.createEntity("Document_Доверенность", data)
	if err != nil {
		return nil, err
	}
	result := DocumentDoverennost{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentDoverennosts(where Where) ([]DocumentDoverennost, error) {
	type ReturnObj struct {
		Value []DocumentDoverennost `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_Доверенность", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentDoverennostTovary(Key Guid, LineNumber Int) (*DocumentDoverennostTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_Доверенность_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentDoverennostTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentDoverennostTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentDoverennostTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_Доверенность_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentDoverennostTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentDoverennostTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_Доверенность_Товары", args)
}

func (c *Client) CreateDocumentDoverennostTovary(data DocumentDoverennostTovary) (*DocumentDoverennostTovary, error) {
	raw, err := c.createEntity("Document_Доверенность_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentDoverennostTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentDoverennostTovarys(where Where) ([]DocumentDoverennostTovary, error) {
	type ReturnObj struct {
		Value []DocumentDoverennostTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_Доверенность_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogShablonyZapolneniiaKU(Key Guid) (*CatalogShablonyZapolneniiaKU, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ШаблоныЗаполненияКУ", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogShablonyZapolneniiaKU{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogShablonyZapolneniiaKU(Key Guid, entity interface{}) (*CatalogShablonyZapolneniiaKU, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ШаблоныЗаполненияКУ", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogShablonyZapolneniiaKU{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogShablonyZapolneniiaKU(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ШаблоныЗаполненияКУ", args)
}

func (c *Client) CreateCatalogShablonyZapolneniiaKU(data CatalogShablonyZapolneniiaKU) (*CatalogShablonyZapolneniiaKU, error) {
	raw, err := c.createEntity("Catalog_ШаблоныЗаполненияКУ", data)
	if err != nil {
		return nil, err
	}
	result := CatalogShablonyZapolneniiaKU{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogShablonyZapolneniiaKUs(where Where) ([]CatalogShablonyZapolneniiaKU, error) {
	type ReturnObj struct {
		Value []CatalogShablonyZapolneniiaKU `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ШаблоныЗаполненияКУ", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogShablonyZapolneniiaKUPrazdnichnyeDni(Key Guid, LineNumber Int) (*CatalogShablonyZapolneniiaKUPrazdnichnyeDni, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_ШаблоныЗаполненияКУ_ПраздничныеДни", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogShablonyZapolneniiaKUPrazdnichnyeDni{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogShablonyZapolneniiaKUPrazdnichnyeDni(Key Guid, LineNumber Int, entity interface{}) (*CatalogShablonyZapolneniiaKUPrazdnichnyeDni, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_ШаблоныЗаполненияКУ_ПраздничныеДни", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogShablonyZapolneniiaKUPrazdnichnyeDni{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogShablonyZapolneniiaKUPrazdnichnyeDni(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_ШаблоныЗаполненияКУ_ПраздничныеДни", args)
}

func (c *Client) CreateCatalogShablonyZapolneniiaKUPrazdnichnyeDni(data CatalogShablonyZapolneniiaKUPrazdnichnyeDni) (*CatalogShablonyZapolneniiaKUPrazdnichnyeDni, error) {
	raw, err := c.createEntity("Catalog_ШаблоныЗаполненияКУ_ПраздничныеДни", data)
	if err != nil {
		return nil, err
	}
	result := CatalogShablonyZapolneniiaKUPrazdnichnyeDni{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogShablonyZapolneniiaKUPrazdnichnyeDnis(where Where) ([]CatalogShablonyZapolneniiaKUPrazdnichnyeDni, error) {
	type ReturnObj struct {
		Value []CatalogShablonyZapolneniiaKUPrazdnichnyeDni `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ШаблоныЗаполненияКУ_ПраздничныеДни", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogShablonyZapolneniiaKUKUNaNedeliu(Key Guid, LineNumber Int) (*CatalogShablonyZapolneniiaKUKUNaNedeliu, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_ШаблоныЗаполненияКУ_КУНаНеделю", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogShablonyZapolneniiaKUKUNaNedeliu{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogShablonyZapolneniiaKUKUNaNedeliu(Key Guid, LineNumber Int, entity interface{}) (*CatalogShablonyZapolneniiaKUKUNaNedeliu, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_ШаблоныЗаполненияКУ_КУНаНеделю", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogShablonyZapolneniiaKUKUNaNedeliu{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogShablonyZapolneniiaKUKUNaNedeliu(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_ШаблоныЗаполненияКУ_КУНаНеделю", args)
}

func (c *Client) CreateCatalogShablonyZapolneniiaKUKUNaNedeliu(data CatalogShablonyZapolneniiaKUKUNaNedeliu) (*CatalogShablonyZapolneniiaKUKUNaNedeliu, error) {
	raw, err := c.createEntity("Catalog_ШаблоныЗаполненияКУ_КУНаНеделю", data)
	if err != nil {
		return nil, err
	}
	result := CatalogShablonyZapolneniiaKUKUNaNedeliu{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogShablonyZapolneniiaKUKUNaNedelius(where Where) ([]CatalogShablonyZapolneniiaKUKUNaNedeliu, error) {
	type ReturnObj struct {
		Value []CatalogShablonyZapolneniiaKUKUNaNedeliu `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ШаблоныЗаполненияКУ_КУНаНеделю", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogShablonyZapolneniiaKUSalony(Key Guid, LineNumber Int) (*CatalogShablonyZapolneniiaKUSalony, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_ШаблоныЗаполненияКУ_Салоны", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogShablonyZapolneniiaKUSalony{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogShablonyZapolneniiaKUSalony(Key Guid, LineNumber Int, entity interface{}) (*CatalogShablonyZapolneniiaKUSalony, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_ШаблоныЗаполненияКУ_Салоны", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogShablonyZapolneniiaKUSalony{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogShablonyZapolneniiaKUSalony(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_ШаблоныЗаполненияКУ_Салоны", args)
}

func (c *Client) CreateCatalogShablonyZapolneniiaKUSalony(data CatalogShablonyZapolneniiaKUSalony) (*CatalogShablonyZapolneniiaKUSalony, error) {
	raw, err := c.createEntity("Catalog_ШаблоныЗаполненияКУ_Салоны", data)
	if err != nil {
		return nil, err
	}
	result := CatalogShablonyZapolneniiaKUSalony{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogShablonyZapolneniiaKUSalonys(where Where) ([]CatalogShablonyZapolneniiaKUSalony, error) {
	type ReturnObj struct {
		Value []CatalogShablonyZapolneniiaKUSalony `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ШаблоныЗаполненияКУ_Салоны", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPlanZapolneniiaVitrin(Key Guid) (*DocumentPlanZapolneniiaVitrin, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ПланЗаполненияВитрин", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPlanZapolneniiaVitrin{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPlanZapolneniiaVitrin(Key Guid, entity interface{}) (*DocumentPlanZapolneniiaVitrin, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ПланЗаполненияВитрин", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPlanZapolneniiaVitrin{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPlanZapolneniiaVitrin(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ПланЗаполненияВитрин", args)
}

func (c *Client) CreateDocumentPlanZapolneniiaVitrin(data DocumentPlanZapolneniiaVitrin) (*DocumentPlanZapolneniiaVitrin, error) {
	raw, err := c.createEntity("Document_ПланЗаполненияВитрин", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPlanZapolneniiaVitrin{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPlanZapolneniiaVitrins(where Where) ([]DocumentPlanZapolneniiaVitrin, error) {
	type ReturnObj struct {
		Value []DocumentPlanZapolneniiaVitrin `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПланЗаполненияВитрин", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrin(Key Guid, LineNumber Int) (*DocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrin, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ПланЗаполненияВитрин_ПлановоеЗаполнениеВитрин", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrin{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrin(Key Guid, LineNumber Int, entity interface{}) (*DocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrin, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ПланЗаполненияВитрин_ПлановоеЗаполнениеВитрин", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrin{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrin(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ПланЗаполненияВитрин_ПлановоеЗаполнениеВитрин", args)
}

func (c *Client) CreateDocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrin(data DocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrin) (*DocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrin, error) {
	raw, err := c.createEntity("Document_ПланЗаполненияВитрин_ПлановоеЗаполнениеВитрин", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrin{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrins(where Where) ([]DocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrin, error) {
	type ReturnObj struct {
		Value []DocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrin `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПланЗаполненияВитрин_ПлановоеЗаполнениеВитрин", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) Instance(Key Guid) (*Instance, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_СерииНоменклатуры", args, []string{})
	if err != nil {
		return nil, err
	}
	result := Instance{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateInstance(Key Guid, entity interface{}) (*Instance, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_СерииНоменклатуры", args, entity)
	if err != nil {
		return nil, err
	}
	result := Instance{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveInstance(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_СерииНоменклатуры", args)
}

func (c *Client) CreateInstance(data Instance) (*Instance, error) {
	raw, err := c.createEntity("Catalog_СерииНоменклатуры", data)
	if err != nil {
		return nil, err
	}
	result := Instance{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) Instances(where Where) ([]Instance, error) {
	type ReturnObj struct {
		Value []Instance `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_СерииНоменклатуры", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) ReturnToManufacturing(Key Guid) (*ReturnToManufacturing, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ВозвратПродукцииВПроизводство", args, []string{})
	if err != nil {
		return nil, err
	}
	result := ReturnToManufacturing{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateReturnToManufacturing(Key Guid, entity interface{}) (*ReturnToManufacturing, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ВозвратПродукцииВПроизводство", args, entity)
	if err != nil {
		return nil, err
	}
	result := ReturnToManufacturing{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveReturnToManufacturing(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ВозвратПродукцииВПроизводство", args)
}

func (c *Client) CreateReturnToManufacturing(data ReturnToManufacturing) (*ReturnToManufacturing, error) {
	raw, err := c.createEntity("Document_ВозвратПродукцииВПроизводство", data)
	if err != nil {
		return nil, err
	}
	result := ReturnToManufacturing{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) ReturnToManufacturings(where Where) ([]ReturnToManufacturing, error) {
	type ReturnObj struct {
		Value []ReturnToManufacturing `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВозвратПродукцииВПроизводство", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentVozvratProduktsiiVProizvodstvoTovary(Key Guid, LineNumber Int) (*DocumentVozvratProduktsiiVProizvodstvoTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ВозвратПродукцииВПроизводство_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentVozvratProduktsiiVProizvodstvoTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentVozvratProduktsiiVProizvodstvoTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentVozvratProduktsiiVProizvodstvoTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ВозвратПродукцииВПроизводство_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentVozvratProduktsiiVProizvodstvoTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentVozvratProduktsiiVProizvodstvoTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ВозвратПродукцииВПроизводство_Товары", args)
}

func (c *Client) CreateDocumentVozvratProduktsiiVProizvodstvoTovary(data DocumentVozvratProduktsiiVProizvodstvoTovary) (*DocumentVozvratProduktsiiVProizvodstvoTovary, error) {
	raw, err := c.createEntity("Document_ВозвратПродукцииВПроизводство_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentVozvratProduktsiiVProizvodstvoTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentVozvratProduktsiiVProizvodstvoTovarys(where Where) ([]DocumentVozvratProduktsiiVProizvodstvoTovary, error) {
	type ReturnObj struct {
		Value []DocumentVozvratProduktsiiVProizvodstvoTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВозвратПродукцииВПроизводство_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogNomeraGTD(Key Guid) (*CatalogNomeraGTD, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_НомераГТД", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogNomeraGTD{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogNomeraGTD(Key Guid, entity interface{}) (*CatalogNomeraGTD, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_НомераГТД", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogNomeraGTD{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogNomeraGTD(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_НомераГТД", args)
}

func (c *Client) CreateCatalogNomeraGTD(data CatalogNomeraGTD) (*CatalogNomeraGTD, error) {
	raw, err := c.createEntity("Catalog_НомераГТД", data)
	if err != nil {
		return nil, err
	}
	result := CatalogNomeraGTD{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogNomeraGTDs(where Where) ([]CatalogNomeraGTD, error) {
	type ReturnObj struct {
		Value []CatalogNomeraGTD `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НомераГТД", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogNastroikiRabochegoMestaPolzovatelia(Key Guid) (*CatalogNastroikiRabochegoMestaPolzovatelia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_НастройкиРабочегоМестаПользователя", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiRabochegoMestaPolzovatelia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogNastroikiRabochegoMestaPolzovatelia(Key Guid, entity interface{}) (*CatalogNastroikiRabochegoMestaPolzovatelia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_НастройкиРабочегоМестаПользователя", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiRabochegoMestaPolzovatelia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogNastroikiRabochegoMestaPolzovatelia(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_НастройкиРабочегоМестаПользователя", args)
}

func (c *Client) CreateCatalogNastroikiRabochegoMestaPolzovatelia(data CatalogNastroikiRabochegoMestaPolzovatelia) (*CatalogNastroikiRabochegoMestaPolzovatelia, error) {
	raw, err := c.createEntity("Catalog_НастройкиРабочегоМестаПользователя", data)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiRabochegoMestaPolzovatelia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogNastroikiRabochegoMestaPolzovatelias(where Where) ([]CatalogNastroikiRabochegoMestaPolzovatelia, error) {
	type ReturnObj struct {
		Value []CatalogNastroikiRabochegoMestaPolzovatelia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкиРабочегоМестаПользователя", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogNastroikiRabochegoMestaPolzovateliaNastroiki(Key Guid, LineNumber Int) (*CatalogNastroikiRabochegoMestaPolzovateliaNastroiki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_НастройкиРабочегоМестаПользователя_Настройки", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiRabochegoMestaPolzovateliaNastroiki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogNastroikiRabochegoMestaPolzovateliaNastroiki(Key Guid, LineNumber Int, entity interface{}) (*CatalogNastroikiRabochegoMestaPolzovateliaNastroiki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_НастройкиРабочегоМестаПользователя_Настройки", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiRabochegoMestaPolzovateliaNastroiki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogNastroikiRabochegoMestaPolzovateliaNastroiki(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_НастройкиРабочегоМестаПользователя_Настройки", args)
}

func (c *Client) CreateCatalogNastroikiRabochegoMestaPolzovateliaNastroiki(data CatalogNastroikiRabochegoMestaPolzovateliaNastroiki) (*CatalogNastroikiRabochegoMestaPolzovateliaNastroiki, error) {
	raw, err := c.createEntity("Catalog_НастройкиРабочегоМестаПользователя_Настройки", data)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiRabochegoMestaPolzovateliaNastroiki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogNastroikiRabochegoMestaPolzovateliaNastroikis(where Where) ([]CatalogNastroikiRabochegoMestaPolzovateliaNastroiki, error) {
	type ReturnObj struct {
		Value []CatalogNastroikiRabochegoMestaPolzovateliaNastroiki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкиРабочегоМестаПользователя_Настройки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogsmsShablony(Key Guid) (*CatalogsmsShablony, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_смсШаблоны", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogsmsShablony{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogsmsShablony(Key Guid, entity interface{}) (*CatalogsmsShablony, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_смсШаблоны", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogsmsShablony{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogsmsShablony(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_смсШаблоны", args)
}

func (c *Client) CreateCatalogsmsShablony(data CatalogsmsShablony) (*CatalogsmsShablony, error) {
	raw, err := c.createEntity("Catalog_смсШаблоны", data)
	if err != nil {
		return nil, err
	}
	result := CatalogsmsShablony{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogsmsShablonys(where Where) ([]CatalogsmsShablony, error) {
	type ReturnObj struct {
		Value []CatalogsmsShablony `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_смсШаблоны", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) WriteOff(Key Guid) (*WriteOff, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_СписаниеТоваров", args, []string{})
	if err != nil {
		return nil, err
	}
	result := WriteOff{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateWriteOff(Key Guid, entity interface{}) (*WriteOff, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_СписаниеТоваров", args, entity)
	if err != nil {
		return nil, err
	}
	result := WriteOff{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveWriteOff(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_СписаниеТоваров", args)
}

func (c *Client) CreateWriteOff(data WriteOff) (*WriteOff, error) {
	raw, err := c.createEntity("Document_СписаниеТоваров", data)
	if err != nil {
		return nil, err
	}
	result := WriteOff{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) WriteOffs(where Where) ([]WriteOff, error) {
	type ReturnObj struct {
		Value []WriteOff `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СписаниеТоваров", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentSpisanieTovarovTovary(Key Guid, LineNumber Int) (*DocumentSpisanieTovarovTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_СписаниеТоваров_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentSpisanieTovarovTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentSpisanieTovarovTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentSpisanieTovarovTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_СписаниеТоваров_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentSpisanieTovarovTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentSpisanieTovarovTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_СписаниеТоваров_Товары", args)
}

func (c *Client) CreateDocumentSpisanieTovarovTovary(data DocumentSpisanieTovarovTovary) (*DocumentSpisanieTovarovTovary, error) {
	raw, err := c.createEntity("Document_СписаниеТоваров_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentSpisanieTovarovTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentSpisanieTovarovTovarys(where Where) ([]DocumentSpisanieTovarovTovary, error) {
	type ReturnObj struct {
		Value []DocumentSpisanieTovarovTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СписаниеТоваров_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentSpisanieTovarovSertifikaty(Key Guid, LineNumber Int) (*DocumentSpisanieTovarovSertifikaty, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_СписаниеТоваров_Сертификаты", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentSpisanieTovarovSertifikaty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentSpisanieTovarovSertifikaty(Key Guid, LineNumber Int, entity interface{}) (*DocumentSpisanieTovarovSertifikaty, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_СписаниеТоваров_Сертификаты", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentSpisanieTovarovSertifikaty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentSpisanieTovarovSertifikaty(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_СписаниеТоваров_Сертификаты", args)
}

func (c *Client) CreateDocumentSpisanieTovarovSertifikaty(data DocumentSpisanieTovarovSertifikaty) (*DocumentSpisanieTovarovSertifikaty, error) {
	raw, err := c.createEntity("Document_СписаниеТоваров_Сертификаты", data)
	if err != nil {
		return nil, err
	}
	result := DocumentSpisanieTovarovSertifikaty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentSpisanieTovarovSertifikatys(where Where) ([]DocumentSpisanieTovarovSertifikaty, error) {
	type ReturnObj struct {
		Value []DocumentSpisanieTovarovSertifikaty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СписаниеТоваров_Сертификаты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentsmsSoobshchenie(Key Guid) (*DocumentsmsSoobshchenie, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_смсСообщение", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentsmsSoobshchenie{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentsmsSoobshchenie(Key Guid, entity interface{}) (*DocumentsmsSoobshchenie, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_смсСообщение", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentsmsSoobshchenie{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentsmsSoobshchenie(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_смсСообщение", args)
}

func (c *Client) CreateDocumentsmsSoobshchenie(data DocumentsmsSoobshchenie) (*DocumentsmsSoobshchenie, error) {
	raw, err := c.createEntity("Document_смсСообщение", data)
	if err != nil {
		return nil, err
	}
	result := DocumentsmsSoobshchenie{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentsmsSoobshchenies(where Where) ([]DocumentsmsSoobshchenie, error) {
	type ReturnObj struct {
		Value []DocumentsmsSoobshchenie `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_смсСообщение", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentsmsSoobshcheniePoluchateli(Key Guid, LineNumber Int) (*DocumentsmsSoobshcheniePoluchateli, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_смсСообщение_Получатели", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentsmsSoobshcheniePoluchateli{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentsmsSoobshcheniePoluchateli(Key Guid, LineNumber Int, entity interface{}) (*DocumentsmsSoobshcheniePoluchateli, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_смсСообщение_Получатели", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentsmsSoobshcheniePoluchateli{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentsmsSoobshcheniePoluchateli(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_смсСообщение_Получатели", args)
}

func (c *Client) CreateDocumentsmsSoobshcheniePoluchateli(data DocumentsmsSoobshcheniePoluchateli) (*DocumentsmsSoobshcheniePoluchateli, error) {
	raw, err := c.createEntity("Document_смсСообщение_Получатели", data)
	if err != nil {
		return nil, err
	}
	result := DocumentsmsSoobshcheniePoluchateli{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentsmsSoobshcheniePoluchatelis(where Where) ([]DocumentsmsSoobshcheniePoluchateli, error) {
	type ReturnObj struct {
		Value []DocumentsmsSoobshcheniePoluchateli `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_смсСообщение_Получатели", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentOplataOtPokupateliaPlatezhnoiKartoi(Key Guid) (*DocumentOplataOtPokupateliaPlatezhnoiKartoi, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ОплатаОтПокупателяПлатежнойКартой", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentOplataOtPokupateliaPlatezhnoiKartoi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentOplataOtPokupateliaPlatezhnoiKartoi(Key Guid, entity interface{}) (*DocumentOplataOtPokupateliaPlatezhnoiKartoi, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ОплатаОтПокупателяПлатежнойКартой", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentOplataOtPokupateliaPlatezhnoiKartoi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentOplataOtPokupateliaPlatezhnoiKartoi(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ОплатаОтПокупателяПлатежнойКартой", args)
}

func (c *Client) CreateDocumentOplataOtPokupateliaPlatezhnoiKartoi(data DocumentOplataOtPokupateliaPlatezhnoiKartoi) (*DocumentOplataOtPokupateliaPlatezhnoiKartoi, error) {
	raw, err := c.createEntity("Document_ОплатаОтПокупателяПлатежнойКартой", data)
	if err != nil {
		return nil, err
	}
	result := DocumentOplataOtPokupateliaPlatezhnoiKartoi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentOplataOtPokupateliaPlatezhnoiKartois(where Where) ([]DocumentOplataOtPokupateliaPlatezhnoiKartoi, error) {
	type ReturnObj struct {
		Value []DocumentOplataOtPokupateliaPlatezhnoiKartoi `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОплатаОтПокупателяПлатежнойКартой", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogDragotsennyeKamni(Key Guid) (*CatalogDragotsennyeKamni, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ДрагоценныеКамни", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogDragotsennyeKamni{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogDragotsennyeKamni(Key Guid, entity interface{}) (*CatalogDragotsennyeKamni, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ДрагоценныеКамни", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogDragotsennyeKamni{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogDragotsennyeKamni(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ДрагоценныеКамни", args)
}

func (c *Client) CreateCatalogDragotsennyeKamni(data CatalogDragotsennyeKamni) (*CatalogDragotsennyeKamni, error) {
	raw, err := c.createEntity("Catalog_ДрагоценныеКамни", data)
	if err != nil {
		return nil, err
	}
	result := CatalogDragotsennyeKamni{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogDragotsennyeKamnis(where Where) ([]CatalogDragotsennyeKamni, error) {
	type ReturnObj struct {
		Value []CatalogDragotsennyeKamni `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ДрагоценныеКамни", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogKalendariPlanirovaniiaProdazh(Key Guid) (*CatalogKalendariPlanirovaniiaProdazh, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_КалендариПланированияПродаж", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogKalendariPlanirovaniiaProdazh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogKalendariPlanirovaniiaProdazh(Key Guid, entity interface{}) (*CatalogKalendariPlanirovaniiaProdazh, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_КалендариПланированияПродаж", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogKalendariPlanirovaniiaProdazh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogKalendariPlanirovaniiaProdazh(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_КалендариПланированияПродаж", args)
}

func (c *Client) CreateCatalogKalendariPlanirovaniiaProdazh(data CatalogKalendariPlanirovaniiaProdazh) (*CatalogKalendariPlanirovaniiaProdazh, error) {
	raw, err := c.createEntity("Catalog_КалендариПланированияПродаж", data)
	if err != nil {
		return nil, err
	}
	result := CatalogKalendariPlanirovaniiaProdazh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogKalendariPlanirovaniiaProdazhs(where Where) ([]CatalogKalendariPlanirovaniiaProdazh, error) {
	type ReturnObj struct {
		Value []CatalogKalendariPlanirovaniiaProdazh `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_КалендариПланированияПродаж", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogKalendariPlanirovaniiaProdazhKUPoDniam(Key Guid, LineNumber Int) (*CatalogKalendariPlanirovaniiaProdazhKUPoDniam, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_КалендариПланированияПродаж_КУПоДням", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogKalendariPlanirovaniiaProdazhKUPoDniam{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogKalendariPlanirovaniiaProdazhKUPoDniam(Key Guid, LineNumber Int, entity interface{}) (*CatalogKalendariPlanirovaniiaProdazhKUPoDniam, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_КалендариПланированияПродаж_КУПоДням", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogKalendariPlanirovaniiaProdazhKUPoDniam{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogKalendariPlanirovaniiaProdazhKUPoDniam(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_КалендариПланированияПродаж_КУПоДням", args)
}

func (c *Client) CreateCatalogKalendariPlanirovaniiaProdazhKUPoDniam(data CatalogKalendariPlanirovaniiaProdazhKUPoDniam) (*CatalogKalendariPlanirovaniiaProdazhKUPoDniam, error) {
	raw, err := c.createEntity("Catalog_КалендариПланированияПродаж_КУПоДням", data)
	if err != nil {
		return nil, err
	}
	result := CatalogKalendariPlanirovaniiaProdazhKUPoDniam{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogKalendariPlanirovaniiaProdazhKUPoDniams(where Where) ([]CatalogKalendariPlanirovaniiaProdazhKUPoDniam, error) {
	type ReturnObj struct {
		Value []CatalogKalendariPlanirovaniiaProdazhKUPoDniam `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_КалендариПланированияПродаж_КУПоДням", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogKalendariPlanirovaniiaProdazhSalony(Key Guid, LineNumber Int) (*CatalogKalendariPlanirovaniiaProdazhSalony, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_КалендариПланированияПродаж_Салоны", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogKalendariPlanirovaniiaProdazhSalony{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogKalendariPlanirovaniiaProdazhSalony(Key Guid, LineNumber Int, entity interface{}) (*CatalogKalendariPlanirovaniiaProdazhSalony, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_КалендариПланированияПродаж_Салоны", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogKalendariPlanirovaniiaProdazhSalony{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogKalendariPlanirovaniiaProdazhSalony(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_КалендариПланированияПродаж_Салоны", args)
}

func (c *Client) CreateCatalogKalendariPlanirovaniiaProdazhSalony(data CatalogKalendariPlanirovaniiaProdazhSalony) (*CatalogKalendariPlanirovaniiaProdazhSalony, error) {
	raw, err := c.createEntity("Catalog_КалендариПланированияПродаж_Салоны", data)
	if err != nil {
		return nil, err
	}
	result := CatalogKalendariPlanirovaniiaProdazhSalony{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogKalendariPlanirovaniiaProdazhSalonys(where Where) ([]CatalogKalendariPlanirovaniiaProdazhSalony, error) {
	type ReturnObj struct {
		Value []CatalogKalendariPlanirovaniiaProdazhSalony `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_КалендариПланированияПродаж_Салоны", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogKontaktnyeLitsa(Key Guid) (*CatalogKontaktnyeLitsa, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_КонтактныеЛица", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogKontaktnyeLitsa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogKontaktnyeLitsa(Key Guid, entity interface{}) (*CatalogKontaktnyeLitsa, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_КонтактныеЛица", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogKontaktnyeLitsa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogKontaktnyeLitsa(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_КонтактныеЛица", args)
}

func (c *Client) CreateCatalogKontaktnyeLitsa(data CatalogKontaktnyeLitsa) (*CatalogKontaktnyeLitsa, error) {
	raw, err := c.createEntity("Catalog_КонтактныеЛица", data)
	if err != nil {
		return nil, err
	}
	result := CatalogKontaktnyeLitsa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogKontaktnyeLitsas(where Where) ([]CatalogKontaktnyeLitsa, error) {
	type ReturnObj struct {
		Value []CatalogKontaktnyeLitsa `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_КонтактныеЛица", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogFizicheskieLitsa(Key Guid) (*CatalogFizicheskieLitsa, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ФизическиеЛица", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogFizicheskieLitsa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogFizicheskieLitsa(Key Guid, entity interface{}) (*CatalogFizicheskieLitsa, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ФизическиеЛица", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogFizicheskieLitsa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogFizicheskieLitsa(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ФизическиеЛица", args)
}

func (c *Client) CreateCatalogFizicheskieLitsa(data CatalogFizicheskieLitsa) (*CatalogFizicheskieLitsa, error) {
	raw, err := c.createEntity("Catalog_ФизическиеЛица", data)
	if err != nil {
		return nil, err
	}
	result := CatalogFizicheskieLitsa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogFizicheskieLitsas(where Where) ([]CatalogFizicheskieLitsa, error) {
	type ReturnObj struct {
		Value []CatalogFizicheskieLitsa `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ФизическиеЛица", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogTipovyeAnkety(Key Guid) (*CatalogTipovyeAnkety, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ТиповыеАнкеты", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogTipovyeAnkety{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogTipovyeAnkety(Key Guid, entity interface{}) (*CatalogTipovyeAnkety, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ТиповыеАнкеты", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogTipovyeAnkety{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogTipovyeAnkety(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ТиповыеАнкеты", args)
}

func (c *Client) CreateCatalogTipovyeAnkety(data CatalogTipovyeAnkety) (*CatalogTipovyeAnkety, error) {
	raw, err := c.createEntity("Catalog_ТиповыеАнкеты", data)
	if err != nil {
		return nil, err
	}
	result := CatalogTipovyeAnkety{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogTipovyeAnketys(where Where) ([]CatalogTipovyeAnkety, error) {
	type ReturnObj struct {
		Value []CatalogTipovyeAnkety `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ТиповыеАнкеты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogTipovyeAnketyVoprosyAnkety(Key Guid, LineNumber Int) (*CatalogTipovyeAnketyVoprosyAnkety, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_ТиповыеАнкеты_ВопросыАнкеты", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogTipovyeAnketyVoprosyAnkety{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogTipovyeAnketyVoprosyAnkety(Key Guid, LineNumber Int, entity interface{}) (*CatalogTipovyeAnketyVoprosyAnkety, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_ТиповыеАнкеты_ВопросыАнкеты", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogTipovyeAnketyVoprosyAnkety{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogTipovyeAnketyVoprosyAnkety(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_ТиповыеАнкеты_ВопросыАнкеты", args)
}

func (c *Client) CreateCatalogTipovyeAnketyVoprosyAnkety(data CatalogTipovyeAnketyVoprosyAnkety) (*CatalogTipovyeAnketyVoprosyAnkety, error) {
	raw, err := c.createEntity("Catalog_ТиповыеАнкеты_ВопросыАнкеты", data)
	if err != nil {
		return nil, err
	}
	result := CatalogTipovyeAnketyVoprosyAnkety{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogTipovyeAnketyVoprosyAnketys(where Where) ([]CatalogTipovyeAnketyVoprosyAnkety, error) {
	type ReturnObj struct {
		Value []CatalogTipovyeAnketyVoprosyAnkety `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ТиповыеАнкеты_ВопросыАнкеты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentNachislenieSpisanieBonusov(Key Guid) (*DocumentNachislenieSpisanieBonusov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_НачислениеСписаниеБонусов", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentNachislenieSpisanieBonusov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentNachislenieSpisanieBonusov(Key Guid, entity interface{}) (*DocumentNachislenieSpisanieBonusov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_НачислениеСписаниеБонусов", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentNachislenieSpisanieBonusov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentNachislenieSpisanieBonusov(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_НачислениеСписаниеБонусов", args)
}

func (c *Client) CreateDocumentNachislenieSpisanieBonusov(data DocumentNachislenieSpisanieBonusov) (*DocumentNachislenieSpisanieBonusov, error) {
	raw, err := c.createEntity("Document_НачислениеСписаниеБонусов", data)
	if err != nil {
		return nil, err
	}
	result := DocumentNachislenieSpisanieBonusov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentNachislenieSpisanieBonusovs(where Where) ([]DocumentNachislenieSpisanieBonusov, error) {
	type ReturnObj struct {
		Value []DocumentNachislenieSpisanieBonusov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_НачислениеСписаниеБонусов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentNachislenieSpisanieBonusovDiskontnyeKarty(Key Guid, LineNumber Int) (*DocumentNachislenieSpisanieBonusovDiskontnyeKarty, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_НачислениеСписаниеБонусов_ДисконтныеКарты", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentNachislenieSpisanieBonusovDiskontnyeKarty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentNachislenieSpisanieBonusovDiskontnyeKarty(Key Guid, LineNumber Int, entity interface{}) (*DocumentNachislenieSpisanieBonusovDiskontnyeKarty, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_НачислениеСписаниеБонусов_ДисконтныеКарты", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentNachislenieSpisanieBonusovDiskontnyeKarty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentNachislenieSpisanieBonusovDiskontnyeKarty(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_НачислениеСписаниеБонусов_ДисконтныеКарты", args)
}

func (c *Client) CreateDocumentNachislenieSpisanieBonusovDiskontnyeKarty(data DocumentNachislenieSpisanieBonusovDiskontnyeKarty) (*DocumentNachislenieSpisanieBonusovDiskontnyeKarty, error) {
	raw, err := c.createEntity("Document_НачислениеСписаниеБонусов_ДисконтныеКарты", data)
	if err != nil {
		return nil, err
	}
	result := DocumentNachislenieSpisanieBonusovDiskontnyeKarty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentNachislenieSpisanieBonusovDiskontnyeKartys(where Where) ([]DocumentNachislenieSpisanieBonusovDiskontnyeKarty, error) {
	type ReturnObj struct {
		Value []DocumentNachislenieSpisanieBonusovDiskontnyeKarty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_НачислениеСписаниеБонусов_ДисконтныеКарты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) Type(Key Guid) (*Type, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ТипыИзделий", args, []string{})
	if err != nil {
		return nil, err
	}
	result := Type{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateType(Key Guid, entity interface{}) (*Type, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ТипыИзделий", args, entity)
	if err != nil {
		return nil, err
	}
	result := Type{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveType(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ТипыИзделий", args)
}

func (c *Client) CreateType(data Type) (*Type, error) {
	raw, err := c.createEntity("Catalog_ТипыИзделий", data)
	if err != nil {
		return nil, err
	}
	result := Type{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) Types(where Where) ([]Type, error) {
	type ReturnObj struct {
		Value []Type `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ТипыИзделий", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogfmKodyVidovDokumentov(Key Guid) (*CatalogfmKodyVidovDokumentov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_фмКодыВидовДокументов", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogfmKodyVidovDokumentov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogfmKodyVidovDokumentov(Key Guid, entity interface{}) (*CatalogfmKodyVidovDokumentov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_фмКодыВидовДокументов", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogfmKodyVidovDokumentov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogfmKodyVidovDokumentov(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_фмКодыВидовДокументов", args)
}

func (c *Client) CreateCatalogfmKodyVidovDokumentov(data CatalogfmKodyVidovDokumentov) (*CatalogfmKodyVidovDokumentov, error) {
	raw, err := c.createEntity("Catalog_фмКодыВидовДокументов", data)
	if err != nil {
		return nil, err
	}
	result := CatalogfmKodyVidovDokumentov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogfmKodyVidovDokumentovs(where Where) ([]CatalogfmKodyVidovDokumentov, error) {
	type ReturnObj struct {
		Value []CatalogfmKodyVidovDokumentov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_фмКодыВидовДокументов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPlatezhnoeTrebovaniePoluchennoe(Key Guid) (*DocumentPlatezhnoeTrebovaniePoluchennoe, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ПлатежноеТребованиеПолученное", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnoeTrebovaniePoluchennoe{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPlatezhnoeTrebovaniePoluchennoe(Key Guid, entity interface{}) (*DocumentPlatezhnoeTrebovaniePoluchennoe, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ПлатежноеТребованиеПолученное", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnoeTrebovaniePoluchennoe{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPlatezhnoeTrebovaniePoluchennoe(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ПлатежноеТребованиеПолученное", args)
}

func (c *Client) CreateDocumentPlatezhnoeTrebovaniePoluchennoe(data DocumentPlatezhnoeTrebovaniePoluchennoe) (*DocumentPlatezhnoeTrebovaniePoluchennoe, error) {
	raw, err := c.createEntity("Document_ПлатежноеТребованиеПолученное", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnoeTrebovaniePoluchennoe{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPlatezhnoeTrebovaniePoluchennoes(where Where) ([]DocumentPlatezhnoeTrebovaniePoluchennoe, error) {
	type ReturnObj struct {
		Value []DocumentPlatezhnoeTrebovaniePoluchennoe `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПлатежноеТребованиеПолученное", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezha(Key Guid, LineNumber Int) (*DocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezha, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ПлатежноеТребованиеПолученное_РасшифровкаПлатежа", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezha(Key Guid, LineNumber Int, entity interface{}) (*DocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezha, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ПлатежноеТребованиеПолученное_РасшифровкаПлатежа", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezha(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ПлатежноеТребованиеПолученное_РасшифровкаПлатежа", args)
}

func (c *Client) CreateDocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezha(data DocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezha) (*DocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezha, error) {
	raw, err := c.createEntity("Document_ПлатежноеТребованиеПолученное_РасшифровкаПлатежа", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezhas(where Where) ([]DocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezha, error) {
	type ReturnObj struct {
		Value []DocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezha `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПлатежноеТребованиеПолученное_РасшифровкаПлатежа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragenta(Key Guid, LineNumber Int) (*DocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragenta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ПлатежноеТребованиеПолученное_РеквизитыКонтрагента", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragenta(Key Guid, LineNumber Int, entity interface{}) (*DocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragenta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ПлатежноеТребованиеПолученное_РеквизитыКонтрагента", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragenta(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ПлатежноеТребованиеПолученное_РеквизитыКонтрагента", args)
}

func (c *Client) CreateDocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragenta(data DocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragenta) (*DocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragenta, error) {
	raw, err := c.createEntity("Document_ПлатежноеТребованиеПолученное_РеквизитыКонтрагента", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragentas(where Where) ([]DocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragenta, error) {
	type ReturnObj struct {
		Value []DocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragenta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПлатежноеТребованиеПолученное_РеквизитыКонтрагента", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstv(Key Guid) (*DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstv, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ЗакрытиеПланируемыхПоступленийДенежныхСредств", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstv{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstv(Key Guid, entity interface{}) (*DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstv, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ЗакрытиеПланируемыхПоступленийДенежныхСредств", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstv{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstv(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ЗакрытиеПланируемыхПоступленийДенежныхСредств", args)
}

func (c *Client) CreateDocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstv(data DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstv) (*DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstv, error) {
	raw, err := c.createEntity("Document_ЗакрытиеПланируемыхПоступленийДенежныхСредств", data)
	if err != nil {
		return nil, err
	}
	result := DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstv{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvs(where Where) ([]DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstv, error) {
	type ReturnObj struct {
		Value []DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstv `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗакрытиеПланируемыхПоступленийДенежныхСредств", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDS(Key Guid, LineNumber Int) (*DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDS, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ЗакрытиеПланируемыхПоступленийДенежныхСредств_ПланируемыеПоступленияДС", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDS{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDS(Key Guid, LineNumber Int, entity interface{}) (*DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDS, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ЗакрытиеПланируемыхПоступленийДенежныхСредств_ПланируемыеПоступленияДС", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDS{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDS(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ЗакрытиеПланируемыхПоступленийДенежныхСредств_ПланируемыеПоступленияДС", args)
}

func (c *Client) CreateDocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDS(data DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDS) (*DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDS, error) {
	raw, err := c.createEntity("Document_ЗакрытиеПланируемыхПоступленийДенежныхСредств_ПланируемыеПоступленияДС", data)
	if err != nil {
		return nil, err
	}
	result := DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDS{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDSs(where Where) ([]DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDS, error) {
	type ReturnObj struct {
		Value []DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDS `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗакрытиеПланируемыхПоступленийДенежныхСредств_ПланируемыеПоступленияДС", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogRazdelyAnkety(Key Guid) (*CatalogRazdelyAnkety, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_РазделыАнкеты", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogRazdelyAnkety{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogRazdelyAnkety(Key Guid, entity interface{}) (*CatalogRazdelyAnkety, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_РазделыАнкеты", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogRazdelyAnkety{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogRazdelyAnkety(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_РазделыАнкеты", args)
}

func (c *Client) CreateCatalogRazdelyAnkety(data CatalogRazdelyAnkety) (*CatalogRazdelyAnkety, error) {
	raw, err := c.createEntity("Catalog_РазделыАнкеты", data)
	if err != nil {
		return nil, err
	}
	result := CatalogRazdelyAnkety{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogRazdelyAnketys(where Where) ([]CatalogRazdelyAnkety, error) {
	type ReturnObj struct {
		Value []CatalogRazdelyAnkety `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_РазделыАнкеты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentOtchetPoFinMonitoringu(Key Guid) (*DocumentOtchetPoFinMonitoringu, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ОтчетПоФинМониторингу", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetPoFinMonitoringu{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentOtchetPoFinMonitoringu(Key Guid, entity interface{}) (*DocumentOtchetPoFinMonitoringu, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ОтчетПоФинМониторингу", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetPoFinMonitoringu{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentOtchetPoFinMonitoringu(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ОтчетПоФинМониторингу", args)
}

func (c *Client) CreateDocumentOtchetPoFinMonitoringu(data DocumentOtchetPoFinMonitoringu) (*DocumentOtchetPoFinMonitoringu, error) {
	raw, err := c.createEntity("Document_ОтчетПоФинМониторингу", data)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetPoFinMonitoringu{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentOtchetPoFinMonitoringus(where Where) ([]DocumentOtchetPoFinMonitoringu, error) {
	type ReturnObj struct {
		Value []DocumentOtchetPoFinMonitoringu `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетПоФинМониторингу", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentOtchetPoFinMonitoringuDokumentyFinMonitoringa(Key Guid, LineNumber Int) (*DocumentOtchetPoFinMonitoringuDokumentyFinMonitoringa, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ОтчетПоФинМониторингу_ДокументыФинМониторинга", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetPoFinMonitoringuDokumentyFinMonitoringa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentOtchetPoFinMonitoringuDokumentyFinMonitoringa(Key Guid, LineNumber Int, entity interface{}) (*DocumentOtchetPoFinMonitoringuDokumentyFinMonitoringa, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ОтчетПоФинМониторингу_ДокументыФинМониторинга", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetPoFinMonitoringuDokumentyFinMonitoringa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentOtchetPoFinMonitoringuDokumentyFinMonitoringa(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ОтчетПоФинМониторингу_ДокументыФинМониторинга", args)
}

func (c *Client) CreateDocumentOtchetPoFinMonitoringuDokumentyFinMonitoringa(data DocumentOtchetPoFinMonitoringuDokumentyFinMonitoringa) (*DocumentOtchetPoFinMonitoringuDokumentyFinMonitoringa, error) {
	raw, err := c.createEntity("Document_ОтчетПоФинМониторингу_ДокументыФинМониторинга", data)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetPoFinMonitoringuDokumentyFinMonitoringa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentOtchetPoFinMonitoringuDokumentyFinMonitoringas(where Where) ([]DocumentOtchetPoFinMonitoringuDokumentyFinMonitoringa, error) {
	type ReturnObj struct {
		Value []DocumentOtchetPoFinMonitoringuDokumentyFinMonitoringa `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетПоФинМониторингу_ДокументыФинМониторинга", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentOtchetPoFinMonitoringuDannyeDokumenta(Key Guid, LineNumber Int) (*DocumentOtchetPoFinMonitoringuDannyeDokumenta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ОтчетПоФинМониторингу_ДанныеДокумента", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetPoFinMonitoringuDannyeDokumenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentOtchetPoFinMonitoringuDannyeDokumenta(Key Guid, LineNumber Int, entity interface{}) (*DocumentOtchetPoFinMonitoringuDannyeDokumenta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ОтчетПоФинМониторингу_ДанныеДокумента", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetPoFinMonitoringuDannyeDokumenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentOtchetPoFinMonitoringuDannyeDokumenta(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ОтчетПоФинМониторингу_ДанныеДокумента", args)
}

func (c *Client) CreateDocumentOtchetPoFinMonitoringuDannyeDokumenta(data DocumentOtchetPoFinMonitoringuDannyeDokumenta) (*DocumentOtchetPoFinMonitoringuDannyeDokumenta, error) {
	raw, err := c.createEntity("Document_ОтчетПоФинМониторингу_ДанныеДокумента", data)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetPoFinMonitoringuDannyeDokumenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentOtchetPoFinMonitoringuDannyeDokumentas(where Where) ([]DocumentOtchetPoFinMonitoringuDannyeDokumenta, error) {
	type ReturnObj struct {
		Value []DocumentOtchetPoFinMonitoringuDannyeDokumenta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетПоФинМониторингу_ДанныеДокумента", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogKliuchiAnalitikiUchetaNomenklatury(Key Guid) (*CatalogKliuchiAnalitikiUchetaNomenklatury, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_КлючиАналитикиУчетаНоменклатуры", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogKliuchiAnalitikiUchetaNomenklatury{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogKliuchiAnalitikiUchetaNomenklatury(Key Guid, entity interface{}) (*CatalogKliuchiAnalitikiUchetaNomenklatury, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_КлючиАналитикиУчетаНоменклатуры", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogKliuchiAnalitikiUchetaNomenklatury{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogKliuchiAnalitikiUchetaNomenklatury(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_КлючиАналитикиУчетаНоменклатуры", args)
}

func (c *Client) CreateCatalogKliuchiAnalitikiUchetaNomenklatury(data CatalogKliuchiAnalitikiUchetaNomenklatury) (*CatalogKliuchiAnalitikiUchetaNomenklatury, error) {
	raw, err := c.createEntity("Catalog_КлючиАналитикиУчетаНоменклатуры", data)
	if err != nil {
		return nil, err
	}
	result := CatalogKliuchiAnalitikiUchetaNomenklatury{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogKliuchiAnalitikiUchetaNomenklaturys(where Where) ([]CatalogKliuchiAnalitikiUchetaNomenklatury, error) {
	type ReturnObj struct {
		Value []CatalogKliuchiAnalitikiUchetaNomenklatury `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_КлючиАналитикиУчетаНоменклатуры", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogVersiiFailov(Key Guid) (*CatalogVersiiFailov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ВерсииФайлов", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogVersiiFailov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogVersiiFailov(Key Guid, entity interface{}) (*CatalogVersiiFailov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ВерсииФайлов", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogVersiiFailov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogVersiiFailov(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ВерсииФайлов", args)
}

func (c *Client) CreateCatalogVersiiFailov(data CatalogVersiiFailov) (*CatalogVersiiFailov, error) {
	raw, err := c.createEntity("Catalog_ВерсииФайлов", data)
	if err != nil {
		return nil, err
	}
	result := CatalogVersiiFailov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogVersiiFailovs(where Where) ([]CatalogVersiiFailov, error) {
	type ReturnObj struct {
		Value []CatalogVersiiFailov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ВерсииФайлов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogVersiiFailovElektronnyePodpisi(Key Guid, LineNumber Int) (*CatalogVersiiFailovElektronnyePodpisi, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_ВерсииФайлов_ЭлектронныеПодписи", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogVersiiFailovElektronnyePodpisi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogVersiiFailovElektronnyePodpisi(Key Guid, LineNumber Int, entity interface{}) (*CatalogVersiiFailovElektronnyePodpisi, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_ВерсииФайлов_ЭлектронныеПодписи", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogVersiiFailovElektronnyePodpisi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogVersiiFailovElektronnyePodpisi(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_ВерсииФайлов_ЭлектронныеПодписи", args)
}

func (c *Client) CreateCatalogVersiiFailovElektronnyePodpisi(data CatalogVersiiFailovElektronnyePodpisi) (*CatalogVersiiFailovElektronnyePodpisi, error) {
	raw, err := c.createEntity("Catalog_ВерсииФайлов_ЭлектронныеПодписи", data)
	if err != nil {
		return nil, err
	}
	result := CatalogVersiiFailovElektronnyePodpisi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogVersiiFailovElektronnyePodpisis(where Where) ([]CatalogVersiiFailovElektronnyePodpisi, error) {
	type ReturnObj struct {
		Value []CatalogVersiiFailovElektronnyePodpisi `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ВерсииФайлов_ЭлектронныеПодписи", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentUstanovkaTsenNomenklatury(Key Guid) (*DocumentUstanovkaTsenNomenklatury, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_УстановкаЦенНоменклатуры", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentUstanovkaTsenNomenklatury{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentUstanovkaTsenNomenklatury(Key Guid, entity interface{}) (*DocumentUstanovkaTsenNomenklatury, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_УстановкаЦенНоменклатуры", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentUstanovkaTsenNomenklatury{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentUstanovkaTsenNomenklatury(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_УстановкаЦенНоменклатуры", args)
}

func (c *Client) CreateDocumentUstanovkaTsenNomenklatury(data DocumentUstanovkaTsenNomenklatury) (*DocumentUstanovkaTsenNomenklatury, error) {
	raw, err := c.createEntity("Document_УстановкаЦенНоменклатуры", data)
	if err != nil {
		return nil, err
	}
	result := DocumentUstanovkaTsenNomenklatury{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentUstanovkaTsenNomenklaturys(where Where) ([]DocumentUstanovkaTsenNomenklatury, error) {
	type ReturnObj struct {
		Value []DocumentUstanovkaTsenNomenklatury `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_УстановкаЦенНоменклатуры", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentUstanovkaTsenNomenklaturyTipyTsen(Key Guid, LineNumber Int) (*DocumentUstanovkaTsenNomenklaturyTipyTsen, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_УстановкаЦенНоменклатуры_ТипыЦен", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentUstanovkaTsenNomenklaturyTipyTsen{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentUstanovkaTsenNomenklaturyTipyTsen(Key Guid, LineNumber Int, entity interface{}) (*DocumentUstanovkaTsenNomenklaturyTipyTsen, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_УстановкаЦенНоменклатуры_ТипыЦен", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentUstanovkaTsenNomenklaturyTipyTsen{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentUstanovkaTsenNomenklaturyTipyTsen(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_УстановкаЦенНоменклатуры_ТипыЦен", args)
}

func (c *Client) CreateDocumentUstanovkaTsenNomenklaturyTipyTsen(data DocumentUstanovkaTsenNomenklaturyTipyTsen) (*DocumentUstanovkaTsenNomenklaturyTipyTsen, error) {
	raw, err := c.createEntity("Document_УстановкаЦенНоменклатуры_ТипыЦен", data)
	if err != nil {
		return nil, err
	}
	result := DocumentUstanovkaTsenNomenklaturyTipyTsen{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentUstanovkaTsenNomenklaturyTipyTsens(where Where) ([]DocumentUstanovkaTsenNomenklaturyTipyTsen, error) {
	type ReturnObj struct {
		Value []DocumentUstanovkaTsenNomenklaturyTipyTsen `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_УстановкаЦенНоменклатуры_ТипыЦен", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentUstanovkaTsenNomenklaturyTovary(Key Guid, LineNumber Int) (*DocumentUstanovkaTsenNomenklaturyTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_УстановкаЦенНоменклатуры_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentUstanovkaTsenNomenklaturyTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentUstanovkaTsenNomenklaturyTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentUstanovkaTsenNomenklaturyTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_УстановкаЦенНоменклатуры_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentUstanovkaTsenNomenklaturyTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentUstanovkaTsenNomenklaturyTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_УстановкаЦенНоменклатуры_Товары", args)
}

func (c *Client) CreateDocumentUstanovkaTsenNomenklaturyTovary(data DocumentUstanovkaTsenNomenklaturyTovary) (*DocumentUstanovkaTsenNomenklaturyTovary, error) {
	raw, err := c.createEntity("Document_УстановкаЦенНоменклатуры_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentUstanovkaTsenNomenklaturyTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentUstanovkaTsenNomenklaturyTovarys(where Where) ([]DocumentUstanovkaTsenNomenklaturyTovary, error) {
	type ReturnObj struct {
		Value []DocumentUstanovkaTsenNomenklaturyTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_УстановкаЦенНоменклатуры_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstv(Key Guid) (*DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstv, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ПлатежныйОрдерСписаниеДенежныхСредств", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstv{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPlatezhnyiOrderSpisanieDenezhnykhSredstv(Key Guid, entity interface{}) (*DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstv, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ПлатежныйОрдерСписаниеДенежныхСредств", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstv{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPlatezhnyiOrderSpisanieDenezhnykhSredstv(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ПлатежныйОрдерСписаниеДенежныхСредств", args)
}

func (c *Client) CreateDocumentPlatezhnyiOrderSpisanieDenezhnykhSredstv(data DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstv) (*DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstv, error) {
	raw, err := c.createEntity("Document_ПлатежныйОрдерСписаниеДенежныхСредств", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstv{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvs(where Where) ([]DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstv, error) {
	type ReturnObj struct {
		Value []DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstv `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПлатежныйОрдерСписаниеДенежныхСредств", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezha(Key Guid, LineNumber Int) (*DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezha, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ПлатежныйОрдерСписаниеДенежныхСредств_РасшифровкаПлатежа", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezha(Key Guid, LineNumber Int, entity interface{}) (*DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezha, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ПлатежныйОрдерСписаниеДенежныхСредств_РасшифровкаПлатежа", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezha(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ПлатежныйОрдерСписаниеДенежныхСредств_РасшифровкаПлатежа", args)
}

func (c *Client) CreateDocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezha(data DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezha) (*DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezha, error) {
	raw, err := c.createEntity("Document_ПлатежныйОрдерСписаниеДенежныхСредств_РасшифровкаПлатежа", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezhas(where Where) ([]DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezha, error) {
	type ReturnObj struct {
		Value []DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezha `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПлатежныйОрдерСписаниеДенежныхСредств_РасшифровкаПлатежа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragenta(Key Guid, LineNumber Int) (*DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragenta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ПлатежныйОрдерСписаниеДенежныхСредств_РеквизитыКонтрагента", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragenta(Key Guid, LineNumber Int, entity interface{}) (*DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragenta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ПлатежныйОрдерСписаниеДенежныхСредств_РеквизитыКонтрагента", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragenta(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ПлатежныйОрдерСписаниеДенежныхСредств_РеквизитыКонтрагента", args)
}

func (c *Client) CreateDocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragenta(data DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragenta) (*DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragenta, error) {
	raw, err := c.createEntity("Document_ПлатежныйОрдерСписаниеДенежныхСредств_РеквизитыКонтрагента", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragentas(where Where) ([]DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragenta, error) {
	type ReturnObj struct {
		Value []DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragenta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПлатежныйОрдерСписаниеДенежныхСредств_РеквизитыКонтрагента", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPreiskurantNaSkupku(Key Guid) (*DocumentPreiskurantNaSkupku, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ПрейскурантНаСкупку", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPreiskurantNaSkupku{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPreiskurantNaSkupku(Key Guid, entity interface{}) (*DocumentPreiskurantNaSkupku, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ПрейскурантНаСкупку", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPreiskurantNaSkupku{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPreiskurantNaSkupku(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ПрейскурантНаСкупку", args)
}

func (c *Client) CreateDocumentPreiskurantNaSkupku(data DocumentPreiskurantNaSkupku) (*DocumentPreiskurantNaSkupku, error) {
	raw, err := c.createEntity("Document_ПрейскурантНаСкупку", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPreiskurantNaSkupku{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPreiskurantNaSkupkus(where Where) ([]DocumentPreiskurantNaSkupku, error) {
	type ReturnObj struct {
		Value []DocumentPreiskurantNaSkupku `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПрейскурантНаСкупку", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPreiskurantNaSkupkuProby(Key Guid, LineNumber Int) (*DocumentPreiskurantNaSkupkuProby, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ПрейскурантНаСкупку_Пробы", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPreiskurantNaSkupkuProby{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPreiskurantNaSkupkuProby(Key Guid, LineNumber Int, entity interface{}) (*DocumentPreiskurantNaSkupkuProby, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ПрейскурантНаСкупку_Пробы", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPreiskurantNaSkupkuProby{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPreiskurantNaSkupkuProby(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ПрейскурантНаСкупку_Пробы", args)
}

func (c *Client) CreateDocumentPreiskurantNaSkupkuProby(data DocumentPreiskurantNaSkupkuProby) (*DocumentPreiskurantNaSkupkuProby, error) {
	raw, err := c.createEntity("Document_ПрейскурантНаСкупку_Пробы", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPreiskurantNaSkupkuProby{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPreiskurantNaSkupkuProbys(where Where) ([]DocumentPreiskurantNaSkupkuProby, error) {
	type ReturnObj struct {
		Value []DocumentPreiskurantNaSkupkuProby `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПрейскурантНаСкупку_Пробы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPeredachaMaterialovVProizvodstvo(Key Guid) (*DocumentPeredachaMaterialovVProizvodstvo, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ПередачаМатериаловВПроизводство", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPeredachaMaterialovVProizvodstvo{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPeredachaMaterialovVProizvodstvo(Key Guid, entity interface{}) (*DocumentPeredachaMaterialovVProizvodstvo, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ПередачаМатериаловВПроизводство", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPeredachaMaterialovVProizvodstvo{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPeredachaMaterialovVProizvodstvo(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ПередачаМатериаловВПроизводство", args)
}

func (c *Client) CreateDocumentPeredachaMaterialovVProizvodstvo(data DocumentPeredachaMaterialovVProizvodstvo) (*DocumentPeredachaMaterialovVProizvodstvo, error) {
	raw, err := c.createEntity("Document_ПередачаМатериаловВПроизводство", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPeredachaMaterialovVProizvodstvo{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPeredachaMaterialovVProizvodstvos(where Where) ([]DocumentPeredachaMaterialovVProizvodstvo, error) {
	type ReturnObj struct {
		Value []DocumentPeredachaMaterialovVProizvodstvo `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПередачаМатериаловВПроизводство", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPeredachaMaterialovVProizvodstvoTovary(Key Guid, LineNumber Int) (*DocumentPeredachaMaterialovVProizvodstvoTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ПередачаМатериаловВПроизводство_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPeredachaMaterialovVProizvodstvoTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPeredachaMaterialovVProizvodstvoTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentPeredachaMaterialovVProizvodstvoTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ПередачаМатериаловВПроизводство_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPeredachaMaterialovVProizvodstvoTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPeredachaMaterialovVProizvodstvoTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ПередачаМатериаловВПроизводство_Товары", args)
}

func (c *Client) CreateDocumentPeredachaMaterialovVProizvodstvoTovary(data DocumentPeredachaMaterialovVProizvodstvoTovary) (*DocumentPeredachaMaterialovVProizvodstvoTovary, error) {
	raw, err := c.createEntity("Document_ПередачаМатериаловВПроизводство_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPeredachaMaterialovVProizvodstvoTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPeredachaMaterialovVProizvodstvoTovarys(where Where) ([]DocumentPeredachaMaterialovVProizvodstvoTovary, error) {
	type ReturnObj struct {
		Value []DocumentPeredachaMaterialovVProizvodstvoTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПередачаМатериаловВПроизводство_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentVnutrenniiZakaz(Key Guid) (*DocumentVnutrenniiZakaz, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ВнутреннийЗаказ", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentVnutrenniiZakaz{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentVnutrenniiZakaz(Key Guid, entity interface{}) (*DocumentVnutrenniiZakaz, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ВнутреннийЗаказ", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentVnutrenniiZakaz{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentVnutrenniiZakaz(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ВнутреннийЗаказ", args)
}

func (c *Client) CreateDocumentVnutrenniiZakaz(data DocumentVnutrenniiZakaz) (*DocumentVnutrenniiZakaz, error) {
	raw, err := c.createEntity("Document_ВнутреннийЗаказ", data)
	if err != nil {
		return nil, err
	}
	result := DocumentVnutrenniiZakaz{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentVnutrenniiZakazs(where Where) ([]DocumentVnutrenniiZakaz, error) {
	type ReturnObj struct {
		Value []DocumentVnutrenniiZakaz `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВнутреннийЗаказ", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentVnutrenniiZakazTovary(Key Guid, LineNumber Int) (*DocumentVnutrenniiZakazTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ВнутреннийЗаказ_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentVnutrenniiZakazTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentVnutrenniiZakazTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentVnutrenniiZakazTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ВнутреннийЗаказ_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentVnutrenniiZakazTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentVnutrenniiZakazTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ВнутреннийЗаказ_Товары", args)
}

func (c *Client) CreateDocumentVnutrenniiZakazTovary(data DocumentVnutrenniiZakazTovary) (*DocumentVnutrenniiZakazTovary, error) {
	raw, err := c.createEntity("Document_ВнутреннийЗаказ_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentVnutrenniiZakazTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentVnutrenniiZakazTovarys(where Where) ([]DocumentVnutrenniiZakazTovary, error) {
	type ReturnObj struct {
		Value []DocumentVnutrenniiZakazTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВнутреннийЗаказ_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogKhranilishcheDopolnitelnoiInformatsii(Key Guid) (*CatalogKhranilishcheDopolnitelnoiInformatsii, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ХранилищеДополнительнойИнформации", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogKhranilishcheDopolnitelnoiInformatsii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogKhranilishcheDopolnitelnoiInformatsii(Key Guid, entity interface{}) (*CatalogKhranilishcheDopolnitelnoiInformatsii, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ХранилищеДополнительнойИнформации", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogKhranilishcheDopolnitelnoiInformatsii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogKhranilishcheDopolnitelnoiInformatsii(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ХранилищеДополнительнойИнформации", args)
}

func (c *Client) CreateCatalogKhranilishcheDopolnitelnoiInformatsii(data CatalogKhranilishcheDopolnitelnoiInformatsii) (*CatalogKhranilishcheDopolnitelnoiInformatsii, error) {
	raw, err := c.createEntity("Catalog_ХранилищеДополнительнойИнформации", data)
	if err != nil {
		return nil, err
	}
	result := CatalogKhranilishcheDopolnitelnoiInformatsii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogKhranilishcheDopolnitelnoiInformatsiis(where Where) ([]CatalogKhranilishcheDopolnitelnoiInformatsii, error) {
	type ReturnObj struct {
		Value []CatalogKhranilishcheDopolnitelnoiInformatsii `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ХранилищеДополнительнойИнформации", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogDopolnitelnyeVneshnieObrabotki(Key Guid) (*CatalogDopolnitelnyeVneshnieObrabotki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ДополнительныеВнешниеОбработки", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogDopolnitelnyeVneshnieObrabotki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogDopolnitelnyeVneshnieObrabotki(Key Guid, entity interface{}) (*CatalogDopolnitelnyeVneshnieObrabotki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ДополнительныеВнешниеОбработки", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogDopolnitelnyeVneshnieObrabotki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogDopolnitelnyeVneshnieObrabotki(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ДополнительныеВнешниеОбработки", args)
}

func (c *Client) CreateCatalogDopolnitelnyeVneshnieObrabotki(data CatalogDopolnitelnyeVneshnieObrabotki) (*CatalogDopolnitelnyeVneshnieObrabotki, error) {
	raw, err := c.createEntity("Catalog_ДополнительныеВнешниеОбработки", data)
	if err != nil {
		return nil, err
	}
	result := CatalogDopolnitelnyeVneshnieObrabotki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogDopolnitelnyeVneshnieObrabotkis(where Where) ([]CatalogDopolnitelnyeVneshnieObrabotki, error) {
	type ReturnObj struct {
		Value []CatalogDopolnitelnyeVneshnieObrabotki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ДополнительныеВнешниеОбработки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnost(Key Guid, LineNumber Int) (*CatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnost, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_ДополнительныеВнешниеОбработки_Принадлежность", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnost{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnost(Key Guid, LineNumber Int, entity interface{}) (*CatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnost, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_ДополнительныеВнешниеОбработки_Принадлежность", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnost{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnost(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_ДополнительныеВнешниеОбработки_Принадлежность", args)
}

func (c *Client) CreateCatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnost(data CatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnost) (*CatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnost, error) {
	raw, err := c.createEntity("Catalog_ДополнительныеВнешниеОбработки_Принадлежность", data)
	if err != nil {
		return nil, err
	}
	result := CatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnost{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnosts(where Where) ([]CatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnost, error) {
	type ReturnObj struct {
		Value []CatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnost `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ДополнительныеВнешниеОбработки_Принадлежность", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogDopolnitelnyeVneshnieObrabotkiKomandy(Key Guid, LineNumber Int) (*CatalogDopolnitelnyeVneshnieObrabotkiKomandy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_ДополнительныеВнешниеОбработки_Команды", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogDopolnitelnyeVneshnieObrabotkiKomandy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogDopolnitelnyeVneshnieObrabotkiKomandy(Key Guid, LineNumber Int, entity interface{}) (*CatalogDopolnitelnyeVneshnieObrabotkiKomandy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_ДополнительныеВнешниеОбработки_Команды", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogDopolnitelnyeVneshnieObrabotkiKomandy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogDopolnitelnyeVneshnieObrabotkiKomandy(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_ДополнительныеВнешниеОбработки_Команды", args)
}

func (c *Client) CreateCatalogDopolnitelnyeVneshnieObrabotkiKomandy(data CatalogDopolnitelnyeVneshnieObrabotkiKomandy) (*CatalogDopolnitelnyeVneshnieObrabotkiKomandy, error) {
	raw, err := c.createEntity("Catalog_ДополнительныеВнешниеОбработки_Команды", data)
	if err != nil {
		return nil, err
	}
	result := CatalogDopolnitelnyeVneshnieObrabotkiKomandy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogDopolnitelnyeVneshnieObrabotkiKomandys(where Where) ([]CatalogDopolnitelnyeVneshnieObrabotkiKomandy, error) {
	type ReturnObj struct {
		Value []CatalogDopolnitelnyeVneshnieObrabotkiKomandy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ДополнительныеВнешниеОбработки_Команды", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogDopolnitelnyeVneshnieObrabotkiRazdely(Key Guid, LineNumber Int) (*CatalogDopolnitelnyeVneshnieObrabotkiRazdely, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_ДополнительныеВнешниеОбработки_Разделы", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogDopolnitelnyeVneshnieObrabotkiRazdely{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogDopolnitelnyeVneshnieObrabotkiRazdely(Key Guid, LineNumber Int, entity interface{}) (*CatalogDopolnitelnyeVneshnieObrabotkiRazdely, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_ДополнительныеВнешниеОбработки_Разделы", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogDopolnitelnyeVneshnieObrabotkiRazdely{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogDopolnitelnyeVneshnieObrabotkiRazdely(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_ДополнительныеВнешниеОбработки_Разделы", args)
}

func (c *Client) CreateCatalogDopolnitelnyeVneshnieObrabotkiRazdely(data CatalogDopolnitelnyeVneshnieObrabotkiRazdely) (*CatalogDopolnitelnyeVneshnieObrabotkiRazdely, error) {
	raw, err := c.createEntity("Catalog_ДополнительныеВнешниеОбработки_Разделы", data)
	if err != nil {
		return nil, err
	}
	result := CatalogDopolnitelnyeVneshnieObrabotkiRazdely{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogDopolnitelnyeVneshnieObrabotkiRazdelys(where Where) ([]CatalogDopolnitelnyeVneshnieObrabotkiRazdely, error) {
	type ReturnObj struct {
		Value []CatalogDopolnitelnyeVneshnieObrabotkiRazdely `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ДополнительныеВнешниеОбработки_Разделы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogDopolnitelnyeVneshnieObrabotkiNaznachenie(Key Guid, LineNumber Int) (*CatalogDopolnitelnyeVneshnieObrabotkiNaznachenie, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_ДополнительныеВнешниеОбработки_Назначение", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogDopolnitelnyeVneshnieObrabotkiNaznachenie{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogDopolnitelnyeVneshnieObrabotkiNaznachenie(Key Guid, LineNumber Int, entity interface{}) (*CatalogDopolnitelnyeVneshnieObrabotkiNaznachenie, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_ДополнительныеВнешниеОбработки_Назначение", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogDopolnitelnyeVneshnieObrabotkiNaznachenie{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogDopolnitelnyeVneshnieObrabotkiNaznachenie(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_ДополнительныеВнешниеОбработки_Назначение", args)
}

func (c *Client) CreateCatalogDopolnitelnyeVneshnieObrabotkiNaznachenie(data CatalogDopolnitelnyeVneshnieObrabotkiNaznachenie) (*CatalogDopolnitelnyeVneshnieObrabotkiNaznachenie, error) {
	raw, err := c.createEntity("Catalog_ДополнительныеВнешниеОбработки_Назначение", data)
	if err != nil {
		return nil, err
	}
	result := CatalogDopolnitelnyeVneshnieObrabotkiNaznachenie{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogDopolnitelnyeVneshnieObrabotkiNaznachenies(where Where) ([]CatalogDopolnitelnyeVneshnieObrabotkiNaznachenie, error) {
	type ReturnObj struct {
		Value []CatalogDopolnitelnyeVneshnieObrabotkiNaznachenie `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ДополнительныеВнешниеОбработки_Назначение", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogDopolnitelnyeVneshnieObrabotkiRazresheniia(Key Guid, LineNumber Int) (*CatalogDopolnitelnyeVneshnieObrabotkiRazresheniia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_ДополнительныеВнешниеОбработки_Разрешения", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogDopolnitelnyeVneshnieObrabotkiRazresheniia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogDopolnitelnyeVneshnieObrabotkiRazresheniia(Key Guid, LineNumber Int, entity interface{}) (*CatalogDopolnitelnyeVneshnieObrabotkiRazresheniia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_ДополнительныеВнешниеОбработки_Разрешения", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogDopolnitelnyeVneshnieObrabotkiRazresheniia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogDopolnitelnyeVneshnieObrabotkiRazresheniia(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_ДополнительныеВнешниеОбработки_Разрешения", args)
}

func (c *Client) CreateCatalogDopolnitelnyeVneshnieObrabotkiRazresheniia(data CatalogDopolnitelnyeVneshnieObrabotkiRazresheniia) (*CatalogDopolnitelnyeVneshnieObrabotkiRazresheniia, error) {
	raw, err := c.createEntity("Catalog_ДополнительныеВнешниеОбработки_Разрешения", data)
	if err != nil {
		return nil, err
	}
	result := CatalogDopolnitelnyeVneshnieObrabotkiRazresheniia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogDopolnitelnyeVneshnieObrabotkiRazresheniias(where Where) ([]CatalogDopolnitelnyeVneshnieObrabotkiRazresheniia, error) {
	type ReturnObj struct {
		Value []CatalogDopolnitelnyeVneshnieObrabotkiRazresheniia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ДополнительныеВнешниеОбработки_Разрешения", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogGruppyPolzovatelei(Key Guid) (*CatalogGruppyPolzovatelei, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ГруппыПользователей", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogGruppyPolzovatelei{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogGruppyPolzovatelei(Key Guid, entity interface{}) (*CatalogGruppyPolzovatelei, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ГруппыПользователей", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogGruppyPolzovatelei{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogGruppyPolzovatelei(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ГруппыПользователей", args)
}

func (c *Client) CreateCatalogGruppyPolzovatelei(data CatalogGruppyPolzovatelei) (*CatalogGruppyPolzovatelei, error) {
	raw, err := c.createEntity("Catalog_ГруппыПользователей", data)
	if err != nil {
		return nil, err
	}
	result := CatalogGruppyPolzovatelei{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogGruppyPolzovateleis(where Where) ([]CatalogGruppyPolzovatelei, error) {
	type ReturnObj struct {
		Value []CatalogGruppyPolzovatelei `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ГруппыПользователей", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogGruppyPolzovateleiPolzovateliGruppy(Key Guid, LineNumber Int) (*CatalogGruppyPolzovateleiPolzovateliGruppy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_ГруппыПользователей_ПользователиГруппы", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogGruppyPolzovateleiPolzovateliGruppy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogGruppyPolzovateleiPolzovateliGruppy(Key Guid, LineNumber Int, entity interface{}) (*CatalogGruppyPolzovateleiPolzovateliGruppy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_ГруппыПользователей_ПользователиГруппы", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogGruppyPolzovateleiPolzovateliGruppy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogGruppyPolzovateleiPolzovateliGruppy(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_ГруппыПользователей_ПользователиГруппы", args)
}

func (c *Client) CreateCatalogGruppyPolzovateleiPolzovateliGruppy(data CatalogGruppyPolzovateleiPolzovateliGruppy) (*CatalogGruppyPolzovateleiPolzovateliGruppy, error) {
	raw, err := c.createEntity("Catalog_ГруппыПользователей_ПользователиГруппы", data)
	if err != nil {
		return nil, err
	}
	result := CatalogGruppyPolzovateleiPolzovateliGruppy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogGruppyPolzovateleiPolzovateliGruppys(where Where) ([]CatalogGruppyPolzovateleiPolzovateliGruppy, error) {
	type ReturnObj struct {
		Value []CatalogGruppyPolzovateleiPolzovateliGruppy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ГруппыПользователей_ПользователиГруппы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentJournalZakazyKlientov(Ref String, RefType String) (*DocumentJournalZakazyKlientov, error) {
	args := []string{fmt.Sprintf("Ref='%s' ", url.PathEscape(string(Ref))), fmt.Sprintf("Ref_Type='%s' ", url.PathEscape(string(RefType)))}
	raw, err := c.getEntity("DocumentJournal_ЗаказыКлиентов", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentJournalZakazyKlientov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentJournalZakazyKlientov(Ref String, RefType String, entity interface{}) (*DocumentJournalZakazyKlientov, error) {
	args := []string{fmt.Sprintf("Ref='%s' ", url.PathEscape(string(Ref))), fmt.Sprintf("Ref_Type='%s' ", url.PathEscape(string(RefType)))}
	raw, err := c.updateEntity("DocumentJournal_ЗаказыКлиентов", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentJournalZakazyKlientov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentJournalZakazyKlientov(Ref String, RefType String) error {
	args := []string{fmt.Sprintf("Ref='%s' ", url.PathEscape(string(Ref))), fmt.Sprintf("Ref_Type='%s' ", url.PathEscape(string(RefType)))}
	return c.removeEntity("DocumentJournal_ЗаказыКлиентов", args)
}

func (c *Client) CreateDocumentJournalZakazyKlientov(data DocumentJournalZakazyKlientov) (*DocumentJournalZakazyKlientov, error) {
	raw, err := c.createEntity("DocumentJournal_ЗаказыКлиентов", data)
	if err != nil {
		return nil, err
	}
	result := DocumentJournalZakazyKlientov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentJournalZakazyKlientovs(where Where) ([]DocumentJournalZakazyKlientov, error) {
	type ReturnObj struct {
		Value []DocumentJournalZakazyKlientov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("DocumentJournal_ЗаказыКлиентов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochki(Key Guid) (*DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ВозвратТоваровПоставщикуИзНеавтоматизированнойТорговойТочки", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochki(Key Guid, entity interface{}) (*DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ВозвратТоваровПоставщикуИзНеавтоматизированнойТорговойТочки", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochki(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ВозвратТоваровПоставщикуИзНеавтоматизированнойТорговойТочки", args)
}

func (c *Client) CreateDocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochki(data DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochki) (*DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochki, error) {
	raw, err := c.createEntity("Document_ВозвратТоваровПоставщикуИзНеавтоматизированнойТорговойТочки", data)
	if err != nil {
		return nil, err
	}
	result := DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkis(where Where) ([]DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochki, error) {
	type ReturnObj struct {
		Value []DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВозвратТоваровПоставщикуИзНеавтоматизированнойТорговойТочки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovary(Key Guid, LineNumber Int) (*DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ВозвратТоваровПоставщикуИзНеавтоматизированнойТорговойТочки_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ВозвратТоваровПоставщикуИзНеавтоматизированнойТорговойТочки_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ВозвратТоваровПоставщикуИзНеавтоматизированнойТорговойТочки_Товары", args)
}

func (c *Client) CreateDocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovary(data DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovary) (*DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovary, error) {
	raw, err := c.createEntity("Document_ВозвратТоваровПоставщикуИзНеавтоматизированнойТорговойТочки_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovarys(where Where) ([]DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovary, error) {
	type ReturnObj struct {
		Value []DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВозвратТоваровПоставщикуИзНеавтоматизированнойТорговойТочки_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentZaiavkaNaPeremeshchenieTovarov(Key Guid) (*DocumentZaiavkaNaPeremeshchenieTovarov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ЗаявкаНаПеремещениеТоваров", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentZaiavkaNaPeremeshchenieTovarov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentZaiavkaNaPeremeshchenieTovarov(Key Guid, entity interface{}) (*DocumentZaiavkaNaPeremeshchenieTovarov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ЗаявкаНаПеремещениеТоваров", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentZaiavkaNaPeremeshchenieTovarov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentZaiavkaNaPeremeshchenieTovarov(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ЗаявкаНаПеремещениеТоваров", args)
}

func (c *Client) CreateDocumentZaiavkaNaPeremeshchenieTovarov(data DocumentZaiavkaNaPeremeshchenieTovarov) (*DocumentZaiavkaNaPeremeshchenieTovarov, error) {
	raw, err := c.createEntity("Document_ЗаявкаНаПеремещениеТоваров", data)
	if err != nil {
		return nil, err
	}
	result := DocumentZaiavkaNaPeremeshchenieTovarov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentZaiavkaNaPeremeshchenieTovarovs(where Where) ([]DocumentZaiavkaNaPeremeshchenieTovarov, error) {
	type ReturnObj struct {
		Value []DocumentZaiavkaNaPeremeshchenieTovarov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗаявкаНаПеремещениеТоваров", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentZaiavkaNaPeremeshchenieTovarovTovary(Key Guid, LineNumber Int) (*DocumentZaiavkaNaPeremeshchenieTovarovTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ЗаявкаНаПеремещениеТоваров_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentZaiavkaNaPeremeshchenieTovarovTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentZaiavkaNaPeremeshchenieTovarovTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentZaiavkaNaPeremeshchenieTovarovTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ЗаявкаНаПеремещениеТоваров_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentZaiavkaNaPeremeshchenieTovarovTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentZaiavkaNaPeremeshchenieTovarovTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ЗаявкаНаПеремещениеТоваров_Товары", args)
}

func (c *Client) CreateDocumentZaiavkaNaPeremeshchenieTovarovTovary(data DocumentZaiavkaNaPeremeshchenieTovarovTovary) (*DocumentZaiavkaNaPeremeshchenieTovarovTovary, error) {
	raw, err := c.createEntity("Document_ЗаявкаНаПеремещениеТоваров_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentZaiavkaNaPeremeshchenieTovarovTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentZaiavkaNaPeremeshchenieTovarovTovarys(where Where) ([]DocumentZaiavkaNaPeremeshchenieTovarovTovary, error) {
	type ReturnObj struct {
		Value []DocumentZaiavkaNaPeremeshchenieTovarovTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗаявкаНаПеремещениеТоваров_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogUsloviiaProdazh(Key Guid) (*CatalogUsloviiaProdazh, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_УсловияПродаж", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogUsloviiaProdazh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogUsloviiaProdazh(Key Guid, entity interface{}) (*CatalogUsloviiaProdazh, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_УсловияПродаж", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogUsloviiaProdazh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogUsloviiaProdazh(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_УсловияПродаж", args)
}

func (c *Client) CreateCatalogUsloviiaProdazh(data CatalogUsloviiaProdazh) (*CatalogUsloviiaProdazh, error) {
	raw, err := c.createEntity("Catalog_УсловияПродаж", data)
	if err != nil {
		return nil, err
	}
	result := CatalogUsloviiaProdazh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogUsloviiaProdazhs(where Where) ([]CatalogUsloviiaProdazh, error) {
	type ReturnObj struct {
		Value []CatalogUsloviiaProdazh `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_УсловияПродаж", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentVvodNachalnykhOstatkovPoFinMonitoringu(Key Guid) (*DocumentVvodNachalnykhOstatkovPoFinMonitoringu, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ВводНачальныхОстатковПоФинМониторингу", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentVvodNachalnykhOstatkovPoFinMonitoringu{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentVvodNachalnykhOstatkovPoFinMonitoringu(Key Guid, entity interface{}) (*DocumentVvodNachalnykhOstatkovPoFinMonitoringu, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ВводНачальныхОстатковПоФинМониторингу", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentVvodNachalnykhOstatkovPoFinMonitoringu{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentVvodNachalnykhOstatkovPoFinMonitoringu(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ВводНачальныхОстатковПоФинМониторингу", args)
}

func (c *Client) CreateDocumentVvodNachalnykhOstatkovPoFinMonitoringu(data DocumentVvodNachalnykhOstatkovPoFinMonitoringu) (*DocumentVvodNachalnykhOstatkovPoFinMonitoringu, error) {
	raw, err := c.createEntity("Document_ВводНачальныхОстатковПоФинМониторингу", data)
	if err != nil {
		return nil, err
	}
	result := DocumentVvodNachalnykhOstatkovPoFinMonitoringu{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentVvodNachalnykhOstatkovPoFinMonitoringus(where Where) ([]DocumentVvodNachalnykhOstatkovPoFinMonitoringu, error) {
	type ReturnObj struct {
		Value []DocumentVvodNachalnykhOstatkovPoFinMonitoringu `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВводНачальныхОстатковПоФинМониторингу", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovora(Key Guid, LineNumber Int) (*DocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovora, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ВводНачальныхОстатковПоФинМониторингу_Договора", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovora{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovora(Key Guid, LineNumber Int, entity interface{}) (*DocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovora, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ВводНачальныхОстатковПоФинМониторингу_Договора", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovora{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovora(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ВводНачальныхОстатковПоФинМониторингу_Договора", args)
}

func (c *Client) CreateDocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovora(data DocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovora) (*DocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovora, error) {
	raw, err := c.createEntity("Document_ВводНачальныхОстатковПоФинМониторингу_Договора", data)
	if err != nil {
		return nil, err
	}
	result := DocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovora{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovoras(where Where) ([]DocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovora, error) {
	type ReturnObj struct {
		Value []DocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovora `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВводНачальныхОстатковПоФинМониторингу_Договора", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogOrganizatsii(Key Guid) (*CatalogOrganizatsii, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_Организации", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogOrganizatsii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogOrganizatsii(Key Guid, entity interface{}) (*CatalogOrganizatsii, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_Организации", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogOrganizatsii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogOrganizatsii(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_Организации", args)
}

func (c *Client) CreateCatalogOrganizatsii(data CatalogOrganizatsii) (*CatalogOrganizatsii, error) {
	raw, err := c.createEntity("Catalog_Организации", data)
	if err != nil {
		return nil, err
	}
	result := CatalogOrganizatsii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogOrganizatsiis(where Where) ([]CatalogOrganizatsii, error) {
	type ReturnObj struct {
		Value []CatalogOrganizatsii `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Организации", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogUsloviiaOplaty(Key Guid) (*CatalogUsloviiaOplaty, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_УсловияОплаты", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogUsloviiaOplaty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogUsloviiaOplaty(Key Guid, entity interface{}) (*CatalogUsloviiaOplaty, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_УсловияОплаты", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogUsloviiaOplaty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogUsloviiaOplaty(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_УсловияОплаты", args)
}

func (c *Client) CreateCatalogUsloviiaOplaty(data CatalogUsloviiaOplaty) (*CatalogUsloviiaOplaty, error) {
	raw, err := c.createEntity("Catalog_УсловияОплаты", data)
	if err != nil {
		return nil, err
	}
	result := CatalogUsloviiaOplaty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogUsloviiaOplatys(where Where) ([]CatalogUsloviiaOplaty, error) {
	type ReturnObj struct {
		Value []CatalogUsloviiaOplaty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_УсловияОплаты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogUsloviiaOplatyTablitsaVyplat(Key Guid, LineNumber Int) (*CatalogUsloviiaOplatyTablitsaVyplat, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_УсловияОплаты_ТаблицаВыплат", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogUsloviiaOplatyTablitsaVyplat{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogUsloviiaOplatyTablitsaVyplat(Key Guid, LineNumber Int, entity interface{}) (*CatalogUsloviiaOplatyTablitsaVyplat, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_УсловияОплаты_ТаблицаВыплат", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogUsloviiaOplatyTablitsaVyplat{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogUsloviiaOplatyTablitsaVyplat(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_УсловияОплаты_ТаблицаВыплат", args)
}

func (c *Client) CreateCatalogUsloviiaOplatyTablitsaVyplat(data CatalogUsloviiaOplatyTablitsaVyplat) (*CatalogUsloviiaOplatyTablitsaVyplat, error) {
	raw, err := c.createEntity("Catalog_УсловияОплаты_ТаблицаВыплат", data)
	if err != nil {
		return nil, err
	}
	result := CatalogUsloviiaOplatyTablitsaVyplat{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogUsloviiaOplatyTablitsaVyplats(where Where) ([]CatalogUsloviiaOplatyTablitsaVyplat, error) {
	type ReturnObj struct {
		Value []CatalogUsloviiaOplatyTablitsaVyplat `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_УсловияОплаты_ТаблицаВыплат", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogKategoriiObieektov(Key Guid) (*CatalogKategoriiObieektov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_КатегорииОбъектов", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogKategoriiObieektov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogKategoriiObieektov(Key Guid, entity interface{}) (*CatalogKategoriiObieektov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_КатегорииОбъектов", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogKategoriiObieektov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogKategoriiObieektov(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_КатегорииОбъектов", args)
}

func (c *Client) CreateCatalogKategoriiObieektov(data CatalogKategoriiObieektov) (*CatalogKategoriiObieektov, error) {
	raw, err := c.createEntity("Catalog_КатегорииОбъектов", data)
	if err != nil {
		return nil, err
	}
	result := CatalogKategoriiObieektov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogKategoriiObieektovs(where Where) ([]CatalogKategoriiObieektov, error) {
	type ReturnObj struct {
		Value []CatalogKategoriiObieektov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_КатегорииОбъектов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogfmZnacheniiaDliaZapolneniia(Key Guid) (*CatalogfmZnacheniiaDliaZapolneniia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_фмЗначенияДляЗаполнения", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogfmZnacheniiaDliaZapolneniia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogfmZnacheniiaDliaZapolneniia(Key Guid, entity interface{}) (*CatalogfmZnacheniiaDliaZapolneniia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_фмЗначенияДляЗаполнения", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogfmZnacheniiaDliaZapolneniia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogfmZnacheniiaDliaZapolneniia(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_фмЗначенияДляЗаполнения", args)
}

func (c *Client) CreateCatalogfmZnacheniiaDliaZapolneniia(data CatalogfmZnacheniiaDliaZapolneniia) (*CatalogfmZnacheniiaDliaZapolneniia, error) {
	raw, err := c.createEntity("Catalog_фмЗначенияДляЗаполнения", data)
	if err != nil {
		return nil, err
	}
	result := CatalogfmZnacheniiaDliaZapolneniia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogfmZnacheniiaDliaZapolneniias(where Where) ([]CatalogfmZnacheniiaDliaZapolneniia, error) {
	type ReturnObj struct {
		Value []CatalogfmZnacheniiaDliaZapolneniia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_фмЗначенияДляЗаполнения", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentUdalitNariadZakaz(Key Guid) (*DocumentUdalitNariadZakaz, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_УдалитьНарядЗаказ", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentUdalitNariadZakaz{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentUdalitNariadZakaz(Key Guid, entity interface{}) (*DocumentUdalitNariadZakaz, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_УдалитьНарядЗаказ", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentUdalitNariadZakaz{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentUdalitNariadZakaz(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_УдалитьНарядЗаказ", args)
}

func (c *Client) CreateDocumentUdalitNariadZakaz(data DocumentUdalitNariadZakaz) (*DocumentUdalitNariadZakaz, error) {
	raw, err := c.createEntity("Document_УдалитьНарядЗаказ", data)
	if err != nil {
		return nil, err
	}
	result := DocumentUdalitNariadZakaz{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentUdalitNariadZakazs(where Where) ([]DocumentUdalitNariadZakaz, error) {
	type ReturnObj struct {
		Value []DocumentUdalitNariadZakaz `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_УдалитьНарядЗаказ", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentUdalitNariadZakazIzdeliia(Key Guid, LineNumber Int) (*DocumentUdalitNariadZakazIzdeliia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_УдалитьНарядЗаказ_Изделия", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentUdalitNariadZakazIzdeliia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentUdalitNariadZakazIzdeliia(Key Guid, LineNumber Int, entity interface{}) (*DocumentUdalitNariadZakazIzdeliia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_УдалитьНарядЗаказ_Изделия", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentUdalitNariadZakazIzdeliia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentUdalitNariadZakazIzdeliia(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_УдалитьНарядЗаказ_Изделия", args)
}

func (c *Client) CreateDocumentUdalitNariadZakazIzdeliia(data DocumentUdalitNariadZakazIzdeliia) (*DocumentUdalitNariadZakazIzdeliia, error) {
	raw, err := c.createEntity("Document_УдалитьНарядЗаказ_Изделия", data)
	if err != nil {
		return nil, err
	}
	result := DocumentUdalitNariadZakazIzdeliia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentUdalitNariadZakazIzdeliias(where Where) ([]DocumentUdalitNariadZakazIzdeliia, error) {
	type ReturnObj struct {
		Value []DocumentUdalitNariadZakazIzdeliia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_УдалитьНарядЗаказ_Изделия", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentUdalitNariadZakazUslugi(Key Guid, LineNumber Int) (*DocumentUdalitNariadZakazUslugi, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_УдалитьНарядЗаказ_Услуги", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentUdalitNariadZakazUslugi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentUdalitNariadZakazUslugi(Key Guid, LineNumber Int, entity interface{}) (*DocumentUdalitNariadZakazUslugi, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_УдалитьНарядЗаказ_Услуги", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentUdalitNariadZakazUslugi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentUdalitNariadZakazUslugi(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_УдалитьНарядЗаказ_Услуги", args)
}

func (c *Client) CreateDocumentUdalitNariadZakazUslugi(data DocumentUdalitNariadZakazUslugi) (*DocumentUdalitNariadZakazUslugi, error) {
	raw, err := c.createEntity("Document_УдалитьНарядЗаказ_Услуги", data)
	if err != nil {
		return nil, err
	}
	result := DocumentUdalitNariadZakazUslugi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentUdalitNariadZakazUslugis(where Where) ([]DocumentUdalitNariadZakazUslugi, error) {
	type ReturnObj struct {
		Value []DocumentUdalitNariadZakazUslugi `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_УдалитьНарядЗаказ_Услуги", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentUdalitNariadZakazSpetsifikatsiia(Key Guid, LineNumber Int) (*DocumentUdalitNariadZakazSpetsifikatsiia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_УдалитьНарядЗаказ_Спецификация", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentUdalitNariadZakazSpetsifikatsiia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentUdalitNariadZakazSpetsifikatsiia(Key Guid, LineNumber Int, entity interface{}) (*DocumentUdalitNariadZakazSpetsifikatsiia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_УдалитьНарядЗаказ_Спецификация", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentUdalitNariadZakazSpetsifikatsiia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentUdalitNariadZakazSpetsifikatsiia(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_УдалитьНарядЗаказ_Спецификация", args)
}

func (c *Client) CreateDocumentUdalitNariadZakazSpetsifikatsiia(data DocumentUdalitNariadZakazSpetsifikatsiia) (*DocumentUdalitNariadZakazSpetsifikatsiia, error) {
	raw, err := c.createEntity("Document_УдалитьНарядЗаказ_Спецификация", data)
	if err != nil {
		return nil, err
	}
	result := DocumentUdalitNariadZakazSpetsifikatsiia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentUdalitNariadZakazSpetsifikatsiias(where Where) ([]DocumentUdalitNariadZakazSpetsifikatsiia, error) {
	type ReturnObj struct {
		Value []DocumentUdalitNariadZakazSpetsifikatsiia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_УдалитьНарядЗаказ_Спецификация", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentUdalitNariadZakazMetally(Key Guid, LineNumber Int) (*DocumentUdalitNariadZakazMetally, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_УдалитьНарядЗаказ_Металлы", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentUdalitNariadZakazMetally{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentUdalitNariadZakazMetally(Key Guid, LineNumber Int, entity interface{}) (*DocumentUdalitNariadZakazMetally, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_УдалитьНарядЗаказ_Металлы", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentUdalitNariadZakazMetally{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentUdalitNariadZakazMetally(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_УдалитьНарядЗаказ_Металлы", args)
}

func (c *Client) CreateDocumentUdalitNariadZakazMetally(data DocumentUdalitNariadZakazMetally) (*DocumentUdalitNariadZakazMetally, error) {
	raw, err := c.createEntity("Document_УдалитьНарядЗаказ_Металлы", data)
	if err != nil {
		return nil, err
	}
	result := DocumentUdalitNariadZakazMetally{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentUdalitNariadZakazMetallys(where Where) ([]DocumentUdalitNariadZakazMetally, error) {
	type ReturnObj struct {
		Value []DocumentUdalitNariadZakazMetally `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_УдалитьНарядЗаказ_Металлы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentUdalitNariadZakazVstavki(Key Guid, LineNumber Int) (*DocumentUdalitNariadZakazVstavki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_УдалитьНарядЗаказ_Вставки", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentUdalitNariadZakazVstavki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentUdalitNariadZakazVstavki(Key Guid, LineNumber Int, entity interface{}) (*DocumentUdalitNariadZakazVstavki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_УдалитьНарядЗаказ_Вставки", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentUdalitNariadZakazVstavki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentUdalitNariadZakazVstavki(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_УдалитьНарядЗаказ_Вставки", args)
}

func (c *Client) CreateDocumentUdalitNariadZakazVstavki(data DocumentUdalitNariadZakazVstavki) (*DocumentUdalitNariadZakazVstavki, error) {
	raw, err := c.createEntity("Document_УдалитьНарядЗаказ_Вставки", data)
	if err != nil {
		return nil, err
	}
	result := DocumentUdalitNariadZakazVstavki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentUdalitNariadZakazVstavkis(where Where) ([]DocumentUdalitNariadZakazVstavki, error) {
	type ReturnObj struct {
		Value []DocumentUdalitNariadZakazVstavki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_УдалитьНарядЗаказ_Вставки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogBanki(Key Guid) (*CatalogBanki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_Банки", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogBanki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogBanki(Key Guid, entity interface{}) (*CatalogBanki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_Банки", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogBanki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogBanki(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_Банки", args)
}

func (c *Client) CreateCatalogBanki(data CatalogBanki) (*CatalogBanki, error) {
	raw, err := c.createEntity("Catalog_Банки", data)
	if err != nil {
		return nil, err
	}
	result := CatalogBanki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogBankis(where Where) ([]CatalogBanki, error) {
	type ReturnObj struct {
		Value []CatalogBanki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Банки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogRoliKontaktnykhLits(Key Guid) (*CatalogRoliKontaktnykhLits, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_РолиКонтактныхЛиц", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogRoliKontaktnykhLits{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogRoliKontaktnykhLits(Key Guid, entity interface{}) (*CatalogRoliKontaktnykhLits, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_РолиКонтактныхЛиц", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogRoliKontaktnykhLits{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogRoliKontaktnykhLits(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_РолиКонтактныхЛиц", args)
}

func (c *Client) CreateCatalogRoliKontaktnykhLits(data CatalogRoliKontaktnykhLits) (*CatalogRoliKontaktnykhLits, error) {
	raw, err := c.createEntity("Catalog_РолиКонтактныхЛиц", data)
	if err != nil {
		return nil, err
	}
	result := CatalogRoliKontaktnykhLits{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogRoliKontaktnykhLitss(where Where) ([]CatalogRoliKontaktnykhLits, error) {
	type ReturnObj struct {
		Value []CatalogRoliKontaktnykhLits `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_РолиКонтактныхЛиц", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentRestrukturizatsiiaDolga(Key Guid) (*DocumentRestrukturizatsiiaDolga, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_РеструктуризацияДолга", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentRestrukturizatsiiaDolga{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentRestrukturizatsiiaDolga(Key Guid, entity interface{}) (*DocumentRestrukturizatsiiaDolga, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_РеструктуризацияДолга", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentRestrukturizatsiiaDolga{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentRestrukturizatsiiaDolga(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_РеструктуризацияДолга", args)
}

func (c *Client) CreateDocumentRestrukturizatsiiaDolga(data DocumentRestrukturizatsiiaDolga) (*DocumentRestrukturizatsiiaDolga, error) {
	raw, err := c.createEntity("Document_РеструктуризацияДолга", data)
	if err != nil {
		return nil, err
	}
	result := DocumentRestrukturizatsiiaDolga{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentRestrukturizatsiiaDolgas(where Where) ([]DocumentRestrukturizatsiiaDolga, error) {
	type ReturnObj struct {
		Value []DocumentRestrukturizatsiiaDolga `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_РеструктуризацияДолга", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennosti(Key Guid, LineNumber Int) (*DocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennosti, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_РеструктуризацияДолга_РасшифровкаЗадолженности", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennosti{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennosti(Key Guid, LineNumber Int, entity interface{}) (*DocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennosti, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_РеструктуризацияДолга_РасшифровкаЗадолженности", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennosti{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennosti(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_РеструктуризацияДолга_РасшифровкаЗадолженности", args)
}

func (c *Client) CreateDocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennosti(data DocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennosti) (*DocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennosti, error) {
	raw, err := c.createEntity("Document_РеструктуризацияДолга_РасшифровкаЗадолженности", data)
	if err != nil {
		return nil, err
	}
	result := DocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennosti{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennostis(where Where) ([]DocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennosti, error) {
	type ReturnObj struct {
		Value []DocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennosti `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_РеструктуризацияДолга_РасшифровкаЗадолженности", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentAkkreditivPoluchennyi(Key Guid) (*DocumentAkkreditivPoluchennyi, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_АккредитивПолученный", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentAkkreditivPoluchennyi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentAkkreditivPoluchennyi(Key Guid, entity interface{}) (*DocumentAkkreditivPoluchennyi, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_АккредитивПолученный", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentAkkreditivPoluchennyi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentAkkreditivPoluchennyi(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_АккредитивПолученный", args)
}

func (c *Client) CreateDocumentAkkreditivPoluchennyi(data DocumentAkkreditivPoluchennyi) (*DocumentAkkreditivPoluchennyi, error) {
	raw, err := c.createEntity("Document_АккредитивПолученный", data)
	if err != nil {
		return nil, err
	}
	result := DocumentAkkreditivPoluchennyi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentAkkreditivPoluchennyis(where Where) ([]DocumentAkkreditivPoluchennyi, error) {
	type ReturnObj struct {
		Value []DocumentAkkreditivPoluchennyi `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_АккредитивПолученный", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentAkkreditivPoluchennyiRasshifrovkaPlatezha(Key Guid, LineNumber Int) (*DocumentAkkreditivPoluchennyiRasshifrovkaPlatezha, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_АккредитивПолученный_РасшифровкаПлатежа", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentAkkreditivPoluchennyiRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentAkkreditivPoluchennyiRasshifrovkaPlatezha(Key Guid, LineNumber Int, entity interface{}) (*DocumentAkkreditivPoluchennyiRasshifrovkaPlatezha, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_АккредитивПолученный_РасшифровкаПлатежа", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentAkkreditivPoluchennyiRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentAkkreditivPoluchennyiRasshifrovkaPlatezha(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_АккредитивПолученный_РасшифровкаПлатежа", args)
}

func (c *Client) CreateDocumentAkkreditivPoluchennyiRasshifrovkaPlatezha(data DocumentAkkreditivPoluchennyiRasshifrovkaPlatezha) (*DocumentAkkreditivPoluchennyiRasshifrovkaPlatezha, error) {
	raw, err := c.createEntity("Document_АккредитивПолученный_РасшифровкаПлатежа", data)
	if err != nil {
		return nil, err
	}
	result := DocumentAkkreditivPoluchennyiRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentAkkreditivPoluchennyiRasshifrovkaPlatezhas(where Where) ([]DocumentAkkreditivPoluchennyiRasshifrovkaPlatezha, error) {
	type ReturnObj struct {
		Value []DocumentAkkreditivPoluchennyiRasshifrovkaPlatezha `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_АккредитивПолученный_РасшифровкаПлатежа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentAkkreditivPoluchennyiRekvizityKontragenta(Key Guid, LineNumber Int) (*DocumentAkkreditivPoluchennyiRekvizityKontragenta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_АккредитивПолученный_РеквизитыКонтрагента", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentAkkreditivPoluchennyiRekvizityKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentAkkreditivPoluchennyiRekvizityKontragenta(Key Guid, LineNumber Int, entity interface{}) (*DocumentAkkreditivPoluchennyiRekvizityKontragenta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_АккредитивПолученный_РеквизитыКонтрагента", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentAkkreditivPoluchennyiRekvizityKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentAkkreditivPoluchennyiRekvizityKontragenta(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_АккредитивПолученный_РеквизитыКонтрагента", args)
}

func (c *Client) CreateDocumentAkkreditivPoluchennyiRekvizityKontragenta(data DocumentAkkreditivPoluchennyiRekvizityKontragenta) (*DocumentAkkreditivPoluchennyiRekvizityKontragenta, error) {
	raw, err := c.createEntity("Document_АккредитивПолученный_РеквизитыКонтрагента", data)
	if err != nil {
		return nil, err
	}
	result := DocumentAkkreditivPoluchennyiRekvizityKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentAkkreditivPoluchennyiRekvizityKontragentas(where Where) ([]DocumentAkkreditivPoluchennyiRekvizityKontragenta, error) {
	type ReturnObj struct {
		Value []DocumentAkkreditivPoluchennyiRekvizityKontragenta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_АккредитивПолученный_РеквизитыКонтрагента", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPriemIzRemonta(Key Guid) (*DocumentPriemIzRemonta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ПриемИзРемонта", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPriemIzRemonta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPriemIzRemonta(Key Guid, entity interface{}) (*DocumentPriemIzRemonta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ПриемИзРемонта", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPriemIzRemonta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPriemIzRemonta(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ПриемИзРемонта", args)
}

func (c *Client) CreateDocumentPriemIzRemonta(data DocumentPriemIzRemonta) (*DocumentPriemIzRemonta, error) {
	raw, err := c.createEntity("Document_ПриемИзРемонта", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPriemIzRemonta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPriemIzRemontas(where Where) ([]DocumentPriemIzRemonta, error) {
	type ReturnObj struct {
		Value []DocumentPriemIzRemonta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПриемИзРемонта", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPriemIzRemontaIzdeliia(Key Guid, LineNumber Int) (*DocumentPriemIzRemontaIzdeliia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ПриемИзРемонта_Изделия", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPriemIzRemontaIzdeliia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPriemIzRemontaIzdeliia(Key Guid, LineNumber Int, entity interface{}) (*DocumentPriemIzRemontaIzdeliia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ПриемИзРемонта_Изделия", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPriemIzRemontaIzdeliia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPriemIzRemontaIzdeliia(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ПриемИзРемонта_Изделия", args)
}

func (c *Client) CreateDocumentPriemIzRemontaIzdeliia(data DocumentPriemIzRemontaIzdeliia) (*DocumentPriemIzRemontaIzdeliia, error) {
	raw, err := c.createEntity("Document_ПриемИзРемонта_Изделия", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPriemIzRemontaIzdeliia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPriemIzRemontaIzdeliias(where Where) ([]DocumentPriemIzRemontaIzdeliia, error) {
	type ReturnObj struct {
		Value []DocumentPriemIzRemontaIzdeliia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПриемИзРемонта_Изделия", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPriemIzRemontaMaterialy(Key Guid, LineNumber Int) (*DocumentPriemIzRemontaMaterialy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ПриемИзРемонта_Материалы", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPriemIzRemontaMaterialy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPriemIzRemontaMaterialy(Key Guid, LineNumber Int, entity interface{}) (*DocumentPriemIzRemontaMaterialy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ПриемИзРемонта_Материалы", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPriemIzRemontaMaterialy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPriemIzRemontaMaterialy(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ПриемИзРемонта_Материалы", args)
}

func (c *Client) CreateDocumentPriemIzRemontaMaterialy(data DocumentPriemIzRemontaMaterialy) (*DocumentPriemIzRemontaMaterialy, error) {
	raw, err := c.createEntity("Document_ПриемИзРемонта_Материалы", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPriemIzRemontaMaterialy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPriemIzRemontaMaterialys(where Where) ([]DocumentPriemIzRemontaMaterialy, error) {
	type ReturnObj struct {
		Value []DocumentPriemIzRemontaMaterialy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПриемИзРемонта_Материалы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogTsveta(Key Guid) (*CatalogTsveta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_Цвета", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogTsveta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogTsveta(Key Guid, entity interface{}) (*CatalogTsveta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_Цвета", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogTsveta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogTsveta(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_Цвета", args)
}

func (c *Client) CreateCatalogTsveta(data CatalogTsveta) (*CatalogTsveta, error) {
	raw, err := c.createEntity("Catalog_Цвета", data)
	if err != nil {
		return nil, err
	}
	result := CatalogTsveta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogTsvetas(where Where) ([]CatalogTsveta, error) {
	type ReturnObj struct {
		Value []CatalogTsveta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Цвета", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentStornirovanieOtchetaKomissioneraOProdazhakh(Key Guid) (*DocumentStornirovanieOtchetaKomissioneraOProdazhakh, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_СторнированиеОтчетаКомиссионераОПродажах", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentStornirovanieOtchetaKomissioneraOProdazhakh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentStornirovanieOtchetaKomissioneraOProdazhakh(Key Guid, entity interface{}) (*DocumentStornirovanieOtchetaKomissioneraOProdazhakh, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_СторнированиеОтчетаКомиссионераОПродажах", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentStornirovanieOtchetaKomissioneraOProdazhakh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentStornirovanieOtchetaKomissioneraOProdazhakh(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_СторнированиеОтчетаКомиссионераОПродажах", args)
}

func (c *Client) CreateDocumentStornirovanieOtchetaKomissioneraOProdazhakh(data DocumentStornirovanieOtchetaKomissioneraOProdazhakh) (*DocumentStornirovanieOtchetaKomissioneraOProdazhakh, error) {
	raw, err := c.createEntity("Document_СторнированиеОтчетаКомиссионераОПродажах", data)
	if err != nil {
		return nil, err
	}
	result := DocumentStornirovanieOtchetaKomissioneraOProdazhakh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentStornirovanieOtchetaKomissioneraOProdazhakhs(where Where) ([]DocumentStornirovanieOtchetaKomissioneraOProdazhakh, error) {
	type ReturnObj struct {
		Value []DocumentStornirovanieOtchetaKomissioneraOProdazhakh `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СторнированиеОтчетаКомиссионераОПродажах", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstva(Key Guid, LineNumber Int) (*DocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstva, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_СторнированиеОтчетаКомиссионераОПродажах_ДенежныеСредства", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstva{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstva(Key Guid, LineNumber Int, entity interface{}) (*DocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstva, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_СторнированиеОтчетаКомиссионераОПродажах_ДенежныеСредства", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstva{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstva(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_СторнированиеОтчетаКомиссионераОПродажах_ДенежныеСредства", args)
}

func (c *Client) CreateDocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstva(data DocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstva) (*DocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstva, error) {
	raw, err := c.createEntity("Document_СторнированиеОтчетаКомиссионераОПродажах_ДенежныеСредства", data)
	if err != nil {
		return nil, err
	}
	result := DocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstva{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstvas(where Where) ([]DocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstva, error) {
	type ReturnObj struct {
		Value []DocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstva `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СторнированиеОтчетаКомиссионераОПродажах_ДенежныеСредства", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentStornirovanieOtchetaKomissioneraOProdazhakhTovary(Key Guid, LineNumber Int) (*DocumentStornirovanieOtchetaKomissioneraOProdazhakhTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_СторнированиеОтчетаКомиссионераОПродажах_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentStornirovanieOtchetaKomissioneraOProdazhakhTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentStornirovanieOtchetaKomissioneraOProdazhakhTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentStornirovanieOtchetaKomissioneraOProdazhakhTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_СторнированиеОтчетаКомиссионераОПродажах_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentStornirovanieOtchetaKomissioneraOProdazhakhTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentStornirovanieOtchetaKomissioneraOProdazhakhTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_СторнированиеОтчетаКомиссионераОПродажах_Товары", args)
}

func (c *Client) CreateDocumentStornirovanieOtchetaKomissioneraOProdazhakhTovary(data DocumentStornirovanieOtchetaKomissioneraOProdazhakhTovary) (*DocumentStornirovanieOtchetaKomissioneraOProdazhakhTovary, error) {
	raw, err := c.createEntity("Document_СторнированиеОтчетаКомиссионераОПродажах_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentStornirovanieOtchetaKomissioneraOProdazhakhTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentStornirovanieOtchetaKomissioneraOProdazhakhTovarys(where Where) ([]DocumentStornirovanieOtchetaKomissioneraOProdazhakhTovary, error) {
	type ReturnObj struct {
		Value []DocumentStornirovanieOtchetaKomissioneraOProdazhakhTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СторнированиеОтчетаКомиссионераОПродажах_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentJournalDavalcheskieDokumenty(Ref String, RefType String) (*DocumentJournalDavalcheskieDokumenty, error) {
	args := []string{fmt.Sprintf("Ref='%s' ", url.PathEscape(string(Ref))), fmt.Sprintf("Ref_Type='%s' ", url.PathEscape(string(RefType)))}
	raw, err := c.getEntity("DocumentJournal_ДавальческиеДокументы", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentJournalDavalcheskieDokumenty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentJournalDavalcheskieDokumenty(Ref String, RefType String, entity interface{}) (*DocumentJournalDavalcheskieDokumenty, error) {
	args := []string{fmt.Sprintf("Ref='%s' ", url.PathEscape(string(Ref))), fmt.Sprintf("Ref_Type='%s' ", url.PathEscape(string(RefType)))}
	raw, err := c.updateEntity("DocumentJournal_ДавальческиеДокументы", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentJournalDavalcheskieDokumenty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentJournalDavalcheskieDokumenty(Ref String, RefType String) error {
	args := []string{fmt.Sprintf("Ref='%s' ", url.PathEscape(string(Ref))), fmt.Sprintf("Ref_Type='%s' ", url.PathEscape(string(RefType)))}
	return c.removeEntity("DocumentJournal_ДавальческиеДокументы", args)
}

func (c *Client) CreateDocumentJournalDavalcheskieDokumenty(data DocumentJournalDavalcheskieDokumenty) (*DocumentJournalDavalcheskieDokumenty, error) {
	raw, err := c.createEntity("DocumentJournal_ДавальческиеДокументы", data)
	if err != nil {
		return nil, err
	}
	result := DocumentJournalDavalcheskieDokumenty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentJournalDavalcheskieDokumentys(where Where) ([]DocumentJournalDavalcheskieDokumenty, error) {
	type ReturnObj struct {
		Value []DocumentJournalDavalcheskieDokumenty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("DocumentJournal_ДавальческиеДокументы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogfmAnketaKlienta(Key Guid) (*CatalogfmAnketaKlienta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_фмАнкетаКлиента", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogfmAnketaKlienta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogfmAnketaKlienta(Key Guid, entity interface{}) (*CatalogfmAnketaKlienta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_фмАнкетаКлиента", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogfmAnketaKlienta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogfmAnketaKlienta(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_фмАнкетаКлиента", args)
}

func (c *Client) CreateCatalogfmAnketaKlienta(data CatalogfmAnketaKlienta) (*CatalogfmAnketaKlienta, error) {
	raw, err := c.createEntity("Catalog_фмАнкетаКлиента", data)
	if err != nil {
		return nil, err
	}
	result := CatalogfmAnketaKlienta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogfmAnketaKlientas(where Where) ([]CatalogfmAnketaKlienta, error) {
	type ReturnObj struct {
		Value []CatalogfmAnketaKlienta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_фмАнкетаКлиента", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogfmAnketaKlientaDannyeKontragenta(Key Guid, LineNumber Int) (*CatalogfmAnketaKlientaDannyeKontragenta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_фмАнкетаКлиента_ДанныеКонтрагента", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogfmAnketaKlientaDannyeKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogfmAnketaKlientaDannyeKontragenta(Key Guid, LineNumber Int, entity interface{}) (*CatalogfmAnketaKlientaDannyeKontragenta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_фмАнкетаКлиента_ДанныеКонтрагента", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogfmAnketaKlientaDannyeKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogfmAnketaKlientaDannyeKontragenta(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_фмАнкетаКлиента_ДанныеКонтрагента", args)
}

func (c *Client) CreateCatalogfmAnketaKlientaDannyeKontragenta(data CatalogfmAnketaKlientaDannyeKontragenta) (*CatalogfmAnketaKlientaDannyeKontragenta, error) {
	raw, err := c.createEntity("Catalog_фмАнкетаКлиента_ДанныеКонтрагента", data)
	if err != nil {
		return nil, err
	}
	result := CatalogfmAnketaKlientaDannyeKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogfmAnketaKlientaDannyeKontragentas(where Where) ([]CatalogfmAnketaKlientaDannyeKontragenta, error) {
	type ReturnObj struct {
		Value []CatalogfmAnketaKlientaDannyeKontragenta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_фмАнкетаКлиента_ДанныеКонтрагента", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogVidyVzaimoraschetov(Key Guid) (*CatalogVidyVzaimoraschetov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ВидыВзаиморасчетов", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogVidyVzaimoraschetov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogVidyVzaimoraschetov(Key Guid, entity interface{}) (*CatalogVidyVzaimoraschetov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ВидыВзаиморасчетов", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogVidyVzaimoraschetov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogVidyVzaimoraschetov(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ВидыВзаиморасчетов", args)
}

func (c *Client) CreateCatalogVidyVzaimoraschetov(data CatalogVidyVzaimoraschetov) (*CatalogVidyVzaimoraschetov, error) {
	raw, err := c.createEntity("Catalog_ВидыВзаиморасчетов", data)
	if err != nil {
		return nil, err
	}
	result := CatalogVidyVzaimoraschetov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogVidyVzaimoraschetovs(where Where) ([]CatalogVidyVzaimoraschetov, error) {
	type ReturnObj struct {
		Value []CatalogVidyVzaimoraschetov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ВидыВзаиморасчетов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentUstanovkaZnacheniiTochkiZakaza(Key Guid) (*DocumentUstanovkaZnacheniiTochkiZakaza, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_УстановкаЗначенийТочкиЗаказа", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentUstanovkaZnacheniiTochkiZakaza{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentUstanovkaZnacheniiTochkiZakaza(Key Guid, entity interface{}) (*DocumentUstanovkaZnacheniiTochkiZakaza, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_УстановкаЗначенийТочкиЗаказа", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentUstanovkaZnacheniiTochkiZakaza{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentUstanovkaZnacheniiTochkiZakaza(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_УстановкаЗначенийТочкиЗаказа", args)
}

func (c *Client) CreateDocumentUstanovkaZnacheniiTochkiZakaza(data DocumentUstanovkaZnacheniiTochkiZakaza) (*DocumentUstanovkaZnacheniiTochkiZakaza, error) {
	raw, err := c.createEntity("Document_УстановкаЗначенийТочкиЗаказа", data)
	if err != nil {
		return nil, err
	}
	result := DocumentUstanovkaZnacheniiTochkiZakaza{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentUstanovkaZnacheniiTochkiZakazas(where Where) ([]DocumentUstanovkaZnacheniiTochkiZakaza, error) {
	type ReturnObj struct {
		Value []DocumentUstanovkaZnacheniiTochkiZakaza `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_УстановкаЗначенийТочкиЗаказа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentUstanovkaZnacheniiTochkiZakazaTovary(Key Guid, LineNumber Int) (*DocumentUstanovkaZnacheniiTochkiZakazaTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_УстановкаЗначенийТочкиЗаказа_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentUstanovkaZnacheniiTochkiZakazaTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentUstanovkaZnacheniiTochkiZakazaTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentUstanovkaZnacheniiTochkiZakazaTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_УстановкаЗначенийТочкиЗаказа_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentUstanovkaZnacheniiTochkiZakazaTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentUstanovkaZnacheniiTochkiZakazaTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_УстановкаЗначенийТочкиЗаказа_Товары", args)
}

func (c *Client) CreateDocumentUstanovkaZnacheniiTochkiZakazaTovary(data DocumentUstanovkaZnacheniiTochkiZakazaTovary) (*DocumentUstanovkaZnacheniiTochkiZakazaTovary, error) {
	raw, err := c.createEntity("Document_УстановкаЗначенийТочкиЗаказа_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentUstanovkaZnacheniiTochkiZakazaTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentUstanovkaZnacheniiTochkiZakazaTovarys(where Where) ([]DocumentUstanovkaZnacheniiTochkiZakazaTovary, error) {
	type ReturnObj struct {
		Value []DocumentUstanovkaZnacheniiTochkiZakazaTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_УстановкаЗначенийТочкиЗаказа_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogZnacheniiaKodirovki(Key Guid) (*CatalogZnacheniiaKodirovki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ЗначенияКодировки", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogZnacheniiaKodirovki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogZnacheniiaKodirovki(Key Guid, entity interface{}) (*CatalogZnacheniiaKodirovki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ЗначенияКодировки", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogZnacheniiaKodirovki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogZnacheniiaKodirovki(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ЗначенияКодировки", args)
}

func (c *Client) CreateCatalogZnacheniiaKodirovki(data CatalogZnacheniiaKodirovki) (*CatalogZnacheniiaKodirovki, error) {
	raw, err := c.createEntity("Catalog_ЗначенияКодировки", data)
	if err != nil {
		return nil, err
	}
	result := CatalogZnacheniiaKodirovki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogZnacheniiaKodirovkis(where Where) ([]CatalogZnacheniiaKodirovki, error) {
	type ReturnObj struct {
		Value []CatalogZnacheniiaKodirovki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ЗначенияКодировки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogPravilaProdazh(Key Guid) (*CatalogPravilaProdazh, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ПравилаПродаж", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogPravilaProdazh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogPravilaProdazh(Key Guid, entity interface{}) (*CatalogPravilaProdazh, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ПравилаПродаж", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogPravilaProdazh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogPravilaProdazh(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ПравилаПродаж", args)
}

func (c *Client) CreateCatalogPravilaProdazh(data CatalogPravilaProdazh) (*CatalogPravilaProdazh, error) {
	raw, err := c.createEntity("Catalog_ПравилаПродаж", data)
	if err != nil {
		return nil, err
	}
	result := CatalogPravilaProdazh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogPravilaProdazhs(where Where) ([]CatalogPravilaProdazh, error) {
	type ReturnObj struct {
		Value []CatalogPravilaProdazh `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ПравилаПродаж", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogPravilaProdazhTovary(Key Guid, LineNumber Int) (*CatalogPravilaProdazhTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_ПравилаПродаж_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogPravilaProdazhTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogPravilaProdazhTovary(Key Guid, LineNumber Int, entity interface{}) (*CatalogPravilaProdazhTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_ПравилаПродаж_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogPravilaProdazhTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogPravilaProdazhTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_ПравилаПродаж_Товары", args)
}

func (c *Client) CreateCatalogPravilaProdazhTovary(data CatalogPravilaProdazhTovary) (*CatalogPravilaProdazhTovary, error) {
	raw, err := c.createEntity("Catalog_ПравилаПродаж_Товары", data)
	if err != nil {
		return nil, err
	}
	result := CatalogPravilaProdazhTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogPravilaProdazhTovarys(where Where) ([]CatalogPravilaProdazhTovary, error) {
	type ReturnObj struct {
		Value []CatalogPravilaProdazhTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ПравилаПродаж_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPostuplenieDopRaskhodov(Key Guid) (*DocumentPostuplenieDopRaskhodov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ПоступлениеДопРасходов", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPostuplenieDopRaskhodov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPostuplenieDopRaskhodov(Key Guid, entity interface{}) (*DocumentPostuplenieDopRaskhodov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ПоступлениеДопРасходов", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPostuplenieDopRaskhodov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPostuplenieDopRaskhodov(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ПоступлениеДопРасходов", args)
}

func (c *Client) CreateDocumentPostuplenieDopRaskhodov(data DocumentPostuplenieDopRaskhodov) (*DocumentPostuplenieDopRaskhodov, error) {
	raw, err := c.createEntity("Document_ПоступлениеДопРасходов", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPostuplenieDopRaskhodov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPostuplenieDopRaskhodovs(where Where) ([]DocumentPostuplenieDopRaskhodov, error) {
	type ReturnObj struct {
		Value []DocumentPostuplenieDopRaskhodov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПоступлениеДопРасходов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPostuplenieDopRaskhodovTovary(Key Guid, LineNumber Int) (*DocumentPostuplenieDopRaskhodovTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ПоступлениеДопРасходов_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPostuplenieDopRaskhodovTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPostuplenieDopRaskhodovTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentPostuplenieDopRaskhodovTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ПоступлениеДопРасходов_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPostuplenieDopRaskhodovTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPostuplenieDopRaskhodovTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ПоступлениеДопРасходов_Товары", args)
}

func (c *Client) CreateDocumentPostuplenieDopRaskhodovTovary(data DocumentPostuplenieDopRaskhodovTovary) (*DocumentPostuplenieDopRaskhodovTovary, error) {
	raw, err := c.createEntity("Document_ПоступлениеДопРасходов_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPostuplenieDopRaskhodovTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPostuplenieDopRaskhodovTovarys(where Where) ([]DocumentPostuplenieDopRaskhodovTovary, error) {
	type ReturnObj struct {
		Value []DocumentPostuplenieDopRaskhodovTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПоступлениеДопРасходов_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogKhoziaistvennyeOperatsii(Key Guid) (*CatalogKhoziaistvennyeOperatsii, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ХозяйственныеОперации", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogKhoziaistvennyeOperatsii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogKhoziaistvennyeOperatsii(Key Guid, entity interface{}) (*CatalogKhoziaistvennyeOperatsii, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ХозяйственныеОперации", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogKhoziaistvennyeOperatsii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogKhoziaistvennyeOperatsii(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ХозяйственныеОперации", args)
}

func (c *Client) CreateCatalogKhoziaistvennyeOperatsii(data CatalogKhoziaistvennyeOperatsii) (*CatalogKhoziaistvennyeOperatsii, error) {
	raw, err := c.createEntity("Catalog_ХозяйственныеОперации", data)
	if err != nil {
		return nil, err
	}
	result := CatalogKhoziaistvennyeOperatsii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogKhoziaistvennyeOperatsiis(where Where) ([]CatalogKhoziaistvennyeOperatsii, error) {
	type ReturnObj struct {
		Value []CatalogKhoziaistvennyeOperatsii `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ХозяйственныеОперации", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentAvansovyiOtchet(Key Guid) (*DocumentAvansovyiOtchet, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_АвансовыйОтчет", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentAvansovyiOtchet{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentAvansovyiOtchet(Key Guid, entity interface{}) (*DocumentAvansovyiOtchet, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_АвансовыйОтчет", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentAvansovyiOtchet{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentAvansovyiOtchet(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_АвансовыйОтчет", args)
}

func (c *Client) CreateDocumentAvansovyiOtchet(data DocumentAvansovyiOtchet) (*DocumentAvansovyiOtchet, error) {
	raw, err := c.createEntity("Document_АвансовыйОтчет", data)
	if err != nil {
		return nil, err
	}
	result := DocumentAvansovyiOtchet{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentAvansovyiOtchets(where Where) ([]DocumentAvansovyiOtchet, error) {
	type ReturnObj struct {
		Value []DocumentAvansovyiOtchet `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_АвансовыйОтчет", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentAvansovyiOtchetVydannyeAvansy(Key Guid, LineNumber Int) (*DocumentAvansovyiOtchetVydannyeAvansy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_АвансовыйОтчет_ВыданныеАвансы", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentAvansovyiOtchetVydannyeAvansy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentAvansovyiOtchetVydannyeAvansy(Key Guid, LineNumber Int, entity interface{}) (*DocumentAvansovyiOtchetVydannyeAvansy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_АвансовыйОтчет_ВыданныеАвансы", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentAvansovyiOtchetVydannyeAvansy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentAvansovyiOtchetVydannyeAvansy(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_АвансовыйОтчет_ВыданныеАвансы", args)
}

func (c *Client) CreateDocumentAvansovyiOtchetVydannyeAvansy(data DocumentAvansovyiOtchetVydannyeAvansy) (*DocumentAvansovyiOtchetVydannyeAvansy, error) {
	raw, err := c.createEntity("Document_АвансовыйОтчет_ВыданныеАвансы", data)
	if err != nil {
		return nil, err
	}
	result := DocumentAvansovyiOtchetVydannyeAvansy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentAvansovyiOtchetVydannyeAvansys(where Where) ([]DocumentAvansovyiOtchetVydannyeAvansy, error) {
	type ReturnObj struct {
		Value []DocumentAvansovyiOtchetVydannyeAvansy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_АвансовыйОтчет_ВыданныеАвансы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentAvansovyiOtchetTovary(Key Guid, LineNumber Int) (*DocumentAvansovyiOtchetTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_АвансовыйОтчет_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentAvansovyiOtchetTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentAvansovyiOtchetTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentAvansovyiOtchetTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_АвансовыйОтчет_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentAvansovyiOtchetTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentAvansovyiOtchetTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_АвансовыйОтчет_Товары", args)
}

func (c *Client) CreateDocumentAvansovyiOtchetTovary(data DocumentAvansovyiOtchetTovary) (*DocumentAvansovyiOtchetTovary, error) {
	raw, err := c.createEntity("Document_АвансовыйОтчет_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentAvansovyiOtchetTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentAvansovyiOtchetTovarys(where Where) ([]DocumentAvansovyiOtchetTovary, error) {
	type ReturnObj struct {
		Value []DocumentAvansovyiOtchetTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_АвансовыйОтчет_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentAvansovyiOtchetOplataPostavshchikam(Key Guid, LineNumber Int) (*DocumentAvansovyiOtchetOplataPostavshchikam, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_АвансовыйОтчет_ОплатаПоставщикам", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentAvansovyiOtchetOplataPostavshchikam{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentAvansovyiOtchetOplataPostavshchikam(Key Guid, LineNumber Int, entity interface{}) (*DocumentAvansovyiOtchetOplataPostavshchikam, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_АвансовыйОтчет_ОплатаПоставщикам", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentAvansovyiOtchetOplataPostavshchikam{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentAvansovyiOtchetOplataPostavshchikam(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_АвансовыйОтчет_ОплатаПоставщикам", args)
}

func (c *Client) CreateDocumentAvansovyiOtchetOplataPostavshchikam(data DocumentAvansovyiOtchetOplataPostavshchikam) (*DocumentAvansovyiOtchetOplataPostavshchikam, error) {
	raw, err := c.createEntity("Document_АвансовыйОтчет_ОплатаПоставщикам", data)
	if err != nil {
		return nil, err
	}
	result := DocumentAvansovyiOtchetOplataPostavshchikam{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentAvansovyiOtchetOplataPostavshchikams(where Where) ([]DocumentAvansovyiOtchetOplataPostavshchikam, error) {
	type ReturnObj struct {
		Value []DocumentAvansovyiOtchetOplataPostavshchikam `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_АвансовыйОтчет_ОплатаПоставщикам", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentAvansovyiOtchetProchee(Key Guid, LineNumber Int) (*DocumentAvansovyiOtchetProchee, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_АвансовыйОтчет_Прочее", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentAvansovyiOtchetProchee{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentAvansovyiOtchetProchee(Key Guid, LineNumber Int, entity interface{}) (*DocumentAvansovyiOtchetProchee, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_АвансовыйОтчет_Прочее", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentAvansovyiOtchetProchee{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentAvansovyiOtchetProchee(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_АвансовыйОтчет_Прочее", args)
}

func (c *Client) CreateDocumentAvansovyiOtchetProchee(data DocumentAvansovyiOtchetProchee) (*DocumentAvansovyiOtchetProchee, error) {
	raw, err := c.createEntity("Document_АвансовыйОтчет_Прочее", data)
	if err != nil {
		return nil, err
	}
	result := DocumentAvansovyiOtchetProchee{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentAvansovyiOtchetProchees(where Where) ([]DocumentAvansovyiOtchetProchee, error) {
	type ReturnObj struct {
		Value []DocumentAvansovyiOtchetProchee `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_АвансовыйОтчет_Прочее", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogDolzhnostiOrganizatsii(Key Guid) (*CatalogDolzhnostiOrganizatsii, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ДолжностиОрганизаций", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogDolzhnostiOrganizatsii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogDolzhnostiOrganizatsii(Key Guid, entity interface{}) (*CatalogDolzhnostiOrganizatsii, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ДолжностиОрганизаций", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogDolzhnostiOrganizatsii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogDolzhnostiOrganizatsii(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ДолжностиОрганизаций", args)
}

func (c *Client) CreateCatalogDolzhnostiOrganizatsii(data CatalogDolzhnostiOrganizatsii) (*CatalogDolzhnostiOrganizatsii, error) {
	raw, err := c.createEntity("Catalog_ДолжностиОрганизаций", data)
	if err != nil {
		return nil, err
	}
	result := CatalogDolzhnostiOrganizatsii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogDolzhnostiOrganizatsiis(where Where) ([]CatalogDolzhnostiOrganizatsii, error) {
	type ReturnObj struct {
		Value []CatalogDolzhnostiOrganizatsii `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ДолжностиОрганизаций", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogAnalitikaTipaIzdeliia(Key Guid) (*CatalogAnalitikaTipaIzdeliia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_АналитикаТипаИзделия", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogAnalitikaTipaIzdeliia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogAnalitikaTipaIzdeliia(Key Guid, entity interface{}) (*CatalogAnalitikaTipaIzdeliia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_АналитикаТипаИзделия", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogAnalitikaTipaIzdeliia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogAnalitikaTipaIzdeliia(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_АналитикаТипаИзделия", args)
}

func (c *Client) CreateCatalogAnalitikaTipaIzdeliia(data CatalogAnalitikaTipaIzdeliia) (*CatalogAnalitikaTipaIzdeliia, error) {
	raw, err := c.createEntity("Catalog_АналитикаТипаИзделия", data)
	if err != nil {
		return nil, err
	}
	result := CatalogAnalitikaTipaIzdeliia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogAnalitikaTipaIzdeliias(where Where) ([]CatalogAnalitikaTipaIzdeliia, error) {
	type ReturnObj struct {
		Value []CatalogAnalitikaTipaIzdeliia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_АналитикаТипаИзделия", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogDopolnitelnyePechatnyeFormy(Key Guid) (*CatalogDopolnitelnyePechatnyeFormy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ДополнительныеПечатныеФормы", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogDopolnitelnyePechatnyeFormy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogDopolnitelnyePechatnyeFormy(Key Guid, entity interface{}) (*CatalogDopolnitelnyePechatnyeFormy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ДополнительныеПечатныеФормы", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogDopolnitelnyePechatnyeFormy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogDopolnitelnyePechatnyeFormy(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ДополнительныеПечатныеФормы", args)
}

func (c *Client) CreateCatalogDopolnitelnyePechatnyeFormy(data CatalogDopolnitelnyePechatnyeFormy) (*CatalogDopolnitelnyePechatnyeFormy, error) {
	raw, err := c.createEntity("Catalog_ДополнительныеПечатныеФормы", data)
	if err != nil {
		return nil, err
	}
	result := CatalogDopolnitelnyePechatnyeFormy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogDopolnitelnyePechatnyeFormys(where Where) ([]CatalogDopolnitelnyePechatnyeFormy, error) {
	type ReturnObj struct {
		Value []CatalogDopolnitelnyePechatnyeFormy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ДополнительныеПечатныеФормы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogDopolnitelnyePechatnyeFormyPrinadlezhnost(Key Guid, LineNumber Int) (*CatalogDopolnitelnyePechatnyeFormyPrinadlezhnost, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_ДополнительныеПечатныеФормы_Принадлежность", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogDopolnitelnyePechatnyeFormyPrinadlezhnost{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogDopolnitelnyePechatnyeFormyPrinadlezhnost(Key Guid, LineNumber Int, entity interface{}) (*CatalogDopolnitelnyePechatnyeFormyPrinadlezhnost, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_ДополнительныеПечатныеФормы_Принадлежность", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogDopolnitelnyePechatnyeFormyPrinadlezhnost{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogDopolnitelnyePechatnyeFormyPrinadlezhnost(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_ДополнительныеПечатныеФормы_Принадлежность", args)
}

func (c *Client) CreateCatalogDopolnitelnyePechatnyeFormyPrinadlezhnost(data CatalogDopolnitelnyePechatnyeFormyPrinadlezhnost) (*CatalogDopolnitelnyePechatnyeFormyPrinadlezhnost, error) {
	raw, err := c.createEntity("Catalog_ДополнительныеПечатныеФормы_Принадлежность", data)
	if err != nil {
		return nil, err
	}
	result := CatalogDopolnitelnyePechatnyeFormyPrinadlezhnost{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogDopolnitelnyePechatnyeFormyPrinadlezhnosts(where Where) ([]CatalogDopolnitelnyePechatnyeFormyPrinadlezhnost, error) {
	type ReturnObj struct {
		Value []CatalogDopolnitelnyePechatnyeFormyPrinadlezhnost `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ДополнительныеПечатныеФормы_Принадлежность", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) MemberCardsType(Key Guid) (*MemberCardsType, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ВидыДисконтныхКарт", args, []string{})
	if err != nil {
		return nil, err
	}
	result := MemberCardsType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateMemberCardsType(Key Guid, entity interface{}) (*MemberCardsType, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ВидыДисконтныхКарт", args, entity)
	if err != nil {
		return nil, err
	}
	result := MemberCardsType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveMemberCardsType(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ВидыДисконтныхКарт", args)
}

func (c *Client) CreateMemberCardsType(data MemberCardsType) (*MemberCardsType, error) {
	raw, err := c.createEntity("Catalog_ВидыДисконтныхКарт", data)
	if err != nil {
		return nil, err
	}
	result := MemberCardsType{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) MemberCardsTypes(where Where) ([]MemberCardsType, error) {
	type ReturnObj struct {
		Value []MemberCardsType `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ВидыДисконтныхКарт", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentRegistratsiiaNaSaite(Key Guid) (*DocumentRegistratsiiaNaSaite, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_РегистрацияНаСайте", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentRegistratsiiaNaSaite{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentRegistratsiiaNaSaite(Key Guid, entity interface{}) (*DocumentRegistratsiiaNaSaite, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_РегистрацияНаСайте", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentRegistratsiiaNaSaite{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentRegistratsiiaNaSaite(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_РегистрацияНаСайте", args)
}

func (c *Client) CreateDocumentRegistratsiiaNaSaite(data DocumentRegistratsiiaNaSaite) (*DocumentRegistratsiiaNaSaite, error) {
	raw, err := c.createEntity("Document_РегистрацияНаСайте", data)
	if err != nil {
		return nil, err
	}
	result := DocumentRegistratsiiaNaSaite{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentRegistratsiiaNaSaites(where Where) ([]DocumentRegistratsiiaNaSaite, error) {
	type ReturnObj struct {
		Value []DocumentRegistratsiiaNaSaite `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_РегистрацияНаСайте", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogObrabotkiObsluzhivaniiaTO(Key Guid) (*CatalogObrabotkiObsluzhivaniiaTO, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ОбработкиОбслуживанияТО", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogObrabotkiObsluzhivaniiaTO{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogObrabotkiObsluzhivaniiaTO(Key Guid, entity interface{}) (*CatalogObrabotkiObsluzhivaniiaTO, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ОбработкиОбслуживанияТО", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogObrabotkiObsluzhivaniiaTO{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogObrabotkiObsluzhivaniiaTO(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ОбработкиОбслуживанияТО", args)
}

func (c *Client) CreateCatalogObrabotkiObsluzhivaniiaTO(data CatalogObrabotkiObsluzhivaniiaTO) (*CatalogObrabotkiObsluzhivaniiaTO, error) {
	raw, err := c.createEntity("Catalog_ОбработкиОбслуживанияТО", data)
	if err != nil {
		return nil, err
	}
	result := CatalogObrabotkiObsluzhivaniiaTO{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogObrabotkiObsluzhivaniiaTOs(where Where) ([]CatalogObrabotkiObsluzhivaniiaTO, error) {
	type ReturnObj struct {
		Value []CatalogObrabotkiObsluzhivaniiaTO `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ОбработкиОбслуживанияТО", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogObrabotkiObsluzhivaniiaTOModeli(Key Guid, LineNumber Int) (*CatalogObrabotkiObsluzhivaniiaTOModeli, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_ОбработкиОбслуживанияТО_Модели", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogObrabotkiObsluzhivaniiaTOModeli{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogObrabotkiObsluzhivaniiaTOModeli(Key Guid, LineNumber Int, entity interface{}) (*CatalogObrabotkiObsluzhivaniiaTOModeli, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_ОбработкиОбслуживанияТО_Модели", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogObrabotkiObsluzhivaniiaTOModeli{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogObrabotkiObsluzhivaniiaTOModeli(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_ОбработкиОбслуживанияТО_Модели", args)
}

func (c *Client) CreateCatalogObrabotkiObsluzhivaniiaTOModeli(data CatalogObrabotkiObsluzhivaniiaTOModeli) (*CatalogObrabotkiObsluzhivaniiaTOModeli, error) {
	raw, err := c.createEntity("Catalog_ОбработкиОбслуживанияТО_Модели", data)
	if err != nil {
		return nil, err
	}
	result := CatalogObrabotkiObsluzhivaniiaTOModeli{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogObrabotkiObsluzhivaniiaTOModelis(where Where) ([]CatalogObrabotkiObsluzhivaniiaTOModeli, error) {
	type ReturnObj struct {
		Value []CatalogObrabotkiObsluzhivaniiaTOModeli `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ОбработкиОбслуживанияТО_Модели", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogNastroikaIntervalov(Key Guid) (*CatalogNastroikaIntervalov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_НастройкаИнтервалов", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikaIntervalov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogNastroikaIntervalov(Key Guid, entity interface{}) (*CatalogNastroikaIntervalov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_НастройкаИнтервалов", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikaIntervalov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogNastroikaIntervalov(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_НастройкаИнтервалов", args)
}

func (c *Client) CreateCatalogNastroikaIntervalov(data CatalogNastroikaIntervalov) (*CatalogNastroikaIntervalov, error) {
	raw, err := c.createEntity("Catalog_НастройкаИнтервалов", data)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikaIntervalov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogNastroikaIntervalovs(where Where) ([]CatalogNastroikaIntervalov, error) {
	type ReturnObj struct {
		Value []CatalogNastroikaIntervalov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкаИнтервалов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogNastroikaIntervalovTablichnaiaChast(Key Guid, LineNumber Int) (*CatalogNastroikaIntervalovTablichnaiaChast, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_НастройкаИнтервалов_ТабличнаяЧасть", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikaIntervalovTablichnaiaChast{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogNastroikaIntervalovTablichnaiaChast(Key Guid, LineNumber Int, entity interface{}) (*CatalogNastroikaIntervalovTablichnaiaChast, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_НастройкаИнтервалов_ТабличнаяЧасть", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikaIntervalovTablichnaiaChast{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogNastroikaIntervalovTablichnaiaChast(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_НастройкаИнтервалов_ТабличнаяЧасть", args)
}

func (c *Client) CreateCatalogNastroikaIntervalovTablichnaiaChast(data CatalogNastroikaIntervalovTablichnaiaChast) (*CatalogNastroikaIntervalovTablichnaiaChast, error) {
	raw, err := c.createEntity("Catalog_НастройкаИнтервалов_ТабличнаяЧасть", data)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikaIntervalovTablichnaiaChast{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogNastroikaIntervalovTablichnaiaChasts(where Where) ([]CatalogNastroikaIntervalovTablichnaiaChast, error) {
	type ReturnObj struct {
		Value []CatalogNastroikaIntervalovTablichnaiaChast `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкаИнтервалов_ТабличнаяЧасть", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogProfiliGruppDostupa(Key Guid) (*CatalogProfiliGruppDostupa, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ПрофилиГруппДоступа", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogProfiliGruppDostupa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogProfiliGruppDostupa(Key Guid, entity interface{}) (*CatalogProfiliGruppDostupa, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ПрофилиГруппДоступа", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogProfiliGruppDostupa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogProfiliGruppDostupa(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ПрофилиГруппДоступа", args)
}

func (c *Client) CreateCatalogProfiliGruppDostupa(data CatalogProfiliGruppDostupa) (*CatalogProfiliGruppDostupa, error) {
	raw, err := c.createEntity("Catalog_ПрофилиГруппДоступа", data)
	if err != nil {
		return nil, err
	}
	result := CatalogProfiliGruppDostupa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogProfiliGruppDostupas(where Where) ([]CatalogProfiliGruppDostupa, error) {
	type ReturnObj struct {
		Value []CatalogProfiliGruppDostupa `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ПрофилиГруппДоступа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogProfiliGruppDostupaRoli(Key Guid, LineNumber Int) (*CatalogProfiliGruppDostupaRoli, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_ПрофилиГруппДоступа_Роли", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogProfiliGruppDostupaRoli{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogProfiliGruppDostupaRoli(Key Guid, LineNumber Int, entity interface{}) (*CatalogProfiliGruppDostupaRoli, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_ПрофилиГруппДоступа_Роли", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogProfiliGruppDostupaRoli{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogProfiliGruppDostupaRoli(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_ПрофилиГруппДоступа_Роли", args)
}

func (c *Client) CreateCatalogProfiliGruppDostupaRoli(data CatalogProfiliGruppDostupaRoli) (*CatalogProfiliGruppDostupaRoli, error) {
	raw, err := c.createEntity("Catalog_ПрофилиГруппДоступа_Роли", data)
	if err != nil {
		return nil, err
	}
	result := CatalogProfiliGruppDostupaRoli{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogProfiliGruppDostupaRolis(where Where) ([]CatalogProfiliGruppDostupaRoli, error) {
	type ReturnObj struct {
		Value []CatalogProfiliGruppDostupaRoli `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ПрофилиГруппДоступа_Роли", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogProfiliGruppDostupaVidyDostupa(Key Guid, LineNumber Int) (*CatalogProfiliGruppDostupaVidyDostupa, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_ПрофилиГруппДоступа_ВидыДоступа", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogProfiliGruppDostupaVidyDostupa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogProfiliGruppDostupaVidyDostupa(Key Guid, LineNumber Int, entity interface{}) (*CatalogProfiliGruppDostupaVidyDostupa, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_ПрофилиГруппДоступа_ВидыДоступа", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogProfiliGruppDostupaVidyDostupa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogProfiliGruppDostupaVidyDostupa(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_ПрофилиГруппДоступа_ВидыДоступа", args)
}

func (c *Client) CreateCatalogProfiliGruppDostupaVidyDostupa(data CatalogProfiliGruppDostupaVidyDostupa) (*CatalogProfiliGruppDostupaVidyDostupa, error) {
	raw, err := c.createEntity("Catalog_ПрофилиГруппДоступа_ВидыДоступа", data)
	if err != nil {
		return nil, err
	}
	result := CatalogProfiliGruppDostupaVidyDostupa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogProfiliGruppDostupaVidyDostupas(where Where) ([]CatalogProfiliGruppDostupaVidyDostupa, error) {
	type ReturnObj struct {
		Value []CatalogProfiliGruppDostupaVidyDostupa `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ПрофилиГруппДоступа_ВидыДоступа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogProfiliGruppDostupaZnacheniiaDostupa(Key Guid, LineNumber Int) (*CatalogProfiliGruppDostupaZnacheniiaDostupa, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_ПрофилиГруппДоступа_ЗначенияДоступа", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogProfiliGruppDostupaZnacheniiaDostupa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogProfiliGruppDostupaZnacheniiaDostupa(Key Guid, LineNumber Int, entity interface{}) (*CatalogProfiliGruppDostupaZnacheniiaDostupa, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_ПрофилиГруппДоступа_ЗначенияДоступа", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogProfiliGruppDostupaZnacheniiaDostupa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogProfiliGruppDostupaZnacheniiaDostupa(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_ПрофилиГруппДоступа_ЗначенияДоступа", args)
}

func (c *Client) CreateCatalogProfiliGruppDostupaZnacheniiaDostupa(data CatalogProfiliGruppDostupaZnacheniiaDostupa) (*CatalogProfiliGruppDostupaZnacheniiaDostupa, error) {
	raw, err := c.createEntity("Catalog_ПрофилиГруппДоступа_ЗначенияДоступа", data)
	if err != nil {
		return nil, err
	}
	result := CatalogProfiliGruppDostupaZnacheniiaDostupa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogProfiliGruppDostupaZnacheniiaDostupas(where Where) ([]CatalogProfiliGruppDostupaZnacheniiaDostupa, error) {
	type ReturnObj struct {
		Value []CatalogProfiliGruppDostupaZnacheniiaDostupa `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ПрофилиГруппДоступа_ЗначенияДоступа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogProfiliGruppDostupaDostupPoPodsistemam(Key Guid, LineNumber Int) (*CatalogProfiliGruppDostupaDostupPoPodsistemam, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_ПрофилиГруппДоступа_ДоступПоПодсистемам", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogProfiliGruppDostupaDostupPoPodsistemam{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogProfiliGruppDostupaDostupPoPodsistemam(Key Guid, LineNumber Int, entity interface{}) (*CatalogProfiliGruppDostupaDostupPoPodsistemam, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_ПрофилиГруппДоступа_ДоступПоПодсистемам", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogProfiliGruppDostupaDostupPoPodsistemam{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogProfiliGruppDostupaDostupPoPodsistemam(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_ПрофилиГруппДоступа_ДоступПоПодсистемам", args)
}

func (c *Client) CreateCatalogProfiliGruppDostupaDostupPoPodsistemam(data CatalogProfiliGruppDostupaDostupPoPodsistemam) (*CatalogProfiliGruppDostupaDostupPoPodsistemam, error) {
	raw, err := c.createEntity("Catalog_ПрофилиГруппДоступа_ДоступПоПодсистемам", data)
	if err != nil {
		return nil, err
	}
	result := CatalogProfiliGruppDostupaDostupPoPodsistemam{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogProfiliGruppDostupaDostupPoPodsistemams(where Where) ([]CatalogProfiliGruppDostupaDostupPoPodsistemam, error) {
	type ReturnObj struct {
		Value []CatalogProfiliGruppDostupaDostupPoPodsistemam `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ПрофилиГруппДоступа_ДоступПоПодсистемам", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogNastroikiDliaKurera(Key Guid) (*CatalogNastroikiDliaKurera, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_НастройкиДляКурьера", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiDliaKurera{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogNastroikiDliaKurera(Key Guid, entity interface{}) (*CatalogNastroikiDliaKurera, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_НастройкиДляКурьера", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiDliaKurera{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogNastroikiDliaKurera(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_НастройкиДляКурьера", args)
}

func (c *Client) CreateCatalogNastroikiDliaKurera(data CatalogNastroikiDliaKurera) (*CatalogNastroikiDliaKurera, error) {
	raw, err := c.createEntity("Catalog_НастройкиДляКурьера", data)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiDliaKurera{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogNastroikiDliaKureras(where Where) ([]CatalogNastroikiDliaKurera, error) {
	type ReturnObj struct {
		Value []CatalogNastroikiDliaKurera `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкиДляКурьера", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogNastroikiDliaKureraSostavNaimenovaniia(Key Guid, LineNumber Int) (*CatalogNastroikiDliaKureraSostavNaimenovaniia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_НастройкиДляКурьера_СоставНаименования", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiDliaKureraSostavNaimenovaniia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogNastroikiDliaKureraSostavNaimenovaniia(Key Guid, LineNumber Int, entity interface{}) (*CatalogNastroikiDliaKureraSostavNaimenovaniia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_НастройкиДляКурьера_СоставНаименования", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiDliaKureraSostavNaimenovaniia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogNastroikiDliaKureraSostavNaimenovaniia(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_НастройкиДляКурьера_СоставНаименования", args)
}

func (c *Client) CreateCatalogNastroikiDliaKureraSostavNaimenovaniia(data CatalogNastroikiDliaKureraSostavNaimenovaniia) (*CatalogNastroikiDliaKureraSostavNaimenovaniia, error) {
	raw, err := c.createEntity("Catalog_НастройкиДляКурьера_СоставНаименования", data)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiDliaKureraSostavNaimenovaniia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogNastroikiDliaKureraSostavNaimenovaniias(where Where) ([]CatalogNastroikiDliaKureraSostavNaimenovaniia, error) {
	type ReturnObj struct {
		Value []CatalogNastroikiDliaKureraSostavNaimenovaniia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкиДляКурьера_СоставНаименования", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogTipyTsenNomenklaturyKontragentov(Key Guid) (*CatalogTipyTsenNomenklaturyKontragentov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ТипыЦенНоменклатурыКонтрагентов", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogTipyTsenNomenklaturyKontragentov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogTipyTsenNomenklaturyKontragentov(Key Guid, entity interface{}) (*CatalogTipyTsenNomenklaturyKontragentov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ТипыЦенНоменклатурыКонтрагентов", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogTipyTsenNomenklaturyKontragentov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogTipyTsenNomenklaturyKontragentov(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ТипыЦенНоменклатурыКонтрагентов", args)
}

func (c *Client) CreateCatalogTipyTsenNomenklaturyKontragentov(data CatalogTipyTsenNomenklaturyKontragentov) (*CatalogTipyTsenNomenklaturyKontragentov, error) {
	raw, err := c.createEntity("Catalog_ТипыЦенНоменклатурыКонтрагентов", data)
	if err != nil {
		return nil, err
	}
	result := CatalogTipyTsenNomenklaturyKontragentov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogTipyTsenNomenklaturyKontragentovs(where Where) ([]CatalogTipyTsenNomenklaturyKontragentov, error) {
	type ReturnObj struct {
		Value []CatalogTipyTsenNomenklaturyKontragentov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ТипыЦенНоменклатурыКонтрагентов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentJournalTsenoobrazovanie(Ref String, RefType String) (*DocumentJournalTsenoobrazovanie, error) {
	args := []string{fmt.Sprintf("Ref='%s' ", url.PathEscape(string(Ref))), fmt.Sprintf("Ref_Type='%s' ", url.PathEscape(string(RefType)))}
	raw, err := c.getEntity("DocumentJournal_Ценообразование", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentJournalTsenoobrazovanie{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentJournalTsenoobrazovanie(Ref String, RefType String, entity interface{}) (*DocumentJournalTsenoobrazovanie, error) {
	args := []string{fmt.Sprintf("Ref='%s' ", url.PathEscape(string(Ref))), fmt.Sprintf("Ref_Type='%s' ", url.PathEscape(string(RefType)))}
	raw, err := c.updateEntity("DocumentJournal_Ценообразование", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentJournalTsenoobrazovanie{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentJournalTsenoobrazovanie(Ref String, RefType String) error {
	args := []string{fmt.Sprintf("Ref='%s' ", url.PathEscape(string(Ref))), fmt.Sprintf("Ref_Type='%s' ", url.PathEscape(string(RefType)))}
	return c.removeEntity("DocumentJournal_Ценообразование", args)
}

func (c *Client) CreateDocumentJournalTsenoobrazovanie(data DocumentJournalTsenoobrazovanie) (*DocumentJournalTsenoobrazovanie, error) {
	raw, err := c.createEntity("DocumentJournal_Ценообразование", data)
	if err != nil {
		return nil, err
	}
	result := DocumentJournalTsenoobrazovanie{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentJournalTsenoobrazovanies(where Where) ([]DocumentJournalTsenoobrazovanie, error) {
	type ReturnObj struct {
		Value []DocumentJournalTsenoobrazovanie `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("DocumentJournal_Ценообразование", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogEdinitsyIzmereniia(Key Guid) (*CatalogEdinitsyIzmereniia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ЕдиницыИзмерения", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogEdinitsyIzmereniia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogEdinitsyIzmereniia(Key Guid, entity interface{}) (*CatalogEdinitsyIzmereniia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ЕдиницыИзмерения", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogEdinitsyIzmereniia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogEdinitsyIzmereniia(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ЕдиницыИзмерения", args)
}

func (c *Client) CreateCatalogEdinitsyIzmereniia(data CatalogEdinitsyIzmereniia) (*CatalogEdinitsyIzmereniia, error) {
	raw, err := c.createEntity("Catalog_ЕдиницыИзмерения", data)
	if err != nil {
		return nil, err
	}
	result := CatalogEdinitsyIzmereniia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogEdinitsyIzmereniias(where Where) ([]CatalogEdinitsyIzmereniia, error) {
	type ReturnObj struct {
		Value []CatalogEdinitsyIzmereniia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ЕдиницыИзмерения", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogStatiDvizheniiaDenezhnykhSredstv(Key Guid) (*CatalogStatiDvizheniiaDenezhnykhSredstv, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_СтатьиДвиженияДенежныхСредств", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogStatiDvizheniiaDenezhnykhSredstv{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogStatiDvizheniiaDenezhnykhSredstv(Key Guid, entity interface{}) (*CatalogStatiDvizheniiaDenezhnykhSredstv, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_СтатьиДвиженияДенежныхСредств", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogStatiDvizheniiaDenezhnykhSredstv{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogStatiDvizheniiaDenezhnykhSredstv(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_СтатьиДвиженияДенежныхСредств", args)
}

func (c *Client) CreateCatalogStatiDvizheniiaDenezhnykhSredstv(data CatalogStatiDvizheniiaDenezhnykhSredstv) (*CatalogStatiDvizheniiaDenezhnykhSredstv, error) {
	raw, err := c.createEntity("Catalog_СтатьиДвиженияДенежныхСредств", data)
	if err != nil {
		return nil, err
	}
	result := CatalogStatiDvizheniiaDenezhnykhSredstv{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogStatiDvizheniiaDenezhnykhSredstvs(where Where) ([]CatalogStatiDvizheniiaDenezhnykhSredstv, error) {
	type ReturnObj struct {
		Value []CatalogStatiDvizheniiaDenezhnykhSredstv `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_СтатьиДвиженияДенежныхСредств", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentInkassovoePorucheniePoluchennoe(Key Guid) (*DocumentInkassovoePorucheniePoluchennoe, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ИнкассовоеПоручениеПолученное", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentInkassovoePorucheniePoluchennoe{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentInkassovoePorucheniePoluchennoe(Key Guid, entity interface{}) (*DocumentInkassovoePorucheniePoluchennoe, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ИнкассовоеПоручениеПолученное", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentInkassovoePorucheniePoluchennoe{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentInkassovoePorucheniePoluchennoe(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ИнкассовоеПоручениеПолученное", args)
}

func (c *Client) CreateDocumentInkassovoePorucheniePoluchennoe(data DocumentInkassovoePorucheniePoluchennoe) (*DocumentInkassovoePorucheniePoluchennoe, error) {
	raw, err := c.createEntity("Document_ИнкассовоеПоручениеПолученное", data)
	if err != nil {
		return nil, err
	}
	result := DocumentInkassovoePorucheniePoluchennoe{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentInkassovoePorucheniePoluchennoes(where Where) ([]DocumentInkassovoePorucheniePoluchennoe, error) {
	type ReturnObj struct {
		Value []DocumentInkassovoePorucheniePoluchennoe `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ИнкассовоеПоручениеПолученное", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezha(Key Guid, LineNumber Int) (*DocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezha, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ИнкассовоеПоручениеПолученное_РасшифровкаПлатежа", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezha(Key Guid, LineNumber Int, entity interface{}) (*DocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezha, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ИнкассовоеПоручениеПолученное_РасшифровкаПлатежа", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezha(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ИнкассовоеПоручениеПолученное_РасшифровкаПлатежа", args)
}

func (c *Client) CreateDocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezha(data DocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezha) (*DocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezha, error) {
	raw, err := c.createEntity("Document_ИнкассовоеПоручениеПолученное_РасшифровкаПлатежа", data)
	if err != nil {
		return nil, err
	}
	result := DocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezhas(where Where) ([]DocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezha, error) {
	type ReturnObj struct {
		Value []DocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezha `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ИнкассовоеПоручениеПолученное_РасшифровкаПлатежа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentInkassovoePorucheniePoluchennoeRekvizityKontragenta(Key Guid, LineNumber Int) (*DocumentInkassovoePorucheniePoluchennoeRekvizityKontragenta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ИнкассовоеПоручениеПолученное_РеквизитыКонтрагента", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentInkassovoePorucheniePoluchennoeRekvizityKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentInkassovoePorucheniePoluchennoeRekvizityKontragenta(Key Guid, LineNumber Int, entity interface{}) (*DocumentInkassovoePorucheniePoluchennoeRekvizityKontragenta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ИнкассовоеПоручениеПолученное_РеквизитыКонтрагента", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentInkassovoePorucheniePoluchennoeRekvizityKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentInkassovoePorucheniePoluchennoeRekvizityKontragenta(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ИнкассовоеПоручениеПолученное_РеквизитыКонтрагента", args)
}

func (c *Client) CreateDocumentInkassovoePorucheniePoluchennoeRekvizityKontragenta(data DocumentInkassovoePorucheniePoluchennoeRekvizityKontragenta) (*DocumentInkassovoePorucheniePoluchennoeRekvizityKontragenta, error) {
	raw, err := c.createEntity("Document_ИнкассовоеПоручениеПолученное_РеквизитыКонтрагента", data)
	if err != nil {
		return nil, err
	}
	result := DocumentInkassovoePorucheniePoluchennoeRekvizityKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentInkassovoePorucheniePoluchennoeRekvizityKontragentas(where Where) ([]DocumentInkassovoePorucheniePoluchennoeRekvizityKontragenta, error) {
	type ReturnObj struct {
		Value []DocumentInkassovoePorucheniePoluchennoeRekvizityKontragenta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ИнкассовоеПоручениеПолученное_РеквизитыКонтрагента", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogNastroikiObmenaDannymiShtrikhM(Key Guid) (*CatalogNastroikiObmenaDannymiShtrikhM, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_НастройкиОбменаДаннымиШтрихМ", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiObmenaDannymiShtrikhM{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogNastroikiObmenaDannymiShtrikhM(Key Guid, entity interface{}) (*CatalogNastroikiObmenaDannymiShtrikhM, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_НастройкиОбменаДаннымиШтрихМ", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiObmenaDannymiShtrikhM{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogNastroikiObmenaDannymiShtrikhM(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_НастройкиОбменаДаннымиШтрихМ", args)
}

func (c *Client) CreateCatalogNastroikiObmenaDannymiShtrikhM(data CatalogNastroikiObmenaDannymiShtrikhM) (*CatalogNastroikiObmenaDannymiShtrikhM, error) {
	raw, err := c.createEntity("Catalog_НастройкиОбменаДаннымиШтрихМ", data)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiObmenaDannymiShtrikhM{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogNastroikiObmenaDannymiShtrikhMs(where Where) ([]CatalogNastroikiObmenaDannymiShtrikhM, error) {
	type ReturnObj struct {
		Value []CatalogNastroikiObmenaDannymiShtrikhM `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкиОбменаДаннымиШтрихМ", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogStatiZatrat(Key Guid) (*CatalogStatiZatrat, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_СтатьиЗатрат", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogStatiZatrat{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogStatiZatrat(Key Guid, entity interface{}) (*CatalogStatiZatrat, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_СтатьиЗатрат", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogStatiZatrat{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogStatiZatrat(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_СтатьиЗатрат", args)
}

func (c *Client) CreateCatalogStatiZatrat(data CatalogStatiZatrat) (*CatalogStatiZatrat, error) {
	raw, err := c.createEntity("Catalog_СтатьиЗатрат", data)
	if err != nil {
		return nil, err
	}
	result := CatalogStatiZatrat{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogStatiZatrats(where Where) ([]CatalogStatiZatrat, error) {
	type ReturnObj struct {
		Value []CatalogStatiZatrat `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_СтатьиЗатрат", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentVozvratTovarovOtPokupatelia(Key Guid) (*DocumentVozvratTovarovOtPokupatelia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ВозвратТоваровОтПокупателя", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentVozvratTovarovOtPokupatelia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentVozvratTovarovOtPokupatelia(Key Guid, entity interface{}) (*DocumentVozvratTovarovOtPokupatelia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ВозвратТоваровОтПокупателя", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentVozvratTovarovOtPokupatelia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentVozvratTovarovOtPokupatelia(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ВозвратТоваровОтПокупателя", args)
}

func (c *Client) CreateDocumentVozvratTovarovOtPokupatelia(data DocumentVozvratTovarovOtPokupatelia) (*DocumentVozvratTovarovOtPokupatelia, error) {
	raw, err := c.createEntity("Document_ВозвратТоваровОтПокупателя", data)
	if err != nil {
		return nil, err
	}
	result := DocumentVozvratTovarovOtPokupatelia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentVozvratTovarovOtPokupatelias(where Where) ([]DocumentVozvratTovarovOtPokupatelia, error) {
	type ReturnObj struct {
		Value []DocumentVozvratTovarovOtPokupatelia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВозвратТоваровОтПокупателя", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentVozvratTovarovOtPokupateliaTovary(Key Guid, LineNumber Int) (*DocumentVozvratTovarovOtPokupateliaTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ВозвратТоваровОтПокупателя_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentVozvratTovarovOtPokupateliaTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentVozvratTovarovOtPokupateliaTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentVozvratTovarovOtPokupateliaTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ВозвратТоваровОтПокупателя_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentVozvratTovarovOtPokupateliaTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentVozvratTovarovOtPokupateliaTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ВозвратТоваровОтПокупателя_Товары", args)
}

func (c *Client) CreateDocumentVozvratTovarovOtPokupateliaTovary(data DocumentVozvratTovarovOtPokupateliaTovary) (*DocumentVozvratTovarovOtPokupateliaTovary, error) {
	raw, err := c.createEntity("Document_ВозвратТоваровОтПокупателя_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentVozvratTovarovOtPokupateliaTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentVozvratTovarovOtPokupateliaTovarys(where Where) ([]DocumentVozvratTovarovOtPokupateliaTovary, error) {
	type ReturnObj struct {
		Value []DocumentVozvratTovarovOtPokupateliaTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВозвратТоваровОтПокупателя_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentVozvratTovarovOtPokupateliaUslugi(Key Guid, LineNumber Int) (*DocumentVozvratTovarovOtPokupateliaUslugi, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ВозвратТоваровОтПокупателя_Услуги", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentVozvratTovarovOtPokupateliaUslugi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentVozvratTovarovOtPokupateliaUslugi(Key Guid, LineNumber Int, entity interface{}) (*DocumentVozvratTovarovOtPokupateliaUslugi, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ВозвратТоваровОтПокупателя_Услуги", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentVozvratTovarovOtPokupateliaUslugi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentVozvratTovarovOtPokupateliaUslugi(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ВозвратТоваровОтПокупателя_Услуги", args)
}

func (c *Client) CreateDocumentVozvratTovarovOtPokupateliaUslugi(data DocumentVozvratTovarovOtPokupateliaUslugi) (*DocumentVozvratTovarovOtPokupateliaUslugi, error) {
	raw, err := c.createEntity("Document_ВозвратТоваровОтПокупателя_Услуги", data)
	if err != nil {
		return nil, err
	}
	result := DocumentVozvratTovarovOtPokupateliaUslugi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentVozvratTovarovOtPokupateliaUslugis(where Where) ([]DocumentVozvratTovarovOtPokupateliaUslugi, error) {
	type ReturnObj struct {
		Value []DocumentVozvratTovarovOtPokupateliaUslugi `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВозвратТоваровОтПокупателя_Услуги", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentZakazPostavshchiku(Key Guid) (*DocumentZakazPostavshchiku, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ЗаказПоставщику", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentZakazPostavshchiku{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentZakazPostavshchiku(Key Guid, entity interface{}) (*DocumentZakazPostavshchiku, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ЗаказПоставщику", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentZakazPostavshchiku{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentZakazPostavshchiku(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ЗаказПоставщику", args)
}

func (c *Client) CreateDocumentZakazPostavshchiku(data DocumentZakazPostavshchiku) (*DocumentZakazPostavshchiku, error) {
	raw, err := c.createEntity("Document_ЗаказПоставщику", data)
	if err != nil {
		return nil, err
	}
	result := DocumentZakazPostavshchiku{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentZakazPostavshchikus(where Where) ([]DocumentZakazPostavshchiku, error) {
	type ReturnObj struct {
		Value []DocumentZakazPostavshchiku `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗаказПоставщику", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentZakazPostavshchikuTovary(Key Guid, LineNumber Int) (*DocumentZakazPostavshchikuTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ЗаказПоставщику_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentZakazPostavshchikuTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentZakazPostavshchikuTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentZakazPostavshchikuTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ЗаказПоставщику_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentZakazPostavshchikuTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentZakazPostavshchikuTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ЗаказПоставщику_Товары", args)
}

func (c *Client) CreateDocumentZakazPostavshchikuTovary(data DocumentZakazPostavshchikuTovary) (*DocumentZakazPostavshchikuTovary, error) {
	raw, err := c.createEntity("Document_ЗаказПоставщику_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentZakazPostavshchikuTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentZakazPostavshchikuTovarys(where Where) ([]DocumentZakazPostavshchikuTovary, error) {
	type ReturnObj struct {
		Value []DocumentZakazPostavshchikuTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗаказПоставщику_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogSkidkiNatsenki(Key Guid) (*CatalogSkidkiNatsenki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_СкидкиНаценки", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogSkidkiNatsenki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogSkidkiNatsenki(Key Guid, entity interface{}) (*CatalogSkidkiNatsenki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_СкидкиНаценки", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogSkidkiNatsenki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogSkidkiNatsenki(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_СкидкиНаценки", args)
}

func (c *Client) CreateCatalogSkidkiNatsenki(data CatalogSkidkiNatsenki) (*CatalogSkidkiNatsenki, error) {
	raw, err := c.createEntity("Catalog_СкидкиНаценки", data)
	if err != nil {
		return nil, err
	}
	result := CatalogSkidkiNatsenki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogSkidkiNatsenkis(where Where) ([]CatalogSkidkiNatsenki, error) {
	type ReturnObj struct {
		Value []CatalogSkidkiNatsenki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_СкидкиНаценки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogSkidkiNatsenkiUsloviiaPredostavleniia(Key Guid, LineNumber Int) (*CatalogSkidkiNatsenkiUsloviiaPredostavleniia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_СкидкиНаценки_УсловияПредоставления", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogSkidkiNatsenkiUsloviiaPredostavleniia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogSkidkiNatsenkiUsloviiaPredostavleniia(Key Guid, LineNumber Int, entity interface{}) (*CatalogSkidkiNatsenkiUsloviiaPredostavleniia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_СкидкиНаценки_УсловияПредоставления", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogSkidkiNatsenkiUsloviiaPredostavleniia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogSkidkiNatsenkiUsloviiaPredostavleniia(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_СкидкиНаценки_УсловияПредоставления", args)
}

func (c *Client) CreateCatalogSkidkiNatsenkiUsloviiaPredostavleniia(data CatalogSkidkiNatsenkiUsloviiaPredostavleniia) (*CatalogSkidkiNatsenkiUsloviiaPredostavleniia, error) {
	raw, err := c.createEntity("Catalog_СкидкиНаценки_УсловияПредоставления", data)
	if err != nil {
		return nil, err
	}
	result := CatalogSkidkiNatsenkiUsloviiaPredostavleniia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogSkidkiNatsenkiUsloviiaPredostavleniias(where Where) ([]CatalogSkidkiNatsenkiUsloviiaPredostavleniia, error) {
	type ReturnObj struct {
		Value []CatalogSkidkiNatsenkiUsloviiaPredostavleniia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_СкидкиНаценки_УсловияПредоставления", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogSkidkiNatsenkiTsenovyeGruppy(Key Guid, LineNumber Int) (*CatalogSkidkiNatsenkiTsenovyeGruppy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_СкидкиНаценки_ЦеновыеГруппы", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogSkidkiNatsenkiTsenovyeGruppy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogSkidkiNatsenkiTsenovyeGruppy(Key Guid, LineNumber Int, entity interface{}) (*CatalogSkidkiNatsenkiTsenovyeGruppy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_СкидкиНаценки_ЦеновыеГруппы", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogSkidkiNatsenkiTsenovyeGruppy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogSkidkiNatsenkiTsenovyeGruppy(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_СкидкиНаценки_ЦеновыеГруппы", args)
}

func (c *Client) CreateCatalogSkidkiNatsenkiTsenovyeGruppy(data CatalogSkidkiNatsenkiTsenovyeGruppy) (*CatalogSkidkiNatsenkiTsenovyeGruppy, error) {
	raw, err := c.createEntity("Catalog_СкидкиНаценки_ЦеновыеГруппы", data)
	if err != nil {
		return nil, err
	}
	result := CatalogSkidkiNatsenkiTsenovyeGruppy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogSkidkiNatsenkiTsenovyeGruppys(where Where) ([]CatalogSkidkiNatsenkiTsenovyeGruppy, error) {
	type ReturnObj struct {
		Value []CatalogSkidkiNatsenkiTsenovyeGruppy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_СкидкиНаценки_ЦеновыеГруппы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogSkidkiNatsenkiNaborPodarkov(Key Guid, LineNumber Int) (*CatalogSkidkiNatsenkiNaborPodarkov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_СкидкиНаценки_НаборПодарков", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogSkidkiNatsenkiNaborPodarkov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogSkidkiNatsenkiNaborPodarkov(Key Guid, LineNumber Int, entity interface{}) (*CatalogSkidkiNatsenkiNaborPodarkov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_СкидкиНаценки_НаборПодарков", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogSkidkiNatsenkiNaborPodarkov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogSkidkiNatsenkiNaborPodarkov(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_СкидкиНаценки_НаборПодарков", args)
}

func (c *Client) CreateCatalogSkidkiNatsenkiNaborPodarkov(data CatalogSkidkiNatsenkiNaborPodarkov) (*CatalogSkidkiNatsenkiNaborPodarkov, error) {
	raw, err := c.createEntity("Catalog_СкидкиНаценки_НаборПодарков", data)
	if err != nil {
		return nil, err
	}
	result := CatalogSkidkiNatsenkiNaborPodarkov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogSkidkiNatsenkiNaborPodarkovs(where Where) ([]CatalogSkidkiNatsenkiNaborPodarkov, error) {
	type ReturnObj struct {
		Value []CatalogSkidkiNatsenkiNaborPodarkov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_СкидкиНаценки_НаборПодарков", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogGruppyTsvetov(Key Guid) (*CatalogGruppyTsvetov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ГруппыЦветов", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogGruppyTsvetov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogGruppyTsvetov(Key Guid, entity interface{}) (*CatalogGruppyTsvetov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ГруппыЦветов", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogGruppyTsvetov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogGruppyTsvetov(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ГруппыЦветов", args)
}

func (c *Client) CreateCatalogGruppyTsvetov(data CatalogGruppyTsvetov) (*CatalogGruppyTsvetov, error) {
	raw, err := c.createEntity("Catalog_ГруппыЦветов", data)
	if err != nil {
		return nil, err
	}
	result := CatalogGruppyTsvetov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogGruppyTsvetovs(where Where) ([]CatalogGruppyTsvetov, error) {
	type ReturnObj struct {
		Value []CatalogGruppyTsvetov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ГруппыЦветов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentDokumentRaschetovSKontragentom(Key Guid) (*DocumentDokumentRaschetovSKontragentom, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ДокументРасчетовСКонтрагентом", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentDokumentRaschetovSKontragentom{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentDokumentRaschetovSKontragentom(Key Guid, entity interface{}) (*DocumentDokumentRaschetovSKontragentom, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ДокументРасчетовСКонтрагентом", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentDokumentRaschetovSKontragentom{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentDokumentRaschetovSKontragentom(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ДокументРасчетовСКонтрагентом", args)
}

func (c *Client) CreateDocumentDokumentRaschetovSKontragentom(data DocumentDokumentRaschetovSKontragentom) (*DocumentDokumentRaschetovSKontragentom, error) {
	raw, err := c.createEntity("Document_ДокументРасчетовСКонтрагентом", data)
	if err != nil {
		return nil, err
	}
	result := DocumentDokumentRaschetovSKontragentom{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentDokumentRaschetovSKontragentoms(where Where) ([]DocumentDokumentRaschetovSKontragentom, error) {
	type ReturnObj struct {
		Value []DocumentDokumentRaschetovSKontragentom `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ДокументРасчетовСКонтрагентом", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogDogovoryEkvairinga(Key Guid) (*CatalogDogovoryEkvairinga, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ДоговорыЭквайринга", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogDogovoryEkvairinga{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogDogovoryEkvairinga(Key Guid, entity interface{}) (*CatalogDogovoryEkvairinga, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ДоговорыЭквайринга", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogDogovoryEkvairinga{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogDogovoryEkvairinga(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ДоговорыЭквайринга", args)
}

func (c *Client) CreateCatalogDogovoryEkvairinga(data CatalogDogovoryEkvairinga) (*CatalogDogovoryEkvairinga, error) {
	raw, err := c.createEntity("Catalog_ДоговорыЭквайринга", data)
	if err != nil {
		return nil, err
	}
	result := CatalogDogovoryEkvairinga{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogDogovoryEkvairingas(where Where) ([]CatalogDogovoryEkvairinga, error) {
	type ReturnObj struct {
		Value []CatalogDogovoryEkvairinga `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ДоговорыЭквайринга", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanie(Key Guid, LineNumber Int) (*CatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanie, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_ДоговорыЭквайринга_ТарифыЗаРасчетноеОбслуживание", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanie{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanie(Key Guid, LineNumber Int, entity interface{}) (*CatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanie, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_ДоговорыЭквайринга_ТарифыЗаРасчетноеОбслуживание", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanie{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanie(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_ДоговорыЭквайринга_ТарифыЗаРасчетноеОбслуживание", args)
}

func (c *Client) CreateCatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanie(data CatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanie) (*CatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanie, error) {
	raw, err := c.createEntity("Catalog_ДоговорыЭквайринга_ТарифыЗаРасчетноеОбслуживание", data)
	if err != nil {
		return nil, err
	}
	result := CatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanie{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanies(where Where) ([]CatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanie, error) {
	type ReturnObj struct {
		Value []CatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanie `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ДоговорыЭквайринга_ТарифыЗаРасчетноеОбслуживание", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogKachestvo(Key Guid) (*CatalogKachestvo, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_Качество", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogKachestvo{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogKachestvo(Key Guid, entity interface{}) (*CatalogKachestvo, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_Качество", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogKachestvo{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogKachestvo(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_Качество", args)
}

func (c *Client) CreateCatalogKachestvo(data CatalogKachestvo) (*CatalogKachestvo, error) {
	raw, err := c.createEntity("Catalog_Качество", data)
	if err != nil {
		return nil, err
	}
	result := CatalogKachestvo{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogKachestvos(where Where) ([]CatalogKachestvo, error) {
	type ReturnObj struct {
		Value []CatalogKachestvo `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Качество", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentUstanovkaTsenNomenklaturyKontragentov(Key Guid) (*DocumentUstanovkaTsenNomenklaturyKontragentov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_УстановкаЦенНоменклатурыКонтрагентов", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentUstanovkaTsenNomenklaturyKontragentov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentUstanovkaTsenNomenklaturyKontragentov(Key Guid, entity interface{}) (*DocumentUstanovkaTsenNomenklaturyKontragentov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_УстановкаЦенНоменклатурыКонтрагентов", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentUstanovkaTsenNomenklaturyKontragentov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentUstanovkaTsenNomenklaturyKontragentov(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_УстановкаЦенНоменклатурыКонтрагентов", args)
}

func (c *Client) CreateDocumentUstanovkaTsenNomenklaturyKontragentov(data DocumentUstanovkaTsenNomenklaturyKontragentov) (*DocumentUstanovkaTsenNomenklaturyKontragentov, error) {
	raw, err := c.createEntity("Document_УстановкаЦенНоменклатурыКонтрагентов", data)
	if err != nil {
		return nil, err
	}
	result := DocumentUstanovkaTsenNomenklaturyKontragentov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentUstanovkaTsenNomenklaturyKontragentovs(where Where) ([]DocumentUstanovkaTsenNomenklaturyKontragentov, error) {
	type ReturnObj struct {
		Value []DocumentUstanovkaTsenNomenklaturyKontragentov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_УстановкаЦенНоменклатурыКонтрагентов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentUstanovkaTsenNomenklaturyKontragentovTipyTsen(Key Guid, LineNumber Int) (*DocumentUstanovkaTsenNomenklaturyKontragentovTipyTsen, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_УстановкаЦенНоменклатурыКонтрагентов_ТипыЦен", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentUstanovkaTsenNomenklaturyKontragentovTipyTsen{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentUstanovkaTsenNomenklaturyKontragentovTipyTsen(Key Guid, LineNumber Int, entity interface{}) (*DocumentUstanovkaTsenNomenklaturyKontragentovTipyTsen, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_УстановкаЦенНоменклатурыКонтрагентов_ТипыЦен", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentUstanovkaTsenNomenklaturyKontragentovTipyTsen{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentUstanovkaTsenNomenklaturyKontragentovTipyTsen(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_УстановкаЦенНоменклатурыКонтрагентов_ТипыЦен", args)
}

func (c *Client) CreateDocumentUstanovkaTsenNomenklaturyKontragentovTipyTsen(data DocumentUstanovkaTsenNomenklaturyKontragentovTipyTsen) (*DocumentUstanovkaTsenNomenklaturyKontragentovTipyTsen, error) {
	raw, err := c.createEntity("Document_УстановкаЦенНоменклатурыКонтрагентов_ТипыЦен", data)
	if err != nil {
		return nil, err
	}
	result := DocumentUstanovkaTsenNomenklaturyKontragentovTipyTsen{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentUstanovkaTsenNomenklaturyKontragentovTipyTsens(where Where) ([]DocumentUstanovkaTsenNomenklaturyKontragentovTipyTsen, error) {
	type ReturnObj struct {
		Value []DocumentUstanovkaTsenNomenklaturyKontragentovTipyTsen `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_УстановкаЦенНоменклатурыКонтрагентов_ТипыЦен", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentUstanovkaTsenNomenklaturyKontragentovTovary(Key Guid, LineNumber Int) (*DocumentUstanovkaTsenNomenklaturyKontragentovTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_УстановкаЦенНоменклатурыКонтрагентов_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentUstanovkaTsenNomenklaturyKontragentovTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentUstanovkaTsenNomenklaturyKontragentovTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentUstanovkaTsenNomenklaturyKontragentovTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_УстановкаЦенНоменклатурыКонтрагентов_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentUstanovkaTsenNomenklaturyKontragentovTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentUstanovkaTsenNomenklaturyKontragentovTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_УстановкаЦенНоменклатурыКонтрагентов_Товары", args)
}

func (c *Client) CreateDocumentUstanovkaTsenNomenklaturyKontragentovTovary(data DocumentUstanovkaTsenNomenklaturyKontragentovTovary) (*DocumentUstanovkaTsenNomenklaturyKontragentovTovary, error) {
	raw, err := c.createEntity("Document_УстановкаЦенНоменклатурыКонтрагентов_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentUstanovkaTsenNomenklaturyKontragentovTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentUstanovkaTsenNomenklaturyKontragentovTovarys(where Where) ([]DocumentUstanovkaTsenNomenklaturyKontragentovTovary, error) {
	type ReturnObj struct {
		Value []DocumentUstanovkaTsenNomenklaturyKontragentovTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_УстановкаЦенНоменклатурыКонтрагентов_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentProtsentPoterPoDavaltsam(Key Guid) (*DocumentProtsentPoterPoDavaltsam, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ПроцентПотерьПоДавальцам", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentProtsentPoterPoDavaltsam{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentProtsentPoterPoDavaltsam(Key Guid, entity interface{}) (*DocumentProtsentPoterPoDavaltsam, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ПроцентПотерьПоДавальцам", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentProtsentPoterPoDavaltsam{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentProtsentPoterPoDavaltsam(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ПроцентПотерьПоДавальцам", args)
}

func (c *Client) CreateDocumentProtsentPoterPoDavaltsam(data DocumentProtsentPoterPoDavaltsam) (*DocumentProtsentPoterPoDavaltsam, error) {
	raw, err := c.createEntity("Document_ПроцентПотерьПоДавальцам", data)
	if err != nil {
		return nil, err
	}
	result := DocumentProtsentPoterPoDavaltsam{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentProtsentPoterPoDavaltsams(where Where) ([]DocumentProtsentPoterPoDavaltsam, error) {
	type ReturnObj struct {
		Value []DocumentProtsentPoterPoDavaltsam `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПроцентПотерьПоДавальцам", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentProtsentPoterPoDavaltsamProtsenty(Key Guid, LineNumber Int) (*DocumentProtsentPoterPoDavaltsamProtsenty, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ПроцентПотерьПоДавальцам_Проценты", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentProtsentPoterPoDavaltsamProtsenty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentProtsentPoterPoDavaltsamProtsenty(Key Guid, LineNumber Int, entity interface{}) (*DocumentProtsentPoterPoDavaltsamProtsenty, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ПроцентПотерьПоДавальцам_Проценты", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentProtsentPoterPoDavaltsamProtsenty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentProtsentPoterPoDavaltsamProtsenty(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ПроцентПотерьПоДавальцам_Проценты", args)
}

func (c *Client) CreateDocumentProtsentPoterPoDavaltsamProtsenty(data DocumentProtsentPoterPoDavaltsamProtsenty) (*DocumentProtsentPoterPoDavaltsamProtsenty, error) {
	raw, err := c.createEntity("Document_ПроцентПотерьПоДавальцам_Проценты", data)
	if err != nil {
		return nil, err
	}
	result := DocumentProtsentPoterPoDavaltsamProtsenty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentProtsentPoterPoDavaltsamProtsentys(where Where) ([]DocumentProtsentPoterPoDavaltsamProtsenty, error) {
	type ReturnObj struct {
		Value []DocumentProtsentPoterPoDavaltsamProtsenty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПроцентПотерьПоДавальцам_Проценты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogTovarnyePozitsii(Key Guid) (*CatalogTovarnyePozitsii, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ТоварныеПозиции", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogTovarnyePozitsii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogTovarnyePozitsii(Key Guid, entity interface{}) (*CatalogTovarnyePozitsii, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ТоварныеПозиции", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogTovarnyePozitsii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogTovarnyePozitsii(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ТоварныеПозиции", args)
}

func (c *Client) CreateCatalogTovarnyePozitsii(data CatalogTovarnyePozitsii) (*CatalogTovarnyePozitsii, error) {
	raw, err := c.createEntity("Catalog_ТоварныеПозиции", data)
	if err != nil {
		return nil, err
	}
	result := CatalogTovarnyePozitsii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogTovarnyePozitsiis(where Where) ([]CatalogTovarnyePozitsii, error) {
	type ReturnObj struct {
		Value []CatalogTovarnyePozitsii `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ТоварныеПозиции", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPlatezhnoePoruchenieIskhodiashchee(Key Guid) (*DocumentPlatezhnoePoruchenieIskhodiashchee, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ПлатежноеПоручениеИсходящее", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnoePoruchenieIskhodiashchee{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPlatezhnoePoruchenieIskhodiashchee(Key Guid, entity interface{}) (*DocumentPlatezhnoePoruchenieIskhodiashchee, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ПлатежноеПоручениеИсходящее", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnoePoruchenieIskhodiashchee{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPlatezhnoePoruchenieIskhodiashchee(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ПлатежноеПоручениеИсходящее", args)
}

func (c *Client) CreateDocumentPlatezhnoePoruchenieIskhodiashchee(data DocumentPlatezhnoePoruchenieIskhodiashchee) (*DocumentPlatezhnoePoruchenieIskhodiashchee, error) {
	raw, err := c.createEntity("Document_ПлатежноеПоручениеИсходящее", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnoePoruchenieIskhodiashchee{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPlatezhnoePoruchenieIskhodiashchees(where Where) ([]DocumentPlatezhnoePoruchenieIskhodiashchee, error) {
	type ReturnObj struct {
		Value []DocumentPlatezhnoePoruchenieIskhodiashchee `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПлатежноеПоручениеИсходящее", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezha(Key Guid, LineNumber Int) (*DocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezha, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ПлатежноеПоручениеИсходящее_РасшифровкаПлатежа", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezha(Key Guid, LineNumber Int, entity interface{}) (*DocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezha, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ПлатежноеПоручениеИсходящее_РасшифровкаПлатежа", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezha(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ПлатежноеПоручениеИсходящее_РасшифровкаПлатежа", args)
}

func (c *Client) CreateDocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezha(data DocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezha) (*DocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezha, error) {
	raw, err := c.createEntity("Document_ПлатежноеПоручениеИсходящее_РасшифровкаПлатежа", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezhas(where Where) ([]DocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezha, error) {
	type ReturnObj struct {
		Value []DocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezha `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПлатежноеПоручениеИсходящее_РасшифровкаПлатежа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragenta(Key Guid, LineNumber Int) (*DocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragenta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ПлатежноеПоручениеИсходящее_РеквизитыКонтрагента", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragenta(Key Guid, LineNumber Int, entity interface{}) (*DocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragenta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ПлатежноеПоручениеИсходящее_РеквизитыКонтрагента", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragenta(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ПлатежноеПоручениеИсходящее_РеквизитыКонтрагента", args)
}

func (c *Client) CreateDocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragenta(data DocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragenta) (*DocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragenta, error) {
	raw, err := c.createEntity("Document_ПлатежноеПоручениеИсходящее_РеквизитыКонтрагента", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragentas(where Where) ([]DocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragenta, error) {
	type ReturnObj struct {
		Value []DocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragenta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПлатежноеПоручениеИсходящее_РеквизитыКонтрагента", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogfmOrganizatsionnoPravovyeFormy(Key Guid) (*CatalogfmOrganizatsionnoPravovyeFormy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_фмОрганизационноПравовыеФормы", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogfmOrganizatsionnoPravovyeFormy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogfmOrganizatsionnoPravovyeFormy(Key Guid, entity interface{}) (*CatalogfmOrganizatsionnoPravovyeFormy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_фмОрганизационноПравовыеФормы", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogfmOrganizatsionnoPravovyeFormy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogfmOrganizatsionnoPravovyeFormy(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_фмОрганизационноПравовыеФормы", args)
}

func (c *Client) CreateCatalogfmOrganizatsionnoPravovyeFormy(data CatalogfmOrganizatsionnoPravovyeFormy) (*CatalogfmOrganizatsionnoPravovyeFormy, error) {
	raw, err := c.createEntity("Catalog_фмОрганизационноПравовыеФормы", data)
	if err != nil {
		return nil, err
	}
	result := CatalogfmOrganizatsionnoPravovyeFormy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogfmOrganizatsionnoPravovyeFormys(where Where) ([]CatalogfmOrganizatsionnoPravovyeFormy, error) {
	type ReturnObj struct {
		Value []CatalogfmOrganizatsionnoPravovyeFormy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_фмОрганизационноПравовыеФормы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogTipyTsenNomenklatury(Key Guid) (*CatalogTipyTsenNomenklatury, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ТипыЦенНоменклатуры", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogTipyTsenNomenklatury{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogTipyTsenNomenklatury(Key Guid, entity interface{}) (*CatalogTipyTsenNomenklatury, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ТипыЦенНоменклатуры", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogTipyTsenNomenklatury{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogTipyTsenNomenklatury(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ТипыЦенНоменклатуры", args)
}

func (c *Client) CreateCatalogTipyTsenNomenklatury(data CatalogTipyTsenNomenklatury) (*CatalogTipyTsenNomenklatury, error) {
	raw, err := c.createEntity("Catalog_ТипыЦенНоменклатуры", data)
	if err != nil {
		return nil, err
	}
	result := CatalogTipyTsenNomenklatury{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogTipyTsenNomenklaturys(where Where) ([]CatalogTipyTsenNomenklatury, error) {
	type ReturnObj struct {
		Value []CatalogTipyTsenNomenklatury `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ТипыЦенНоменклатуры", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogStatiOtchetaPoProdazham(Key Guid) (*CatalogStatiOtchetaPoProdazham, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_СтатьиОтчетаПоПродажам", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogStatiOtchetaPoProdazham{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogStatiOtchetaPoProdazham(Key Guid, entity interface{}) (*CatalogStatiOtchetaPoProdazham, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_СтатьиОтчетаПоПродажам", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogStatiOtchetaPoProdazham{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogStatiOtchetaPoProdazham(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_СтатьиОтчетаПоПродажам", args)
}

func (c *Client) CreateCatalogStatiOtchetaPoProdazham(data CatalogStatiOtchetaPoProdazham) (*CatalogStatiOtchetaPoProdazham, error) {
	raw, err := c.createEntity("Catalog_СтатьиОтчетаПоПродажам", data)
	if err != nil {
		return nil, err
	}
	result := CatalogStatiOtchetaPoProdazham{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogStatiOtchetaPoProdazhams(where Where) ([]CatalogStatiOtchetaPoProdazham, error) {
	type ReturnObj struct {
		Value []CatalogStatiOtchetaPoProdazham `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_СтатьиОтчетаПоПродажам", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogVidyKodirovokiIzdelii(Key Guid) (*CatalogVidyKodirovokiIzdelii, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ВидыКодировокиИзделий", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogVidyKodirovokiIzdelii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogVidyKodirovokiIzdelii(Key Guid, entity interface{}) (*CatalogVidyKodirovokiIzdelii, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ВидыКодировокиИзделий", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogVidyKodirovokiIzdelii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogVidyKodirovokiIzdelii(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ВидыКодировокиИзделий", args)
}

func (c *Client) CreateCatalogVidyKodirovokiIzdelii(data CatalogVidyKodirovokiIzdelii) (*CatalogVidyKodirovokiIzdelii, error) {
	raw, err := c.createEntity("Catalog_ВидыКодировокиИзделий", data)
	if err != nil {
		return nil, err
	}
	result := CatalogVidyKodirovokiIzdelii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogVidyKodirovokiIzdeliis(where Where) ([]CatalogVidyKodirovokiIzdelii, error) {
	type ReturnObj struct {
		Value []CatalogVidyKodirovokiIzdelii `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ВидыКодировокиИзделий", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogVidyKodirovokiIzdeliiElementyKodirovki(Key Guid, LineNumber Int) (*CatalogVidyKodirovokiIzdeliiElementyKodirovki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_ВидыКодировокиИзделий_ЭлементыКодировки", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogVidyKodirovokiIzdeliiElementyKodirovki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogVidyKodirovokiIzdeliiElementyKodirovki(Key Guid, LineNumber Int, entity interface{}) (*CatalogVidyKodirovokiIzdeliiElementyKodirovki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_ВидыКодировокиИзделий_ЭлементыКодировки", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogVidyKodirovokiIzdeliiElementyKodirovki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogVidyKodirovokiIzdeliiElementyKodirovki(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_ВидыКодировокиИзделий_ЭлементыКодировки", args)
}

func (c *Client) CreateCatalogVidyKodirovokiIzdeliiElementyKodirovki(data CatalogVidyKodirovokiIzdeliiElementyKodirovki) (*CatalogVidyKodirovokiIzdeliiElementyKodirovki, error) {
	raw, err := c.createEntity("Catalog_ВидыКодировокиИзделий_ЭлементыКодировки", data)
	if err != nil {
		return nil, err
	}
	result := CatalogVidyKodirovokiIzdeliiElementyKodirovki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogVidyKodirovokiIzdeliiElementyKodirovkis(where Where) ([]CatalogVidyKodirovokiIzdeliiElementyKodirovki, error) {
	type ReturnObj struct {
		Value []CatalogVidyKodirovokiIzdeliiElementyKodirovki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ВидыКодировокиИзделий_ЭлементыКодировки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentUstanovkaSkidokNomenklatury(Key Guid) (*DocumentUstanovkaSkidokNomenklatury, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_УстановкаСкидокНоменклатуры", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentUstanovkaSkidokNomenklatury{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentUstanovkaSkidokNomenklatury(Key Guid, entity interface{}) (*DocumentUstanovkaSkidokNomenklatury, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_УстановкаСкидокНоменклатуры", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentUstanovkaSkidokNomenklatury{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentUstanovkaSkidokNomenklatury(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_УстановкаСкидокНоменклатуры", args)
}

func (c *Client) CreateDocumentUstanovkaSkidokNomenklatury(data DocumentUstanovkaSkidokNomenklatury) (*DocumentUstanovkaSkidokNomenklatury, error) {
	raw, err := c.createEntity("Document_УстановкаСкидокНоменклатуры", data)
	if err != nil {
		return nil, err
	}
	result := DocumentUstanovkaSkidokNomenklatury{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentUstanovkaSkidokNomenklaturys(where Where) ([]DocumentUstanovkaSkidokNomenklatury, error) {
	type ReturnObj struct {
		Value []DocumentUstanovkaSkidokNomenklatury `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_УстановкаСкидокНоменклатуры", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedeli(Key Guid, LineNumber Int) (*DocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedeli, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_УстановкаСкидокНоменклатуры_ВремяПоДнямНедели", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedeli{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedeli(Key Guid, LineNumber Int, entity interface{}) (*DocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedeli, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_УстановкаСкидокНоменклатуры_ВремяПоДнямНедели", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedeli{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedeli(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_УстановкаСкидокНоменклатуры_ВремяПоДнямНедели", args)
}

func (c *Client) CreateDocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedeli(data DocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedeli) (*DocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedeli, error) {
	raw, err := c.createEntity("Document_УстановкаСкидокНоменклатуры_ВремяПоДнямНедели", data)
	if err != nil {
		return nil, err
	}
	result := DocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedeli{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedelis(where Where) ([]DocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedeli, error) {
	type ReturnObj struct {
		Value []DocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedeli `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_УстановкаСкидокНоменклатуры_ВремяПоДнямНедели", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentUstanovkaSkidokNomenklaturyDiskontnyeKarty(Key Guid, LineNumber Int) (*DocumentUstanovkaSkidokNomenklaturyDiskontnyeKarty, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_УстановкаСкидокНоменклатуры_ДисконтныеКарты", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentUstanovkaSkidokNomenklaturyDiskontnyeKarty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentUstanovkaSkidokNomenklaturyDiskontnyeKarty(Key Guid, LineNumber Int, entity interface{}) (*DocumentUstanovkaSkidokNomenklaturyDiskontnyeKarty, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_УстановкаСкидокНоменклатуры_ДисконтныеКарты", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentUstanovkaSkidokNomenklaturyDiskontnyeKarty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentUstanovkaSkidokNomenklaturyDiskontnyeKarty(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_УстановкаСкидокНоменклатуры_ДисконтныеКарты", args)
}

func (c *Client) CreateDocumentUstanovkaSkidokNomenklaturyDiskontnyeKarty(data DocumentUstanovkaSkidokNomenklaturyDiskontnyeKarty) (*DocumentUstanovkaSkidokNomenklaturyDiskontnyeKarty, error) {
	raw, err := c.createEntity("Document_УстановкаСкидокНоменклатуры_ДисконтныеКарты", data)
	if err != nil {
		return nil, err
	}
	result := DocumentUstanovkaSkidokNomenklaturyDiskontnyeKarty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentUstanovkaSkidokNomenklaturyDiskontnyeKartys(where Where) ([]DocumentUstanovkaSkidokNomenklaturyDiskontnyeKarty, error) {
	type ReturnObj struct {
		Value []DocumentUstanovkaSkidokNomenklaturyDiskontnyeKarty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_УстановкаСкидокНоменклатуры_ДисконтныеКарты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentUstanovkaSkidokNomenklaturyPoluchateliSkidki(Key Guid, LineNumber Int) (*DocumentUstanovkaSkidokNomenklaturyPoluchateliSkidki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_УстановкаСкидокНоменклатуры_ПолучателиСкидки", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentUstanovkaSkidokNomenklaturyPoluchateliSkidki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentUstanovkaSkidokNomenklaturyPoluchateliSkidki(Key Guid, LineNumber Int, entity interface{}) (*DocumentUstanovkaSkidokNomenklaturyPoluchateliSkidki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_УстановкаСкидокНоменклатуры_ПолучателиСкидки", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentUstanovkaSkidokNomenklaturyPoluchateliSkidki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentUstanovkaSkidokNomenklaturyPoluchateliSkidki(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_УстановкаСкидокНоменклатуры_ПолучателиСкидки", args)
}

func (c *Client) CreateDocumentUstanovkaSkidokNomenklaturyPoluchateliSkidki(data DocumentUstanovkaSkidokNomenklaturyPoluchateliSkidki) (*DocumentUstanovkaSkidokNomenklaturyPoluchateliSkidki, error) {
	raw, err := c.createEntity("Document_УстановкаСкидокНоменклатуры_ПолучателиСкидки", data)
	if err != nil {
		return nil, err
	}
	result := DocumentUstanovkaSkidokNomenklaturyPoluchateliSkidki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentUstanovkaSkidokNomenklaturyPoluchateliSkidkis(where Where) ([]DocumentUstanovkaSkidokNomenklaturyPoluchateliSkidki, error) {
	type ReturnObj struct {
		Value []DocumentUstanovkaSkidokNomenklaturyPoluchateliSkidki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_УстановкаСкидокНоменклатуры_ПолучателиСкидки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentUstanovkaSkidokNomenklaturyTovary(Key Guid, LineNumber Int) (*DocumentUstanovkaSkidokNomenklaturyTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_УстановкаСкидокНоменклатуры_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentUstanovkaSkidokNomenklaturyTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentUstanovkaSkidokNomenklaturyTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentUstanovkaSkidokNomenklaturyTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_УстановкаСкидокНоменклатуры_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentUstanovkaSkidokNomenklaturyTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentUstanovkaSkidokNomenklaturyTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_УстановкаСкидокНоменклатуры_Товары", args)
}

func (c *Client) CreateDocumentUstanovkaSkidokNomenklaturyTovary(data DocumentUstanovkaSkidokNomenklaturyTovary) (*DocumentUstanovkaSkidokNomenklaturyTovary, error) {
	raw, err := c.createEntity("Document_УстановкаСкидокНоменклатуры_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentUstanovkaSkidokNomenklaturyTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentUstanovkaSkidokNomenklaturyTovarys(where Where) ([]DocumentUstanovkaSkidokNomenklaturyTovary, error) {
	type ReturnObj struct {
		Value []DocumentUstanovkaSkidokNomenklaturyTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_УстановкаСкидокНоменклатуры_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogUsloviiaPredostavleniiaSkidokNatsenok(Key Guid) (*CatalogUsloviiaPredostavleniiaSkidokNatsenok, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_УсловияПредоставленияСкидокНаценок", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogUsloviiaPredostavleniiaSkidokNatsenok{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogUsloviiaPredostavleniiaSkidokNatsenok(Key Guid, entity interface{}) (*CatalogUsloviiaPredostavleniiaSkidokNatsenok, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_УсловияПредоставленияСкидокНаценок", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogUsloviiaPredostavleniiaSkidokNatsenok{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogUsloviiaPredostavleniiaSkidokNatsenok(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_УсловияПредоставленияСкидокНаценок", args)
}

func (c *Client) CreateCatalogUsloviiaPredostavleniiaSkidokNatsenok(data CatalogUsloviiaPredostavleniiaSkidokNatsenok) (*CatalogUsloviiaPredostavleniiaSkidokNatsenok, error) {
	raw, err := c.createEntity("Catalog_УсловияПредоставленияСкидокНаценок", data)
	if err != nil {
		return nil, err
	}
	result := CatalogUsloviiaPredostavleniiaSkidokNatsenok{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogUsloviiaPredostavleniiaSkidokNatsenoks(where Where) ([]CatalogUsloviiaPredostavleniiaSkidokNatsenok, error) {
	type ReturnObj struct {
		Value []CatalogUsloviiaPredostavleniiaSkidokNatsenok `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_УсловияПредоставленияСкидокНаценок", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviia(Key Guid, LineNumber Int) (*CatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_УсловияПредоставленияСкидокНаценок_ВремяДействия", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviia(Key Guid, LineNumber Int, entity interface{}) (*CatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_УсловияПредоставленияСкидокНаценок_ВремяДействия", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviia(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_УсловияПредоставленияСкидокНаценок_ВремяДействия", args)
}

func (c *Client) CreateCatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviia(data CatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviia) (*CatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviia, error) {
	raw, err := c.createEntity("Catalog_УсловияПредоставленияСкидокНаценок_ВремяДействия", data)
	if err != nil {
		return nil, err
	}
	result := CatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviias(where Where) ([]CatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviia, error) {
	type ReturnObj struct {
		Value []CatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_УсловияПредоставленияСкидокНаценок_ВремяДействия", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchateli(Key Guid, LineNumber Int) (*CatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchateli, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_УсловияПредоставленияСкидокНаценок_Получатели", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchateli{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchateli(Key Guid, LineNumber Int, entity interface{}) (*CatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchateli, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_УсловияПредоставленияСкидокНаценок_Получатели", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchateli{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchateli(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_УсловияПредоставленияСкидокНаценок_Получатели", args)
}

func (c *Client) CreateCatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchateli(data CatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchateli) (*CatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchateli, error) {
	raw, err := c.createEntity("Catalog_УсловияПредоставленияСкидокНаценок_Получатели", data)
	if err != nil {
		return nil, err
	}
	result := CatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchateli{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchatelis(where Where) ([]CatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchateli, error) {
	type ReturnObj struct {
		Value []CatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchateli `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_УсловияПредоставленияСкидокНаценок_Получатели", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupki(Key Guid, LineNumber Int) (*CatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_УсловияПредоставленияСкидокНаценок_КомплектПокупки", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupki(Key Guid, LineNumber Int, entity interface{}) (*CatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_УсловияПредоставленияСкидокНаценок_КомплектПокупки", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupki(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_УсловияПредоставленияСкидокНаценок_КомплектПокупки", args)
}

func (c *Client) CreateCatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupki(data CatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupki) (*CatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupki, error) {
	raw, err := c.createEntity("Catalog_УсловияПредоставленияСкидокНаценок_КомплектПокупки", data)
	if err != nil {
		return nil, err
	}
	result := CatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupkis(where Where) ([]CatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupki, error) {
	type ReturnObj struct {
		Value []CatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_УсловияПредоставленияСкидокНаценок_КомплектПокупки", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) OutPay(Key Guid) (*OutPay, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_РасходныйКассовыйОрдер", args, []string{})
	if err != nil {
		return nil, err
	}
	result := OutPay{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateOutPay(Key Guid, entity interface{}) (*OutPay, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_РасходныйКассовыйОрдер", args, entity)
	if err != nil {
		return nil, err
	}
	result := OutPay{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveOutPay(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_РасходныйКассовыйОрдер", args)
}

func (c *Client) CreateOutPay(data OutPay) (*OutPay, error) {
	raw, err := c.createEntity("Document_РасходныйКассовыйОрдер", data)
	if err != nil {
		return nil, err
	}
	result := OutPay{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) OutPays(where Where) ([]OutPay, error) {
	type ReturnObj struct {
		Value []OutPay `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_РасходныйКассовыйОрдер", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezha(Key Guid, LineNumber Int) (*DocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezha, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_РасходныйКассовыйОрдер_РасшифровкаПлатежа", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezha(Key Guid, LineNumber Int, entity interface{}) (*DocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezha, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_РасходныйКассовыйОрдер_РасшифровкаПлатежа", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezha(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_РасходныйКассовыйОрдер_РасшифровкаПлатежа", args)
}

func (c *Client) CreateDocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezha(data DocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezha) (*DocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezha, error) {
	raw, err := c.createEntity("Document_РасходныйКассовыйОрдер_РасшифровкаПлатежа", data)
	if err != nil {
		return nil, err
	}
	result := DocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezha{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezhas(where Where) ([]DocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezha, error) {
	type ReturnObj struct {
		Value []DocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezha `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_РасходныйКассовыйОрдер_РасшифровкаПлатежа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentRaskhodnyiKassovyiOrderOplata(Key Guid, LineNumber Int) (*DocumentRaskhodnyiKassovyiOrderOplata, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_РасходныйКассовыйОрдер_Оплата", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentRaskhodnyiKassovyiOrderOplata{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentRaskhodnyiKassovyiOrderOplata(Key Guid, LineNumber Int, entity interface{}) (*DocumentRaskhodnyiKassovyiOrderOplata, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_РасходныйКассовыйОрдер_Оплата", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentRaskhodnyiKassovyiOrderOplata{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentRaskhodnyiKassovyiOrderOplata(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_РасходныйКассовыйОрдер_Оплата", args)
}

func (c *Client) CreateDocumentRaskhodnyiKassovyiOrderOplata(data DocumentRaskhodnyiKassovyiOrderOplata) (*DocumentRaskhodnyiKassovyiOrderOplata, error) {
	raw, err := c.createEntity("Document_РасходныйКассовыйОрдер_Оплата", data)
	if err != nil {
		return nil, err
	}
	result := DocumentRaskhodnyiKassovyiOrderOplata{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentRaskhodnyiKassovyiOrderOplatas(where Where) ([]DocumentRaskhodnyiKassovyiOrderOplata, error) {
	type ReturnObj struct {
		Value []DocumentRaskhodnyiKassovyiOrderOplata `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_РасходныйКассовыйОрдер_Оплата", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentRaskhodnyiKassovyiOrderTovary(Key Guid, LineNumber Int) (*DocumentRaskhodnyiKassovyiOrderTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_РасходныйКассовыйОрдер_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentRaskhodnyiKassovyiOrderTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentRaskhodnyiKassovyiOrderTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentRaskhodnyiKassovyiOrderTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_РасходныйКассовыйОрдер_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentRaskhodnyiKassovyiOrderTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentRaskhodnyiKassovyiOrderTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_РасходныйКассовыйОрдер_Товары", args)
}

func (c *Client) CreateDocumentRaskhodnyiKassovyiOrderTovary(data DocumentRaskhodnyiKassovyiOrderTovary) (*DocumentRaskhodnyiKassovyiOrderTovary, error) {
	raw, err := c.createEntity("Document_РасходныйКассовыйОрдер_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentRaskhodnyiKassovyiOrderTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentRaskhodnyiKassovyiOrderTovarys(where Where) ([]DocumentRaskhodnyiKassovyiOrderTovary, error) {
	type ReturnObj struct {
		Value []DocumentRaskhodnyiKassovyiOrderTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_РасходныйКассовыйОрдер_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentSchetNaOplatuPostavshchika(Key Guid) (*DocumentSchetNaOplatuPostavshchika, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_СчетНаОплатуПоставщика", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentSchetNaOplatuPostavshchika{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentSchetNaOplatuPostavshchika(Key Guid, entity interface{}) (*DocumentSchetNaOplatuPostavshchika, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_СчетНаОплатуПоставщика", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentSchetNaOplatuPostavshchika{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentSchetNaOplatuPostavshchika(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_СчетНаОплатуПоставщика", args)
}

func (c *Client) CreateDocumentSchetNaOplatuPostavshchika(data DocumentSchetNaOplatuPostavshchika) (*DocumentSchetNaOplatuPostavshchika, error) {
	raw, err := c.createEntity("Document_СчетНаОплатуПоставщика", data)
	if err != nil {
		return nil, err
	}
	result := DocumentSchetNaOplatuPostavshchika{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentSchetNaOplatuPostavshchikas(where Where) ([]DocumentSchetNaOplatuPostavshchika, error) {
	type ReturnObj struct {
		Value []DocumentSchetNaOplatuPostavshchika `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СчетНаОплатуПоставщика", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentSchetNaOplatuPostavshchikaTovary(Key Guid, LineNumber Int) (*DocumentSchetNaOplatuPostavshchikaTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_СчетНаОплатуПоставщика_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentSchetNaOplatuPostavshchikaTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentSchetNaOplatuPostavshchikaTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentSchetNaOplatuPostavshchikaTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_СчетНаОплатуПоставщика_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentSchetNaOplatuPostavshchikaTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentSchetNaOplatuPostavshchikaTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_СчетНаОплатуПоставщика_Товары", args)
}

func (c *Client) CreateDocumentSchetNaOplatuPostavshchikaTovary(data DocumentSchetNaOplatuPostavshchikaTovary) (*DocumentSchetNaOplatuPostavshchikaTovary, error) {
	raw, err := c.createEntity("Document_СчетНаОплатуПоставщика_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentSchetNaOplatuPostavshchikaTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentSchetNaOplatuPostavshchikaTovarys(where Where) ([]DocumentSchetNaOplatuPostavshchikaTovary, error) {
	type ReturnObj struct {
		Value []DocumentSchetNaOplatuPostavshchikaTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СчетНаОплатуПоставщика_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentSchetNaOplatuPostavshchikaUslugi(Key Guid, LineNumber Int) (*DocumentSchetNaOplatuPostavshchikaUslugi, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_СчетНаОплатуПоставщика_Услуги", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentSchetNaOplatuPostavshchikaUslugi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentSchetNaOplatuPostavshchikaUslugi(Key Guid, LineNumber Int, entity interface{}) (*DocumentSchetNaOplatuPostavshchikaUslugi, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_СчетНаОплатуПоставщика_Услуги", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentSchetNaOplatuPostavshchikaUslugi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentSchetNaOplatuPostavshchikaUslugi(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_СчетНаОплатуПоставщика_Услуги", args)
}

func (c *Client) CreateDocumentSchetNaOplatuPostavshchikaUslugi(data DocumentSchetNaOplatuPostavshchikaUslugi) (*DocumentSchetNaOplatuPostavshchikaUslugi, error) {
	raw, err := c.createEntity("Document_СчетНаОплатуПоставщика_Услуги", data)
	if err != nil {
		return nil, err
	}
	result := DocumentSchetNaOplatuPostavshchikaUslugi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentSchetNaOplatuPostavshchikaUslugis(where Where) ([]DocumentSchetNaOplatuPostavshchikaUslugi, error) {
	type ReturnObj struct {
		Value []DocumentSchetNaOplatuPostavshchikaUslugi `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СчетНаОплатуПоставщика_Услуги", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentReestrSpetssviaz(Key Guid) (*DocumentReestrSpetssviaz, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_РеестрСпецсвязь", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentReestrSpetssviaz{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentReestrSpetssviaz(Key Guid, entity interface{}) (*DocumentReestrSpetssviaz, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_РеестрСпецсвязь", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentReestrSpetssviaz{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentReestrSpetssviaz(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_РеестрСпецсвязь", args)
}

func (c *Client) CreateDocumentReestrSpetssviaz(data DocumentReestrSpetssviaz) (*DocumentReestrSpetssviaz, error) {
	raw, err := c.createEntity("Document_РеестрСпецсвязь", data)
	if err != nil {
		return nil, err
	}
	result := DocumentReestrSpetssviaz{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentReestrSpetssviazs(where Where) ([]DocumentReestrSpetssviaz, error) {
	type ReturnObj struct {
		Value []DocumentReestrSpetssviaz `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_РеестрСпецсвязь", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentReestrSpetssviazKlienty(Key Guid, LineNumber Int) (*DocumentReestrSpetssviazKlienty, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_РеестрСпецсвязь_Клиенты", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentReestrSpetssviazKlienty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentReestrSpetssviazKlienty(Key Guid, LineNumber Int, entity interface{}) (*DocumentReestrSpetssviazKlienty, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_РеестрСпецсвязь_Клиенты", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentReestrSpetssviazKlienty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentReestrSpetssviazKlienty(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_РеестрСпецсвязь_Клиенты", args)
}

func (c *Client) CreateDocumentReestrSpetssviazKlienty(data DocumentReestrSpetssviazKlienty) (*DocumentReestrSpetssviazKlienty, error) {
	raw, err := c.createEntity("Document_РеестрСпецсвязь_Клиенты", data)
	if err != nil {
		return nil, err
	}
	result := DocumentReestrSpetssviazKlienty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentReestrSpetssviazKlientys(where Where) ([]DocumentReestrSpetssviazKlienty, error) {
	type ReturnObj struct {
		Value []DocumentReestrSpetssviazKlienty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_РеестрСпецсвязь_Клиенты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentJournalKassovyeDokumenty(Ref String, RefType String) (*DocumentJournalKassovyeDokumenty, error) {
	args := []string{fmt.Sprintf("Ref='%s' ", url.PathEscape(string(Ref))), fmt.Sprintf("Ref_Type='%s' ", url.PathEscape(string(RefType)))}
	raw, err := c.getEntity("DocumentJournal_КассовыеДокументы", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentJournalKassovyeDokumenty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentJournalKassovyeDokumenty(Ref String, RefType String, entity interface{}) (*DocumentJournalKassovyeDokumenty, error) {
	args := []string{fmt.Sprintf("Ref='%s' ", url.PathEscape(string(Ref))), fmt.Sprintf("Ref_Type='%s' ", url.PathEscape(string(RefType)))}
	raw, err := c.updateEntity("DocumentJournal_КассовыеДокументы", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentJournalKassovyeDokumenty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentJournalKassovyeDokumenty(Ref String, RefType String) error {
	args := []string{fmt.Sprintf("Ref='%s' ", url.PathEscape(string(Ref))), fmt.Sprintf("Ref_Type='%s' ", url.PathEscape(string(RefType)))}
	return c.removeEntity("DocumentJournal_КассовыеДокументы", args)
}

func (c *Client) CreateDocumentJournalKassovyeDokumenty(data DocumentJournalKassovyeDokumenty) (*DocumentJournalKassovyeDokumenty, error) {
	raw, err := c.createEntity("DocumentJournal_КассовыеДокументы", data)
	if err != nil {
		return nil, err
	}
	result := DocumentJournalKassovyeDokumenty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentJournalKassovyeDokumentys(where Where) ([]DocumentJournalKassovyeDokumenty, error) {
	type ReturnObj struct {
		Value []DocumentJournalKassovyeDokumenty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("DocumentJournal_КассовыеДокументы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) InitialInstance(Key Guid) (*InitialInstance, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ВводНачальныхОстатков", args, []string{})
	if err != nil {
		return nil, err
	}
	result := InitialInstance{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateInitialInstance(Key Guid, entity interface{}) (*InitialInstance, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ВводНачальныхОстатков", args, entity)
	if err != nil {
		return nil, err
	}
	result := InitialInstance{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveInitialInstance(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ВводНачальныхОстатков", args)
}

func (c *Client) CreateInitialInstance(data InitialInstance) (*InitialInstance, error) {
	raw, err := c.createEntity("Document_ВводНачальныхОстатков", data)
	if err != nil {
		return nil, err
	}
	result := InitialInstance{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) InitialInstances(where Where) ([]InitialInstance, error) {
	type ReturnObj struct {
		Value []InitialInstance `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВводНачальныхОстатков", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentVvodNachalnykhOstatkovVzaimoraschety(Key Guid, LineNumber Int) (*DocumentVvodNachalnykhOstatkovVzaimoraschety, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ВводНачальныхОстатков_Взаиморасчеты", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentVvodNachalnykhOstatkovVzaimoraschety{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentVvodNachalnykhOstatkovVzaimoraschety(Key Guid, LineNumber Int, entity interface{}) (*DocumentVvodNachalnykhOstatkovVzaimoraschety, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ВводНачальныхОстатков_Взаиморасчеты", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentVvodNachalnykhOstatkovVzaimoraschety{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentVvodNachalnykhOstatkovVzaimoraschety(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ВводНачальныхОстатков_Взаиморасчеты", args)
}

func (c *Client) CreateDocumentVvodNachalnykhOstatkovVzaimoraschety(data DocumentVvodNachalnykhOstatkovVzaimoraschety) (*DocumentVvodNachalnykhOstatkovVzaimoraschety, error) {
	raw, err := c.createEntity("Document_ВводНачальныхОстатков_Взаиморасчеты", data)
	if err != nil {
		return nil, err
	}
	result := DocumentVvodNachalnykhOstatkovVzaimoraschety{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentVvodNachalnykhOstatkovVzaimoraschetys(where Where) ([]DocumentVvodNachalnykhOstatkovVzaimoraschety, error) {
	type ReturnObj struct {
		Value []DocumentVvodNachalnykhOstatkovVzaimoraschety `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВводНачальныхОстатков_Взаиморасчеты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentVvodNachalnykhOstatkovTovary(Key Guid, LineNumber Int) (*DocumentVvodNachalnykhOstatkovTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ВводНачальныхОстатков_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentVvodNachalnykhOstatkovTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentVvodNachalnykhOstatkovTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentVvodNachalnykhOstatkovTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ВводНачальныхОстатков_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentVvodNachalnykhOstatkovTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentVvodNachalnykhOstatkovTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ВводНачальныхОстатков_Товары", args)
}

func (c *Client) CreateDocumentVvodNachalnykhOstatkovTovary(data DocumentVvodNachalnykhOstatkovTovary) (*DocumentVvodNachalnykhOstatkovTovary, error) {
	raw, err := c.createEntity("Document_ВводНачальныхОстатков_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentVvodNachalnykhOstatkovTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentVvodNachalnykhOstatkovTovarys(where Where) ([]DocumentVvodNachalnykhOstatkovTovary, error) {
	type ReturnObj struct {
		Value []DocumentVvodNachalnykhOstatkovTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВводНачальныхОстатков_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) Posting(Key Guid) (*Posting, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ОприходованиеТоваров", args, []string{})
	if err != nil {
		return nil, err
	}
	result := Posting{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdatePosting(Key Guid, entity interface{}) (*Posting, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ОприходованиеТоваров", args, entity)
	if err != nil {
		return nil, err
	}
	result := Posting{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemovePosting(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ОприходованиеТоваров", args)
}

func (c *Client) CreatePosting(data Posting) (*Posting, error) {
	raw, err := c.createEntity("Document_ОприходованиеТоваров", data)
	if err != nil {
		return nil, err
	}
	result := Posting{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) Postings(where Where) ([]Posting, error) {
	type ReturnObj struct {
		Value []Posting `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОприходованиеТоваров", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentOprikhodovanieTovarovTovary(Key Guid, LineNumber Int) (*DocumentOprikhodovanieTovarovTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ОприходованиеТоваров_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentOprikhodovanieTovarovTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentOprikhodovanieTovarovTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentOprikhodovanieTovarovTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ОприходованиеТоваров_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentOprikhodovanieTovarovTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentOprikhodovanieTovarovTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ОприходованиеТоваров_Товары", args)
}

func (c *Client) CreateDocumentOprikhodovanieTovarovTovary(data DocumentOprikhodovanieTovarovTovary) (*DocumentOprikhodovanieTovarovTovary, error) {
	raw, err := c.createEntity("Document_ОприходованиеТоваров_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentOprikhodovanieTovarovTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentOprikhodovanieTovarovTovarys(where Where) ([]DocumentOprikhodovanieTovarovTovary, error) {
	type ReturnObj struct {
		Value []DocumentOprikhodovanieTovarovTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОприходованиеТоваров_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentOprikhodovanieTovarovSertifikaty(Key Guid, LineNumber Int) (*DocumentOprikhodovanieTovarovSertifikaty, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ОприходованиеТоваров_Сертификаты", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentOprikhodovanieTovarovSertifikaty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentOprikhodovanieTovarovSertifikaty(Key Guid, LineNumber Int, entity interface{}) (*DocumentOprikhodovanieTovarovSertifikaty, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ОприходованиеТоваров_Сертификаты", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentOprikhodovanieTovarovSertifikaty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentOprikhodovanieTovarovSertifikaty(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ОприходованиеТоваров_Сертификаты", args)
}

func (c *Client) CreateDocumentOprikhodovanieTovarovSertifikaty(data DocumentOprikhodovanieTovarovSertifikaty) (*DocumentOprikhodovanieTovarovSertifikaty, error) {
	raw, err := c.createEntity("Document_ОприходованиеТоваров_Сертификаты", data)
	if err != nil {
		return nil, err
	}
	result := DocumentOprikhodovanieTovarovSertifikaty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentOprikhodovanieTovarovSertifikatys(where Where) ([]DocumentOprikhodovanieTovarovSertifikaty, error) {
	type ReturnObj struct {
		Value []DocumentOprikhodovanieTovarovSertifikaty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОприходованиеТоваров_Сертификаты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogKomplekty(Key Guid) (*CatalogKomplekty, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_Комплекты", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogKomplekty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogKomplekty(Key Guid, entity interface{}) (*CatalogKomplekty, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_Комплекты", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogKomplekty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogKomplekty(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_Комплекты", args)
}

func (c *Client) CreateCatalogKomplekty(data CatalogKomplekty) (*CatalogKomplekty, error) {
	raw, err := c.createEntity("Catalog_Комплекты", data)
	if err != nil {
		return nil, err
	}
	result := CatalogKomplekty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogKomplektys(where Where) ([]CatalogKomplekty, error) {
	type ReturnObj struct {
		Value []CatalogKomplekty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Комплекты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPereotsenkaTovarovPriniatykhNaKomissiiu(Key Guid) (*DocumentPereotsenkaTovarovPriniatykhNaKomissiiu, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ПереоценкаТоваровПринятыхНаКомиссию", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPereotsenkaTovarovPriniatykhNaKomissiiu{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPereotsenkaTovarovPriniatykhNaKomissiiu(Key Guid, entity interface{}) (*DocumentPereotsenkaTovarovPriniatykhNaKomissiiu, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ПереоценкаТоваровПринятыхНаКомиссию", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPereotsenkaTovarovPriniatykhNaKomissiiu{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPereotsenkaTovarovPriniatykhNaKomissiiu(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ПереоценкаТоваровПринятыхНаКомиссию", args)
}

func (c *Client) CreateDocumentPereotsenkaTovarovPriniatykhNaKomissiiu(data DocumentPereotsenkaTovarovPriniatykhNaKomissiiu) (*DocumentPereotsenkaTovarovPriniatykhNaKomissiiu, error) {
	raw, err := c.createEntity("Document_ПереоценкаТоваровПринятыхНаКомиссию", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPereotsenkaTovarovPriniatykhNaKomissiiu{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPereotsenkaTovarovPriniatykhNaKomissiius(where Where) ([]DocumentPereotsenkaTovarovPriniatykhNaKomissiiu, error) {
	type ReturnObj struct {
		Value []DocumentPereotsenkaTovarovPriniatykhNaKomissiiu `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПереоценкаТоваровПринятыхНаКомиссию", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovary(Key Guid, LineNumber Int) (*DocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ПереоценкаТоваровПринятыхНаКомиссию_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ПереоценкаТоваровПринятыхНаКомиссию_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ПереоценкаТоваровПринятыхНаКомиссию_Товары", args)
}

func (c *Client) CreateDocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovary(data DocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovary) (*DocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovary, error) {
	raw, err := c.createEntity("Document_ПереоценкаТоваровПринятыхНаКомиссию_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovarys(where Where) ([]DocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovary, error) {
	type ReturnObj struct {
		Value []DocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПереоценкаТоваровПринятыхНаКомиссию_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentElektronnoePismo(Key Guid) (*DocumentElektronnoePismo, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ЭлектронноеПисьмо", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentElektronnoePismo{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentElektronnoePismo(Key Guid, entity interface{}) (*DocumentElektronnoePismo, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ЭлектронноеПисьмо", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentElektronnoePismo{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentElektronnoePismo(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ЭлектронноеПисьмо", args)
}

func (c *Client) CreateDocumentElektronnoePismo(data DocumentElektronnoePismo) (*DocumentElektronnoePismo, error) {
	raw, err := c.createEntity("Document_ЭлектронноеПисьмо", data)
	if err != nil {
		return nil, err
	}
	result := DocumentElektronnoePismo{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentElektronnoePismos(where Where) ([]DocumentElektronnoePismo, error) {
	type ReturnObj struct {
		Value []DocumentElektronnoePismo `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЭлектронноеПисьмо", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentElektronnoePismoKomuTCh(Key Guid, LineNumber Int) (*DocumentElektronnoePismoKomuTCh, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ЭлектронноеПисьмо_КомуТЧ", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentElektronnoePismoKomuTCh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentElektronnoePismoKomuTCh(Key Guid, LineNumber Int, entity interface{}) (*DocumentElektronnoePismoKomuTCh, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ЭлектронноеПисьмо_КомуТЧ", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentElektronnoePismoKomuTCh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentElektronnoePismoKomuTCh(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ЭлектронноеПисьмо_КомуТЧ", args)
}

func (c *Client) CreateDocumentElektronnoePismoKomuTCh(data DocumentElektronnoePismoKomuTCh) (*DocumentElektronnoePismoKomuTCh, error) {
	raw, err := c.createEntity("Document_ЭлектронноеПисьмо_КомуТЧ", data)
	if err != nil {
		return nil, err
	}
	result := DocumentElektronnoePismoKomuTCh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentElektronnoePismoKomuTChs(where Where) ([]DocumentElektronnoePismoKomuTCh, error) {
	type ReturnObj struct {
		Value []DocumentElektronnoePismoKomuTCh `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЭлектронноеПисьмо_КомуТЧ", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentElektronnoePismoKopiiTCh(Key Guid, LineNumber Int) (*DocumentElektronnoePismoKopiiTCh, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ЭлектронноеПисьмо_КопииТЧ", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentElektronnoePismoKopiiTCh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentElektronnoePismoKopiiTCh(Key Guid, LineNumber Int, entity interface{}) (*DocumentElektronnoePismoKopiiTCh, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ЭлектронноеПисьмо_КопииТЧ", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentElektronnoePismoKopiiTCh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentElektronnoePismoKopiiTCh(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ЭлектронноеПисьмо_КопииТЧ", args)
}

func (c *Client) CreateDocumentElektronnoePismoKopiiTCh(data DocumentElektronnoePismoKopiiTCh) (*DocumentElektronnoePismoKopiiTCh, error) {
	raw, err := c.createEntity("Document_ЭлектронноеПисьмо_КопииТЧ", data)
	if err != nil {
		return nil, err
	}
	result := DocumentElektronnoePismoKopiiTCh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentElektronnoePismoKopiiTChs(where Where) ([]DocumentElektronnoePismoKopiiTCh, error) {
	type ReturnObj struct {
		Value []DocumentElektronnoePismoKopiiTCh `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЭлектронноеПисьмо_КопииТЧ", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentElektronnoePismoSkrytyeKopiiTCh(Key Guid, LineNumber Int) (*DocumentElektronnoePismoSkrytyeKopiiTCh, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ЭлектронноеПисьмо_СкрытыеКопииТЧ", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentElektronnoePismoSkrytyeKopiiTCh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentElektronnoePismoSkrytyeKopiiTCh(Key Guid, LineNumber Int, entity interface{}) (*DocumentElektronnoePismoSkrytyeKopiiTCh, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ЭлектронноеПисьмо_СкрытыеКопииТЧ", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentElektronnoePismoSkrytyeKopiiTCh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentElektronnoePismoSkrytyeKopiiTCh(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ЭлектронноеПисьмо_СкрытыеКопииТЧ", args)
}

func (c *Client) CreateDocumentElektronnoePismoSkrytyeKopiiTCh(data DocumentElektronnoePismoSkrytyeKopiiTCh) (*DocumentElektronnoePismoSkrytyeKopiiTCh, error) {
	raw, err := c.createEntity("Document_ЭлектронноеПисьмо_СкрытыеКопииТЧ", data)
	if err != nil {
		return nil, err
	}
	result := DocumentElektronnoePismoSkrytyeKopiiTCh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentElektronnoePismoSkrytyeKopiiTChs(where Where) ([]DocumentElektronnoePismoSkrytyeKopiiTCh, error) {
	type ReturnObj struct {
		Value []DocumentElektronnoePismoSkrytyeKopiiTCh `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЭлектронноеПисьмо_СкрытыеКопииТЧ", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogGruppyDefektov(Key Guid) (*CatalogGruppyDefektov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ГруппыДефектов", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogGruppyDefektov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogGruppyDefektov(Key Guid, entity interface{}) (*CatalogGruppyDefektov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ГруппыДефектов", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogGruppyDefektov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogGruppyDefektov(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ГруппыДефектов", args)
}

func (c *Client) CreateCatalogGruppyDefektov(data CatalogGruppyDefektov) (*CatalogGruppyDefektov, error) {
	raw, err := c.createEntity("Catalog_ГруппыДефектов", data)
	if err != nil {
		return nil, err
	}
	result := CatalogGruppyDefektov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogGruppyDefektovs(where Where) ([]CatalogGruppyDefektov, error) {
	type ReturnObj struct {
		Value []CatalogGruppyDefektov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ГруппыДефектов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogfmAnketaKlientaBenefitsariia(Key Guid) (*CatalogfmAnketaKlientaBenefitsariia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_фмАнкетаКлиентаБенефицария", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogfmAnketaKlientaBenefitsariia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogfmAnketaKlientaBenefitsariia(Key Guid, entity interface{}) (*CatalogfmAnketaKlientaBenefitsariia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_фмАнкетаКлиентаБенефицария", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogfmAnketaKlientaBenefitsariia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogfmAnketaKlientaBenefitsariia(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_фмАнкетаКлиентаБенефицария", args)
}

func (c *Client) CreateCatalogfmAnketaKlientaBenefitsariia(data CatalogfmAnketaKlientaBenefitsariia) (*CatalogfmAnketaKlientaBenefitsariia, error) {
	raw, err := c.createEntity("Catalog_фмАнкетаКлиентаБенефицария", data)
	if err != nil {
		return nil, err
	}
	result := CatalogfmAnketaKlientaBenefitsariia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogfmAnketaKlientaBenefitsariias(where Where) ([]CatalogfmAnketaKlientaBenefitsariia, error) {
	type ReturnObj struct {
		Value []CatalogfmAnketaKlientaBenefitsariia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_фмАнкетаКлиентаБенефицария", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogfmAnketaKlientaBenefitsariiaDannyeKontragenta(Key Guid, LineNumber Int) (*CatalogfmAnketaKlientaBenefitsariiaDannyeKontragenta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_фмАнкетаКлиентаБенефицария_ДанныеКонтрагента", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogfmAnketaKlientaBenefitsariiaDannyeKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogfmAnketaKlientaBenefitsariiaDannyeKontragenta(Key Guid, LineNumber Int, entity interface{}) (*CatalogfmAnketaKlientaBenefitsariiaDannyeKontragenta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_фмАнкетаКлиентаБенефицария_ДанныеКонтрагента", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogfmAnketaKlientaBenefitsariiaDannyeKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogfmAnketaKlientaBenefitsariiaDannyeKontragenta(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_фмАнкетаКлиентаБенефицария_ДанныеКонтрагента", args)
}

func (c *Client) CreateCatalogfmAnketaKlientaBenefitsariiaDannyeKontragenta(data CatalogfmAnketaKlientaBenefitsariiaDannyeKontragenta) (*CatalogfmAnketaKlientaBenefitsariiaDannyeKontragenta, error) {
	raw, err := c.createEntity("Catalog_фмАнкетаКлиентаБенефицария_ДанныеКонтрагента", data)
	if err != nil {
		return nil, err
	}
	result := CatalogfmAnketaKlientaBenefitsariiaDannyeKontragenta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogfmAnketaKlientaBenefitsariiaDannyeKontragentas(where Where) ([]CatalogfmAnketaKlientaBenefitsariiaDannyeKontragenta, error) {
	type ReturnObj struct {
		Value []CatalogfmAnketaKlientaBenefitsariiaDannyeKontragenta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_фмАнкетаКлиентаБенефицария_ДанныеКонтрагента", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogTsenovyeGruppy(Key Guid) (*CatalogTsenovyeGruppy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ЦеновыеГруппы", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogTsenovyeGruppy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogTsenovyeGruppy(Key Guid, entity interface{}) (*CatalogTsenovyeGruppy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ЦеновыеГруппы", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogTsenovyeGruppy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogTsenovyeGruppy(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ЦеновыеГруппы", args)
}

func (c *Client) CreateCatalogTsenovyeGruppy(data CatalogTsenovyeGruppy) (*CatalogTsenovyeGruppy, error) {
	raw, err := c.createEntity("Catalog_ЦеновыеГруппы", data)
	if err != nil {
		return nil, err
	}
	result := CatalogTsenovyeGruppy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogTsenovyeGruppys(where Where) ([]CatalogTsenovyeGruppy, error) {
	type ReturnObj struct {
		Value []CatalogTsenovyeGruppy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ЦеновыеГруппы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogPravilaTsenoobrazovaniia(Key Guid) (*CatalogPravilaTsenoobrazovaniia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ПравилаЦенообразования", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogPravilaTsenoobrazovaniia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogPravilaTsenoobrazovaniia(Key Guid, entity interface{}) (*CatalogPravilaTsenoobrazovaniia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ПравилаЦенообразования", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogPravilaTsenoobrazovaniia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogPravilaTsenoobrazovaniia(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ПравилаЦенообразования", args)
}

func (c *Client) CreateCatalogPravilaTsenoobrazovaniia(data CatalogPravilaTsenoobrazovaniia) (*CatalogPravilaTsenoobrazovaniia, error) {
	raw, err := c.createEntity("Catalog_ПравилаЦенообразования", data)
	if err != nil {
		return nil, err
	}
	result := CatalogPravilaTsenoobrazovaniia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogPravilaTsenoobrazovaniias(where Where) ([]CatalogPravilaTsenoobrazovaniia, error) {
	type ReturnObj struct {
		Value []CatalogPravilaTsenoobrazovaniia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ПравилаЦенообразования", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogPravilaTsenoobrazovaniiaTsenovyeGruppy(Key Guid, LineNumber Int) (*CatalogPravilaTsenoobrazovaniiaTsenovyeGruppy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_ПравилаЦенообразования_ЦеновыеГруппы", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogPravilaTsenoobrazovaniiaTsenovyeGruppy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogPravilaTsenoobrazovaniiaTsenovyeGruppy(Key Guid, LineNumber Int, entity interface{}) (*CatalogPravilaTsenoobrazovaniiaTsenovyeGruppy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_ПравилаЦенообразования_ЦеновыеГруппы", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogPravilaTsenoobrazovaniiaTsenovyeGruppy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogPravilaTsenoobrazovaniiaTsenovyeGruppy(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_ПравилаЦенообразования_ЦеновыеГруппы", args)
}

func (c *Client) CreateCatalogPravilaTsenoobrazovaniiaTsenovyeGruppy(data CatalogPravilaTsenoobrazovaniiaTsenovyeGruppy) (*CatalogPravilaTsenoobrazovaniiaTsenovyeGruppy, error) {
	raw, err := c.createEntity("Catalog_ПравилаЦенообразования_ЦеновыеГруппы", data)
	if err != nil {
		return nil, err
	}
	result := CatalogPravilaTsenoobrazovaniiaTsenovyeGruppy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogPravilaTsenoobrazovaniiaTsenovyeGruppys(where Where) ([]CatalogPravilaTsenoobrazovaniiaTsenovyeGruppy, error) {
	type ReturnObj struct {
		Value []CatalogPravilaTsenoobrazovaniiaTsenovyeGruppy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ПравилаЦенообразования_ЦеновыеГруппы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentObieiavlenieNaVznosNalichnymi(Key Guid) (*DocumentObieiavlenieNaVznosNalichnymi, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ОбъявлениеНаВзносНаличными", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentObieiavlenieNaVznosNalichnymi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentObieiavlenieNaVznosNalichnymi(Key Guid, entity interface{}) (*DocumentObieiavlenieNaVznosNalichnymi, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ОбъявлениеНаВзносНаличными", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentObieiavlenieNaVznosNalichnymi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentObieiavlenieNaVznosNalichnymi(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ОбъявлениеНаВзносНаличными", args)
}

func (c *Client) CreateDocumentObieiavlenieNaVznosNalichnymi(data DocumentObieiavlenieNaVznosNalichnymi) (*DocumentObieiavlenieNaVznosNalichnymi, error) {
	raw, err := c.createEntity("Document_ОбъявлениеНаВзносНаличными", data)
	if err != nil {
		return nil, err
	}
	result := DocumentObieiavlenieNaVznosNalichnymi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentObieiavlenieNaVznosNalichnymis(where Where) ([]DocumentObieiavlenieNaVznosNalichnymi, error) {
	type ReturnObj struct {
		Value []DocumentObieiavlenieNaVznosNalichnymi `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОбъявлениеНаВзносНаличными", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogValiuty(Key Guid) (*CatalogValiuty, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_Валюты", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogValiuty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogValiuty(Key Guid, entity interface{}) (*CatalogValiuty, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_Валюты", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogValiuty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogValiuty(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_Валюты", args)
}

func (c *Client) CreateCatalogValiuty(data CatalogValiuty) (*CatalogValiuty, error) {
	raw, err := c.createEntity("Catalog_Валюты", data)
	if err != nil {
		return nil, err
	}
	result := CatalogValiuty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogValiutys(where Where) ([]CatalogValiuty, error) {
	type ReturnObj struct {
		Value []CatalogValiuty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Валюты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochku(Key Guid) (*DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochku, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochku{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochku(Key Guid, entity interface{}) (*DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochku, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochku{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochku(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку", args)
}

func (c *Client) CreateDocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochku(data DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochku) (*DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochku, error) {
	raw, err := c.createEntity("Document_ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochku{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkus(where Where) ([]DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochku, error) {
	type ReturnObj struct {
		Value []DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochku `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovary(Key Guid, LineNumber Int) (*DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку_Товары", args)
}

func (c *Client) CreateDocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovary(data DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovary) (*DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovary, error) {
	raw, err := c.createEntity("Document_ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovarys(where Where) ([]DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovary, error) {
	type ReturnObj struct {
		Value []DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugi(Key Guid, LineNumber Int) (*DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugi, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку_Услуги", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugi(Key Guid, LineNumber Int, entity interface{}) (*DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugi, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку_Услуги", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugi(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку_Услуги", args)
}

func (c *Client) CreateDocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugi(data DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugi) (*DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugi, error) {
	raw, err := c.createEntity("Document_ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку_Услуги", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugis(where Where) ([]DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugi, error) {
	type ReturnObj struct {
		Value []DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugi `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку_Услуги", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogKassyKKM(Key Guid) (*CatalogKassyKKM, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_КассыККМ", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogKassyKKM{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogKassyKKM(Key Guid, entity interface{}) (*CatalogKassyKKM, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_КассыККМ", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogKassyKKM{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogKassyKKM(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_КассыККМ", args)
}

func (c *Client) CreateCatalogKassyKKM(data CatalogKassyKKM) (*CatalogKassyKKM, error) {
	raw, err := c.createEntity("Catalog_КассыККМ", data)
	if err != nil {
		return nil, err
	}
	result := CatalogKassyKKM{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogKassyKKMs(where Where) ([]CatalogKassyKKM, error) {
	type ReturnObj struct {
		Value []CatalogKassyKKM `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_КассыККМ", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) Probe(Key Guid) (*Probe, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_Пробы", args, []string{})
	if err != nil {
		return nil, err
	}
	result := Probe{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateProbe(Key Guid, entity interface{}) (*Probe, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_Пробы", args, entity)
	if err != nil {
		return nil, err
	}
	result := Probe{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveProbe(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_Пробы", args)
}

func (c *Client) CreateProbe(data Probe) (*Probe, error) {
	raw, err := c.createEntity("Catalog_Пробы", data)
	if err != nil {
		return nil, err
	}
	result := Probe{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) Probes(where Where) ([]Probe, error) {
	type ReturnObj struct {
		Value []Probe `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Пробы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogGruppyDostupa(Key Guid) (*CatalogGruppyDostupa, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ГруппыДоступа", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogGruppyDostupa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogGruppyDostupa(Key Guid, entity interface{}) (*CatalogGruppyDostupa, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ГруппыДоступа", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogGruppyDostupa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogGruppyDostupa(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ГруппыДоступа", args)
}

func (c *Client) CreateCatalogGruppyDostupa(data CatalogGruppyDostupa) (*CatalogGruppyDostupa, error) {
	raw, err := c.createEntity("Catalog_ГруппыДоступа", data)
	if err != nil {
		return nil, err
	}
	result := CatalogGruppyDostupa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogGruppyDostupas(where Where) ([]CatalogGruppyDostupa, error) {
	type ReturnObj struct {
		Value []CatalogGruppyDostupa `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ГруппыДоступа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogGruppyDostupaPolzovateli(Key Guid, LineNumber Int) (*CatalogGruppyDostupaPolzovateli, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_ГруппыДоступа_Пользователи", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogGruppyDostupaPolzovateli{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogGruppyDostupaPolzovateli(Key Guid, LineNumber Int, entity interface{}) (*CatalogGruppyDostupaPolzovateli, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_ГруппыДоступа_Пользователи", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogGruppyDostupaPolzovateli{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogGruppyDostupaPolzovateli(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_ГруппыДоступа_Пользователи", args)
}

func (c *Client) CreateCatalogGruppyDostupaPolzovateli(data CatalogGruppyDostupaPolzovateli) (*CatalogGruppyDostupaPolzovateli, error) {
	raw, err := c.createEntity("Catalog_ГруппыДоступа_Пользователи", data)
	if err != nil {
		return nil, err
	}
	result := CatalogGruppyDostupaPolzovateli{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogGruppyDostupaPolzovatelis(where Where) ([]CatalogGruppyDostupaPolzovateli, error) {
	type ReturnObj struct {
		Value []CatalogGruppyDostupaPolzovateli `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ГруппыДоступа_Пользователи", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogGruppyDostupaVidyDostupa(Key Guid, LineNumber Int) (*CatalogGruppyDostupaVidyDostupa, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_ГруппыДоступа_ВидыДоступа", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogGruppyDostupaVidyDostupa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogGruppyDostupaVidyDostupa(Key Guid, LineNumber Int, entity interface{}) (*CatalogGruppyDostupaVidyDostupa, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_ГруппыДоступа_ВидыДоступа", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogGruppyDostupaVidyDostupa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogGruppyDostupaVidyDostupa(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_ГруппыДоступа_ВидыДоступа", args)
}

func (c *Client) CreateCatalogGruppyDostupaVidyDostupa(data CatalogGruppyDostupaVidyDostupa) (*CatalogGruppyDostupaVidyDostupa, error) {
	raw, err := c.createEntity("Catalog_ГруппыДоступа_ВидыДоступа", data)
	if err != nil {
		return nil, err
	}
	result := CatalogGruppyDostupaVidyDostupa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogGruppyDostupaVidyDostupas(where Where) ([]CatalogGruppyDostupaVidyDostupa, error) {
	type ReturnObj struct {
		Value []CatalogGruppyDostupaVidyDostupa `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ГруппыДоступа_ВидыДоступа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogGruppyDostupaZnacheniiaDostupa(Key Guid, LineNumber Int) (*CatalogGruppyDostupaZnacheniiaDostupa, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_ГруппыДоступа_ЗначенияДоступа", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogGruppyDostupaZnacheniiaDostupa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogGruppyDostupaZnacheniiaDostupa(Key Guid, LineNumber Int, entity interface{}) (*CatalogGruppyDostupaZnacheniiaDostupa, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_ГруппыДоступа_ЗначенияДоступа", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogGruppyDostupaZnacheniiaDostupa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogGruppyDostupaZnacheniiaDostupa(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_ГруппыДоступа_ЗначенияДоступа", args)
}

func (c *Client) CreateCatalogGruppyDostupaZnacheniiaDostupa(data CatalogGruppyDostupaZnacheniiaDostupa) (*CatalogGruppyDostupaZnacheniiaDostupa, error) {
	raw, err := c.createEntity("Catalog_ГруппыДоступа_ЗначенияДоступа", data)
	if err != nil {
		return nil, err
	}
	result := CatalogGruppyDostupaZnacheniiaDostupa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogGruppyDostupaZnacheniiaDostupas(where Where) ([]CatalogGruppyDostupaZnacheniiaDostupa, error) {
	type ReturnObj struct {
		Value []CatalogGruppyDostupaZnacheniiaDostupa `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ГруппыДоступа_ЗначенияДоступа", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogGruppyDostupaDostupPoPodsistemam(Key Guid, LineNumber Int) (*CatalogGruppyDostupaDostupPoPodsistemam, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_ГруппыДоступа_ДоступПоПодсистемам", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogGruppyDostupaDostupPoPodsistemam{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogGruppyDostupaDostupPoPodsistemam(Key Guid, LineNumber Int, entity interface{}) (*CatalogGruppyDostupaDostupPoPodsistemam, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_ГруппыДоступа_ДоступПоПодсистемам", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogGruppyDostupaDostupPoPodsistemam{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogGruppyDostupaDostupPoPodsistemam(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_ГруппыДоступа_ДоступПоПодсистемам", args)
}

func (c *Client) CreateCatalogGruppyDostupaDostupPoPodsistemam(data CatalogGruppyDostupaDostupPoPodsistemam) (*CatalogGruppyDostupaDostupPoPodsistemam, error) {
	raw, err := c.createEntity("Catalog_ГруппыДоступа_ДоступПоПодсистемам", data)
	if err != nil {
		return nil, err
	}
	result := CatalogGruppyDostupaDostupPoPodsistemam{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogGruppyDostupaDostupPoPodsistemams(where Where) ([]CatalogGruppyDostupaDostupPoPodsistemam, error) {
	type ReturnObj struct {
		Value []CatalogGruppyDostupaDostupPoPodsistemam `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ГруппыДоступа_ДоступПоПодсистемам", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogVidyKontaktnoiInformatsii(Key Guid) (*CatalogVidyKontaktnoiInformatsii, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ВидыКонтактнойИнформации", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogVidyKontaktnoiInformatsii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogVidyKontaktnoiInformatsii(Key Guid, entity interface{}) (*CatalogVidyKontaktnoiInformatsii, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ВидыКонтактнойИнформации", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogVidyKontaktnoiInformatsii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogVidyKontaktnoiInformatsii(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ВидыКонтактнойИнформации", args)
}

func (c *Client) CreateCatalogVidyKontaktnoiInformatsii(data CatalogVidyKontaktnoiInformatsii) (*CatalogVidyKontaktnoiInformatsii, error) {
	raw, err := c.createEntity("Catalog_ВидыКонтактнойИнформации", data)
	if err != nil {
		return nil, err
	}
	result := CatalogVidyKontaktnoiInformatsii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogVidyKontaktnoiInformatsiis(where Where) ([]CatalogVidyKontaktnoiInformatsii, error) {
	type ReturnObj struct {
		Value []CatalogVidyKontaktnoiInformatsii `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ВидыКонтактнойИнформации", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogNomenklaturnyeGruppy(Key Guid) (*CatalogNomenklaturnyeGruppy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_НоменклатурныеГруппы", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogNomenklaturnyeGruppy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogNomenklaturnyeGruppy(Key Guid, entity interface{}) (*CatalogNomenklaturnyeGruppy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_НоменклатурныеГруппы", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogNomenklaturnyeGruppy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogNomenklaturnyeGruppy(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_НоменклатурныеГруппы", args)
}

func (c *Client) CreateCatalogNomenklaturnyeGruppy(data CatalogNomenklaturnyeGruppy) (*CatalogNomenklaturnyeGruppy, error) {
	raw, err := c.createEntity("Catalog_НоменклатурныеГруппы", data)
	if err != nil {
		return nil, err
	}
	result := CatalogNomenklaturnyeGruppy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogNomenklaturnyeGruppys(where Where) ([]CatalogNomenklaturnyeGruppy, error) {
	type ReturnObj struct {
		Value []CatalogNomenklaturnyeGruppy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НоменклатурныеГруппы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentReestrSchetov(Key Guid) (*DocumentReestrSchetov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_РеестрСчетов", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentReestrSchetov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentReestrSchetov(Key Guid, entity interface{}) (*DocumentReestrSchetov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_РеестрСчетов", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentReestrSchetov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentReestrSchetov(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_РеестрСчетов", args)
}

func (c *Client) CreateDocumentReestrSchetov(data DocumentReestrSchetov) (*DocumentReestrSchetov, error) {
	raw, err := c.createEntity("Document_РеестрСчетов", data)
	if err != nil {
		return nil, err
	}
	result := DocumentReestrSchetov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentReestrSchetovs(where Where) ([]DocumentReestrSchetov, error) {
	type ReturnObj struct {
		Value []DocumentReestrSchetov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_РеестрСчетов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentReestrSchetovReestr(Key Guid, LineNumber Int) (*DocumentReestrSchetovReestr, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_РеестрСчетов_Реестр", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentReestrSchetovReestr{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentReestrSchetovReestr(Key Guid, LineNumber Int, entity interface{}) (*DocumentReestrSchetovReestr, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_РеестрСчетов_Реестр", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentReestrSchetovReestr{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentReestrSchetovReestr(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_РеестрСчетов_Реестр", args)
}

func (c *Client) CreateDocumentReestrSchetovReestr(data DocumentReestrSchetovReestr) (*DocumentReestrSchetovReestr, error) {
	raw, err := c.createEntity("Document_РеестрСчетов_Реестр", data)
	if err != nil {
		return nil, err
	}
	result := DocumentReestrSchetovReestr{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentReestrSchetovReestrs(where Where) ([]DocumentReestrSchetovReestr, error) {
	type ReturnObj struct {
		Value []DocumentReestrSchetovReestr `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_РеестрСчетов_Реестр", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiu(Key Guid) (*DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiu, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ИнвентаризацияТоваровОтданныхНаКомиссию", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiu{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentInventarizatsiiaTovarovOtdannykhNaKomissiiu(Key Guid, entity interface{}) (*DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiu, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ИнвентаризацияТоваровОтданныхНаКомиссию", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiu{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentInventarizatsiiaTovarovOtdannykhNaKomissiiu(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ИнвентаризацияТоваровОтданныхНаКомиссию", args)
}

func (c *Client) CreateDocumentInventarizatsiiaTovarovOtdannykhNaKomissiiu(data DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiu) (*DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiu, error) {
	raw, err := c.createEntity("Document_ИнвентаризацияТоваровОтданныхНаКомиссию", data)
	if err != nil {
		return nil, err
	}
	result := DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiu{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentInventarizatsiiaTovarovOtdannykhNaKomissiius(where Where) ([]DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiu, error) {
	type ReturnObj struct {
		Value []DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiu `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ИнвентаризацияТоваровОтданныхНаКомиссию", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovary(Key Guid, LineNumber Int) (*DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ИнвентаризацияТоваровОтданныхНаКомиссию_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ИнвентаризацияТоваровОтданныхНаКомиссию_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ИнвентаризацияТоваровОтданныхНаКомиссию_Товары", args)
}

func (c *Client) CreateDocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovary(data DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovary) (*DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovary, error) {
	raw, err := c.createEntity("Document_ИнвентаризацияТоваровОтданныхНаКомиссию_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovarys(where Where) ([]DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovary, error) {
	type ReturnObj struct {
		Value []DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ИнвентаризацияТоваровОтданныхНаКомиссию_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogKlassifikatorStranMira(Key Guid) (*CatalogKlassifikatorStranMira, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_КлассификаторСтранМира", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogKlassifikatorStranMira{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogKlassifikatorStranMira(Key Guid, entity interface{}) (*CatalogKlassifikatorStranMira, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_КлассификаторСтранМира", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogKlassifikatorStranMira{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogKlassifikatorStranMira(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_КлассификаторСтранМира", args)
}

func (c *Client) CreateCatalogKlassifikatorStranMira(data CatalogKlassifikatorStranMira) (*CatalogKlassifikatorStranMira, error) {
	raw, err := c.createEntity("Catalog_КлассификаторСтранМира", data)
	if err != nil {
		return nil, err
	}
	result := CatalogKlassifikatorStranMira{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogKlassifikatorStranMiras(where Where) ([]CatalogKlassifikatorStranMira, error) {
	type ReturnObj struct {
		Value []CatalogKlassifikatorStranMira `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_КлассификаторСтранМира", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogKlassifikatorEdinitsIzmereniia(Key Guid) (*CatalogKlassifikatorEdinitsIzmereniia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_КлассификаторЕдиницИзмерения", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogKlassifikatorEdinitsIzmereniia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogKlassifikatorEdinitsIzmereniia(Key Guid, entity interface{}) (*CatalogKlassifikatorEdinitsIzmereniia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_КлассификаторЕдиницИзмерения", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogKlassifikatorEdinitsIzmereniia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogKlassifikatorEdinitsIzmereniia(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_КлассификаторЕдиницИзмерения", args)
}

func (c *Client) CreateCatalogKlassifikatorEdinitsIzmereniia(data CatalogKlassifikatorEdinitsIzmereniia) (*CatalogKlassifikatorEdinitsIzmereniia, error) {
	raw, err := c.createEntity("Catalog_КлассификаторЕдиницИзмерения", data)
	if err != nil {
		return nil, err
	}
	result := CatalogKlassifikatorEdinitsIzmereniia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogKlassifikatorEdinitsIzmereniias(where Where) ([]CatalogKlassifikatorEdinitsIzmereniia, error) {
	type ReturnObj struct {
		Value []CatalogKlassifikatorEdinitsIzmereniia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_КлассификаторЕдиницИзмерения", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogNastroikiRMK(Key Guid) (*CatalogNastroikiRMK, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_НастройкиРМК", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiRMK{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogNastroikiRMK(Key Guid, entity interface{}) (*CatalogNastroikiRMK, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_НастройкиРМК", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiRMK{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogNastroikiRMK(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_НастройкиРМК", args)
}

func (c *Client) CreateCatalogNastroikiRMK(data CatalogNastroikiRMK) (*CatalogNastroikiRMK, error) {
	raw, err := c.createEntity("Catalog_НастройкиРМК", data)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiRMK{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogNastroikiRMKs(where Where) ([]CatalogNastroikiRMK, error) {
	type ReturnObj struct {
		Value []CatalogNastroikiRMK `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкиРМК", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogNastroikiRMKPoriadokPrimeneniiaSkidok(Key Guid, LineNumber Int) (*CatalogNastroikiRMKPoriadokPrimeneniiaSkidok, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_НастройкиРМК_ПорядокПримененияСкидок", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiRMKPoriadokPrimeneniiaSkidok{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogNastroikiRMKPoriadokPrimeneniiaSkidok(Key Guid, LineNumber Int, entity interface{}) (*CatalogNastroikiRMKPoriadokPrimeneniiaSkidok, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_НастройкиРМК_ПорядокПримененияСкидок", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiRMKPoriadokPrimeneniiaSkidok{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogNastroikiRMKPoriadokPrimeneniiaSkidok(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_НастройкиРМК_ПорядокПримененияСкидок", args)
}

func (c *Client) CreateCatalogNastroikiRMKPoriadokPrimeneniiaSkidok(data CatalogNastroikiRMKPoriadokPrimeneniiaSkidok) (*CatalogNastroikiRMKPoriadokPrimeneniiaSkidok, error) {
	raw, err := c.createEntity("Catalog_НастройкиРМК_ПорядокПримененияСкидок", data)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiRMKPoriadokPrimeneniiaSkidok{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogNastroikiRMKPoriadokPrimeneniiaSkidoks(where Where) ([]CatalogNastroikiRMKPoriadokPrimeneniiaSkidok, error) {
	type ReturnObj struct {
		Value []CatalogNastroikiRMKPoriadokPrimeneniiaSkidok `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкиРМК_ПорядокПримененияСкидок", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogNastroikiRMKSostavNaimenovaniia(Key Guid, LineNumber Int) (*CatalogNastroikiRMKSostavNaimenovaniia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_НастройкиРМК_СоставНаименования", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiRMKSostavNaimenovaniia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogNastroikiRMKSostavNaimenovaniia(Key Guid, LineNumber Int, entity interface{}) (*CatalogNastroikiRMKSostavNaimenovaniia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_НастройкиРМК_СоставНаименования", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiRMKSostavNaimenovaniia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogNastroikiRMKSostavNaimenovaniia(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_НастройкиРМК_СоставНаименования", args)
}

func (c *Client) CreateCatalogNastroikiRMKSostavNaimenovaniia(data CatalogNastroikiRMKSostavNaimenovaniia) (*CatalogNastroikiRMKSostavNaimenovaniia, error) {
	raw, err := c.createEntity("Catalog_НастройкиРМК_СоставНаименования", data)
	if err != nil {
		return nil, err
	}
	result := CatalogNastroikiRMKSostavNaimenovaniia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogNastroikiRMKSostavNaimenovaniias(where Where) ([]CatalogNastroikiRMKSostavNaimenovaniia, error) {
	type ReturnObj struct {
		Value []CatalogNastroikiRMKSostavNaimenovaniia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_НастройкиРМК_СоставНаименования", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogKharakteristikiNomenklatury(Key Guid) (*CatalogKharakteristikiNomenklatury, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ХарактеристикиНоменклатуры", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogKharakteristikiNomenklatury{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogKharakteristikiNomenklatury(Key Guid, entity interface{}) (*CatalogKharakteristikiNomenklatury, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ХарактеристикиНоменклатуры", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogKharakteristikiNomenklatury{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogKharakteristikiNomenklatury(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ХарактеристикиНоменклатуры", args)
}

func (c *Client) CreateCatalogKharakteristikiNomenklatury(data CatalogKharakteristikiNomenklatury) (*CatalogKharakteristikiNomenklatury, error) {
	raw, err := c.createEntity("Catalog_ХарактеристикиНоменклатуры", data)
	if err != nil {
		return nil, err
	}
	result := CatalogKharakteristikiNomenklatury{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogKharakteristikiNomenklaturys(where Where) ([]CatalogKharakteristikiNomenklatury, error) {
	type ReturnObj struct {
		Value []CatalogKharakteristikiNomenklatury `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ХарактеристикиНоменклатуры", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogKharakteristikiNomenklaturySpetsifikatsiia(Key Guid, LineNumber Int) (*CatalogKharakteristikiNomenklaturySpetsifikatsiia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_ХарактеристикиНоменклатуры_Спецификация", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogKharakteristikiNomenklaturySpetsifikatsiia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogKharakteristikiNomenklaturySpetsifikatsiia(Key Guid, LineNumber Int, entity interface{}) (*CatalogKharakteristikiNomenklaturySpetsifikatsiia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_ХарактеристикиНоменклатуры_Спецификация", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogKharakteristikiNomenklaturySpetsifikatsiia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogKharakteristikiNomenklaturySpetsifikatsiia(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_ХарактеристикиНоменклатуры_Спецификация", args)
}

func (c *Client) CreateCatalogKharakteristikiNomenklaturySpetsifikatsiia(data CatalogKharakteristikiNomenklaturySpetsifikatsiia) (*CatalogKharakteristikiNomenklaturySpetsifikatsiia, error) {
	raw, err := c.createEntity("Catalog_ХарактеристикиНоменклатуры_Спецификация", data)
	if err != nil {
		return nil, err
	}
	result := CatalogKharakteristikiNomenklaturySpetsifikatsiia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogKharakteristikiNomenklaturySpetsifikatsiias(where Where) ([]CatalogKharakteristikiNomenklaturySpetsifikatsiia, error) {
	type ReturnObj struct {
		Value []CatalogKharakteristikiNomenklaturySpetsifikatsiia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ХарактеристикиНоменклатуры_Спецификация", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentOtborTovarov(Key Guid) (*DocumentOtborTovarov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ОтборТоваров", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentOtborTovarov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentOtborTovarov(Key Guid, entity interface{}) (*DocumentOtborTovarov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ОтборТоваров", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentOtborTovarov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentOtborTovarov(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ОтборТоваров", args)
}

func (c *Client) CreateDocumentOtborTovarov(data DocumentOtborTovarov) (*DocumentOtborTovarov, error) {
	raw, err := c.createEntity("Document_ОтборТоваров", data)
	if err != nil {
		return nil, err
	}
	result := DocumentOtborTovarov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentOtborTovarovs(where Where) ([]DocumentOtborTovarov, error) {
	type ReturnObj struct {
		Value []DocumentOtborTovarov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтборТоваров", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentOtborTovarovTovary(Key Guid, LineNumber Int) (*DocumentOtborTovarovTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ОтборТоваров_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentOtborTovarovTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentOtborTovarovTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentOtborTovarovTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ОтборТоваров_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentOtborTovarovTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentOtborTovarovTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ОтборТоваров_Товары", args)
}

func (c *Client) CreateDocumentOtborTovarovTovary(data DocumentOtborTovarovTovary) (*DocumentOtborTovarovTovary, error) {
	raw, err := c.createEntity("Document_ОтборТоваров_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentOtborTovarovTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentOtborTovarovTovarys(where Where) ([]DocumentOtborTovarovTovary, error) {
	type ReturnObj struct {
		Value []DocumentOtborTovarovTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтборТоваров_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentOtborTovarovTovaryKOtboru(Key Guid, LineNumber Int) (*DocumentOtborTovarovTovaryKOtboru, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ОтборТоваров_ТоварыКОтбору", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentOtborTovarovTovaryKOtboru{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentOtborTovarovTovaryKOtboru(Key Guid, LineNumber Int, entity interface{}) (*DocumentOtborTovarovTovaryKOtboru, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ОтборТоваров_ТоварыКОтбору", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentOtborTovarovTovaryKOtboru{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentOtborTovarovTovaryKOtboru(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ОтборТоваров_ТоварыКОтбору", args)
}

func (c *Client) CreateDocumentOtborTovarovTovaryKOtboru(data DocumentOtborTovarovTovaryKOtboru) (*DocumentOtborTovarovTovaryKOtboru, error) {
	raw, err := c.createEntity("Document_ОтборТоваров_ТоварыКОтбору", data)
	if err != nil {
		return nil, err
	}
	result := DocumentOtborTovarovTovaryKOtboru{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentOtborTovarovTovaryKOtborus(where Where) ([]DocumentOtborTovarovTovaryKOtboru, error) {
	type ReturnObj struct {
		Value []DocumentOtborTovarovTovaryKOtboru `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтборТоваров_ТоварыКОтбору", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogSposobyDostavkiTovara(Key Guid) (*CatalogSposobyDostavkiTovara, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_СпособыДоставкиТовара", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogSposobyDostavkiTovara{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogSposobyDostavkiTovara(Key Guid, entity interface{}) (*CatalogSposobyDostavkiTovara, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_СпособыДоставкиТовара", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogSposobyDostavkiTovara{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogSposobyDostavkiTovara(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_СпособыДоставкиТовара", args)
}

func (c *Client) CreateCatalogSposobyDostavkiTovara(data CatalogSposobyDostavkiTovara) (*CatalogSposobyDostavkiTovara, error) {
	raw, err := c.createEntity("Catalog_СпособыДоставкиТовара", data)
	if err != nil {
		return nil, err
	}
	result := CatalogSposobyDostavkiTovara{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogSposobyDostavkiTovaras(where Where) ([]CatalogSposobyDostavkiTovara, error) {
	type ReturnObj struct {
		Value []CatalogSposobyDostavkiTovara `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_СпособыДоставкиТовара", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogPodrazdeleniia(Key Guid) (*CatalogPodrazdeleniia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_Подразделения", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogPodrazdeleniia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogPodrazdeleniia(Key Guid, entity interface{}) (*CatalogPodrazdeleniia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_Подразделения", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogPodrazdeleniia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogPodrazdeleniia(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_Подразделения", args)
}

func (c *Client) CreateCatalogPodrazdeleniia(data CatalogPodrazdeleniia) (*CatalogPodrazdeleniia, error) {
	raw, err := c.createEntity("Catalog_Подразделения", data)
	if err != nil {
		return nil, err
	}
	result := CatalogPodrazdeleniia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogPodrazdeleniias(where Where) ([]CatalogPodrazdeleniia, error) {
	type ReturnObj struct {
		Value []CatalogPodrazdeleniia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Подразделения", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentJournalPreiskuranty(Ref String, RefType String) (*DocumentJournalPreiskuranty, error) {
	args := []string{fmt.Sprintf("Ref='%s' ", url.PathEscape(string(Ref))), fmt.Sprintf("Ref_Type='%s' ", url.PathEscape(string(RefType)))}
	raw, err := c.getEntity("DocumentJournal_Прейскуранты", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentJournalPreiskuranty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentJournalPreiskuranty(Ref String, RefType String, entity interface{}) (*DocumentJournalPreiskuranty, error) {
	args := []string{fmt.Sprintf("Ref='%s' ", url.PathEscape(string(Ref))), fmt.Sprintf("Ref_Type='%s' ", url.PathEscape(string(RefType)))}
	raw, err := c.updateEntity("DocumentJournal_Прейскуранты", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentJournalPreiskuranty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentJournalPreiskuranty(Ref String, RefType String) error {
	args := []string{fmt.Sprintf("Ref='%s' ", url.PathEscape(string(Ref))), fmt.Sprintf("Ref_Type='%s' ", url.PathEscape(string(RefType)))}
	return c.removeEntity("DocumentJournal_Прейскуранты", args)
}

func (c *Client) CreateDocumentJournalPreiskuranty(data DocumentJournalPreiskuranty) (*DocumentJournalPreiskuranty, error) {
	raw, err := c.createEntity("DocumentJournal_Прейскуранты", data)
	if err != nil {
		return nil, err
	}
	result := DocumentJournalPreiskuranty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentJournalPreiskurantys(where Where) ([]DocumentJournalPreiskuranty, error) {
	type ReturnObj struct {
		Value []DocumentJournalPreiskuranty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("DocumentJournal_Прейскуранты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogRelizyIuvelirnykhSalonov(Key Guid) (*CatalogRelizyIuvelirnykhSalonov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_РелизыЮвелирныхСалонов", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogRelizyIuvelirnykhSalonov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogRelizyIuvelirnykhSalonov(Key Guid, entity interface{}) (*CatalogRelizyIuvelirnykhSalonov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_РелизыЮвелирныхСалонов", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogRelizyIuvelirnykhSalonov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogRelizyIuvelirnykhSalonov(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_РелизыЮвелирныхСалонов", args)
}

func (c *Client) CreateCatalogRelizyIuvelirnykhSalonov(data CatalogRelizyIuvelirnykhSalonov) (*CatalogRelizyIuvelirnykhSalonov, error) {
	raw, err := c.createEntity("Catalog_РелизыЮвелирныхСалонов", data)
	if err != nil {
		return nil, err
	}
	result := CatalogRelizyIuvelirnykhSalonov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogRelizyIuvelirnykhSalonovs(where Where) ([]CatalogRelizyIuvelirnykhSalonov, error) {
	type ReturnObj struct {
		Value []CatalogRelizyIuvelirnykhSalonov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_РелизыЮвелирныхСалонов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizy(Key Guid, LineNumber Int) (*CatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_РелизыЮвелирныхСалонов_ОбновляемыеРелизы", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizy(Key Guid, LineNumber Int, entity interface{}) (*CatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_РелизыЮвелирныхСалонов_ОбновляемыеРелизы", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizy(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_РелизыЮвелирныхСалонов_ОбновляемыеРелизы", args)
}

func (c *Client) CreateCatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizy(data CatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizy) (*CatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizy, error) {
	raw, err := c.createEntity("Catalog_РелизыЮвелирныхСалонов_ОбновляемыеРелизы", data)
	if err != nil {
		return nil, err
	}
	result := CatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizys(where Where) ([]CatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizy, error) {
	type ReturnObj struct {
		Value []CatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_РелизыЮвелирныхСалонов_ОбновляемыеРелизы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentOtchetKomissioneraOProdazhakh(Key Guid) (*DocumentOtchetKomissioneraOProdazhakh, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ОтчетКомиссионераОПродажах", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetKomissioneraOProdazhakh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentOtchetKomissioneraOProdazhakh(Key Guid, entity interface{}) (*DocumentOtchetKomissioneraOProdazhakh, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ОтчетКомиссионераОПродажах", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetKomissioneraOProdazhakh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentOtchetKomissioneraOProdazhakh(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ОтчетКомиссионераОПродажах", args)
}

func (c *Client) CreateDocumentOtchetKomissioneraOProdazhakh(data DocumentOtchetKomissioneraOProdazhakh) (*DocumentOtchetKomissioneraOProdazhakh, error) {
	raw, err := c.createEntity("Document_ОтчетКомиссионераОПродажах", data)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetKomissioneraOProdazhakh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentOtchetKomissioneraOProdazhakhs(where Where) ([]DocumentOtchetKomissioneraOProdazhakh, error) {
	type ReturnObj struct {
		Value []DocumentOtchetKomissioneraOProdazhakh `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетКомиссионераОПродажах", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstva(Key Guid, LineNumber Int) (*DocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstva, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ОтчетКомиссионераОПродажах_ДенежныеСредства", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstva{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstva(Key Guid, LineNumber Int, entity interface{}) (*DocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstva, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ОтчетКомиссионераОПродажах_ДенежныеСредства", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstva{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstva(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ОтчетКомиссионераОПродажах_ДенежныеСредства", args)
}

func (c *Client) CreateDocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstva(data DocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstva) (*DocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstva, error) {
	raw, err := c.createEntity("Document_ОтчетКомиссионераОПродажах_ДенежныеСредства", data)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstva{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstvas(where Where) ([]DocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstva, error) {
	type ReturnObj struct {
		Value []DocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstva `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетКомиссионераОПродажах_ДенежныеСредства", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentOtchetKomissioneraOProdazhakhTovary(Key Guid, LineNumber Int) (*DocumentOtchetKomissioneraOProdazhakhTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ОтчетКомиссионераОПродажах_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetKomissioneraOProdazhakhTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentOtchetKomissioneraOProdazhakhTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentOtchetKomissioneraOProdazhakhTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ОтчетКомиссионераОПродажах_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetKomissioneraOProdazhakhTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentOtchetKomissioneraOProdazhakhTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ОтчетКомиссионераОПродажах_Товары", args)
}

func (c *Client) CreateDocumentOtchetKomissioneraOProdazhakhTovary(data DocumentOtchetKomissioneraOProdazhakhTovary) (*DocumentOtchetKomissioneraOProdazhakhTovary, error) {
	raw, err := c.createEntity("Document_ОтчетКомиссионераОПродажах_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentOtchetKomissioneraOProdazhakhTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentOtchetKomissioneraOProdazhakhTovarys(where Where) ([]DocumentOtchetKomissioneraOProdazhakhTovary, error) {
	type ReturnObj struct {
		Value []DocumentOtchetKomissioneraOProdazhakhTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ОтчетКомиссионераОПродажах_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogTovarnyeKategorii(Key Guid) (*CatalogTovarnyeKategorii, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ТоварныеКатегории", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogTovarnyeKategorii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogTovarnyeKategorii(Key Guid, entity interface{}) (*CatalogTovarnyeKategorii, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ТоварныеКатегории", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogTovarnyeKategorii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogTovarnyeKategorii(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ТоварныеКатегории", args)
}

func (c *Client) CreateCatalogTovarnyeKategorii(data CatalogTovarnyeKategorii) (*CatalogTovarnyeKategorii, error) {
	raw, err := c.createEntity("Catalog_ТоварныеКатегории", data)
	if err != nil {
		return nil, err
	}
	result := CatalogTovarnyeKategorii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogTovarnyeKategoriis(where Where) ([]CatalogTovarnyeKategorii, error) {
	type ReturnObj struct {
		Value []CatalogTovarnyeKategorii `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ТоварныеКатегории", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogDokumentyUdostoveriaiushchieLichnost(Key Guid) (*CatalogDokumentyUdostoveriaiushchieLichnost, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ДокументыУдостоверяющиеЛичность", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogDokumentyUdostoveriaiushchieLichnost{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogDokumentyUdostoveriaiushchieLichnost(Key Guid, entity interface{}) (*CatalogDokumentyUdostoveriaiushchieLichnost, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ДокументыУдостоверяющиеЛичность", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogDokumentyUdostoveriaiushchieLichnost{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogDokumentyUdostoveriaiushchieLichnost(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ДокументыУдостоверяющиеЛичность", args)
}

func (c *Client) CreateCatalogDokumentyUdostoveriaiushchieLichnost(data CatalogDokumentyUdostoveriaiushchieLichnost) (*CatalogDokumentyUdostoveriaiushchieLichnost, error) {
	raw, err := c.createEntity("Catalog_ДокументыУдостоверяющиеЛичность", data)
	if err != nil {
		return nil, err
	}
	result := CatalogDokumentyUdostoveriaiushchieLichnost{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogDokumentyUdostoveriaiushchieLichnosts(where Where) ([]CatalogDokumentyUdostoveriaiushchieLichnost, error) {
	type ReturnObj struct {
		Value []CatalogDokumentyUdostoveriaiushchieLichnost `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ДокументыУдостоверяющиеЛичность", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogFiltryDliaElektronnykhPisem(Key Guid) (*CatalogFiltryDliaElektronnykhPisem, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ФильтрыДляЭлектронныхПисем", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogFiltryDliaElektronnykhPisem{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogFiltryDliaElektronnykhPisem(Key Guid, entity interface{}) (*CatalogFiltryDliaElektronnykhPisem, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ФильтрыДляЭлектронныхПисем", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogFiltryDliaElektronnykhPisem{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogFiltryDliaElektronnykhPisem(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ФильтрыДляЭлектронныхПисем", args)
}

func (c *Client) CreateCatalogFiltryDliaElektronnykhPisem(data CatalogFiltryDliaElektronnykhPisem) (*CatalogFiltryDliaElektronnykhPisem, error) {
	raw, err := c.createEntity("Catalog_ФильтрыДляЭлектронныхПисем", data)
	if err != nil {
		return nil, err
	}
	result := CatalogFiltryDliaElektronnykhPisem{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogFiltryDliaElektronnykhPisems(where Where) ([]CatalogFiltryDliaElektronnykhPisem, error) {
	type ReturnObj struct {
		Value []CatalogFiltryDliaElektronnykhPisem `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ФильтрыДляЭлектронныхПисем", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogFiltryDliaElektronnykhPisemDeistviiaFiltra(Key Guid, LineNumber Int) (*CatalogFiltryDliaElektronnykhPisemDeistviiaFiltra, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_ФильтрыДляЭлектронныхПисем_ДействияФильтра", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogFiltryDliaElektronnykhPisemDeistviiaFiltra{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogFiltryDliaElektronnykhPisemDeistviiaFiltra(Key Guid, LineNumber Int, entity interface{}) (*CatalogFiltryDliaElektronnykhPisemDeistviiaFiltra, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_ФильтрыДляЭлектронныхПисем_ДействияФильтра", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogFiltryDliaElektronnykhPisemDeistviiaFiltra{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogFiltryDliaElektronnykhPisemDeistviiaFiltra(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_ФильтрыДляЭлектронныхПисем_ДействияФильтра", args)
}

func (c *Client) CreateCatalogFiltryDliaElektronnykhPisemDeistviiaFiltra(data CatalogFiltryDliaElektronnykhPisemDeistviiaFiltra) (*CatalogFiltryDliaElektronnykhPisemDeistviiaFiltra, error) {
	raw, err := c.createEntity("Catalog_ФильтрыДляЭлектронныхПисем_ДействияФильтра", data)
	if err != nil {
		return nil, err
	}
	result := CatalogFiltryDliaElektronnykhPisemDeistviiaFiltra{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogFiltryDliaElektronnykhPisemDeistviiaFiltras(where Where) ([]CatalogFiltryDliaElektronnykhPisemDeistviiaFiltra, error) {
	type ReturnObj struct {
		Value []CatalogFiltryDliaElektronnykhPisemDeistviiaFiltra `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ФильтрыДляЭлектронныхПисем_ДействияФильтра", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogFiltryDliaElektronnykhPisemUsloviiaFiltra(Key Guid, LineNumber Int) (*CatalogFiltryDliaElektronnykhPisemUsloviiaFiltra, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_ФильтрыДляЭлектронныхПисем_УсловияФильтра", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogFiltryDliaElektronnykhPisemUsloviiaFiltra{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogFiltryDliaElektronnykhPisemUsloviiaFiltra(Key Guid, LineNumber Int, entity interface{}) (*CatalogFiltryDliaElektronnykhPisemUsloviiaFiltra, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_ФильтрыДляЭлектронныхПисем_УсловияФильтра", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogFiltryDliaElektronnykhPisemUsloviiaFiltra{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogFiltryDliaElektronnykhPisemUsloviiaFiltra(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_ФильтрыДляЭлектронныхПисем_УсловияФильтра", args)
}

func (c *Client) CreateCatalogFiltryDliaElektronnykhPisemUsloviiaFiltra(data CatalogFiltryDliaElektronnykhPisemUsloviiaFiltra) (*CatalogFiltryDliaElektronnykhPisemUsloviiaFiltra, error) {
	raw, err := c.createEntity("Catalog_ФильтрыДляЭлектронныхПисем_УсловияФильтра", data)
	if err != nil {
		return nil, err
	}
	result := CatalogFiltryDliaElektronnykhPisemUsloviiaFiltra{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogFiltryDliaElektronnykhPisemUsloviiaFiltras(where Where) ([]CatalogFiltryDliaElektronnykhPisemUsloviiaFiltra, error) {
	type ReturnObj struct {
		Value []CatalogFiltryDliaElektronnykhPisemUsloviiaFiltra `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ФильтрыДляЭлектронныхПисем_УсловияФильтра", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPreiskurantTsenNaTsvKamni(Key Guid) (*DocumentPreiskurantTsenNaTsvKamni, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ПрейскурантЦенНаЦвКамни", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPreiskurantTsenNaTsvKamni{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPreiskurantTsenNaTsvKamni(Key Guid, entity interface{}) (*DocumentPreiskurantTsenNaTsvKamni, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ПрейскурантЦенНаЦвКамни", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPreiskurantTsenNaTsvKamni{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPreiskurantTsenNaTsvKamni(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ПрейскурантЦенНаЦвКамни", args)
}

func (c *Client) CreateDocumentPreiskurantTsenNaTsvKamni(data DocumentPreiskurantTsenNaTsvKamni) (*DocumentPreiskurantTsenNaTsvKamni, error) {
	raw, err := c.createEntity("Document_ПрейскурантЦенНаЦвКамни", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPreiskurantTsenNaTsvKamni{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPreiskurantTsenNaTsvKamnis(where Where) ([]DocumentPreiskurantTsenNaTsvKamni, error) {
	type ReturnObj struct {
		Value []DocumentPreiskurantTsenNaTsvKamni `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПрейскурантЦенНаЦвКамни", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPreiskurantTsenNaTsvKamniTablitsa(Key Guid, LineNumber Int) (*DocumentPreiskurantTsenNaTsvKamniTablitsa, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ПрейскурантЦенНаЦвКамни_Таблица", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPreiskurantTsenNaTsvKamniTablitsa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPreiskurantTsenNaTsvKamniTablitsa(Key Guid, LineNumber Int, entity interface{}) (*DocumentPreiskurantTsenNaTsvKamniTablitsa, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ПрейскурантЦенНаЦвКамни_Таблица", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPreiskurantTsenNaTsvKamniTablitsa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPreiskurantTsenNaTsvKamniTablitsa(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ПрейскурантЦенНаЦвКамни_Таблица", args)
}

func (c *Client) CreateDocumentPreiskurantTsenNaTsvKamniTablitsa(data DocumentPreiskurantTsenNaTsvKamniTablitsa) (*DocumentPreiskurantTsenNaTsvKamniTablitsa, error) {
	raw, err := c.createEntity("Document_ПрейскурантЦенНаЦвКамни_Таблица", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPreiskurantTsenNaTsvKamniTablitsa{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPreiskurantTsenNaTsvKamniTablitsas(where Where) ([]DocumentPreiskurantTsenNaTsvKamniTablitsa, error) {
	type ReturnObj struct {
		Value []DocumentPreiskurantTsenNaTsvKamniTablitsa `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПрейскурантЦенНаЦвКамни_Таблица", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) Size(Key Guid) (*Size, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_Размер", args, []string{})
	if err != nil {
		return nil, err
	}
	result := Size{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateSize(Key Guid, entity interface{}) (*Size, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_Размер", args, entity)
	if err != nil {
		return nil, err
	}
	result := Size{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveSize(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_Размер", args)
}

func (c *Client) CreateSize(data Size) (*Size, error) {
	raw, err := c.createEntity("Catalog_Размер", data)
	if err != nil {
		return nil, err
	}
	result := Size{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) Sizes(where Where) ([]Size, error) {
	type ReturnObj struct {
		Value []Size `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Размер", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogTipyDragotsennykhMetallov(Key Guid) (*CatalogTipyDragotsennykhMetallov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ТипыДрагоценныхМеталлов", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogTipyDragotsennykhMetallov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogTipyDragotsennykhMetallov(Key Guid, entity interface{}) (*CatalogTipyDragotsennykhMetallov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ТипыДрагоценныхМеталлов", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogTipyDragotsennykhMetallov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogTipyDragotsennykhMetallov(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ТипыДрагоценныхМеталлов", args)
}

func (c *Client) CreateCatalogTipyDragotsennykhMetallov(data CatalogTipyDragotsennykhMetallov) (*CatalogTipyDragotsennykhMetallov, error) {
	raw, err := c.createEntity("Catalog_ТипыДрагоценныхМеталлов", data)
	if err != nil {
		return nil, err
	}
	result := CatalogTipyDragotsennykhMetallov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogTipyDragotsennykhMetallovs(where Where) ([]CatalogTipyDragotsennykhMetallov, error) {
	type ReturnObj struct {
		Value []CatalogTipyDragotsennykhMetallov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ТипыДрагоценныхМеталлов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentTelemarketing(Key Guid) (*DocumentTelemarketing, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_Телемаркетинг", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentTelemarketing{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentTelemarketing(Key Guid, entity interface{}) (*DocumentTelemarketing, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_Телемаркетинг", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentTelemarketing{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentTelemarketing(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_Телемаркетинг", args)
}

func (c *Client) CreateDocumentTelemarketing(data DocumentTelemarketing) (*DocumentTelemarketing, error) {
	raw, err := c.createEntity("Document_Телемаркетинг", data)
	if err != nil {
		return nil, err
	}
	result := DocumentTelemarketing{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentTelemarketings(where Where) ([]DocumentTelemarketing, error) {
	type ReturnObj struct {
		Value []DocumentTelemarketing `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_Телемаркетинг", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentTelemarketingUchastniki(Key Guid, LineNumber Int) (*DocumentTelemarketingUchastniki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_Телемаркетинг_Участники", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentTelemarketingUchastniki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentTelemarketingUchastniki(Key Guid, LineNumber Int, entity interface{}) (*DocumentTelemarketingUchastniki, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_Телемаркетинг_Участники", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentTelemarketingUchastniki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentTelemarketingUchastniki(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_Телемаркетинг_Участники", args)
}

func (c *Client) CreateDocumentTelemarketingUchastniki(data DocumentTelemarketingUchastniki) (*DocumentTelemarketingUchastniki, error) {
	raw, err := c.createEntity("Document_Телемаркетинг_Участники", data)
	if err != nil {
		return nil, err
	}
	result := DocumentTelemarketingUchastniki{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentTelemarketingUchastnikis(where Where) ([]DocumentTelemarketingUchastniki, error) {
	type ReturnObj struct {
		Value []DocumentTelemarketingUchastniki `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_Телемаркетинг_Участники", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentVozvratDavalcheskogoMetalla(Key Guid) (*DocumentVozvratDavalcheskogoMetalla, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ВозвратДавальческогоМеталла", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentVozvratDavalcheskogoMetalla{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentVozvratDavalcheskogoMetalla(Key Guid, entity interface{}) (*DocumentVozvratDavalcheskogoMetalla, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ВозвратДавальческогоМеталла", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentVozvratDavalcheskogoMetalla{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentVozvratDavalcheskogoMetalla(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ВозвратДавальческогоМеталла", args)
}

func (c *Client) CreateDocumentVozvratDavalcheskogoMetalla(data DocumentVozvratDavalcheskogoMetalla) (*DocumentVozvratDavalcheskogoMetalla, error) {
	raw, err := c.createEntity("Document_ВозвратДавальческогоМеталла", data)
	if err != nil {
		return nil, err
	}
	result := DocumentVozvratDavalcheskogoMetalla{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentVozvratDavalcheskogoMetallas(where Where) ([]DocumentVozvratDavalcheskogoMetalla, error) {
	type ReturnObj struct {
		Value []DocumentVozvratDavalcheskogoMetalla `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ВозвратДавальческогоМеталла", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogAdresnyeSokrashcheniia(Key Guid) (*CatalogAdresnyeSokrashcheniia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_АдресныеСокращения", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogAdresnyeSokrashcheniia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogAdresnyeSokrashcheniia(Key Guid, entity interface{}) (*CatalogAdresnyeSokrashcheniia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_АдресныеСокращения", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogAdresnyeSokrashcheniia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogAdresnyeSokrashcheniia(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_АдресныеСокращения", args)
}

func (c *Client) CreateCatalogAdresnyeSokrashcheniia(data CatalogAdresnyeSokrashcheniia) (*CatalogAdresnyeSokrashcheniia, error) {
	raw, err := c.createEntity("Catalog_АдресныеСокращения", data)
	if err != nil {
		return nil, err
	}
	result := CatalogAdresnyeSokrashcheniia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogAdresnyeSokrashcheniias(where Where) ([]CatalogAdresnyeSokrashcheniia, error) {
	type ReturnObj struct {
		Value []CatalogAdresnyeSokrashcheniia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_АдресныеСокращения", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentRassylkaAnket(Key Guid) (*DocumentRassylkaAnket, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_РассылкаАнкет", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentRassylkaAnket{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentRassylkaAnket(Key Guid, entity interface{}) (*DocumentRassylkaAnket, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_РассылкаАнкет", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentRassylkaAnket{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentRassylkaAnket(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_РассылкаАнкет", args)
}

func (c *Client) CreateDocumentRassylkaAnket(data DocumentRassylkaAnket) (*DocumentRassylkaAnket, error) {
	raw, err := c.createEntity("Document_РассылкаАнкет", data)
	if err != nil {
		return nil, err
	}
	result := DocumentRassylkaAnket{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentRassylkaAnkets(where Where) ([]DocumentRassylkaAnket, error) {
	type ReturnObj struct {
		Value []DocumentRassylkaAnket `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_РассылкаАнкет", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentRassylkaAnketVlozheniia(Key Guid, LineNumber Int) (*DocumentRassylkaAnketVlozheniia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_РассылкаАнкет_Вложения", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentRassylkaAnketVlozheniia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentRassylkaAnketVlozheniia(Key Guid, LineNumber Int, entity interface{}) (*DocumentRassylkaAnketVlozheniia, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_РассылкаАнкет_Вложения", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentRassylkaAnketVlozheniia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentRassylkaAnketVlozheniia(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_РассылкаАнкет_Вложения", args)
}

func (c *Client) CreateDocumentRassylkaAnketVlozheniia(data DocumentRassylkaAnketVlozheniia) (*DocumentRassylkaAnketVlozheniia, error) {
	raw, err := c.createEntity("Document_РассылкаАнкет_Вложения", data)
	if err != nil {
		return nil, err
	}
	result := DocumentRassylkaAnketVlozheniia{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentRassylkaAnketVlozheniias(where Where) ([]DocumentRassylkaAnketVlozheniia, error) {
	type ReturnObj struct {
		Value []DocumentRassylkaAnketVlozheniia `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_РассылкаАнкет_Вложения", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentRassylkaAnketPoluchateli(Key Guid, LineNumber Int) (*DocumentRassylkaAnketPoluchateli, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_РассылкаАнкет_Получатели", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentRassylkaAnketPoluchateli{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentRassylkaAnketPoluchateli(Key Guid, LineNumber Int, entity interface{}) (*DocumentRassylkaAnketPoluchateli, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_РассылкаАнкет_Получатели", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentRassylkaAnketPoluchateli{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentRassylkaAnketPoluchateli(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_РассылкаАнкет_Получатели", args)
}

func (c *Client) CreateDocumentRassylkaAnketPoluchateli(data DocumentRassylkaAnketPoluchateli) (*DocumentRassylkaAnketPoluchateli, error) {
	raw, err := c.createEntity("Document_РассылкаАнкет_Получатели", data)
	if err != nil {
		return nil, err
	}
	result := DocumentRassylkaAnketPoluchateli{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentRassylkaAnketPoluchatelis(where Where) ([]DocumentRassylkaAnketPoluchateli, error) {
	type ReturnObj struct {
		Value []DocumentRassylkaAnketPoluchateli `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_РассылкаАнкет_Получатели", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogVidyDeiatelnostiKontragentov(Key Guid) (*CatalogVidyDeiatelnostiKontragentov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ВидыДеятельностиКонтрагентов", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogVidyDeiatelnostiKontragentov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogVidyDeiatelnostiKontragentov(Key Guid, entity interface{}) (*CatalogVidyDeiatelnostiKontragentov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ВидыДеятельностиКонтрагентов", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogVidyDeiatelnostiKontragentov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogVidyDeiatelnostiKontragentov(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ВидыДеятельностиКонтрагентов", args)
}

func (c *Client) CreateCatalogVidyDeiatelnostiKontragentov(data CatalogVidyDeiatelnostiKontragentov) (*CatalogVidyDeiatelnostiKontragentov, error) {
	raw, err := c.createEntity("Catalog_ВидыДеятельностиКонтрагентов", data)
	if err != nil {
		return nil, err
	}
	result := CatalogVidyDeiatelnostiKontragentov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogVidyDeiatelnostiKontragentovs(where Where) ([]CatalogVidyDeiatelnostiKontragentov, error) {
	type ReturnObj struct {
		Value []CatalogVidyDeiatelnostiKontragentov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ВидыДеятельностиКонтрагентов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogTorgovoeOborudovanie(Key Guid) (*CatalogTorgovoeOborudovanie, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ТорговоеОборудование", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogTorgovoeOborudovanie{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogTorgovoeOborudovanie(Key Guid, entity interface{}) (*CatalogTorgovoeOborudovanie, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ТорговоеОборудование", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogTorgovoeOborudovanie{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogTorgovoeOborudovanie(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ТорговоеОборудование", args)
}

func (c *Client) CreateCatalogTorgovoeOborudovanie(data CatalogTorgovoeOborudovanie) (*CatalogTorgovoeOborudovanie, error) {
	raw, err := c.createEntity("Catalog_ТорговоеОборудование", data)
	if err != nil {
		return nil, err
	}
	result := CatalogTorgovoeOborudovanie{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogTorgovoeOborudovanies(where Where) ([]CatalogTorgovoeOborudovanie, error) {
	type ReturnObj struct {
		Value []CatalogTorgovoeOborudovanie `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ТорговоеОборудование", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogSkhemyRealizatsii(Key Guid) (*CatalogSkhemyRealizatsii, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_СхемыРеализации", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogSkhemyRealizatsii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogSkhemyRealizatsii(Key Guid, entity interface{}) (*CatalogSkhemyRealizatsii, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_СхемыРеализации", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogSkhemyRealizatsii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogSkhemyRealizatsii(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_СхемыРеализации", args)
}

func (c *Client) CreateCatalogSkhemyRealizatsii(data CatalogSkhemyRealizatsii) (*CatalogSkhemyRealizatsii, error) {
	raw, err := c.createEntity("Catalog_СхемыРеализации", data)
	if err != nil {
		return nil, err
	}
	result := CatalogSkhemyRealizatsii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogSkhemyRealizatsiis(where Where) ([]CatalogSkhemyRealizatsii, error) {
	type ReturnObj struct {
		Value []CatalogSkhemyRealizatsii `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_СхемыРеализации", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogSkhemyRealizatsiiEtapySkhemy(Key Guid, LineNumber Int) (*CatalogSkhemyRealizatsiiEtapySkhemy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_СхемыРеализации_ЭтапыСхемы", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogSkhemyRealizatsiiEtapySkhemy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogSkhemyRealizatsiiEtapySkhemy(Key Guid, LineNumber Int, entity interface{}) (*CatalogSkhemyRealizatsiiEtapySkhemy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_СхемыРеализации_ЭтапыСхемы", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogSkhemyRealizatsiiEtapySkhemy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogSkhemyRealizatsiiEtapySkhemy(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_СхемыРеализации_ЭтапыСхемы", args)
}

func (c *Client) CreateCatalogSkhemyRealizatsiiEtapySkhemy(data CatalogSkhemyRealizatsiiEtapySkhemy) (*CatalogSkhemyRealizatsiiEtapySkhemy, error) {
	raw, err := c.createEntity("Catalog_СхемыРеализации_ЭтапыСхемы", data)
	if err != nil {
		return nil, err
	}
	result := CatalogSkhemyRealizatsiiEtapySkhemy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogSkhemyRealizatsiiEtapySkhemys(where Where) ([]CatalogSkhemyRealizatsiiEtapySkhemy, error) {
	type ReturnObj struct {
		Value []CatalogSkhemyRealizatsiiEtapySkhemy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_СхемыРеализации_ЭтапыСхемы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogPodkliuchaemoeOborudovanie(Key Guid) (*CatalogPodkliuchaemoeOborudovanie, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ПодключаемоеОборудование", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogPodkliuchaemoeOborudovanie{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogPodkliuchaemoeOborudovanie(Key Guid, entity interface{}) (*CatalogPodkliuchaemoeOborudovanie, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ПодключаемоеОборудование", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogPodkliuchaemoeOborudovanie{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogPodkliuchaemoeOborudovanie(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ПодключаемоеОборудование", args)
}

func (c *Client) CreateCatalogPodkliuchaemoeOborudovanie(data CatalogPodkliuchaemoeOborudovanie) (*CatalogPodkliuchaemoeOborudovanie, error) {
	raw, err := c.createEntity("Catalog_ПодключаемоеОборудование", data)
	if err != nil {
		return nil, err
	}
	result := CatalogPodkliuchaemoeOborudovanie{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogPodkliuchaemoeOborudovanies(where Where) ([]CatalogPodkliuchaemoeOborudovanie, error) {
	type ReturnObj struct {
		Value []CatalogPodkliuchaemoeOborudovanie `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ПодключаемоеОборудование", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnoshenii(Key Guid) (*DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnoshenii, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_КлассификацияПокупателейПоСтадиямВзаимоотношений", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnoshenii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnoshenii(Key Guid, entity interface{}) (*DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnoshenii, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_КлассификацияПокупателейПоСтадиямВзаимоотношений", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnoshenii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnoshenii(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_КлассификацияПокупателейПоСтадиямВзаимоотношений", args)
}

func (c *Client) CreateDocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnoshenii(data DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnoshenii) (*DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnoshenii, error) {
	raw, err := c.createEntity("Document_КлассификацияПокупателейПоСтадиямВзаимоотношений", data)
	if err != nil {
		return nil, err
	}
	result := DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnoshenii{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniis(where Where) ([]DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnoshenii, error) {
	type ReturnObj struct {
		Value []DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnoshenii `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_КлассификацияПокупателейПоСтадиямВзаимоотношений", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentov(Key Guid, LineNumber Int) (*DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_КлассификацияПокупателейПоСтадиямВзаимоотношений_ТаблицаРаспределенияКонтрагентов", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentov(Key Guid, LineNumber Int, entity interface{}) (*DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_КлассификацияПокупателейПоСтадиямВзаимоотношений_ТаблицаРаспределенияКонтрагентов", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentov(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_КлассификацияПокупателейПоСтадиямВзаимоотношений_ТаблицаРаспределенияКонтрагентов", args)
}

func (c *Client) CreateDocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentov(data DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentov) (*DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentov, error) {
	raw, err := c.createEntity("Document_КлассификацияПокупателейПоСтадиямВзаимоотношений_ТаблицаРаспределенияКонтрагентов", data)
	if err != nil {
		return nil, err
	}
	result := DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentovs(where Where) ([]DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentov, error) {
	type ReturnObj struct {
		Value []DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_КлассификацияПокупателейПоСтадиямВзаимоотношений_ТаблицаРаспределенияКонтрагентов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogGabarity(Key Guid) (*CatalogGabarity, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_Габариты", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogGabarity{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogGabarity(Key Guid, entity interface{}) (*CatalogGabarity, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_Габариты", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogGabarity{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogGabarity(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_Габариты", args)
}

func (c *Client) CreateCatalogGabarity(data CatalogGabarity) (*CatalogGabarity, error) {
	raw, err := c.createEntity("Catalog_Габариты", data)
	if err != nil {
		return nil, err
	}
	result := CatalogGabarity{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogGabaritys(where Where) ([]CatalogGabarity, error) {
	type ReturnObj struct {
		Value []CatalogGabarity `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Габариты", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentZakazKlienta(Key Guid) (*DocumentZakazKlienta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ЗаказКлиента", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentZakazKlienta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentZakazKlienta(Key Guid, entity interface{}) (*DocumentZakazKlienta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ЗаказКлиента", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentZakazKlienta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentZakazKlienta(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ЗаказКлиента", args)
}

func (c *Client) CreateDocumentZakazKlienta(data DocumentZakazKlienta) (*DocumentZakazKlienta, error) {
	raw, err := c.createEntity("Document_ЗаказКлиента", data)
	if err != nil {
		return nil, err
	}
	result := DocumentZakazKlienta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentZakazKlientas(where Where) ([]DocumentZakazKlienta, error) {
	type ReturnObj struct {
		Value []DocumentZakazKlienta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗаказКлиента", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentZakazKlientaTovary(Key Guid, LineNumber Int) (*DocumentZakazKlientaTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ЗаказКлиента_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentZakazKlientaTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentZakazKlientaTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentZakazKlientaTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ЗаказКлиента_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentZakazKlientaTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentZakazKlientaTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ЗаказКлиента_Товары", args)
}

func (c *Client) CreateDocumentZakazKlientaTovary(data DocumentZakazKlientaTovary) (*DocumentZakazKlientaTovary, error) {
	raw, err := c.createEntity("Document_ЗаказКлиента_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentZakazKlientaTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentZakazKlientaTovarys(where Where) ([]DocumentZakazKlientaTovary, error) {
	type ReturnObj struct {
		Value []DocumentZakazKlientaTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ЗаказКлиента_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) ArriveFromManufacturing(Key Guid) (*ArriveFromManufacturing, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ПоступлениеПродукцииИзПроизводства", args, []string{})
	if err != nil {
		return nil, err
	}
	result := ArriveFromManufacturing{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateArriveFromManufacturing(Key Guid, entity interface{}) (*ArriveFromManufacturing, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ПоступлениеПродукцииИзПроизводства", args, entity)
	if err != nil {
		return nil, err
	}
	result := ArriveFromManufacturing{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveArriveFromManufacturing(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ПоступлениеПродукцииИзПроизводства", args)
}

func (c *Client) CreateArriveFromManufacturing(data ArriveFromManufacturing) (*ArriveFromManufacturing, error) {
	raw, err := c.createEntity("Document_ПоступлениеПродукцииИзПроизводства", data)
	if err != nil {
		return nil, err
	}
	result := ArriveFromManufacturing{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) ArriveFromManufacturings(where Where) ([]ArriveFromManufacturing, error) {
	type ReturnObj struct {
		Value []ArriveFromManufacturing `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПоступлениеПродукцииИзПроизводства", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) ArriveFromManufacturingInstance(Key Guid, LineNumber Int) (*ArriveFromManufacturingInstance, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ПоступлениеПродукцииИзПроизводства_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := ArriveFromManufacturingInstance{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateArriveFromManufacturingInstance(Key Guid, LineNumber Int, entity interface{}) (*ArriveFromManufacturingInstance, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ПоступлениеПродукцииИзПроизводства_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := ArriveFromManufacturingInstance{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveArriveFromManufacturingInstance(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ПоступлениеПродукцииИзПроизводства_Товары", args)
}

func (c *Client) CreateArriveFromManufacturingInstance(data ArriveFromManufacturingInstance) (*ArriveFromManufacturingInstance, error) {
	raw, err := c.createEntity("Document_ПоступлениеПродукцииИзПроизводства_Товары", data)
	if err != nil {
		return nil, err
	}
	result := ArriveFromManufacturingInstance{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) ArriveFromManufacturingInstances(where Where) ([]ArriveFromManufacturingInstance, error) {
	type ReturnObj struct {
		Value []ArriveFromManufacturingInstance `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПоступлениеПродукцииИзПроизводства_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPostuplenieProduktsiiIzProizvodstvaMaterialy(Key Guid, LineNumber Int) (*DocumentPostuplenieProduktsiiIzProizvodstvaMaterialy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ПоступлениеПродукцииИзПроизводства_Материалы", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPostuplenieProduktsiiIzProizvodstvaMaterialy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPostuplenieProduktsiiIzProizvodstvaMaterialy(Key Guid, LineNumber Int, entity interface{}) (*DocumentPostuplenieProduktsiiIzProizvodstvaMaterialy, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ПоступлениеПродукцииИзПроизводства_Материалы", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPostuplenieProduktsiiIzProizvodstvaMaterialy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPostuplenieProduktsiiIzProizvodstvaMaterialy(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ПоступлениеПродукцииИзПроизводства_Материалы", args)
}

func (c *Client) CreateDocumentPostuplenieProduktsiiIzProizvodstvaMaterialy(data DocumentPostuplenieProduktsiiIzProizvodstvaMaterialy) (*DocumentPostuplenieProduktsiiIzProizvodstvaMaterialy, error) {
	raw, err := c.createEntity("Document_ПоступлениеПродукцииИзПроизводства_Материалы", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPostuplenieProduktsiiIzProizvodstvaMaterialy{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPostuplenieProduktsiiIzProizvodstvaMaterialys(where Where) ([]DocumentPostuplenieProduktsiiIzProizvodstvaMaterialy, error) {
	type ReturnObj struct {
		Value []DocumentPostuplenieProduktsiiIzProizvodstvaMaterialy `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПоступлениеПродукцииИзПроизводства_Материалы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentJournalZakazyPostavshchikam(Ref String, RefType String) (*DocumentJournalZakazyPostavshchikam, error) {
	args := []string{fmt.Sprintf("Ref='%s' ", url.PathEscape(string(Ref))), fmt.Sprintf("Ref_Type='%s' ", url.PathEscape(string(RefType)))}
	raw, err := c.getEntity("DocumentJournal_ЗаказыПоставщикам", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentJournalZakazyPostavshchikam{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentJournalZakazyPostavshchikam(Ref String, RefType String, entity interface{}) (*DocumentJournalZakazyPostavshchikam, error) {
	args := []string{fmt.Sprintf("Ref='%s' ", url.PathEscape(string(Ref))), fmt.Sprintf("Ref_Type='%s' ", url.PathEscape(string(RefType)))}
	raw, err := c.updateEntity("DocumentJournal_ЗаказыПоставщикам", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentJournalZakazyPostavshchikam{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentJournalZakazyPostavshchikam(Ref String, RefType String) error {
	args := []string{fmt.Sprintf("Ref='%s' ", url.PathEscape(string(Ref))), fmt.Sprintf("Ref_Type='%s' ", url.PathEscape(string(RefType)))}
	return c.removeEntity("DocumentJournal_ЗаказыПоставщикам", args)
}

func (c *Client) CreateDocumentJournalZakazyPostavshchikam(data DocumentJournalZakazyPostavshchikam) (*DocumentJournalZakazyPostavshchikam, error) {
	raw, err := c.createEntity("DocumentJournal_ЗаказыПоставщикам", data)
	if err != nil {
		return nil, err
	}
	result := DocumentJournalZakazyPostavshchikam{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentJournalZakazyPostavshchikams(where Where) ([]DocumentJournalZakazyPostavshchikam, error) {
	type ReturnObj struct {
		Value []DocumentJournalZakazyPostavshchikam `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("DocumentJournal_ЗаказыПоставщикам", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentJournalSkladskieDokumenty(Ref String, RefType String) (*DocumentJournalSkladskieDokumenty, error) {
	args := []string{fmt.Sprintf("Ref='%s' ", url.PathEscape(string(Ref))), fmt.Sprintf("Ref_Type='%s' ", url.PathEscape(string(RefType)))}
	raw, err := c.getEntity("DocumentJournal_СкладскиеДокументы", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentJournalSkladskieDokumenty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentJournalSkladskieDokumenty(Ref String, RefType String, entity interface{}) (*DocumentJournalSkladskieDokumenty, error) {
	args := []string{fmt.Sprintf("Ref='%s' ", url.PathEscape(string(Ref))), fmt.Sprintf("Ref_Type='%s' ", url.PathEscape(string(RefType)))}
	raw, err := c.updateEntity("DocumentJournal_СкладскиеДокументы", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentJournalSkladskieDokumenty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentJournalSkladskieDokumenty(Ref String, RefType String) error {
	args := []string{fmt.Sprintf("Ref='%s' ", url.PathEscape(string(Ref))), fmt.Sprintf("Ref_Type='%s' ", url.PathEscape(string(RefType)))}
	return c.removeEntity("DocumentJournal_СкладскиеДокументы", args)
}

func (c *Client) CreateDocumentJournalSkladskieDokumenty(data DocumentJournalSkladskieDokumenty) (*DocumentJournalSkladskieDokumenty, error) {
	raw, err := c.createEntity("DocumentJournal_СкладскиеДокументы", data)
	if err != nil {
		return nil, err
	}
	result := DocumentJournalSkladskieDokumenty{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentJournalSkladskieDokumentys(where Where) ([]DocumentJournalSkladskieDokumenty, error) {
	type ReturnObj struct {
		Value []DocumentJournalSkladskieDokumenty `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("DocumentJournal_СкладскиеДокументы", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogsmsUsloviiaOtboraDiskontnykhKart(Key Guid) (*CatalogsmsUsloviiaOtboraDiskontnykhKart, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_смсУсловияОтбораДисконтныхКарт", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogsmsUsloviiaOtboraDiskontnykhKart{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogsmsUsloviiaOtboraDiskontnykhKart(Key Guid, entity interface{}) (*CatalogsmsUsloviiaOtboraDiskontnykhKart, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_смсУсловияОтбораДисконтныхКарт", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogsmsUsloviiaOtboraDiskontnykhKart{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogsmsUsloviiaOtboraDiskontnykhKart(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_смсУсловияОтбораДисконтныхКарт", args)
}

func (c *Client) CreateCatalogsmsUsloviiaOtboraDiskontnykhKart(data CatalogsmsUsloviiaOtboraDiskontnykhKart) (*CatalogsmsUsloviiaOtboraDiskontnykhKart, error) {
	raw, err := c.createEntity("Catalog_смсУсловияОтбораДисконтныхКарт", data)
	if err != nil {
		return nil, err
	}
	result := CatalogsmsUsloviiaOtboraDiskontnykhKart{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogsmsUsloviiaOtboraDiskontnykhKarts(where Where) ([]CatalogsmsUsloviiaOtboraDiskontnykhKart, error) {
	type ReturnObj struct {
		Value []CatalogsmsUsloviiaOtboraDiskontnykhKart `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_смсУсловияОтбораДисконтныхКарт", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) Arrive(Key Guid) (*Arrive, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ПоступлениеТоваровУслуг", args, []string{})
	if err != nil {
		return nil, err
	}
	result := Arrive{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateArrive(Key Guid, entity interface{}) (*Arrive, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ПоступлениеТоваровУслуг", args, entity)
	if err != nil {
		return nil, err
	}
	result := Arrive{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveArrive(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ПоступлениеТоваровУслуг", args)
}

func (c *Client) CreateArrive(data Arrive) (*Arrive, error) {
	raw, err := c.createEntity("Document_ПоступлениеТоваровУслуг", data)
	if err != nil {
		return nil, err
	}
	result := Arrive{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) Arrives(where Where) ([]Arrive, error) {
	type ReturnObj struct {
		Value []Arrive `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПоступлениеТоваровУслуг", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPostuplenieTovarovUslugTovary(Key Guid, LineNumber Int) (*DocumentPostuplenieTovarovUslugTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ПоступлениеТоваровУслуг_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPostuplenieTovarovUslugTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPostuplenieTovarovUslugTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentPostuplenieTovarovUslugTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ПоступлениеТоваровУслуг_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPostuplenieTovarovUslugTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPostuplenieTovarovUslugTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ПоступлениеТоваровУслуг_Товары", args)
}

func (c *Client) CreateDocumentPostuplenieTovarovUslugTovary(data DocumentPostuplenieTovarovUslugTovary) (*DocumentPostuplenieTovarovUslugTovary, error) {
	raw, err := c.createEntity("Document_ПоступлениеТоваровУслуг_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPostuplenieTovarovUslugTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPostuplenieTovarovUslugTovarys(where Where) ([]DocumentPostuplenieTovarovUslugTovary, error) {
	type ReturnObj struct {
		Value []DocumentPostuplenieTovarovUslugTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПоступлениеТоваровУслуг_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPostuplenieTovarovUslugUslugi(Key Guid, LineNumber Int) (*DocumentPostuplenieTovarovUslugUslugi, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ПоступлениеТоваровУслуг_Услуги", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPostuplenieTovarovUslugUslugi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPostuplenieTovarovUslugUslugi(Key Guid, LineNumber Int, entity interface{}) (*DocumentPostuplenieTovarovUslugUslugi, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ПоступлениеТоваровУслуг_Услуги", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPostuplenieTovarovUslugUslugi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPostuplenieTovarovUslugUslugi(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ПоступлениеТоваровУслуг_Услуги", args)
}

func (c *Client) CreateDocumentPostuplenieTovarovUslugUslugi(data DocumentPostuplenieTovarovUslugUslugi) (*DocumentPostuplenieTovarovUslugUslugi, error) {
	raw, err := c.createEntity("Document_ПоступлениеТоваровУслуг_Услуги", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPostuplenieTovarovUslugUslugi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPostuplenieTovarovUslugUslugis(where Where) ([]DocumentPostuplenieTovarovUslugUslugi, error) {
	type ReturnObj struct {
		Value []DocumentPostuplenieTovarovUslugUslugi `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПоступлениеТоваровУслуг_Услуги", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentSchetFakturaVydannyi(Key Guid) (*DocumentSchetFakturaVydannyi, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_СчетФактураВыданный", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentSchetFakturaVydannyi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentSchetFakturaVydannyi(Key Guid, entity interface{}) (*DocumentSchetFakturaVydannyi, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_СчетФактураВыданный", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentSchetFakturaVydannyi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentSchetFakturaVydannyi(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_СчетФактураВыданный", args)
}

func (c *Client) CreateDocumentSchetFakturaVydannyi(data DocumentSchetFakturaVydannyi) (*DocumentSchetFakturaVydannyi, error) {
	raw, err := c.createEntity("Document_СчетФактураВыданный", data)
	if err != nil {
		return nil, err
	}
	result := DocumentSchetFakturaVydannyi{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentSchetFakturaVydannyis(where Where) ([]DocumentSchetFakturaVydannyi, error) {
	type ReturnObj struct {
		Value []DocumentSchetFakturaVydannyi `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СчетФактураВыданный", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPlanProdazhPoSalonam(Key Guid) (*DocumentPlanProdazhPoSalonam, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ПланПродажПоСалонам", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPlanProdazhPoSalonam{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPlanProdazhPoSalonam(Key Guid, entity interface{}) (*DocumentPlanProdazhPoSalonam, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ПланПродажПоСалонам", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPlanProdazhPoSalonam{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPlanProdazhPoSalonam(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ПланПродажПоСалонам", args)
}

func (c *Client) CreateDocumentPlanProdazhPoSalonam(data DocumentPlanProdazhPoSalonam) (*DocumentPlanProdazhPoSalonam, error) {
	raw, err := c.createEntity("Document_ПланПродажПоСалонам", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPlanProdazhPoSalonam{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPlanProdazhPoSalonams(where Where) ([]DocumentPlanProdazhPoSalonam, error) {
	type ReturnObj struct {
		Value []DocumentPlanProdazhPoSalonam `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПланПродажПоСалонам", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPlanProdazhPoSalonamSalony(Key Guid, LineNumber Int) (*DocumentPlanProdazhPoSalonamSalony, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ПланПродажПоСалонам_Салоны", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPlanProdazhPoSalonamSalony{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPlanProdazhPoSalonamSalony(Key Guid, LineNumber Int, entity interface{}) (*DocumentPlanProdazhPoSalonamSalony, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ПланПродажПоСалонам_Салоны", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPlanProdazhPoSalonamSalony{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPlanProdazhPoSalonamSalony(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ПланПродажПоСалонам_Салоны", args)
}

func (c *Client) CreateDocumentPlanProdazhPoSalonamSalony(data DocumentPlanProdazhPoSalonamSalony) (*DocumentPlanProdazhPoSalonamSalony, error) {
	raw, err := c.createEntity("Document_ПланПродажПоСалонам_Салоны", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPlanProdazhPoSalonamSalony{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPlanProdazhPoSalonamSalonys(where Where) ([]DocumentPlanProdazhPoSalonamSalony, error) {
	type ReturnObj struct {
		Value []DocumentPlanProdazhPoSalonamSalony `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПланПродажПоСалонам_Салоны", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPlanProdazhPoSalonamDniPoGrafiku(Key Guid, LineNumber Int) (*DocumentPlanProdazhPoSalonamDniPoGrafiku, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ПланПродажПоСалонам_ДниПоГрафику", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPlanProdazhPoSalonamDniPoGrafiku{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPlanProdazhPoSalonamDniPoGrafiku(Key Guid, LineNumber Int, entity interface{}) (*DocumentPlanProdazhPoSalonamDniPoGrafiku, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ПланПродажПоСалонам_ДниПоГрафику", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPlanProdazhPoSalonamDniPoGrafiku{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPlanProdazhPoSalonamDniPoGrafiku(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ПланПродажПоСалонам_ДниПоГрафику", args)
}

func (c *Client) CreateDocumentPlanProdazhPoSalonamDniPoGrafiku(data DocumentPlanProdazhPoSalonamDniPoGrafiku) (*DocumentPlanProdazhPoSalonamDniPoGrafiku, error) {
	raw, err := c.createEntity("Document_ПланПродажПоСалонам_ДниПоГрафику", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPlanProdazhPoSalonamDniPoGrafiku{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPlanProdazhPoSalonamDniPoGrafikus(where Where) ([]DocumentPlanProdazhPoSalonamDniPoGrafiku, error) {
	type ReturnObj struct {
		Value []DocumentPlanProdazhPoSalonamDniPoGrafiku `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПланПродажПоСалонам_ДниПоГрафику", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogBankovskieScheta(Key Guid) (*CatalogBankovskieScheta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_БанковскиеСчета", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogBankovskieScheta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogBankovskieScheta(Key Guid, entity interface{}) (*CatalogBankovskieScheta, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_БанковскиеСчета", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogBankovskieScheta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogBankovskieScheta(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_БанковскиеСчета", args)
}

func (c *Client) CreateCatalogBankovskieScheta(data CatalogBankovskieScheta) (*CatalogBankovskieScheta, error) {
	raw, err := c.createEntity("Catalog_БанковскиеСчета", data)
	if err != nil {
		return nil, err
	}
	result := CatalogBankovskieScheta{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogBankovskieSchetas(where Where) ([]CatalogBankovskieScheta, error) {
	type ReturnObj struct {
		Value []CatalogBankovskieScheta `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_БанковскиеСчета", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentStornirovanieOtchetaKomitentuOProdazhakh(Key Guid) (*DocumentStornirovanieOtchetaKomitentuOProdazhakh, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_СторнированиеОтчетаКомитентуОПродажах", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentStornirovanieOtchetaKomitentuOProdazhakh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentStornirovanieOtchetaKomitentuOProdazhakh(Key Guid, entity interface{}) (*DocumentStornirovanieOtchetaKomitentuOProdazhakh, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_СторнированиеОтчетаКомитентуОПродажах", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentStornirovanieOtchetaKomitentuOProdazhakh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentStornirovanieOtchetaKomitentuOProdazhakh(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_СторнированиеОтчетаКомитентуОПродажах", args)
}

func (c *Client) CreateDocumentStornirovanieOtchetaKomitentuOProdazhakh(data DocumentStornirovanieOtchetaKomitentuOProdazhakh) (*DocumentStornirovanieOtchetaKomitentuOProdazhakh, error) {
	raw, err := c.createEntity("Document_СторнированиеОтчетаКомитентуОПродажах", data)
	if err != nil {
		return nil, err
	}
	result := DocumentStornirovanieOtchetaKomitentuOProdazhakh{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentStornirovanieOtchetaKomitentuOProdazhakhs(where Where) ([]DocumentStornirovanieOtchetaKomitentuOProdazhakh, error) {
	type ReturnObj struct {
		Value []DocumentStornirovanieOtchetaKomitentuOProdazhakh `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СторнированиеОтчетаКомитентуОПродажах", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstva(Key Guid, LineNumber Int) (*DocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstva, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_СторнированиеОтчетаКомитентуОПродажах_ДенежныеСредства", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstva{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstva(Key Guid, LineNumber Int, entity interface{}) (*DocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstva, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_СторнированиеОтчетаКомитентуОПродажах_ДенежныеСредства", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstva{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstva(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_СторнированиеОтчетаКомитентуОПродажах_ДенежныеСредства", args)
}

func (c *Client) CreateDocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstva(data DocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstva) (*DocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstva, error) {
	raw, err := c.createEntity("Document_СторнированиеОтчетаКомитентуОПродажах_ДенежныеСредства", data)
	if err != nil {
		return nil, err
	}
	result := DocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstva{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstvas(where Where) ([]DocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstva, error) {
	type ReturnObj struct {
		Value []DocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstva `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СторнированиеОтчетаКомитентуОПродажах_ДенежныеСредства", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentStornirovanieOtchetaKomitentuOProdazhakhTovary(Key Guid, LineNumber Int) (*DocumentStornirovanieOtchetaKomitentuOProdazhakhTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_СторнированиеОтчетаКомитентуОПродажах_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentStornirovanieOtchetaKomitentuOProdazhakhTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentStornirovanieOtchetaKomitentuOProdazhakhTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentStornirovanieOtchetaKomitentuOProdazhakhTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_СторнированиеОтчетаКомитентуОПродажах_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentStornirovanieOtchetaKomitentuOProdazhakhTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentStornirovanieOtchetaKomitentuOProdazhakhTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_СторнированиеОтчетаКомитентуОПродажах_Товары", args)
}

func (c *Client) CreateDocumentStornirovanieOtchetaKomitentuOProdazhakhTovary(data DocumentStornirovanieOtchetaKomitentuOProdazhakhTovary) (*DocumentStornirovanieOtchetaKomitentuOProdazhakhTovary, error) {
	raw, err := c.createEntity("Document_СторнированиеОтчетаКомитентуОПродажах_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentStornirovanieOtchetaKomitentuOProdazhakhTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentStornirovanieOtchetaKomitentuOProdazhakhTovarys(where Where) ([]DocumentStornirovanieOtchetaKomitentuOProdazhakhTovary, error) {
	type ReturnObj struct {
		Value []DocumentStornirovanieOtchetaKomitentuOProdazhakhTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_СторнированиеОтчетаКомитентуОПродажах_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPeredachaVRemont(Key Guid) (*DocumentPeredachaVRemont, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Document_ПередачаВРемонт", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPeredachaVRemont{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPeredachaVRemont(Key Guid, entity interface{}) (*DocumentPeredachaVRemont, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Document_ПередачаВРемонт", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPeredachaVRemont{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPeredachaVRemont(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Document_ПередачаВРемонт", args)
}

func (c *Client) CreateDocumentPeredachaVRemont(data DocumentPeredachaVRemont) (*DocumentPeredachaVRemont, error) {
	raw, err := c.createEntity("Document_ПередачаВРемонт", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPeredachaVRemont{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPeredachaVRemonts(where Where) ([]DocumentPeredachaVRemont, error) {
	type ReturnObj struct {
		Value []DocumentPeredachaVRemont `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПередачаВРемонт", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPeredachaVRemontIzdeliiaPriniatyeVRemont(Key Guid, LineNumber Int) (*DocumentPeredachaVRemontIzdeliiaPriniatyeVRemont, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ПередачаВРемонт_ИзделияПринятыеВРемонт", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPeredachaVRemontIzdeliiaPriniatyeVRemont{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPeredachaVRemontIzdeliiaPriniatyeVRemont(Key Guid, LineNumber Int, entity interface{}) (*DocumentPeredachaVRemontIzdeliiaPriniatyeVRemont, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ПередачаВРемонт_ИзделияПринятыеВРемонт", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPeredachaVRemontIzdeliiaPriniatyeVRemont{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPeredachaVRemontIzdeliiaPriniatyeVRemont(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ПередачаВРемонт_ИзделияПринятыеВРемонт", args)
}

func (c *Client) CreateDocumentPeredachaVRemontIzdeliiaPriniatyeVRemont(data DocumentPeredachaVRemontIzdeliiaPriniatyeVRemont) (*DocumentPeredachaVRemontIzdeliiaPriniatyeVRemont, error) {
	raw, err := c.createEntity("Document_ПередачаВРемонт_ИзделияПринятыеВРемонт", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPeredachaVRemontIzdeliiaPriniatyeVRemont{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPeredachaVRemontIzdeliiaPriniatyeVRemonts(where Where) ([]DocumentPeredachaVRemontIzdeliiaPriniatyeVRemont, error) {
	type ReturnObj struct {
		Value []DocumentPeredachaVRemontIzdeliiaPriniatyeVRemont `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПередачаВРемонт_ИзделияПринятыеВРемонт", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) DocumentPeredachaVRemontTovary(Key Guid, LineNumber Int) (*DocumentPeredachaVRemontTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Document_ПередачаВРемонт_Товары", args, []string{})
	if err != nil {
		return nil, err
	}
	result := DocumentPeredachaVRemontTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateDocumentPeredachaVRemontTovary(Key Guid, LineNumber Int, entity interface{}) (*DocumentPeredachaVRemontTovary, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Document_ПередачаВРемонт_Товары", args, entity)
	if err != nil {
		return nil, err
	}
	result := DocumentPeredachaVRemontTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveDocumentPeredachaVRemontTovary(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Document_ПередачаВРемонт_Товары", args)
}

func (c *Client) CreateDocumentPeredachaVRemontTovary(data DocumentPeredachaVRemontTovary) (*DocumentPeredachaVRemontTovary, error) {
	raw, err := c.createEntity("Document_ПередачаВРемонт_Товары", data)
	if err != nil {
		return nil, err
	}
	result := DocumentPeredachaVRemontTovary{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) DocumentPeredachaVRemontTovarys(where Where) ([]DocumentPeredachaVRemontTovary, error) {
	type ReturnObj struct {
		Value []DocumentPeredachaVRemontTovary `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Document_ПередачаВРемонт_Товары", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogPolzovateli(Key Guid) (*CatalogPolzovateli, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_Пользователи", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogPolzovateli{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogPolzovateli(Key Guid, entity interface{}) (*CatalogPolzovateli, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_Пользователи", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogPolzovateli{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogPolzovateli(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_Пользователи", args)
}

func (c *Client) CreateCatalogPolzovateli(data CatalogPolzovateli) (*CatalogPolzovateli, error) {
	raw, err := c.createEntity("Catalog_Пользователи", data)
	if err != nil {
		return nil, err
	}
	result := CatalogPolzovateli{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogPolzovatelis(where Where) ([]CatalogPolzovateli, error) {
	type ReturnObj struct {
		Value []CatalogPolzovateli `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_Пользователи", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogTsenovyeKoridory(Key Guid) (*CatalogTsenovyeKoridory, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ЦеновыеКоридоры", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogTsenovyeKoridory{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogTsenovyeKoridory(Key Guid, entity interface{}) (*CatalogTsenovyeKoridory, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ЦеновыеКоридоры", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogTsenovyeKoridory{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogTsenovyeKoridory(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ЦеновыеКоридоры", args)
}

func (c *Client) CreateCatalogTsenovyeKoridory(data CatalogTsenovyeKoridory) (*CatalogTsenovyeKoridory, error) {
	raw, err := c.createEntity("Catalog_ЦеновыеКоридоры", data)
	if err != nil {
		return nil, err
	}
	result := CatalogTsenovyeKoridory{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogTsenovyeKoridorys(where Where) ([]CatalogTsenovyeKoridory, error) {
	type ReturnObj struct {
		Value []CatalogTsenovyeKoridory `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ЦеновыеКоридоры", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogGruppySkladov(Key Guid) (*CatalogGruppySkladov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.getEntity("Catalog_ГруппыСкладов", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogGruppySkladov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogGruppySkladov(Key Guid, entity interface{}) (*CatalogGruppySkladov, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	raw, err := c.updateEntity("Catalog_ГруппыСкладов", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogGruppySkladov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogGruppySkladov(Key Guid) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key)))}
	return c.removeEntity("Catalog_ГруппыСкладов", args)
}

func (c *Client) CreateCatalogGruppySkladov(data CatalogGruppySkladov) (*CatalogGruppySkladov, error) {
	raw, err := c.createEntity("Catalog_ГруппыСкладов", data)
	if err != nil {
		return nil, err
	}
	result := CatalogGruppySkladov{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogGruppySkladovs(where Where) ([]CatalogGruppySkladov, error) {
	type ReturnObj struct {
		Value []CatalogGruppySkladov `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ГруппыСкладов", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}

func (c *Client) CatalogGruppySkladovSklady(Key Guid, LineNumber Int) (*CatalogGruppySkladovSklady, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.getEntity("Catalog_ГруппыСкладов_Склады", args, []string{})
	if err != nil {
		return nil, err
	}
	result := CatalogGruppySkladovSklady{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) UpdateCatalogGruppySkladovSklady(Key Guid, LineNumber Int, entity interface{}) (*CatalogGruppySkladovSklady, error) {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	raw, err := c.updateEntity("Catalog_ГруппыСкладов_Склады", args, entity)
	if err != nil {
		return nil, err
	}
	result := CatalogGruppySkladovSklady{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}
func (c *Client) RemoveCatalogGruppySkladovSklady(Key Guid, LineNumber Int) error {
	args := []string{fmt.Sprintf("Ref_Key=guid'%s' ", url.PathEscape(string(Key))), fmt.Sprintf("LineNumber=%d ", LineNumber)}
	return c.removeEntity("Catalog_ГруппыСкладов_Склады", args)
}

func (c *Client) CreateCatalogGruppySkladovSklady(data CatalogGruppySkladovSklady) (*CatalogGruppySkladovSklady, error) {
	raw, err := c.createEntity("Catalog_ГруппыСкладов_Склады", data)
	if err != nil {
		return nil, err
	}
	result := CatalogGruppySkladovSklady{}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return &result, nil
}

func (c *Client) CatalogGruppySkladovSkladys(where Where) ([]CatalogGruppySkladovSklady, error) {
	type ReturnObj struct {
		Value []CatalogGruppySkladovSklady `json:"value"`
	}

	result := ReturnObj{}

	raw, err := c.getEntities("Catalog_ГруппыСкладов_Склады", where)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return nil, err
	}

	return result.Value, nil
}
