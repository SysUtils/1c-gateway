package odata

import (
	"encoding/json"
	"fmt"
	"net/url"
)

type NumberQualifiers struct {
	AllowedSign    String `xml:"AllowedSign" json:"AllowedSign,omitempty"`
	Digits         Int    `xml:"Digits" json:"Digits,omitempty"`
	FractionDigits Int    `xml:"FractionDigits" json:"FractionDigits,omitempty"`
}

type TypeDescription struct {
	Types            []String         `xml:"Types" json:"Types,omitempty"`
	NumberQualifiers NumberQualifiers `xml:"NumberQualifiers" json:"NumberQualifiers,omitempty"`
}

type PointInTime struct {
	Ref  String `xml:"Ref" json:"Ref,omitempty"`
	Date Time   `xml:"Date" json:"Date,omitempty"`
}

type AccumulationRegisterPartiiTovarovVProizvodstveRowType struct {
	Recorder                       String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                         *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber                     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                         *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType                     *String  `xml:"RecordType" json:"RecordType,omitempty"`
	ProizvodstvennyiUchastokKey    *Guid    `xml:"ПроизводственныйУчасток_Key" json:"ПроизводственныйУчасток_Key,omitempty"`
	Nomenklatura                   *String  `xml:"Номенклатура" json:"Номенклатура,omitempty"`
	OrganizatsiiaKey               *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DogovorKontragentaKey          *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOprikhodovaniia        *String  `xml:"ДокументОприходования" json:"ДокументОприходования,omitempty"`
	KharakteristikaNomenklaturyKey *Guid    `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid    `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	Quantity                       *Int     `xml:"Количество" json:"Количество,omitempty"`
	Weight                         *Float   `xml:"Вес" json:"Вес,omitempty"`
	Cost                           *Float   `xml:"Стоимость" json:"Стоимость,omitempty"`
	StoimostUpr                    *Float   `xml:"СтоимостьУпр" json:"СтоимостьУпр,omitempty"`
	StoimostBezNDS                 *Float   `xml:"СтоимостьБезНДС" json:"СтоимостьБезНДС,omitempty"`
	OperationCode                  *String  `xml:"КодОперации" json:"КодОперации,omitempty"`
	SpisaniePartii                 *Boolean `xml:"СписаниеПартий" json:"СписаниеПартий,omitempty"`
	NomerKorStroki                 *Int     `xml:"НомерКорСтроки" json:"НомерКорСтроки,omitempty"`
	RecorderType                   String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	ItemType                       *String  `xml:"Номенклатура_Type" json:"Номенклатура_Type,omitempty"`
	DokumentOprikhodovaniiaType    *String  `xml:"ДокументОприходования_Type" json:"ДокументОприходования_Type,omitempty"`
}

type AccumulationRegisterPartiiTovarovVProizvodstveBalance struct {
	ProizvodstvennyiUchastokKey    *Guid   `xml:"ПроизводственныйУчасток_Key" json:"ПроизводственныйУчасток_Key,omitempty"`
	Nomenklatura                   *String `xml:"Номенклатура" json:"Номенклатура,omitempty"`
	OrganizatsiiaKey               *Guid   `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DogovorKontragentaKey          *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOprikhodovaniia        *String `xml:"ДокументОприходования" json:"ДокументОприходования,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KolichestvoBalance             *Int    `xml:"КоличествоBalance" json:"КоличествоBalance,omitempty"`
	VesBalance                     *Float  `xml:"ВесBalance" json:"ВесBalance,omitempty"`
	StoimostBalance                *Float  `xml:"СтоимостьBalance" json:"СтоимостьBalance,omitempty"`
	StoimostUprBalance             *Float  `xml:"СтоимостьУпрBalance" json:"СтоимостьУпрBalance,omitempty"`
	StoimostBezNDSBalance          *Float  `xml:"СтоимостьБезНДСBalance" json:"СтоимостьБезНДСBalance,omitempty"`
	ItemType                       *String `xml:"Номенклатура_Type" json:"Номенклатура_Type,omitempty"`
	DokumentOprikhodovaniiaType    *String `xml:"ДокументОприходования_Type" json:"ДокументОприходования_Type,omitempty"`
}

type AccumulationRegisterPartiiTovarovVProizvodstveTurnover struct {
	ProizvodstvennyiUchastokKey    *Guid   `xml:"ПроизводственныйУчасток_Key" json:"ПроизводственныйУчасток_Key,omitempty"`
	Nomenklatura                   *String `xml:"Номенклатура" json:"Номенклатура,omitempty"`
	OrganizatsiiaKey               *Guid   `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DogovorKontragentaKey          *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOprikhodovaniia        *String `xml:"ДокументОприходования" json:"ДокументОприходования,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	Period                         *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod                   *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod                   *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                     *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                      *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                     *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod                  *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                    *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod                  *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod                 *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                     *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                       *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                     *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	KolichestvoTurnover            *Int    `xml:"КоличествоTurnover" json:"КоличествоTurnover,omitempty"`
	KolichestvoReceipt             *Int    `xml:"КоличествоReceipt" json:"КоличествоReceipt,omitempty"`
	KolichestvoExpense             *Int    `xml:"КоличествоExpense" json:"КоличествоExpense,omitempty"`
	VesTurnover                    *Float  `xml:"ВесTurnover" json:"ВесTurnover,omitempty"`
	VesReceipt                     *Float  `xml:"ВесReceipt" json:"ВесReceipt,omitempty"`
	VesExpense                     *Float  `xml:"ВесExpense" json:"ВесExpense,omitempty"`
	StoimostTurnover               *Float  `xml:"СтоимостьTurnover" json:"СтоимостьTurnover,omitempty"`
	StoimostReceipt                *Float  `xml:"СтоимостьReceipt" json:"СтоимостьReceipt,omitempty"`
	StoimostExpense                *Float  `xml:"СтоимостьExpense" json:"СтоимостьExpense,omitempty"`
	StoimostUprTurnover            *Float  `xml:"СтоимостьУпрTurnover" json:"СтоимостьУпрTurnover,omitempty"`
	StoimostUprReceipt             *Float  `xml:"СтоимостьУпрReceipt" json:"СтоимостьУпрReceipt,omitempty"`
	StoimostUprExpense             *Float  `xml:"СтоимостьУпрExpense" json:"СтоимостьУпрExpense,omitempty"`
	StoimostBezNDSTurnover         *Float  `xml:"СтоимостьБезНДСTurnover" json:"СтоимостьБезНДСTurnover,omitempty"`
	StoimostBezNDSReceipt          *Float  `xml:"СтоимостьБезНДСReceipt" json:"СтоимостьБезНДСReceipt,omitempty"`
	StoimostBezNDSExpense          *Float  `xml:"СтоимостьБезНДСExpense" json:"СтоимостьБезНДСExpense,omitempty"`
	ItemType                       *String `xml:"Номенклатура_Type" json:"Номенклатура_Type,omitempty"`
	DokumentOprikhodovaniiaType    *String `xml:"ДокументОприходования_Type" json:"ДокументОприходования_Type,omitempty"`
	RecorderType                   *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterPartiiTovarovVProizvodstveBalanceAndTurnover struct {
	ProizvodstvennyiUchastokKey    *Guid   `xml:"ПроизводственныйУчасток_Key" json:"ПроизводственныйУчасток_Key,omitempty"`
	Nomenklatura                   *String `xml:"Номенклатура" json:"Номенклатура,omitempty"`
	OrganizatsiiaKey               *Guid   `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DogovorKontragentaKey          *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOprikhodovaniia        *String `xml:"ДокументОприходования" json:"ДокументОприходования,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	Period                         *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod                   *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod                   *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                     *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                      *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                     *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod                  *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                    *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod                  *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod                 *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                     *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                       *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                     *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	KolichestvoOpeningBalance      *Int    `xml:"КоличествоOpeningBalance" json:"КоличествоOpeningBalance,omitempty"`
	KolichestvoTurnover            *Int    `xml:"КоличествоTurnover" json:"КоличествоTurnover,omitempty"`
	KolichestvoReceipt             *Int    `xml:"КоличествоReceipt" json:"КоличествоReceipt,omitempty"`
	KolichestvoExpense             *Int    `xml:"КоличествоExpense" json:"КоличествоExpense,omitempty"`
	KolichestvoClosingBalance      *Int    `xml:"КоличествоClosingBalance" json:"КоличествоClosingBalance,omitempty"`
	VesOpeningBalance              *Float  `xml:"ВесOpeningBalance" json:"ВесOpeningBalance,omitempty"`
	VesTurnover                    *Float  `xml:"ВесTurnover" json:"ВесTurnover,omitempty"`
	VesReceipt                     *Float  `xml:"ВесReceipt" json:"ВесReceipt,omitempty"`
	VesExpense                     *Float  `xml:"ВесExpense" json:"ВесExpense,omitempty"`
	VesClosingBalance              *Float  `xml:"ВесClosingBalance" json:"ВесClosingBalance,omitempty"`
	StoimostOpeningBalance         *Float  `xml:"СтоимостьOpeningBalance" json:"СтоимостьOpeningBalance,omitempty"`
	StoimostTurnover               *Float  `xml:"СтоимостьTurnover" json:"СтоимостьTurnover,omitempty"`
	StoimostReceipt                *Float  `xml:"СтоимостьReceipt" json:"СтоимостьReceipt,omitempty"`
	StoimostExpense                *Float  `xml:"СтоимостьExpense" json:"СтоимостьExpense,omitempty"`
	StoimostClosingBalance         *Float  `xml:"СтоимостьClosingBalance" json:"СтоимостьClosingBalance,omitempty"`
	StoimostUprOpeningBalance      *Float  `xml:"СтоимостьУпрOpeningBalance" json:"СтоимостьУпрOpeningBalance,omitempty"`
	StoimostUprTurnover            *Float  `xml:"СтоимостьУпрTurnover" json:"СтоимостьУпрTurnover,omitempty"`
	StoimostUprReceipt             *Float  `xml:"СтоимостьУпрReceipt" json:"СтоимостьУпрReceipt,omitempty"`
	StoimostUprExpense             *Float  `xml:"СтоимостьУпрExpense" json:"СтоимостьУпрExpense,omitempty"`
	StoimostUprClosingBalance      *Float  `xml:"СтоимостьУпрClosingBalance" json:"СтоимостьУпрClosingBalance,omitempty"`
	StoimostBezNDSOpeningBalance   *Float  `xml:"СтоимостьБезНДСOpeningBalance" json:"СтоимостьБезНДСOpeningBalance,omitempty"`
	StoimostBezNDSTurnover         *Float  `xml:"СтоимостьБезНДСTurnover" json:"СтоимостьБезНДСTurnover,omitempty"`
	StoimostBezNDSReceipt          *Float  `xml:"СтоимостьБезНДСReceipt" json:"СтоимостьБезНДСReceipt,omitempty"`
	StoimostBezNDSExpense          *Float  `xml:"СтоимостьБезНДСExpense" json:"СтоимостьБезНДСExpense,omitempty"`
	StoimostBezNDSClosingBalance   *Float  `xml:"СтоимостьБезНДСClosingBalance" json:"СтоимостьБезНДСClosingBalance,omitempty"`
	ItemType                       *String `xml:"Номенклатура_Type" json:"Номенклатура_Type,omitempty"`
	DokumentOprikhodovaniiaType    *String `xml:"ДокументОприходования_Type" json:"ДокументОприходования_Type,omitempty"`
	RecorderType                   *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRowType struct {
	Recorder               String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                 *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber             Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                 *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType             *String  `xml:"RecordType" json:"RecordType,omitempty"`
	FizLitsoKey            *Guid    `xml:"ФизЛицо_Key" json:"ФизЛицо_Key,omitempty"`
	ValiutaKey             *Guid    `xml:"Валюта_Key" json:"Валюта_Key,omitempty"`
	RaschetnyiDokument     *String  `xml:"РасчетныйДокумент" json:"РасчетныйДокумент,omitempty"`
	SummaVzaimoraschetov   *Float   `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	SummaUpr               *Float   `xml:"СуммаУпр" json:"СуммаУпр,omitempty"`
	RecorderType           String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	RaschetnyiDokumentType *String  `xml:"РасчетныйДокумент_Type" json:"РасчетныйДокумент_Type,omitempty"`
}

type AccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiBalance struct {
	FizLitsoKey                 *Guid   `xml:"ФизЛицо_Key" json:"ФизЛицо_Key,omitempty"`
	ValiutaKey                  *Guid   `xml:"Валюта_Key" json:"Валюта_Key,omitempty"`
	RaschetnyiDokument          *String `xml:"РасчетныйДокумент" json:"РасчетныйДокумент,omitempty"`
	SummaVzaimoraschetovBalance *Float  `xml:"СуммаВзаиморасчетовBalance" json:"СуммаВзаиморасчетовBalance,omitempty"`
	SummaUprBalance             *Float  `xml:"СуммаУпрBalance" json:"СуммаУпрBalance,omitempty"`
	RaschetnyiDokumentType      *String `xml:"РасчетныйДокумент_Type" json:"РасчетныйДокумент_Type,omitempty"`
}

type AccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiTurnover struct {
	FizLitsoKey                  *Guid   `xml:"ФизЛицо_Key" json:"ФизЛицо_Key,omitempty"`
	ValiutaKey                   *Guid   `xml:"Валюта_Key" json:"Валюта_Key,omitempty"`
	RaschetnyiDokument           *String `xml:"РасчетныйДокумент" json:"РасчетныйДокумент,omitempty"`
	Period                       *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod                 *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod                 *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                   *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                    *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                   *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod                *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                  *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod                *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod               *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                   *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                     *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                   *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SummaVzaimoraschetovTurnover *Float  `xml:"СуммаВзаиморасчетовTurnover" json:"СуммаВзаиморасчетовTurnover,omitempty"`
	SummaVzaimoraschetovReceipt  *Float  `xml:"СуммаВзаиморасчетовReceipt" json:"СуммаВзаиморасчетовReceipt,omitempty"`
	SummaVzaimoraschetovExpense  *Float  `xml:"СуммаВзаиморасчетовExpense" json:"СуммаВзаиморасчетовExpense,omitempty"`
	SummaUprTurnover             *Float  `xml:"СуммаУпрTurnover" json:"СуммаУпрTurnover,omitempty"`
	SummaUprReceipt              *Float  `xml:"СуммаУпрReceipt" json:"СуммаУпрReceipt,omitempty"`
	SummaUprExpense              *Float  `xml:"СуммаУпрExpense" json:"СуммаУпрExpense,omitempty"`
	RaschetnyiDokumentType       *String `xml:"РасчетныйДокумент_Type" json:"РасчетныйДокумент_Type,omitempty"`
	RecorderType                 *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiBalanceAndTurnover struct {
	FizLitsoKey                        *Guid   `xml:"ФизЛицо_Key" json:"ФизЛицо_Key,omitempty"`
	ValiutaKey                         *Guid   `xml:"Валюта_Key" json:"Валюта_Key,omitempty"`
	RaschetnyiDokument                 *String `xml:"РасчетныйДокумент" json:"РасчетныйДокумент,omitempty"`
	Period                             *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod                       *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod                       *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                         *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                          *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                         *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod                      *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                        *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod                      *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod                     *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                         *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                           *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                         *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SummaVzaimoraschetovOpeningBalance *Float  `xml:"СуммаВзаиморасчетовOpeningBalance" json:"СуммаВзаиморасчетовOpeningBalance,omitempty"`
	SummaVzaimoraschetovTurnover       *Float  `xml:"СуммаВзаиморасчетовTurnover" json:"СуммаВзаиморасчетовTurnover,omitempty"`
	SummaVzaimoraschetovReceipt        *Float  `xml:"СуммаВзаиморасчетовReceipt" json:"СуммаВзаиморасчетовReceipt,omitempty"`
	SummaVzaimoraschetovExpense        *Float  `xml:"СуммаВзаиморасчетовExpense" json:"СуммаВзаиморасчетовExpense,omitempty"`
	SummaVzaimoraschetovClosingBalance *Float  `xml:"СуммаВзаиморасчетовClosingBalance" json:"СуммаВзаиморасчетовClosingBalance,omitempty"`
	SummaUprOpeningBalance             *Float  `xml:"СуммаУпрOpeningBalance" json:"СуммаУпрOpeningBalance,omitempty"`
	SummaUprTurnover                   *Float  `xml:"СуммаУпрTurnover" json:"СуммаУпрTurnover,omitempty"`
	SummaUprReceipt                    *Float  `xml:"СуммаУпрReceipt" json:"СуммаУпрReceipt,omitempty"`
	SummaUprExpense                    *Float  `xml:"СуммаУпрExpense" json:"СуммаУпрExpense,omitempty"`
	SummaUprClosingBalance             *Float  `xml:"СуммаУпрClosingBalance" json:"СуммаУпрClosingBalance,omitempty"`
	RaschetnyiDokumentType             *String `xml:"РасчетныйДокумент_Type" json:"РасчетныйДокумент_Type,omitempty"`
	RecorderType                       *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterVnutrennieZakazyRowType struct {
	Recorder                       String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                         *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber                     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                         *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType                     *String  `xml:"RecordType" json:"RecordType,omitempty"`
	ItemKey                        *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid    `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid    `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	Zakazchik                      *String  `xml:"Заказчик" json:"Заказчик,omitempty"`
	VnutrenniiZakazKey             *Guid    `xml:"ВнутреннийЗаказ_Key" json:"ВнутреннийЗаказ_Key,omitempty"`
	StatusPartii                   *String  `xml:"СтатусПартии" json:"СтатусПартии,omitempty"`
	Quantity                       *Int     `xml:"Количество" json:"Количество,omitempty"`
	Weight                         *Float   `xml:"Вес" json:"Вес,omitempty"`
	RecorderType                   String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	ZakazchikType                  *String  `xml:"Заказчик_Type" json:"Заказчик_Type,omitempty"`
}

type AccumulationRegisterVnutrennieZakazyBalance struct {
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	Zakazchik                      *String `xml:"Заказчик" json:"Заказчик,omitempty"`
	VnutrenniiZakazKey             *Guid   `xml:"ВнутреннийЗаказ_Key" json:"ВнутреннийЗаказ_Key,omitempty"`
	StatusPartii                   *String `xml:"СтатусПартии" json:"СтатусПартии,omitempty"`
	KolichestvoBalance             *Int    `xml:"КоличествоBalance" json:"КоличествоBalance,omitempty"`
	VesBalance                     *Float  `xml:"ВесBalance" json:"ВесBalance,omitempty"`
	ZakazchikType                  *String `xml:"Заказчик_Type" json:"Заказчик_Type,omitempty"`
}

type AccumulationRegisterVnutrennieZakazyTurnover struct {
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	Zakazchik                      *String `xml:"Заказчик" json:"Заказчик,omitempty"`
	VnutrenniiZakazKey             *Guid   `xml:"ВнутреннийЗаказ_Key" json:"ВнутреннийЗаказ_Key,omitempty"`
	StatusPartii                   *String `xml:"СтатусПартии" json:"СтатусПартии,omitempty"`
	Period                         *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod                   *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod                   *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                     *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                      *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                     *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod                  *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                    *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod                  *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod                 *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                     *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                       *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                     *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	KolichestvoTurnover            *Int    `xml:"КоличествоTurnover" json:"КоличествоTurnover,omitempty"`
	KolichestvoReceipt             *Int    `xml:"КоличествоReceipt" json:"КоличествоReceipt,omitempty"`
	KolichestvoExpense             *Int    `xml:"КоличествоExpense" json:"КоличествоExpense,omitempty"`
	VesTurnover                    *Float  `xml:"ВесTurnover" json:"ВесTurnover,omitempty"`
	VesReceipt                     *Float  `xml:"ВесReceipt" json:"ВесReceipt,omitempty"`
	VesExpense                     *Float  `xml:"ВесExpense" json:"ВесExpense,omitempty"`
	ZakazchikType                  *String `xml:"Заказчик_Type" json:"Заказчик_Type,omitempty"`
	RecorderType                   *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterVnutrennieZakazyBalanceAndTurnover struct {
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	Zakazchik                      *String `xml:"Заказчик" json:"Заказчик,omitempty"`
	VnutrenniiZakazKey             *Guid   `xml:"ВнутреннийЗаказ_Key" json:"ВнутреннийЗаказ_Key,omitempty"`
	StatusPartii                   *String `xml:"СтатусПартии" json:"СтатусПартии,omitempty"`
	Period                         *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod                   *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod                   *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                     *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                      *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                     *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod                  *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                    *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod                  *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod                 *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                     *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                       *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                     *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	KolichestvoOpeningBalance      *Int    `xml:"КоличествоOpeningBalance" json:"КоличествоOpeningBalance,omitempty"`
	KolichestvoTurnover            *Int    `xml:"КоличествоTurnover" json:"КоличествоTurnover,omitempty"`
	KolichestvoReceipt             *Int    `xml:"КоличествоReceipt" json:"КоличествоReceipt,omitempty"`
	KolichestvoExpense             *Int    `xml:"КоличествоExpense" json:"КоличествоExpense,omitempty"`
	KolichestvoClosingBalance      *Int    `xml:"КоличествоClosingBalance" json:"КоличествоClosingBalance,omitempty"`
	VesOpeningBalance              *Float  `xml:"ВесOpeningBalance" json:"ВесOpeningBalance,omitempty"`
	VesTurnover                    *Float  `xml:"ВесTurnover" json:"ВесTurnover,omitempty"`
	VesReceipt                     *Float  `xml:"ВесReceipt" json:"ВесReceipt,omitempty"`
	VesExpense                     *Float  `xml:"ВесExpense" json:"ВесExpense,omitempty"`
	VesClosingBalance              *Float  `xml:"ВесClosingBalance" json:"ВесClosingBalance,omitempty"`
	ZakazchikType                  *String `xml:"Заказчик_Type" json:"Заказчик_Type,omitempty"`
	RecorderType                   *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterDenezhnyeSredstvaKomitentaRowType struct {
	Recorder              String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber            Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType            *String  `xml:"RecordType" json:"RecordType,omitempty"`
	DogovorKontragentaKey *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	Sdelka                *String  `xml:"Сделка" json:"Сделка,omitempty"`
	SummaVzaimoraschetov  *Float   `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	SummaUpr              *Float   `xml:"СуммаУпр" json:"СуммаУпр,omitempty"`
	RecorderType          String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	SdelkaType            *String  `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type AccumulationRegisterDenezhnyeSredstvaKomitentaBalance struct {
	DogovorKontragentaKey       *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	Sdelka                      *String `xml:"Сделка" json:"Сделка,omitempty"`
	SummaVzaimoraschetovBalance *Float  `xml:"СуммаВзаиморасчетовBalance" json:"СуммаВзаиморасчетовBalance,omitempty"`
	SummaUprBalance             *Float  `xml:"СуммаУпрBalance" json:"СуммаУпрBalance,omitempty"`
	SdelkaType                  *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type AccumulationRegisterDenezhnyeSredstvaKomitentaTurnover struct {
	DogovorKontragentaKey        *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	Sdelka                       *String `xml:"Сделка" json:"Сделка,omitempty"`
	Period                       *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod                 *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod                 *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                   *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                    *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                   *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod                *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                  *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod                *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod               *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                   *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                     *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                   *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SummaVzaimoraschetovTurnover *Float  `xml:"СуммаВзаиморасчетовTurnover" json:"СуммаВзаиморасчетовTurnover,omitempty"`
	SummaVzaimoraschetovReceipt  *Float  `xml:"СуммаВзаиморасчетовReceipt" json:"СуммаВзаиморасчетовReceipt,omitempty"`
	SummaVzaimoraschetovExpense  *Float  `xml:"СуммаВзаиморасчетовExpense" json:"СуммаВзаиморасчетовExpense,omitempty"`
	SummaUprTurnover             *Float  `xml:"СуммаУпрTurnover" json:"СуммаУпрTurnover,omitempty"`
	SummaUprReceipt              *Float  `xml:"СуммаУпрReceipt" json:"СуммаУпрReceipt,omitempty"`
	SummaUprExpense              *Float  `xml:"СуммаУпрExpense" json:"СуммаУпрExpense,omitempty"`
	SdelkaType                   *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
	RecorderType                 *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterDenezhnyeSredstvaKomitentaBalanceAndTurnover struct {
	DogovorKontragentaKey              *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	Sdelka                             *String `xml:"Сделка" json:"Сделка,omitempty"`
	Period                             *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod                       *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod                       *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                         *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                          *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                         *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod                      *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                        *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod                      *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod                     *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                         *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                           *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                         *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SummaVzaimoraschetovOpeningBalance *Float  `xml:"СуммаВзаиморасчетовOpeningBalance" json:"СуммаВзаиморасчетовOpeningBalance,omitempty"`
	SummaVzaimoraschetovTurnover       *Float  `xml:"СуммаВзаиморасчетовTurnover" json:"СуммаВзаиморасчетовTurnover,omitempty"`
	SummaVzaimoraschetovReceipt        *Float  `xml:"СуммаВзаиморасчетовReceipt" json:"СуммаВзаиморасчетовReceipt,omitempty"`
	SummaVzaimoraschetovExpense        *Float  `xml:"СуммаВзаиморасчетовExpense" json:"СуммаВзаиморасчетовExpense,omitempty"`
	SummaVzaimoraschetovClosingBalance *Float  `xml:"СуммаВзаиморасчетовClosingBalance" json:"СуммаВзаиморасчетовClosingBalance,omitempty"`
	SummaUprOpeningBalance             *Float  `xml:"СуммаУпрOpeningBalance" json:"СуммаУпрOpeningBalance,omitempty"`
	SummaUprTurnover                   *Float  `xml:"СуммаУпрTurnover" json:"СуммаУпрTurnover,omitempty"`
	SummaUprReceipt                    *Float  `xml:"СуммаУпрReceipt" json:"СуммаУпрReceipt,omitempty"`
	SummaUprExpense                    *Float  `xml:"СуммаУпрExpense" json:"СуммаУпрExpense,omitempty"`
	SummaUprClosingBalance             *Float  `xml:"СуммаУпрClosingBalance" json:"СуммаУпрClosingBalance,omitempty"`
	SdelkaType                         *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
	RecorderType                       *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterZakazyKlientovRowType struct {
	Recorder        String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period          *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber      Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active          *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType      *String  `xml:"RecordType" json:"RecordType,omitempty"`
	ItemKey         *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey         *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	ZakazKlientaKey *Guid    `xml:"ЗаказКлиента_Key" json:"ЗаказКлиента_Key,omitempty"`
	InstanceKey     *Guid    `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	Zakazano        *Int     `xml:"Заказано" json:"Заказано,omitempty"`
	VRezerve        *Int     `xml:"ВРезерве" json:"ВРезерве,omitempty"`
	KRazmeshcheniiu *Int     `xml:"КРазмещению" json:"КРазмещению,omitempty"`
	ZakazanoVes     *Float   `xml:"ЗаказаноВес" json:"ЗаказаноВес,omitempty"`
	ZakazanoSumma   *Float   `xml:"ЗаказаноСумма" json:"ЗаказаноСумма,omitempty"`
	RecorderType    String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterZakazyKlientovBalance struct {
	ItemKey                *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                *Guid  `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	ZakazKlientaKey        *Guid  `xml:"ЗаказКлиента_Key" json:"ЗаказКлиента_Key,omitempty"`
	InstanceKey            *Guid  `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	ZakazanoBalance        *Int   `xml:"ЗаказаноBalance" json:"ЗаказаноBalance,omitempty"`
	VRezerveBalance        *Int   `xml:"ВРезервеBalance" json:"ВРезервеBalance,omitempty"`
	KRazmeshcheniiuBalance *Int   `xml:"КРазмещениюBalance" json:"КРазмещениюBalance,omitempty"`
	ZakazanoVesBalance     *Float `xml:"ЗаказаноВесBalance" json:"ЗаказаноВесBalance,omitempty"`
	ZakazanoSummaBalance   *Float `xml:"ЗаказаноСуммаBalance" json:"ЗаказаноСуммаBalance,omitempty"`
}

type AccumulationRegisterZakazyKlientovTurnover struct {
	ItemKey                 *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                 *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	ZakazKlientaKey         *Guid   `xml:"ЗаказКлиента_Key" json:"ЗаказКлиента_Key,omitempty"`
	InstanceKey             *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	Period                  *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod            *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod            *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod              *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod               *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod              *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod           *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod             *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod           *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod          *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod              *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber              *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	ZakazanoTurnover        *Int    `xml:"ЗаказаноTurnover" json:"ЗаказаноTurnover,omitempty"`
	ZakazanoReceipt         *Int    `xml:"ЗаказаноReceipt" json:"ЗаказаноReceipt,omitempty"`
	ZakazanoExpense         *Int    `xml:"ЗаказаноExpense" json:"ЗаказаноExpense,omitempty"`
	VRezerveTurnover        *Int    `xml:"ВРезервеTurnover" json:"ВРезервеTurnover,omitempty"`
	VRezerveReceipt         *Int    `xml:"ВРезервеReceipt" json:"ВРезервеReceipt,omitempty"`
	VRezerveExpense         *Int    `xml:"ВРезервеExpense" json:"ВРезервеExpense,omitempty"`
	KRazmeshcheniiuTurnover *Int    `xml:"КРазмещениюTurnover" json:"КРазмещениюTurnover,omitempty"`
	KRazmeshcheniiuReceipt  *Int    `xml:"КРазмещениюReceipt" json:"КРазмещениюReceipt,omitempty"`
	KRazmeshcheniiuExpense  *Int    `xml:"КРазмещениюExpense" json:"КРазмещениюExpense,omitempty"`
	ZakazanoVesTurnover     *Float  `xml:"ЗаказаноВесTurnover" json:"ЗаказаноВесTurnover,omitempty"`
	ZakazanoVesReceipt      *Float  `xml:"ЗаказаноВесReceipt" json:"ЗаказаноВесReceipt,omitempty"`
	ZakazanoVesExpense      *Float  `xml:"ЗаказаноВесExpense" json:"ЗаказаноВесExpense,omitempty"`
	ZakazanoSummaTurnover   *Float  `xml:"ЗаказаноСуммаTurnover" json:"ЗаказаноСуммаTurnover,omitempty"`
	ZakazanoSummaReceipt    *Float  `xml:"ЗаказаноСуммаReceipt" json:"ЗаказаноСуммаReceipt,omitempty"`
	ZakazanoSummaExpense    *Float  `xml:"ЗаказаноСуммаExpense" json:"ЗаказаноСуммаExpense,omitempty"`
	RecorderType            *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterZakazyKlientovBalanceAndTurnover struct {
	ItemKey                       *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                       *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	ZakazKlientaKey               *Guid   `xml:"ЗаказКлиента_Key" json:"ЗаказКлиента_Key,omitempty"`
	InstanceKey                   *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	Period                        *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod                  *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod                  *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                    *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                     *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                    *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod                 *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                   *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod                 *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod                *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                    *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                      *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                    *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	ZakazanoOpeningBalance        *Int    `xml:"ЗаказаноOpeningBalance" json:"ЗаказаноOpeningBalance,omitempty"`
	ZakazanoTurnover              *Int    `xml:"ЗаказаноTurnover" json:"ЗаказаноTurnover,omitempty"`
	ZakazanoReceipt               *Int    `xml:"ЗаказаноReceipt" json:"ЗаказаноReceipt,omitempty"`
	ZakazanoExpense               *Int    `xml:"ЗаказаноExpense" json:"ЗаказаноExpense,omitempty"`
	ZakazanoClosingBalance        *Int    `xml:"ЗаказаноClosingBalance" json:"ЗаказаноClosingBalance,omitempty"`
	VRezerveOpeningBalance        *Int    `xml:"ВРезервеOpeningBalance" json:"ВРезервеOpeningBalance,omitempty"`
	VRezerveTurnover              *Int    `xml:"ВРезервеTurnover" json:"ВРезервеTurnover,omitempty"`
	VRezerveReceipt               *Int    `xml:"ВРезервеReceipt" json:"ВРезервеReceipt,omitempty"`
	VRezerveExpense               *Int    `xml:"ВРезервеExpense" json:"ВРезервеExpense,omitempty"`
	VRezerveClosingBalance        *Int    `xml:"ВРезервеClosingBalance" json:"ВРезервеClosingBalance,omitempty"`
	KRazmeshcheniiuOpeningBalance *Int    `xml:"КРазмещениюOpeningBalance" json:"КРазмещениюOpeningBalance,omitempty"`
	KRazmeshcheniiuTurnover       *Int    `xml:"КРазмещениюTurnover" json:"КРазмещениюTurnover,omitempty"`
	KRazmeshcheniiuReceipt        *Int    `xml:"КРазмещениюReceipt" json:"КРазмещениюReceipt,omitempty"`
	KRazmeshcheniiuExpense        *Int    `xml:"КРазмещениюExpense" json:"КРазмещениюExpense,omitempty"`
	KRazmeshcheniiuClosingBalance *Int    `xml:"КРазмещениюClosingBalance" json:"КРазмещениюClosingBalance,omitempty"`
	ZakazanoVesOpeningBalance     *Float  `xml:"ЗаказаноВесOpeningBalance" json:"ЗаказаноВесOpeningBalance,omitempty"`
	ZakazanoVesTurnover           *Float  `xml:"ЗаказаноВесTurnover" json:"ЗаказаноВесTurnover,omitempty"`
	ZakazanoVesReceipt            *Float  `xml:"ЗаказаноВесReceipt" json:"ЗаказаноВесReceipt,omitempty"`
	ZakazanoVesExpense            *Float  `xml:"ЗаказаноВесExpense" json:"ЗаказаноВесExpense,omitempty"`
	ZakazanoVesClosingBalance     *Float  `xml:"ЗаказаноВесClosingBalance" json:"ЗаказаноВесClosingBalance,omitempty"`
	ZakazanoSummaOpeningBalance   *Float  `xml:"ЗаказаноСуммаOpeningBalance" json:"ЗаказаноСуммаOpeningBalance,omitempty"`
	ZakazanoSummaTurnover         *Float  `xml:"ЗаказаноСуммаTurnover" json:"ЗаказаноСуммаTurnover,omitempty"`
	ZakazanoSummaReceipt          *Float  `xml:"ЗаказаноСуммаReceipt" json:"ЗаказаноСуммаReceipt,omitempty"`
	ZakazanoSummaExpense          *Float  `xml:"ЗаказаноСуммаExpense" json:"ЗаказаноСуммаExpense,omitempty"`
	ZakazanoSummaClosingBalance   *Float  `xml:"ЗаказаноСуммаClosingBalance" json:"ЗаказаноСуммаClosingBalance,omitempty"`
	RecorderType                  *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterSummyPoFinmonitoringuRoznitsaRowType struct {
	Recorder         String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period           *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber       Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active           *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType       *String  `xml:"RecordType" json:"RecordType,omitempty"`
	KontragentKey    *Guid    `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	OrganizatsiiaKey *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	SummaPokupok     *Float   `xml:"СуммаПокупок" json:"СуммаПокупок,omitempty"`
	SummaSkupki      *Float   `xml:"СуммаСкупки" json:"СуммаСкупки,omitempty"`
	RecorderType     String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterSummyPoFinmonitoringuRoznitsaBalance struct {
	KontragentKey       *Guid  `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	OrganizatsiiaKey    *Guid  `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	SummaPokupokBalance *Float `xml:"СуммаПокупокBalance" json:"СуммаПокупокBalance,omitempty"`
	SummaSkupkiBalance  *Float `xml:"СуммаСкупкиBalance" json:"СуммаСкупкиBalance,omitempty"`
}

type AccumulationRegisterSummyPoFinmonitoringuRoznitsaTurnover struct {
	KontragentKey        *Guid   `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	OrganizatsiiaKey     *Guid   `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	Period               *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod         *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod         *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod           *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod            *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod           *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod        *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod          *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod        *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod       *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod           *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder             *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber           *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SummaPokupokTurnover *Float  `xml:"СуммаПокупокTurnover" json:"СуммаПокупокTurnover,omitempty"`
	SummaPokupokReceipt  *Float  `xml:"СуммаПокупокReceipt" json:"СуммаПокупокReceipt,omitempty"`
	SummaPokupokExpense  *Float  `xml:"СуммаПокупокExpense" json:"СуммаПокупокExpense,omitempty"`
	SummaSkupkiTurnover  *Float  `xml:"СуммаСкупкиTurnover" json:"СуммаСкупкиTurnover,omitempty"`
	SummaSkupkiReceipt   *Float  `xml:"СуммаСкупкиReceipt" json:"СуммаСкупкиReceipt,omitempty"`
	SummaSkupkiExpense   *Float  `xml:"СуммаСкупкиExpense" json:"СуммаСкупкиExpense,omitempty"`
	RecorderType         *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterSummyPoFinmonitoringuRoznitsaBalanceAndTurnover struct {
	KontragentKey              *Guid   `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	OrganizatsiiaKey           *Guid   `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	Period                     *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod               *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod               *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                 *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                  *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                 *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod              *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod              *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod             *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                 *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                   *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                 *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SummaPokupokOpeningBalance *Float  `xml:"СуммаПокупокOpeningBalance" json:"СуммаПокупокOpeningBalance,omitempty"`
	SummaPokupokTurnover       *Float  `xml:"СуммаПокупокTurnover" json:"СуммаПокупокTurnover,omitempty"`
	SummaPokupokReceipt        *Float  `xml:"СуммаПокупокReceipt" json:"СуммаПокупокReceipt,omitempty"`
	SummaPokupokExpense        *Float  `xml:"СуммаПокупокExpense" json:"СуммаПокупокExpense,omitempty"`
	SummaPokupokClosingBalance *Float  `xml:"СуммаПокупокClosingBalance" json:"СуммаПокупокClosingBalance,omitempty"`
	SummaSkupkiOpeningBalance  *Float  `xml:"СуммаСкупкиOpeningBalance" json:"СуммаСкупкиOpeningBalance,omitempty"`
	SummaSkupkiTurnover        *Float  `xml:"СуммаСкупкиTurnover" json:"СуммаСкупкиTurnover,omitempty"`
	SummaSkupkiReceipt         *Float  `xml:"СуммаСкупкиReceipt" json:"СуммаСкупкиReceipt,omitempty"`
	SummaSkupkiExpense         *Float  `xml:"СуммаСкупкиExpense" json:"СуммаСкупкиExpense,omitempty"`
	SummaSkupkiClosingBalance  *Float  `xml:"СуммаСкупкиClosingBalance" json:"СуммаСкупкиClosingBalance,omitempty"`
	RecorderType               *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterDenezhnyeSredstvaKPolucheniiuRowType struct {
	Recorder                 String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                   *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber               Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                   *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType               *String  `xml:"RecordType" json:"RecordType,omitempty"`
	VidDenezhnykhSredstv     *String  `xml:"ВидДенежныхСредств" json:"ВидДенежныхСредств,omitempty"`
	BankovskiiSchetKassa     *String  `xml:"БанковскийСчетКасса" json:"БанковскийСчетКасса,omitempty"`
	DokumentPolucheniia      *String  `xml:"ДокументПолучения" json:"ДокументПолучения,omitempty"`
	TypeOfMovingMoneyKey     *Guid    `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	Sum                      *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	SummaUpr                 *Float   `xml:"СуммаУпр" json:"СуммаУпр,omitempty"`
	RecorderType             String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	BankovskiiSchetKassaType *String  `xml:"БанковскийСчетКасса_Type" json:"БанковскийСчетКасса_Type,omitempty"`
	DokumentPolucheniiaType  *String  `xml:"ДокументПолучения_Type" json:"ДокументПолучения_Type,omitempty"`
}

type AccumulationRegisterDenezhnyeSredstvaKPolucheniiuBalance struct {
	VidDenezhnykhSredstv     *String `xml:"ВидДенежныхСредств" json:"ВидДенежныхСредств,omitempty"`
	BankovskiiSchetKassa     *String `xml:"БанковскийСчетКасса" json:"БанковскийСчетКасса,omitempty"`
	DokumentPolucheniia      *String `xml:"ДокументПолучения" json:"ДокументПолучения,omitempty"`
	TypeOfMovingMoneyKey     *Guid   `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaBalance             *Float  `xml:"СуммаBalance" json:"СуммаBalance,omitempty"`
	SummaUprBalance          *Float  `xml:"СуммаУпрBalance" json:"СуммаУпрBalance,omitempty"`
	BankovskiiSchetKassaType *String `xml:"БанковскийСчетКасса_Type" json:"БанковскийСчетКасса_Type,omitempty"`
	DokumentPolucheniiaType  *String `xml:"ДокументПолучения_Type" json:"ДокументПолучения_Type,omitempty"`
}

type AccumulationRegisterDenezhnyeSredstvaKPolucheniiuTurnover struct {
	VidDenezhnykhSredstv     *String `xml:"ВидДенежныхСредств" json:"ВидДенежныхСредств,omitempty"`
	BankovskiiSchetKassa     *String `xml:"БанковскийСчетКасса" json:"БанковскийСчетКасса,omitempty"`
	DokumentPolucheniia      *String `xml:"ДокументПолучения" json:"ДокументПолучения,omitempty"`
	TypeOfMovingMoneyKey     *Guid   `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	Period                   *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod             *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod             *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod               *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod               *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod            *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod              *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod            *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod           *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod               *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                 *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber               *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SummaTurnover            *Float  `xml:"СуммаTurnover" json:"СуммаTurnover,omitempty"`
	SummaReceipt             *Float  `xml:"СуммаReceipt" json:"СуммаReceipt,omitempty"`
	SummaExpense             *Float  `xml:"СуммаExpense" json:"СуммаExpense,omitempty"`
	SummaUprTurnover         *Float  `xml:"СуммаУпрTurnover" json:"СуммаУпрTurnover,omitempty"`
	SummaUprReceipt          *Float  `xml:"СуммаУпрReceipt" json:"СуммаУпрReceipt,omitempty"`
	SummaUprExpense          *Float  `xml:"СуммаУпрExpense" json:"СуммаУпрExpense,omitempty"`
	BankovskiiSchetKassaType *String `xml:"БанковскийСчетКасса_Type" json:"БанковскийСчетКасса_Type,omitempty"`
	DokumentPolucheniiaType  *String `xml:"ДокументПолучения_Type" json:"ДокументПолучения_Type,omitempty"`
	RecorderType             *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterDenezhnyeSredstvaKPolucheniiuBalanceAndTurnover struct {
	VidDenezhnykhSredstv     *String `xml:"ВидДенежныхСредств" json:"ВидДенежныхСредств,omitempty"`
	BankovskiiSchetKassa     *String `xml:"БанковскийСчетКасса" json:"БанковскийСчетКасса,omitempty"`
	DokumentPolucheniia      *String `xml:"ДокументПолучения" json:"ДокументПолучения,omitempty"`
	TypeOfMovingMoneyKey     *Guid   `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	Period                   *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod             *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod             *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod               *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod               *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod            *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod              *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod            *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod           *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod               *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                 *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber               *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SummaOpeningBalance      *Float  `xml:"СуммаOpeningBalance" json:"СуммаOpeningBalance,omitempty"`
	SummaTurnover            *Float  `xml:"СуммаTurnover" json:"СуммаTurnover,omitempty"`
	SummaReceipt             *Float  `xml:"СуммаReceipt" json:"СуммаReceipt,omitempty"`
	SummaExpense             *Float  `xml:"СуммаExpense" json:"СуммаExpense,omitempty"`
	SummaClosingBalance      *Float  `xml:"СуммаClosingBalance" json:"СуммаClosingBalance,omitempty"`
	SummaUprOpeningBalance   *Float  `xml:"СуммаУпрOpeningBalance" json:"СуммаУпрOpeningBalance,omitempty"`
	SummaUprTurnover         *Float  `xml:"СуммаУпрTurnover" json:"СуммаУпрTurnover,omitempty"`
	SummaUprReceipt          *Float  `xml:"СуммаУпрReceipt" json:"СуммаУпрReceipt,omitempty"`
	SummaUprExpense          *Float  `xml:"СуммаУпрExpense" json:"СуммаУпрExpense,omitempty"`
	SummaUprClosingBalance   *Float  `xml:"СуммаУпрClosingBalance" json:"СуммаУпрClosingBalance,omitempty"`
	BankovskiiSchetKassaType *String `xml:"БанковскийСчетКасса_Type" json:"БанковскийСчетКасса_Type,omitempty"`
	DokumentPolucheniiaType  *String `xml:"ДокументПолучения_Type" json:"ДокументПолучения_Type,omitempty"`
	RecorderType             *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterProdazhiPoDiskontnymKartamRowType struct {
	Recorder                       String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                         *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber                     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                         *Boolean `xml:"Active" json:"Active,omitempty"`
	MemberCardKey                  *Guid    `xml:"ДисконтнаяКарта_Key" json:"ДисконтнаяКарта_Key,omitempty"`
	ItemKey                        *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid    `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid    `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	DokumentProdazhi               *String  `xml:"ДокументПродажи" json:"ДокументПродажи,omitempty"`
	Sum                            *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	Quantity                       *Int     `xml:"Количество" json:"Количество,omitempty"`
	Weight                         *Float   `xml:"Вес" json:"Вес,omitempty"`
	RecorderType                   String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	DokumentProdazhiType           *String  `xml:"ДокументПродажи_Type" json:"ДокументПродажи_Type,omitempty"`
}

type AccumulationRegisterProdazhiPoDiskontnymKartamTurnover struct {
	MemberCardKey                  *Guid   `xml:"ДисконтнаяКарта_Key" json:"ДисконтнаяКарта_Key,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	DokumentProdazhi               *String `xml:"ДокументПродажи" json:"ДокументПродажи,omitempty"`
	Period                         *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod                   *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod                   *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                     *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                      *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                     *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod                  *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                    *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod                  *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod                 *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                     *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                       *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                     *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SummaTurnover                  *Float  `xml:"СуммаTurnover" json:"СуммаTurnover,omitempty"`
	KolichestvoTurnover            *Int    `xml:"КоличествоTurnover" json:"КоличествоTurnover,omitempty"`
	VesTurnover                    *Float  `xml:"ВесTurnover" json:"ВесTurnover,omitempty"`
	DokumentProdazhiType           *String `xml:"ДокументПродажи_Type" json:"ДокументПродажи_Type,omitempty"`
	RecorderType                   *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterTovaryPoluchennyeRowType struct {
	Recorder                       String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                         *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber                     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                         *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType                     *String  `xml:"RecordType" json:"RecordType,omitempty"`
	ItemKey                        *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid    `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid    `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	DogovorKontragentaKey          *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	Sdelka                         *String  `xml:"Сделка" json:"Сделка,omitempty"`
	Quantity                       *Int     `xml:"Количество" json:"Количество,omitempty"`
	Weight                         *Float   `xml:"Вес" json:"Вес,omitempty"`
	SummaVzaimoraschetov           *Float   `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	RecorderType                   String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	SdelkaType                     *String  `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type AccumulationRegisterTovaryPoluchennyeBalance struct {
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	DogovorKontragentaKey          *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	Sdelka                         *String `xml:"Сделка" json:"Сделка,omitempty"`
	KolichestvoBalance             *Int    `xml:"КоличествоBalance" json:"КоличествоBalance,omitempty"`
	VesBalance                     *Float  `xml:"ВесBalance" json:"ВесBalance,omitempty"`
	SummaVzaimoraschetovBalance    *Float  `xml:"СуммаВзаиморасчетовBalance" json:"СуммаВзаиморасчетовBalance,omitempty"`
	SdelkaType                     *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type AccumulationRegisterTovaryPoluchennyeTurnover struct {
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	DogovorKontragentaKey          *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	Sdelka                         *String `xml:"Сделка" json:"Сделка,omitempty"`
	Period                         *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod                   *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod                   *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                     *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                      *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                     *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod                  *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                    *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod                  *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod                 *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                     *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                       *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                     *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	KolichestvoTurnover            *Int    `xml:"КоличествоTurnover" json:"КоличествоTurnover,omitempty"`
	KolichestvoReceipt             *Int    `xml:"КоличествоReceipt" json:"КоличествоReceipt,omitempty"`
	KolichestvoExpense             *Int    `xml:"КоличествоExpense" json:"КоличествоExpense,omitempty"`
	VesTurnover                    *Float  `xml:"ВесTurnover" json:"ВесTurnover,omitempty"`
	VesReceipt                     *Float  `xml:"ВесReceipt" json:"ВесReceipt,omitempty"`
	VesExpense                     *Float  `xml:"ВесExpense" json:"ВесExpense,omitempty"`
	SummaVzaimoraschetovTurnover   *Float  `xml:"СуммаВзаиморасчетовTurnover" json:"СуммаВзаиморасчетовTurnover,omitempty"`
	SummaVzaimoraschetovReceipt    *Float  `xml:"СуммаВзаиморасчетовReceipt" json:"СуммаВзаиморасчетовReceipt,omitempty"`
	SummaVzaimoraschetovExpense    *Float  `xml:"СуммаВзаиморасчетовExpense" json:"СуммаВзаиморасчетовExpense,omitempty"`
	SdelkaType                     *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
	RecorderType                   *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterTovaryPoluchennyeBalanceAndTurnover struct {
	ItemKey                            *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                        *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey     *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                            *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	DogovorKontragentaKey              *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	Sdelka                             *String `xml:"Сделка" json:"Сделка,omitempty"`
	Period                             *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod                       *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod                       *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                         *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                          *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                         *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod                      *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                        *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod                      *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod                     *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                         *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                           *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                         *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	KolichestvoOpeningBalance          *Int    `xml:"КоличествоOpeningBalance" json:"КоличествоOpeningBalance,omitempty"`
	KolichestvoTurnover                *Int    `xml:"КоличествоTurnover" json:"КоличествоTurnover,omitempty"`
	KolichestvoReceipt                 *Int    `xml:"КоличествоReceipt" json:"КоличествоReceipt,omitempty"`
	KolichestvoExpense                 *Int    `xml:"КоличествоExpense" json:"КоличествоExpense,omitempty"`
	KolichestvoClosingBalance          *Int    `xml:"КоличествоClosingBalance" json:"КоличествоClosingBalance,omitempty"`
	VesOpeningBalance                  *Float  `xml:"ВесOpeningBalance" json:"ВесOpeningBalance,omitempty"`
	VesTurnover                        *Float  `xml:"ВесTurnover" json:"ВесTurnover,omitempty"`
	VesReceipt                         *Float  `xml:"ВесReceipt" json:"ВесReceipt,omitempty"`
	VesExpense                         *Float  `xml:"ВесExpense" json:"ВесExpense,omitempty"`
	VesClosingBalance                  *Float  `xml:"ВесClosingBalance" json:"ВесClosingBalance,omitempty"`
	SummaVzaimoraschetovOpeningBalance *Float  `xml:"СуммаВзаиморасчетовOpeningBalance" json:"СуммаВзаиморасчетовOpeningBalance,omitempty"`
	SummaVzaimoraschetovTurnover       *Float  `xml:"СуммаВзаиморасчетовTurnover" json:"СуммаВзаиморасчетовTurnover,omitempty"`
	SummaVzaimoraschetovReceipt        *Float  `xml:"СуммаВзаиморасчетовReceipt" json:"СуммаВзаиморасчетовReceipt,omitempty"`
	SummaVzaimoraschetovExpense        *Float  `xml:"СуммаВзаиморасчетовExpense" json:"СуммаВзаиморасчетовExpense,omitempty"`
	SummaVzaimoraschetovClosingBalance *Float  `xml:"СуммаВзаиморасчетовClosingBalance" json:"СуммаВзаиморасчетовClosingBalance,omitempty"`
	SdelkaType                         *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
	RecorderType                       *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterSvobodnyeOstatkiRowType struct {
	Recorder      String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period        *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber    Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active        *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType    *String  `xml:"RecordType" json:"RecordType,omitempty"`
	ItemKey       *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey       *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	DepartmentKey *Guid    `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	VNalichii     *Int     `xml:"ВНаличии" json:"ВНаличии,omitempty"`
	VRezerve      *Int     `xml:"ВРезерве" json:"ВРезерве,omitempty"`
	RecorderType  String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterSvobodnyeOstatkiBalance struct {
	ItemKey          *Guid `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey          *Guid `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	DepartmentKey    *Guid `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	VNalichiiBalance *Int  `xml:"ВНаличииBalance" json:"ВНаличииBalance,omitempty"`
	VRezerveBalance  *Int  `xml:"ВРезервеBalance" json:"ВРезервеBalance,omitempty"`
}

type AccumulationRegisterSvobodnyeOstatkiTurnover struct {
	ItemKey           *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey           *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	DepartmentKey     *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	Period            *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod      *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod      *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod        *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod         *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod        *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod     *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod       *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod     *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod    *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod        *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder          *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber        *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	VNalichiiTurnover *Int    `xml:"ВНаличииTurnover" json:"ВНаличииTurnover,omitempty"`
	VNalichiiReceipt  *Int    `xml:"ВНаличииReceipt" json:"ВНаличииReceipt,omitempty"`
	VNalichiiExpense  *Int    `xml:"ВНаличииExpense" json:"ВНаличииExpense,omitempty"`
	VRezerveTurnover  *Int    `xml:"ВРезервеTurnover" json:"ВРезервеTurnover,omitempty"`
	VRezerveReceipt   *Int    `xml:"ВРезервеReceipt" json:"ВРезервеReceipt,omitempty"`
	VRezerveExpense   *Int    `xml:"ВРезервеExpense" json:"ВРезервеExpense,omitempty"`
	RecorderType      *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterSvobodnyeOstatkiBalanceAndTurnover struct {
	ItemKey                 *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                 *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	DepartmentKey           *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	Period                  *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod            *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod            *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod              *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod               *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod              *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod           *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod             *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod           *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod          *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod              *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber              *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	VNalichiiOpeningBalance *Int    `xml:"ВНаличииOpeningBalance" json:"ВНаличииOpeningBalance,omitempty"`
	VNalichiiTurnover       *Int    `xml:"ВНаличииTurnover" json:"ВНаличииTurnover,omitempty"`
	VNalichiiReceipt        *Int    `xml:"ВНаличииReceipt" json:"ВНаличииReceipt,omitempty"`
	VNalichiiExpense        *Int    `xml:"ВНаличииExpense" json:"ВНаличииExpense,omitempty"`
	VNalichiiClosingBalance *Int    `xml:"ВНаличииClosingBalance" json:"ВНаличииClosingBalance,omitempty"`
	VRezerveOpeningBalance  *Int    `xml:"ВРезервеOpeningBalance" json:"ВРезервеOpeningBalance,omitempty"`
	VRezerveTurnover        *Int    `xml:"ВРезервеTurnover" json:"ВРезервеTurnover,omitempty"`
	VRezerveReceipt         *Int    `xml:"ВРезервеReceipt" json:"ВРезервеReceipt,omitempty"`
	VRezerveExpense         *Int    `xml:"ВРезервеExpense" json:"ВРезервеExpense,omitempty"`
	VRezerveClosingBalance  *Int    `xml:"ВРезервеClosingBalance" json:"ВРезервеClosingBalance,omitempty"`
	RecorderType            *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterSummyVRassrochkuRowType struct {
	Recorder             String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period               *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber           Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active               *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType           *String  `xml:"RecordType" json:"RecordType,omitempty"`
	OrganizatsiiaKey     *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DogovorRassrochkiKey *Guid    `xml:"ДоговорРассрочки_Key" json:"ДоговорРассрочки_Key,omitempty"`
	SostavStrokiChekaKey *Guid    `xml:"СоставСтрокиЧека_Key" json:"СоставСтрокиЧека_Key,omitempty"`
	Sum                  *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS             *Float   `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	RecorderType         String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterSummyVRassrochkuBalance struct {
	OrganizatsiiaKey     *Guid  `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DogovorRassrochkiKey *Guid  `xml:"ДоговорРассрочки_Key" json:"ДоговорРассрочки_Key,omitempty"`
	SostavStrokiChekaKey *Guid  `xml:"СоставСтрокиЧека_Key" json:"СоставСтрокиЧека_Key,omitempty"`
	SummaBalance         *Float `xml:"СуммаBalance" json:"СуммаBalance,omitempty"`
	SummaNDSBalance      *Float `xml:"СуммаНДСBalance" json:"СуммаНДСBalance,omitempty"`
}

type AccumulationRegisterSummyVRassrochkuTurnover struct {
	OrganizatsiiaKey     *Guid   `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DogovorRassrochkiKey *Guid   `xml:"ДоговорРассрочки_Key" json:"ДоговорРассрочки_Key,omitempty"`
	SostavStrokiChekaKey *Guid   `xml:"СоставСтрокиЧека_Key" json:"СоставСтрокиЧека_Key,omitempty"`
	Period               *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod         *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod         *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod           *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod            *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod           *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod        *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod          *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod        *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod       *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod           *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder             *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber           *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SummaTurnover        *Float  `xml:"СуммаTurnover" json:"СуммаTurnover,omitempty"`
	SummaReceipt         *Float  `xml:"СуммаReceipt" json:"СуммаReceipt,omitempty"`
	SummaExpense         *Float  `xml:"СуммаExpense" json:"СуммаExpense,omitempty"`
	SummaNDSTurnover     *Float  `xml:"СуммаНДСTurnover" json:"СуммаНДСTurnover,omitempty"`
	SummaNDSReceipt      *Float  `xml:"СуммаНДСReceipt" json:"СуммаНДСReceipt,omitempty"`
	SummaNDSExpense      *Float  `xml:"СуммаНДСExpense" json:"СуммаНДСExpense,omitempty"`
	RecorderType         *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterSummyVRassrochkuBalanceAndTurnover struct {
	OrganizatsiiaKey       *Guid   `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DogovorRassrochkiKey   *Guid   `xml:"ДоговорРассрочки_Key" json:"ДоговорРассрочки_Key,omitempty"`
	SostavStrokiChekaKey   *Guid   `xml:"СоставСтрокиЧека_Key" json:"СоставСтрокиЧека_Key,omitempty"`
	Period                 *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod           *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod           *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod             *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod              *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod             *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod          *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod            *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod          *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod         *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod             *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder               *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber             *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SummaOpeningBalance    *Float  `xml:"СуммаOpeningBalance" json:"СуммаOpeningBalance,omitempty"`
	SummaTurnover          *Float  `xml:"СуммаTurnover" json:"СуммаTurnover,omitempty"`
	SummaReceipt           *Float  `xml:"СуммаReceipt" json:"СуммаReceipt,omitempty"`
	SummaExpense           *Float  `xml:"СуммаExpense" json:"СуммаExpense,omitempty"`
	SummaClosingBalance    *Float  `xml:"СуммаClosingBalance" json:"СуммаClosingBalance,omitempty"`
	SummaNDSOpeningBalance *Float  `xml:"СуммаНДСOpeningBalance" json:"СуммаНДСOpeningBalance,omitempty"`
	SummaNDSTurnover       *Float  `xml:"СуммаНДСTurnover" json:"СуммаНДСTurnover,omitempty"`
	SummaNDSReceipt        *Float  `xml:"СуммаНДСReceipt" json:"СуммаНДСReceipt,omitempty"`
	SummaNDSExpense        *Float  `xml:"СуммаНДСExpense" json:"СуммаНДСExpense,omitempty"`
	SummaNDSClosingBalance *Float  `xml:"СуммаНДСClosingBalance" json:"СуммаНДСClosingBalance,omitempty"`
	RecorderType           *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterGrafikPlatezheiRowType struct {
	Recorder               String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                 *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber             Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                 *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType             *String  `xml:"RecordType" json:"RecordType,omitempty"`
	OrganizatsiiaKey       *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DogovorKontragentaKey  *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	VidDogovoraKontragenta *String  `xml:"ВидДоговораКонтрагента" json:"ВидДоговораКонтрагента,omitempty"`
	DataDolga              *Time    `xml:"ДатаДолга" json:"ДатаДолга,omitempty"`
	Oplacheno              *Float   `xml:"Оплачено" json:"Оплачено,omitempty"`
	NachislenDolg          *Float   `xml:"НачисленДолг" json:"НачисленДолг,omitempty"`
	Dolg                   *Float   `xml:"Долг" json:"Долг,omitempty"`
	Avans                  *Float   `xml:"Аванс" json:"Аванс,omitempty"`
	OplachenoUpr           *Int     `xml:"ОплаченоУпр" json:"ОплаченоУпр,omitempty"`
	NachislenDolgUpr       *Float   `xml:"НачисленДолгУпр" json:"НачисленДолгУпр,omitempty"`
	DolgUpr                *Float   `xml:"ДолгУпр" json:"ДолгУпр,omitempty"`
	AvansUpr               *Float   `xml:"АвансУпр" json:"АвансУпр,omitempty"`
	RecorderType           String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterGrafikPlatezheiBalance struct {
	OrganizatsiiaKey        *Guid   `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DogovorKontragentaKey   *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	VidDogovoraKontragenta  *String `xml:"ВидДоговораКонтрагента" json:"ВидДоговораКонтрагента,omitempty"`
	DataDolga               *Time   `xml:"ДатаДолга" json:"ДатаДолга,omitempty"`
	OplachenoBalance        *Float  `xml:"ОплаченоBalance" json:"ОплаченоBalance,omitempty"`
	NachislenDolgBalance    *Float  `xml:"НачисленДолгBalance" json:"НачисленДолгBalance,omitempty"`
	DolgBalance             *Float  `xml:"ДолгBalance" json:"ДолгBalance,omitempty"`
	AvansBalance            *Float  `xml:"АвансBalance" json:"АвансBalance,omitempty"`
	OplachenoUprBalance     *Int    `xml:"ОплаченоУпрBalance" json:"ОплаченоУпрBalance,omitempty"`
	NachislenDolgUprBalance *Float  `xml:"НачисленДолгУпрBalance" json:"НачисленДолгУпрBalance,omitempty"`
	DolgUprBalance          *Float  `xml:"ДолгУпрBalance" json:"ДолгУпрBalance,omitempty"`
	AvansUprBalance         *Float  `xml:"АвансУпрBalance" json:"АвансУпрBalance,omitempty"`
}

type AccumulationRegisterGrafikPlatezheiTurnover struct {
	OrganizatsiiaKey         *Guid   `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DogovorKontragentaKey    *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	VidDogovoraKontragenta   *String `xml:"ВидДоговораКонтрагента" json:"ВидДоговораКонтрагента,omitempty"`
	DataDolga                *Time   `xml:"ДатаДолга" json:"ДатаДолга,omitempty"`
	Period                   *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod             *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod             *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod               *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod               *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod            *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod              *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod            *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod           *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod               *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                 *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber               *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	OplachenoTurnover        *Float  `xml:"ОплаченоTurnover" json:"ОплаченоTurnover,omitempty"`
	OplachenoReceipt         *Float  `xml:"ОплаченоReceipt" json:"ОплаченоReceipt,omitempty"`
	OplachenoExpense         *Float  `xml:"ОплаченоExpense" json:"ОплаченоExpense,omitempty"`
	NachislenDolgTurnover    *Float  `xml:"НачисленДолгTurnover" json:"НачисленДолгTurnover,omitempty"`
	NachislenDolgReceipt     *Float  `xml:"НачисленДолгReceipt" json:"НачисленДолгReceipt,omitempty"`
	NachislenDolgExpense     *Float  `xml:"НачисленДолгExpense" json:"НачисленДолгExpense,omitempty"`
	DolgTurnover             *Float  `xml:"ДолгTurnover" json:"ДолгTurnover,omitempty"`
	DolgReceipt              *Float  `xml:"ДолгReceipt" json:"ДолгReceipt,omitempty"`
	DolgExpense              *Float  `xml:"ДолгExpense" json:"ДолгExpense,omitempty"`
	AvansTurnover            *Float  `xml:"АвансTurnover" json:"АвансTurnover,omitempty"`
	AvansReceipt             *Float  `xml:"АвансReceipt" json:"АвансReceipt,omitempty"`
	AvansExpense             *Float  `xml:"АвансExpense" json:"АвансExpense,omitempty"`
	OplachenoUprTurnover     *Int    `xml:"ОплаченоУпрTurnover" json:"ОплаченоУпрTurnover,omitempty"`
	OplachenoUprReceipt      *Int    `xml:"ОплаченоУпрReceipt" json:"ОплаченоУпрReceipt,omitempty"`
	OplachenoUprExpense      *Int    `xml:"ОплаченоУпрExpense" json:"ОплаченоУпрExpense,omitempty"`
	NachislenDolgUprTurnover *Float  `xml:"НачисленДолгУпрTurnover" json:"НачисленДолгУпрTurnover,omitempty"`
	NachislenDolgUprReceipt  *Float  `xml:"НачисленДолгУпрReceipt" json:"НачисленДолгУпрReceipt,omitempty"`
	NachislenDolgUprExpense  *Float  `xml:"НачисленДолгУпрExpense" json:"НачисленДолгУпрExpense,omitempty"`
	DolgUprTurnover          *Float  `xml:"ДолгУпрTurnover" json:"ДолгУпрTurnover,omitempty"`
	DolgUprReceipt           *Float  `xml:"ДолгУпрReceipt" json:"ДолгУпрReceipt,omitempty"`
	DolgUprExpense           *Float  `xml:"ДолгУпрExpense" json:"ДолгУпрExpense,omitempty"`
	AvansUprTurnover         *Float  `xml:"АвансУпрTurnover" json:"АвансУпрTurnover,omitempty"`
	AvansUprReceipt          *Float  `xml:"АвансУпрReceipt" json:"АвансУпрReceipt,omitempty"`
	AvansUprExpense          *Float  `xml:"АвансУпрExpense" json:"АвансУпрExpense,omitempty"`
	RecorderType             *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterGrafikPlatezheiBalanceAndTurnover struct {
	OrganizatsiiaKey               *Guid   `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DogovorKontragentaKey          *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	VidDogovoraKontragenta         *String `xml:"ВидДоговораКонтрагента" json:"ВидДоговораКонтрагента,omitempty"`
	DataDolga                      *Time   `xml:"ДатаДолга" json:"ДатаДолга,omitempty"`
	Period                         *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod                   *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod                   *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                     *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                      *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                     *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod                  *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                    *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod                  *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod                 *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                     *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                       *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                     *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	OplachenoOpeningBalance        *Float  `xml:"ОплаченоOpeningBalance" json:"ОплаченоOpeningBalance,omitempty"`
	OplachenoTurnover              *Float  `xml:"ОплаченоTurnover" json:"ОплаченоTurnover,omitempty"`
	OplachenoReceipt               *Float  `xml:"ОплаченоReceipt" json:"ОплаченоReceipt,omitempty"`
	OplachenoExpense               *Float  `xml:"ОплаченоExpense" json:"ОплаченоExpense,omitempty"`
	OplachenoClosingBalance        *Float  `xml:"ОплаченоClosingBalance" json:"ОплаченоClosingBalance,omitempty"`
	NachislenDolgOpeningBalance    *Float  `xml:"НачисленДолгOpeningBalance" json:"НачисленДолгOpeningBalance,omitempty"`
	NachislenDolgTurnover          *Float  `xml:"НачисленДолгTurnover" json:"НачисленДолгTurnover,omitempty"`
	NachislenDolgReceipt           *Float  `xml:"НачисленДолгReceipt" json:"НачисленДолгReceipt,omitempty"`
	NachislenDolgExpense           *Float  `xml:"НачисленДолгExpense" json:"НачисленДолгExpense,omitempty"`
	NachislenDolgClosingBalance    *Float  `xml:"НачисленДолгClosingBalance" json:"НачисленДолгClosingBalance,omitempty"`
	DolgOpeningBalance             *Float  `xml:"ДолгOpeningBalance" json:"ДолгOpeningBalance,omitempty"`
	DolgTurnover                   *Float  `xml:"ДолгTurnover" json:"ДолгTurnover,omitempty"`
	DolgReceipt                    *Float  `xml:"ДолгReceipt" json:"ДолгReceipt,omitempty"`
	DolgExpense                    *Float  `xml:"ДолгExpense" json:"ДолгExpense,omitempty"`
	DolgClosingBalance             *Float  `xml:"ДолгClosingBalance" json:"ДолгClosingBalance,omitempty"`
	AvansOpeningBalance            *Float  `xml:"АвансOpeningBalance" json:"АвансOpeningBalance,omitempty"`
	AvansTurnover                  *Float  `xml:"АвансTurnover" json:"АвансTurnover,omitempty"`
	AvansReceipt                   *Float  `xml:"АвансReceipt" json:"АвансReceipt,omitempty"`
	AvansExpense                   *Float  `xml:"АвансExpense" json:"АвансExpense,omitempty"`
	AvansClosingBalance            *Float  `xml:"АвансClosingBalance" json:"АвансClosingBalance,omitempty"`
	OplachenoUprOpeningBalance     *Int    `xml:"ОплаченоУпрOpeningBalance" json:"ОплаченоУпрOpeningBalance,omitempty"`
	OplachenoUprTurnover           *Int    `xml:"ОплаченоУпрTurnover" json:"ОплаченоУпрTurnover,omitempty"`
	OplachenoUprReceipt            *Int    `xml:"ОплаченоУпрReceipt" json:"ОплаченоУпрReceipt,omitempty"`
	OplachenoUprExpense            *Int    `xml:"ОплаченоУпрExpense" json:"ОплаченоУпрExpense,omitempty"`
	OplachenoUprClosingBalance     *Int    `xml:"ОплаченоУпрClosingBalance" json:"ОплаченоУпрClosingBalance,omitempty"`
	NachislenDolgUprOpeningBalance *Float  `xml:"НачисленДолгУпрOpeningBalance" json:"НачисленДолгУпрOpeningBalance,omitempty"`
	NachislenDolgUprTurnover       *Float  `xml:"НачисленДолгУпрTurnover" json:"НачисленДолгУпрTurnover,omitempty"`
	NachislenDolgUprReceipt        *Float  `xml:"НачисленДолгУпрReceipt" json:"НачисленДолгУпрReceipt,omitempty"`
	NachislenDolgUprExpense        *Float  `xml:"НачисленДолгУпрExpense" json:"НачисленДолгУпрExpense,omitempty"`
	NachislenDolgUprClosingBalance *Float  `xml:"НачисленДолгУпрClosingBalance" json:"НачисленДолгУпрClosingBalance,omitempty"`
	DolgUprOpeningBalance          *Float  `xml:"ДолгУпрOpeningBalance" json:"ДолгУпрOpeningBalance,omitempty"`
	DolgUprTurnover                *Float  `xml:"ДолгУпрTurnover" json:"ДолгУпрTurnover,omitempty"`
	DolgUprReceipt                 *Float  `xml:"ДолгУпрReceipt" json:"ДолгУпрReceipt,omitempty"`
	DolgUprExpense                 *Float  `xml:"ДолгУпрExpense" json:"ДолгУпрExpense,omitempty"`
	DolgUprClosingBalance          *Float  `xml:"ДолгУпрClosingBalance" json:"ДолгУпрClosingBalance,omitempty"`
	AvansUprOpeningBalance         *Float  `xml:"АвансУпрOpeningBalance" json:"АвансУпрOpeningBalance,omitempty"`
	AvansUprTurnover               *Float  `xml:"АвансУпрTurnover" json:"АвансУпрTurnover,omitempty"`
	AvansUprReceipt                *Float  `xml:"АвансУпрReceipt" json:"АвансУпрReceipt,omitempty"`
	AvansUprExpense                *Float  `xml:"АвансУпрExpense" json:"АвансУпрExpense,omitempty"`
	AvansUprClosingBalance         *Float  `xml:"АвансУпрClosingBalance" json:"АвансУпрClosingBalance,omitempty"`
	RecorderType                   *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterRoznichnaiaVyruchkaRowType struct {
	Recorder              String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber            Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType            *String  `xml:"RecordType" json:"RecordType,omitempty"`
	RoznichnaiaTochka     *String  `xml:"РозничнаяТочка" json:"РозничнаяТочка,omitempty"`
	Sum                   *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	PodrazdelenieKey      *Guid    `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	RecorderType          String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	RoznichnaiaTochkaType *String  `xml:"РозничнаяТочка_Type" json:"РозничнаяТочка_Type,omitempty"`
}

type AccumulationRegisterRoznichnaiaVyruchkaBalance struct {
	RoznichnaiaTochka     *String `xml:"РозничнаяТочка" json:"РозничнаяТочка,omitempty"`
	SummaBalance          *Float  `xml:"СуммаBalance" json:"СуммаBalance,omitempty"`
	RoznichnaiaTochkaType *String `xml:"РозничнаяТочка_Type" json:"РозничнаяТочка_Type,omitempty"`
}

type AccumulationRegisterRoznichnaiaVyruchkaTurnover struct {
	RoznichnaiaTochka     *String `xml:"РозничнаяТочка" json:"РозничнаяТочка,omitempty"`
	Period                *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod          *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod          *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod            *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod             *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod            *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod         *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod           *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod         *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod        *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod            *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder              *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber            *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SummaTurnover         *Float  `xml:"СуммаTurnover" json:"СуммаTurnover,omitempty"`
	SummaReceipt          *Float  `xml:"СуммаReceipt" json:"СуммаReceipt,omitempty"`
	SummaExpense          *Float  `xml:"СуммаExpense" json:"СуммаExpense,omitempty"`
	RoznichnaiaTochkaType *String `xml:"РозничнаяТочка_Type" json:"РозничнаяТочка_Type,omitempty"`
	RecorderType          *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterRoznichnaiaVyruchkaBalanceAndTurnover struct {
	RoznichnaiaTochka     *String `xml:"РозничнаяТочка" json:"РозничнаяТочка,omitempty"`
	Period                *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod          *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod          *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod            *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod             *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod            *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod         *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod           *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod         *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod        *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod            *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder              *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber            *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SummaOpeningBalance   *Float  `xml:"СуммаOpeningBalance" json:"СуммаOpeningBalance,omitempty"`
	SummaTurnover         *Float  `xml:"СуммаTurnover" json:"СуммаTurnover,omitempty"`
	SummaReceipt          *Float  `xml:"СуммаReceipt" json:"СуммаReceipt,omitempty"`
	SummaExpense          *Float  `xml:"СуммаExpense" json:"СуммаExpense,omitempty"`
	SummaClosingBalance   *Float  `xml:"СуммаClosingBalance" json:"СуммаClosingBalance,omitempty"`
	RoznichnaiaTochkaType *String `xml:"РозничнаяТочка_Type" json:"РозничнаяТочка_Type,omitempty"`
	RecorderType          *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterTovaryVPutiRowType struct {
	Recorder                       String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                         *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber                     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                         *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType                     *String  `xml:"RecordType" json:"RecordType,omitempty"`
	ItemKey                        *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid    `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid    `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	OrganizatsiiaKey               *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DepartmentKey                  *Guid    `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	DogovorKontragentaKey          *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOprikhodovaniia        *String  `xml:"ДокументОприходования" json:"ДокументОприходования,omitempty"`
	Quantity                       *Int     `xml:"Количество" json:"Количество,omitempty"`
	Weight                         *Float   `xml:"Вес" json:"Вес,omitempty"`
	RecorderType                   String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	DokumentOprikhodovaniiaType    *String  `xml:"ДокументОприходования_Type" json:"ДокументОприходования_Type,omitempty"`
}

type AccumulationRegisterTovaryVPutiBalance struct {
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	OrganizatsiiaKey               *Guid   `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DepartmentKey                  *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	DogovorKontragentaKey          *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOprikhodovaniia        *String `xml:"ДокументОприходования" json:"ДокументОприходования,omitempty"`
	KolichestvoBalance             *Int    `xml:"КоличествоBalance" json:"КоличествоBalance,omitempty"`
	VesBalance                     *Float  `xml:"ВесBalance" json:"ВесBalance,omitempty"`
	DokumentOprikhodovaniiaType    *String `xml:"ДокументОприходования_Type" json:"ДокументОприходования_Type,omitempty"`
}

type AccumulationRegisterTovaryVPutiTurnover struct {
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	OrganizatsiiaKey               *Guid   `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DepartmentKey                  *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	DogovorKontragentaKey          *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOprikhodovaniia        *String `xml:"ДокументОприходования" json:"ДокументОприходования,omitempty"`
	Period                         *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod                   *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod                   *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                     *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                      *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                     *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod                  *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                    *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod                  *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod                 *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                     *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                       *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                     *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	KolichestvoTurnover            *Int    `xml:"КоличествоTurnover" json:"КоличествоTurnover,omitempty"`
	KolichestvoReceipt             *Int    `xml:"КоличествоReceipt" json:"КоличествоReceipt,omitempty"`
	KolichestvoExpense             *Int    `xml:"КоличествоExpense" json:"КоличествоExpense,omitempty"`
	VesTurnover                    *Float  `xml:"ВесTurnover" json:"ВесTurnover,omitempty"`
	VesReceipt                     *Float  `xml:"ВесReceipt" json:"ВесReceipt,omitempty"`
	VesExpense                     *Float  `xml:"ВесExpense" json:"ВесExpense,omitempty"`
	DokumentOprikhodovaniiaType    *String `xml:"ДокументОприходования_Type" json:"ДокументОприходования_Type,omitempty"`
	RecorderType                   *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterTovaryVPutiBalanceAndTurnover struct {
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	OrganizatsiiaKey               *Guid   `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DepartmentKey                  *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	DogovorKontragentaKey          *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOprikhodovaniia        *String `xml:"ДокументОприходования" json:"ДокументОприходования,omitempty"`
	Period                         *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod                   *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod                   *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                     *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                      *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                     *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod                  *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                    *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod                  *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod                 *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                     *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                       *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                     *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	KolichestvoOpeningBalance      *Int    `xml:"КоличествоOpeningBalance" json:"КоличествоOpeningBalance,omitempty"`
	KolichestvoTurnover            *Int    `xml:"КоличествоTurnover" json:"КоличествоTurnover,omitempty"`
	KolichestvoReceipt             *Int    `xml:"КоличествоReceipt" json:"КоличествоReceipt,omitempty"`
	KolichestvoExpense             *Int    `xml:"КоличествоExpense" json:"КоличествоExpense,omitempty"`
	KolichestvoClosingBalance      *Int    `xml:"КоличествоClosingBalance" json:"КоличествоClosingBalance,omitempty"`
	VesOpeningBalance              *Float  `xml:"ВесOpeningBalance" json:"ВесOpeningBalance,omitempty"`
	VesTurnover                    *Float  `xml:"ВесTurnover" json:"ВесTurnover,omitempty"`
	VesReceipt                     *Float  `xml:"ВесReceipt" json:"ВесReceipt,omitempty"`
	VesExpense                     *Float  `xml:"ВесExpense" json:"ВесExpense,omitempty"`
	VesClosingBalance              *Float  `xml:"ВесClosingBalance" json:"ВесClosingBalance,omitempty"`
	DokumentOprikhodovaniiaType    *String `xml:"ДокументОприходования_Type" json:"ДокументОприходования_Type,omitempty"`
	RecorderType                   *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterPoteriMetallaVProizvodstveRowType struct {
	Recorder                    String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                      *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber                  Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                      *Boolean `xml:"Active" json:"Active,omitempty"`
	OrganizatsiiaKey            *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DogovorKontragentaKey       *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	Nomenklatura                *String  `xml:"Номенклатура" json:"Номенклатура,omitempty"`
	DokumentOprikhodovaniia     *String  `xml:"ДокументОприходования" json:"ДокументОприходования,omitempty"`
	VesPoter                    *Float   `xml:"ВесПотерь" json:"ВесПотерь,omitempty"`
	RecorderType                String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	ItemType                    *String  `xml:"Номенклатура_Type" json:"Номенклатура_Type,omitempty"`
	DokumentOprikhodovaniiaType *String  `xml:"ДокументОприходования_Type" json:"ДокументОприходования_Type,omitempty"`
}

type AccumulationRegisterPoteriMetallaVProizvodstveTurnover struct {
	OrganizatsiiaKey            *Guid   `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DogovorKontragentaKey       *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	Nomenklatura                *String `xml:"Номенклатура" json:"Номенклатура,omitempty"`
	DokumentOprikhodovaniia     *String `xml:"ДокументОприходования" json:"ДокументОприходования,omitempty"`
	Period                      *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod                *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod                *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                  *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                   *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                  *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod               *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                 *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod               *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod              *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                  *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                    *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                  *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	VesPoterTurnover            *Float  `xml:"ВесПотерьTurnover" json:"ВесПотерьTurnover,omitempty"`
	ItemType                    *String `xml:"Номенклатура_Type" json:"Номенклатура_Type,omitempty"`
	DokumentOprikhodovaniiaType *String `xml:"ДокументОприходования_Type" json:"ДокументОприходования_Type,omitempty"`
	RecorderType                *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterPartiiTovarovNaSkladakhRowType struct {
	Recorder                       String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                         *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber                     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                         *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType                     *String  `xml:"RecordType" json:"RecordType,omitempty"`
	ItemKey                        *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid    `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid    `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	OrganizatsiiaKey               *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DepartmentKey                  *Guid    `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	DokumentOprikhodovaniia        *String  `xml:"ДокументОприходования" json:"ДокументОприходования,omitempty"`
	StatusPartii                   *String  `xml:"СтатусПартии" json:"СтатусПартии,omitempty"`
	KachestvoKey                   *Guid    `xml:"Качество_Key" json:"Качество_Key,omitempty"`
	Quantity                       *Int     `xml:"Количество" json:"Количество,omitempty"`
	Weight                         *Float   `xml:"Вес" json:"Вес,omitempty"`
	Cost                           *Float   `xml:"Стоимость" json:"Стоимость,omitempty"`
	StoimostUpr                    *Float   `xml:"СтоимостьУпр" json:"СтоимостьУпр,omitempty"`
	StoimostBezNDS                 *Float   `xml:"СтоимостьБезНДС" json:"СтоимостьБезНДС,omitempty"`
	OperationCode                  *String  `xml:"КодОперации" json:"КодОперации,omitempty"`
	SpisaniePartii                 *Boolean `xml:"СписаниеПартий" json:"СписаниеПартий,omitempty"`
	NomerKorStroki                 *Int     `xml:"НомерКорСтроки" json:"НомерКорСтроки,omitempty"`
	RecorderType                   String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	DokumentOprikhodovaniiaType    *String  `xml:"ДокументОприходования_Type" json:"ДокументОприходования_Type,omitempty"`
}

type AccumulationRegisterPartiiTovarovNaSkladakhBalance struct {
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	OrganizatsiiaKey               *Guid   `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DepartmentKey                  *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	DokumentOprikhodovaniia        *String `xml:"ДокументОприходования" json:"ДокументОприходования,omitempty"`
	StatusPartii                   *String `xml:"СтатусПартии" json:"СтатусПартии,omitempty"`
	KachestvoKey                   *Guid   `xml:"Качество_Key" json:"Качество_Key,omitempty"`
	KolichestvoBalance             *Int    `xml:"КоличествоBalance" json:"КоличествоBalance,omitempty"`
	VesBalance                     *Float  `xml:"ВесBalance" json:"ВесBalance,omitempty"`
	StoimostBalance                *Float  `xml:"СтоимостьBalance" json:"СтоимостьBalance,omitempty"`
	StoimostUprBalance             *Float  `xml:"СтоимостьУпрBalance" json:"СтоимостьУпрBalance,omitempty"`
	StoimostBezNDSBalance          *Float  `xml:"СтоимостьБезНДСBalance" json:"СтоимостьБезНДСBalance,omitempty"`
	DokumentOprikhodovaniiaType    *String `xml:"ДокументОприходования_Type" json:"ДокументОприходования_Type,omitempty"`
}

type AccumulationRegisterPartiiTovarovNaSkladakhTurnover struct {
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	OrganizatsiiaKey               *Guid   `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DepartmentKey                  *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	DokumentOprikhodovaniia        *String `xml:"ДокументОприходования" json:"ДокументОприходования,omitempty"`
	StatusPartii                   *String `xml:"СтатусПартии" json:"СтатусПартии,omitempty"`
	KachestvoKey                   *Guid   `xml:"Качество_Key" json:"Качество_Key,omitempty"`
	Period                         *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod                   *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod                   *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                     *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                      *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                     *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod                  *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                    *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod                  *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod                 *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                     *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                       *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                     *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	KolichestvoTurnover            *Int    `xml:"КоличествоTurnover" json:"КоличествоTurnover,omitempty"`
	KolichestvoReceipt             *Int    `xml:"КоличествоReceipt" json:"КоличествоReceipt,omitempty"`
	KolichestvoExpense             *Int    `xml:"КоличествоExpense" json:"КоличествоExpense,omitempty"`
	VesTurnover                    *Float  `xml:"ВесTurnover" json:"ВесTurnover,omitempty"`
	VesReceipt                     *Float  `xml:"ВесReceipt" json:"ВесReceipt,omitempty"`
	VesExpense                     *Float  `xml:"ВесExpense" json:"ВесExpense,omitempty"`
	StoimostTurnover               *Float  `xml:"СтоимостьTurnover" json:"СтоимостьTurnover,omitempty"`
	StoimostReceipt                *Float  `xml:"СтоимостьReceipt" json:"СтоимостьReceipt,omitempty"`
	StoimostExpense                *Float  `xml:"СтоимостьExpense" json:"СтоимостьExpense,omitempty"`
	StoimostUprTurnover            *Float  `xml:"СтоимостьУпрTurnover" json:"СтоимостьУпрTurnover,omitempty"`
	StoimostUprReceipt             *Float  `xml:"СтоимостьУпрReceipt" json:"СтоимостьУпрReceipt,omitempty"`
	StoimostUprExpense             *Float  `xml:"СтоимостьУпрExpense" json:"СтоимостьУпрExpense,omitempty"`
	StoimostBezNDSTurnover         *Float  `xml:"СтоимостьБезНДСTurnover" json:"СтоимостьБезНДСTurnover,omitempty"`
	StoimostBezNDSReceipt          *Float  `xml:"СтоимостьБезНДСReceipt" json:"СтоимостьБезНДСReceipt,omitempty"`
	StoimostBezNDSExpense          *Float  `xml:"СтоимостьБезНДСExpense" json:"СтоимостьБезНДСExpense,omitempty"`
	DokumentOprikhodovaniiaType    *String `xml:"ДокументОприходования_Type" json:"ДокументОприходования_Type,omitempty"`
	RecorderType                   *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterPartiiTovarovNaSkladakhBalanceAndTurnover struct {
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	OrganizatsiiaKey               *Guid   `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DepartmentKey                  *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	DokumentOprikhodovaniia        *String `xml:"ДокументОприходования" json:"ДокументОприходования,omitempty"`
	StatusPartii                   *String `xml:"СтатусПартии" json:"СтатусПартии,omitempty"`
	KachestvoKey                   *Guid   `xml:"Качество_Key" json:"Качество_Key,omitempty"`
	Period                         *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod                   *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod                   *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                     *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                      *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                     *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod                  *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                    *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod                  *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod                 *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                     *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                       *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                     *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	KolichestvoOpeningBalance      *Int    `xml:"КоличествоOpeningBalance" json:"КоличествоOpeningBalance,omitempty"`
	KolichestvoTurnover            *Int    `xml:"КоличествоTurnover" json:"КоличествоTurnover,omitempty"`
	KolichestvoReceipt             *Int    `xml:"КоличествоReceipt" json:"КоличествоReceipt,omitempty"`
	KolichestvoExpense             *Int    `xml:"КоличествоExpense" json:"КоличествоExpense,omitempty"`
	KolichestvoClosingBalance      *Int    `xml:"КоличествоClosingBalance" json:"КоличествоClosingBalance,omitempty"`
	VesOpeningBalance              *Float  `xml:"ВесOpeningBalance" json:"ВесOpeningBalance,omitempty"`
	VesTurnover                    *Float  `xml:"ВесTurnover" json:"ВесTurnover,omitempty"`
	VesReceipt                     *Float  `xml:"ВесReceipt" json:"ВесReceipt,omitempty"`
	VesExpense                     *Float  `xml:"ВесExpense" json:"ВесExpense,omitempty"`
	VesClosingBalance              *Float  `xml:"ВесClosingBalance" json:"ВесClosingBalance,omitempty"`
	StoimostOpeningBalance         *Float  `xml:"СтоимостьOpeningBalance" json:"СтоимостьOpeningBalance,omitempty"`
	StoimostTurnover               *Float  `xml:"СтоимостьTurnover" json:"СтоимостьTurnover,omitempty"`
	StoimostReceipt                *Float  `xml:"СтоимостьReceipt" json:"СтоимостьReceipt,omitempty"`
	StoimostExpense                *Float  `xml:"СтоимостьExpense" json:"СтоимостьExpense,omitempty"`
	StoimostClosingBalance         *Float  `xml:"СтоимостьClosingBalance" json:"СтоимостьClosingBalance,omitempty"`
	StoimostUprOpeningBalance      *Float  `xml:"СтоимостьУпрOpeningBalance" json:"СтоимостьУпрOpeningBalance,omitempty"`
	StoimostUprTurnover            *Float  `xml:"СтоимостьУпрTurnover" json:"СтоимостьУпрTurnover,omitempty"`
	StoimostUprReceipt             *Float  `xml:"СтоимостьУпрReceipt" json:"СтоимостьУпрReceipt,omitempty"`
	StoimostUprExpense             *Float  `xml:"СтоимостьУпрExpense" json:"СтоимостьУпрExpense,omitempty"`
	StoimostUprClosingBalance      *Float  `xml:"СтоимостьУпрClosingBalance" json:"СтоимостьУпрClosingBalance,omitempty"`
	StoimostBezNDSOpeningBalance   *Float  `xml:"СтоимостьБезНДСOpeningBalance" json:"СтоимостьБезНДСOpeningBalance,omitempty"`
	StoimostBezNDSTurnover         *Float  `xml:"СтоимостьБезНДСTurnover" json:"СтоимостьБезНДСTurnover,omitempty"`
	StoimostBezNDSReceipt          *Float  `xml:"СтоимостьБезНДСReceipt" json:"СтоимостьБезНДСReceipt,omitempty"`
	StoimostBezNDSExpense          *Float  `xml:"СтоимостьБезНДСExpense" json:"СтоимостьБезНДСExpense,omitempty"`
	StoimostBezNDSClosingBalance   *Float  `xml:"СтоимостьБезНДСClosingBalance" json:"СтоимостьБезНДСClosingBalance,omitempty"`
	DokumentOprikhodovaniiaType    *String `xml:"ДокументОприходования_Type" json:"ДокументОприходования_Type,omitempty"`
	RecorderType                   *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterSummyDokumentovDliaObmenaRowType struct {
	Recorder         String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period           *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber       Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active           *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType       *String  `xml:"RecordType" json:"RecordType,omitempty"`
	OrganizatsiiaKey *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DepartmentKey    *Guid    `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	DokumentKey      *Guid    `xml:"Документ_Key" json:"Документ_Key,omitempty"`
	Sum              *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	RecorderType     String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterSummyDokumentovDliaObmenaBalance struct {
	OrganizatsiiaKey *Guid  `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DepartmentKey    *Guid  `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	DokumentKey      *Guid  `xml:"Документ_Key" json:"Документ_Key,omitempty"`
	SummaBalance     *Float `xml:"СуммаBalance" json:"СуммаBalance,omitempty"`
}

type AccumulationRegisterSummyDokumentovDliaObmenaTurnover struct {
	OrganizatsiiaKey *Guid   `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DepartmentKey    *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	DokumentKey      *Guid   `xml:"Документ_Key" json:"Документ_Key,omitempty"`
	Period           *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod     *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod     *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod       *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod        *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod       *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod    *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod      *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod    *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod   *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod       *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder         *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber       *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SummaTurnover    *Float  `xml:"СуммаTurnover" json:"СуммаTurnover,omitempty"`
	SummaReceipt     *Float  `xml:"СуммаReceipt" json:"СуммаReceipt,omitempty"`
	SummaExpense     *Float  `xml:"СуммаExpense" json:"СуммаExpense,omitempty"`
	RecorderType     *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterSummyDokumentovDliaObmenaBalanceAndTurnover struct {
	OrganizatsiiaKey    *Guid   `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DepartmentKey       *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	DokumentKey         *Guid   `xml:"Документ_Key" json:"Документ_Key,omitempty"`
	Period              *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod        *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod        *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod          *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod           *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod          *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod       *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod         *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod       *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod      *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod          *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder            *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber          *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SummaOpeningBalance *Float  `xml:"СуммаOpeningBalance" json:"СуммаOpeningBalance,omitempty"`
	SummaTurnover       *Float  `xml:"СуммаTurnover" json:"СуммаTurnover,omitempty"`
	SummaReceipt        *Float  `xml:"СуммаReceipt" json:"СуммаReceipt,omitempty"`
	SummaExpense        *Float  `xml:"СуммаExpense" json:"СуммаExpense,omitempty"`
	SummaClosingBalance *Float  `xml:"СуммаClosingBalance" json:"СуммаClosingBalance,omitempty"`
	RecorderType        *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterDvizheniiaDenezhnykhSredstvRowType struct {
	Recorder                          String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                            *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber                        Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                            *Boolean `xml:"Active" json:"Active,omitempty"`
	VidDenezhnykhSredstv              *String  `xml:"ВидДенежныхСредств" json:"ВидДенежныхСредств,omitempty"`
	PrikhodRaskhod                    *String  `xml:"ПриходРасход" json:"ПриходРасход,omitempty"`
	BankovskiiSchetKassa              *String  `xml:"БанковскийСчетКасса" json:"БанковскийСчетКасса,omitempty"`
	TypeOfMovingMoneyKey              *Guid    `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	DokumentDvizheniia                *String  `xml:"ДокументДвижения" json:"ДокументДвижения,omitempty"`
	Kontragent                        *String  `xml:"Контрагент" json:"Контрагент,omitempty"`
	DogovorKontragentaKey             *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	Sdelka                            *String  `xml:"Сделка" json:"Сделка,omitempty"`
	ProektKey                         *Guid    `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	DokumentPlanirovaniiaPlatezha     *String  `xml:"ДокументПланированияПлатежа" json:"ДокументПланированияПлатежа,omitempty"`
	Sum                               *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	SummaUpr                          *Float   `xml:"СуммаУпр" json:"СуммаУпр,omitempty"`
	RecorderType                      String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	BankovskiiSchetKassaType          *String  `xml:"БанковскийСчетКасса_Type" json:"БанковскийСчетКасса_Type,omitempty"`
	DokumentDvizheniiaType            *String  `xml:"ДокументДвижения_Type" json:"ДокументДвижения_Type,omitempty"`
	KontragentType                    *String  `xml:"Контрагент_Type" json:"Контрагент_Type,omitempty"`
	SdelkaType                        *String  `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
	DokumentPlanirovaniiaPlatezhaType *String  `xml:"ДокументПланированияПлатежа_Type" json:"ДокументПланированияПлатежа_Type,omitempty"`
}

type AccumulationRegisterDvizheniiaDenezhnykhSredstvTurnover struct {
	VidDenezhnykhSredstv              *String `xml:"ВидДенежныхСредств" json:"ВидДенежныхСредств,omitempty"`
	PrikhodRaskhod                    *String `xml:"ПриходРасход" json:"ПриходРасход,omitempty"`
	BankovskiiSchetKassa              *String `xml:"БанковскийСчетКасса" json:"БанковскийСчетКасса,omitempty"`
	TypeOfMovingMoneyKey              *Guid   `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	DokumentDvizheniia                *String `xml:"ДокументДвижения" json:"ДокументДвижения,omitempty"`
	Kontragent                        *String `xml:"Контрагент" json:"Контрагент,omitempty"`
	DogovorKontragentaKey             *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	Sdelka                            *String `xml:"Сделка" json:"Сделка,omitempty"`
	ProektKey                         *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	DokumentPlanirovaniiaPlatezha     *String `xml:"ДокументПланированияПлатежа" json:"ДокументПланированияПлатежа,omitempty"`
	Period                            *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod                      *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod                      *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                        *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                         *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                        *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod                     *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                       *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod                     *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod                    *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                        *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                          *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                        *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SummaTurnover                     *Float  `xml:"СуммаTurnover" json:"СуммаTurnover,omitempty"`
	SummaUprTurnover                  *Float  `xml:"СуммаУпрTurnover" json:"СуммаУпрTurnover,omitempty"`
	BankovskiiSchetKassaType          *String `xml:"БанковскийСчетКасса_Type" json:"БанковскийСчетКасса_Type,omitempty"`
	DokumentDvizheniiaType            *String `xml:"ДокументДвижения_Type" json:"ДокументДвижения_Type,omitempty"`
	KontragentType                    *String `xml:"Контрагент_Type" json:"Контрагент_Type,omitempty"`
	SdelkaType                        *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
	DokumentPlanirovaniiaPlatezhaType *String `xml:"ДокументПланированияПлатежа_Type" json:"ДокументПланированияПлатежа_Type,omitempty"`
	RecorderType                      *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterProdazhiPoStatiamRowType struct {
	Recorder         String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period           *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber       Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active           *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType       *String  `xml:"RecordType" json:"RecordType,omitempty"`
	OrganizatsiiaKey *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DepartmentKey    *Guid    `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	StatiaKey        *Guid    `xml:"Статья_Key" json:"Статья_Key,omitempty"`
	SummaProdazha    *Float   `xml:"СуммаПродажа" json:"СуммаПродажа,omitempty"`
	SummaVozvrat     *Float   `xml:"СуммаВозврат" json:"СуммаВозврат,omitempty"`
	RecorderType     String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterProdazhiPoStatiamBalance struct {
	OrganizatsiiaKey     *Guid  `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DepartmentKey        *Guid  `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	StatiaKey            *Guid  `xml:"Статья_Key" json:"Статья_Key,omitempty"`
	SummaProdazhaBalance *Float `xml:"СуммаПродажаBalance" json:"СуммаПродажаBalance,omitempty"`
	SummaVozvratBalance  *Float `xml:"СуммаВозвратBalance" json:"СуммаВозвратBalance,omitempty"`
}

type AccumulationRegisterProdazhiPoStatiamTurnover struct {
	OrganizatsiiaKey      *Guid   `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DepartmentKey         *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	StatiaKey             *Guid   `xml:"Статья_Key" json:"Статья_Key,omitempty"`
	Period                *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod          *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod          *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod            *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod             *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod            *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod         *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod           *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod         *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod        *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod            *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder              *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber            *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SummaProdazhaTurnover *Float  `xml:"СуммаПродажаTurnover" json:"СуммаПродажаTurnover,omitempty"`
	SummaProdazhaReceipt  *Float  `xml:"СуммаПродажаReceipt" json:"СуммаПродажаReceipt,omitempty"`
	SummaProdazhaExpense  *Float  `xml:"СуммаПродажаExpense" json:"СуммаПродажаExpense,omitempty"`
	SummaVozvratTurnover  *Float  `xml:"СуммаВозвратTurnover" json:"СуммаВозвратTurnover,omitempty"`
	SummaVozvratReceipt   *Float  `xml:"СуммаВозвратReceipt" json:"СуммаВозвратReceipt,omitempty"`
	SummaVozvratExpense   *Float  `xml:"СуммаВозвратExpense" json:"СуммаВозвратExpense,omitempty"`
	RecorderType          *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterProdazhiPoStatiamBalanceAndTurnover struct {
	OrganizatsiiaKey            *Guid   `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DepartmentKey               *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	StatiaKey                   *Guid   `xml:"Статья_Key" json:"Статья_Key,omitempty"`
	Period                      *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod                *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod                *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                  *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                   *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                  *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod               *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                 *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod               *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod              *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                  *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                    *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                  *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SummaProdazhaOpeningBalance *Float  `xml:"СуммаПродажаOpeningBalance" json:"СуммаПродажаOpeningBalance,omitempty"`
	SummaProdazhaTurnover       *Float  `xml:"СуммаПродажаTurnover" json:"СуммаПродажаTurnover,omitempty"`
	SummaProdazhaReceipt        *Float  `xml:"СуммаПродажаReceipt" json:"СуммаПродажаReceipt,omitempty"`
	SummaProdazhaExpense        *Float  `xml:"СуммаПродажаExpense" json:"СуммаПродажаExpense,omitempty"`
	SummaProdazhaClosingBalance *Float  `xml:"СуммаПродажаClosingBalance" json:"СуммаПродажаClosingBalance,omitempty"`
	SummaVozvratOpeningBalance  *Float  `xml:"СуммаВозвратOpeningBalance" json:"СуммаВозвратOpeningBalance,omitempty"`
	SummaVozvratTurnover        *Float  `xml:"СуммаВозвратTurnover" json:"СуммаВозвратTurnover,omitempty"`
	SummaVozvratReceipt         *Float  `xml:"СуммаВозвратReceipt" json:"СуммаВозвратReceipt,omitempty"`
	SummaVozvratExpense         *Float  `xml:"СуммаВозвратExpense" json:"СуммаВозвратExpense,omitempty"`
	SummaVozvratClosingBalance  *Float  `xml:"СуммаВозвратClosingBalance" json:"СуммаВозвратClosingBalance,omitempty"`
	RecorderType                *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type InformationRegisterTsenyNomenklaturyRowType struct {
	Recorder                       *String  `xml:"Recorder" json:"Recorder,omitempty"`
	Period                         Time     `xml:"Period" json:"Period,omitempty"`
	LineNumber                     *Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                         *Boolean `xml:"Active" json:"Active,omitempty"`
	TipTsenKey                     Guid     `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
	SegmentNomenklaturyKey         Guid     `xml:"СегментНоменклатуры_Key" json:"СегментНоменклатуры_Key,omitempty"`
	ItemKey                        Guid     `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    Guid     `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey Guid     `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        Guid     `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	Cost                           *Float   `xml:"Цена" json:"Цена,omitempty"`
	ProtsentSkidkiNatsenki         *Float   `xml:"ПроцентСкидкиНаценки" json:"ПроцентСкидкиНаценки,omitempty"`
	ValiutaKey                     *Guid    `xml:"Валюта_Key" json:"Валюта_Key,omitempty"`
	EdinitsaIzmereniiaKey          *Guid    `xml:"ЕдиницаИзмерения_Key" json:"ЕдиницаИзмерения_Key,omitempty"`
	RecorderType                   *String  `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRowType struct {
	Recorder                      String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                        *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber                    Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                        *Boolean `xml:"Active" json:"Active,omitempty"`
	OrganizatsiiaKey              *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DepartmentKey                 *Guid    `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	ProdazhnaiaStoimost           *Float   `xml:"ПродажнаяСтоимость" json:"ПродажнаяСтоимость,omitempty"`
	VsegoSkidki                   *Float   `xml:"ВсегоСкидки" json:"ВсегоСкидки,omitempty"`
	SkidkiPoDiskontnymKartam      *Float   `xml:"СкидкиПоДисконтнымКартам" json:"СкидкиПоДисконтнымКартам,omitempty"`
	SummaOplatyKartami            *Float   `xml:"СуммаОплатыКартами" json:"СуммаОплатыКартами,omitempty"`
	SummaOplatyBankovskimKreditom *Float   `xml:"СуммаОплатыБанковскимКредитом" json:"СуммаОплатыБанковскимКредитом,omitempty"`
	SummaVozvrata                 *Float   `xml:"СуммаВозврата" json:"СуммаВозврата,omitempty"`
	VesVChekakh                   *Float   `xml:"ВесВЧеках" json:"ВесВЧеках,omitempty"`
	KolichestvoChekov             *Int     `xml:"КоличествоЧеков" json:"КоличествоЧеков,omitempty"`
	SummaProdazhiSertifikatov     *Float   `xml:"СуммаПродажиСертификатов" json:"СуммаПродажиСертификатов,omitempty"`
	SummaOplatySertifikatami      *Float   `xml:"СуммаОплатыСертификатами" json:"СуммаОплатыСертификатами,omitempty"`
	PogashenoSertifikatami        *Float   `xml:"ПогашеноСертификатами" json:"ПогашеноСертификатами,omitempty"`
	SummaOplatyBonusom            *Float   `xml:"СуммаОплатыБонусом" json:"СуммаОплатыБонусом,omitempty"`
	VesObmena                     *Float   `xml:"ВесОбмена" json:"ВесОбмена,omitempty"`
	SummaObmena                   *Float   `xml:"СуммаОбмена" json:"СуммаОбмена,omitempty"`
	VesSkuplennogoTovara          *Float   `xml:"ВесСкупленногоТовара" json:"ВесСкупленногоТовара,omitempty"`
	VydanoZaSkuplennyiTovar       *Float   `xml:"ВыданоЗаСкупленныйТовар" json:"ВыданоЗаСкупленныйТовар,omitempty"`
	KolichestvoIzdelii            *Int     `xml:"КоличествоИзделий" json:"КоличествоИзделий,omitempty"`
	SumManualDiscount             *Float   `xml:"СуммаРучнойСкидки" json:"СуммаРучнойСкидки,omitempty"`
	SumAutoDiscount               *Float   `xml:"СуммаАвтоматическойСкидки" json:"СуммаАвтоматическойСкидки,omitempty"`
	SummaRassrochki               *Float   `xml:"СуммаРассрочки" json:"СуммаРассрочки,omitempty"`
	SummaPogasheniiaRassrochki    *Float   `xml:"СуммаПогашенияРассрочки" json:"СуммаПогашенияРассрочки,omitempty"`
	SummaOplatyNalichnymi         *Float   `xml:"СуммаОплатыНаличными" json:"СуммаОплатыНаличными,omitempty"`
	RecorderType                  String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseTurnover struct {
	OrganizatsiiaKey                      *Guid   `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DepartmentKey                         *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	Period                                *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod                          *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod                          *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                            *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                             *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                            *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod                         *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                           *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod                         *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod                        *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                            *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                              *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                            *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	ProdazhnaiaStoimostTurnover           *Float  `xml:"ПродажнаяСтоимостьTurnover" json:"ПродажнаяСтоимостьTurnover,omitempty"`
	VsegoSkidkiTurnover                   *Float  `xml:"ВсегоСкидкиTurnover" json:"ВсегоСкидкиTurnover,omitempty"`
	SkidkiPoDiskontnymKartamTurnover      *Float  `xml:"СкидкиПоДисконтнымКартамTurnover" json:"СкидкиПоДисконтнымКартамTurnover,omitempty"`
	SummaOplatyKartamiTurnover            *Float  `xml:"СуммаОплатыКартамиTurnover" json:"СуммаОплатыКартамиTurnover,omitempty"`
	SummaOplatyBankovskimKreditomTurnover *Float  `xml:"СуммаОплатыБанковскимКредитомTurnover" json:"СуммаОплатыБанковскимКредитомTurnover,omitempty"`
	SummaVozvrataTurnover                 *Float  `xml:"СуммаВозвратаTurnover" json:"СуммаВозвратаTurnover,omitempty"`
	VesVChekakhTurnover                   *Float  `xml:"ВесВЧекахTurnover" json:"ВесВЧекахTurnover,omitempty"`
	KolichestvoChekovTurnover             *Int    `xml:"КоличествоЧековTurnover" json:"КоличествоЧековTurnover,omitempty"`
	SummaProdazhiSertifikatovTurnover     *Float  `xml:"СуммаПродажиСертификатовTurnover" json:"СуммаПродажиСертификатовTurnover,omitempty"`
	SummaOplatySertifikatamiTurnover      *Float  `xml:"СуммаОплатыСертификатамиTurnover" json:"СуммаОплатыСертификатамиTurnover,omitempty"`
	PogashenoSertifikatamiTurnover        *Float  `xml:"ПогашеноСертификатамиTurnover" json:"ПогашеноСертификатамиTurnover,omitempty"`
	SummaOplatyBonusomTurnover            *Float  `xml:"СуммаОплатыБонусомTurnover" json:"СуммаОплатыБонусомTurnover,omitempty"`
	VesObmenaTurnover                     *Float  `xml:"ВесОбменаTurnover" json:"ВесОбменаTurnover,omitempty"`
	SummaObmenaTurnover                   *Float  `xml:"СуммаОбменаTurnover" json:"СуммаОбменаTurnover,omitempty"`
	VesSkuplennogoTovaraTurnover          *Float  `xml:"ВесСкупленногоТовараTurnover" json:"ВесСкупленногоТовараTurnover,omitempty"`
	VydanoZaSkuplennyiTovarTurnover       *Float  `xml:"ВыданоЗаСкупленныйТоварTurnover" json:"ВыданоЗаСкупленныйТоварTurnover,omitempty"`
	KolichestvoIzdeliiTurnover            *Int    `xml:"КоличествоИзделийTurnover" json:"КоличествоИзделийTurnover,omitempty"`
	SummaRuchnoiSkidkiTurnover            *Float  `xml:"СуммаРучнойСкидкиTurnover" json:"СуммаРучнойСкидкиTurnover,omitempty"`
	SummaAvtomaticheskoiSkidkiTurnover    *Float  `xml:"СуммаАвтоматическойСкидкиTurnover" json:"СуммаАвтоматическойСкидкиTurnover,omitempty"`
	SummaRassrochkiTurnover               *Float  `xml:"СуммаРассрочкиTurnover" json:"СуммаРассрочкиTurnover,omitempty"`
	SummaPogasheniiaRassrochkiTurnover    *Float  `xml:"СуммаПогашенияРассрочкиTurnover" json:"СуммаПогашенияРассрочкиTurnover,omitempty"`
	SummaOplatyNalichnymiTurnover         *Float  `xml:"СуммаОплатыНаличнымиTurnover" json:"СуммаОплатыНаличнымиTurnover,omitempty"`
	RecorderType                          *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterDenezhnyeSredstvaVRezerveRowType struct {
	Recorder                   String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                     *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber                 Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                     *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType                 *String  `xml:"RecordType" json:"RecordType,omitempty"`
	VidDenezhnykhSredstv       *String  `xml:"ВидДенежныхСредств" json:"ВидДенежныхСредств,omitempty"`
	BankovskiiSchetKassa       *String  `xml:"БанковскийСчетКасса" json:"БанковскийСчетКасса,omitempty"`
	DokumentRezervirovaniiaKey *Guid    `xml:"ДокументРезервирования_Key" json:"ДокументРезервирования_Key,omitempty"`
	Sum                        *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	RecorderType               String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	BankovskiiSchetKassaType   *String  `xml:"БанковскийСчетКасса_Type" json:"БанковскийСчетКасса_Type,omitempty"`
}

type AccumulationRegisterDenezhnyeSredstvaVRezerveBalance struct {
	VidDenezhnykhSredstv       *String `xml:"ВидДенежныхСредств" json:"ВидДенежныхСредств,omitempty"`
	BankovskiiSchetKassa       *String `xml:"БанковскийСчетКасса" json:"БанковскийСчетКасса,omitempty"`
	DokumentRezervirovaniiaKey *Guid   `xml:"ДокументРезервирования_Key" json:"ДокументРезервирования_Key,omitempty"`
	SummaBalance               *Float  `xml:"СуммаBalance" json:"СуммаBalance,omitempty"`
	BankovskiiSchetKassaType   *String `xml:"БанковскийСчетКасса_Type" json:"БанковскийСчетКасса_Type,omitempty"`
}

type AccumulationRegisterDenezhnyeSredstvaVRezerveTurnover struct {
	VidDenezhnykhSredstv       *String `xml:"ВидДенежныхСредств" json:"ВидДенежныхСредств,omitempty"`
	BankovskiiSchetKassa       *String `xml:"БанковскийСчетКасса" json:"БанковскийСчетКасса,omitempty"`
	DokumentRezervirovaniiaKey *Guid   `xml:"ДокументРезервирования_Key" json:"ДокументРезервирования_Key,omitempty"`
	Period                     *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod               *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod               *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                 *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                  *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                 *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod              *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod              *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod             *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                 *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                   *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                 *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SummaTurnover              *Float  `xml:"СуммаTurnover" json:"СуммаTurnover,omitempty"`
	SummaReceipt               *Float  `xml:"СуммаReceipt" json:"СуммаReceipt,omitempty"`
	SummaExpense               *Float  `xml:"СуммаExpense" json:"СуммаExpense,omitempty"`
	BankovskiiSchetKassaType   *String `xml:"БанковскийСчетКасса_Type" json:"БанковскийСчетКасса_Type,omitempty"`
	RecorderType               *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterDenezhnyeSredstvaVRezerveBalanceAndTurnover struct {
	VidDenezhnykhSredstv       *String `xml:"ВидДенежныхСредств" json:"ВидДенежныхСредств,omitempty"`
	BankovskiiSchetKassa       *String `xml:"БанковскийСчетКасса" json:"БанковскийСчетКасса,omitempty"`
	DokumentRezervirovaniiaKey *Guid   `xml:"ДокументРезервирования_Key" json:"ДокументРезервирования_Key,omitempty"`
	Period                     *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod               *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod               *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                 *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                  *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                 *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod              *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod              *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod             *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                 *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                   *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                 *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SummaOpeningBalance        *Float  `xml:"СуммаOpeningBalance" json:"СуммаOpeningBalance,omitempty"`
	SummaTurnover              *Float  `xml:"СуммаTurnover" json:"СуммаTurnover,omitempty"`
	SummaReceipt               *Float  `xml:"СуммаReceipt" json:"СуммаReceipt,omitempty"`
	SummaExpense               *Float  `xml:"СуммаExpense" json:"СуммаExpense,omitempty"`
	SummaClosingBalance        *Float  `xml:"СуммаClosingBalance" json:"СуммаClosingBalance,omitempty"`
	BankovskiiSchetKassaType   *String `xml:"БанковскийСчетКасса_Type" json:"БанковскийСчетКасса_Type,omitempty"`
	RecorderType               *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRowType struct {
	Recorder                       String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                         *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber                     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                         *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType                     *String  `xml:"RecordType" json:"RecordType,omitempty"`
	ItemKey                        *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid    `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid    `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	DepartmentKey                  *Guid    `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	RetailCost                     *Float   `xml:"ЦенаВРознице" json:"ЦенаВРознице,omitempty"`
	Quantity                       *Int     `xml:"Количество" json:"Количество,omitempty"`
	Weight                         *Float   `xml:"Вес" json:"Вес,omitempty"`
	RecorderType                   String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhBalance struct {
	ItemKey                        *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid  `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid  `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid  `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	DepartmentKey                  *Guid  `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	RetailCost                     *Float `xml:"ЦенаВРознице" json:"ЦенаВРознице,omitempty"`
	KolichestvoBalance             *Int   `xml:"КоличествоBalance" json:"КоличествоBalance,omitempty"`
	VesBalance                     *Float `xml:"ВесBalance" json:"ВесBalance,omitempty"`
}

type AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhTurnover struct {
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	DepartmentKey                  *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	RetailCost                     *Float  `xml:"ЦенаВРознице" json:"ЦенаВРознице,omitempty"`
	Period                         *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod                   *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod                   *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                     *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                      *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                     *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod                  *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                    *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod                  *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod                 *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                     *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                       *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                     *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	KolichestvoTurnover            *Int    `xml:"КоличествоTurnover" json:"КоличествоTurnover,omitempty"`
	KolichestvoReceipt             *Int    `xml:"КоличествоReceipt" json:"КоличествоReceipt,omitempty"`
	KolichestvoExpense             *Int    `xml:"КоличествоExpense" json:"КоличествоExpense,omitempty"`
	VesTurnover                    *Float  `xml:"ВесTurnover" json:"ВесTurnover,omitempty"`
	VesReceipt                     *Float  `xml:"ВесReceipt" json:"ВесReceipt,omitempty"`
	VesExpense                     *Float  `xml:"ВесExpense" json:"ВесExpense,omitempty"`
	RecorderType                   *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhBalanceAndTurnover struct {
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	DepartmentKey                  *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	RetailCost                     *Float  `xml:"ЦенаВРознице" json:"ЦенаВРознице,omitempty"`
	Period                         *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod                   *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod                   *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                     *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                      *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                     *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod                  *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                    *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod                  *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod                 *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                     *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                       *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                     *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	KolichestvoOpeningBalance      *Int    `xml:"КоличествоOpeningBalance" json:"КоличествоOpeningBalance,omitempty"`
	KolichestvoTurnover            *Int    `xml:"КоличествоTurnover" json:"КоличествоTurnover,omitempty"`
	KolichestvoReceipt             *Int    `xml:"КоличествоReceipt" json:"КоличествоReceipt,omitempty"`
	KolichestvoExpense             *Int    `xml:"КоличествоExpense" json:"КоличествоExpense,omitempty"`
	KolichestvoClosingBalance      *Int    `xml:"КоличествоClosingBalance" json:"КоличествоClosingBalance,omitempty"`
	VesOpeningBalance              *Float  `xml:"ВесOpeningBalance" json:"ВесOpeningBalance,omitempty"`
	VesTurnover                    *Float  `xml:"ВесTurnover" json:"ВесTurnover,omitempty"`
	VesReceipt                     *Float  `xml:"ВесReceipt" json:"ВесReceipt,omitempty"`
	VesExpense                     *Float  `xml:"ВесExpense" json:"ВесExpense,omitempty"`
	VesClosingBalance              *Float  `xml:"ВесClosingBalance" json:"ВесClosingBalance,omitempty"`
	RecorderType                   *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterDavalcheskiiMetallPoteriRowType struct {
	Recorder              String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber            Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                *Boolean `xml:"Active" json:"Active,omitempty"`
	OrganizatsiiaKey      *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DogovorKontragentaKey *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	MetallKey             *Guid    `xml:"Металл_Key" json:"Металл_Key,omitempty"`
	Weight                *Float   `xml:"Вес" json:"Вес,omitempty"`
	Protsent              *Float   `xml:"Процент" json:"Процент,omitempty"`
	RecorderType          String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterDavalcheskiiMetallPoteriTurnover struct {
	OrganizatsiiaKey      *Guid   `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DogovorKontragentaKey *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	MetallKey             *Guid   `xml:"Металл_Key" json:"Металл_Key,omitempty"`
	Period                *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod          *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod          *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod            *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod             *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod            *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod         *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod           *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod         *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod        *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod            *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder              *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber            *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	VesTurnover           *Float  `xml:"ВесTurnover" json:"ВесTurnover,omitempty"`
	RecorderType          *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type InformationRegisterTsenyPoPreiskurantuRowType struct {
	Recorder         *String  `xml:"Recorder" json:"Recorder,omitempty"`
	Period           Time     `xml:"Period" json:"Period,omitempty"`
	LineNumber       *Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active           *Boolean `xml:"Active" json:"Active,omitempty"`
	KamenKey         Guid     `xml:"Камень_Key" json:"Камень_Key,omitempty"`
	FormaOgrankiKey  Guid     `xml:"ФормаОгранки_Key" json:"ФормаОгранки_Key,omitempty"`
	TsvetKamniaKey   Guid     `xml:"ЦветКамня_Key" json:"ЦветКамня_Key,omitempty"`
	GruppaTsvetaKey  Guid     `xml:"ГруппаЦвета_Key" json:"ГруппаЦвета_Key,omitempty"`
	GruppaDefektaKey Guid     `xml:"ГруппаДефекта_Key" json:"ГруппаДефекта_Key,omitempty"`
	RassevKey        Guid     `xml:"Рассев_Key" json:"Рассев_Key,omitempty"`
	Razmer1Ot        Float    `xml:"Размер1От" json:"Размер1От,omitempty"`
	Razmer1Do        Float    `xml:"Размер1До" json:"Размер1До,omitempty"`
	Cost             *Float   `xml:"Цена" json:"Цена,omitempty"`
	TipTsenKey       *Guid    `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
	RecorderType     *String  `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterTovaryVOtboreRowType struct {
	Recorder                       String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                         *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber                     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                         *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType                     *String  `xml:"RecordType" json:"RecordType,omitempty"`
	ItemKey                        *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid    `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid    `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	ZakazKlienta                   *String  `xml:"ЗаказКлиента" json:"ЗаказКлиента,omitempty"`
	DepartmentKey                  *Guid    `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	KOtboru                        *Int     `xml:"КОтбору" json:"КОтбору,omitempty"`
	Otobrano                       *Int     `xml:"Отобрано" json:"Отобрано,omitempty"`
	OtobranoVes                    *Float   `xml:"ОтобраноВес" json:"ОтобраноВес,omitempty"`
	RecorderType                   String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	ZakazKlientaType               *String  `xml:"ЗаказКлиента_Type" json:"ЗаказКлиента_Type,omitempty"`
}

type AccumulationRegisterTovaryVOtboreBalance struct {
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	ZakazKlienta                   *String `xml:"ЗаказКлиента" json:"ЗаказКлиента,omitempty"`
	DepartmentKey                  *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	KOtboruBalance                 *Int    `xml:"КОтборуBalance" json:"КОтборуBalance,omitempty"`
	OtobranoBalance                *Int    `xml:"ОтобраноBalance" json:"ОтобраноBalance,omitempty"`
	OtobranoVesBalance             *Float  `xml:"ОтобраноВесBalance" json:"ОтобраноВесBalance,omitempty"`
	ZakazKlientaType               *String `xml:"ЗаказКлиента_Type" json:"ЗаказКлиента_Type,omitempty"`
}

type AccumulationRegisterTovaryVOtboreTurnover struct {
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	ZakazKlienta                   *String `xml:"ЗаказКлиента" json:"ЗаказКлиента,omitempty"`
	DepartmentKey                  *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	Period                         *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod                   *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod                   *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                     *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                      *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                     *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod                  *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                    *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod                  *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod                 *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                     *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                       *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                     *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	KOtboruTurnover                *Int    `xml:"КОтборуTurnover" json:"КОтборуTurnover,omitempty"`
	KOtboruReceipt                 *Int    `xml:"КОтборуReceipt" json:"КОтборуReceipt,omitempty"`
	KOtboruExpense                 *Int    `xml:"КОтборуExpense" json:"КОтборуExpense,omitempty"`
	OtobranoTurnover               *Int    `xml:"ОтобраноTurnover" json:"ОтобраноTurnover,omitempty"`
	OtobranoReceipt                *Int    `xml:"ОтобраноReceipt" json:"ОтобраноReceipt,omitempty"`
	OtobranoExpense                *Int    `xml:"ОтобраноExpense" json:"ОтобраноExpense,omitempty"`
	OtobranoVesTurnover            *Float  `xml:"ОтобраноВесTurnover" json:"ОтобраноВесTurnover,omitempty"`
	OtobranoVesReceipt             *Float  `xml:"ОтобраноВесReceipt" json:"ОтобраноВесReceipt,omitempty"`
	OtobranoVesExpense             *Float  `xml:"ОтобраноВесExpense" json:"ОтобраноВесExpense,omitempty"`
	ZakazKlientaType               *String `xml:"ЗаказКлиента_Type" json:"ЗаказКлиента_Type,omitempty"`
	RecorderType                   *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterTovaryVOtboreBalanceAndTurnover struct {
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	ZakazKlienta                   *String `xml:"ЗаказКлиента" json:"ЗаказКлиента,omitempty"`
	DepartmentKey                  *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	Period                         *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod                   *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod                   *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                     *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                      *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                     *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod                  *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                    *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod                  *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod                 *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                     *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                       *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                     *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	KOtboruOpeningBalance          *Int    `xml:"КОтборуOpeningBalance" json:"КОтборуOpeningBalance,omitempty"`
	KOtboruTurnover                *Int    `xml:"КОтборуTurnover" json:"КОтборуTurnover,omitempty"`
	KOtboruReceipt                 *Int    `xml:"КОтборуReceipt" json:"КОтборуReceipt,omitempty"`
	KOtboruExpense                 *Int    `xml:"КОтборуExpense" json:"КОтборуExpense,omitempty"`
	KOtboruClosingBalance          *Int    `xml:"КОтборуClosingBalance" json:"КОтборуClosingBalance,omitempty"`
	OtobranoOpeningBalance         *Int    `xml:"ОтобраноOpeningBalance" json:"ОтобраноOpeningBalance,omitempty"`
	OtobranoTurnover               *Int    `xml:"ОтобраноTurnover" json:"ОтобраноTurnover,omitempty"`
	OtobranoReceipt                *Int    `xml:"ОтобраноReceipt" json:"ОтобраноReceipt,omitempty"`
	OtobranoExpense                *Int    `xml:"ОтобраноExpense" json:"ОтобраноExpense,omitempty"`
	OtobranoClosingBalance         *Int    `xml:"ОтобраноClosingBalance" json:"ОтобраноClosingBalance,omitempty"`
	OtobranoVesOpeningBalance      *Float  `xml:"ОтобраноВесOpeningBalance" json:"ОтобраноВесOpeningBalance,omitempty"`
	OtobranoVesTurnover            *Float  `xml:"ОтобраноВесTurnover" json:"ОтобраноВесTurnover,omitempty"`
	OtobranoVesReceipt             *Float  `xml:"ОтобраноВесReceipt" json:"ОтобраноВесReceipt,omitempty"`
	OtobranoVesExpense             *Float  `xml:"ОтобраноВесExpense" json:"ОтобраноВесExpense,omitempty"`
	OtobranoVesClosingBalance      *Float  `xml:"ОтобраноВесClosingBalance" json:"ОтобраноВесClosingBalance,omitempty"`
	ZakazKlientaType               *String `xml:"ЗаказКлиента_Type" json:"ЗаказКлиента_Type,omitempty"`
	RecorderType                   *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterRealizovannyeTovaryRowType struct {
	Recorder                       String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                         *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber                     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                         *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType                     *String  `xml:"RecordType" json:"RecordType,omitempty"`
	ItemKey                        *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid    `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid    `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	DogovorKontragentaKey          *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	Sdelka                         *String  `xml:"Сделка" json:"Сделка,omitempty"`
	DokumentPostavki               *String  `xml:"ДокументПоставки" json:"ДокументПоставки,omitempty"`
	Quantity                       *Int     `xml:"Количество" json:"Количество,omitempty"`
	Weight                         *Float   `xml:"Вес" json:"Вес,omitempty"`
	Vyruchka                       *Float   `xml:"Выручка" json:"Выручка,omitempty"`
	RecorderType                   String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	SdelkaType                     *String  `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
	DokumentPostavkiType           *String  `xml:"ДокументПоставки_Type" json:"ДокументПоставки_Type,omitempty"`
}

type AccumulationRegisterRealizovannyeTovaryBalance struct {
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	DogovorKontragentaKey          *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	Sdelka                         *String `xml:"Сделка" json:"Сделка,omitempty"`
	DokumentPostavki               *String `xml:"ДокументПоставки" json:"ДокументПоставки,omitempty"`
	KolichestvoBalance             *Int    `xml:"КоличествоBalance" json:"КоличествоBalance,omitempty"`
	VesBalance                     *Float  `xml:"ВесBalance" json:"ВесBalance,omitempty"`
	VyruchkaBalance                *Float  `xml:"ВыручкаBalance" json:"ВыручкаBalance,omitempty"`
	SdelkaType                     *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
	DokumentPostavkiType           *String `xml:"ДокументПоставки_Type" json:"ДокументПоставки_Type,omitempty"`
}

type AccumulationRegisterRealizovannyeTovaryTurnover struct {
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	DogovorKontragentaKey          *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	Sdelka                         *String `xml:"Сделка" json:"Сделка,omitempty"`
	DokumentPostavki               *String `xml:"ДокументПоставки" json:"ДокументПоставки,omitempty"`
	Period                         *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod                   *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod                   *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                     *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                      *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                     *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod                  *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                    *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod                  *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod                 *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                     *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                       *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                     *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	KolichestvoTurnover            *Int    `xml:"КоличествоTurnover" json:"КоличествоTurnover,omitempty"`
	KolichestvoReceipt             *Int    `xml:"КоличествоReceipt" json:"КоличествоReceipt,omitempty"`
	KolichestvoExpense             *Int    `xml:"КоличествоExpense" json:"КоличествоExpense,omitempty"`
	VesTurnover                    *Float  `xml:"ВесTurnover" json:"ВесTurnover,omitempty"`
	VesReceipt                     *Float  `xml:"ВесReceipt" json:"ВесReceipt,omitempty"`
	VesExpense                     *Float  `xml:"ВесExpense" json:"ВесExpense,omitempty"`
	VyruchkaTurnover               *Float  `xml:"ВыручкаTurnover" json:"ВыручкаTurnover,omitempty"`
	VyruchkaReceipt                *Float  `xml:"ВыручкаReceipt" json:"ВыручкаReceipt,omitempty"`
	VyruchkaExpense                *Float  `xml:"ВыручкаExpense" json:"ВыручкаExpense,omitempty"`
	SdelkaType                     *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
	DokumentPostavkiType           *String `xml:"ДокументПоставки_Type" json:"ДокументПоставки_Type,omitempty"`
	RecorderType                   *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterRealizovannyeTovaryBalanceAndTurnover struct {
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	DogovorKontragentaKey          *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	Sdelka                         *String `xml:"Сделка" json:"Сделка,omitempty"`
	DokumentPostavki               *String `xml:"ДокументПоставки" json:"ДокументПоставки,omitempty"`
	Period                         *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod                   *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod                   *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                     *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                      *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                     *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod                  *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                    *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod                  *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod                 *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                     *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                       *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                     *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	KolichestvoOpeningBalance      *Int    `xml:"КоличествоOpeningBalance" json:"КоличествоOpeningBalance,omitempty"`
	KolichestvoTurnover            *Int    `xml:"КоличествоTurnover" json:"КоличествоTurnover,omitempty"`
	KolichestvoReceipt             *Int    `xml:"КоличествоReceipt" json:"КоличествоReceipt,omitempty"`
	KolichestvoExpense             *Int    `xml:"КоличествоExpense" json:"КоличествоExpense,omitempty"`
	KolichestvoClosingBalance      *Int    `xml:"КоличествоClosingBalance" json:"КоличествоClosingBalance,omitempty"`
	VesOpeningBalance              *Float  `xml:"ВесOpeningBalance" json:"ВесOpeningBalance,omitempty"`
	VesTurnover                    *Float  `xml:"ВесTurnover" json:"ВесTurnover,omitempty"`
	VesReceipt                     *Float  `xml:"ВесReceipt" json:"ВесReceipt,omitempty"`
	VesExpense                     *Float  `xml:"ВесExpense" json:"ВесExpense,omitempty"`
	VesClosingBalance              *Float  `xml:"ВесClosingBalance" json:"ВесClosingBalance,omitempty"`
	VyruchkaOpeningBalance         *Float  `xml:"ВыручкаOpeningBalance" json:"ВыручкаOpeningBalance,omitempty"`
	VyruchkaTurnover               *Float  `xml:"ВыручкаTurnover" json:"ВыручкаTurnover,omitempty"`
	VyruchkaReceipt                *Float  `xml:"ВыручкаReceipt" json:"ВыручкаReceipt,omitempty"`
	VyruchkaExpense                *Float  `xml:"ВыручкаExpense" json:"ВыручкаExpense,omitempty"`
	VyruchkaClosingBalance         *Float  `xml:"ВыручкаClosingBalance" json:"ВыручкаClosingBalance,omitempty"`
	SdelkaType                     *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
	DokumentPostavkiType           *String `xml:"ДокументПоставки_Type" json:"ДокументПоставки_Type,omitempty"`
	RecorderType                   *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterDenezhnyeSredstvaKomissioneraRowType struct {
	Recorder              String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber            Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType            *String  `xml:"RecordType" json:"RecordType,omitempty"`
	DogovorKontragentaKey *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	Sdelka                *String  `xml:"Сделка" json:"Сделка,omitempty"`
	SummaVzaimoraschetov  *Float   `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	SummaUpr              *Float   `xml:"СуммаУпр" json:"СуммаУпр,omitempty"`
	RecorderType          String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	SdelkaType            *String  `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type AccumulationRegisterDenezhnyeSredstvaKomissioneraBalance struct {
	DogovorKontragentaKey       *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	Sdelka                      *String `xml:"Сделка" json:"Сделка,omitempty"`
	SummaVzaimoraschetovBalance *Float  `xml:"СуммаВзаиморасчетовBalance" json:"СуммаВзаиморасчетовBalance,omitempty"`
	SummaUprBalance             *Float  `xml:"СуммаУпрBalance" json:"СуммаУпрBalance,omitempty"`
	SdelkaType                  *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type AccumulationRegisterDenezhnyeSredstvaKomissioneraTurnover struct {
	DogovorKontragentaKey        *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	Sdelka                       *String `xml:"Сделка" json:"Сделка,omitempty"`
	Period                       *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod                 *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod                 *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                   *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                    *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                   *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod                *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                  *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod                *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod               *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                   *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                     *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                   *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SummaVzaimoraschetovTurnover *Float  `xml:"СуммаВзаиморасчетовTurnover" json:"СуммаВзаиморасчетовTurnover,omitempty"`
	SummaVzaimoraschetovReceipt  *Float  `xml:"СуммаВзаиморасчетовReceipt" json:"СуммаВзаиморасчетовReceipt,omitempty"`
	SummaVzaimoraschetovExpense  *Float  `xml:"СуммаВзаиморасчетовExpense" json:"СуммаВзаиморасчетовExpense,omitempty"`
	SummaUprTurnover             *Float  `xml:"СуммаУпрTurnover" json:"СуммаУпрTurnover,omitempty"`
	SummaUprReceipt              *Float  `xml:"СуммаУпрReceipt" json:"СуммаУпрReceipt,omitempty"`
	SummaUprExpense              *Float  `xml:"СуммаУпрExpense" json:"СуммаУпрExpense,omitempty"`
	SdelkaType                   *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
	RecorderType                 *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterDenezhnyeSredstvaKomissioneraBalanceAndTurnover struct {
	DogovorKontragentaKey              *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	Sdelka                             *String `xml:"Сделка" json:"Сделка,omitempty"`
	Period                             *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod                       *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod                       *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                         *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                          *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                         *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod                      *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                        *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod                      *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod                     *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                         *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                           *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                         *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SummaVzaimoraschetovOpeningBalance *Float  `xml:"СуммаВзаиморасчетовOpeningBalance" json:"СуммаВзаиморасчетовOpeningBalance,omitempty"`
	SummaVzaimoraschetovTurnover       *Float  `xml:"СуммаВзаиморасчетовTurnover" json:"СуммаВзаиморасчетовTurnover,omitempty"`
	SummaVzaimoraschetovReceipt        *Float  `xml:"СуммаВзаиморасчетовReceipt" json:"СуммаВзаиморасчетовReceipt,omitempty"`
	SummaVzaimoraschetovExpense        *Float  `xml:"СуммаВзаиморасчетовExpense" json:"СуммаВзаиморасчетовExpense,omitempty"`
	SummaVzaimoraschetovClosingBalance *Float  `xml:"СуммаВзаиморасчетовClosingBalance" json:"СуммаВзаиморасчетовClosingBalance,omitempty"`
	SummaUprOpeningBalance             *Float  `xml:"СуммаУпрOpeningBalance" json:"СуммаУпрOpeningBalance,omitempty"`
	SummaUprTurnover                   *Float  `xml:"СуммаУпрTurnover" json:"СуммаУпрTurnover,omitempty"`
	SummaUprReceipt                    *Float  `xml:"СуммаУпрReceipt" json:"СуммаУпрReceipt,omitempty"`
	SummaUprExpense                    *Float  `xml:"СуммаУпрExpense" json:"СуммаУпрExpense,omitempty"`
	SummaUprClosingBalance             *Float  `xml:"СуммаУпрClosingBalance" json:"СуммаУпрClosingBalance,omitempty"`
	SdelkaType                         *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
	RecorderType                       *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterProdazhi1RowType struct {
	Recorder                       String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                         *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber                     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                         *Boolean `xml:"Active" json:"Active,omitempty"`
	ItemKey                        *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid    `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid    `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	OrganizatsiiaKey               *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DepartmentKey                  *Guid    `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	DogovorKontragentaKey          *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentProdazhi               *String  `xml:"ДокументПродажи" json:"ДокументПродажи,omitempty"`
	DokumentOprikhodovaniia        *String  `xml:"ДокументОприходования" json:"ДокументОприходования,omitempty"`
	ZakazKlienta                   *String  `xml:"ЗаказКлиента" json:"ЗаказКлиента,omitempty"`
	ProektKey                      *Guid    `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	PodrazdelenieKey               *Guid    `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	MetallKey                      *Guid    `xml:"Металл_Key" json:"Металл_Key,omitempty"`
	TovarnaiaGruppaKey             *Guid    `xml:"ТоварнаяГруппа_Key" json:"ТоварнаяГруппа_Key,omitempty"`
	TovarnaiaKategoriiaKey         *Guid    `xml:"ТоварнаяКатегория_Key" json:"ТоварнаяКатегория_Key,omitempty"`
	TovarnaiaPozitsiiaKey          *Guid    `xml:"ТоварнаяПозиция_Key" json:"ТоварнаяПозиция_Key,omitempty"`
	OrderKey                       *Guid    `xml:"КлючПродажи_Key" json:"КлючПродажи_Key,omitempty"`
	Quantity                       *Int     `xml:"Количество" json:"Количество,omitempty"`
	Weight                         *Float   `xml:"Вес" json:"Вес,omitempty"`
	Cost                           *Float   `xml:"Стоимость" json:"Стоимость,omitempty"`
	StoimostBezSkidok              *Float   `xml:"СтоимостьБезСкидок" json:"СтоимостьБезСкидок,omitempty"`
	StoimostPostuplenie            *Float   `xml:"СтоимостьПоступление" json:"СтоимостьПоступление,omitempty"`
	StoimostUpr                    *Float   `xml:"СтоимостьУпр" json:"СтоимостьУпр,omitempty"`
	StoimostBezNDS                 *Float   `xml:"СтоимостьБезНДС" json:"СтоимостьБезНДС,omitempty"`
	KolichestvoVozvrat             *Int     `xml:"КоличествоВозврат" json:"КоличествоВозврат,omitempty"`
	VesVozvrat                     *Float   `xml:"ВесВозврат" json:"ВесВозврат,omitempty"`
	StoimostVozvrat                *Float   `xml:"СтоимостьВозврат" json:"СтоимостьВозврат,omitempty"`
	StoimostBezSkidokVozvrat       *Float   `xml:"СтоимостьБезСкидокВозврат" json:"СтоимостьБезСкидокВозврат,omitempty"`
	StoimostPostuplenieVozvrat     *Float   `xml:"СтоимостьПоступлениеВозврат" json:"СтоимостьПоступлениеВозврат,omitempty"`
	StoimostUprVozvrat             *Float   `xml:"СтоимостьУпрВозврат" json:"СтоимостьУпрВозврат,omitempty"`
	StoimostBezNDSVozvrat          *Float   `xml:"СтоимостьБезНДСВозврат" json:"СтоимостьБезНДСВозврат,omitempty"`
	SpisaniePartii                 *Boolean `xml:"СписаниеПартий" json:"СписаниеПартий,omitempty"`
	RecorderType                   String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	DokumentProdazhiType           *String  `xml:"ДокументПродажи_Type" json:"ДокументПродажи_Type,omitempty"`
	DokumentOprikhodovaniiaType    *String  `xml:"ДокументОприходования_Type" json:"ДокументОприходования_Type,omitempty"`
	ZakazKlientaType               *String  `xml:"ЗаказКлиента_Type" json:"ЗаказКлиента_Type,omitempty"`
}

type AccumulationRegisterProdazhi1Turnover struct {
	ItemKey                            *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                        *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey     *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                            *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	OrganizatsiiaKey                   *Guid   `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DepartmentKey                      *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	DogovorKontragentaKey              *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentProdazhi                   *String `xml:"ДокументПродажи" json:"ДокументПродажи,omitempty"`
	DokumentOprikhodovaniia            *String `xml:"ДокументОприходования" json:"ДокументОприходования,omitempty"`
	ZakazKlienta                       *String `xml:"ЗаказКлиента" json:"ЗаказКлиента,omitempty"`
	ProektKey                          *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	PodrazdelenieKey                   *Guid   `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	MetallKey                          *Guid   `xml:"Металл_Key" json:"Металл_Key,omitempty"`
	TovarnaiaGruppaKey                 *Guid   `xml:"ТоварнаяГруппа_Key" json:"ТоварнаяГруппа_Key,omitempty"`
	TovarnaiaKategoriiaKey             *Guid   `xml:"ТоварнаяКатегория_Key" json:"ТоварнаяКатегория_Key,omitempty"`
	TovarnaiaPozitsiiaKey              *Guid   `xml:"ТоварнаяПозиция_Key" json:"ТоварнаяПозиция_Key,omitempty"`
	OrderKey                           *Guid   `xml:"КлючПродажи_Key" json:"КлючПродажи_Key,omitempty"`
	Period                             *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod                       *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod                       *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                         *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                          *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                         *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod                      *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                        *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod                      *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod                     *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                         *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                           *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                         *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	KolichestvoTurnover                *Int    `xml:"КоличествоTurnover" json:"КоличествоTurnover,omitempty"`
	VesTurnover                        *Float  `xml:"ВесTurnover" json:"ВесTurnover,omitempty"`
	StoimostTurnover                   *Float  `xml:"СтоимостьTurnover" json:"СтоимостьTurnover,omitempty"`
	StoimostBezSkidokTurnover          *Float  `xml:"СтоимостьБезСкидокTurnover" json:"СтоимостьБезСкидокTurnover,omitempty"`
	StoimostPostuplenieTurnover        *Float  `xml:"СтоимостьПоступлениеTurnover" json:"СтоимостьПоступлениеTurnover,omitempty"`
	StoimostUprTurnover                *Float  `xml:"СтоимостьУпрTurnover" json:"СтоимостьУпрTurnover,omitempty"`
	StoimostBezNDSTurnover             *Float  `xml:"СтоимостьБезНДСTurnover" json:"СтоимостьБезНДСTurnover,omitempty"`
	KolichestvoVozvratTurnover         *Int    `xml:"КоличествоВозвратTurnover" json:"КоличествоВозвратTurnover,omitempty"`
	VesVozvratTurnover                 *Float  `xml:"ВесВозвратTurnover" json:"ВесВозвратTurnover,omitempty"`
	StoimostVozvratTurnover            *Float  `xml:"СтоимостьВозвратTurnover" json:"СтоимостьВозвратTurnover,omitempty"`
	StoimostBezSkidokVozvratTurnover   *Float  `xml:"СтоимостьБезСкидокВозвратTurnover" json:"СтоимостьБезСкидокВозвратTurnover,omitempty"`
	StoimostPostuplenieVozvratTurnover *Float  `xml:"СтоимостьПоступлениеВозвратTurnover" json:"СтоимостьПоступлениеВозвратTurnover,omitempty"`
	StoimostUprVozvratTurnover         *Float  `xml:"СтоимостьУпрВозвратTurnover" json:"СтоимостьУпрВозвратTurnover,omitempty"`
	StoimostBezNDSVozvratTurnover      *Float  `xml:"СтоимостьБезНДСВозвратTurnover" json:"СтоимостьБезНДСВозвратTurnover,omitempty"`
	DokumentProdazhiType               *String `xml:"ДокументПродажи_Type" json:"ДокументПродажи_Type,omitempty"`
	DokumentOprikhodovaniiaType        *String `xml:"ДокументОприходования_Type" json:"ДокументОприходования_Type,omitempty"`
	ZakazKlientaType                   *String `xml:"ЗаказКлиента_Type" json:"ЗаказКлиента_Type,omitempty"`
	RecorderType                       *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterTovaryNaSkladakhAMRowType struct {
	Recorder               String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                 *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber             Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                 *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType             *String  `xml:"RecordType" json:"RecordType,omitempty"`
	DepartmentKey          *Guid    `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	MetallKey              *Guid    `xml:"Металл_Key" json:"Металл_Key,omitempty"`
	TovarnaiaGruppaKey     *Guid    `xml:"ТоварнаяГруппа_Key" json:"ТоварнаяГруппа_Key,omitempty"`
	TovarnaiaKategoriiaKey *Guid    `xml:"ТоварнаяКатегория_Key" json:"ТоварнаяКатегория_Key,omitempty"`
	TovarnaiaPozitsiiaKey  *Guid    `xml:"ТоварнаяПозиция_Key" json:"ТоварнаяПозиция_Key,omitempty"`
	ItemKey                *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	Quantity               *Int     `xml:"Количество" json:"Количество,omitempty"`
	Weight                 *Float   `xml:"Вес" json:"Вес,omitempty"`
	RoznichnaiaStoimost    *Float   `xml:"РозничнаяСтоимость" json:"РозничнаяСтоимость,omitempty"`
	RecorderType           String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterTovaryNaSkladakhAMBalance struct {
	DepartmentKey              *Guid  `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	MetallKey                  *Guid  `xml:"Металл_Key" json:"Металл_Key,omitempty"`
	TovarnaiaGruppaKey         *Guid  `xml:"ТоварнаяГруппа_Key" json:"ТоварнаяГруппа_Key,omitempty"`
	TovarnaiaKategoriiaKey     *Guid  `xml:"ТоварнаяКатегория_Key" json:"ТоварнаяКатегория_Key,omitempty"`
	TovarnaiaPozitsiiaKey      *Guid  `xml:"ТоварнаяПозиция_Key" json:"ТоварнаяПозиция_Key,omitempty"`
	ItemKey                    *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	KolichestvoBalance         *Int   `xml:"КоличествоBalance" json:"КоличествоBalance,omitempty"`
	VesBalance                 *Float `xml:"ВесBalance" json:"ВесBalance,omitempty"`
	RoznichnaiaStoimostBalance *Float `xml:"РозничнаяСтоимостьBalance" json:"РозничнаяСтоимостьBalance,omitempty"`
}

type AccumulationRegisterTovaryNaSkladakhAMTurnover struct {
	DepartmentKey               *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	MetallKey                   *Guid   `xml:"Металл_Key" json:"Металл_Key,omitempty"`
	TovarnaiaGruppaKey          *Guid   `xml:"ТоварнаяГруппа_Key" json:"ТоварнаяГруппа_Key,omitempty"`
	TovarnaiaKategoriiaKey      *Guid   `xml:"ТоварнаяКатегория_Key" json:"ТоварнаяКатегория_Key,omitempty"`
	TovarnaiaPozitsiiaKey       *Guid   `xml:"ТоварнаяПозиция_Key" json:"ТоварнаяПозиция_Key,omitempty"`
	ItemKey                     *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	Period                      *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod                *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod                *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                  *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                   *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                  *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod               *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                 *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod               *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod              *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                  *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                    *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                  *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	KolichestvoTurnover         *Int    `xml:"КоличествоTurnover" json:"КоличествоTurnover,omitempty"`
	KolichestvoReceipt          *Int    `xml:"КоличествоReceipt" json:"КоличествоReceipt,omitempty"`
	KolichestvoExpense          *Int    `xml:"КоличествоExpense" json:"КоличествоExpense,omitempty"`
	VesTurnover                 *Float  `xml:"ВесTurnover" json:"ВесTurnover,omitempty"`
	VesReceipt                  *Float  `xml:"ВесReceipt" json:"ВесReceipt,omitempty"`
	VesExpense                  *Float  `xml:"ВесExpense" json:"ВесExpense,omitempty"`
	RoznichnaiaStoimostTurnover *Float  `xml:"РозничнаяСтоимостьTurnover" json:"РозничнаяСтоимостьTurnover,omitempty"`
	RoznichnaiaStoimostReceipt  *Float  `xml:"РозничнаяСтоимостьReceipt" json:"РозничнаяСтоимостьReceipt,omitempty"`
	RoznichnaiaStoimostExpense  *Float  `xml:"РозничнаяСтоимостьExpense" json:"РозничнаяСтоимостьExpense,omitempty"`
	RecorderType                *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterTovaryNaSkladakhAMBalanceAndTurnover struct {
	DepartmentKey                     *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	MetallKey                         *Guid   `xml:"Металл_Key" json:"Металл_Key,omitempty"`
	TovarnaiaGruppaKey                *Guid   `xml:"ТоварнаяГруппа_Key" json:"ТоварнаяГруппа_Key,omitempty"`
	TovarnaiaKategoriiaKey            *Guid   `xml:"ТоварнаяКатегория_Key" json:"ТоварнаяКатегория_Key,omitempty"`
	TovarnaiaPozitsiiaKey             *Guid   `xml:"ТоварнаяПозиция_Key" json:"ТоварнаяПозиция_Key,omitempty"`
	ItemKey                           *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	Period                            *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod                      *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod                      *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                        *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                         *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                        *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod                     *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                       *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod                     *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod                    *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                        *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                          *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                        *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	KolichestvoOpeningBalance         *Int    `xml:"КоличествоOpeningBalance" json:"КоличествоOpeningBalance,omitempty"`
	KolichestvoTurnover               *Int    `xml:"КоличествоTurnover" json:"КоличествоTurnover,omitempty"`
	KolichestvoReceipt                *Int    `xml:"КоличествоReceipt" json:"КоличествоReceipt,omitempty"`
	KolichestvoExpense                *Int    `xml:"КоличествоExpense" json:"КоличествоExpense,omitempty"`
	KolichestvoClosingBalance         *Int    `xml:"КоличествоClosingBalance" json:"КоличествоClosingBalance,omitempty"`
	VesOpeningBalance                 *Float  `xml:"ВесOpeningBalance" json:"ВесOpeningBalance,omitempty"`
	VesTurnover                       *Float  `xml:"ВесTurnover" json:"ВесTurnover,omitempty"`
	VesReceipt                        *Float  `xml:"ВесReceipt" json:"ВесReceipt,omitempty"`
	VesExpense                        *Float  `xml:"ВесExpense" json:"ВесExpense,omitempty"`
	VesClosingBalance                 *Float  `xml:"ВесClosingBalance" json:"ВесClosingBalance,omitempty"`
	RoznichnaiaStoimostOpeningBalance *Float  `xml:"РозничнаяСтоимостьOpeningBalance" json:"РозничнаяСтоимостьOpeningBalance,omitempty"`
	RoznichnaiaStoimostTurnover       *Float  `xml:"РозничнаяСтоимостьTurnover" json:"РозничнаяСтоимостьTurnover,omitempty"`
	RoznichnaiaStoimostReceipt        *Float  `xml:"РозничнаяСтоимостьReceipt" json:"РозничнаяСтоимостьReceipt,omitempty"`
	RoznichnaiaStoimostExpense        *Float  `xml:"РозничнаяСтоимостьExpense" json:"РозничнаяСтоимостьExpense,omitempty"`
	RoznichnaiaStoimostClosingBalance *Float  `xml:"РозничнаяСтоимостьClosingBalance" json:"РозничнаяСтоимостьClosingBalance,omitempty"`
	RecorderType                      *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterSummyPoFinmonitoringuRowType struct {
	Recorder              String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber            Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType            *String  `xml:"RecordType" json:"RecordType,omitempty"`
	OrganizatsiiaKey      *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DogovorKontragentaKey *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentUcheta        *String  `xml:"ДокументУчета" json:"ДокументУчета,omitempty"`
	SummaOtgruzki         *Float   `xml:"СуммаОтгрузки" json:"СуммаОтгрузки,omitempty"`
	SummaOplaty           *Float   `xml:"СуммаОплаты" json:"СуммаОплаты,omitempty"`
	SummaVozvrata         *Float   `xml:"СуммаВозврата" json:"СуммаВозврата,omitempty"`
	RecorderType          String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	DokumentUchetaType    *String  `xml:"ДокументУчета_Type" json:"ДокументУчета_Type,omitempty"`
}

type AccumulationRegisterSummyPoFinmonitoringuBalance struct {
	OrganizatsiiaKey      *Guid   `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DogovorKontragentaKey *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentUcheta        *String `xml:"ДокументУчета" json:"ДокументУчета,omitempty"`
	SummaOtgruzkiBalance  *Float  `xml:"СуммаОтгрузкиBalance" json:"СуммаОтгрузкиBalance,omitempty"`
	SummaOplatyBalance    *Float  `xml:"СуммаОплатыBalance" json:"СуммаОплатыBalance,omitempty"`
	SummaVozvrataBalance  *Float  `xml:"СуммаВозвратаBalance" json:"СуммаВозвратаBalance,omitempty"`
	DokumentUchetaType    *String `xml:"ДокументУчета_Type" json:"ДокументУчета_Type,omitempty"`
}

type AccumulationRegisterSummyPoFinmonitoringuTurnover struct {
	OrganizatsiiaKey      *Guid   `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DogovorKontragentaKey *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentUcheta        *String `xml:"ДокументУчета" json:"ДокументУчета,omitempty"`
	Period                *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod          *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod          *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod            *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod             *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod            *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod         *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod           *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod         *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod        *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod            *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder              *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber            *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SummaOtgruzkiTurnover *Float  `xml:"СуммаОтгрузкиTurnover" json:"СуммаОтгрузкиTurnover,omitempty"`
	SummaOtgruzkiReceipt  *Float  `xml:"СуммаОтгрузкиReceipt" json:"СуммаОтгрузкиReceipt,omitempty"`
	SummaOtgruzkiExpense  *Float  `xml:"СуммаОтгрузкиExpense" json:"СуммаОтгрузкиExpense,omitempty"`
	SummaOplatyTurnover   *Float  `xml:"СуммаОплатыTurnover" json:"СуммаОплатыTurnover,omitempty"`
	SummaOplatyReceipt    *Float  `xml:"СуммаОплатыReceipt" json:"СуммаОплатыReceipt,omitempty"`
	SummaOplatyExpense    *Float  `xml:"СуммаОплатыExpense" json:"СуммаОплатыExpense,omitempty"`
	SummaVozvrataTurnover *Float  `xml:"СуммаВозвратаTurnover" json:"СуммаВозвратаTurnover,omitempty"`
	SummaVozvrataReceipt  *Float  `xml:"СуммаВозвратаReceipt" json:"СуммаВозвратаReceipt,omitempty"`
	SummaVozvrataExpense  *Float  `xml:"СуммаВозвратаExpense" json:"СуммаВозвратаExpense,omitempty"`
	DokumentUchetaType    *String `xml:"ДокументУчета_Type" json:"ДокументУчета_Type,omitempty"`
	RecorderType          *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterSummyPoFinmonitoringuBalanceAndTurnover struct {
	OrganizatsiiaKey            *Guid   `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DogovorKontragentaKey       *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentUcheta              *String `xml:"ДокументУчета" json:"ДокументУчета,omitempty"`
	Period                      *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod                *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod                *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                  *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                   *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                  *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod               *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                 *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod               *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod              *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                  *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                    *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                  *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SummaOtgruzkiOpeningBalance *Float  `xml:"СуммаОтгрузкиOpeningBalance" json:"СуммаОтгрузкиOpeningBalance,omitempty"`
	SummaOtgruzkiTurnover       *Float  `xml:"СуммаОтгрузкиTurnover" json:"СуммаОтгрузкиTurnover,omitempty"`
	SummaOtgruzkiReceipt        *Float  `xml:"СуммаОтгрузкиReceipt" json:"СуммаОтгрузкиReceipt,omitempty"`
	SummaOtgruzkiExpense        *Float  `xml:"СуммаОтгрузкиExpense" json:"СуммаОтгрузкиExpense,omitempty"`
	SummaOtgruzkiClosingBalance *Float  `xml:"СуммаОтгрузкиClosingBalance" json:"СуммаОтгрузкиClosingBalance,omitempty"`
	SummaOplatyOpeningBalance   *Float  `xml:"СуммаОплатыOpeningBalance" json:"СуммаОплатыOpeningBalance,omitempty"`
	SummaOplatyTurnover         *Float  `xml:"СуммаОплатыTurnover" json:"СуммаОплатыTurnover,omitempty"`
	SummaOplatyReceipt          *Float  `xml:"СуммаОплатыReceipt" json:"СуммаОплатыReceipt,omitempty"`
	SummaOplatyExpense          *Float  `xml:"СуммаОплатыExpense" json:"СуммаОплатыExpense,omitempty"`
	SummaOplatyClosingBalance   *Float  `xml:"СуммаОплатыClosingBalance" json:"СуммаОплатыClosingBalance,omitempty"`
	SummaVozvrataOpeningBalance *Float  `xml:"СуммаВозвратаOpeningBalance" json:"СуммаВозвратаOpeningBalance,omitempty"`
	SummaVozvrataTurnover       *Float  `xml:"СуммаВозвратаTurnover" json:"СуммаВозвратаTurnover,omitempty"`
	SummaVozvrataReceipt        *Float  `xml:"СуммаВозвратаReceipt" json:"СуммаВозвратаReceipt,omitempty"`
	SummaVozvrataExpense        *Float  `xml:"СуммаВозвратаExpense" json:"СуммаВозвратаExpense,omitempty"`
	SummaVozvrataClosingBalance *Float  `xml:"СуммаВозвратаClosingBalance" json:"СуммаВозвратаClosingBalance,omitempty"`
	DokumentUchetaType          *String `xml:"ДокументУчета_Type" json:"ДокументУчета_Type,omitempty"`
	RecorderType                *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type InformationRegisterTsenyNomenklaturyKontragentovRowType struct {
	Recorder                       *String  `xml:"Recorder" json:"Recorder,omitempty"`
	Period                         Time     `xml:"Period" json:"Period,omitempty"`
	LineNumber                     *Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                         *Boolean `xml:"Active" json:"Active,omitempty"`
	TipTsenKey                     Guid     `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
	ItemKey                        Guid     `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    Guid     `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey Guid     `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        Guid     `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	Cost                           *Float   `xml:"Цена" json:"Цена,omitempty"`
	ValiutaKey                     *Guid    `xml:"Валюта_Key" json:"Валюта_Key,omitempty"`
	EdinitsaIzmereniiaKey          *Guid    `xml:"ЕдиницаИзмерения_Key" json:"ЕдиницаИзмерения_Key,omitempty"`
	RecorderType                   *String  `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterVzaimoraschetySKontragentamiRowType struct {
	Recorder              String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber            Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType            *String  `xml:"RecordType" json:"RecordType,omitempty"`
	DogovorKontragentaKey *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	Sdelka                *String  `xml:"Сделка" json:"Сделка,omitempty"`
	SummaVzaimoraschetov  *Float   `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	SummaUpr              *Float   `xml:"СуммаУпр" json:"СуммаУпр,omitempty"`
	RecorderType          String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	SdelkaType            *String  `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type AccumulationRegisterVzaimoraschetySKontragentamiBalance struct {
	DogovorKontragentaKey       *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	Sdelka                      *String `xml:"Сделка" json:"Сделка,omitempty"`
	SummaVzaimoraschetovBalance *Float  `xml:"СуммаВзаиморасчетовBalance" json:"СуммаВзаиморасчетовBalance,omitempty"`
	SummaUprBalance             *Float  `xml:"СуммаУпрBalance" json:"СуммаУпрBalance,omitempty"`
	SdelkaType                  *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type AccumulationRegisterVzaimoraschetySKontragentamiTurnover struct {
	DogovorKontragentaKey        *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	Sdelka                       *String `xml:"Сделка" json:"Сделка,omitempty"`
	Period                       *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod                 *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod                 *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                   *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                    *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                   *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod                *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                  *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod                *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod               *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                   *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                     *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                   *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SummaVzaimoraschetovTurnover *Float  `xml:"СуммаВзаиморасчетовTurnover" json:"СуммаВзаиморасчетовTurnover,omitempty"`
	SummaVzaimoraschetovReceipt  *Float  `xml:"СуммаВзаиморасчетовReceipt" json:"СуммаВзаиморасчетовReceipt,omitempty"`
	SummaVzaimoraschetovExpense  *Float  `xml:"СуммаВзаиморасчетовExpense" json:"СуммаВзаиморасчетовExpense,omitempty"`
	SummaUprTurnover             *Float  `xml:"СуммаУпрTurnover" json:"СуммаУпрTurnover,omitempty"`
	SummaUprReceipt              *Float  `xml:"СуммаУпрReceipt" json:"СуммаУпрReceipt,omitempty"`
	SummaUprExpense              *Float  `xml:"СуммаУпрExpense" json:"СуммаУпрExpense,omitempty"`
	SdelkaType                   *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
	RecorderType                 *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterVzaimoraschetySKontragentamiBalanceAndTurnover struct {
	DogovorKontragentaKey              *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	Sdelka                             *String `xml:"Сделка" json:"Сделка,omitempty"`
	Period                             *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod                       *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod                       *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                         *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                          *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                         *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod                      *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                        *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod                      *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod                     *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                         *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                           *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                         *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SummaVzaimoraschetovOpeningBalance *Float  `xml:"СуммаВзаиморасчетовOpeningBalance" json:"СуммаВзаиморасчетовOpeningBalance,omitempty"`
	SummaVzaimoraschetovTurnover       *Float  `xml:"СуммаВзаиморасчетовTurnover" json:"СуммаВзаиморасчетовTurnover,omitempty"`
	SummaVzaimoraschetovReceipt        *Float  `xml:"СуммаВзаиморасчетовReceipt" json:"СуммаВзаиморасчетовReceipt,omitempty"`
	SummaVzaimoraschetovExpense        *Float  `xml:"СуммаВзаиморасчетовExpense" json:"СуммаВзаиморасчетовExpense,omitempty"`
	SummaVzaimoraschetovClosingBalance *Float  `xml:"СуммаВзаиморасчетовClosingBalance" json:"СуммаВзаиморасчетовClosingBalance,omitempty"`
	SummaUprOpeningBalance             *Float  `xml:"СуммаУпрOpeningBalance" json:"СуммаУпрOpeningBalance,omitempty"`
	SummaUprTurnover                   *Float  `xml:"СуммаУпрTurnover" json:"СуммаУпрTurnover,omitempty"`
	SummaUprReceipt                    *Float  `xml:"СуммаУпрReceipt" json:"СуммаУпрReceipt,omitempty"`
	SummaUprExpense                    *Float  `xml:"СуммаУпрExpense" json:"СуммаУпрExpense,omitempty"`
	SummaUprClosingBalance             *Float  `xml:"СуммаУпрClosingBalance" json:"СуммаУпрClosingBalance,omitempty"`
	SdelkaType                         *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
	RecorderType                       *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterSummyPokupokPoDiskontnymKartamRowType struct {
	Recorder               String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                 *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber             Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                 *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType             *String  `xml:"RecordType" json:"RecordType,omitempty"`
	MemberCardKey          *Guid    `xml:"ДисконтнаяКарта_Key" json:"ДисконтнаяКарта_Key,omitempty"`
	DataSpisaniia          *Time    `xml:"ДатаСписания" json:"ДатаСписания,omitempty"`
	Sum                    *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	SummaBonusov           *Float   `xml:"СуммаБонусов" json:"СуммаБонусов,omitempty"`
	SummaVremennykhBonusov *Float   `xml:"СуммаВременныхБонусов" json:"СуммаВременныхБонусов,omitempty"`
	RecorderType           String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterSummyPokupokPoDiskontnymKartamBalance struct {
	MemberCardKey                 *Guid  `xml:"ДисконтнаяКарта_Key" json:"ДисконтнаяКарта_Key,omitempty"`
	DataSpisaniia                 *Time  `xml:"ДатаСписания" json:"ДатаСписания,omitempty"`
	SummaBalance                  *Float `xml:"СуммаBalance" json:"СуммаBalance,omitempty"`
	SummaBonusovBalance           *Float `xml:"СуммаБонусовBalance" json:"СуммаБонусовBalance,omitempty"`
	SummaVremennykhBonusovBalance *Float `xml:"СуммаВременныхБонусовBalance" json:"СуммаВременныхБонусовBalance,omitempty"`
}

type AccumulationRegisterSummyPokupokPoDiskontnymKartamTurnover struct {
	MemberCardKey                  *Guid   `xml:"ДисконтнаяКарта_Key" json:"ДисконтнаяКарта_Key,omitempty"`
	DataSpisaniia                  *Time   `xml:"ДатаСписания" json:"ДатаСписания,omitempty"`
	Period                         *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod                   *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod                   *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                     *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                      *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                     *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod                  *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                    *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod                  *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod                 *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                     *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                       *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                     *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SummaTurnover                  *Float  `xml:"СуммаTurnover" json:"СуммаTurnover,omitempty"`
	SummaReceipt                   *Float  `xml:"СуммаReceipt" json:"СуммаReceipt,omitempty"`
	SummaExpense                   *Float  `xml:"СуммаExpense" json:"СуммаExpense,omitempty"`
	SummaBonusovTurnover           *Float  `xml:"СуммаБонусовTurnover" json:"СуммаБонусовTurnover,omitempty"`
	SummaBonusovReceipt            *Float  `xml:"СуммаБонусовReceipt" json:"СуммаБонусовReceipt,omitempty"`
	SummaBonusovExpense            *Float  `xml:"СуммаБонусовExpense" json:"СуммаБонусовExpense,omitempty"`
	SummaVremennykhBonusovTurnover *Float  `xml:"СуммаВременныхБонусовTurnover" json:"СуммаВременныхБонусовTurnover,omitempty"`
	SummaVremennykhBonusovReceipt  *Float  `xml:"СуммаВременныхБонусовReceipt" json:"СуммаВременныхБонусовReceipt,omitempty"`
	SummaVremennykhBonusovExpense  *Float  `xml:"СуммаВременныхБонусовExpense" json:"СуммаВременныхБонусовExpense,omitempty"`
	RecorderType                   *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterSummyPokupokPoDiskontnymKartamBalanceAndTurnover struct {
	MemberCardKey                        *Guid   `xml:"ДисконтнаяКарта_Key" json:"ДисконтнаяКарта_Key,omitempty"`
	DataSpisaniia                        *Time   `xml:"ДатаСписания" json:"ДатаСписания,omitempty"`
	Period                               *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod                         *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod                         *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                           *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                            *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                           *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod                        *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                          *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod                        *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod                       *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                           *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                             *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                           *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SummaOpeningBalance                  *Float  `xml:"СуммаOpeningBalance" json:"СуммаOpeningBalance,omitempty"`
	SummaTurnover                        *Float  `xml:"СуммаTurnover" json:"СуммаTurnover,omitempty"`
	SummaReceipt                         *Float  `xml:"СуммаReceipt" json:"СуммаReceipt,omitempty"`
	SummaExpense                         *Float  `xml:"СуммаExpense" json:"СуммаExpense,omitempty"`
	SummaClosingBalance                  *Float  `xml:"СуммаClosingBalance" json:"СуммаClosingBalance,omitempty"`
	SummaBonusovOpeningBalance           *Float  `xml:"СуммаБонусовOpeningBalance" json:"СуммаБонусовOpeningBalance,omitempty"`
	SummaBonusovTurnover                 *Float  `xml:"СуммаБонусовTurnover" json:"СуммаБонусовTurnover,omitempty"`
	SummaBonusovReceipt                  *Float  `xml:"СуммаБонусовReceipt" json:"СуммаБонусовReceipt,omitempty"`
	SummaBonusovExpense                  *Float  `xml:"СуммаБонусовExpense" json:"СуммаБонусовExpense,omitempty"`
	SummaBonusovClosingBalance           *Float  `xml:"СуммаБонусовClosingBalance" json:"СуммаБонусовClosingBalance,omitempty"`
	SummaVremennykhBonusovOpeningBalance *Float  `xml:"СуммаВременныхБонусовOpeningBalance" json:"СуммаВременныхБонусовOpeningBalance,omitempty"`
	SummaVremennykhBonusovTurnover       *Float  `xml:"СуммаВременныхБонусовTurnover" json:"СуммаВременныхБонусовTurnover,omitempty"`
	SummaVremennykhBonusovReceipt        *Float  `xml:"СуммаВременныхБонусовReceipt" json:"СуммаВременныхБонусовReceipt,omitempty"`
	SummaVremennykhBonusovExpense        *Float  `xml:"СуммаВременныхБонусовExpense" json:"СуммаВременныхБонусовExpense,omitempty"`
	SummaVremennykhBonusovClosingBalance *Float  `xml:"СуммаВременныхБонусовClosingBalance" json:"СуммаВременныхБонусовClosingBalance,omitempty"`
	RecorderType                         *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterVypolneniePlanaProdazhRowType struct {
	Recorder      String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period        *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber    Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active        *Boolean `xml:"Active" json:"Active,omitempty"`
	DepartmentKey *Guid    `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	SummaPlan     *Float   `xml:"СуммаПлан" json:"СуммаПлан,omitempty"`
	SummaFakt     *Float   `xml:"СуммаФакт" json:"СуммаФакт,omitempty"`
	RecorderType  String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterVypolneniePlanaProdazhTurnover struct {
	DepartmentKey     *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	Period            *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod      *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod      *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod        *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod         *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod        *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod     *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod       *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod     *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod    *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod        *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder          *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber        *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SummaPlanTurnover *Float  `xml:"СуммаПланTurnover" json:"СуммаПланTurnover,omitempty"`
	SummaFaktTurnover *Float  `xml:"СуммаФактTurnover" json:"СуммаФактTurnover,omitempty"`
	RecorderType      *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterDavalcheskiiMetallRowType struct {
	Recorder              String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber            Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType            *String  `xml:"RecordType" json:"RecordType,omitempty"`
	OrganizatsiiaKey      *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DogovorKontragentaKey *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	MetallKey             *Guid    `xml:"Металл_Key" json:"Металл_Key,omitempty"`
	Weight                *Float   `xml:"Вес" json:"Вес,omitempty"`
	RecorderType          String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterDavalcheskiiMetallBalance struct {
	OrganizatsiiaKey      *Guid  `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DogovorKontragentaKey *Guid  `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	MetallKey             *Guid  `xml:"Металл_Key" json:"Металл_Key,omitempty"`
	VesBalance            *Float `xml:"ВесBalance" json:"ВесBalance,omitempty"`
}

type AccumulationRegisterDavalcheskiiMetallTurnover struct {
	OrganizatsiiaKey      *Guid   `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DogovorKontragentaKey *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	MetallKey             *Guid   `xml:"Металл_Key" json:"Металл_Key,omitempty"`
	Period                *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod          *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod          *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod            *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod             *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod            *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod         *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod           *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod         *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod        *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod            *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder              *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber            *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	VesTurnover           *Float  `xml:"ВесTurnover" json:"ВесTurnover,omitempty"`
	VesReceipt            *Float  `xml:"ВесReceipt" json:"ВесReceipt,omitempty"`
	VesExpense            *Float  `xml:"ВесExpense" json:"ВесExpense,omitempty"`
	RecorderType          *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterDavalcheskiiMetallBalanceAndTurnover struct {
	OrganizatsiiaKey      *Guid   `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DogovorKontragentaKey *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	MetallKey             *Guid   `xml:"Металл_Key" json:"Металл_Key,omitempty"`
	Period                *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod          *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod          *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod            *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod             *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod            *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod         *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod           *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod         *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod        *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod            *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder              *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber            *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	VesOpeningBalance     *Float  `xml:"ВесOpeningBalance" json:"ВесOpeningBalance,omitempty"`
	VesTurnover           *Float  `xml:"ВесTurnover" json:"ВесTurnover,omitempty"`
	VesReceipt            *Float  `xml:"ВесReceipt" json:"ВесReceipt,omitempty"`
	VesExpense            *Float  `xml:"ВесExpense" json:"ВесExpense,omitempty"`
	VesClosingBalance     *Float  `xml:"ВесClosingBalance" json:"ВесClosingBalance,omitempty"`
	RecorderType          *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterDenezhnyeSredstvaRowType struct {
	Recorder                 String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                   *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber               Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                   *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType               *String  `xml:"RecordType" json:"RecordType,omitempty"`
	OrganizatsiiaKey         *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	VidDenezhnykhSredstv     *String  `xml:"ВидДенежныхСредств" json:"ВидДенежныхСредств,omitempty"`
	BankovskiiSchetKassa     *String  `xml:"БанковскийСчетКасса" json:"БанковскийСчетКасса,omitempty"`
	Sum                      *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	SummaUpr                 *Float   `xml:"СуммаУпр" json:"СуммаУпр,omitempty"`
	RecorderType             String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	BankovskiiSchetKassaType *String  `xml:"БанковскийСчетКасса_Type" json:"БанковскийСчетКасса_Type,omitempty"`
}

type AccumulationRegisterDenezhnyeSredstvaBalance struct {
	OrganizatsiiaKey         *Guid   `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	VidDenezhnykhSredstv     *String `xml:"ВидДенежныхСредств" json:"ВидДенежныхСредств,omitempty"`
	BankovskiiSchetKassa     *String `xml:"БанковскийСчетКасса" json:"БанковскийСчетКасса,omitempty"`
	SummaBalance             *Float  `xml:"СуммаBalance" json:"СуммаBalance,omitempty"`
	SummaUprBalance          *Float  `xml:"СуммаУпрBalance" json:"СуммаУпрBalance,omitempty"`
	BankovskiiSchetKassaType *String `xml:"БанковскийСчетКасса_Type" json:"БанковскийСчетКасса_Type,omitempty"`
}

type AccumulationRegisterDenezhnyeSredstvaTurnover struct {
	OrganizatsiiaKey         *Guid   `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	VidDenezhnykhSredstv     *String `xml:"ВидДенежныхСредств" json:"ВидДенежныхСредств,omitempty"`
	BankovskiiSchetKassa     *String `xml:"БанковскийСчетКасса" json:"БанковскийСчетКасса,omitempty"`
	Period                   *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod             *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod             *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod               *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod               *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod            *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod              *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod            *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod           *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod               *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                 *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber               *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SummaTurnover            *Float  `xml:"СуммаTurnover" json:"СуммаTurnover,omitempty"`
	SummaReceipt             *Float  `xml:"СуммаReceipt" json:"СуммаReceipt,omitempty"`
	SummaExpense             *Float  `xml:"СуммаExpense" json:"СуммаExpense,omitempty"`
	SummaUprTurnover         *Float  `xml:"СуммаУпрTurnover" json:"СуммаУпрTurnover,omitempty"`
	SummaUprReceipt          *Float  `xml:"СуммаУпрReceipt" json:"СуммаУпрReceipt,omitempty"`
	SummaUprExpense          *Float  `xml:"СуммаУпрExpense" json:"СуммаУпрExpense,omitempty"`
	BankovskiiSchetKassaType *String `xml:"БанковскийСчетКасса_Type" json:"БанковскийСчетКасса_Type,omitempty"`
	RecorderType             *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterDenezhnyeSredstvaBalanceAndTurnover struct {
	OrganizatsiiaKey         *Guid   `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	VidDenezhnykhSredstv     *String `xml:"ВидДенежныхСредств" json:"ВидДенежныхСредств,omitempty"`
	BankovskiiSchetKassa     *String `xml:"БанковскийСчетКасса" json:"БанковскийСчетКасса,omitempty"`
	Period                   *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod             *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod             *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod               *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod               *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod            *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod              *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod            *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod           *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod               *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                 *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber               *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SummaOpeningBalance      *Float  `xml:"СуммаOpeningBalance" json:"СуммаOpeningBalance,omitempty"`
	SummaTurnover            *Float  `xml:"СуммаTurnover" json:"СуммаTurnover,omitempty"`
	SummaReceipt             *Float  `xml:"СуммаReceipt" json:"СуммаReceipt,omitempty"`
	SummaExpense             *Float  `xml:"СуммаExpense" json:"СуммаExpense,omitempty"`
	SummaClosingBalance      *Float  `xml:"СуммаClosingBalance" json:"СуммаClosingBalance,omitempty"`
	SummaUprOpeningBalance   *Float  `xml:"СуммаУпрOpeningBalance" json:"СуммаУпрOpeningBalance,omitempty"`
	SummaUprTurnover         *Float  `xml:"СуммаУпрTurnover" json:"СуммаУпрTurnover,omitempty"`
	SummaUprReceipt          *Float  `xml:"СуммаУпрReceipt" json:"СуммаУпрReceipt,omitempty"`
	SummaUprExpense          *Float  `xml:"СуммаУпрExpense" json:"СуммаУпрExpense,omitempty"`
	SummaUprClosingBalance   *Float  `xml:"СуммаУпрClosingBalance" json:"СуммаУпрClosingBalance,omitempty"`
	BankovskiiSchetKassaType *String `xml:"БанковскийСчетКасса_Type" json:"БанковскийСчетКасса_Type,omitempty"`
	RecorderType             *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterTovaryPeredannyeRowType struct {
	Recorder                       String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                         *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber                     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                         *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType                     *String  `xml:"RecordType" json:"RecordType,omitempty"`
	ItemKey                        *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid    `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid    `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	DogovorKontragentaKey          *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	Sdelka                         *String  `xml:"Сделка" json:"Сделка,omitempty"`
	Quantity                       *Int     `xml:"Количество" json:"Количество,omitempty"`
	Weight                         *Float   `xml:"Вес" json:"Вес,omitempty"`
	SummaVzaimoraschetov           *Float   `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	RecorderType                   String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	SdelkaType                     *String  `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type AccumulationRegisterTovaryPeredannyeBalance struct {
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	DogovorKontragentaKey          *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	Sdelka                         *String `xml:"Сделка" json:"Сделка,omitempty"`
	KolichestvoBalance             *Int    `xml:"КоличествоBalance" json:"КоличествоBalance,omitempty"`
	VesBalance                     *Float  `xml:"ВесBalance" json:"ВесBalance,omitempty"`
	SummaVzaimoraschetovBalance    *Float  `xml:"СуммаВзаиморасчетовBalance" json:"СуммаВзаиморасчетовBalance,omitempty"`
	SdelkaType                     *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type AccumulationRegisterTovaryPeredannyeTurnover struct {
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	DogovorKontragentaKey          *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	Sdelka                         *String `xml:"Сделка" json:"Сделка,omitempty"`
	Period                         *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod                   *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod                   *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                     *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                      *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                     *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod                  *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                    *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod                  *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod                 *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                     *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                       *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                     *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	KolichestvoTurnover            *Int    `xml:"КоличествоTurnover" json:"КоличествоTurnover,omitempty"`
	KolichestvoReceipt             *Int    `xml:"КоличествоReceipt" json:"КоличествоReceipt,omitempty"`
	KolichestvoExpense             *Int    `xml:"КоличествоExpense" json:"КоличествоExpense,omitempty"`
	VesTurnover                    *Float  `xml:"ВесTurnover" json:"ВесTurnover,omitempty"`
	VesReceipt                     *Float  `xml:"ВесReceipt" json:"ВесReceipt,omitempty"`
	VesExpense                     *Float  `xml:"ВесExpense" json:"ВесExpense,omitempty"`
	SummaVzaimoraschetovTurnover   *Float  `xml:"СуммаВзаиморасчетовTurnover" json:"СуммаВзаиморасчетовTurnover,omitempty"`
	SummaVzaimoraschetovReceipt    *Float  `xml:"СуммаВзаиморасчетовReceipt" json:"СуммаВзаиморасчетовReceipt,omitempty"`
	SummaVzaimoraschetovExpense    *Float  `xml:"СуммаВзаиморасчетовExpense" json:"СуммаВзаиморасчетовExpense,omitempty"`
	SdelkaType                     *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
	RecorderType                   *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterTovaryPeredannyeBalanceAndTurnover struct {
	ItemKey                            *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                        *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey     *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                            *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	DogovorKontragentaKey              *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	Sdelka                             *String `xml:"Сделка" json:"Сделка,omitempty"`
	Period                             *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod                       *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod                       *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod                         *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                          *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod                         *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod                      *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod                        *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod                      *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod                     *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod                         *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                           *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber                         *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	KolichestvoOpeningBalance          *Int    `xml:"КоличествоOpeningBalance" json:"КоличествоOpeningBalance,omitempty"`
	KolichestvoTurnover                *Int    `xml:"КоличествоTurnover" json:"КоличествоTurnover,omitempty"`
	KolichestvoReceipt                 *Int    `xml:"КоличествоReceipt" json:"КоличествоReceipt,omitempty"`
	KolichestvoExpense                 *Int    `xml:"КоличествоExpense" json:"КоличествоExpense,omitempty"`
	KolichestvoClosingBalance          *Int    `xml:"КоличествоClosingBalance" json:"КоличествоClosingBalance,omitempty"`
	VesOpeningBalance                  *Float  `xml:"ВесOpeningBalance" json:"ВесOpeningBalance,omitempty"`
	VesTurnover                        *Float  `xml:"ВесTurnover" json:"ВесTurnover,omitempty"`
	VesReceipt                         *Float  `xml:"ВесReceipt" json:"ВесReceipt,omitempty"`
	VesExpense                         *Float  `xml:"ВесExpense" json:"ВесExpense,omitempty"`
	VesClosingBalance                  *Float  `xml:"ВесClosingBalance" json:"ВесClosingBalance,omitempty"`
	SummaVzaimoraschetovOpeningBalance *Float  `xml:"СуммаВзаиморасчетовOpeningBalance" json:"СуммаВзаиморасчетовOpeningBalance,omitempty"`
	SummaVzaimoraschetovTurnover       *Float  `xml:"СуммаВзаиморасчетовTurnover" json:"СуммаВзаиморасчетовTurnover,omitempty"`
	SummaVzaimoraschetovReceipt        *Float  `xml:"СуммаВзаиморасчетовReceipt" json:"СуммаВзаиморасчетовReceipt,omitempty"`
	SummaVzaimoraschetovExpense        *Float  `xml:"СуммаВзаиморасчетовExpense" json:"СуммаВзаиморасчетовExpense,omitempty"`
	SummaVzaimoraschetovClosingBalance *Float  `xml:"СуммаВзаиморасчетовClosingBalance" json:"СуммаВзаиморасчетовClosingBalance,omitempty"`
	SdelkaType                         *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
	RecorderType                       *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterDenezhnyeSredstvaKSpisaniiuRowType struct {
	Recorder                 String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                   *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber               Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                   *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType               *String  `xml:"RecordType" json:"RecordType,omitempty"`
	VidDenezhnykhSredstv     *String  `xml:"ВидДенежныхСредств" json:"ВидДенежныхСредств,omitempty"`
	BankovskiiSchetKassa     *String  `xml:"БанковскийСчетКасса" json:"БанковскийСчетКасса,omitempty"`
	DokumentSpisaniia        *String  `xml:"ДокументСписания" json:"ДокументСписания,omitempty"`
	TypeOfMovingMoneyKey     *Guid    `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	Sum                      *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	RecorderType             String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	BankovskiiSchetKassaType *String  `xml:"БанковскийСчетКасса_Type" json:"БанковскийСчетКасса_Type,omitempty"`
	DokumentSpisaniiaType    *String  `xml:"ДокументСписания_Type" json:"ДокументСписания_Type,omitempty"`
}

type AccumulationRegisterDenezhnyeSredstvaKSpisaniiuBalance struct {
	VidDenezhnykhSredstv     *String `xml:"ВидДенежныхСредств" json:"ВидДенежныхСредств,omitempty"`
	BankovskiiSchetKassa     *String `xml:"БанковскийСчетКасса" json:"БанковскийСчетКасса,omitempty"`
	DokumentSpisaniia        *String `xml:"ДокументСписания" json:"ДокументСписания,omitempty"`
	TypeOfMovingMoneyKey     *Guid   `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaBalance             *Float  `xml:"СуммаBalance" json:"СуммаBalance,omitempty"`
	BankovskiiSchetKassaType *String `xml:"БанковскийСчетКасса_Type" json:"БанковскийСчетКасса_Type,omitempty"`
	DokumentSpisaniiaType    *String `xml:"ДокументСписания_Type" json:"ДокументСписания_Type,omitempty"`
}

type AccumulationRegisterDenezhnyeSredstvaKSpisaniiuTurnover struct {
	VidDenezhnykhSredstv     *String `xml:"ВидДенежныхСредств" json:"ВидДенежныхСредств,omitempty"`
	BankovskiiSchetKassa     *String `xml:"БанковскийСчетКасса" json:"БанковскийСчетКасса,omitempty"`
	DokumentSpisaniia        *String `xml:"ДокументСписания" json:"ДокументСписания,omitempty"`
	TypeOfMovingMoneyKey     *Guid   `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	Period                   *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod             *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod             *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod               *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod               *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod            *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod              *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod            *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod           *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod               *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                 *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber               *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SummaTurnover            *Float  `xml:"СуммаTurnover" json:"СуммаTurnover,omitempty"`
	SummaReceipt             *Float  `xml:"СуммаReceipt" json:"СуммаReceipt,omitempty"`
	SummaExpense             *Float  `xml:"СуммаExpense" json:"СуммаExpense,omitempty"`
	BankovskiiSchetKassaType *String `xml:"БанковскийСчетКасса_Type" json:"БанковскийСчетКасса_Type,omitempty"`
	DokumentSpisaniiaType    *String `xml:"ДокументСписания_Type" json:"ДокументСписания_Type,omitempty"`
	RecorderType             *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterDenezhnyeSredstvaKSpisaniiuBalanceAndTurnover struct {
	VidDenezhnykhSredstv     *String `xml:"ВидДенежныхСредств" json:"ВидДенежныхСредств,omitempty"`
	BankovskiiSchetKassa     *String `xml:"БанковскийСчетКасса" json:"БанковскийСчетКасса,omitempty"`
	DokumentSpisaniia        *String `xml:"ДокументСписания" json:"ДокументСписания,omitempty"`
	TypeOfMovingMoneyKey     *Guid   `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	Period                   *Time   `xml:"Period" json:"Period,omitempty"`
	SecondPeriod             *Time   `xml:"SecondPeriod" json:"SecondPeriod,omitempty"`
	MinutePeriod             *Time   `xml:"MinutePeriod" json:"MinutePeriod,omitempty"`
	HourPeriod               *Time   `xml:"HourPeriod" json:"HourPeriod,omitempty"`
	DayPeriod                *Time   `xml:"DayPeriod" json:"DayPeriod,omitempty"`
	WeekPeriod               *Time   `xml:"WeekPeriod" json:"WeekPeriod,omitempty"`
	TenDaysPeriod            *Time   `xml:"TenDaysPeriod" json:"TenDaysPeriod,omitempty"`
	MonthPeriod              *Time   `xml:"MonthPeriod" json:"MonthPeriod,omitempty"`
	QuarterPeriod            *Time   `xml:"QuarterPeriod" json:"QuarterPeriod,omitempty"`
	HalfYearPeriod           *Time   `xml:"HalfYearPeriod" json:"HalfYearPeriod,omitempty"`
	YearPeriod               *Time   `xml:"YearPeriod" json:"YearPeriod,omitempty"`
	Recorder                 *String `xml:"Recorder" json:"Recorder,omitempty"`
	LineNumber               *Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SummaOpeningBalance      *Float  `xml:"СуммаOpeningBalance" json:"СуммаOpeningBalance,omitempty"`
	SummaTurnover            *Float  `xml:"СуммаTurnover" json:"СуммаTurnover,omitempty"`
	SummaReceipt             *Float  `xml:"СуммаReceipt" json:"СуммаReceipt,omitempty"`
	SummaExpense             *Float  `xml:"СуммаExpense" json:"СуммаExpense,omitempty"`
	SummaClosingBalance      *Float  `xml:"СуммаClosingBalance" json:"СуммаClosingBalance,omitempty"`
	BankovskiiSchetKassaType *String `xml:"БанковскийСчетКасса_Type" json:"БанковскийСчетКасса_Type,omitempty"`
	DokumentSpisaniiaType    *String `xml:"ДокументСписания_Type" json:"ДокументСписания_Type,omitempty"`
	RecorderType             *String `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type DocumentChekKKMOplataRowType struct {
	Key                     Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber              Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	VidOplatyKey            *Guid    `xml:"ВидОплаты_Key" json:"ВидОплаты_Key,omitempty"`
	NomerVidaOplaty         *Int     `xml:"НомерВидаОплаты" json:"НомерВидаОплаты,omitempty"`
	ProtsentTorgovoiUstupki *Float   `xml:"ПроцентТорговойУступки" json:"ПроцентТорговойУступки,omitempty"`
	Sum                     *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	SummaTorgovoiUstupki    *Float   `xml:"СуммаТорговойУступки" json:"СуммаТорговойУступки,omitempty"`
	Khesh                   *String  `xml:"Хэш" json:"Хэш,omitempty"`
	KartaSberbanka          *Boolean `xml:"КартаСбербанка" json:"КартаСбербанка,omitempty"`
	Poslednie4              *String  `xml:"Последние4" json:"Последние4,omitempty"`
	KodRRN                  *String  `xml:"КодRRN" json:"КодRRN,omitempty"`
	Identifikator           *String  `xml:"Идентификатор" json:"Идентификатор,omitempty"`
	TransactionId           *String  `xml:"TransactionId" json:"TransactionId,omitempty"`
}

type DocumentChekKKMOplataSertifikatamiRowType struct {
	Key                      Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber               Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	SertifikatKey            *Guid   `xml:"Сертификат_Key" json:"Сертификат_Key,omitempty"`
	NomerSertifikata         *String `xml:"НомерСертификата" json:"НомерСертификата,omitempty"`
	Sum                      *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaPokupkiPogashennaia *Float  `xml:"СуммаПокупкиПогашенная" json:"СуммаПокупкиПогашенная,omitempty"`
}

type DocumentChekKKMProdazhaSertifikatovRowType struct {
	Key                                 Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                          Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	SertifikatKey                       *Guid    `xml:"Сертификат_Key" json:"Сертификат_Key,omitempty"`
	NomerSertifikata                    *String  `xml:"НомерСертификата" json:"НомерСертификата,omitempty"`
	Sum                                 *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	SrokDeistviiaSertifikataOgranichen  *Boolean `xml:"СрокДействияСертификатаОграничен" json:"СрокДействияСертификатаОграничен,omitempty"`
	KolichestvoDneiDeistviiaSertifikata *Int     `xml:"КоличествоДнейДействияСертификата" json:"КоличествоДнейДействияСертификата,omitempty"`
}

type DocumentChekKKMTovaryRowType struct {
	Key                                        Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                                 Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	MID                                        *String  `xml:"Артикул" json:"Артикул,omitempty"`
	Weight                                     *Float   `xml:"Вес" json:"Вес,omitempty"`
	ZnachenieUsloviiaAvtomaticheskoiSkidki     *String  `xml:"ЗначениеУсловияАвтоматическойСкидки" json:"ЗначениеУсловияАвтоматическойСкидки,omitempty"`
	Quantity                                   *Int     `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                                    *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	PercentAutoDiscount                        *Float   `xml:"ПроцентАвтоматическойСкидки" json:"ПроцентАвтоматическойСкидки,omitempty"`
	PercentManualDiscount                      *Float   `xml:"ПроцентРучнойСкидки" json:"ПроцентРучнойСкидки,omitempty"`
	SizeKey                                    *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	RegistratsiiaProdazhi                      *Boolean `xml:"РегистрацияПродажи" json:"РегистрацияПродажи,omitempty"`
	InstanceKey                                *Guid    `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	SumManualDiscount                          *Float   `xml:"СуммаРучнойСкидки" json:"СуммаРучнойСкидки,omitempty"`
	DepartmentKey                              *Guid    `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	StavkaNDS                                  *String  `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                                        *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                                   *Float   `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	UslovieAvtomaticheskoiSkidki               *String  `xml:"УсловиеАвтоматическойСкидки" json:"УсловиеАвтоматическойСкидки,omitempty"`
	KharakteristikaNomenklaturyKey             *Guid    `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                                       *Float   `xml:"Цена" json:"Цена,omitempty"`
	Shtrikhkod                                 *String  `xml:"Штрихкод" json:"Штрихкод,omitempty"`
	OrderKey                                   *Guid    `xml:"КлючПродажи_Key" json:"КлючПродажи_Key,omitempty"`
	KliuchSviazi                               *Int     `xml:"КлючСвязи" json:"КлючСвязи,omitempty"`
	ProdazhaPodarka                            *Boolean `xml:"ПродажаПодарка" json:"ПродажаПодарка,omitempty"`
	SumAutoDiscount                            *Float   `xml:"СуммаАвтоматическойСкидки" json:"СуммаАвтоматическойСкидки,omitempty"`
	SummaBonusov                               *Float   `xml:"СуммаБонусов" json:"СуммаБонусов,omitempty"`
	SostavStrokiDliaRassrochkiKey              *Guid    `xml:"СоставСтрокиДляРассрочки_Key" json:"СоставСтрокиДляРассрочки_Key,omitempty"`
	Komitent                                   *String  `xml:"Комитент" json:"Комитент,omitempty"`
	TelefonKomitenta                           *String  `xml:"ТелефонКомитента" json:"ТелефонКомитента,omitempty"`
	INNkomitenta                               *String  `xml:"ИННкомитента" json:"ИННкомитента,omitempty"`
	ZnachenieUsloviiaAvtomaticheskoiSkidkiType *String  `xml:"ЗначениеУсловияАвтоматическойСкидки_Type" json:"ЗначениеУсловияАвтоматическойСкидки_Type,omitempty"`
}

type DocumentChekKKMDokumentyObmenaRowType struct {
	Key         Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber  Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	DokumentKey *Guid  `xml:"Документ_Key" json:"Документ_Key,omitempty"`
	Sum         *Float `xml:"Сумма" json:"Сумма,omitempty"`
}

type DocumentChekKKMDogovoraRassrochkiProdazhaRowType struct {
	Key                  Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber           Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	DogovorRassrochkiKey *Guid  `xml:"ДоговорРассрочки_Key" json:"ДоговорРассрочки_Key,omitempty"`
	Sum                  *Float `xml:"Сумма" json:"Сумма,omitempty"`
}

type DocumentChekKKMDogovoraRassrochkiOplataRowType struct {
	Key                  Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber           Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	DogovorRassrochkiKey *Guid  `xml:"ДоговорРассрочки_Key" json:"ДоговорРассрочки_Key,omitempty"`
	Sum                  *Float `xml:"Сумма" json:"Сумма,omitempty"`
}

type DocumentChekKKMOplataBallamiRowType struct {
	Key                    Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber             Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Khesh                  *String `xml:"Хэш" json:"Хэш,omitempty"`
	Poslednie4             *String `xml:"Последние4" json:"Последние4,omitempty"`
	Sum                    *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	Identifikator          *String `xml:"Идентификатор" json:"Идентификатор,omitempty"`
	TransactionId          *String `xml:"TransactionId" json:"TransactionId,omitempty"`
	TransactionIdSpisaniia *String `xml:"TransactionIdСписания" json:"TransactionIdСписания,omitempty"`
}

type DocumentChekKKMSkidkiNatsenkiRowType struct {
	Key               Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber        Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	KliuchSviazi      *Int   `xml:"КлючСвязи" json:"КлючСвязи,omitempty"`
	Sum               *Float `xml:"Сумма" json:"Сумма,omitempty"`
	SkidkaNatsenkaKey *Guid  `xml:"СкидкаНаценка_Key" json:"СкидкаНаценка_Key,omitempty"`
}

type DocumentChekKKMUpravliaemyeSkidkiRowType struct {
	Key               Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber        Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	SkidkaNatsenkaKey *Guid `xml:"СкидкаНаценка_Key" json:"СкидкаНаценка_Key,omitempty"`
}

type DocumentChekKKMPodarkiRowType struct {
	Key                            Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SkidkaNatsenkaKey              *Guid  `xml:"СкидкаНаценка_Key" json:"СкидкаНаценка_Key,omitempty"`
	ItemKey                        *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid  `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	InstanceKey                    *Guid  `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid  `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	Quantity                       *Float `xml:"Количество" json:"Количество,omitempty"`
	Weight                         *Float `xml:"Вес" json:"Вес,omitempty"`
	Cost                           *Float `xml:"Цена" json:"Цена,omitempty"`
	Sum                            *Float `xml:"Сумма" json:"Сумма,omitempty"`
	DepartmentKey                  *Guid  `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	KliuchSviazi                   *Int   `xml:"КлючСвязи" json:"КлючСвязи,omitempty"`
}

type DocumentChekKKMKuponyRowType struct {
	Key          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber   Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	KliuchSviazi *Int     `xml:"КлючСвязи" json:"КлючСвязи,omitempty"`
	KuponKey     *Guid    `xml:"Купон_Key" json:"Купон_Key,omitempty"`
	NomerKupona  *String  `xml:"НомерКупона" json:"НомерКупона,omitempty"`
	Spisyvat     *Boolean `xml:"Списывать" json:"Списывать,omitempty"`
}

type CatalogTipySkidokNatsenokVremiaPoDniamNedeliRowType struct {
	Key               Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber        Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	VremiaNachala     *Time    `xml:"ВремяНачала" json:"ВремяНачала,omitempty"`
	VremiaOkonchaniia *Time    `xml:"ВремяОкончания" json:"ВремяОкончания,omitempty"`
	Vybran            *Boolean `xml:"Выбран" json:"Выбран,omitempty"`
	DenNedeli         *String  `xml:"ДеньНедели" json:"ДеньНедели,omitempty"`
}

type CatalogVidyKodirovokiTsepeiElementyKodirovkiRowType struct {
	Key                            Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	NeObiazatelnyiElement          *Boolean `xml:"НеОбязательныйЭлемент" json:"НеОбязательныйЭлемент,omitempty"`
	Element                        *String  `xml:"Элемент" json:"Элемент,omitempty"`
	SvoistvoKey                    *Guid    `xml:"Свойство_Key" json:"Свойство_Key,omitempty"`
	DlinaElementa                  *Int     `xml:"ДлинаЭлемента" json:"ДлинаЭлемента,omitempty"`
	NomerStrokiTablChasti          *Int     `xml:"НомерСтрокиТаблЧасти" json:"НомерСтрокиТаблЧасти,omitempty"`
	PeremennaiaDlina               *Boolean `xml:"ПеременнаяДлина" json:"ПеременнаяДлина,omitempty"`
	ZapolniatSvoistvoVSootvetstvii *Boolean `xml:"ЗаполнятьСвойствоВСоответствии" json:"ЗаполнятьСвойствоВСоответствии,omitempty"`
}

type CatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistvRowType struct {
	Key                   Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber            Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	ZnachenieKodirovki    *String `xml:"ЗначениеКодировки" json:"ЗначениеКодировки,omitempty"`
	ZnachenieSvoistvaKey  *Guid   `xml:"ЗначениеСвойства_Key" json:"ЗначениеСвойства_Key,omitempty"`
	NomerStrokiTablChasti *Int    `xml:"НомерСтрокиТаблЧасти" json:"НомерСтрокиТаблЧасти,omitempty"`
	SvoistvoKey           *Guid   `xml:"Свойство_Key" json:"Свойство_Key,omitempty"`
}

type DocumentOtchetKomitentuOProdazhakhDenezhnyeSredstvaRowType struct {
	Key                   Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber            Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	VidOtchetaPoPlatezham *String `xml:"ВидОтчетаПоПлатежам" json:"ВидОтчетаПоПлатежам,omitempty"`
	StavkaNDS             *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                   *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS              *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
}

type DocumentOtchetKomitentuOProdazhakhTovaryRowType struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	DokumentPostupleniia           *String `xml:"ДокументПоступления" json:"ДокументПоступления,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	OtchetKomitentuKey             *Guid   `xml:"ОтчетКомитенту_Key" json:"ОтчетКомитенту_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	Sum                            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaVoznagrazhdeniia          *Float  `xml:"СуммаВознаграждения" json:"СуммаВознаграждения,omitempty"`
	SummaNDSVoznagrazhdeniia       *Float  `xml:"СуммаНДСВознаграждения" json:"СуммаНДСВознаграждения,omitempty"`
	SummaPostupleniia              *Float  `xml:"СуммаПоступления" json:"СуммаПоступления,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float  `xml:"Цена" json:"Цена,omitempty"`
	TsenaPostupleniia              *Float  `xml:"ЦенаПоступления" json:"ЦенаПоступления,omitempty"`
	PokupatelKey                   *Guid   `xml:"Покупатель_Key" json:"Покупатель_Key,omitempty"`
	DataRealizatsii                *Time   `xml:"ДатаРеализации" json:"ДатаРеализации,omitempty"`
	DokumentProdazhi               *String `xml:"ДокументПродажи" json:"ДокументПродажи,omitempty"`
	SchetFakturaVystavlennyiKey    *Guid   `xml:"СчетФактураВыставленный_Key" json:"СчетФактураВыставленный_Key,omitempty"`
	DokumentPostupleniiaType       *String `xml:"ДокументПоступления_Type" json:"ДокументПоступления_Type,omitempty"`
	DokumentProdazhiType           *String `xml:"ДокументПродажи_Type" json:"ДокументПродажи_Type,omitempty"`
}

type DocumentZaiavkaNaPereotsenkuTovarovTovaryRowType struct {
	Key                            Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float `xml:"Вес" json:"Вес,omitempty"`
	Quantity                       *Int   `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid  `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid  `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid  `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	RetailCost                     *Float `xml:"ЦенаВРознице" json:"ЦенаВРознице,omitempty"`
	TsenaVRoznitseGr               *Float `xml:"ЦенаВРозницеГр" json:"ЦенаВРозницеГр,omitempty"`
	TsenaVRoznitseStaraia          *Float `xml:"ЦенаВРозницеСтарая" json:"ЦенаВРозницеСтарая,omitempty"`
}

type DocumentZakrytieZakazovKlientovZakazyRowType struct {
	Key                        Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                 Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	ZakazKlientaKey            *Guid `xml:"ЗаказКлиента_Key" json:"ЗаказКлиента_Key,omitempty"`
	PrichinaZakrytiiaZakazaKey *Guid `xml:"ПричинаЗакрытияЗаказа_Key" json:"ПричинаЗакрытияЗаказа_Key,omitempty"`
}

type DocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezhaRowType struct {
	Key                              Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                       Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	DogovorKontragentaKey            *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentPlanirovaniiaPlatezhaKey *Guid   `xml:"ДокументПланированияПлатежа_Key" json:"ДокументПланированияПлатежа_Key,omitempty"`
	KratnostVzaimoraschetov          *Int    `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov              *Float  `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	KursVzaimoraschetovPlan          *Float  `xml:"КурсВзаиморасчетовПлан" json:"КурсВзаиморасчетовПлан,omitempty"`
	ProektKey                        *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	Sdelka                           *String `xml:"Сделка" json:"Сделка,omitempty"`
	StavkaNDS                        *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	TypeOfMovingMoneyKey             *Guid   `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov             *Float  `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	SummaNDS                         *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	Sum                              *Float  `xml:"СуммаПлатежа" json:"СуммаПлатежа,omitempty"`
	SummaPlatezhaPlan                *Float  `xml:"СуммаПлатежаПлан" json:"СуммаПлатежаПлан,omitempty"`
	SdelkaType                       *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type DocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragentaRowType struct {
	Key            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Znachenie      *String `xml:"Значение" json:"Значение,omitempty"`
	Predstavlenie  *String `xml:"Представление" json:"Представление,omitempty"`
	Rekvizit       *String `xml:"Реквизит" json:"Реквизит,omitempty"`
	TipKontragenta *String `xml:"ТипКонтрагента" json:"ТипКонтрагента,omitempty"`
}

type CatalogNastroikiVypolneniiaObmenaNastroikiObmenaRowType struct {
	Key                      Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber               Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	VypolniaemoeDeistvie     *String `xml:"ВыполняемоеДействие" json:"ВыполняемоеДействие,omitempty"`
	NastroikaObmenaKey       *Guid   `xml:"НастройкаОбмена_Key" json:"НастройкаОбмена_Key,omitempty"`
	VypolniaemoeDeistvieType *String `xml:"ВыполняемоеДействие_Type" json:"ВыполняемоеДействие_Type,omitempty"`
}

type CatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkamiRowType struct {
	Key                Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber         Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	TekstSoobshcheniia *String `xml:"ТекстСообщения" json:"ТекстСообщения,omitempty"`
}

type DocumentRealizatsiiaTovarovUslugTovaryRowType struct {
	Key                                        Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                                 Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                                     *Float  `xml:"Вес" json:"Вес,omitempty"`
	ZnachenieUsloviiaAvtomaticheskoiSkidki     *String `xml:"ЗначениеУсловияАвтоматическойСкидки" json:"ЗначениеУсловияАвтоматическойСкидки,omitempty"`
	KachestvoKey                               *Guid   `xml:"Качество_Key" json:"Качество_Key,omitempty"`
	Quantity                                   *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                                    *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	PercentAutoDiscount                        *Float  `xml:"ПроцентАвтоматическойСкидки" json:"ПроцентАвтоматическойСкидки,omitempty"`
	PercentManualDiscount                      *Float  `xml:"ПроцентРучнойСкидки" json:"ПроцентРучнойСкидки,omitempty"`
	SizeKey                                    *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                                *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	DepartmentKey                              *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	StavkaNDS                                  *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                                        *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                                   *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	UslovieAvtomaticheskoiSkidki               *String `xml:"УсловиеАвтоматическойСкидки" json:"УсловиеАвтоматическойСкидки,omitempty"`
	KharakteristikaNomenklaturyKey             *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                                       *Float  `xml:"Цена" json:"Цена,omitempty"`
	SumManualDiscount                          *Float  `xml:"СуммаРучнойСкидки" json:"СуммаРучнойСкидки,omitempty"`
	SumAutoDiscount                            *Float  `xml:"СуммаАвтоматическойСкидки" json:"СуммаАвтоматическойСкидки,omitempty"`
	VesVstavok                                 *Float  `xml:"ВесВставок" json:"ВесВставок,omitempty"`
	ZnachenieUsloviiaAvtomaticheskoiSkidkiType *String `xml:"ЗначениеУсловияАвтоматическойСкидки_Type" json:"ЗначениеУсловияАвтоматическойСкидки_Type,omitempty"`
}

type DocumentRealizatsiiaTovarovUslugUslugiRowType struct {
	Key                      Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber               Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Quantity                 *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                  *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	ProtsentOtSummyDokumenta *Float  `xml:"ПроцентОтСуммыДокумента" json:"ПроцентОтСуммыДокумента,omitempty"`
	PercentManualDiscount    *Float  `xml:"ПроцентРучнойСкидки" json:"ПроцентРучнойСкидки,omitempty"`
	Soderzhanie              *String `xml:"Содержание" json:"Содержание,omitempty"`
	StavkaNDS                *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                      *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                 *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	Cost                     *Float  `xml:"Цена" json:"Цена,omitempty"`
	SumManualDiscount        *Float  `xml:"СуммаРучнойСкидки" json:"СуммаРучнойСкидки,omitempty"`
}

type DocumentSobytieStoronnieLitsaRowType struct {
	Key           Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber    Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	KontragentKey *Guid `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	LitsoKey      *Guid `xml:"Лицо_Key" json:"Лицо_Key,omitempty"`
}

type CatalogNastroikiOtchetovGruppyNastroekIPolzovateliRowType struct {
	Key         Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber  Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Obieekt     *String `xml:"Объект" json:"Объект,omitempty"`
	ObieektType *String `xml:"Объект_Type" json:"Объект_Type,omitempty"`
}

type CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidkiRowType struct {
	Key                                             Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                                      Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Kod                                             *Int    `xml:"Код" json:"Код,omitempty"`
	KonSumma                                        *Float  `xml:"КонСумма" json:"КонСумма,omitempty"`
	MaksimalnyiProtsentSummyPokupkiPriOplateBonusom *Float  `xml:"МаксимальныйПроцентСуммыПокупкиПриОплатеБонусом" json:"МаксимальныйПроцентСуммыПокупкиПриОплатеБонусом,omitempty"`
	Naimenovanie                                    *String `xml:"Наименование" json:"Наименование,omitempty"`
	NachSumma                                       *Float  `xml:"НачСумма" json:"НачСумма,omitempty"`
	ProtsentSkidki                                  *Float  `xml:"ПроцентСкидки" json:"ПроцентСкидки,omitempty"`
}

type CatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenokRowType struct {
	Key             Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber      Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	UtsenkaProtsent *Float `xml:"УценкаПроцент" json:"УценкаПроцент,omitempty"`
	UtsenkaDnei     *Int   `xml:"УценкаДней" json:"УценкаДней,omitempty"`
}

type DocumentKorrektirovkaDolgaSummyDolgaRowType struct {
	Key                         Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                  Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	DataDolga                   *Time   `xml:"ДатаДолга" json:"ДатаДолга,omitempty"`
	DogovorKontragentaKey       *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	KratnostVzaimoraschetov     *Int    `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov         *Float  `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	Sdelka                      *String `xml:"Сделка" json:"Сделка,omitempty"`
	UvelichenieDolgaKontragenta *Float  `xml:"УвеличениеДолгаКонтрагента" json:"УвеличениеДолгаКонтрагента,omitempty"`
	UmenshenieDolgaKontragenta  *Float  `xml:"УменьшениеДолгаКонтрагента" json:"УменьшениеДолгаКонтрагента,omitempty"`
	SdelkaType                  *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type DocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezhaRowType struct {
	Key                     Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber              Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	DogovorKontragentaKey   *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	KratnostVzaimoraschetov *Int    `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov     *Float  `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	ProektKey               *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	Sdelka                  *String `xml:"Сделка" json:"Сделка,omitempty"`
	TypeOfMovingMoneyKey    *Guid   `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov    *Float  `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	Sum                     *Float  `xml:"СуммаПлатежа" json:"СуммаПлатежа,omitempty"`
	SdelkaType              *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type DocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavkiRowType struct {
	Key                     Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber              Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	MestoRazmeshcheniia     *String `xml:"МестоРазмещения" json:"МестоРазмещения,omitempty"`
	Sum                     *Float  `xml:"СуммаПлатежа" json:"СуммаПлатежа,omitempty"`
	MestoRazmeshcheniiaType *String `xml:"МестоРазмещения_Type" json:"МестоРазмещения_Type,omitempty"`
}

type DocumentZakrytieZakazovPostavshchikamZakazyRowType struct {
	Key                        Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                 Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	ZakazPostavshchikuKey      *Guid `xml:"ЗаказПоставщику_Key" json:"ЗаказПоставщику_Key,omitempty"`
	PrichinaZakrytiiaZakazaKey *Guid `xml:"ПричинаЗакрытияЗаказа_Key" json:"ПричинаЗакрытияЗаказа_Key,omitempty"`
}

type DocumentAnketyKlientovDliaFinMonitoringaAnketyRowType struct {
	Key                        Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                 Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	KontragentKey              *Guid    `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	DogovorKontragentaKey      *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	VPerechne                  *Boolean `xml:"ВПеречне" json:"ВПеречне,omitempty"`
	InostrannoePublichnoeLitso *Boolean `xml:"ИностранноеПубличноеЛицо" json:"ИностранноеПубличноеЛицо,omitempty"`
	DokumentSeriia             *String  `xml:"ДокументСерия" json:"ДокументСерия,omitempty"`
	DokumentNomer              *String  `xml:"ДокументНомер" json:"ДокументНомер,omitempty"`
}

type DocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezhaRowType struct {
	Key                              Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                       Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	DogovorKontragentaKey            *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentPlanirovaniiaPlatezhaKey *Guid   `xml:"ДокументПланированияПлатежа_Key" json:"ДокументПланированияПлатежа_Key,omitempty"`
	KratnostVzaimoraschetov          *Int    `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov              *Float  `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	KursVzaimoraschetovPlan          *Float  `xml:"КурсВзаиморасчетовПлан" json:"КурсВзаиморасчетовПлан,omitempty"`
	ProektKey                        *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	Sdelka                           *String `xml:"Сделка" json:"Сделка,omitempty"`
	StavkaNDS                        *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	TypeOfMovingMoneyKey             *Guid   `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov             *Float  `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	SummaNDS                         *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	Sum                              *Float  `xml:"СуммаПлатежа" json:"СуммаПлатежа,omitempty"`
	SummaPlatezhaPlan                *Float  `xml:"СуммаПлатежаПлан" json:"СуммаПлатежаПлан,omitempty"`
	SdelkaType                       *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type DocumentInkassovoePorucheniePeredannoeRekvizityKontragentaRowType struct {
	Key            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Znachenie      *String `xml:"Значение" json:"Значение,omitempty"`
	Predstavlenie  *String `xml:"Представление" json:"Представление,omitempty"`
	Rekvizit       *String `xml:"Реквизит" json:"Реквизит,omitempty"`
	TipKontragenta *String `xml:"ТипКонтрагента" json:"ТипКонтрагента,omitempty"`
}

type DocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniiaRowType struct {
	Key           Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber    Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Imia          *String `xml:"Имя" json:"Имя,omitempty"`
	Predstavlenie *String `xml:"Представление" json:"Представление,omitempty"`
}

type DocumentInternetZakazTovaryInternetZakazaRowType struct {
	Key                            Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	ItemKey                        *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid    `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	InstanceKey                    *Guid    `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	Quantity                       *Int     `xml:"Количество" json:"Количество,omitempty"`
	Weight                         *Float   `xml:"Вес" json:"Вес,omitempty"`
	Cost                           *Float   `xml:"Цена" json:"Цена,omitempty"`
	Sum                            *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	StavkaNDS                      *String  `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	SummaNDS                       *Float   `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	PodobranPolnostiu              *Boolean `xml:"ПодобранПолностью" json:"ПодобранПолностью,omitempty"`
	Otkaz                          *Boolean `xml:"Отказ" json:"Отказ,omitempty"`
}

type DocumentInternetZakazTovaryRowType struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	Cost                           *Float  `xml:"Цена" json:"Цена,omitempty"`
	Sum                            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	StavkaNDS                      *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	SummaNDS                       *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	NomerStrokiZakaza              *Int    `xml:"НомерСтрокиЗаказа" json:"НомерСтрокиЗаказа,omitempty"`
	DepartmentKey                  *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
}

type DocumentOtchetORoznichnykhProdazhakhBonusyRowType struct {
	Key                                 Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                          Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	MemberCardKey                       *Guid    `xml:"ДисконтнаяКарта_Key" json:"ДисконтнаяКарта_Key,omitempty"`
	NomerCheka                          *String  `xml:"НомерЧека" json:"НомерЧека,omitempty"`
	SummaNachislennogoBonusa            *Float   `xml:"СуммаНачисленногоБонуса" json:"СуммаНачисленногоБонуса,omitempty"`
	SummaNachislennogoBonusaRasschitana *Boolean `xml:"СуммаНачисленногоБонусаРассчитана" json:"СуммаНачисленногоБонусаРассчитана,omitempty"`
	SummaOplaty                         *Float   `xml:"СуммаОплаты" json:"СуммаОплаты,omitempty"`
	SummaPokupki                        *Float   `xml:"СуммаПокупки" json:"СуммаПокупки,omitempty"`
	OrderKey                            *Guid    `xml:"КлючПродажи_Key" json:"КлючПродажи_Key,omitempty"`
	OpisanieKarty                       *String  `xml:"ОписаниеКарты" json:"ОписаниеКарты,omitempty"`
}

type DocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditamiRowType struct {
	Key                                     Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                              Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	BankKreditorKey                         *Guid   `xml:"БанкКредитор_Key" json:"БанкКредитор_Key,omitempty"`
	VidOplatyKey                            *Guid   `xml:"ВидОплаты_Key" json:"ВидОплаты_Key,omitempty"`
	DogovorVzaimoraschetovBankaKreditoraKey *Guid   `xml:"ДоговорВзаиморасчетовБанкаКредитора_Key" json:"ДоговорВзаиморасчетовБанкаКредитора_Key,omitempty"`
	NomerCheka                              *String `xml:"НомерЧека" json:"НомерЧека,omitempty"`
	ProtsentBankovskoiKomissii              *Float  `xml:"ПроцентБанковскойКомиссии" json:"ПроцентБанковскойКомиссии,omitempty"`
	Sum                                     *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaBankovskoiKomissii                 *Float  `xml:"СуммаБанковскойКомиссии" json:"СуммаБанковскойКомиссии,omitempty"`
	OrderKey                                *Guid   `xml:"КлючПродажи_Key" json:"КлючПродажи_Key,omitempty"`
}

type DocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartamiRowType struct {
	Key                     Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber              Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	VidOplatyKey            *Guid   `xml:"ВидОплаты_Key" json:"ВидОплаты_Key,omitempty"`
	NomerCheka              *String `xml:"НомерЧека" json:"НомерЧека,omitempty"`
	ProtsentTorgovoiUstupki *Float  `xml:"ПроцентТорговойУступки" json:"ПроцентТорговойУступки,omitempty"`
	Sum                     *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaTorgovoiUstupki    *Float  `xml:"СуммаТорговойУступки" json:"СуммаТорговойУступки,omitempty"`
	OrderKey                *Guid   `xml:"КлючПродажи_Key" json:"КлючПродажи_Key,omitempty"`
}

type DocumentOtchetORoznichnykhProdazhakhOplataSertifikatamiRowType struct {
	Key                                Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                         Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	NomerCheka                         *String  `xml:"НомерЧека" json:"НомерЧека,omitempty"`
	SertifikatKey                      *Guid    `xml:"Сертификат_Key" json:"Сертификат_Key,omitempty"`
	SrokDeistviiaSertifikataOgranichen *Boolean `xml:"СрокДействияСертификатаОграничен" json:"СрокДействияСертификатаОграничен,omitempty"`
	SummaPokupkiPogashennaia           *Float   `xml:"СуммаПокупкиПогашенная" json:"СуммаПокупкиПогашенная,omitempty"`
	SummaSertifikata                   *Float   `xml:"СуммаСертификата" json:"СуммаСертификата,omitempty"`
	OrderKey                           *Guid    `xml:"КлючПродажи_Key" json:"КлючПродажи_Key,omitempty"`
	NomerSertifikata                   *String  `xml:"НомерСертификата" json:"НомерСертификата,omitempty"`
}

type DocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatovRowType struct {
	Key              Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber       Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	NomerCheka       *String `xml:"НомерЧека" json:"НомерЧека,omitempty"`
	SertifikatKey    *Guid   `xml:"Сертификат_Key" json:"Сертификат_Key,omitempty"`
	NomerSertifikata *String `xml:"НомерСертификата" json:"НомерСертификата,omitempty"`
	Sum              *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	OrderKey         *Guid   `xml:"КлючПродажи_Key" json:"КлючПродажи_Key,omitempty"`
}

type DocumentOtchetORoznichnykhProdazhakhTovaryRowType struct {
	Key                                        Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                                 Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                                     *Float  `xml:"Вес" json:"Вес,omitempty"`
	MemberCardKey                              *Guid   `xml:"ДисконтнаяКарта_Key" json:"ДисконтнаяКарта_Key,omitempty"`
	Kassir                                     *String `xml:"Кассир" json:"Кассир,omitempty"`
	Quantity                                   *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                                    *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	NomerCheka                                 *String `xml:"НомерЧека" json:"НомерЧека,omitempty"`
	PercentAutoDiscount                        *Float  `xml:"ПроцентАвтоматическойСкидки" json:"ПроцентАвтоматическойСкидки,omitempty"`
	PercentManualDiscount                      *Float  `xml:"ПроцентРучнойСкидки" json:"ПроцентРучнойСкидки,omitempty"`
	SizeKey                                    *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                                *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	SumManualDiscount                          *Float  `xml:"СуммаРучнойСкидки" json:"СуммаРучнойСкидки,omitempty"`
	DepartmentKey                              *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	StavkaNDS                                  *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                                        *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                                   *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	UslovieAvtomaticheskoiSkidki               *String `xml:"УсловиеАвтоматическойСкидки" json:"УсловиеАвтоматическойСкидки,omitempty"`
	KharakteristikaNomenklaturyKey             *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                                       *Float  `xml:"Цена" json:"Цена,omitempty"`
	OrderKey                                   *Guid   `xml:"КлючПродажи_Key" json:"КлючПродажи_Key,omitempty"`
	SumAutoDiscount                            *Float  `xml:"СуммаАвтоматическойСкидки" json:"СуммаАвтоматическойСкидки,omitempty"`
	KliuchSviazi                               *Int    `xml:"КлючСвязи" json:"КлючСвязи,omitempty"`
	ZnachenieUsloviiaAvtomaticheskoiSkidki     *String `xml:"ЗначениеУсловияАвтоматическойСкидки" json:"ЗначениеУсловияАвтоматическойСкидки,omitempty"`
	OpisanieKarty                              *String `xml:"ОписаниеКарты" json:"ОписаниеКарты,omitempty"`
	SostavStrokiDliaRassrochkiKey              *Guid   `xml:"СоставСтрокиДляРассрочки_Key" json:"СоставСтрокиДляРассрочки_Key,omitempty"`
	KassirType                                 *String `xml:"Кассир_Type" json:"Кассир_Type,omitempty"`
	ZnachenieUsloviiaAvtomaticheskoiSkidkiType *String `xml:"ЗначениеУсловияАвтоматическойСкидки_Type" json:"ЗначениеУсловияАвтоматическойСкидки_Type,omitempty"`
}

type DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazhaRowType struct {
	Key                  Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber           Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	NomerCheka           *String `xml:"НомерЧека" json:"НомерЧека,omitempty"`
	Sum                  *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	DogovorRassrochkiKey *Guid   `xml:"ДоговорРассрочки_Key" json:"ДоговорРассрочки_Key,omitempty"`
	OrderKey             *Guid   `xml:"КлючПродажи_Key" json:"КлючПродажи_Key,omitempty"`
}

type DocumentOtchetORoznichnykhProdazhakhDokumentyObmenaRowType struct {
	Key         Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber  Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	DokumentKey *Guid   `xml:"Документ_Key" json:"Документ_Key,omitempty"`
	Sum         *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	NomerCheka  *String `xml:"НомерЧека" json:"НомерЧека,omitempty"`
	OrderKey    *Guid   `xml:"КлючПродажи_Key" json:"КлючПродажи_Key,omitempty"`
}

type DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplataRowType struct {
	Key                  Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber           Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Sum                  *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	NomerCheka           *String `xml:"НомерЧека" json:"НомерЧека,omitempty"`
	DogovorRassrochkiKey *Guid   `xml:"ДоговорРассрочки_Key" json:"ДоговорРассрочки_Key,omitempty"`
	OrderKey             *Guid   `xml:"КлючПродажи_Key" json:"КлючПродажи_Key,omitempty"`
}

type DocumentOtchetORoznichnykhProdazhakhOplataBallamiRowType struct {
	Key                    Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber             Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Khesh                  *String `xml:"Хэш" json:"Хэш,omitempty"`
	Poslednie4             *String `xml:"Последние4" json:"Последние4,omitempty"`
	Sum                    *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	Identifikator          *String `xml:"Идентификатор" json:"Идентификатор,omitempty"`
	TransactionId          *String `xml:"TransactionId" json:"TransactionId,omitempty"`
	TransactionIdSpisaniia *String `xml:"TransactionIdСписания" json:"TransactionIdСписания,omitempty"`
	NomerCheka             *String `xml:"НомерЧека" json:"НомерЧека,omitempty"`
	OrderKey               *Guid   `xml:"КлючПродажи_Key" json:"КлючПродажи_Key,omitempty"`
}

type DocumentOtchetORoznichnykhProdazhakhSkidkiNatsenkiRowType struct {
	Key               Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber        Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	KliuchSviazi      *Int   `xml:"КлючСвязи" json:"КлючСвязи,omitempty"`
	Sum               *Float `xml:"Сумма" json:"Сумма,omitempty"`
	SkidkaNatsenkaKey *Guid  `xml:"СкидкаНаценка_Key" json:"СкидкаНаценка_Key,omitempty"`
	OrderKey          *Guid  `xml:"КлючПродажи_Key" json:"КлючПродажи_Key,omitempty"`
}

type DocumentOtchetORoznichnykhProdazhakhKuponyRowType struct {
	Key          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber   Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	KliuchSviazi *Int     `xml:"КлючСвязи" json:"КлючСвязи,omitempty"`
	KuponKey     *Guid    `xml:"Купон_Key" json:"Купон_Key,omitempty"`
	NomerKupona  *String  `xml:"НомерКупона" json:"НомерКупона,omitempty"`
	Spisyvat     *Boolean `xml:"Списывать" json:"Списывать,omitempty"`
}

type DocumentOtmenaSkidokNomenklaturyDokumentyRowType struct {
	Key                            Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	UstanovkaSkidokNomenklaturyKey *Guid `xml:"УстановкаСкидокНоменклатуры_Key" json:"УстановкаСкидокНоменклатуры_Key,omitempty"`
}

type DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezhaRowType struct {
	Key                              Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                       Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	DogovorKontragentaKey            *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentPlanirovaniiaPlatezhaKey *Guid   `xml:"ДокументПланированияПлатежа_Key" json:"ДокументПланированияПлатежа_Key,omitempty"`
	KratnostVzaimoraschetov          *Int    `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov              *Float  `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	KursVzaimoraschetovPlan          *Float  `xml:"КурсВзаиморасчетовПлан" json:"КурсВзаиморасчетовПлан,omitempty"`
	ProektKey                        *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	Sdelka                           *String `xml:"Сделка" json:"Сделка,omitempty"`
	StavkaNDS                        *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	TypeOfMovingMoneyKey             *Guid   `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov             *Float  `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	SummaNDS                         *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	Sum                              *Float  `xml:"СуммаПлатежа" json:"СуммаПлатежа,omitempty"`
	SummaPlatezhaPlan                *Float  `xml:"СуммаПлатежаПлан" json:"СуммаПлатежаПлан,omitempty"`
	SdelkaType                       *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragentaRowType struct {
	Key            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Znachenie      *String `xml:"Значение" json:"Значение,omitempty"`
	Predstavlenie  *String `xml:"Представление" json:"Представление,omitempty"`
	Rekvizit       *String `xml:"Реквизит" json:"Реквизит,omitempty"`
	TipKontragenta *String `xml:"ТипКонтрагента" json:"ТипКонтрагента,omitempty"`
}

type DocumentKassovyiChekKorrektsiiOplataRowType struct {
	Key        Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	TipOplaty  *String `xml:"ТипОплаты" json:"ТипОплаты,omitempty"`
	Sum        *Float  `xml:"Сумма" json:"Сумма,omitempty"`
}

type DocumentSchetNaOplatuPokupateliuTovaryRowType struct {
	Key                                        Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                                 Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                                     *Float  `xml:"Вес" json:"Вес,omitempty"`
	ZnachenieUsloviiaAvtomaticheskoiSkidki     *String `xml:"ЗначениеУсловияАвтоматическойСкидки" json:"ЗначениеУсловияАвтоматическойСкидки,omitempty"`
	Quantity                                   *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                                    *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	PercentAutoDiscount                        *Float  `xml:"ПроцентАвтоматическойСкидки" json:"ПроцентАвтоматическойСкидки,omitempty"`
	PercentManualDiscount                      *Float  `xml:"ПроцентРучнойСкидки" json:"ПроцентРучнойСкидки,omitempty"`
	SizeKey                                    *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                                *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	StavkaNDS                                  *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                                        *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                                   *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	UslovieAvtomaticheskoiSkidki               *String `xml:"УсловиеАвтоматическойСкидки" json:"УсловиеАвтоматическойСкидки,omitempty"`
	KharakteristikaNomenklaturyKey             *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                                       *Float  `xml:"Цена" json:"Цена,omitempty"`
	SumAutoDiscount                            *Float  `xml:"СуммаАвтоматическойСкидки" json:"СуммаАвтоматическойСкидки,omitempty"`
	SumManualDiscount                          *Float  `xml:"СуммаРучнойСкидки" json:"СуммаРучнойСкидки,omitempty"`
	ZnachenieUsloviiaAvtomaticheskoiSkidkiType *String `xml:"ЗначениеУсловияАвтоматическойСкидки_Type" json:"ЗначениеУсловияАвтоматическойСкидки_Type,omitempty"`
}

type DocumentSchetNaOplatuPokupateliuUslugiRowType struct {
	Key                   Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber            Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Quantity              *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey               *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	PercentManualDiscount *Float  `xml:"ПроцентРучнойСкидки" json:"ПроцентРучнойСкидки,omitempty"`
	Soderzhanie           *String `xml:"Содержание" json:"Содержание,omitempty"`
	StavkaNDS             *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                   *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS              *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	Cost                  *Float  `xml:"Цена" json:"Цена,omitempty"`
	SumManualDiscount     *Float  `xml:"СуммаРучнойСкидки" json:"СуммаРучнойСкидки,omitempty"`
}

type CatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektovRowType struct {
	Key                               Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                        Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	VariantPoiskaNePodderzhivaetsia   *Boolean `xml:"ВариантПоискаНеПоддерживается" json:"ВариантПоискаНеПоддерживается,omitempty"`
	ImiaNastroikiDliaAlgoritma        *String  `xml:"ИмяНастройкиДляАлгоритма" json:"ИмяНастройкиДляАлгоритма,omitempty"`
	ImiaNastroikiDliaPolzovatelia     *String  `xml:"ИмяНастройкиДляПользователя" json:"ИмяНастройкиДляПользователя,omitempty"`
	KodPravilaObmena                  *String  `xml:"КодПравилаОбмена" json:"КодПравилаОбмена,omitempty"`
	NaimenovaniePravilaObmena         *String  `xml:"НаименованиеПравилаОбмена" json:"НаименованиеПравилаОбмена,omitempty"`
	NastroikaNePodderzhivaetsia       *Boolean `xml:"НастройкаНеПоддерживается" json:"НастройкаНеПоддерживается,omitempty"`
	OpisanieNastroikiDliaPolzovatelia *String  `xml:"ОписаниеНастройкиДляПользователя" json:"ОписаниеНастройкиДляПользователя,omitempty"`
	EtoNastroikaDliaVygruzki          *Boolean `xml:"ЭтоНастройкаДляВыгрузки" json:"ЭтоНастройкаДляВыгрузки,omitempty"`
}

type CatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykhRowType struct {
	Key                         Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                  Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	VygruzhatDannye             *Boolean `xml:"ВыгружатьДанные" json:"ВыгружатьДанные,omitempty"`
	VygruzhatPoSsylke           *Boolean `xml:"ВыгружатьПоСсылке" json:"ВыгружатьПоСсылке,omitempty"`
	KodPravilaVygruzki          *String  `xml:"КодПравилаВыгрузки" json:"КодПравилаВыгрузки,omitempty"`
	KodPravilaObmena            *String  `xml:"КодПравилаОбмена" json:"КодПравилаОбмена,omitempty"`
	NaimenovaniePravilaVygruzki *String  `xml:"НаименованиеПравилаВыгрузки" json:"НаименованиеПравилаВыгрузки,omitempty"`
	NastroikaNePodderzhivaetsia *Boolean `xml:"НастройкаНеПоддерживается" json:"НастройкаНеПоддерживается,omitempty"`
	EtoNastroikaDliaVygruzki    *Boolean `xml:"ЭтоНастройкаДляВыгрузки" json:"ЭтоНастройкаДляВыгрузки,omitempty"`
}

type CatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkamiRowType struct {
	Key                Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber         Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	TekstSoobshcheniia *String `xml:"ТекстСообщения" json:"ТекстСообщения,omitempty"`
}

type DocumentVozvratTovarovPostavshchikuTovaryRowType struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	DefektKey                      *Guid   `xml:"Дефект_Key" json:"Дефект_Key,omitempty"`
	DokumentPostupleniia           *String `xml:"ДокументПоступления" json:"ДокументПоступления,omitempty"`
	ZakazKlientaKey                *Guid   `xml:"ЗаказКлиента_Key" json:"ЗаказКлиента_Key,omitempty"`
	KachestvoKey                   *Guid   `xml:"Качество_Key" json:"Качество_Key,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	ProektKey                      *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	DepartmentKey                  *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	StavkaNDS                      *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                       *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float  `xml:"Цена" json:"Цена,omitempty"`
	DokumentPostupleniiaType       *String `xml:"ДокументПоступления_Type" json:"ДокументПоступления_Type,omitempty"`
}

type DocumentInventarizatsiiaTovarovNaSkladeTovaryRowType struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	VesUchet                       *Float  `xml:"ВесУчет" json:"ВесУчет,omitempty"`
	KachestvoKey                   *Guid   `xml:"Качество_Key" json:"Качество_Key,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	KolichestvoUchet               *Int    `xml:"КоличествоУчет" json:"КоличествоУчет,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	NomerVed                       *String `xml:"НомерВед" json:"НомерВед,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	Sum                            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaRegl                      *Float  `xml:"СуммаРегл" json:"СуммаРегл,omitempty"`
	SummaUchet                     *Float  `xml:"СуммаУчет" json:"СуммаУчет,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float  `xml:"Цена" json:"Цена,omitempty"`
	RetailCost                     *Float  `xml:"ЦенаВРознице" json:"ЦенаВРознице,omitempty"`
	OtkloneniePoKolichestvu        *Int    `xml:"ОтклонениеПоКоличеству" json:"ОтклонениеПоКоличеству,omitempty"`
	OtkloneniePoVesu               *Float  `xml:"ОтклонениеПоВесу" json:"ОтклонениеПоВесу,omitempty"`
}

type DocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsiiRowType struct {
	Key           Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber    Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	VidSravneniia *String `xml:"ВидСравнения" json:"ВидСравнения,omitempty"`
	Znachenie     *String `xml:"Значение" json:"Значение,omitempty"`
	ImiaPolia     *String `xml:"ИмяПоля" json:"ИмяПоля,omitempty"`
	ZnachenieType *String `xml:"Значение_Type" json:"Значение_Type,omitempty"`
}

type DocumentInventarizatsiiaTovarovNaSkladeSertifikatyRowType struct {
	Key                     Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber              Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SertifikatKey           *Guid  `xml:"Сертификат_Key" json:"Сертификат_Key,omitempty"`
	Sum                     *Float `xml:"Сумма" json:"Сумма,omitempty"`
	SummaUchet              *Float `xml:"СуммаУчет" json:"СуммаУчет,omitempty"`
	Quantity                *Float `xml:"Количество" json:"Количество,omitempty"`
	KolichestvoUchet        *Float `xml:"КоличествоУчет" json:"КоличествоУчет,omitempty"`
	OtkloneniePoKolichestvu *Int   `xml:"ОтклонениеПоКоличеству" json:"ОтклонениеПоКоличеству,omitempty"`
}

type DocumentInventarizatsiiaTovarovNaSkladeTovaryVPutiRowType struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	Quantity                       *Float  `xml:"Количество" json:"Количество,omitempty"`
	DogovorKontragentaKey          *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOprikhodovaniia        *String `xml:"ДокументОприходования" json:"ДокументОприходования,omitempty"`
	KontragentKey                  *Guid   `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	DataOtpravki                   *Time   `xml:"ДатаОтправки" json:"ДатаОтправки,omitempty"`
	DokumentOprikhodovaniiaType    *String `xml:"ДокументОприходования_Type" json:"ДокументОприходования_Type,omitempty"`
}

type DocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezhaRowType struct {
	Key                              Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                       Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	DogovorKontragentaKey            *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentPlanirovaniiaPlatezhaKey *Guid   `xml:"ДокументПланированияПлатежа_Key" json:"ДокументПланированияПлатежа_Key,omitempty"`
	KratnostVzaimoraschetov          *Int    `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov              *Float  `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	KursVzaimoraschetovPlan          *Float  `xml:"КурсВзаиморасчетовПлан" json:"КурсВзаиморасчетовПлан,omitempty"`
	ProektKey                        *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	Sdelka                           *String `xml:"Сделка" json:"Сделка,omitempty"`
	StavkaNDS                        *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	TypeOfMovingMoneyKey             *Guid   `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov             *Float  `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	SummaNDS                         *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	Sum                              *Float  `xml:"СуммаПлатежа" json:"СуммаПлатежа,omitempty"`
	SummaPlatezhaPlan                *Float  `xml:"СуммаПлатежаПлан" json:"СуммаПлатежаПлан,omitempty"`
	SdelkaType                       *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type DocumentPrikhodnyiKassovyiOrderOplataRowType struct {
	Key        Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	TipOplaty  *String `xml:"ТипОплаты" json:"ТипОплаты,omitempty"`
	Sum        *Float  `xml:"Сумма" json:"Сумма,omitempty"`
}

type DocumentPrikhodnyiKassovyiOrderTovaryRowType struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	StavkaNDS                      *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                       *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float  `xml:"Цена" json:"Цена,omitempty"`
	SummaSkidki                    *Float  `xml:"СуммаСкидки" json:"СуммаСкидки,omitempty"`
	VidTovaraKKT                   *String `xml:"ВидТовараККТ" json:"ВидТовараККТ,omitempty"`
	TipOplatyTovaraKKT             *String `xml:"ТипОплатыТовараККТ" json:"ТипОплатыТовараККТ,omitempty"`
	SummaOsn                       *Float  `xml:"СуммаОсн" json:"СуммаОсн,omitempty"`
	Komitent                       *String `xml:"Комитент" json:"Комитент,omitempty"`
	TelefonKomitenta               *String `xml:"ТелефонКомитента" json:"ТелефонКомитента,omitempty"`
	INNkomitenta                   *String `xml:"ИННкомитента" json:"ИННкомитента,omitempty"`
	SummaOpl                       *Float  `xml:"СуммаОпл" json:"СуммаОпл,omitempty"`
}

type DocumentVozvratMaterialovIzProizvodstvaTovaryRowType struct {
	Key                            Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float `xml:"Вес" json:"Вес,omitempty"`
	Quantity                       *Int   `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid  `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid  `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	DepartmentKey                  *Guid  `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid  `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
}

type DocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovaryRowType struct {
	Key                            Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float `xml:"Вес" json:"Вес,omitempty"`
	Quantity                       *Int   `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid  `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid  `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	Sum                            *Float `xml:"Сумма" json:"Сумма,omitempty"`
	SummaStaraia                   *Float `xml:"СуммаСтарая" json:"СуммаСтарая,omitempty"`
	KharakteristikaNomenklaturyKey *Guid  `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float `xml:"Цена" json:"Цена,omitempty"`
	TsenaZaGramm                   *Float `xml:"ЦенаЗаГрамм" json:"ЦенаЗаГрамм,omitempty"`
}

type DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliamiRowType struct {
	Key                       Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	PokupatelKey              *Guid  `xml:"Покупатель_Key" json:"Покупатель_Key,omitempty"`
	DogovorSPokupatelemKey    *Guid  `xml:"ДоговорСПокупателем_Key" json:"ДоговорСПокупателем_Key,omitempty"`
	SupplierKey               *Guid  `xml:"Поставщик_Key" json:"Поставщик_Key,omitempty"`
	DogovorSPostavshchikomKey *Guid  `xml:"ДоговорСПоставщиком_Key" json:"ДоговорСПоставщиком_Key,omitempty"`
	Sum                       *Float `xml:"Сумма" json:"Сумма,omitempty"`
	SummaSebestoimost         *Float `xml:"СуммаСебестоимость" json:"СуммаСебестоимость,omitempty"`
}

type DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannyeRowType struct {
	Key                         Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                  Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	ItemKey                     *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                 *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	PokupatelKey                *Guid   `xml:"Покупатель_Key" json:"Покупатель_Key,omitempty"`
	DogovorSPokupatelemKey      *Guid   `xml:"ДоговорСПокупателем_Key" json:"ДоговорСПокупателем_Key,omitempty"`
	SupplierKey                 *Guid   `xml:"Поставщик_Key" json:"Поставщик_Key,omitempty"`
	DogovorSPostavshchikomKey   *Guid   `xml:"ДоговорСПоставщиком_Key" json:"ДоговорСПоставщиком_Key,omitempty"`
	Quantity                    *Int    `xml:"Количество" json:"Количество,omitempty"`
	Weight                      *Float  `xml:"Вес" json:"Вес,omitempty"`
	SummaPostupleniia           *Float  `xml:"СуммаПоступления" json:"СуммаПоступления,omitempty"`
	SummaProdazhi               *Float  `xml:"СуммаПродажи" json:"СуммаПродажи,omitempty"`
	StatusRaskhoda              *String `xml:"СтатусРасхода" json:"СтатусРасхода,omitempty"`
	DokumentProdazhi            *String `xml:"ДокументПродажи" json:"ДокументПродажи,omitempty"`
	DokumentOprikhodovaniia     *String `xml:"ДокументОприходования" json:"ДокументОприходования,omitempty"`
	DokumentProdazhiType        *String `xml:"ДокументПродажи_Type" json:"ДокументПродажи_Type,omitempty"`
	DokumentOprikhodovaniiaType *String `xml:"ДокументОприходования_Type" json:"ДокументОприходования_Type,omitempty"`
}

type DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikamiRowType struct {
	Key                       Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SupplierKey               *Guid  `xml:"Поставщик_Key" json:"Поставщик_Key,omitempty"`
	DogovorSPostavshchikomKey *Guid  `xml:"ДоговорСПоставщиком_Key" json:"ДоговорСПоставщиком_Key,omitempty"`
	Sum                       *Float `xml:"Сумма" json:"Сумма,omitempty"`
	SummaSebestoimost         *Float `xml:"СуммаСебестоимость" json:"СуммаСебестоимость,omitempty"`
}

type DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakhRowType struct {
	Key                         Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                  Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	ItemKey                     *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                 *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	SupplierKey                 *Guid   `xml:"Поставщик_Key" json:"Поставщик_Key,omitempty"`
	DogovorSPostavshchikomKey   *Guid   `xml:"ДоговорСПоставщиком_Key" json:"ДоговорСПоставщиком_Key,omitempty"`
	Quantity                    *Int    `xml:"Количество" json:"Количество,omitempty"`
	Weight                      *Float  `xml:"Вес" json:"Вес,omitempty"`
	SummaPostupleniia           *Float  `xml:"СуммаПоступления" json:"СуммаПоступления,omitempty"`
	StatusRaskhoda              *String `xml:"СтатусРасхода" json:"СтатусРасхода,omitempty"`
	DokumentOprikhodovaniia     *String `xml:"ДокументОприходования" json:"ДокументОприходования,omitempty"`
	SummaPostupleniiaBezNDS     *Float  `xml:"СуммаПоступленияБезНДС" json:"СуммаПоступленияБезНДС,omitempty"`
	DokumentOprikhodovaniiaType *String `xml:"ДокументОприходования_Type" json:"ДокументОприходования_Type,omitempty"`
}

type DocumentGTDImportRazdelyRowType struct {
	Key                                    Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                             Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	NDSVValiute                            *Boolean `xml:"НДСВВалюте" json:"НДСВВалюте,omitempty"`
	PoshlinaVValiute                       *Boolean `xml:"ПошлинаВВалюте" json:"ПошлинаВВалюте,omitempty"`
	StavkaNDS                              *String  `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	StavkaPoshliny                         *Float   `xml:"СтавкаПошлины" json:"СтавкаПошлины,omitempty"`
	SummaNDS                               *Float   `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	SummaPoshliny                          *Float   `xml:"СуммаПошлины" json:"СуммаПошлины,omitempty"`
	TamozhennaiaStoimost                   *Float   `xml:"ТаможеннаяСтоимость" json:"ТаможеннаяСтоимость,omitempty"`
	TamozhennaiaStoimostVValiuteReglUcheta *Boolean `xml:"ТаможеннаяСтоимостьВВалютеРеглУчета" json:"ТаможеннаяСтоимостьВВалютеРеглУчета,omitempty"`
}

type DocumentGTDImportTovaryRowType struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	DokumentPartii                 *String `xml:"ДокументПартии" json:"ДокументПартии,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	NomerRazdela                   *Int    `xml:"НомерРаздела" json:"НомерРаздела,omitempty"`
	ProektKey                      *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	SummaNDS                       *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	SummaPoshliny                  *Float  `xml:"СуммаПошлины" json:"СуммаПошлины,omitempty"`
	FakturnaiaStoimost             *Float  `xml:"ФактурнаяСтоимость" json:"ФактурнаяСтоимость,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	DokumentPartiiType             *String `xml:"ДокументПартии_Type" json:"ДокументПартии_Type,omitempty"`
}

type DocumentAktSverkiTovaryRowType struct {
	Key                            Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	MID                            *String  `xml:"Артикул" json:"Артикул,omitempty"`
	Weight                         *Float   `xml:"Вес" json:"Вес,omitempty"`
	ZakazKlientaKey                *Guid    `xml:"ЗаказКлиента_Key" json:"ЗаказКлиента_Key,omitempty"`
	Quantity                       *Int     `xml:"Количество" json:"Количество,omitempty"`
	Koef                           *Float   `xml:"Коэф" json:"Коэф,omitempty"`
	NaborKey                       *Guid    `xml:"Набор_Key" json:"Набор_Key,omitempty"`
	Naideno                        *Boolean `xml:"Найдено" json:"Найдено,omitempty"`
	ItemKey                        *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	NomerNabora                    *Int     `xml:"НомерНабора" json:"НомерНабора,omitempty"`
	Pasport                        *String  `xml:"Паспорт" json:"Паспорт,omitempty"`
	ProektKey                      *Guid    `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	SizeKey                        *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid    `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	DepartmentKey                  *Guid    `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	StavkaNDS                      *String  `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                            *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                       *Float   `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	KharakteristikaNomenklaturyKey *Guid    `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float   `xml:"Цена" json:"Цена,omitempty"`
	Period                         *Time    `xml:"Период" json:"Период,omitempty"`
}

type CatalogFailyDopolnitelnyeRekvizityRowType struct {
	Key              Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber       Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	SvoistvoKey      *Guid   `xml:"Свойство_Key" json:"Свойство_Key,omitempty"`
	Znachenie        *String `xml:"Значение" json:"Значение,omitempty"`
	TekstovaiaStroka *String `xml:"ТекстоваяСтрока" json:"ТекстоваяСтрока,omitempty"`
	ZnachenieType    *String `xml:"Значение_Type" json:"Значение_Type,omitempty"`
}

type CatalogFailySertifikatyShifrovaniiaRowType struct {
	Key                  Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber           Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Otpechatok           *String `xml:"Отпечаток" json:"Отпечаток,omitempty"`
	Predstavlenie        *String `xml:"Представление" json:"Представление,omitempty"`
	SertifikatBase64Data *Binary `xml:"Сертификат_Base64Data" json:"Сертификат_Base64Data,omitempty"`
	SertifikatType       *String `xml:"Сертификат_Type" json:"Сертификат_Type,omitempty"`
	Sertifikat           *Binary `xml:"Сертификат" json:"Сертификат,omitempty"`
}

type CatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisiRowType struct {
	Key               Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber        Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Administrirovanie *Boolean `xml:"Администрирование" json:"Администрирование,omitempty"`
	Otpravka          *Boolean `xml:"Отправка" json:"Отправка,omitempty"`
	PolzovatelKey     *Guid    `xml:"Пользователь_Key" json:"Пользователь_Key,omitempty"`
	Transport         *Boolean `xml:"Транспорт" json:"Транспорт,omitempty"`
}

type DocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezhaRowType struct {
	Key                     Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber              Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	DogovorKontragentaKey   *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	KratnostVzaimoraschetov *Int    `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov     *Float  `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	ProektKey               *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	Sdelka                  *String `xml:"Сделка" json:"Сделка,omitempty"`
	TypeOfMovingMoneyKey    *Guid   `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov    *Float  `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	Sum                     *Float  `xml:"СуммаПлатежа" json:"СуммаПлатежа,omitempty"`
	SdelkaType              *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type DocumentSkupkaTovarovTovaryRowType struct {
	Key         Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber  Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight      *Float  `xml:"Вес" json:"Вес,omitempty"`
	ItemKey     *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	ObshchiiVes *Float  `xml:"ОбщийВес" json:"ОбщийВес,omitempty"`
	Sum         *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	TsenaZaGr   *Float  `xml:"ЦенаЗаГр" json:"ЦенаЗаГр,omitempty"`
	Opisanie    *String `xml:"Описание" json:"Описание,omitempty"`
}

type DocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliamRowType struct {
	Key                 Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber          Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	PokupatelKey        *Guid  `xml:"Покупатель_Key" json:"Покупатель_Key,omitempty"`
	SchetFakturaKey     *Guid  `xml:"СчетФактура_Key" json:"СчетФактура_Key,omitempty"`
	SubkomissionerKey   *Guid  `xml:"Субкомиссионер_Key" json:"Субкомиссионер_Key,omitempty"`
	Sum                 *Float `xml:"Сумма" json:"Сумма,omitempty"`
	NDS                 *Float `xml:"НДС" json:"НДС,omitempty"`
	SummaUvelichenie    *Float `xml:"СуммаУвеличение" json:"СуммаУвеличение,omitempty"`
	SummaUmenshenie     *Float `xml:"СуммаУменьшение" json:"СуммаУменьшение,omitempty"`
	SummaNDSUvelichenie *Float `xml:"СуммаНДСУвеличение" json:"СуммаНДСУвеличение,omitempty"`
	SummaNDSUmenshenie  *Float `xml:"СуммаНДСУменьшение" json:"СуммаНДСУменьшение,omitempty"`
}

type CatalogfmKartochkaKontragentaDannyeKontragentaRowType struct {
	Key           Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber    Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Kliuch        *String `xml:"Ключ" json:"Ключ,omitempty"`
	Znachenie     *String `xml:"Значение" json:"Значение,omitempty"`
	ZnachenieType *String `xml:"Значение_Type" json:"Значение_Type,omitempty"`
}

type DocumentSpisanieProsrochennykhSertifikatovSertifikatyRowType struct {
	Key                  Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber           Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Quantity             *Int    `xml:"Количество" json:"Количество,omitempty"`
	SertifikatKey        *Guid   `xml:"Сертификат_Key" json:"Сертификат_Key,omitempty"`
	SrokDeistviiaDo      *Time   `xml:"СрокДействияДо" json:"СрокДействияДо,omitempty"`
	Sum                  *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	OrganizatsiiaKey     *Guid   `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DokumentProdazhi     *String `xml:"ДокументПродажи" json:"ДокументПродажи,omitempty"`
	DokumentProdazhiType *String `xml:"ДокументПродажи_Type" json:"ДокументПродажи_Type,omitempty"`
}

type DocumentZakrytieAvansovPoGrafikuPlatezheiKontragentyRowType struct {
	Key                   Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber            Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	DogovorKontragentaKey *Guid `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	KontragentKey         *Guid `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
}

type DocumentAkkreditivPeredannyiRasshifrovkaPlatezhaRowType struct {
	Key                              Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                       Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	DogovorKontragentaKey            *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentPlanirovaniiaPlatezhaKey *Guid   `xml:"ДокументПланированияПлатежа_Key" json:"ДокументПланированияПлатежа_Key,omitempty"`
	KratnostVzaimoraschetov          *Int    `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov              *Float  `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	KursVzaimoraschetovPlan          *Float  `xml:"КурсВзаиморасчетовПлан" json:"КурсВзаиморасчетовПлан,omitempty"`
	ProektKey                        *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	Sdelka                           *String `xml:"Сделка" json:"Сделка,omitempty"`
	StavkaNDS                        *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	TypeOfMovingMoneyKey             *Guid   `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov             *Float  `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	SummaNDS                         *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	Sum                              *Float  `xml:"СуммаПлатежа" json:"СуммаПлатежа,omitempty"`
	SummaPlatezhaPlan                *Float  `xml:"СуммаПлатежаПлан" json:"СуммаПлатежаПлан,omitempty"`
	SdelkaType                       *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type DocumentAkkreditivPeredannyiRekvizityKontragentaRowType struct {
	Key            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Znachenie      *String `xml:"Значение" json:"Значение,omitempty"`
	Predstavlenie  *String `xml:"Представление" json:"Представление,omitempty"`
	Rekvizit       *String `xml:"Реквизит" json:"Реквизит,omitempty"`
	TipKontragenta *String `xml:"ТипКонтрагента" json:"ТипКонтрагента,omitempty"`
}

type CatalogKontragentyVidyDeiatelnostiRowType struct {
	Key                Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber         Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	VidDeiatelnostiKey *Guid `xml:"ВидДеятельности_Key" json:"ВидДеятельности_Key,omitempty"`
}

type DocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezhaRowType struct {
	Key                              Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                       Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	DogovorKontragentaKey            *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentPlanirovaniiaPlatezhaKey *Guid   `xml:"ДокументПланированияПлатежа_Key" json:"ДокументПланированияПлатежа_Key,omitempty"`
	KratnostVzaimoraschetov          *Int    `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov              *Float  `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	KursVzaimoraschetovPlan          *Float  `xml:"КурсВзаиморасчетовПлан" json:"КурсВзаиморасчетовПлан,omitempty"`
	ProektKey                        *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	Sdelka                           *String `xml:"Сделка" json:"Сделка,omitempty"`
	StavkaNDS                        *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	TypeOfMovingMoneyKey             *Guid   `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov             *Float  `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	SummaNDS                         *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	Sum                              *Float  `xml:"СуммаПлатежа" json:"СуммаПлатежа,omitempty"`
	SummaPlatezhaPlan                *Float  `xml:"СуммаПлатежаПлан" json:"СуммаПлатежаПлан,omitempty"`
	SdelkaType                       *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type DocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragentaRowType struct {
	Key            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Znachenie      *String `xml:"Значение" json:"Значение,omitempty"`
	Predstavlenie  *String `xml:"Представление" json:"Представление,omitempty"`
	Rekvizit       *String `xml:"Реквизит" json:"Реквизит,omitempty"`
	TipKontragenta *String `xml:"ТипКонтрагента" json:"ТипКонтрагента,omitempty"`
}

type DocumentMarketingovaiaAktsiiaMagazinyRowType struct {
	Key        Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	MagazinKey *Guid `xml:"Магазин_Key" json:"Магазин_Key,omitempty"`
}

type DocumentMarketingovaiaAktsiiaSkidkiNatsenkiRowType struct {
	Key               Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber        Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	DataNachala       *Time `xml:"ДатаНачала" json:"ДатаНачала,omitempty"`
	DataOkonchaniia   *Time `xml:"ДатаОкончания" json:"ДатаОкончания,omitempty"`
	MagazinKey        *Guid `xml:"Магазин_Key" json:"Магазин_Key,omitempty"`
	SkidkaNatsenkaKey *Guid `xml:"СкидкаНаценка_Key" json:"СкидкаНаценка_Key,omitempty"`
}

type DocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupaRowType struct {
	Key                  Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber           Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	NomerNabora          *Int     `xml:"НомерНабора" json:"НомерНабора,omitempty"`
	VidDostupa           *String  `xml:"ВидДоступа" json:"ВидДоступа,omitempty"`
	ZnachenieDostupa     *String  `xml:"ЗначениеДоступа" json:"ЗначениеДоступа,omitempty"`
	Chtenie              *Boolean `xml:"Чтение" json:"Чтение,omitempty"`
	Dobavlenie           *Boolean `xml:"Добавление" json:"Добавление,omitempty"`
	Izmenenie            *Boolean `xml:"Изменение" json:"Изменение,omitempty"`
	Udalenie             *Boolean `xml:"Удаление" json:"Удаление,omitempty"`
	ZnachenieDostupaType *String  `xml:"ЗначениеДоступа_Type" json:"ЗначениеДоступа_Type,omitempty"`
}

type CatalogStsenariiObmenovDannymiNastroikiObmenaRowType struct {
	Key                              Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                       Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	UzelInformatsionnoiBazy          *String `xml:"УзелИнформационнойБазы" json:"УзелИнформационнойБазы,omitempty"`
	VidTransportaObmena              *String `xml:"ВидТранспортаОбмена" json:"ВидТранспортаОбмена,omitempty"`
	VypolniaemoeDeistvie             *String `xml:"ВыполняемоеДействие" json:"ВыполняемоеДействие,omitempty"`
	KolichestvoElementovVTranzaktsii *Int    `xml:"КоличествоЭлементовВТранзакции" json:"КоличествоЭлементовВТранзакции,omitempty"`
	UzelInformatsionnoiBazyType      *String `xml:"УзелИнформационнойБазы_Type" json:"УзелИнформационнойБазы_Type,omitempty"`
}

type CatalogNomenklaturaSostavLigaturyRowType struct {
	Key        Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	Quantity   *Float `xml:"Количество" json:"Количество,omitempty"`
	ItemKey    *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
}

type DocumentOprosVoprosyRowType struct {
	Key              Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber       Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	VoprosKey        *Guid   `xml:"Вопрос_Key" json:"Вопрос_Key,omitempty"`
	Otvet            *String `xml:"Ответ" json:"Ответ,omitempty"`
	TipovoiOtvet     *String `xml:"ТиповойОтвет" json:"ТиповойОтвет,omitempty"`
	TipovoiOtvetType *String `xml:"ТиповойОтвет_Type" json:"ТиповойОтвет_Type,omitempty"`
}

type DocumentOprosSostavnoiOtvetRowType struct {
	Key                  Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber           Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	VoprosKey            *Guid   `xml:"Вопрос_Key" json:"Вопрос_Key,omitempty"`
	VoprosVladeletsKey   *Guid   `xml:"ВопросВладелец_Key" json:"ВопросВладелец_Key,omitempty"`
	NomerStrokiVTablitse *Int    `xml:"НомерСтрокиВТаблице" json:"НомерСтрокиВТаблице,omitempty"`
	Otvet                *String `xml:"Ответ" json:"Ответ,omitempty"`
	TipovoiOtvet         *String `xml:"ТиповойОтвет" json:"ТиповойОтвет,omitempty"`
	TipovoiOtvetType     *String `xml:"ТиповойОтвет_Type" json:"ТиповойОтвет_Type,omitempty"`
}

type DocumentPereotsenkaTovarovVNTTTovaryRowType struct {
	Key                            Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float   `xml:"Вес" json:"Вес,omitempty"`
	Quantity                       *Int     `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid    `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid    `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	RetailCost                     *Float   `xml:"ЦенаВРознице" json:"ЦенаВРознице,omitempty"`
	TsenaVRoznitseGr               *Float   `xml:"ЦенаВРозницеГр" json:"ЦенаВРозницеГр,omitempty"`
	TsenaVRoznitseStaraia          *Float   `xml:"ЦенаВРозницеСтарая" json:"ЦенаВРозницеСтарая,omitempty"`
	Naideno                        *Boolean `xml:"Найдено" json:"Найдено,omitempty"`
	Dnei                           *Int     `xml:"Дней" json:"Дней,omitempty"`
	DogovorKontragentaKey          *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	ProtsentUtsenki                *Float   `xml:"ПроцентУценки" json:"ПроцентУценки,omitempty"`
}

type CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGruppRowType struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	VstavkiBase64Data              *Binary `xml:"Вставки_Base64Data" json:"Вставки_Base64Data,omitempty"`
	MetallKey                      *Guid   `xml:"Металл_Key" json:"Металл_Key,omitempty"`
	Naimenovanie                   *String `xml:"Наименование" json:"Наименование,omitempty"`
	UsloviiaVkhozhdeniiaBase64Data *Binary `xml:"УсловияВхождения_Base64Data" json:"УсловияВхождения_Base64Data,omitempty"`
	VstavkiType                    *String `xml:"Вставки_Type" json:"Вставки_Type,omitempty"`
	UsloviiaVkhozhdeniiaType       *String `xml:"УсловияВхождения_Type" json:"УсловияВхождения_Type,omitempty"`
	Vstavki                        *Binary `xml:"Вставки" json:"Вставки,omitempty"`
	UsloviiaVkhozhdeniia           *Binary `xml:"УсловияВхождения" json:"УсловияВхождения,omitempty"`
}

type CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategoriiRowType struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	MiksyVstavokBase64Data         *Binary `xml:"МиксыВставок_Base64Data" json:"МиксыВставок_Base64Data,omitempty"`
	Naimenovanie                   *String `xml:"Наименование" json:"Наименование,omitempty"`
	NomenklaturnaiaGruppaKey       *Guid   `xml:"НоменклатурнаяГруппа_Key" json:"НоменклатурнаяГруппа_Key,omitempty"`
	UsloviiaVkhozhdeniiaBase64Data *Binary `xml:"УсловияВхождения_Base64Data" json:"УсловияВхождения_Base64Data,omitempty"`
	MiksyVstavokType               *String `xml:"МиксыВставок_Type" json:"МиксыВставок_Type,omitempty"`
	UsloviiaVkhozhdeniiaType       *String `xml:"УсловияВхождения_Type" json:"УсловияВхождения_Type,omitempty"`
	MiksyVstavok                   *Binary `xml:"МиксыВставок" json:"МиксыВставок,omitempty"`
	UsloviiaVkhozhdeniia           *Binary `xml:"УсловияВхождения" json:"УсловияВхождения,omitempty"`
}

type CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsiiRowType struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	SvoistvoTovara                 *String `xml:"СвойствоТовара" json:"СвойствоТовара,omitempty"`
	UsloviiaVkhozhdeniiaBase64Data *Binary `xml:"УсловияВхождения_Base64Data" json:"УсловияВхождения_Base64Data,omitempty"`
	Naimenovanie                   *String `xml:"Наименование" json:"Наименование,omitempty"`
	UsloviiaVkhozhdeniiaType       *String `xml:"УсловияВхождения_Type" json:"УсловияВхождения_Type,omitempty"`
	UsloviiaVkhozhdeniia           *Binary `xml:"УсловияВхождения" json:"УсловияВхождения,omitempty"`
}

type DocumentPeremeshchenieTovarovSertifikatyRowType struct {
	Key           Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber    Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SertifikatKey *Guid  `xml:"Сертификат_Key" json:"Сертификат_Key,omitempty"`
	Sum           *Float `xml:"Сумма" json:"Сумма,omitempty"`
}

type DocumentPeremeshchenieTovarovTovaryRowType struct {
	Key                            Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float   `xml:"Вес" json:"Вес,omitempty"`
	DokumentRezerva                *String  `xml:"ДокументРезерва" json:"ДокументРезерва,omitempty"`
	KachestvoKey                   *Guid    `xml:"Качество_Key" json:"Качество_Key,omitempty"`
	Quantity                       *Int     `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	ProtsentRoznichnoiNatsenki     *Float   `xml:"ПроцентРозничнойНаценки" json:"ПроцентРозничнойНаценки,omitempty"`
	SizeKey                        *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid    `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	StoimostBezNDS                 *Float   `xml:"СтоимостьБезНДС" json:"СтоимостьБезНДС,omitempty"`
	StoimostSNDS                   *Float   `xml:"СтоимостьСНДС" json:"СтоимостьСНДС,omitempty"`
	Sum                            *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	SummaPostupleniia              *Float   `xml:"СуммаПоступления" json:"СуммаПоступления,omitempty"`
	KharakteristikaNomenklaturyKey *Guid    `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float   `xml:"Цена" json:"Цена,omitempty"`
	TsenaVRoznitseGr               *Float   `xml:"ЦенаВРозницеГр" json:"ЦенаВРозницеГр,omitempty"`
	TsenaPostupleniia              *Float   `xml:"ЦенаПоступления" json:"ЦенаПоступления,omitempty"`
	Naideno                        *Boolean `xml:"Найдено" json:"Найдено,omitempty"`
	InternetZakazKey               *Guid    `xml:"ИнтернетЗаказ_Key" json:"ИнтернетЗаказ_Key,omitempty"`
	DokumentRezervaType            *String  `xml:"ДокументРезерва_Type" json:"ДокументРезерва_Type,omitempty"`
}

type DocumentPeremeshchenieTovarovSpisokZaiavokRowType struct {
	Key                     Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber              Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	ZaiavkaNaPeremeshchenie *String `xml:"ЗаявкаНаПеремещение" json:"ЗаявкаНаПеремещение,omitempty"`
}

type DocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstvRowType struct {
	Key                  Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber           Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	ValiutaZaiavkaKey    *Guid  `xml:"ВалютаЗаявка_Key" json:"ВалютаЗаявка_Key,omitempty"`
	ZaiavkaKey           *Guid  `xml:"Заявка_Key" json:"Заявка_Key,omitempty"`
	KontragentKey        *Guid  `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	OstatokZaiavka       *Float `xml:"ОстатокЗаявка" json:"ОстатокЗаявка,omitempty"`
	OstatokRazmeshchenie *Float `xml:"ОстатокРазмещение" json:"ОстатокРазмещение,omitempty"`
	OstatokRezerv        *Float `xml:"ОстатокРезерв" json:"ОстатокРезерв,omitempty"`
	OtvetstvennyiKey     *Guid  `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
}

type DocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentovRowType struct {
	Key                       Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	ABCKlassifikatsiia        *String `xml:"ABCКлассификация" json:"ABCКлассификация,omitempty"`
	ABCKlassifikatsiiaStaraia *String `xml:"ABCКлассификацияСтарая" json:"ABCКлассификацияСтарая,omitempty"`
	ZnachenieParametra        *Float  `xml:"ЗначениеПараметра" json:"ЗначениеПараметра,omitempty"`
	KontragentKey             *Guid   `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	MenedzherKontragentaKey   *Guid   `xml:"МенеджерКонтрагента_Key" json:"МенеджерКонтрагента_Key,omitempty"`
}

type DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikatyRowType struct {
	Key              Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber       Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SertifikatKey    *Guid  `xml:"Сертификат_Key" json:"Сертификат_Key,omitempty"`
	Sum              *Float `xml:"Сумма" json:"Сумма,omitempty"`
	SummaUchet       *Float `xml:"СуммаУчет" json:"СуммаУчет,omitempty"`
	Quantity         *Float `xml:"Количество" json:"Количество,omitempty"`
	KolichestvoUchet *Float `xml:"КоличествоУчет" json:"КоличествоУчет,omitempty"`
}

type DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsiiRowType struct {
	Key           Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber    Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	VidSravneniia *String `xml:"ВидСравнения" json:"ВидСравнения,omitempty"`
	Znachenie     *String `xml:"Значение" json:"Значение,omitempty"`
	ImiaPolia     *String `xml:"ИмяПоля" json:"ИмяПоля,omitempty"`
	ZnachenieType *String `xml:"Значение_Type" json:"Значение_Type,omitempty"`
}

type DocumentKorrektirovkaRealizatsiiTovaryRowType struct {
	Key                                           Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                                    Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	VesDoKorrektirovki                            *Float  `xml:"ВесДоКорректировки" json:"ВесДоКорректировки,omitempty"`
	VesDoIzmeneniia                               *Float  `xml:"ВесДоИзменения" json:"ВесДоИзменения,omitempty"`
	Weight                                        *Float  `xml:"Вес" json:"Вес,omitempty"`
	KolichestvoDoKorrektirovki                    *Int    `xml:"КоличествоДоКорректировки" json:"КоличествоДоКорректировки,omitempty"`
	KolichestvoDoIzmeneniia                       *Int    `xml:"КоличествоДоИзменения" json:"КоличествоДоИзменения,omitempty"`
	Quantity                                      *Int    `xml:"Количество" json:"Количество,omitempty"`
	DokumentOprikhodovaniia                       *String `xml:"ДокументОприходования" json:"ДокументОприходования,omitempty"`
	DokumentPartii                                *String `xml:"ДокументПартии" json:"ДокументПартии,omitempty"`
	KachestvoKey                                  *Guid   `xml:"Качество_Key" json:"Качество_Key,omitempty"`
	ItemKey                                       *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	Pasport                                       *String `xml:"Паспорт" json:"Паспорт,omitempty"`
	RazmerDoKorrektirovkiKey                      *Guid   `xml:"РазмерДоКорректировки_Key" json:"РазмерДоКорректировки_Key,omitempty"`
	RazmerDoIzmeneniiaKey                         *Guid   `xml:"РазмерДоИзменения_Key" json:"РазмерДоИзменения_Key,omitempty"`
	SizeKey                                       *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	SeriiaNomenklaturyDoKorrektirovkiKey          *Guid   `xml:"СерияНоменклатурыДоКорректировки_Key" json:"СерияНоменклатурыДоКорректировки_Key,omitempty"`
	SeriiaNomenklaturyDoIzmeneniiaKey             *Guid   `xml:"СерияНоменклатурыДоИзменения_Key" json:"СерияНоменклатурыДоИзменения_Key,omitempty"`
	InstanceKey                                   *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	DepartmentKey                                 *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	StavkaNDSDoKorrektirovki                      *String `xml:"СтавкаНДСДоКорректировки" json:"СтавкаНДСДоКорректировки,omitempty"`
	StavkaNDSDoIzmeneniia                         *String `xml:"СтавкаНДСДоИзменения" json:"СтавкаНДСДоИзменения,omitempty"`
	StavkaNDS                                     *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	StatusPartii                                  *String `xml:"СтатусПартии" json:"СтатусПартии,omitempty"`
	SummaDoKorrektirovki                          *Float  `xml:"СуммаДоКорректировки" json:"СуммаДоКорректировки,omitempty"`
	SummaDoIzmeneniia                             *Float  `xml:"СуммаДоИзменения" json:"СуммаДоИзменения,omitempty"`
	Sum                                           *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDSDoKorrektirovki                       *Float  `xml:"СуммаНДСДоКорректировки" json:"СуммаНДСДоКорректировки,omitempty"`
	SummaNDSDoIzmeneniia                          *Float  `xml:"СуммаНДСДоИзменения" json:"СуммаНДСДоИзменения,omitempty"`
	SummaNDS                                      *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	KharakteristikaNomenklaturyDoKorrektirovkiKey *Guid   `xml:"ХарактеристикаНоменклатурыДоКорректировки_Key" json:"ХарактеристикаНоменклатурыДоКорректировки_Key,omitempty"`
	KharakteristikaNomenklaturyDoIzmeneniiaKey    *Guid   `xml:"ХарактеристикаНоменклатурыДоИзменения_Key" json:"ХарактеристикаНоменклатурыДоИзменения_Key,omitempty"`
	KharakteristikaNomenklaturyKey                *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	TsenaDoKorrektirovki                          *Float  `xml:"ЦенаДоКорректировки" json:"ЦенаДоКорректировки,omitempty"`
	TsenaDoIzmeneniia                             *Float  `xml:"ЦенаДоИзменения" json:"ЦенаДоИзменения,omitempty"`
	Cost                                          *Float  `xml:"Цена" json:"Цена,omitempty"`
	DokumentOprikhodovaniiaType                   *String `xml:"ДокументОприходования_Type" json:"ДокументОприходования_Type,omitempty"`
	DokumentPartiiType                            *String `xml:"ДокументПартии_Type" json:"ДокументПартии_Type,omitempty"`
}

type DocumentKorrektirovkaRealizatsiiUslugiRowType struct {
	Key                        Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                 Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	KolichestvoDoKorrektirovki *Int    `xml:"КоличествоДоКорректировки" json:"КоличествоДоКорректировки,omitempty"`
	KolichestvoDoIzmeneniia    *Int    `xml:"КоличествоДоИзменения" json:"КоличествоДоИзменения,omitempty"`
	Quantity                   *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                    *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	Soderzhanie                *String `xml:"Содержание" json:"Содержание,omitempty"`
	StavkaNDSDoKorrektirovki   *String `xml:"СтавкаНДСДоКорректировки" json:"СтавкаНДСДоКорректировки,omitempty"`
	StavkaNDSDoIzmeneniia      *String `xml:"СтавкаНДСДоИзменения" json:"СтавкаНДСДоИзменения,omitempty"`
	StavkaNDS                  *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	SummaDoKorrektirovki       *Float  `xml:"СуммаДоКорректировки" json:"СуммаДоКорректировки,omitempty"`
	SummaDoIzmeneniia          *Float  `xml:"СуммаДоИзменения" json:"СуммаДоИзменения,omitempty"`
	Sum                        *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDSDoKorrektirovki    *Float  `xml:"СуммаНДСДоКорректировки" json:"СуммаНДСДоКорректировки,omitempty"`
	SummaNDSDoIzmeneniia       *Float  `xml:"СуммаНДСДоИзменения" json:"СуммаНДСДоИзменения,omitempty"`
	SummaNDS                   *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	TsenaDoKorrektirovki       *Float  `xml:"ЦенаДоКорректировки" json:"ЦенаДоКорректировки,omitempty"`
	TsenaDoIzmeneniia          *Float  `xml:"ЦенаДоИзменения" json:"ЦенаДоИзменения,omitempty"`
	Cost                       *Float  `xml:"Цена" json:"Цена,omitempty"`
}

type DocumentDoverennostTovaryRowType struct {
	Key                         Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                  Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                      *Float  `xml:"Вес" json:"Вес,omitempty"`
	EdinitsaPoKlassifikatoruKey *Guid   `xml:"ЕдиницаПоКлассификатору_Key" json:"ЕдиницаПоКлассификатору_Key,omitempty"`
	Quantity                    *Int    `xml:"Количество" json:"Количество,omitempty"`
	NaimenovanieTovara          *String `xml:"НаименованиеТовара" json:"НаименованиеТовара,omitempty"`
	SizeKey                     *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
}

type CatalogShablonyZapolneniiaKUPrazdnichnyeDniRowType struct {
	Key                       Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Den                       *Time   `xml:"День" json:"День,omitempty"`
	KU                        *Float  `xml:"КУ" json:"КУ,omitempty"`
	Opisanie                  *String `xml:"Описание" json:"Описание,omitempty"`
	TsvetFonaDliaKalendaria   *String `xml:"ЦветФонаДляКалендаря" json:"ЦветФонаДляКалендаря,omitempty"`
	TsvetTekstaDliaKalendaria *String `xml:"ЦветТекстаДляКалендаря" json:"ЦветТекстаДляКалендаря,omitempty"`
}

type CatalogShablonyZapolneniiaKUKUNaNedeliuRowType struct {
	Key        Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	DenNedeli  *Int   `xml:"ДеньНедели" json:"ДеньНедели,omitempty"`
	KU         *Float `xml:"КУ" json:"КУ,omitempty"`
}

type CatalogShablonyZapolneniiaKUSalonyRowType struct {
	Key        Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	SalonKey   *Guid `xml:"Салон_Key" json:"Салон_Key,omitempty"`
}

type DocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrinRowType struct {
	Key                           Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                    Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	TovarnaiaGruppaKey            *Guid  `xml:"ТоварнаяГруппа_Key" json:"ТоварнаяГруппа_Key,omitempty"`
	TovarnaiaKategoriiaKey        *Guid  `xml:"ТоварнаяКатегория_Key" json:"ТоварнаяКатегория_Key,omitempty"`
	TovarnaiaPozitsiiaKey         *Guid  `xml:"ТоварнаяПозиция_Key" json:"ТоварнаяПозиция_Key,omitempty"`
	TypeKey                       *Guid  `xml:"ТипИзделия_Key" json:"ТипИзделия_Key,omitempty"`
	AnalitikaTipaIzdeliiaKey      *Guid  `xml:"АналитикаТипаИзделия_Key" json:"АналитикаТипаИзделия_Key,omitempty"`
	PloshchadVykladki             *Float `xml:"ПлощадьВыкладки" json:"ПлощадьВыкладки,omitempty"`
	NormativnaiaPloshchadVykladki *Float `xml:"НормативнаяПлощадьВыкладки" json:"НормативнаяПлощадьВыкладки,omitempty"`
	KolichestvoIzdelii            *Int   `xml:"КоличествоИзделий" json:"КоличествоИзделий,omitempty"`
}

type DocumentVozvratProduktsiiVProizvodstvoTovaryRowType struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	ZakazKlientaKey                *Guid   `xml:"ЗаказКлиента_Key" json:"ЗаказКлиента_Key,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	DepartmentKey                  *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	StavkaNDS                      *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                       *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float  `xml:"Цена" json:"Цена,omitempty"`
	StoimostRabot                  *Float  `xml:"СтоимостьРабот" json:"СтоимостьРабот,omitempty"`
	StoimostVstavok                *Float  `xml:"СтоимостьВставок" json:"СтоимостьВставок,omitempty"`
	StoimostMetalla                *Float  `xml:"СтоимостьМеталла" json:"СтоимостьМеталла,omitempty"`
	SummaNDSVstavok                *Float  `xml:"СуммаНДСВставок" json:"СуммаНДСВставок,omitempty"`
	SummaNDSMetalla                *Float  `xml:"СуммаНДСМеталла" json:"СуммаНДСМеталла,omitempty"`
	SummaNDSRabot                  *Float  `xml:"СуммаНДСРабот" json:"СуммаНДСРабот,omitempty"`
	DefektKey                      *Guid   `xml:"Дефект_Key" json:"Дефект_Key,omitempty"`
	VesVstavok                     *Float  `xml:"ВесВставок" json:"ВесВставок,omitempty"`
}

type CatalogNastroikiRabochegoMestaPolzovateliaNastroikiRowType struct {
	Key                        Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                 Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Dostupnost                 *Boolean `xml:"Доступность" json:"Доступность,omitempty"`
	DostupnostPechati          *Boolean `xml:"ДоступностьПечати" json:"ДоступностьПечати,omitempty"`
	DostupnostRedaktirovaniia  *Boolean `xml:"ДоступностьРедактирования" json:"ДоступностьРедактирования,omitempty"`
	DostupnostVersionirovaniia *Boolean `xml:"ДоступностьВерсионирования" json:"ДоступностьВерсионирования,omitempty"`
	PutKElementuFormy          *String  `xml:"ПутьКЭлементуФормы" json:"ПутьКЭлементуФормы,omitempty"`
	TipObieekta                *String  `xml:"ТипОбъекта" json:"ТипОбъекта,omitempty"`
	ElementFormyRabochegoMesta *String  `xml:"ЭлементФормыРабочегоМеста" json:"ЭлементФормыРабочегоМеста,omitempty"`
}

type DocumentSpisanieTovarovTovaryRowType struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	DokumentRezerva                *String `xml:"ДокументРезерва" json:"ДокументРезерва,omitempty"`
	KachestvoKey                   *Guid   `xml:"Качество_Key" json:"Качество_Key,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	Sum                            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float  `xml:"Цена" json:"Цена,omitempty"`
	OrderKey                       *Guid   `xml:"КлючПродажи_Key" json:"КлючПродажи_Key,omitempty"`
	SkidkaNatsenkaKey              *Guid   `xml:"СкидкаНаценка_Key" json:"СкидкаНаценка_Key,omitempty"`
	DokumentRezervaType            *String `xml:"ДокументРезерва_Type" json:"ДокументРезерва_Type,omitempty"`
}

type DocumentSpisanieTovarovSertifikatyRowType struct {
	Key           Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber    Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SertifikatKey *Guid  `xml:"Сертификат_Key" json:"Сертификат_Key,omitempty"`
	Sum           *Float `xml:"Сумма" json:"Сумма,omitempty"`
}

type DocumentsmsSoobshcheniePoluchateliRowType struct {
	Key                Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber         Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Kontragent         *String `xml:"Контрагент" json:"Контрагент,omitempty"`
	NomerTelefona      *String `xml:"НомерТелефона" json:"НомерТелефона,omitempty"`
	GUID               *String `xml:"GUID" json:"GUID,omitempty"`
	TekstSoobshcheniia *String `xml:"ТекстСообщения" json:"ТекстСообщения,omitempty"`
	DataZaversheniia   *Time   `xml:"ДатаЗавершения" json:"ДатаЗавершения,omitempty"`
	Millisekunda       *Int    `xml:"Миллисекунда" json:"Миллисекунда,omitempty"`
	Status             *String `xml:"Статус" json:"Статус,omitempty"`
	OpisanieOshibki    *String `xml:"ОписаниеОшибки" json:"ОписаниеОшибки,omitempty"`
	MemberCardKey      *Guid   `xml:"ДисконтнаяКарта_Key" json:"ДисконтнаяКарта_Key,omitempty"`
}

type CatalogKalendariPlanirovaniiaProdazhKUPoDniamRowType struct {
	Key        Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	DenGoda    *Time  `xml:"ДеньГода" json:"ДеньГода,omitempty"`
	KU         *Float `xml:"КУ" json:"КУ,omitempty"`
}

type CatalogKalendariPlanirovaniiaProdazhSalonyRowType struct {
	Key        Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	SalonKey   *Guid `xml:"Салон_Key" json:"Салон_Key,omitempty"`
}

type CatalogTipovyeAnketyVoprosyAnketyRowType struct {
	Key        Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	VoprosKey  *Guid `xml:"Вопрос_Key" json:"Вопрос_Key,omitempty"`
	RazdelKey  *Guid `xml:"Раздел_Key" json:"Раздел_Key,omitempty"`
}

type DocumentNachislenieSpisanieBonusovDiskontnyeKartyRowType struct {
	Key                     Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber              Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	MemberCardKey           *Guid `xml:"ДисконтнаяКарта_Key" json:"ДисконтнаяКарта_Key,omitempty"`
	SummaBonusov            *Int  `xml:"СуммаБонусов" json:"СуммаБонусов,omitempty"`
	TekushchaiaSummaBonusov *Int  `xml:"ТекущаяСуммаБонусов" json:"ТекущаяСуммаБонусов,omitempty"`
}

type DocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezhaRowType struct {
	Key                              Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                       Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	DogovorKontragentaKey            *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentPlanirovaniiaPlatezhaKey *Guid   `xml:"ДокументПланированияПлатежа_Key" json:"ДокументПланированияПлатежа_Key,omitempty"`
	KratnostVzaimoraschetov          *Int    `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov              *Float  `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	KursVzaimoraschetovPlan          *Float  `xml:"КурсВзаиморасчетовПлан" json:"КурсВзаиморасчетовПлан,omitempty"`
	NomerPlatezha                    *Int    `xml:"НомерПлатежа" json:"НомерПлатежа,omitempty"`
	ProektKey                        *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	Sdelka                           *String `xml:"Сделка" json:"Сделка,omitempty"`
	StavkaNDS                        *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	TypeOfMovingMoneyKey             *Guid   `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov             *Float  `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	SummaNDS                         *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	Sum                              *Float  `xml:"СуммаПлатежа" json:"СуммаПлатежа,omitempty"`
	SummaPlatezhaPlan                *Float  `xml:"СуммаПлатежаПлан" json:"СуммаПлатежаПлан,omitempty"`
	SdelkaType                       *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type DocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragentaRowType struct {
	Key            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Znachenie      *String `xml:"Значение" json:"Значение,omitempty"`
	Predstavlenie  *String `xml:"Представление" json:"Представление,omitempty"`
	Rekvizit       *String `xml:"Реквизит" json:"Реквизит,omitempty"`
	TipKontragenta *String `xml:"ТипКонтрагента" json:"ТипКонтрагента,omitempty"`
}

type DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDSRowType struct {
	Key                      Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber               Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	ValiutaPostuplenieKey    *Guid  `xml:"ВалютаПоступление_Key" json:"ВалютаПоступление_Key,omitempty"`
	DokumentPlanirovaniiaKey *Guid  `xml:"ДокументПланирования_Key" json:"ДокументПланирования_Key,omitempty"`
	KontragentKey            *Guid  `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	OstatokPostuplenie       *Float `xml:"ОстатокПоступление" json:"ОстатокПоступление,omitempty"`
	OstatokRazmeshchenie     *Float `xml:"ОстатокРазмещение" json:"ОстатокРазмещение,omitempty"`
	OtvetstvennyiKey         *Guid  `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
}

type DocumentOtchetPoFinMonitoringuDokumentyFinMonitoringaRowType struct {
	Key                 Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber          Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	DokumentUcheta      *String `xml:"ДокументУчета" json:"ДокументУчета,omitempty"`
	SummaOtgruzki       *Float  `xml:"СуммаОтгрузки" json:"СуммаОтгрузки,omitempty"`
	SummaOplaty         *Float  `xml:"СуммаОплаты" json:"СуммаОплаты,omitempty"`
	Sum                 *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaVozvrata       *Float  `xml:"СуммаВозврата" json:"СуммаВозврата,omitempty"`
	Comment             *String `xml:"Комментарий" json:"Комментарий,omitempty"`
	KodVidaDokumentaKey *Guid   `xml:"КодВидаДокумента_Key" json:"КодВидаДокумента_Key,omitempty"`
	DokumentUchetaType  *String `xml:"ДокументУчета_Type" json:"ДокументУчета_Type,omitempty"`
}

type DocumentOtchetPoFinMonitoringuDannyeDokumentaRowType struct {
	Key           Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber    Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Kliuch        *String `xml:"Ключ" json:"Ключ,omitempty"`
	Znachenie     *String `xml:"Значение" json:"Значение,omitempty"`
	ZnachenieType *String `xml:"Значение_Type" json:"Значение_Type,omitempty"`
}

type CatalogVersiiFailovElektronnyePodpisiRowType struct {
	Key                    Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber             Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	DataPodpisi            *Time   `xml:"ДатаПодписи" json:"ДатаПодписи,omitempty"`
	ImiaFailaPodpisi       *String `xml:"ИмяФайлаПодписи" json:"ИмяФайлаПодписи,omitempty"`
	Comment                *String `xml:"Комментарий" json:"Комментарий,omitempty"`
	KomuVydanSertifikat    *String `xml:"КомуВыданСертификат" json:"КомуВыданСертификат,omitempty"`
	Otpechatok             *String `xml:"Отпечаток" json:"Отпечаток,omitempty"`
	PodpisBase64Data       *Binary `xml:"Подпись_Base64Data" json:"Подпись_Base64Data,omitempty"`
	UstanovivshiiPodpisKey *Guid   `xml:"УстановившийПодпись_Key" json:"УстановившийПодпись_Key,omitempty"`
	SertifikatBase64Data   *Binary `xml:"Сертификат_Base64Data" json:"Сертификат_Base64Data,omitempty"`
	PodpisType             *String `xml:"Подпись_Type" json:"Подпись_Type,omitempty"`
	SertifikatType         *String `xml:"Сертификат_Type" json:"Сертификат_Type,omitempty"`
	Podpis                 *Binary `xml:"Подпись" json:"Подпись,omitempty"`
	Sertifikat             *Binary `xml:"Сертификат" json:"Сертификат,omitempty"`
}

type DocumentUstanovkaTsenNomenklaturyTipyTsenRowType struct {
	Key        Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	TipTsenKey *Guid `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
}

type DocumentUstanovkaTsenNomenklaturyTovaryRowType struct {
	Key                            Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	ValiutaKey                     *Guid  `xml:"Валюта_Key" json:"Валюта_Key,omitempty"`
	IndeksStrokiTablitsyTsen       *Int   `xml:"ИндексСтрокиТаблицыЦен" json:"ИндексСтрокиТаблицыЦен,omitempty"`
	ItemKey                        *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	ProtsentSkidkiNatsenki         *Float `xml:"ПроцентСкидкиНаценки" json:"ПроцентСкидкиНаценки,omitempty"`
	SizeKey                        *Guid  `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid  `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	TipTsenKey                     *Guid  `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid  `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float `xml:"Цена" json:"Цена,omitempty"`
	SegmentNomenklaturyKey         *Guid  `xml:"СегментНоменклатуры_Key" json:"СегментНоменклатуры_Key,omitempty"`
}

type DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezhaRowType struct {
	Key                              Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                       Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	DogovorKontragentaKey            *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentPlanirovaniiaPlatezhaKey *Guid   `xml:"ДокументПланированияПлатежа_Key" json:"ДокументПланированияПлатежа_Key,omitempty"`
	KratnostVzaimoraschetov          *Int    `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov              *Float  `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	KursVzaimoraschetovPlan          *Float  `xml:"КурсВзаиморасчетовПлан" json:"КурсВзаиморасчетовПлан,omitempty"`
	ProektKey                        *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	Sdelka                           *String `xml:"Сделка" json:"Сделка,omitempty"`
	StavkaNDS                        *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	TypeOfMovingMoneyKey             *Guid   `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov             *Float  `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	SummaNDS                         *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	Sum                              *Float  `xml:"СуммаПлатежа" json:"СуммаПлатежа,omitempty"`
	SummaPlatezhaPlan                *Float  `xml:"СуммаПлатежаПлан" json:"СуммаПлатежаПлан,omitempty"`
	SdelkaType                       *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragentaRowType struct {
	Key            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Znachenie      *String `xml:"Значение" json:"Значение,omitempty"`
	Predstavlenie  *String `xml:"Представление" json:"Представление,omitempty"`
	Rekvizit       *String `xml:"Реквизит" json:"Реквизит,omitempty"`
	TipKontragenta *String `xml:"ТипКонтрагента" json:"ТипКонтрагента,omitempty"`
}

type DocumentPreiskurantNaSkupkuProbyRowType struct {
	Key          Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber   Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	ProbeKey     *Guid  `xml:"Проба_Key" json:"Проба_Key,omitempty"`
	TsenaZaGramm *Float `xml:"ЦенаЗаГрамм" json:"ЦенаЗаГрамм,omitempty"`
}

type DocumentPeredachaMaterialovVProizvodstvoTovaryRowType struct {
	Key                            Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float `xml:"Вес" json:"Вес,omitempty"`
	Quantity                       *Int   `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid  `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid  `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	DepartmentKey                  *Guid  `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid  `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
}

type DocumentVnutrenniiZakazTovaryRowType struct {
	Key                            Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float `xml:"Вес" json:"Вес,omitempty"`
	KachestvoKey                   *Guid  `xml:"Качество_Key" json:"Качество_Key,omitempty"`
	Quantity                       *Int   `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid  `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	RazmeshchenieKey               *Guid  `xml:"Размещение_Key" json:"Размещение_Key,omitempty"`
	InstanceKey                    *Guid  `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid  `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
}

type CatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnostRowType struct {
	Key                                       Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                                Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	DopolnitelnyeParametryObrabotkiBase64Data *Binary `xml:"ДополнительныеПараметрыОбработки_Base64Data" json:"ДополнительныеПараметрыОбработки_Base64Data,omitempty"`
	PredstavlenieKnopki                       *String `xml:"ПредставлениеКнопки" json:"ПредставлениеКнопки,omitempty"`
	PredstavlenieNastroekObrabotki            *String `xml:"ПредставлениеНастроекОбработки" json:"ПредставлениеНастроекОбработки,omitempty"`
	PredstavlenieObieekta                     *String `xml:"ПредставлениеОбъекта" json:"ПредставлениеОбъекта,omitempty"`
	SsylkaObieekta                            *String `xml:"СсылкаОбъекта" json:"СсылкаОбъекта,omitempty"`
	TablichnaiaChastImia                      *String `xml:"ТабличнаяЧастьИмя" json:"ТабличнаяЧастьИмя,omitempty"`
	TablichnaiaChastPredstavlenie             *String `xml:"ТабличнаяЧастьПредставление" json:"ТабличнаяЧастьПредставление,omitempty"`
	KhranilishcheVneshneiObrabotkiBase64Data  *Binary `xml:"ХранилищеВнешнейОбработки_Base64Data" json:"ХранилищеВнешнейОбработки_Base64Data,omitempty"`
	DopolnitelnyeParametryObrabotkiType       *String `xml:"ДополнительныеПараметрыОбработки_Type" json:"ДополнительныеПараметрыОбработки_Type,omitempty"`
	SsylkaObieektaType                        *String `xml:"СсылкаОбъекта_Type" json:"СсылкаОбъекта_Type,omitempty"`
	KhranilishcheVneshneiObrabotkiType        *String `xml:"ХранилищеВнешнейОбработки_Type" json:"ХранилищеВнешнейОбработки_Type,omitempty"`
	DopolnitelnyeParametryObrabotki           *Binary `xml:"ДополнительныеПараметрыОбработки" json:"ДополнительныеПараметрыОбработки,omitempty"`
	KhranilishcheVneshneiObrabotki            *Binary `xml:"ХранилищеВнешнейОбработки" json:"ХранилищеВнешнейОбработки,omitempty"`
}

type CatalogDopolnitelnyeVneshnieObrabotkiKomandyRowType struct {
	Key                     Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber              Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Identifikator           *String  `xml:"Идентификатор" json:"Идентификатор,omitempty"`
	VariantZapuska          *String  `xml:"ВариантЗапуска" json:"ВариантЗапуска,omitempty"`
	Predstavlenie           *String  `xml:"Представление" json:"Представление,omitempty"`
	PokazyvatOpoveshchenie  *Boolean `xml:"ПоказыватьОповещение" json:"ПоказыватьОповещение,omitempty"`
	Modifikator             *String  `xml:"Модификатор" json:"Модификатор,omitempty"`
	ReglamentnoeZadanieGUID *Guid    `xml:"РегламентноеЗаданиеGUID" json:"РегламентноеЗаданиеGUID,omitempty"`
	Skryt                   *Boolean `xml:"Скрыть" json:"Скрыть,omitempty"`
	ZameniaemyeKomandy      *String  `xml:"ЗаменяемыеКоманды" json:"ЗаменяемыеКоманды,omitempty"`
}

type CatalogDopolnitelnyeVneshnieObrabotkiRazdelyRowType struct {
	Key               Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber        Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	RazdelKey         *Guid   `xml:"Раздел_Key" json:"Раздел_Key,omitempty"`
	UdalitImiaRazdela *String `xml:"УдалитьИмяРаздела" json:"УдалитьИмяРаздела,omitempty"`
}

type CatalogDopolnitelnyeVneshnieObrabotkiNaznachenieRowType struct {
	Key                                 Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                          Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	ObieektNaznacheniiaKey              *Guid   `xml:"ОбъектНазначения_Key" json:"ОбъектНазначения_Key,omitempty"`
	UdalitPolnoeImiaObieektaMetadannykh *String `xml:"УдалитьПолноеИмяОбъектаМетаданных" json:"УдалитьПолноеИмяОбъектаМетаданных,omitempty"`
}

type CatalogDopolnitelnyeVneshnieObrabotkiRazresheniiaRowType struct {
	Key                 Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber          Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	VidRazresheniia     *String `xml:"ВидРазрешения" json:"ВидРазрешения,omitempty"`
	ParametryBase64Data *Binary `xml:"Параметры_Base64Data" json:"Параметры_Base64Data,omitempty"`
	ParametryType       *String `xml:"Параметры_Type" json:"Параметры_Type,omitempty"`
	Parametry           *Binary `xml:"Параметры" json:"Параметры,omitempty"`
}

type CatalogGruppyPolzovateleiPolzovateliGruppyRowType struct {
	Key           Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber    Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	PolzovatelKey *Guid `xml:"Пользователь_Key" json:"Пользователь_Key,omitempty"`
}

type DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovaryRowType struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	DefektKey                      *Guid   `xml:"Дефект_Key" json:"Дефект_Key,omitempty"`
	DokumentPostupleniia           *String `xml:"ДокументПоступления" json:"ДокументПоступления,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	ProektKey                      *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	StavkaNDS                      *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                       *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float  `xml:"Цена" json:"Цена,omitempty"`
	RetailCost                     *Float  `xml:"ЦенаВРознице" json:"ЦенаВРознице,omitempty"`
	DokumentPostupleniiaType       *String `xml:"ДокументПоступления_Type" json:"ДокументПоступления_Type,omitempty"`
}

type DocumentZaiavkaNaPeremeshchenieTovarovTovaryRowType struct {
	Key                            Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float `xml:"Вес" json:"Вес,omitempty"`
	KachestvoKey                   *Guid  `xml:"Качество_Key" json:"Качество_Key,omitempty"`
	Quantity                       *Int   `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	ProtsentRoznichnoiNatsenki     *Float `xml:"ПроцентРозничнойНаценки" json:"ПроцентРозничнойНаценки,omitempty"`
	SizeKey                        *Guid  `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid  `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	StoimostBezNDS                 *Float `xml:"СтоимостьБезНДС" json:"СтоимостьБезНДС,omitempty"`
	StoimostSNDS                   *Float `xml:"СтоимостьСНДС" json:"СтоимостьСНДС,omitempty"`
	Sum                            *Float `xml:"Сумма" json:"Сумма,omitempty"`
	SummaPostupleniia              *Float `xml:"СуммаПоступления" json:"СуммаПоступления,omitempty"`
	KharakteristikaNomenklaturyKey *Guid  `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float `xml:"Цена" json:"Цена,omitempty"`
	TsenaVRoznitseGr               *Float `xml:"ЦенаВРозницеГр" json:"ЦенаВРозницеГр,omitempty"`
	TsenaPostupleniia              *Float `xml:"ЦенаПоступления" json:"ЦенаПоступления,omitempty"`
}

type DocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovoraRowType struct {
	Key                   Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber            Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	DogovorKontragentaKey *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentUcheta        *String  `xml:"ДокументУчета" json:"ДокументУчета,omitempty"`
	ItogovaiaStroka       *Boolean `xml:"ИтоговаяСтрока" json:"ИтоговаяСтрока,omitempty"`
	KontragentKey         *Guid    `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	RuchnaiaKorrektirovka *Boolean `xml:"РучнаяКорректировка" json:"РучнаяКорректировка,omitempty"`
	SummaOplaty           *Float   `xml:"СуммаОплаты" json:"СуммаОплаты,omitempty"`
	SummaOtgruzki         *Float   `xml:"СуммаОтгрузки" json:"СуммаОтгрузки,omitempty"`
	SummaVozvrata         *Float   `xml:"СуммаВозврата" json:"СуммаВозврата,omitempty"`
	DokumentUchetaType    *String  `xml:"ДокументУчета_Type" json:"ДокументУчета_Type,omitempty"`
}

type CatalogUsloviiaOplatyTablitsaVyplatRowType struct {
	Key             Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber      Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	PeriodOtsrochki *Int   `xml:"ПериодОтсрочки" json:"ПериодОтсрочки,omitempty"`
	ProtsentVyplaty *Float `xml:"ПроцентВыплаты" json:"ПроцентВыплаты,omitempty"`
}

type DocumentUdalitNariadZakazIzdeliiaRowType struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	Quantity                       *Float  `xml:"Количество" json:"Количество,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	TypeKey                        *Guid   `xml:"ТипИзделия_Key" json:"ТипИзделия_Key,omitempty"`
	ProbeKey                       *Guid   `xml:"Проба_Key" json:"Проба_Key,omitempty"`
	Kommentarii                    *String `xml:"Комментарии" json:"Комментарии,omitempty"`
	VesBezVstavok                  *Float  `xml:"ВесБезВставок" json:"ВесБезВставок,omitempty"`
	NomerStrokiTCh                 *Int    `xml:"НомерСтрокиТЧ" json:"НомерСтрокиТЧ,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
}

type DocumentUdalitNariadZakazUslugiRowType struct {
	Key         Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber  Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Quantity    *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey     *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	Soderzhanie *String `xml:"Содержание" json:"Содержание,omitempty"`
	StavkaNDS   *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum         *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS    *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	Cost        *Float  `xml:"Цена" json:"Цена,omitempty"`
}

type DocumentUdalitNariadZakazSpetsifikatsiiaRowType struct {
	Key              Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber       Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight           *Float `xml:"Вес" json:"Вес,omitempty"`
	GruppaDefektaKey *Guid  `xml:"ГруппаДефекта_Key" json:"ГруппаДефекта_Key,omitempty"`
	GruppaTsvetaKey  *Guid  `xml:"ГруппаЦвета_Key" json:"ГруппаЦвета_Key,omitempty"`
	KamenKey         *Guid  `xml:"Камень_Key" json:"Камень_Key,omitempty"`
	Quantity         *Float `xml:"Количество" json:"Количество,omitempty"`
	ItemKey          *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	Razmer1          *Float `xml:"Размер1" json:"Размер1,omitempty"`
	Razmer2          *Float `xml:"Размер2" json:"Размер2,omitempty"`
	Razmer3          *Float `xml:"Размер3" json:"Размер3,omitempty"`
	RassevKey        *Guid  `xml:"Рассев_Key" json:"Рассев_Key,omitempty"`
	FormaOgrankiKey  *Guid  `xml:"ФормаОгранки_Key" json:"ФормаОгранки_Key,omitempty"`
	TsvetKamniaKey   *Guid  `xml:"ЦветКамня_Key" json:"ЦветКамня_Key,omitempty"`
	NomerStrokiTCh   *Int   `xml:"НомерСтрокиТЧ" json:"НомерСтрокиТЧ,omitempty"`
}

type DocumentUdalitNariadZakazMetallyRowType struct {
	Key        Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	ItemKey    *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	ProbeKey   *Guid   `xml:"Проба_Key" json:"Проба_Key,omitempty"`
	Weight     *String `xml:"Вес" json:"Вес,omitempty"`
}

type DocumentUdalitNariadZakazVstavkiRowType struct {
	Key              Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber       Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight           *Float `xml:"Вес" json:"Вес,omitempty"`
	GruppaDefektaKey *Guid  `xml:"ГруппаДефекта_Key" json:"ГруппаДефекта_Key,omitempty"`
	GruppaTsvetaKey  *Guid  `xml:"ГруппаЦвета_Key" json:"ГруппаЦвета_Key,omitempty"`
	KamenKey         *Guid  `xml:"Камень_Key" json:"Камень_Key,omitempty"`
	Quantity         *Float `xml:"Количество" json:"Количество,omitempty"`
	ItemKey          *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	Razmer1          *Float `xml:"Размер1" json:"Размер1,omitempty"`
	Razmer2          *Float `xml:"Размер2" json:"Размер2,omitempty"`
	Razmer3          *Float `xml:"Размер3" json:"Размер3,omitempty"`
	RassevKey        *Guid  `xml:"Рассев_Key" json:"Рассев_Key,omitempty"`
	FormaOgrankiKey  *Guid  `xml:"ФормаОгранки_Key" json:"ФормаОгранки_Key,omitempty"`
	TsvetKamniaKey   *Guid  `xml:"ЦветКамня_Key" json:"ЦветКамня_Key,omitempty"`
}

type DocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennostiRowType struct {
	Key                 Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber          Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	DataDolga           *Time  `xml:"ДатаДолга" json:"ДатаДолга,omitempty"`
	NovaiaDataDolga     *Time  `xml:"НоваяДатаДолга" json:"НоваяДатаДолга,omitempty"`
	NovaiaSummaDolga    *Float `xml:"НоваяСуммаДолга" json:"НоваяСуммаДолга,omitempty"`
	NovaiaSummaDolgaUpr *Float `xml:"НоваяСуммаДолгаУпр" json:"НоваяСуммаДолгаУпр,omitempty"`
	SummaDolga          *Float `xml:"СуммаДолга" json:"СуммаДолга,omitempty"`
	SummaDolgaUpr       *Float `xml:"СуммаДолгаУпр" json:"СуммаДолгаУпр,omitempty"`
}

type DocumentAkkreditivPoluchennyiRasshifrovkaPlatezhaRowType struct {
	Key                              Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                       Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	DogovorKontragentaKey            *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentPlanirovaniiaPlatezhaKey *Guid   `xml:"ДокументПланированияПлатежа_Key" json:"ДокументПланированияПлатежа_Key,omitempty"`
	KratnostVzaimoraschetov          *Int    `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov              *Float  `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	KursVzaimoraschetovPlan          *Float  `xml:"КурсВзаиморасчетовПлан" json:"КурсВзаиморасчетовПлан,omitempty"`
	ProektKey                        *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	Sdelka                           *String `xml:"Сделка" json:"Сделка,omitempty"`
	StavkaNDS                        *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	TypeOfMovingMoneyKey             *Guid   `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov             *Float  `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	SummaNDS                         *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	Sum                              *Float  `xml:"СуммаПлатежа" json:"СуммаПлатежа,omitempty"`
	SummaPlatezhaPlan                *Float  `xml:"СуммаПлатежаПлан" json:"СуммаПлатежаПлан,omitempty"`
	SdelkaType                       *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type DocumentAkkreditivPoluchennyiRekvizityKontragentaRowType struct {
	Key            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Znachenie      *String `xml:"Значение" json:"Значение,omitempty"`
	Predstavlenie  *String `xml:"Представление" json:"Представление,omitempty"`
	Rekvizit       *String `xml:"Реквизит" json:"Реквизит,omitempty"`
	TipKontragenta *String `xml:"ТипКонтрагента" json:"ТипКонтрагента,omitempty"`
}

type DocumentPriemIzRemontaIzdeliiaRowType struct {
	Key                            Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	ItemKey                        *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	Quantity                       *Float `xml:"Количество" json:"Количество,omitempty"`
	Weight                         *Float `xml:"Вес" json:"Вес,omitempty"`
	SizeKey                        *Guid  `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid  `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	TypeKey                        *Guid  `xml:"ТипИзделия_Key" json:"ТипИзделия_Key,omitempty"`
	ProbeKey                       *Guid  `xml:"Проба_Key" json:"Проба_Key,omitempty"`
	InstanceKey                    *Guid  `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
}

type DocumentPriemIzRemontaMaterialyRowType struct {
	Key                            Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	KliuchNomenklaturyKey          *Guid  `xml:"КлючНоменклатуры_Key" json:"КлючНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid  `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid  `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	InstanceKey                    *Guid  `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	DokumentOprikhodovaniiaKey     *Guid  `xml:"ДокументОприходования_Key" json:"ДокументОприходования_Key,omitempty"`
	Weight                         *Float `xml:"Вес" json:"Вес,omitempty"`
	Quantity                       *Int   `xml:"Количество" json:"Количество,omitempty"`
}

type DocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstvaRowType struct {
	Key                   Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber            Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	VidOtchetaPoPlatezham *String `xml:"ВидОтчетаПоПлатежам" json:"ВидОтчетаПоПлатежам,omitempty"`
	StavkaNDS             *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                   *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS              *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
}

type DocumentStornirovanieOtchetaKomissioneraOProdazhakhTovaryRowType struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	DokumentPartiiKey              *Guid   `xml:"ДокументПартии_Key" json:"ДокументПартии_Key,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	StavkaNDS                      *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaVoznagrazhdeniia          *Float  `xml:"СуммаВознаграждения" json:"СуммаВознаграждения,omitempty"`
	SummaNDS                       *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	SummaNDSVoznagrazhdeniia       *Float  `xml:"СуммаНДСВознаграждения" json:"СуммаНДСВознаграждения,omitempty"`
	SummaNDSPeredachi              *Float  `xml:"СуммаНДСПередачи" json:"СуммаНДСПередачи,omitempty"`
	SummaPeredachi                 *Float  `xml:"СуммаПередачи" json:"СуммаПередачи,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float  `xml:"Цена" json:"Цена,omitempty"`
	TsenaPeredachi                 *Float  `xml:"ЦенаПередачи" json:"ЦенаПередачи,omitempty"`
}

type CatalogfmAnketaKlientaDannyeKontragentaRowType struct {
	Key           Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber    Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Kliuch        *String `xml:"Ключ" json:"Ключ,omitempty"`
	Znachenie     *String `xml:"Значение" json:"Значение,omitempty"`
	ZnachenieType *String `xml:"Значение_Type" json:"Значение_Type,omitempty"`
}

type DocumentUstanovkaZnacheniiTochkiZakazaTovaryRowType struct {
	Key                                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	DataKon                                        *Time   `xml:"ДатаКон" json:"ДатаКон,omitempty"`
	DataNach                                       *Time   `xml:"ДатаНач" json:"ДатаНач,omitempty"`
	ZnachenieTochkiZakaza                          *Int    `xml:"ЗначениеТочкиЗаказа" json:"ЗначениеТочкиЗаказа,omitempty"`
	MinimalnyiStrakhovoiZapas                      *Int    `xml:"МинимальныйСтраховойЗапас" json:"МинимальныйСтраховойЗапас,omitempty"`
	ItemKey                                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	ProtsentnaiaStavkaZnacheniiaTochkiZakaza       *Int    `xml:"ПроцентнаяСтавкаЗначенияТочкиЗаказа" json:"ПроцентнаяСтавкаЗначенияТочкиЗаказа,omitempty"`
	ProtsentnaiaStavkaMinimalnogoStrakhovogoZapasa *Int    `xml:"ПроцентнаяСтавкаМинимальногоСтраховогоЗапаса" json:"ПроцентнаяСтавкаМинимальногоСтраховогоЗапаса,omitempty"`
	SizeKey                                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	DepartmentKey                                  *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	SposobOpredeleniiaZnacheniiaTochkiZakaza       *String `xml:"СпособОпределенияЗначенияТочкиЗаказа" json:"СпособОпределенияЗначенияТочкиЗаказа,omitempty"`
}

type CatalogPravilaProdazhTovaryRowType struct {
	Key                            Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	ItemKey                        *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	KharakteristikiNomenklaturyKey *Guid  `xml:"ХарактеристикиНоменклатуры_Key" json:"ХарактеристикиНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid  `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid  `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	Cost                           *Float `xml:"Цена" json:"Цена,omitempty"`
	Quantity                       *Int   `xml:"Количество" json:"Количество,omitempty"`
	Weight                         *Float `xml:"Вес" json:"Вес,omitempty"`
}

type DocumentPostuplenieDopRaskhodovTovaryRowType struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	DokumentPartii                 *String `xml:"ДокументПартии" json:"ДокументПартии,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	ProektKey                      *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	StavkaNDS                      *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                       *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	SummaRaspredeleniia            *Float  `xml:"СуммаРаспределения" json:"СуммаРаспределения,omitempty"`
	SummaTovara                    *Float  `xml:"СуммаТовара" json:"СуммаТовара,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	DokumentPartiiType             *String `xml:"ДокументПартии_Type" json:"ДокументПартии_Type,omitempty"`
}

type DocumentAvansovyiOtchetVydannyeAvansyRowType struct {
	Key                        Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                 Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	RaskhodnyiKassovyiOrderKey *Guid  `xml:"РасходныйКассовыйОрдер_Key" json:"РасходныйКассовыйОрдер_Key,omitempty"`
	Sum                        *Float `xml:"Сумма" json:"Сумма,omitempty"`
}

type DocumentAvansovyiOtchetTovaryRowType struct {
	Key                            Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float   `xml:"Вес" json:"Вес,omitempty"`
	VidDokVkhodiashchii            *String  `xml:"ВидДокВходящий" json:"ВидДокВходящий,omitempty"`
	DataVkhodiashchegoDokumenta    *Time    `xml:"ДатаВходящегоДокумента" json:"ДатаВходящегоДокумента,omitempty"`
	DataSF                         *Time    `xml:"ДатаСФ" json:"ДатаСФ,omitempty"`
	ZakazKlientaKey                *Guid    `xml:"ЗаказКлиента_Key" json:"ЗаказКлиента_Key,omitempty"`
	KachestvoKey                   *Guid    `xml:"Качество_Key" json:"Качество_Key,omitempty"`
	Quantity                       *Int     `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	NomerVkhodiashchegoDokumenta   *String  `xml:"НомерВходящегоДокумента" json:"НомерВходящегоДокумента,omitempty"`
	NomerSF                        *String  `xml:"НомерСФ" json:"НомерСФ,omitempty"`
	SupplierKey                    *Guid    `xml:"Поставщик_Key" json:"Поставщик_Key,omitempty"`
	PredieiavlenSF                 *Boolean `xml:"ПредъявленСФ" json:"ПредъявленСФ,omitempty"`
	ProektKey                      *Guid    `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	ProtsentRoznichnoiNatsenki     *Float   `xml:"ПроцентРозничнойНаценки" json:"ПроцентРозничнойНаценки,omitempty"`
	SizeKey                        *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid    `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	DepartmentKey                  *Guid    `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	StavkaNDS                      *String  `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                            *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                       *Float   `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	SchetFakturaKey                *Guid    `xml:"СчетФактура_Key" json:"СчетФактура_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid    `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float   `xml:"Цена" json:"Цена,omitempty"`
	RetailCost                     *Float   `xml:"ЦенаВРознице" json:"ЦенаВРознице,omitempty"`
}

type DocumentAvansovyiOtchetOplataPostavshchikamRowType struct {
	Key                          Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                   Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	VidDokVkhodiashchii          *String `xml:"ВидДокВходящий" json:"ВидДокВходящий,omitempty"`
	DataVkhodiashchegoDokumenta  *Time   `xml:"ДатаВходящегоДокумента" json:"ДатаВходящегоДокумента,omitempty"`
	DogovorKontragentaKey        *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	KontragentKey                *Guid   `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	KratnostVzaimoraschetov      *Int    `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov          *Float  `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	NomerVkhodiashchegoDokumenta *String `xml:"НомерВходящегоДокумента" json:"НомерВходящегоДокумента,omitempty"`
	Sdelka                       *String `xml:"Сделка" json:"Сделка,omitempty"`
	Soderzhanie                  *String `xml:"Содержание" json:"Содержание,omitempty"`
	Sum                          *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaVzaimoraschetov         *Float  `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	SdelkaType                   *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type DocumentAvansovyiOtchetProcheeRowType struct {
	Key                          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                   Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	VidDokVkhodiashchii          *String  `xml:"ВидДокВходящий" json:"ВидДокВходящий,omitempty"`
	DataVkhodiashchegoDokumenta  *Time    `xml:"ДатаВходящегоДокумента" json:"ДатаВходящегоДокумента,omitempty"`
	DataSF                       *Time    `xml:"ДатаСФ" json:"ДатаСФ,omitempty"`
	Zakaz                        *String  `xml:"Заказ" json:"Заказ,omitempty"`
	ItemKey                      *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	NomenklaturnaiaGruppaKey     *Guid    `xml:"НоменклатурнаяГруппа_Key" json:"НоменклатурнаяГруппа_Key,omitempty"`
	NomerVkhodiashchegoDokumenta *String  `xml:"НомерВходящегоДокумента" json:"НомерВходящегоДокумента,omitempty"`
	NomerSF                      *String  `xml:"НомерСФ" json:"НомерСФ,omitempty"`
	PodrazdelenieKey             *Guid    `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	SupplierKey                  *Guid    `xml:"Поставщик_Key" json:"Поставщик_Key,omitempty"`
	PredieiavlenSF               *Boolean `xml:"ПредъявленСФ" json:"ПредъявленСФ,omitempty"`
	ProektKey                    *Guid    `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	Soderzhanie                  *String  `xml:"Содержание" json:"Содержание,omitempty"`
	StavkaNDS                    *String  `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	StatiaZatratKey              *Guid    `xml:"СтатьяЗатрат_Key" json:"СтатьяЗатрат_Key,omitempty"`
	Sum                          *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                     *Float   `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	SchetFakturaKey              *Guid    `xml:"СчетФактура_Key" json:"СчетФактура_Key,omitempty"`
	ZakazType                    *String  `xml:"Заказ_Type" json:"Заказ_Type,omitempty"`
}

type CatalogDopolnitelnyePechatnyeFormyPrinadlezhnostRowType struct {
	Key                   Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber            Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	PredstavlenieObieekta *String `xml:"ПредставлениеОбъекта" json:"ПредставлениеОбъекта,omitempty"`
	SsylkaObieekta        *String `xml:"СсылкаОбъекта" json:"СсылкаОбъекта,omitempty"`
	SsylkaObieektaType    *String `xml:"СсылкаОбъекта_Type" json:"СсылкаОбъекта_Type,omitempty"`
}

type CatalogObrabotkiObsluzhivaniiaTOModeliRowType struct {
	Key        Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Model      *String `xml:"Модель" json:"Модель,omitempty"`
}

type CatalogNastroikaIntervalovTablichnaiaChastRowType struct {
	Key              Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber       Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	KonetsIntervala  *Int    `xml:"КонецИнтервала" json:"КонецИнтервала,omitempty"`
	NachaloIntervala *Int    `xml:"НачалоИнтервала" json:"НачалоИнтервала,omitempty"`
	Podpis           *String `xml:"Подпись" json:"Подпись,omitempty"`
}

type CatalogProfiliGruppDostupaRoliRowType struct {
	Key        Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	RolKey     *Guid `xml:"Роль_Key" json:"Роль_Key,omitempty"`
}

type CatalogProfiliGruppDostupaVidyDostupaRowType struct {
	Key               Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber        Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	VidDostupa        *String  `xml:"ВидДоступа" json:"ВидДоступа,omitempty"`
	Predustanovlennyi *Boolean `xml:"Предустановленный" json:"Предустановленный,omitempty"`
	VseRazresheny     *Boolean `xml:"ВсеРазрешены" json:"ВсеРазрешены,omitempty"`
	VidDostupaType    *String  `xml:"ВидДоступа_Type" json:"ВидДоступа_Type,omitempty"`
}

type CatalogProfiliGruppDostupaZnacheniiaDostupaRowType struct {
	Key                  Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber           Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	VidDostupa           *String `xml:"ВидДоступа" json:"ВидДоступа,omitempty"`
	ZnachenieDostupa     *String `xml:"ЗначениеДоступа" json:"ЗначениеДоступа,omitempty"`
	VidDostupaType       *String `xml:"ВидДоступа_Type" json:"ВидДоступа_Type,omitempty"`
	ZnachenieDostupaType *String `xml:"ЗначениеДоступа_Type" json:"ЗначениеДоступа_Type,omitempty"`
}

type CatalogProfiliGruppDostupaDostupPoPodsistemamRowType struct {
	Key            Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	ImiaPodsistemy *String  `xml:"ИмяПодсистемы" json:"ИмяПодсистемы,omitempty"`
	ImiaObieekta   *String  `xml:"ИмяОбъекта" json:"ИмяОбъекта,omitempty"`
	Prosmotr       *Boolean `xml:"Просмотр" json:"Просмотр,omitempty"`
	Redaktirovanie *Boolean `xml:"Редактирование" json:"Редактирование,omitempty"`
	Pechat         *Boolean `xml:"Печать" json:"Печать,omitempty"`
	PokazVersii    *Boolean `xml:"ПоказВерсии" json:"ПоказВерсии,omitempty"`
}

type CatalogNastroikiDliaKureraSostavNaimenovaniiaRowType struct {
	Key                  Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber           Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	SimvolyDo            *String `xml:"СимволыДо" json:"СимволыДо,omitempty"`
	SimvolyPosle         *String `xml:"СимволыПосле" json:"СимволыПосле,omitempty"`
	ElementNaimenovaniia *String `xml:"ЭлементНаименования" json:"ЭлементНаименования,omitempty"`
}

type DocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezhaRowType struct {
	Key                              Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                       Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	DogovorKontragentaKey            *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentPlanirovaniiaPlatezhaKey *Guid   `xml:"ДокументПланированияПлатежа_Key" json:"ДокументПланированияПлатежа_Key,omitempty"`
	KratnostVzaimoraschetov          *Int    `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov              *Float  `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	KursVzaimoraschetovPlan          *Float  `xml:"КурсВзаиморасчетовПлан" json:"КурсВзаиморасчетовПлан,omitempty"`
	NomerPlatezha                    *Int    `xml:"НомерПлатежа" json:"НомерПлатежа,omitempty"`
	ProektKey                        *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	Sdelka                           *String `xml:"Сделка" json:"Сделка,omitempty"`
	StavkaNDS                        *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	TypeOfMovingMoneyKey             *Guid   `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov             *Float  `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	SummaNDS                         *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	Sum                              *Float  `xml:"СуммаПлатежа" json:"СуммаПлатежа,omitempty"`
	SummaPlatezhaPlan                *Float  `xml:"СуммаПлатежаПлан" json:"СуммаПлатежаПлан,omitempty"`
	SdelkaType                       *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type DocumentInkassovoePorucheniePoluchennoeRekvizityKontragentaRowType struct {
	Key            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Znachenie      *String `xml:"Значение" json:"Значение,omitempty"`
	Predstavlenie  *String `xml:"Представление" json:"Представление,omitempty"`
	Rekvizit       *String `xml:"Реквизит" json:"Реквизит,omitempty"`
	TipKontragenta *String `xml:"ТипКонтрагента" json:"ТипКонтрагента,omitempty"`
}

type DocumentVozvratTovarovOtPokupateliaTovaryRowType struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	DokumentOprikhodovaniia        *String `xml:"ДокументОприходования" json:"ДокументОприходования,omitempty"`
	DokumentPartii                 *String `xml:"ДокументПартии" json:"ДокументПартии,omitempty"`
	KachestvoKey                   *Guid   `xml:"Качество_Key" json:"Качество_Key,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	Pasport                        *String `xml:"Паспорт" json:"Паспорт,omitempty"`
	PercentManualDiscount          *Float  `xml:"ПроцентРучнойСкидки" json:"ПроцентРучнойСкидки,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	Sebestoimost                   *Float  `xml:"Себестоимость" json:"Себестоимость,omitempty"`
	SebestoimostBezNDS             *Float  `xml:"СебестоимостьБезНДС" json:"СебестоимостьБезНДС,omitempty"`
	SebestoimostUpr                *Float  `xml:"СебестоимостьУпр" json:"СебестоимостьУпр,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	SumManualDiscount              *Float  `xml:"СуммаРучнойСкидки" json:"СуммаРучнойСкидки,omitempty"`
	DepartmentKey                  *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	StavkaNDS                      *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	StatusPartii                   *String `xml:"СтатусПартии" json:"СтатусПартии,omitempty"`
	Sum                            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                       *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float  `xml:"Цена" json:"Цена,omitempty"`
	OrderKey                       *Guid   `xml:"КлючПродажи_Key" json:"КлючПродажи_Key,omitempty"`
	DokumentOprikhodovaniiaType    *String `xml:"ДокументОприходования_Type" json:"ДокументОприходования_Type,omitempty"`
	DokumentPartiiType             *String `xml:"ДокументПартии_Type" json:"ДокументПартии_Type,omitempty"`
}

type DocumentVozvratTovarovOtPokupateliaUslugiRowType struct {
	Key                      Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber               Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Quantity                 *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                  *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	ProtsentOtSummuDokumenta *Float  `xml:"ПроцентОтСуммуДокумента" json:"ПроцентОтСуммуДокумента,omitempty"`
	ProtsentOtSummyDokumenta *Float  `xml:"ПроцентОтСуммыДокумента" json:"ПроцентОтСуммыДокумента,omitempty"`
	ProtsentSkidkiNatsenki   *Float  `xml:"ПроцентСкидкиНаценки" json:"ПроцентСкидкиНаценки,omitempty"`
	Soderzhanie              *String `xml:"Содержание" json:"Содержание,omitempty"`
	StavkaNDS                *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                      *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                 *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	Cost                     *Float  `xml:"Цена" json:"Цена,omitempty"`
}

type DocumentZakazPostavshchikuTovaryRowType struct {
	Key             Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber      Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight          *Float  `xml:"Вес" json:"Вес,omitempty"`
	ZakazKlientaKey *Guid   `xml:"ЗаказКлиента_Key" json:"ЗаказКлиента_Key,omitempty"`
	Quantity        *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey         *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey         *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	StavkaNDS       *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum             *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS        *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	Cost            *Float  `xml:"Цена" json:"Цена,omitempty"`
}

type CatalogSkidkiNatsenkiUsloviiaPredostavleniiaRowType struct {
	Key                       Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	UsloviePredostavleniiaKey *Guid `xml:"УсловиеПредоставления_Key" json:"УсловиеПредоставления_Key,omitempty"`
}

type CatalogSkidkiNatsenkiTsenovyeGruppyRowType struct {
	Key                     Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber              Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	TsenovaiaGruppaKey      *Guid  `xml:"ЦеноваяГруппа_Key" json:"ЦеноваяГруппа_Key,omitempty"`
	ZnachenieSkidkiNatsenki *Float `xml:"ЗначениеСкидкиНаценки" json:"ЗначениеСкидкиНаценки,omitempty"`
}

type CatalogSkidkiNatsenkiNaborPodarkovRowType struct {
	Key                            Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	ItemKey                        *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid  `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Quantity                       *Float `xml:"Количество" json:"Количество,omitempty"`
	SizeKey                        *Guid  `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid  `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
}

type CatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanieRowType struct {
	Key                     Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber              Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	VidOplatyKey            *Guid  `xml:"ВидОплаты_Key" json:"ВидОплаты_Key,omitempty"`
	ProtsentTorgovoiUstupki *Float `xml:"ПроцентТорговойУступки" json:"ПроцентТорговойУступки,omitempty"`
}

type DocumentUstanovkaTsenNomenklaturyKontragentovTipyTsenRowType struct {
	Key        Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	TipTsenKey *Guid `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
}

type DocumentUstanovkaTsenNomenklaturyKontragentovTovaryRowType struct {
	Key                            Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	ValiutaKey                     *Guid  `xml:"Валюта_Key" json:"Валюта_Key,omitempty"`
	IndeksStrokiTablitsyTsen       *Int   `xml:"ИндексСтрокиТаблицыЦен" json:"ИндексСтрокиТаблицыЦен,omitempty"`
	ItemKey                        *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid  `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	TipTsenKey                     *Guid  `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid  `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float `xml:"Цена" json:"Цена,omitempty"`
}

type DocumentProtsentPoterPoDavaltsamProtsentyRowType struct {
	Key        Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	ItemKey    *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	Protsent   *Float `xml:"Процент" json:"Процент,omitempty"`
}

type DocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezhaRowType struct {
	Key                              Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                       Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	DogovorKontragentaKey            *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentPlanirovaniiaPlatezhaKey *Guid   `xml:"ДокументПланированияПлатежа_Key" json:"ДокументПланированияПлатежа_Key,omitempty"`
	KratnostVzaimoraschetov          *Int    `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov              *Float  `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	KursVzaimoraschetovPlan          *Float  `xml:"КурсВзаиморасчетовПлан" json:"КурсВзаиморасчетовПлан,omitempty"`
	ProektKey                        *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	Sdelka                           *String `xml:"Сделка" json:"Сделка,omitempty"`
	StavkaNDS                        *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	TypeOfMovingMoneyKey             *Guid   `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov             *Float  `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	SummaNDS                         *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	Sum                              *Float  `xml:"СуммаПлатежа" json:"СуммаПлатежа,omitempty"`
	SummaPlatezhaPlan                *Float  `xml:"СуммаПлатежаПлан" json:"СуммаПлатежаПлан,omitempty"`
	SdelkaType                       *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type DocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragentaRowType struct {
	Key            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Znachenie      *String `xml:"Значение" json:"Значение,omitempty"`
	Predstavlenie  *String `xml:"Представление" json:"Представление,omitempty"`
	Rekvizit       *String `xml:"Реквизит" json:"Реквизит,omitempty"`
	TipKontragenta *String `xml:"ТипКонтрагента" json:"ТипКонтрагента,omitempty"`
}

type CatalogVidyKodirovokiIzdeliiElementyKodirovkiRowType struct {
	Key        Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Poriadok   *Int     `xml:"Порядок" json:"Порядок,omitempty"`
	Poteri     *Boolean `xml:"Потери" json:"Потери,omitempty"`
	Prais      *Boolean `xml:"Прайс" json:"Прайс,omitempty"`
	ElementKey *Guid    `xml:"Элемент_Key" json:"Элемент_Key,omitempty"`
}

type DocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedeliRowType struct {
	Key               Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber        Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	VremiaNachala     *Time    `xml:"ВремяНачала" json:"ВремяНачала,omitempty"`
	VremiaOkonchaniia *Time    `xml:"ВремяОкончания" json:"ВремяОкончания,omitempty"`
	Vybran            *Boolean `xml:"Выбран" json:"Выбран,omitempty"`
	DenNedeli         *String  `xml:"ДеньНедели" json:"ДеньНедели,omitempty"`
}

type DocumentUstanovkaSkidokNomenklaturyDiskontnyeKartyRowType struct {
	Key           Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber    Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	MemberCardKey *Guid `xml:"ДисконтнаяКарта_Key" json:"ДисконтнаяКарта_Key,omitempty"`
}

type DocumentUstanovkaSkidokNomenklaturyPoluchateliSkidkiRowType struct {
	Key            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Poluchatel     *String `xml:"Получатель" json:"Получатель,omitempty"`
	PoluchatelType *String `xml:"Получатель_Type" json:"Получатель_Type,omitempty"`
}

type DocumentUstanovkaSkidokNomenklaturyTovaryRowType struct {
	Key                        Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                 Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	ItemKey                    *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	OgranichenieSkidkiNatsenki *Float `xml:"ОграничениеСкидкиНаценки" json:"ОграничениеСкидкиНаценки,omitempty"`
	ProtsentSkidkiNatsenki     *Float `xml:"ПроцентСкидкиНаценки" json:"ПроцентСкидкиНаценки,omitempty"`
}

type CatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviiaRowType struct {
	Key               Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber        Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	DenNedeli         *String `xml:"ДеньНедели" json:"ДеньНедели,omitempty"`
	VremiaNachala     *Time   `xml:"ВремяНачала" json:"ВремяНачала,omitempty"`
	VremiaOkonchaniia *Time   `xml:"ВремяОкончания" json:"ВремяОкончания,omitempty"`
}

type CatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchateliRowType struct {
	Key            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Poluchatel     *String `xml:"Получатель" json:"Получатель,omitempty"`
	PoluchatelType *String `xml:"Получатель_Type" json:"Получатель_Type,omitempty"`
}

type CatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupkiRowType struct {
	Key             Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber      Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	ItemKey         *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	Quantity        *Float `xml:"Количество" json:"Количество,omitempty"`
	TypeKey         *Guid  `xml:"ТипИзделия_Key" json:"ТипИзделия_Key,omitempty"`
	SupplierKey     *Guid  `xml:"Поставщик_Key" json:"Поставщик_Key,omitempty"`
	ProizvoditelKey *Guid  `xml:"Производитель_Key" json:"Производитель_Key,omitempty"`
}

type DocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezhaRowType struct {
	Key                              Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                       Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	DogovorKontragentaKey            *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentPlanirovaniiaPlatezhaKey *Guid   `xml:"ДокументПланированияПлатежа_Key" json:"ДокументПланированияПлатежа_Key,omitempty"`
	KratnostVzaimoraschetov          *Int    `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov              *Float  `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	KursVzaimoraschetovPlan          *Float  `xml:"КурсВзаиморасчетовПлан" json:"КурсВзаиморасчетовПлан,omitempty"`
	ProektKey                        *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	Sdelka                           *String `xml:"Сделка" json:"Сделка,omitempty"`
	StavkaNDS                        *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	TypeOfMovingMoneyKey             *Guid   `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov             *Float  `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	SummaNDS                         *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	Sum                              *Float  `xml:"СуммаПлатежа" json:"СуммаПлатежа,omitempty"`
	SummaPlatezhaPlan                *Float  `xml:"СуммаПлатежаПлан" json:"СуммаПлатежаПлан,omitempty"`
	SdelkaType                       *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type DocumentRaskhodnyiKassovyiOrderOplataRowType struct {
	Key        Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	TipOplaty  *String `xml:"ТипОплаты" json:"ТипОплаты,omitempty"`
	Sum        *Float  `xml:"Сумма" json:"Сумма,omitempty"`
}

type DocumentRaskhodnyiKassovyiOrderTovaryRowType struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	StavkaNDS                      *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                       *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float  `xml:"Цена" json:"Цена,omitempty"`
	SummaSkidki                    *Float  `xml:"СуммаСкидки" json:"СуммаСкидки,omitempty"`
	VidTovaraKKT                   *String `xml:"ВидТовараККТ" json:"ВидТовараККТ,omitempty"`
	TipOplatyTovaraKKT             *String `xml:"ТипОплатыТовараККТ" json:"ТипОплатыТовараККТ,omitempty"`
	SummaOsn                       *Float  `xml:"СуммаОсн" json:"СуммаОсн,omitempty"`
	Komitent                       *String `xml:"Комитент" json:"Комитент,omitempty"`
	TelefonKomitenta               *String `xml:"ТелефонКомитента" json:"ТелефонКомитента,omitempty"`
	INNkomitenta                   *String `xml:"ИННкомитента" json:"ИННкомитента,omitempty"`
	SummaOpl                       *Float  `xml:"СуммаОпл" json:"СуммаОпл,omitempty"`
}

type DocumentSchetNaOplatuPostavshchikaTovaryRowType struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	StavkaNDS                      *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                       *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float  `xml:"Цена" json:"Цена,omitempty"`
}

type DocumentSchetNaOplatuPostavshchikaUslugiRowType struct {
	Key         Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber  Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Quantity    *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey     *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	Soderzhanie *String `xml:"Содержание" json:"Содержание,omitempty"`
	StavkaNDS   *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum         *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS    *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	Cost        *Float  `xml:"Цена" json:"Цена,omitempty"`
}

type DocumentReestrSpetssviazKlientyRowType struct {
	Key           Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber    Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	KontragentKey *Guid   `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	Adres         *String `xml:"Адрес" json:"Адрес,omitempty"`
	Telefon       *String `xml:"Телефон" json:"Телефон,omitempty"`
	Weight        *Float  `xml:"Вес" json:"Вес,omitempty"`
	Sum           *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	Paket         *String `xml:"Пакет" json:"Пакет,omitempty"`
	SummaPropisiu *String `xml:"СуммаПрописью" json:"СуммаПрописью,omitempty"`
	GabarityKey   *Guid   `xml:"Габариты_Key" json:"Габариты_Key,omitempty"`
}

type DocumentVvodNachalnykhOstatkovVzaimoraschetyRowType struct {
	Key                   Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber            Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	DogovorKontragentaKey *Guid  `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	KontragentKey         *Guid  `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	Sum                   *Float `xml:"Сумма" json:"Сумма,omitempty"`
}

type DocumentVvodNachalnykhOstatkovTovaryRowType struct {
	Key                            Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float   `xml:"Вес" json:"Вес,omitempty"`
	DokumentOprikhodovaniiaKey     *Guid    `xml:"ДокументОприходования_Key" json:"ДокументОприходования_Key,omitempty"`
	DokumentProdazhiKey            *Guid    `xml:"ДокументПродажи_Key" json:"ДокументПродажи_Key,omitempty"`
	KachestvoKey                   *Guid    `xml:"Качество_Key" json:"Качество_Key,omitempty"`
	Quantity                       *Float   `xml:"Количество" json:"Количество,omitempty"`
	Comment                        *String  `xml:"Комментарий" json:"Комментарий,omitempty"`
	NDSVkliuchenVStoimost          *Boolean `xml:"НДСВключенВСтоимость" json:"НДСВключенВСтоимость,omitempty"`
	ItemKey                        *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	NomerGTDKey                    *Guid    `xml:"НомерГТД_Key" json:"НомерГТД_Key,omitempty"`
	Pasport                        *String  `xml:"Паспорт" json:"Паспорт,omitempty"`
	ProtsentRoznichnoiNatsenki     *Float   `xml:"ПроцентРозничнойНаценки" json:"ПроцентРозничнойНаценки,omitempty"`
	ProtsentSkidkiNatsenki         *Float   `xml:"ПроцентСкидкиНаценки" json:"ПроцентСкидкиНаценки,omitempty"`
	SizeKey                        *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid    `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	StavkaNDS                      *String  `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	StavkaNDSProdazhi              *String  `xml:"СтавкаНДСПродажи" json:"СтавкаНДСПродажи,omitempty"`
	StatusPartii                   *String  `xml:"СтатусПартии" json:"СтатусПартии,omitempty"`
	StranaProiskhozhdeniiaKey      *Guid    `xml:"СтранаПроисхождения_Key" json:"СтранаПроисхождения_Key,omitempty"`
	Sum                            *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                       *Float   `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	SummaNDSProdazhi               *Float   `xml:"СуммаНДСПродажи" json:"СуммаНДСПродажи,omitempty"`
	SummaProdazhi                  *Float   `xml:"СуммаПродажи" json:"СуммаПродажи,omitempty"`
	SummaProdazhiBezSkidok         *Float   `xml:"СуммаПродажиБезСкидок" json:"СуммаПродажиБезСкидок,omitempty"`
	KharakteristikaNomenklaturyKey *Guid    `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float   `xml:"Цена" json:"Цена,omitempty"`
	RetailCost                     *Float   `xml:"ЦенаВРознице" json:"ЦенаВРознице,omitempty"`
	TsenaVRoznitseGr               *Float   `xml:"ЦенаВРозницеГр" json:"ЦенаВРозницеГр,omitempty"`
	TsenaProdazhi                  *Float   `xml:"ЦенаПродажи" json:"ЦенаПродажи,omitempty"`
	StatusRaskhoda                 *String  `xml:"СтатусРасхода" json:"СтатусРасхода,omitempty"`
}

type DocumentOprikhodovanieTovarovTovaryRowType struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	KachestvoKey                   *Guid   `xml:"Качество_Key" json:"Качество_Key,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	Pasport                        *String `xml:"Паспорт" json:"Паспорт,omitempty"`
	ProtsentRoznichnoiNatsenki     *Float  `xml:"ПроцентРозничнойНаценки" json:"ПроцентРозничнойНаценки,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	Sum                            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaRegl                      *Float  `xml:"СуммаРегл" json:"СуммаРегл,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float  `xml:"Цена" json:"Цена,omitempty"`
	RetailCost                     *Float  `xml:"ЦенаВРознице" json:"ЦенаВРознице,omitempty"`
	TsenaVRoznitseGr               *Float  `xml:"ЦенаВРозницеГр" json:"ЦенаВРозницеГр,omitempty"`
}

type DocumentOprikhodovanieTovarovSertifikatyRowType struct {
	Key           Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber    Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SertifikatKey *Guid  `xml:"Сертификат_Key" json:"Сертификат_Key,omitempty"`
	Sum           *Float `xml:"Сумма" json:"Сумма,omitempty"`
}

type DocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovaryRowType struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	StavkaNDS                      *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                       *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	SummaStaraia                   *Float  `xml:"СуммаСтарая" json:"СуммаСтарая,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float  `xml:"Цена" json:"Цена,omitempty"`
	TsenaZaGramm                   *Float  `xml:"ЦенаЗаГрамм" json:"ЦенаЗаГрамм,omitempty"`
}

type DocumentElektronnoePismoKomuTChRowType struct {
	Key                    Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber             Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	AdresElektronnoiPochty *String `xml:"АдресЭлектроннойПочты" json:"АдресЭлектроннойПочты,omitempty"`
	Predstavlenie          *String `xml:"Представление" json:"Представление,omitempty"`
}

type DocumentElektronnoePismoKopiiTChRowType struct {
	Key                    Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber             Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	AdresElektronnoiPochty *String `xml:"АдресЭлектроннойПочты" json:"АдресЭлектроннойПочты,omitempty"`
	Predstavlenie          *String `xml:"Представление" json:"Представление,omitempty"`
}

type DocumentElektronnoePismoSkrytyeKopiiTChRowType struct {
	Key                    Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber             Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	AdresElektronnoiPochty *String `xml:"АдресЭлектроннойПочты" json:"АдресЭлектроннойПочты,omitempty"`
	Predstavlenie          *String `xml:"Представление" json:"Представление,omitempty"`
}

type CatalogfmAnketaKlientaBenefitsariiaDannyeKontragentaRowType struct {
	Key           Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber    Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Kliuch        *String `xml:"Ключ" json:"Ключ,omitempty"`
	Znachenie     *String `xml:"Значение" json:"Значение,omitempty"`
	ZnachenieType *String `xml:"Значение_Type" json:"Значение_Type,omitempty"`
}

type CatalogPravilaTsenoobrazovaniiaTsenovyeGruppyRowType struct {
	Key                Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber         Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	TsenovaiaGruppaKey *Guid `xml:"ЦеноваяГруппа_Key" json:"ЦеноваяГруппа_Key,omitempty"`
	VidTsenKey         *Guid `xml:"ВидЦен_Key" json:"ВидЦен_Key,omitempty"`
}

type DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovaryRowType struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	EdinitsaIzmereniiaKey          *Guid   `xml:"ЕдиницаИзмерения_Key" json:"ЕдиницаИзмерения_Key,omitempty"`
	KachestvoKey                   *Guid   `xml:"Качество_Key" json:"Качество_Key,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	Koef                           *Float  `xml:"Коэф" json:"Коэф,omitempty"`
	Koeffitsient                   *Float  `xml:"Коэффициент" json:"Коэффициент,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	Pasport                        *String `xml:"Паспорт" json:"Паспорт,omitempty"`
	ProektKey                      *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	ProtsentRoznichnoiNatsenki     *Float  `xml:"ПроцентРозничнойНаценки" json:"ПроцентРозничнойНаценки,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	StavkaNDS                      *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                       *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float  `xml:"Цена" json:"Цена,omitempty"`
	RetailCost                     *Float  `xml:"ЦенаВРознице" json:"ЦенаВРознице,omitempty"`
	TsenaVRoznitseGr               *Float  `xml:"ЦенаВРозницеГр" json:"ЦенаВРозницеГр,omitempty"`
}

type DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugiRowType struct {
	Key                      Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber               Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Quantity                 *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                  *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	NomenklaturnaiaGruppaKey *Guid   `xml:"НоменклатурнаяГруппа_Key" json:"НоменклатурнаяГруппа_Key,omitempty"`
	PodrazdelenieKey         *Guid   `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	ProektKey                *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	Soderzhanie              *String `xml:"Содержание" json:"Содержание,omitempty"`
	StavkaNDS                *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	StatiaZatratKey          *Guid   `xml:"СтатьяЗатрат_Key" json:"СтатьяЗатрат_Key,omitempty"`
	Sum                      *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                 *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	Cost                     *Float  `xml:"Цена" json:"Цена,omitempty"`
}

type CatalogGruppyDostupaPolzovateliRowType struct {
	Key            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Polzovatel     *String `xml:"Пользователь" json:"Пользователь,omitempty"`
	PolzovatelType *String `xml:"Пользователь_Type" json:"Пользователь_Type,omitempty"`
}

type CatalogGruppyDostupaVidyDostupaRowType struct {
	Key            Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	VidDostupa     *String  `xml:"ВидДоступа" json:"ВидДоступа,omitempty"`
	VseRazresheny  *Boolean `xml:"ВсеРазрешены" json:"ВсеРазрешены,omitempty"`
	VidDostupaType *String  `xml:"ВидДоступа_Type" json:"ВидДоступа_Type,omitempty"`
}

type CatalogGruppyDostupaZnacheniiaDostupaRowType struct {
	Key                  Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber           Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	VidDostupa           *String `xml:"ВидДоступа" json:"ВидДоступа,omitempty"`
	ZnachenieDostupa     *String `xml:"ЗначениеДоступа" json:"ЗначениеДоступа,omitempty"`
	VidDostupaType       *String `xml:"ВидДоступа_Type" json:"ВидДоступа_Type,omitempty"`
	ZnachenieDostupaType *String `xml:"ЗначениеДоступа_Type" json:"ЗначениеДоступа_Type,omitempty"`
}

type CatalogGruppyDostupaDostupPoPodsistemamRowType struct {
	Key            Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	ImiaPodsistemy *String  `xml:"ИмяПодсистемы" json:"ИмяПодсистемы,omitempty"`
	ImiaObieekta   *String  `xml:"ИмяОбъекта" json:"ИмяОбъекта,omitempty"`
	Prosmotr       *Boolean `xml:"Просмотр" json:"Просмотр,omitempty"`
	Redaktirovanie *Boolean `xml:"Редактирование" json:"Редактирование,omitempty"`
	Pechat         *Boolean `xml:"Печать" json:"Печать,omitempty"`
	PokazVersii    *Boolean `xml:"ПоказВерсии" json:"ПоказВерсии,omitempty"`
}

type DocumentReestrSchetovReestrRowType struct {
	Key            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	VidTransporta  *String `xml:"ВидТранспорта" json:"ВидТранспорта,omitempty"`
	DataOtgruzki   *Time   `xml:"ДатаОтгрузки" json:"ДатаОтгрузки,omitempty"`
	NomerDokumenta *String `xml:"НомерДокумента" json:"НомерДокумента,omitempty"`
	Sum            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
}

type DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovaryRowType struct {
	Key                            Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float `xml:"Вес" json:"Вес,omitempty"`
	VesUchet                       *Float `xml:"ВесУчет" json:"ВесУчет,omitempty"`
	Quantity                       *Int   `xml:"Количество" json:"Количество,omitempty"`
	KolichestvoUchet               *Int   `xml:"КоличествоУчет" json:"КоличествоУчет,omitempty"`
	ItemKey                        *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid  `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid  `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid  `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
}

type CatalogNastroikiRMKPoriadokPrimeneniiaSkidokRowType struct {
	Key           Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber    Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	UslovieSkidki *String `xml:"УсловиеСкидки" json:"УсловиеСкидки,omitempty"`
}

type CatalogNastroikiRMKSostavNaimenovaniiaRowType struct {
	Key                  Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber           Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	SimvolyDo            *String `xml:"СимволыДо" json:"СимволыДо,omitempty"`
	SimvolyPosle         *String `xml:"СимволыПосле" json:"СимволыПосле,omitempty"`
	ElementNaimenovaniia *String `xml:"ЭлементНаименования" json:"ЭлементНаименования,omitempty"`
}

type CatalogKharakteristikiNomenklaturySpetsifikatsiiaRowType struct {
	Key              Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber       Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight           *Float `xml:"Вес" json:"Вес,omitempty"`
	GruppaDefektaKey *Guid  `xml:"ГруппаДефекта_Key" json:"ГруппаДефекта_Key,omitempty"`
	GruppaTsvetaKey  *Guid  `xml:"ГруппаЦвета_Key" json:"ГруппаЦвета_Key,omitempty"`
	KamenKey         *Guid  `xml:"Камень_Key" json:"Камень_Key,omitempty"`
	Quantity         *Float `xml:"Количество" json:"Количество,omitempty"`
	ItemKey          *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	Razmer1          *Float `xml:"Размер1" json:"Размер1,omitempty"`
	Razmer2          *Float `xml:"Размер2" json:"Размер2,omitempty"`
	Razmer3          *Float `xml:"Размер3" json:"Размер3,omitempty"`
	RassevKey        *Guid  `xml:"Рассев_Key" json:"Рассев_Key,omitempty"`
	FormaOgrankiKey  *Guid  `xml:"ФормаОгранки_Key" json:"ФормаОгранки_Key,omitempty"`
	TsvetKamniaKey   *Guid  `xml:"ЦветКамня_Key" json:"ЦветКамня_Key,omitempty"`
}

type DocumentOtborTovarovTovaryRowType struct {
	Key                                        Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                                 Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                                     *Float  `xml:"Вес" json:"Вес,omitempty"`
	ZnachenieUsloviiaAvtomaticheskoiSkidki     *String `xml:"ЗначениеУсловияАвтоматическойСкидки" json:"ЗначениеУсловияАвтоматическойСкидки,omitempty"`
	Quantity                                   *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                                    *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	PercentAutoDiscount                        *Float  `xml:"ПроцентАвтоматическойСкидки" json:"ПроцентАвтоматическойСкидки,omitempty"`
	PercentManualDiscount                      *Float  `xml:"ПроцентРучнойСкидки" json:"ПроцентРучнойСкидки,omitempty"`
	SizeKey                                    *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                                *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	StavkaNDS                                  *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                                        *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                                   *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	UslovieAvtomaticheskoiSkidki               *String `xml:"УсловиеАвтоматическойСкидки" json:"УсловиеАвтоматическойСкидки,omitempty"`
	KharakteristikaNomenklaturyKey             *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                                       *Float  `xml:"Цена" json:"Цена,omitempty"`
	SumManualDiscount                          *Float  `xml:"СуммаРучнойСкидки" json:"СуммаРучнойСкидки,omitempty"`
	SumAutoDiscount                            *Float  `xml:"СуммаАвтоматическойСкидки" json:"СуммаАвтоматическойСкидки,omitempty"`
	ZnachenieUsloviiaAvtomaticheskoiSkidkiType *String `xml:"ЗначениеУсловияАвтоматическойСкидки_Type" json:"ЗначениеУсловияАвтоматическойСкидки_Type,omitempty"`
}

type DocumentOtborTovarovTovaryKOtboruRowType struct {
	Key         Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber  Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight      *Float `xml:"Вес" json:"Вес,omitempty"`
	Quantity    *Int   `xml:"Количество" json:"Количество,omitempty"`
	ItemKey     *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey     *Guid  `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey *Guid  `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
}

type CatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizyRowType struct {
	Key                       Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	RelizIuvelirnogoSalonaKey *Guid `xml:"РелизЮвелирногоСалона_Key" json:"РелизЮвелирногоСалона_Key,omitempty"`
}

type DocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstvaRowType struct {
	Key                   Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber            Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	VidOtchetaPoPlatezham *String `xml:"ВидОтчетаПоПлатежам" json:"ВидОтчетаПоПлатежам,omitempty"`
	StavkaNDS             *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                   *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS              *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
}

type DocumentOtchetKomissioneraOProdazhakhTovaryRowType struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	StavkaNDS                      *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaVoznagrazhdeniia          *Float  `xml:"СуммаВознаграждения" json:"СуммаВознаграждения,omitempty"`
	SummaNDS                       *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	SummaNDSVoznagrazhdeniia       *Float  `xml:"СуммаНДСВознаграждения" json:"СуммаНДСВознаграждения,omitempty"`
	SummaNDSPeredachi              *Float  `xml:"СуммаНДСПередачи" json:"СуммаНДСПередачи,omitempty"`
	SummaPeredachi                 *Float  `xml:"СуммаПередачи" json:"СуммаПередачи,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float  `xml:"Цена" json:"Цена,omitempty"`
	TsenaPeredachi                 *Float  `xml:"ЦенаПередачи" json:"ЦенаПередачи,omitempty"`
	DataSchetaFakturyKomissionera  *Time   `xml:"ДатаСчетаФактурыКомиссионера" json:"ДатаСчетаФактурыКомиссионера,omitempty"`
	PokupatelKey                   *Guid   `xml:"Покупатель_Key" json:"Покупатель_Key,omitempty"`
	NomerSchetaFakturyKomissionera *String `xml:"НомерСчетаФактурыКомиссионера" json:"НомерСчетаФактурыКомиссионера,omitempty"`
}

type CatalogFiltryDliaElektronnykhPisemDeistviiaFiltraRowType struct {
	Key            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	GruppaPisemKey *Guid   `xml:"ГруппаПисем_Key" json:"ГруппаПисем_Key,omitempty"`
	DeistvieFiltra *String `xml:"ДействиеФильтра" json:"ДействиеФильтра,omitempty"`
}

type CatalogFiltryDliaElektronnykhPisemUsloviiaFiltraRowType struct {
	Key                Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber         Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	ZnachenieUsloviia  *String  `xml:"ЗначениеУсловия" json:"ЗначениеУсловия,omitempty"`
	OtritsanieUsloviia *Boolean `xml:"ОтрицаниеУсловия" json:"ОтрицаниеУсловия,omitempty"`
	Uslovie            *String  `xml:"Условие" json:"Условие,omitempty"`
}

type DocumentPreiskurantTsenNaTsvKamniTablitsaRowType struct {
	Key             Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber      Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	Razmer1Do       *Float `xml:"Размер1До" json:"Размер1До,omitempty"`
	Razmer1Ot       *Float `xml:"Размер1От" json:"Размер1От,omitempty"`
	RassevKey       *Guid  `xml:"Рассев_Key" json:"Рассев_Key,omitempty"`
	FormaOgrankiKey *Guid  `xml:"ФормаОгранки_Key" json:"ФормаОгранки_Key,omitempty"`
	TsvetKamniaKey  *Guid  `xml:"ЦветКамня_Key" json:"ЦветКамня_Key,omitempty"`
	Cost            *Int   `xml:"Цена" json:"Цена,omitempty"`
}

type DocumentTelemarketingUchastnikiRowType struct {
	Key                     Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber              Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	KontragentKey           *Guid    `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	NaimenovaniePolnoe      *String  `xml:"НаименованиеПолное" json:"НаименованиеПолное,omitempty"`
	KontaktnoeLitsoKey      *Guid    `xml:"КонтактноеЛицо_Key" json:"КонтактноеЛицо_Key,omitempty"`
	Telefon                 *String  `xml:"Телефон" json:"Телефон,omitempty"`
	RezultatObrabotkiZvonka *String  `xml:"РезультатОбработкиЗвонка" json:"РезультатОбработкиЗвонка,omitempty"`
	EstInteres              *Boolean `xml:"ЕстьИнтерес" json:"ЕстьИнтерес,omitempty"`
	SobytieKey              *Guid    `xml:"Событие_Key" json:"Событие_Key,omitempty"`
	OprosKey                *Guid    `xml:"Опрос_Key" json:"Опрос_Key,omitempty"`
	Opisanie                *String  `xml:"Описание" json:"Описание,omitempty"`
}

type DocumentRassylkaAnketVlozheniiaRowType struct {
	Key                 Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber          Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	VlozhenieBase64Data *Binary `xml:"Вложение_Base64Data" json:"Вложение_Base64Data,omitempty"`
	ImiaFaila           *String `xml:"ИмяФайла" json:"ИмяФайла,omitempty"`
	VlozhenieType       *String `xml:"Вложение_Type" json:"Вложение_Type,omitempty"`
	Vlozhenie           *Binary `xml:"Вложение" json:"Вложение,omitempty"`
}

type DocumentRassylkaAnketPoluchateliRowType struct {
	Key         Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber  Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Obieekt     *String `xml:"Объект" json:"Объект,omitempty"`
	Poluchatel  *String `xml:"Получатель" json:"Получатель,omitempty"`
	ObieektType *String `xml:"Объект_Type" json:"Объект_Type,omitempty"`
}

type CatalogSkhemyRealizatsiiEtapySkhemyRowType struct {
	Key                       Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	DogovorPokupkiKey         *Guid    `xml:"ДоговорПокупки_Key" json:"ДоговорПокупки_Key,omitempty"`
	DogovorProdazhiKey        *Guid    `xml:"ДоговорПродажи_Key" json:"ДоговорПродажи_Key,omitempty"`
	ZnachenieNatsenki         *String  `xml:"ЗначениеНаценки" json:"ЗначениеНаценки,omitempty"`
	KontragentPokupatelKey    *Guid    `xml:"КонтрагентПокупатель_Key" json:"КонтрагентПокупатель_Key,omitempty"`
	KontragentProdavetsKey    *Guid    `xml:"КонтрагентПродавец_Key" json:"КонтрагентПродавец_Key,omitempty"`
	OkrugliatVBolshuiuStoronu *Boolean `xml:"ОкруглятьВБольшуюСторону" json:"ОкруглятьВБольшуюСторону,omitempty"`
	OrganizatsiiaPokupatelKey *Guid    `xml:"ОрганизацияПокупатель_Key" json:"ОрганизацияПокупатель_Key,omitempty"`
	OrganizatsiiaProdavetsKey *Guid    `xml:"ОрганизацияПродавец_Key" json:"ОрганизацияПродавец_Key,omitempty"`
	PoriadokOkrugleniia       *String  `xml:"ПорядокОкругления" json:"ПорядокОкругления,omitempty"`
	SposobNatsenki            *Int     `xml:"СпособНаценки" json:"СпособНаценки,omitempty"`
	TipNatsenki               *Int     `xml:"ТипНаценки" json:"ТипНаценки,omitempty"`
	ZnachenieNatsenkiType     *String  `xml:"ЗначениеНаценки_Type" json:"ЗначениеНаценки_Type,omitempty"`
}

type DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentovRowType struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	XYZKlassifikatsiia             *String `xml:"XYZКлассификация" json:"XYZКлассификация,omitempty"`
	XYZKlassifikatsiiaStaraia      *String `xml:"XYZКлассификацияСтарая" json:"XYZКлассификацияСтарая,omitempty"`
	ZnachenieParametra             *Float  `xml:"ЗначениеПараметра" json:"ЗначениеПараметра,omitempty"`
	IndeksSortirovki               *Int    `xml:"ИндексСортировки" json:"ИндексСортировки,omitempty"`
	KolichestvoDokumentov          *Int    `xml:"КоличествоДокументов" json:"КоличествоДокументов,omitempty"`
	KontragentKey                  *Guid   `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	KoeffitsientVariatsii          *Float  `xml:"КоэффициентВариации" json:"КоэффициентВариации,omitempty"`
	MenedzherKontragentaKey        *Guid   `xml:"МенеджерКонтрагента_Key" json:"МенеджерКонтрагента_Key,omitempty"`
	StadiiaVzaimootnoshenii        *String `xml:"СтадияВзаимоотношений" json:"СтадияВзаимоотношений,omitempty"`
	StadiiaVzaimootnosheniiStaraia *String `xml:"СтадияВзаимоотношенийСтарая" json:"СтадияВзаимоотношенийСтарая,omitempty"`
}

type DocumentZakazKlientaTovaryRowType struct {
	Key                                        Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                                 Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                                     *Float  `xml:"Вес" json:"Вес,omitempty"`
	ZnachenieUsloviiaAvtomaticheskoiSkidki     *String `xml:"ЗначениеУсловияАвтоматическойСкидки" json:"ЗначениеУсловияАвтоматическойСкидки,omitempty"`
	Quantity                                   *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                                    *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	PercentAutoDiscount                        *Float  `xml:"ПроцентАвтоматическойСкидки" json:"ПроцентАвтоматическойСкидки,omitempty"`
	PercentManualDiscount                      *Float  `xml:"ПроцентРучнойСкидки" json:"ПроцентРучнойСкидки,omitempty"`
	SizeKey                                    *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	Razmestit                                  *Int    `xml:"Разместить" json:"Разместить,omitempty"`
	Rezervirovat                               *Int    `xml:"Резервировать" json:"Резервировать,omitempty"`
	StavkaNDS                                  *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                                        *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                                   *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	UslovieAvtomaticheskoiSkidki               *String `xml:"УсловиеАвтоматическойСкидки" json:"УсловиеАвтоматическойСкидки,omitempty"`
	Cost                                       *Float  `xml:"Цена" json:"Цена,omitempty"`
	InstanceKey                                *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	SumAutoDiscount                            *Float  `xml:"СуммаАвтоматическойСкидки" json:"СуммаАвтоматическойСкидки,omitempty"`
	SumManualDiscount                          *Float  `xml:"СуммаРучнойСкидки" json:"СуммаРучнойСкидки,omitempty"`
	KharakteristikaNomenklaturyKey             *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	ZnachenieUsloviiaAvtomaticheskoiSkidkiType *String `xml:"ЗначениеУсловияАвтоматическойСкидки_Type" json:"ЗначениеУсловияАвтоматическойСкидки_Type,omitempty"`
}

type DocumentPostuplenieProduktsiiIzProizvodstvaTovaryRowType struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	VesPoter                       *Float  `xml:"ВесПотерь" json:"ВесПотерь,omitempty"`
	ZakazKlientaKey                *Guid   `xml:"ЗаказКлиента_Key" json:"ЗаказКлиента_Key,omitempty"`
	KachestvoKey                   *Guid   `xml:"Качество_Key" json:"Качество_Key,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	Pasport                        *String `xml:"Паспорт" json:"Паспорт,omitempty"`
	ProtsentPoter                  *Float  `xml:"ПроцентПотерь" json:"ПроцентПотерь,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	DepartmentKey                  *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	StavkaNDS                      *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	StoimostVstavok                *Float  `xml:"СтоимостьВставок" json:"СтоимостьВставок,omitempty"`
	StoimostMetalla                *Float  `xml:"СтоимостьМеталла" json:"СтоимостьМеталла,omitempty"`
	StoimostRabot                  *Float  `xml:"СтоимостьРабот" json:"СтоимостьРабот,omitempty"`
	Sum                            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                       *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float  `xml:"Цена" json:"Цена,omitempty"`
	CostOfWork                     *Float  `xml:"ЦенаРабот" json:"ЦенаРабот,omitempty"`
	SummaNDSVstavok                *Float  `xml:"СуммаНДСВставок" json:"СуммаНДСВставок,omitempty"`
	SummaNDSMetalla                *Float  `xml:"СуммаНДСМеталла" json:"СуммаНДСМеталла,omitempty"`
	SummaNDSRabot                  *Float  `xml:"СуммаНДСРабот" json:"СуммаНДСРабот,omitempty"`
	VesVstavok                     *Float  `xml:"ВесВставок" json:"ВесВставок,omitempty"`
}

type DocumentPostuplenieProduktsiiIzProizvodstvaMaterialyRowType struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	Nomenklatura                   *String `xml:"Номенклатура" json:"Номенклатура,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	ItemType                       *String `xml:"Номенклатура_Type" json:"Номенклатура_Type,omitempty"`
}

type DocumentPostuplenieTovarovUslugTovaryRowType struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	EdinitsaIzmereniiaKey          *Guid   `xml:"ЕдиницаИзмерения_Key" json:"ЕдиницаИзмерения_Key,omitempty"`
	ZakazKlientaKey                *Guid   `xml:"ЗаказКлиента_Key" json:"ЗаказКлиента_Key,omitempty"`
	KachestvoKey                   *Guid   `xml:"Качество_Key" json:"Качество_Key,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	Koef                           *Float  `xml:"Коэф" json:"Коэф,omitempty"`
	Koeffitsient                   *Float  `xml:"Коэффициент" json:"Коэффициент,omitempty"`
	NaborKey                       *Guid   `xml:"Набор_Key" json:"Набор_Key,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	NomerGTDKey                    *Guid   `xml:"НомерГТД_Key" json:"НомерГТД_Key,omitempty"`
	NomerNabora                    *Int    `xml:"НомерНабора" json:"НомерНабора,omitempty"`
	Pasport                        *String `xml:"Паспорт" json:"Паспорт,omitempty"`
	ProektKey                      *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	DepartmentKey                  *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	StavkaNDS                      *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	StranaProiskhozhdeniiaKey      *Guid   `xml:"СтранаПроисхождения_Key" json:"СтранаПроисхождения_Key,omitempty"`
	Sum                            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                       *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float  `xml:"Цена" json:"Цена,omitempty"`
}

type DocumentPostuplenieTovarovUslugUslugiRowType struct {
	Key                      Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber               Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Quantity                 *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                  *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	NomenklaturnaiaGruppaKey *Guid   `xml:"НоменклатурнаяГруппа_Key" json:"НоменклатурнаяГруппа_Key,omitempty"`
	PodrazdelenieKey         *Guid   `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	ProektKey                *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	Soderzhanie              *String `xml:"Содержание" json:"Содержание,omitempty"`
	StavkaNDS                *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	StatiaZatratKey          *Guid   `xml:"СтатьяЗатрат_Key" json:"СтатьяЗатрат_Key,omitempty"`
	Sum                      *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                 *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	Cost                     *Float  `xml:"Цена" json:"Цена,omitempty"`
}

type DocumentPlanProdazhPoSalonamSalonyRowType struct {
	Key                        Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                 Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	SalonKey                   *Guid    `xml:"Салон_Key" json:"Салон_Key,omitempty"`
	SummaPlana                 *Float   `xml:"СуммаПлана" json:"СуммаПлана,omitempty"`
	Primechanie                *String  `xml:"Примечание" json:"Примечание,omitempty"`
	IndeksStrokiIzTablitsyDnei *Int     `xml:"ИндексСтрокиИзТаблицыДней" json:"ИндексСтрокиИзТаблицыДней,omitempty"`
	SummaPlanaDnevnaia         *Float   `xml:"СуммаПланаДневная" json:"СуммаПланаДневная,omitempty"`
	DenPoGrafiku               *Time    `xml:"ДеньПоГрафику" json:"ДеньПоГрафику,omitempty"`
	SummaPlanaFakt             *Float   `xml:"СуммаПланаФакт" json:"СуммаПланаФакт,omitempty"`
	PlanEst                    *Boolean `xml:"ПланЕсть" json:"ПланЕсть,omitempty"`
	KU                         *Float   `xml:"КУ" json:"КУ,omitempty"`
	FormulaDliaRasschetaKey    *Guid    `xml:"ФормулаДляРассчета_Key" json:"ФормулаДляРассчета_Key,omitempty"`
	RasshifrovkaFormuly        *String  `xml:"РасшифровкаФормулы" json:"РасшифровкаФормулы,omitempty"`
}

type DocumentPlanProdazhPoSalonamDniPoGrafikuRowType struct {
	Key          Guid `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber   Int  `xml:"LineNumber" json:"LineNumber,omitempty"`
	DenPoGrafiku *Int `xml:"ДеньПоГрафику" json:"ДеньПоГрафику,omitempty"`
}

type DocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstvaRowType struct {
	Key                   Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber            Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	VidOtchetaPoPlatezham *String `xml:"ВидОтчетаПоПлатежам" json:"ВидОтчетаПоПлатежам,omitempty"`
	StavkaNDS             *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                   *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS              *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
}

type DocumentStornirovanieOtchetaKomitentuOProdazhakhTovaryRowType struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	DokumentPostupleniia           *String `xml:"ДокументПоступления" json:"ДокументПоступления,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	OtchetKomitentuKey             *Guid   `xml:"ОтчетКомитенту_Key" json:"ОтчетКомитенту_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	Sum                            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaVoznagrazhdeniia          *Float  `xml:"СуммаВознаграждения" json:"СуммаВознаграждения,omitempty"`
	SummaNDSVoznagrazhdeniia       *Float  `xml:"СуммаНДСВознаграждения" json:"СуммаНДСВознаграждения,omitempty"`
	SummaPostupleniia              *Float  `xml:"СуммаПоступления" json:"СуммаПоступления,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float  `xml:"Цена" json:"Цена,omitempty"`
	TsenaPostupleniia              *Float  `xml:"ЦенаПоступления" json:"ЦенаПоступления,omitempty"`
	DokumentPostupleniiaType       *String `xml:"ДокументПоступления_Type" json:"ДокументПоступления_Type,omitempty"`
}

type DocumentPeredachaVRemontIzdeliiaPriniatyeVRemontRowType struct {
	Key                            Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	KliuchNomenklaturyKey          *Guid  `xml:"КлючНоменклатуры_Key" json:"КлючНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid  `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid  `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	InstanceKey                    *Guid  `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	DokumentOprikhodovaniiaKey     *Guid  `xml:"ДокументОприходования_Key" json:"ДокументОприходования_Key,omitempty"`
	Weight                         *Float `xml:"Вес" json:"Вес,omitempty"`
	Quantity                       *Int   `xml:"Количество" json:"Количество,omitempty"`
}

type DocumentPeredachaVRemontTovaryRowType struct {
	Key                            Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float `xml:"Вес" json:"Вес,omitempty"`
	KachestvoKey                   *Guid  `xml:"Качество_Key" json:"Качество_Key,omitempty"`
	Quantity                       *Int   `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid  `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid  `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid  `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
}

type CatalogGruppySkladovSkladyRowType struct {
	Key           Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber    Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	DepartmentKey *Guid `xml:"Склад_Key" json:"Склад_Key,omitempty"`
}

type AccumulationRegisterPartiiTovarovVProizvodstve struct {
	Recorder     String                                                  `xml:"Recorder" json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterPartiiTovarovVProizvodstveRowType `xml:"RecordSet" json:"RecordSet,omitempty"`
	RecorderType String                                                  `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

func (entity AccumulationRegisterPartiiTovarovVProizvodstve) Balance(client Client, Condition String, Dimensions String, Period Time) ([]AccumulationRegisterPartiiTovarovVProizvodstveBalance, error) {
	var result []AccumulationRegisterPartiiTovarovVProizvodstveBalance
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ПартииТоваровВПроизводстве", keys, "Balance", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterPartiiTovarovVProizvodstve) Turnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterPartiiTovarovVProizvodstveTurnover, error) {
	var result []AccumulationRegisterPartiiTovarovVProizvodstveTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ПартииТоваровВПроизводстве", keys, "Turnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterPartiiTovarovVProizvodstve) BalanceAndTurnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterPartiiTovarovVProizvodstveBalanceAndTurnover, error) {
	var result []AccumulationRegisterPartiiTovarovVProizvodstveBalanceAndTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ПартииТоваровВПроизводстве", keys, "BalanceAndTurnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

type AccumulationRegisterPartiiTovarovVProizvodstveRecordType struct {
	Recorder                       String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                         *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber                     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                         *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType                     *String  `xml:"RecordType" json:"RecordType,omitempty"`
	ProizvodstvennyiUchastokKey    *Guid    `xml:"ПроизводственныйУчасток_Key" json:"ПроизводственныйУчасток_Key,omitempty"`
	Nomenklatura                   *String  `xml:"Номенклатура" json:"Номенклатура,omitempty"`
	OrganizatsiiaKey               *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DogovorKontragentaKey          *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOprikhodovaniia        *String  `xml:"ДокументОприходования" json:"ДокументОприходования,omitempty"`
	KharakteristikaNomenklaturyKey *Guid    `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid    `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	Quantity                       *Int     `xml:"Количество" json:"Количество,omitempty"`
	Weight                         *Float   `xml:"Вес" json:"Вес,omitempty"`
	Cost                           *Float   `xml:"Стоимость" json:"Стоимость,omitempty"`
	StoimostUpr                    *Float   `xml:"СтоимостьУпр" json:"СтоимостьУпр,omitempty"`
	StoimostBezNDS                 *Float   `xml:"СтоимостьБезНДС" json:"СтоимостьБезНДС,omitempty"`
	OperationCode                  *String  `xml:"КодОперации" json:"КодОперации,omitempty"`
	SpisaniePartii                 *Boolean `xml:"СписаниеПартий" json:"СписаниеПартий,omitempty"`
	NomerKorStroki                 *Int     `xml:"НомерКорСтроки" json:"НомерКорСтроки,omitempty"`
	RecorderType                   String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	ItemType                       *String  `xml:"Номенклатура_Type" json:"Номенклатура_Type,omitempty"`
	DokumentOprikhodovaniiaType    *String  `xml:"ДокументОприходования_Type" json:"ДокументОприходования_Type,omitempty"`
}

type AccumulationRegisterVzaimoraschetySPodotchetnymiLitsami struct {
	Recorder     String                                                           `xml:"Recorder" json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRowType `xml:"RecordSet" json:"RecordSet,omitempty"`
	RecorderType String                                                           `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

func (entity AccumulationRegisterVzaimoraschetySPodotchetnymiLitsami) Balance(client Client, Condition String, Dimensions String, Period Time) ([]AccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiBalance, error) {
	var result []AccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiBalance
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ВзаиморасчетыСПодотчетнымиЛицами", keys, "Balance", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterVzaimoraschetySPodotchetnymiLitsami) Turnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiTurnover, error) {
	var result []AccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ВзаиморасчетыСПодотчетнымиЛицами", keys, "Turnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterVzaimoraschetySPodotchetnymiLitsami) BalanceAndTurnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiBalanceAndTurnover, error) {
	var result []AccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiBalanceAndTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ВзаиморасчетыСПодотчетнымиЛицами", keys, "BalanceAndTurnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

type AccumulationRegisterVzaimoraschetySPodotchetnymiLitsamiRecordType struct {
	Recorder               String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                 *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber             Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                 *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType             *String  `xml:"RecordType" json:"RecordType,omitempty"`
	FizLitsoKey            *Guid    `xml:"ФизЛицо_Key" json:"ФизЛицо_Key,omitempty"`
	ValiutaKey             *Guid    `xml:"Валюта_Key" json:"Валюта_Key,omitempty"`
	RaschetnyiDokument     *String  `xml:"РасчетныйДокумент" json:"РасчетныйДокумент,omitempty"`
	SummaVzaimoraschetov   *Float   `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	SummaUpr               *Float   `xml:"СуммаУпр" json:"СуммаУпр,omitempty"`
	RecorderType           String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	RaschetnyiDokumentType *String  `xml:"РасчетныйДокумент_Type" json:"РасчетныйДокумент_Type,omitempty"`
}

type AccumulationRegisterVnutrennieZakazy struct {
	Recorder     String                                        `xml:"Recorder" json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterVnutrennieZakazyRowType `xml:"RecordSet" json:"RecordSet,omitempty"`
	RecorderType String                                        `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

func (entity AccumulationRegisterVnutrennieZakazy) Balance(client Client, Condition String, Dimensions String, Period Time) ([]AccumulationRegisterVnutrennieZakazyBalance, error) {
	var result []AccumulationRegisterVnutrennieZakazyBalance
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ВнутренниеЗаказы", keys, "Balance", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterVnutrennieZakazy) Turnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterVnutrennieZakazyTurnover, error) {
	var result []AccumulationRegisterVnutrennieZakazyTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ВнутренниеЗаказы", keys, "Turnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterVnutrennieZakazy) BalanceAndTurnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterVnutrennieZakazyBalanceAndTurnover, error) {
	var result []AccumulationRegisterVnutrennieZakazyBalanceAndTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ВнутренниеЗаказы", keys, "BalanceAndTurnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

type AccumulationRegisterVnutrennieZakazyRecordType struct {
	Recorder                       String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                         *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber                     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                         *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType                     *String  `xml:"RecordType" json:"RecordType,omitempty"`
	ItemKey                        *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid    `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid    `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	Zakazchik                      *String  `xml:"Заказчик" json:"Заказчик,omitempty"`
	VnutrenniiZakazKey             *Guid    `xml:"ВнутреннийЗаказ_Key" json:"ВнутреннийЗаказ_Key,omitempty"`
	StatusPartii                   *String  `xml:"СтатусПартии" json:"СтатусПартии,omitempty"`
	Quantity                       *Int     `xml:"Количество" json:"Количество,omitempty"`
	Weight                         *Float   `xml:"Вес" json:"Вес,omitempty"`
	RecorderType                   String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	ZakazchikType                  *String  `xml:"Заказчик_Type" json:"Заказчик_Type,omitempty"`
}

type AccumulationRegisterDenezhnyeSredstvaKomitenta struct {
	Recorder     String                                                  `xml:"Recorder" json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterDenezhnyeSredstvaKomitentaRowType `xml:"RecordSet" json:"RecordSet,omitempty"`
	RecorderType String                                                  `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

func (entity AccumulationRegisterDenezhnyeSredstvaKomitenta) Balance(client Client, Condition String, Dimensions String, Period Time) ([]AccumulationRegisterDenezhnyeSredstvaKomitentaBalance, error) {
	var result []AccumulationRegisterDenezhnyeSredstvaKomitentaBalance
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ДенежныеСредстваКомитента", keys, "Balance", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterDenezhnyeSredstvaKomitenta) Turnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterDenezhnyeSredstvaKomitentaTurnover, error) {
	var result []AccumulationRegisterDenezhnyeSredstvaKomitentaTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ДенежныеСредстваКомитента", keys, "Turnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterDenezhnyeSredstvaKomitenta) BalanceAndTurnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterDenezhnyeSredstvaKomitentaBalanceAndTurnover, error) {
	var result []AccumulationRegisterDenezhnyeSredstvaKomitentaBalanceAndTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ДенежныеСредстваКомитента", keys, "BalanceAndTurnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

type AccumulationRegisterDenezhnyeSredstvaKomitentaRecordType struct {
	Recorder              String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber            Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType            *String  `xml:"RecordType" json:"RecordType,omitempty"`
	DogovorKontragentaKey *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	Sdelka                *String  `xml:"Сделка" json:"Сделка,omitempty"`
	SummaVzaimoraschetov  *Float   `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	SummaUpr              *Float   `xml:"СуммаУпр" json:"СуммаУпр,omitempty"`
	RecorderType          String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	SdelkaType            *String  `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type AccumulationRegisterZakazyKlientov struct {
	Recorder     String                                      `xml:"Recorder" json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterZakazyKlientovRowType `xml:"RecordSet" json:"RecordSet,omitempty"`
	RecorderType String                                      `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

func (entity AccumulationRegisterZakazyKlientov) Balance(client Client, Condition String, Dimensions String, Period Time) ([]AccumulationRegisterZakazyKlientovBalance, error) {
	var result []AccumulationRegisterZakazyKlientovBalance
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ЗаказыКлиентов", keys, "Balance", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterZakazyKlientov) Turnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterZakazyKlientovTurnover, error) {
	var result []AccumulationRegisterZakazyKlientovTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ЗаказыКлиентов", keys, "Turnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterZakazyKlientov) BalanceAndTurnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterZakazyKlientovBalanceAndTurnover, error) {
	var result []AccumulationRegisterZakazyKlientovBalanceAndTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ЗаказыКлиентов", keys, "BalanceAndTurnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

type AccumulationRegisterZakazyKlientovRecordType struct {
	Recorder        String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period          *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber      Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active          *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType      *String  `xml:"RecordType" json:"RecordType,omitempty"`
	ItemKey         *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey         *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	ZakazKlientaKey *Guid    `xml:"ЗаказКлиента_Key" json:"ЗаказКлиента_Key,omitempty"`
	InstanceKey     *Guid    `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	Zakazano        *Int     `xml:"Заказано" json:"Заказано,omitempty"`
	VRezerve        *Int     `xml:"ВРезерве" json:"ВРезерве,omitempty"`
	KRazmeshcheniiu *Int     `xml:"КРазмещению" json:"КРазмещению,omitempty"`
	ZakazanoVes     *Float   `xml:"ЗаказаноВес" json:"ЗаказаноВес,omitempty"`
	ZakazanoSumma   *Float   `xml:"ЗаказаноСумма" json:"ЗаказаноСумма,omitempty"`
	RecorderType    String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterSummyPoFinmonitoringuRoznitsa struct {
	Recorder     String                                                     `xml:"Recorder" json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterSummyPoFinmonitoringuRoznitsaRowType `xml:"RecordSet" json:"RecordSet,omitempty"`
	RecorderType String                                                     `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

func (entity AccumulationRegisterSummyPoFinmonitoringuRoznitsa) Balance(client Client, Condition String, Dimensions String, Period Time) ([]AccumulationRegisterSummyPoFinmonitoringuRoznitsaBalance, error) {
	var result []AccumulationRegisterSummyPoFinmonitoringuRoznitsaBalance
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_СуммыПоФинмониторингуРозница", keys, "Balance", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterSummyPoFinmonitoringuRoznitsa) Turnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterSummyPoFinmonitoringuRoznitsaTurnover, error) {
	var result []AccumulationRegisterSummyPoFinmonitoringuRoznitsaTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_СуммыПоФинмониторингуРозница", keys, "Turnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterSummyPoFinmonitoringuRoznitsa) BalanceAndTurnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterSummyPoFinmonitoringuRoznitsaBalanceAndTurnover, error) {
	var result []AccumulationRegisterSummyPoFinmonitoringuRoznitsaBalanceAndTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_СуммыПоФинмониторингуРозница", keys, "BalanceAndTurnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

type AccumulationRegisterSummyPoFinmonitoringuRoznitsaRecordType struct {
	Recorder         String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period           *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber       Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active           *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType       *String  `xml:"RecordType" json:"RecordType,omitempty"`
	KontragentKey    *Guid    `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	OrganizatsiiaKey *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	SummaPokupok     *Float   `xml:"СуммаПокупок" json:"СуммаПокупок,omitempty"`
	SummaSkupki      *Float   `xml:"СуммаСкупки" json:"СуммаСкупки,omitempty"`
	RecorderType     String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterDenezhnyeSredstvaKPolucheniiu struct {
	Recorder     String                                                     `xml:"Recorder" json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterDenezhnyeSredstvaKPolucheniiuRowType `xml:"RecordSet" json:"RecordSet,omitempty"`
	RecorderType String                                                     `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

func (entity AccumulationRegisterDenezhnyeSredstvaKPolucheniiu) Balance(client Client, Condition String, Dimensions String, Period Time) ([]AccumulationRegisterDenezhnyeSredstvaKPolucheniiuBalance, error) {
	var result []AccumulationRegisterDenezhnyeSredstvaKPolucheniiuBalance
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ДенежныеСредстваКПолучению", keys, "Balance", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterDenezhnyeSredstvaKPolucheniiu) Turnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterDenezhnyeSredstvaKPolucheniiuTurnover, error) {
	var result []AccumulationRegisterDenezhnyeSredstvaKPolucheniiuTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ДенежныеСредстваКПолучению", keys, "Turnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterDenezhnyeSredstvaKPolucheniiu) BalanceAndTurnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterDenezhnyeSredstvaKPolucheniiuBalanceAndTurnover, error) {
	var result []AccumulationRegisterDenezhnyeSredstvaKPolucheniiuBalanceAndTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ДенежныеСредстваКПолучению", keys, "BalanceAndTurnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

type AccumulationRegisterDenezhnyeSredstvaKPolucheniiuRecordType struct {
	Recorder                 String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                   *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber               Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                   *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType               *String  `xml:"RecordType" json:"RecordType,omitempty"`
	VidDenezhnykhSredstv     *String  `xml:"ВидДенежныхСредств" json:"ВидДенежныхСредств,omitempty"`
	BankovskiiSchetKassa     *String  `xml:"БанковскийСчетКасса" json:"БанковскийСчетКасса,omitempty"`
	DokumentPolucheniia      *String  `xml:"ДокументПолучения" json:"ДокументПолучения,omitempty"`
	TypeOfMovingMoneyKey     *Guid    `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	Sum                      *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	SummaUpr                 *Float   `xml:"СуммаУпр" json:"СуммаУпр,omitempty"`
	RecorderType             String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	BankovskiiSchetKassaType *String  `xml:"БанковскийСчетКасса_Type" json:"БанковскийСчетКасса_Type,omitempty"`
	DokumentPolucheniiaType  *String  `xml:"ДокументПолучения_Type" json:"ДокументПолучения_Type,omitempty"`
}

type AccumulationRegisterProdazhiPoDiskontnymKartam struct {
	Recorder     String                                                  `xml:"Recorder" json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterProdazhiPoDiskontnymKartamRowType `xml:"RecordSet" json:"RecordSet,omitempty"`
	RecorderType String                                                  `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

func (entity AccumulationRegisterProdazhiPoDiskontnymKartam) Turnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterProdazhiPoDiskontnymKartamTurnover, error) {
	var result []AccumulationRegisterProdazhiPoDiskontnymKartamTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ПродажиПоДисконтнымКартам", keys, "Turnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

type AccumulationRegisterProdazhiPoDiskontnymKartamRecordType struct {
	Recorder                       String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                         *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber                     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                         *Boolean `xml:"Active" json:"Active,omitempty"`
	MemberCardKey                  *Guid    `xml:"ДисконтнаяКарта_Key" json:"ДисконтнаяКарта_Key,omitempty"`
	ItemKey                        *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid    `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid    `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	DokumentProdazhi               *String  `xml:"ДокументПродажи" json:"ДокументПродажи,omitempty"`
	Sum                            *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	Quantity                       *Int     `xml:"Количество" json:"Количество,omitempty"`
	Weight                         *Float   `xml:"Вес" json:"Вес,omitempty"`
	RecorderType                   String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	DokumentProdazhiType           *String  `xml:"ДокументПродажи_Type" json:"ДокументПродажи_Type,omitempty"`
}

type AccumulationRegisterTovaryPoluchennye struct {
	Recorder     String                                         `xml:"Recorder" json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterTovaryPoluchennyeRowType `xml:"RecordSet" json:"RecordSet,omitempty"`
	RecorderType String                                         `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

func (entity AccumulationRegisterTovaryPoluchennye) Balance(client Client, Condition String, Dimensions String, Period Time) ([]AccumulationRegisterTovaryPoluchennyeBalance, error) {
	var result []AccumulationRegisterTovaryPoluchennyeBalance
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ТоварыПолученные", keys, "Balance", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterTovaryPoluchennye) Turnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterTovaryPoluchennyeTurnover, error) {
	var result []AccumulationRegisterTovaryPoluchennyeTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ТоварыПолученные", keys, "Turnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterTovaryPoluchennye) BalanceAndTurnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterTovaryPoluchennyeBalanceAndTurnover, error) {
	var result []AccumulationRegisterTovaryPoluchennyeBalanceAndTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ТоварыПолученные", keys, "BalanceAndTurnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

type AccumulationRegisterTovaryPoluchennyeRecordType struct {
	Recorder                       String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                         *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber                     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                         *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType                     *String  `xml:"RecordType" json:"RecordType,omitempty"`
	ItemKey                        *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid    `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid    `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	DogovorKontragentaKey          *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	Sdelka                         *String  `xml:"Сделка" json:"Сделка,omitempty"`
	Quantity                       *Int     `xml:"Количество" json:"Количество,omitempty"`
	Weight                         *Float   `xml:"Вес" json:"Вес,omitempty"`
	SummaVzaimoraschetov           *Float   `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	RecorderType                   String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	SdelkaType                     *String  `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type AccumulationRegisterSvobodnyeOstatki struct {
	Recorder     String                                        `xml:"Recorder" json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterSvobodnyeOstatkiRowType `xml:"RecordSet" json:"RecordSet,omitempty"`
	RecorderType String                                        `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

func (entity AccumulationRegisterSvobodnyeOstatki) Balance(client Client, Condition String, Dimensions String, Period Time) ([]AccumulationRegisterSvobodnyeOstatkiBalance, error) {
	var result []AccumulationRegisterSvobodnyeOstatkiBalance
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_СвободныеОстатки", keys, "Balance", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterSvobodnyeOstatki) Turnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterSvobodnyeOstatkiTurnover, error) {
	var result []AccumulationRegisterSvobodnyeOstatkiTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_СвободныеОстатки", keys, "Turnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterSvobodnyeOstatki) BalanceAndTurnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterSvobodnyeOstatkiBalanceAndTurnover, error) {
	var result []AccumulationRegisterSvobodnyeOstatkiBalanceAndTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_СвободныеОстатки", keys, "BalanceAndTurnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

type AccumulationRegisterSvobodnyeOstatkiRecordType struct {
	Recorder      String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period        *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber    Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active        *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType    *String  `xml:"RecordType" json:"RecordType,omitempty"`
	ItemKey       *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey       *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	DepartmentKey *Guid    `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	VNalichii     *Int     `xml:"ВНаличии" json:"ВНаличии,omitempty"`
	VRezerve      *Int     `xml:"ВРезерве" json:"ВРезерве,omitempty"`
	RecorderType  String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterSummyVRassrochku struct {
	Recorder     String                                        `xml:"Recorder" json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterSummyVRassrochkuRowType `xml:"RecordSet" json:"RecordSet,omitempty"`
	RecorderType String                                        `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

func (entity AccumulationRegisterSummyVRassrochku) Balance(client Client, Condition String, Dimensions String, Period Time) ([]AccumulationRegisterSummyVRassrochkuBalance, error) {
	var result []AccumulationRegisterSummyVRassrochkuBalance
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_СуммыВРассрочку", keys, "Balance", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterSummyVRassrochku) Turnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterSummyVRassrochkuTurnover, error) {
	var result []AccumulationRegisterSummyVRassrochkuTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_СуммыВРассрочку", keys, "Turnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterSummyVRassrochku) BalanceAndTurnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterSummyVRassrochkuBalanceAndTurnover, error) {
	var result []AccumulationRegisterSummyVRassrochkuBalanceAndTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_СуммыВРассрочку", keys, "BalanceAndTurnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

type AccumulationRegisterSummyVRassrochkuRecordType struct {
	Recorder             String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period               *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber           Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active               *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType           *String  `xml:"RecordType" json:"RecordType,omitempty"`
	OrganizatsiiaKey     *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DogovorRassrochkiKey *Guid    `xml:"ДоговорРассрочки_Key" json:"ДоговорРассрочки_Key,omitempty"`
	SostavStrokiChekaKey *Guid    `xml:"СоставСтрокиЧека_Key" json:"СоставСтрокиЧека_Key,omitempty"`
	Sum                  *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS             *Float   `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	RecorderType         String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterGrafikPlatezhei struct {
	Recorder     String                                       `xml:"Recorder" json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterGrafikPlatezheiRowType `xml:"RecordSet" json:"RecordSet,omitempty"`
	RecorderType String                                       `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

func (entity AccumulationRegisterGrafikPlatezhei) Balance(client Client, Condition String, Dimensions String, Period Time) ([]AccumulationRegisterGrafikPlatezheiBalance, error) {
	var result []AccumulationRegisterGrafikPlatezheiBalance
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ГрафикПлатежей", keys, "Balance", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterGrafikPlatezhei) Turnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterGrafikPlatezheiTurnover, error) {
	var result []AccumulationRegisterGrafikPlatezheiTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ГрафикПлатежей", keys, "Turnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterGrafikPlatezhei) BalanceAndTurnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterGrafikPlatezheiBalanceAndTurnover, error) {
	var result []AccumulationRegisterGrafikPlatezheiBalanceAndTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ГрафикПлатежей", keys, "BalanceAndTurnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

type AccumulationRegisterGrafikPlatezheiRecordType struct {
	Recorder               String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                 *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber             Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                 *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType             *String  `xml:"RecordType" json:"RecordType,omitempty"`
	OrganizatsiiaKey       *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DogovorKontragentaKey  *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	VidDogovoraKontragenta *String  `xml:"ВидДоговораКонтрагента" json:"ВидДоговораКонтрагента,omitempty"`
	DataDolga              *Time    `xml:"ДатаДолга" json:"ДатаДолга,omitempty"`
	Oplacheno              *Float   `xml:"Оплачено" json:"Оплачено,omitempty"`
	NachislenDolg          *Float   `xml:"НачисленДолг" json:"НачисленДолг,omitempty"`
	Dolg                   *Float   `xml:"Долг" json:"Долг,omitempty"`
	Avans                  *Float   `xml:"Аванс" json:"Аванс,omitempty"`
	OplachenoUpr           *Int     `xml:"ОплаченоУпр" json:"ОплаченоУпр,omitempty"`
	NachislenDolgUpr       *Float   `xml:"НачисленДолгУпр" json:"НачисленДолгУпр,omitempty"`
	DolgUpr                *Float   `xml:"ДолгУпр" json:"ДолгУпр,omitempty"`
	AvansUpr               *Float   `xml:"АвансУпр" json:"АвансУпр,omitempty"`
	RecorderType           String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterRoznichnaiaVyruchka struct {
	Recorder     String                                           `xml:"Recorder" json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterRoznichnaiaVyruchkaRowType `xml:"RecordSet" json:"RecordSet,omitempty"`
	RecorderType String                                           `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

func (entity AccumulationRegisterRoznichnaiaVyruchka) Balance(client Client, Condition String, Dimensions String, Period Time) ([]AccumulationRegisterRoznichnaiaVyruchkaBalance, error) {
	var result []AccumulationRegisterRoznichnaiaVyruchkaBalance
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_РозничнаяВыручка", keys, "Balance", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterRoznichnaiaVyruchka) Turnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterRoznichnaiaVyruchkaTurnover, error) {
	var result []AccumulationRegisterRoznichnaiaVyruchkaTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_РозничнаяВыручка", keys, "Turnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterRoznichnaiaVyruchka) BalanceAndTurnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterRoznichnaiaVyruchkaBalanceAndTurnover, error) {
	var result []AccumulationRegisterRoznichnaiaVyruchkaBalanceAndTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_РозничнаяВыручка", keys, "BalanceAndTurnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

type AccumulationRegisterRoznichnaiaVyruchkaRecordType struct {
	Recorder              String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber            Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType            *String  `xml:"RecordType" json:"RecordType,omitempty"`
	RoznichnaiaTochka     *String  `xml:"РозничнаяТочка" json:"РозничнаяТочка,omitempty"`
	Sum                   *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	PodrazdelenieKey      *Guid    `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	RecorderType          String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	RoznichnaiaTochkaType *String  `xml:"РозничнаяТочка_Type" json:"РозничнаяТочка_Type,omitempty"`
}

type AccumulationRegisterTovaryVPuti struct {
	Recorder     String                                   `xml:"Recorder" json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterTovaryVPutiRowType `xml:"RecordSet" json:"RecordSet,omitempty"`
	RecorderType String                                   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

func (entity AccumulationRegisterTovaryVPuti) Balance(client Client, Condition String, Dimensions String, Period Time) ([]AccumulationRegisterTovaryVPutiBalance, error) {
	var result []AccumulationRegisterTovaryVPutiBalance
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ТоварыВПути", keys, "Balance", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterTovaryVPuti) Turnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterTovaryVPutiTurnover, error) {
	var result []AccumulationRegisterTovaryVPutiTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ТоварыВПути", keys, "Turnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterTovaryVPuti) BalanceAndTurnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterTovaryVPutiBalanceAndTurnover, error) {
	var result []AccumulationRegisterTovaryVPutiBalanceAndTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ТоварыВПути", keys, "BalanceAndTurnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

type AccumulationRegisterTovaryVPutiRecordType struct {
	Recorder                       String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                         *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber                     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                         *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType                     *String  `xml:"RecordType" json:"RecordType,omitempty"`
	ItemKey                        *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid    `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid    `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	OrganizatsiiaKey               *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DepartmentKey                  *Guid    `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	DogovorKontragentaKey          *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOprikhodovaniia        *String  `xml:"ДокументОприходования" json:"ДокументОприходования,omitempty"`
	Quantity                       *Int     `xml:"Количество" json:"Количество,omitempty"`
	Weight                         *Float   `xml:"Вес" json:"Вес,omitempty"`
	RecorderType                   String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	DokumentOprikhodovaniiaType    *String  `xml:"ДокументОприходования_Type" json:"ДокументОприходования_Type,omitempty"`
}

type AccumulationRegisterPoteriMetallaVProizvodstve struct {
	Recorder     String                                                  `xml:"Recorder" json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterPoteriMetallaVProizvodstveRowType `xml:"RecordSet" json:"RecordSet,omitempty"`
	RecorderType String                                                  `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

func (entity AccumulationRegisterPoteriMetallaVProizvodstve) Turnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterPoteriMetallaVProizvodstveTurnover, error) {
	var result []AccumulationRegisterPoteriMetallaVProizvodstveTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ПотериМеталлаВПроизводстве", keys, "Turnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

type AccumulationRegisterPoteriMetallaVProizvodstveRecordType struct {
	Recorder                    String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                      *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber                  Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                      *Boolean `xml:"Active" json:"Active,omitempty"`
	OrganizatsiiaKey            *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DogovorKontragentaKey       *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	Nomenklatura                *String  `xml:"Номенклатура" json:"Номенклатура,omitempty"`
	DokumentOprikhodovaniia     *String  `xml:"ДокументОприходования" json:"ДокументОприходования,omitempty"`
	VesPoter                    *Float   `xml:"ВесПотерь" json:"ВесПотерь,omitempty"`
	RecorderType                String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	ItemType                    *String  `xml:"Номенклатура_Type" json:"Номенклатура_Type,omitempty"`
	DokumentOprikhodovaniiaType *String  `xml:"ДокументОприходования_Type" json:"ДокументОприходования_Type,omitempty"`
}

type AccumulationRegisterPartiiTovarovNaSkladakh struct {
	Recorder     String                                               `xml:"Recorder" json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterPartiiTovarovNaSkladakhRowType `xml:"RecordSet" json:"RecordSet,omitempty"`
	RecorderType String                                               `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

func (entity AccumulationRegisterPartiiTovarovNaSkladakh) Balance(client Client, Condition String, Dimensions String, Period Time) ([]AccumulationRegisterPartiiTovarovNaSkladakhBalance, error) {
	var result []AccumulationRegisterPartiiTovarovNaSkladakhBalance
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ПартииТоваровНаСкладах", keys, "Balance", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterPartiiTovarovNaSkladakh) Turnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterPartiiTovarovNaSkladakhTurnover, error) {
	var result []AccumulationRegisterPartiiTovarovNaSkladakhTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ПартииТоваровНаСкладах", keys, "Turnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterPartiiTovarovNaSkladakh) BalanceAndTurnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterPartiiTovarovNaSkladakhBalanceAndTurnover, error) {
	var result []AccumulationRegisterPartiiTovarovNaSkladakhBalanceAndTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ПартииТоваровНаСкладах", keys, "BalanceAndTurnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

type ProductActionDocument struct {
	Recorder                       String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                         *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber                     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                         *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType                     *String  `xml:"RecordType" json:"RecordType,omitempty"`
	ItemKey                        *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid    `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid    `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	OrganizatsiiaKey               *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DepartmentKey                  *Guid    `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	DokumentOprikhodovaniia        *String  `xml:"ДокументОприходования" json:"ДокументОприходования,omitempty"`
	StatusPartii                   *String  `xml:"СтатусПартии" json:"СтатусПартии,omitempty"`
	KachestvoKey                   *Guid    `xml:"Качество_Key" json:"Качество_Key,omitempty"`
	Quantity                       *Int     `xml:"Количество" json:"Количество,omitempty"`
	Weight                         *Float   `xml:"Вес" json:"Вес,omitempty"`
	Cost                           *Float   `xml:"Стоимость" json:"Стоимость,omitempty"`
	StoimostUpr                    *Float   `xml:"СтоимостьУпр" json:"СтоимостьУпр,omitempty"`
	StoimostBezNDS                 *Float   `xml:"СтоимостьБезНДС" json:"СтоимостьБезНДС,omitempty"`
	OperationCode                  *String  `xml:"КодОперации" json:"КодОперации,omitempty"`
	SpisaniePartii                 *Boolean `xml:"СписаниеПартий" json:"СписаниеПартий,omitempty"`
	NomerKorStroki                 *Int     `xml:"НомерКорСтроки" json:"НомерКорСтроки,omitempty"`
	RecorderType                   String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	DokumentOprikhodovaniiaType    *String  `xml:"ДокументОприходования_Type" json:"ДокументОприходования_Type,omitempty"`
}

type AccumulationRegisterSummyDokumentovDliaObmena struct {
	Recorder     String                                                 `xml:"Recorder" json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterSummyDokumentovDliaObmenaRowType `xml:"RecordSet" json:"RecordSet,omitempty"`
	RecorderType String                                                 `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

func (entity AccumulationRegisterSummyDokumentovDliaObmena) Balance(client Client, Condition String, Dimensions String, Period Time) ([]AccumulationRegisterSummyDokumentovDliaObmenaBalance, error) {
	var result []AccumulationRegisterSummyDokumentovDliaObmenaBalance
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_СуммыДокументовДляОбмена", keys, "Balance", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterSummyDokumentovDliaObmena) Turnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterSummyDokumentovDliaObmenaTurnover, error) {
	var result []AccumulationRegisterSummyDokumentovDliaObmenaTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_СуммыДокументовДляОбмена", keys, "Turnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterSummyDokumentovDliaObmena) BalanceAndTurnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterSummyDokumentovDliaObmenaBalanceAndTurnover, error) {
	var result []AccumulationRegisterSummyDokumentovDliaObmenaBalanceAndTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_СуммыДокументовДляОбмена", keys, "BalanceAndTurnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

type AccumulationRegisterSummyDokumentovDliaObmenaRecordType struct {
	Recorder         String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period           *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber       Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active           *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType       *String  `xml:"RecordType" json:"RecordType,omitempty"`
	OrganizatsiiaKey *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DepartmentKey    *Guid    `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	DokumentKey      *Guid    `xml:"Документ_Key" json:"Документ_Key,omitempty"`
	Sum              *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	RecorderType     String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterDvizheniiaDenezhnykhSredstv struct {
	Recorder     String                                                   `xml:"Recorder" json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterDvizheniiaDenezhnykhSredstvRowType `xml:"RecordSet" json:"RecordSet,omitempty"`
	RecorderType String                                                   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

func (entity AccumulationRegisterDvizheniiaDenezhnykhSredstv) Turnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterDvizheniiaDenezhnykhSredstvTurnover, error) {
	var result []AccumulationRegisterDvizheniiaDenezhnykhSredstvTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ДвиженияДенежныхСредств", keys, "Turnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

type AccumulationRegisterDvizheniiaDenezhnykhSredstvRecordType struct {
	Recorder                          String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                            *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber                        Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                            *Boolean `xml:"Active" json:"Active,omitempty"`
	VidDenezhnykhSredstv              *String  `xml:"ВидДенежныхСредств" json:"ВидДенежныхСредств,omitempty"`
	PrikhodRaskhod                    *String  `xml:"ПриходРасход" json:"ПриходРасход,omitempty"`
	BankovskiiSchetKassa              *String  `xml:"БанковскийСчетКасса" json:"БанковскийСчетКасса,omitempty"`
	TypeOfMovingMoneyKey              *Guid    `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	DokumentDvizheniia                *String  `xml:"ДокументДвижения" json:"ДокументДвижения,omitempty"`
	Kontragent                        *String  `xml:"Контрагент" json:"Контрагент,omitempty"`
	DogovorKontragentaKey             *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	Sdelka                            *String  `xml:"Сделка" json:"Сделка,omitempty"`
	ProektKey                         *Guid    `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	DokumentPlanirovaniiaPlatezha     *String  `xml:"ДокументПланированияПлатежа" json:"ДокументПланированияПлатежа,omitempty"`
	Sum                               *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	SummaUpr                          *Float   `xml:"СуммаУпр" json:"СуммаУпр,omitempty"`
	RecorderType                      String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	BankovskiiSchetKassaType          *String  `xml:"БанковскийСчетКасса_Type" json:"БанковскийСчетКасса_Type,omitempty"`
	DokumentDvizheniiaType            *String  `xml:"ДокументДвижения_Type" json:"ДокументДвижения_Type,omitempty"`
	KontragentType                    *String  `xml:"Контрагент_Type" json:"Контрагент_Type,omitempty"`
	SdelkaType                        *String  `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
	DokumentPlanirovaniiaPlatezhaType *String  `xml:"ДокументПланированияПлатежа_Type" json:"ДокументПланированияПлатежа_Type,omitempty"`
}

type AccumulationRegisterProdazhiPoStatiam struct {
	Recorder     String                                         `xml:"Recorder" json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterProdazhiPoStatiamRowType `xml:"RecordSet" json:"RecordSet,omitempty"`
	RecorderType String                                         `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

func (entity AccumulationRegisterProdazhiPoStatiam) Balance(client Client, Condition String, Dimensions String, Period Time) ([]AccumulationRegisterProdazhiPoStatiamBalance, error) {
	var result []AccumulationRegisterProdazhiPoStatiamBalance
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ПродажиПоСтатьям", keys, "Balance", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterProdazhiPoStatiam) Turnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterProdazhiPoStatiamTurnover, error) {
	var result []AccumulationRegisterProdazhiPoStatiamTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ПродажиПоСтатьям", keys, "Turnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterProdazhiPoStatiam) BalanceAndTurnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterProdazhiPoStatiamBalanceAndTurnover, error) {
	var result []AccumulationRegisterProdazhiPoStatiamBalanceAndTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ПродажиПоСтатьям", keys, "BalanceAndTurnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

type AccumulationRegisterProdazhiPoStatiamRecordType struct {
	Recorder         String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period           *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber       Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active           *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType       *String  `xml:"RecordType" json:"RecordType,omitempty"`
	OrganizatsiiaKey *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DepartmentKey    *Guid    `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	StatiaKey        *Guid    `xml:"Статья_Key" json:"Статья_Key,omitempty"`
	SummaProdazha    *Float   `xml:"СуммаПродажа" json:"СуммаПродажа,omitempty"`
	SummaVozvrat     *Float   `xml:"СуммаВозврат" json:"СуммаВозврат,omitempty"`
	RecorderType     String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type InformationRegisterTsenyNomenklatury struct {
	Recorder     String                                        `xml:"Recorder" json:"Recorder,omitempty"`
	RecordSet    []InformationRegisterTsenyNomenklaturyRowType `xml:"RecordSet" json:"RecordSet,omitempty"`
	RecorderType String                                        `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type InformationRegisterTsenyNomenklaturyRecordType struct {
	Recorder                       *String  `xml:"Recorder" json:"Recorder,omitempty"`
	Period                         Time     `xml:"Period" json:"Period,omitempty"`
	LineNumber                     *Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                         *Boolean `xml:"Active" json:"Active,omitempty"`
	TipTsenKey                     Guid     `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
	SegmentNomenklaturyKey         Guid     `xml:"СегментНоменклатуры_Key" json:"СегментНоменклатуры_Key,omitempty"`
	ItemKey                        Guid     `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    Guid     `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey Guid     `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        Guid     `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	Cost                           *Float   `xml:"Цена" json:"Цена,omitempty"`
	ProtsentSkidkiNatsenki         *Float   `xml:"ПроцентСкидкиНаценки" json:"ПроцентСкидкиНаценки,omitempty"`
	ValiutaKey                     *Guid    `xml:"Валюта_Key" json:"Валюта_Key,omitempty"`
	EdinitsaIzmereniiaKey          *Guid    `xml:"ЕдиницаИзмерения_Key" json:"ЕдиницаИзмерения_Key,omitempty"`
	RecorderType                   *String  `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

func (entity InformationRegisterTsenyNomenklaturyRecordType) SliceLast(client Client, Condition String, Period Time) ([]InformationRegisterTsenyNomenklaturyRecordType, error) {
	var result []InformationRegisterTsenyNomenklaturyRecordType
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition)))}
	keys := []string{fmt.Sprintf("ТипЦен_Key=guid'%s' ", url.PathEscape(string(entity.TipTsenKey))), fmt.Sprintf("СегментНоменклатуры_Key=guid'%s' ", url.PathEscape(string(entity.SegmentNomenklaturyKey))), fmt.Sprintf("Номенклатура_Key=guid'%s' ", url.PathEscape(string(entity.ItemKey))), fmt.Sprintf("СерияНоменклатуры_Key=guid'%s' ", url.PathEscape(string(entity.InstanceKey))), fmt.Sprintf("ХарактеристикаНоменклатуры_Key=guid'%s' ", url.PathEscape(string(entity.KharakteristikaNomenklaturyKey))), fmt.Sprintf("Размер_Key=guid'%s' ", url.PathEscape(string(entity.SizeKey)))}
	raw, err := client.executeEntityMethod("InformationRegister_ЦеныНоменклатуры_RecordType", keys, "SliceLast", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity InformationRegisterTsenyNomenklaturyRecordType) SliceFirst(client Client, Condition String, Period Time) ([]InformationRegisterTsenyNomenklaturyRecordType, error) {
	var result []InformationRegisterTsenyNomenklaturyRecordType
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition)))}
	keys := []string{fmt.Sprintf("ТипЦен_Key=guid'%s' ", url.PathEscape(string(entity.TipTsenKey))), fmt.Sprintf("СегментНоменклатуры_Key=guid'%s' ", url.PathEscape(string(entity.SegmentNomenklaturyKey))), fmt.Sprintf("Номенклатура_Key=guid'%s' ", url.PathEscape(string(entity.ItemKey))), fmt.Sprintf("СерияНоменклатуры_Key=guid'%s' ", url.PathEscape(string(entity.InstanceKey))), fmt.Sprintf("ХарактеристикаНоменклатуры_Key=guid'%s' ", url.PathEscape(string(entity.KharakteristikaNomenklaturyKey))), fmt.Sprintf("Размер_Key=guid'%s' ", url.PathEscape(string(entity.SizeKey)))}
	raw, err := client.executeEntityMethod("InformationRegister_ЦеныНоменклатуры_RecordType", keys, "SliceFirst", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

type AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitse struct {
	Recorder     String                                                         `xml:"Recorder" json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRowType `xml:"RecordSet" json:"RecordSet,omitempty"`
	RecorderType String                                                         `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

func (entity AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitse) Turnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseTurnover, error) {
	var result []AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_СводныеДанныеПоПродажамВРознице", keys, "Turnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

type AccumulationRegisterSvodnyeDannyePoProdazhamVRoznitseRecordType struct {
	Recorder                      String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                        *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber                    Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                        *Boolean `xml:"Active" json:"Active,omitempty"`
	OrganizatsiiaKey              *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DepartmentKey                 *Guid    `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	ProdazhnaiaStoimost           *Float   `xml:"ПродажнаяСтоимость" json:"ПродажнаяСтоимость,omitempty"`
	VsegoSkidki                   *Float   `xml:"ВсегоСкидки" json:"ВсегоСкидки,omitempty"`
	SkidkiPoDiskontnymKartam      *Float   `xml:"СкидкиПоДисконтнымКартам" json:"СкидкиПоДисконтнымКартам,omitempty"`
	SummaOplatyKartami            *Float   `xml:"СуммаОплатыКартами" json:"СуммаОплатыКартами,omitempty"`
	SummaOplatyBankovskimKreditom *Float   `xml:"СуммаОплатыБанковскимКредитом" json:"СуммаОплатыБанковскимКредитом,omitempty"`
	SummaVozvrata                 *Float   `xml:"СуммаВозврата" json:"СуммаВозврата,omitempty"`
	VesVChekakh                   *Float   `xml:"ВесВЧеках" json:"ВесВЧеках,omitempty"`
	KolichestvoChekov             *Int     `xml:"КоличествоЧеков" json:"КоличествоЧеков,omitempty"`
	SummaProdazhiSertifikatov     *Float   `xml:"СуммаПродажиСертификатов" json:"СуммаПродажиСертификатов,omitempty"`
	SummaOplatySertifikatami      *Float   `xml:"СуммаОплатыСертификатами" json:"СуммаОплатыСертификатами,omitempty"`
	PogashenoSertifikatami        *Float   `xml:"ПогашеноСертификатами" json:"ПогашеноСертификатами,omitempty"`
	SummaOplatyBonusom            *Float   `xml:"СуммаОплатыБонусом" json:"СуммаОплатыБонусом,omitempty"`
	VesObmena                     *Float   `xml:"ВесОбмена" json:"ВесОбмена,omitempty"`
	SummaObmena                   *Float   `xml:"СуммаОбмена" json:"СуммаОбмена,omitempty"`
	VesSkuplennogoTovara          *Float   `xml:"ВесСкупленногоТовара" json:"ВесСкупленногоТовара,omitempty"`
	VydanoZaSkuplennyiTovar       *Float   `xml:"ВыданоЗаСкупленныйТовар" json:"ВыданоЗаСкупленныйТовар,omitempty"`
	KolichestvoIzdelii            *Int     `xml:"КоличествоИзделий" json:"КоличествоИзделий,omitempty"`
	SumManualDiscount             *Float   `xml:"СуммаРучнойСкидки" json:"СуммаРучнойСкидки,omitempty"`
	SumAutoDiscount               *Float   `xml:"СуммаАвтоматическойСкидки" json:"СуммаАвтоматическойСкидки,omitempty"`
	SummaRassrochki               *Float   `xml:"СуммаРассрочки" json:"СуммаРассрочки,omitempty"`
	SummaPogasheniiaRassrochki    *Float   `xml:"СуммаПогашенияРассрочки" json:"СуммаПогашенияРассрочки,omitempty"`
	SummaOplatyNalichnymi         *Float   `xml:"СуммаОплатыНаличными" json:"СуммаОплатыНаличными,omitempty"`
	RecorderType                  String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterDenezhnyeSredstvaVRezerve struct {
	Recorder     String                                                 `xml:"Recorder" json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterDenezhnyeSredstvaVRezerveRowType `xml:"RecordSet" json:"RecordSet,omitempty"`
	RecorderType String                                                 `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

func (entity AccumulationRegisterDenezhnyeSredstvaVRezerve) Balance(client Client, Condition String, Dimensions String, Period Time) ([]AccumulationRegisterDenezhnyeSredstvaVRezerveBalance, error) {
	var result []AccumulationRegisterDenezhnyeSredstvaVRezerveBalance
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ДенежныеСредстваВРезерве", keys, "Balance", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterDenezhnyeSredstvaVRezerve) Turnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterDenezhnyeSredstvaVRezerveTurnover, error) {
	var result []AccumulationRegisterDenezhnyeSredstvaVRezerveTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ДенежныеСредстваВРезерве", keys, "Turnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterDenezhnyeSredstvaVRezerve) BalanceAndTurnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterDenezhnyeSredstvaVRezerveBalanceAndTurnover, error) {
	var result []AccumulationRegisterDenezhnyeSredstvaVRezerveBalanceAndTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ДенежныеСредстваВРезерве", keys, "BalanceAndTurnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

type AccumulationRegisterDenezhnyeSredstvaVRezerveRecordType struct {
	Recorder                   String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                     *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber                 Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                     *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType                 *String  `xml:"RecordType" json:"RecordType,omitempty"`
	VidDenezhnykhSredstv       *String  `xml:"ВидДенежныхСредств" json:"ВидДенежныхСредств,omitempty"`
	BankovskiiSchetKassa       *String  `xml:"БанковскийСчетКасса" json:"БанковскийСчетКасса,omitempty"`
	DokumentRezervirovaniiaKey *Guid    `xml:"ДокументРезервирования_Key" json:"ДокументРезервирования_Key,omitempty"`
	Sum                        *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	RecorderType               String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	BankovskiiSchetKassaType   *String  `xml:"БанковскийСчетКасса_Type" json:"БанковскийСчетКасса_Type,omitempty"`
}

type AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakh struct {
	Recorder     String                                                                     `xml:"Recorder" json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRowType `xml:"RecordSet" json:"RecordSet,omitempty"`
	RecorderType String                                                                     `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

func (entity AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakh) Balance(client Client, Condition String, Dimensions String, Period Time) ([]AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhBalance, error) {
	var result []AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhBalance
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ТоварыВНеавтоматизированныхТорговыхТочках", keys, "Balance", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakh) Turnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhTurnover, error) {
	var result []AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ТоварыВНеавтоматизированныхТорговыхТочках", keys, "Turnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakh) BalanceAndTurnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhBalanceAndTurnover, error) {
	var result []AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhBalanceAndTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ТоварыВНеавтоматизированныхТорговыхТочках", keys, "BalanceAndTurnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

type AccumulationRegisterTovaryVNeavtomatizirovannykhTorgovykhTochkakhRecordType struct {
	Recorder                       String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                         *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber                     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                         *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType                     *String  `xml:"RecordType" json:"RecordType,omitempty"`
	ItemKey                        *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid    `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid    `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	DepartmentKey                  *Guid    `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	RetailCost                     *Float   `xml:"ЦенаВРознице" json:"ЦенаВРознице,omitempty"`
	Quantity                       *Int     `xml:"Количество" json:"Количество,omitempty"`
	Weight                         *Float   `xml:"Вес" json:"Вес,omitempty"`
	RecorderType                   String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterDavalcheskiiMetallPoteri struct {
	Recorder     String                                                `xml:"Recorder" json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterDavalcheskiiMetallPoteriRowType `xml:"RecordSet" json:"RecordSet,omitempty"`
	RecorderType String                                                `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

func (entity AccumulationRegisterDavalcheskiiMetallPoteri) Turnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterDavalcheskiiMetallPoteriTurnover, error) {
	var result []AccumulationRegisterDavalcheskiiMetallPoteriTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ДавальческийМеталлПотери", keys, "Turnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

type AccumulationRegisterDavalcheskiiMetallPoteriRecordType struct {
	Recorder              String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber            Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                *Boolean `xml:"Active" json:"Active,omitempty"`
	OrganizatsiiaKey      *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DogovorKontragentaKey *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	MetallKey             *Guid    `xml:"Металл_Key" json:"Металл_Key,omitempty"`
	Weight                *Float   `xml:"Вес" json:"Вес,omitempty"`
	Protsent              *Float   `xml:"Процент" json:"Процент,omitempty"`
	RecorderType          String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type InformationRegisterTsenyPoPreiskurantu struct {
	Recorder     String                                          `xml:"Recorder" json:"Recorder,omitempty"`
	RecordSet    []InformationRegisterTsenyPoPreiskurantuRowType `xml:"RecordSet" json:"RecordSet,omitempty"`
	RecorderType String                                          `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type InformationRegisterTsenyPoPreiskurantuRecordType struct {
	Recorder         *String  `xml:"Recorder" json:"Recorder,omitempty"`
	Period           Time     `xml:"Period" json:"Period,omitempty"`
	LineNumber       *Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active           *Boolean `xml:"Active" json:"Active,omitempty"`
	KamenKey         Guid     `xml:"Камень_Key" json:"Камень_Key,omitempty"`
	FormaOgrankiKey  Guid     `xml:"ФормаОгранки_Key" json:"ФормаОгранки_Key,omitempty"`
	TsvetKamniaKey   Guid     `xml:"ЦветКамня_Key" json:"ЦветКамня_Key,omitempty"`
	GruppaTsvetaKey  Guid     `xml:"ГруппаЦвета_Key" json:"ГруппаЦвета_Key,omitempty"`
	GruppaDefektaKey Guid     `xml:"ГруппаДефекта_Key" json:"ГруппаДефекта_Key,omitempty"`
	RassevKey        Guid     `xml:"Рассев_Key" json:"Рассев_Key,omitempty"`
	Razmer1Ot        Float    `xml:"Размер1От" json:"Размер1От,omitempty"`
	Razmer1Do        Float    `xml:"Размер1До" json:"Размер1До,omitempty"`
	Cost             *Float   `xml:"Цена" json:"Цена,omitempty"`
	TipTsenKey       *Guid    `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
	RecorderType     *String  `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

func (entity InformationRegisterTsenyPoPreiskurantuRecordType) SliceLast(client Client, Condition String, Period Time) ([]InformationRegisterTsenyPoPreiskurantuRecordType, error) {
	var result []InformationRegisterTsenyPoPreiskurantuRecordType
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition)))}
	keys := []string{fmt.Sprintf("Камень_Key=guid'%s' ", url.PathEscape(string(entity.KamenKey))), fmt.Sprintf("ФормаОгранки_Key=guid'%s' ", url.PathEscape(string(entity.FormaOgrankiKey))), fmt.Sprintf("ЦветКамня_Key=guid'%s' ", url.PathEscape(string(entity.TsvetKamniaKey))), fmt.Sprintf("ГруппаЦвета_Key=guid'%s' ", url.PathEscape(string(entity.GruppaTsvetaKey))), fmt.Sprintf("ГруппаДефекта_Key=guid'%s' ", url.PathEscape(string(entity.GruppaDefektaKey))), fmt.Sprintf("Рассев_Key=guid'%s' ", url.PathEscape(string(entity.RassevKey))), fmt.Sprintf("Размер1От=%f ", entity.Razmer1Ot), fmt.Sprintf("Размер1До=%f ", entity.Razmer1Do)}
	raw, err := client.executeEntityMethod("InformationRegister_ЦеныПоПрейскуранту_RecordType", keys, "SliceLast", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity InformationRegisterTsenyPoPreiskurantuRecordType) SliceFirst(client Client, Condition String, Period Time) ([]InformationRegisterTsenyPoPreiskurantuRecordType, error) {
	var result []InformationRegisterTsenyPoPreiskurantuRecordType
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition)))}
	keys := []string{fmt.Sprintf("Камень_Key=guid'%s' ", url.PathEscape(string(entity.KamenKey))), fmt.Sprintf("ФормаОгранки_Key=guid'%s' ", url.PathEscape(string(entity.FormaOgrankiKey))), fmt.Sprintf("ЦветКамня_Key=guid'%s' ", url.PathEscape(string(entity.TsvetKamniaKey))), fmt.Sprintf("ГруппаЦвета_Key=guid'%s' ", url.PathEscape(string(entity.GruppaTsvetaKey))), fmt.Sprintf("ГруппаДефекта_Key=guid'%s' ", url.PathEscape(string(entity.GruppaDefektaKey))), fmt.Sprintf("Рассев_Key=guid'%s' ", url.PathEscape(string(entity.RassevKey))), fmt.Sprintf("Размер1От=%f ", entity.Razmer1Ot), fmt.Sprintf("Размер1До=%f ", entity.Razmer1Do)}
	raw, err := client.executeEntityMethod("InformationRegister_ЦеныПоПрейскуранту_RecordType", keys, "SliceFirst", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

type AccumulationRegisterTovaryVOtbore struct {
	Recorder     String                                     `xml:"Recorder" json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterTovaryVOtboreRowType `xml:"RecordSet" json:"RecordSet,omitempty"`
	RecorderType String                                     `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

func (entity AccumulationRegisterTovaryVOtbore) Balance(client Client, Condition String, Dimensions String, Period Time) ([]AccumulationRegisterTovaryVOtboreBalance, error) {
	var result []AccumulationRegisterTovaryVOtboreBalance
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ТоварыВОтборе", keys, "Balance", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterTovaryVOtbore) Turnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterTovaryVOtboreTurnover, error) {
	var result []AccumulationRegisterTovaryVOtboreTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ТоварыВОтборе", keys, "Turnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterTovaryVOtbore) BalanceAndTurnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterTovaryVOtboreBalanceAndTurnover, error) {
	var result []AccumulationRegisterTovaryVOtboreBalanceAndTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ТоварыВОтборе", keys, "BalanceAndTurnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

type AccumulationRegisterTovaryVOtboreRecordType struct {
	Recorder                       String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                         *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber                     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                         *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType                     *String  `xml:"RecordType" json:"RecordType,omitempty"`
	ItemKey                        *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid    `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid    `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	ZakazKlienta                   *String  `xml:"ЗаказКлиента" json:"ЗаказКлиента,omitempty"`
	DepartmentKey                  *Guid    `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	KOtboru                        *Int     `xml:"КОтбору" json:"КОтбору,omitempty"`
	Otobrano                       *Int     `xml:"Отобрано" json:"Отобрано,omitempty"`
	OtobranoVes                    *Float   `xml:"ОтобраноВес" json:"ОтобраноВес,omitempty"`
	RecorderType                   String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	ZakazKlientaType               *String  `xml:"ЗаказКлиента_Type" json:"ЗаказКлиента_Type,omitempty"`
}

type AccumulationRegisterRealizovannyeTovary struct {
	Recorder     String                                           `xml:"Recorder" json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterRealizovannyeTovaryRowType `xml:"RecordSet" json:"RecordSet,omitempty"`
	RecorderType String                                           `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

func (entity AccumulationRegisterRealizovannyeTovary) Balance(client Client, Condition String, Dimensions String, Period Time) ([]AccumulationRegisterRealizovannyeTovaryBalance, error) {
	var result []AccumulationRegisterRealizovannyeTovaryBalance
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_РеализованныеТовары", keys, "Balance", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterRealizovannyeTovary) Turnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterRealizovannyeTovaryTurnover, error) {
	var result []AccumulationRegisterRealizovannyeTovaryTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_РеализованныеТовары", keys, "Turnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterRealizovannyeTovary) BalanceAndTurnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterRealizovannyeTovaryBalanceAndTurnover, error) {
	var result []AccumulationRegisterRealizovannyeTovaryBalanceAndTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_РеализованныеТовары", keys, "BalanceAndTurnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

type AccumulationRegisterRealizovannyeTovaryRecordType struct {
	Recorder                       String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                         *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber                     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                         *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType                     *String  `xml:"RecordType" json:"RecordType,omitempty"`
	ItemKey                        *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid    `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid    `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	DogovorKontragentaKey          *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	Sdelka                         *String  `xml:"Сделка" json:"Сделка,omitempty"`
	DokumentPostavki               *String  `xml:"ДокументПоставки" json:"ДокументПоставки,omitempty"`
	Quantity                       *Int     `xml:"Количество" json:"Количество,omitempty"`
	Weight                         *Float   `xml:"Вес" json:"Вес,omitempty"`
	Vyruchka                       *Float   `xml:"Выручка" json:"Выручка,omitempty"`
	RecorderType                   String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	SdelkaType                     *String  `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
	DokumentPostavkiType           *String  `xml:"ДокументПоставки_Type" json:"ДокументПоставки_Type,omitempty"`
}

type AccumulationRegisterDenezhnyeSredstvaKomissionera struct {
	Recorder     String                                                     `xml:"Recorder" json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterDenezhnyeSredstvaKomissioneraRowType `xml:"RecordSet" json:"RecordSet,omitempty"`
	RecorderType String                                                     `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

func (entity AccumulationRegisterDenezhnyeSredstvaKomissionera) Balance(client Client, Condition String, Dimensions String, Period Time) ([]AccumulationRegisterDenezhnyeSredstvaKomissioneraBalance, error) {
	var result []AccumulationRegisterDenezhnyeSredstvaKomissioneraBalance
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ДенежныеСредстваКомиссионера", keys, "Balance", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterDenezhnyeSredstvaKomissionera) Turnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterDenezhnyeSredstvaKomissioneraTurnover, error) {
	var result []AccumulationRegisterDenezhnyeSredstvaKomissioneraTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ДенежныеСредстваКомиссионера", keys, "Turnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterDenezhnyeSredstvaKomissionera) BalanceAndTurnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterDenezhnyeSredstvaKomissioneraBalanceAndTurnover, error) {
	var result []AccumulationRegisterDenezhnyeSredstvaKomissioneraBalanceAndTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ДенежныеСредстваКомиссионера", keys, "BalanceAndTurnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

type AccumulationRegisterDenezhnyeSredstvaKomissioneraRecordType struct {
	Recorder              String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber            Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType            *String  `xml:"RecordType" json:"RecordType,omitempty"`
	DogovorKontragentaKey *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	Sdelka                *String  `xml:"Сделка" json:"Сделка,omitempty"`
	SummaVzaimoraschetov  *Float   `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	SummaUpr              *Float   `xml:"СуммаУпр" json:"СуммаУпр,omitempty"`
	RecorderType          String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	SdelkaType            *String  `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type AccumulationRegisterProdazhi1 struct {
	Recorder     String                                 `xml:"Recorder" json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterProdazhi1RowType `xml:"RecordSet" json:"RecordSet,omitempty"`
	RecorderType String                                 `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

func (entity AccumulationRegisterProdazhi1) Turnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterProdazhi1Turnover, error) {
	var result []AccumulationRegisterProdazhi1Turnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_Продажи1", keys, "Turnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

type AccumulationRegisterProdazhi1RecordType struct {
	Recorder                       String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                         *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber                     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                         *Boolean `xml:"Active" json:"Active,omitempty"`
	ItemKey                        *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid    `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid    `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	OrganizatsiiaKey               *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DepartmentKey                  *Guid    `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	DogovorKontragentaKey          *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentProdazhi               *String  `xml:"ДокументПродажи" json:"ДокументПродажи,omitempty"`
	DokumentOprikhodovaniia        *String  `xml:"ДокументОприходования" json:"ДокументОприходования,omitempty"`
	ZakazKlienta                   *String  `xml:"ЗаказКлиента" json:"ЗаказКлиента,omitempty"`
	ProektKey                      *Guid    `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	PodrazdelenieKey               *Guid    `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	MetallKey                      *Guid    `xml:"Металл_Key" json:"Металл_Key,omitempty"`
	TovarnaiaGruppaKey             *Guid    `xml:"ТоварнаяГруппа_Key" json:"ТоварнаяГруппа_Key,omitempty"`
	TovarnaiaKategoriiaKey         *Guid    `xml:"ТоварнаяКатегория_Key" json:"ТоварнаяКатегория_Key,omitempty"`
	TovarnaiaPozitsiiaKey          *Guid    `xml:"ТоварнаяПозиция_Key" json:"ТоварнаяПозиция_Key,omitempty"`
	OrderKey                       *Guid    `xml:"КлючПродажи_Key" json:"КлючПродажи_Key,omitempty"`
	Quantity                       *Int     `xml:"Количество" json:"Количество,omitempty"`
	Weight                         *Float   `xml:"Вес" json:"Вес,omitempty"`
	Cost                           *Float   `xml:"Стоимость" json:"Стоимость,omitempty"`
	StoimostBezSkidok              *Float   `xml:"СтоимостьБезСкидок" json:"СтоимостьБезСкидок,omitempty"`
	StoimostPostuplenie            *Float   `xml:"СтоимостьПоступление" json:"СтоимостьПоступление,omitempty"`
	StoimostUpr                    *Float   `xml:"СтоимостьУпр" json:"СтоимостьУпр,omitempty"`
	StoimostBezNDS                 *Float   `xml:"СтоимостьБезНДС" json:"СтоимостьБезНДС,omitempty"`
	KolichestvoVozvrat             *Int     `xml:"КоличествоВозврат" json:"КоличествоВозврат,omitempty"`
	VesVozvrat                     *Float   `xml:"ВесВозврат" json:"ВесВозврат,omitempty"`
	StoimostVozvrat                *Float   `xml:"СтоимостьВозврат" json:"СтоимостьВозврат,omitempty"`
	StoimostBezSkidokVozvrat       *Float   `xml:"СтоимостьБезСкидокВозврат" json:"СтоимостьБезСкидокВозврат,omitempty"`
	StoimostPostuplenieVozvrat     *Float   `xml:"СтоимостьПоступлениеВозврат" json:"СтоимостьПоступлениеВозврат,omitempty"`
	StoimostUprVozvrat             *Float   `xml:"СтоимостьУпрВозврат" json:"СтоимостьУпрВозврат,omitempty"`
	StoimostBezNDSVozvrat          *Float   `xml:"СтоимостьБезНДСВозврат" json:"СтоимостьБезНДСВозврат,omitempty"`
	SpisaniePartii                 *Boolean `xml:"СписаниеПартий" json:"СписаниеПартий,omitempty"`
	RecorderType                   String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	DokumentProdazhiType           *String  `xml:"ДокументПродажи_Type" json:"ДокументПродажи_Type,omitempty"`
	DokumentOprikhodovaniiaType    *String  `xml:"ДокументОприходования_Type" json:"ДокументОприходования_Type,omitempty"`
	ZakazKlientaType               *String  `xml:"ЗаказКлиента_Type" json:"ЗаказКлиента_Type,omitempty"`
}

type AccumulationRegisterTovaryNaSkladakhAM struct {
	Recorder     String                                          `xml:"Recorder" json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterTovaryNaSkladakhAMRowType `xml:"RecordSet" json:"RecordSet,omitempty"`
	RecorderType String                                          `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

func (entity AccumulationRegisterTovaryNaSkladakhAM) Balance(client Client, Condition String, Dimensions String, Period Time) ([]AccumulationRegisterTovaryNaSkladakhAMBalance, error) {
	var result []AccumulationRegisterTovaryNaSkladakhAMBalance
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ТоварыНаСкладахАМ", keys, "Balance", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterTovaryNaSkladakhAM) Turnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterTovaryNaSkladakhAMTurnover, error) {
	var result []AccumulationRegisterTovaryNaSkladakhAMTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ТоварыНаСкладахАМ", keys, "Turnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterTovaryNaSkladakhAM) BalanceAndTurnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterTovaryNaSkladakhAMBalanceAndTurnover, error) {
	var result []AccumulationRegisterTovaryNaSkladakhAMBalanceAndTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ТоварыНаСкладахАМ", keys, "BalanceAndTurnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

type AccumulationRegisterTovaryNaSkladakhAMRecordType struct {
	Recorder               String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                 *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber             Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                 *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType             *String  `xml:"RecordType" json:"RecordType,omitempty"`
	DepartmentKey          *Guid    `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	MetallKey              *Guid    `xml:"Металл_Key" json:"Металл_Key,omitempty"`
	TovarnaiaGruppaKey     *Guid    `xml:"ТоварнаяГруппа_Key" json:"ТоварнаяГруппа_Key,omitempty"`
	TovarnaiaKategoriiaKey *Guid    `xml:"ТоварнаяКатегория_Key" json:"ТоварнаяКатегория_Key,omitempty"`
	TovarnaiaPozitsiiaKey  *Guid    `xml:"ТоварнаяПозиция_Key" json:"ТоварнаяПозиция_Key,omitempty"`
	ItemKey                *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	Quantity               *Int     `xml:"Количество" json:"Количество,omitempty"`
	Weight                 *Float   `xml:"Вес" json:"Вес,omitempty"`
	RoznichnaiaStoimost    *Float   `xml:"РозничнаяСтоимость" json:"РозничнаяСтоимость,omitempty"`
	RecorderType           String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterSummyPoFinmonitoringu struct {
	Recorder     String                                             `xml:"Recorder" json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterSummyPoFinmonitoringuRowType `xml:"RecordSet" json:"RecordSet,omitempty"`
	RecorderType String                                             `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

func (entity AccumulationRegisterSummyPoFinmonitoringu) Balance(client Client, Condition String, Dimensions String, Period Time) ([]AccumulationRegisterSummyPoFinmonitoringuBalance, error) {
	var result []AccumulationRegisterSummyPoFinmonitoringuBalance
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_СуммыПоФинмониторингу", keys, "Balance", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterSummyPoFinmonitoringu) Turnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterSummyPoFinmonitoringuTurnover, error) {
	var result []AccumulationRegisterSummyPoFinmonitoringuTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_СуммыПоФинмониторингу", keys, "Turnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterSummyPoFinmonitoringu) BalanceAndTurnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterSummyPoFinmonitoringuBalanceAndTurnover, error) {
	var result []AccumulationRegisterSummyPoFinmonitoringuBalanceAndTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_СуммыПоФинмониторингу", keys, "BalanceAndTurnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

type AccumulationRegisterSummyPoFinmonitoringuRecordType struct {
	Recorder              String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber            Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType            *String  `xml:"RecordType" json:"RecordType,omitempty"`
	OrganizatsiiaKey      *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DogovorKontragentaKey *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentUcheta        *String  `xml:"ДокументУчета" json:"ДокументУчета,omitempty"`
	SummaOtgruzki         *Float   `xml:"СуммаОтгрузки" json:"СуммаОтгрузки,omitempty"`
	SummaOplaty           *Float   `xml:"СуммаОплаты" json:"СуммаОплаты,omitempty"`
	SummaVozvrata         *Float   `xml:"СуммаВозврата" json:"СуммаВозврата,omitempty"`
	RecorderType          String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	DokumentUchetaType    *String  `xml:"ДокументУчета_Type" json:"ДокументУчета_Type,omitempty"`
}

type InformationRegisterTsenyNomenklaturyKontragentov struct {
	Recorder     String                                                    `xml:"Recorder" json:"Recorder,omitempty"`
	RecordSet    []InformationRegisterTsenyNomenklaturyKontragentovRowType `xml:"RecordSet" json:"RecordSet,omitempty"`
	RecorderType String                                                    `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type InformationRegisterTsenyNomenklaturyKontragentovRecordType struct {
	Recorder                       *String  `xml:"Recorder" json:"Recorder,omitempty"`
	Period                         Time     `xml:"Period" json:"Period,omitempty"`
	LineNumber                     *Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                         *Boolean `xml:"Active" json:"Active,omitempty"`
	TipTsenKey                     Guid     `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
	ItemKey                        Guid     `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    Guid     `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey Guid     `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        Guid     `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	Cost                           *Float   `xml:"Цена" json:"Цена,omitempty"`
	ValiutaKey                     *Guid    `xml:"Валюта_Key" json:"Валюта_Key,omitempty"`
	EdinitsaIzmereniiaKey          *Guid    `xml:"ЕдиницаИзмерения_Key" json:"ЕдиницаИзмерения_Key,omitempty"`
	RecorderType                   *String  `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

func (entity InformationRegisterTsenyNomenklaturyKontragentovRecordType) SliceLast(client Client, Condition String, Period Time) ([]InformationRegisterTsenyNomenklaturyKontragentovRecordType, error) {
	var result []InformationRegisterTsenyNomenklaturyKontragentovRecordType
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition)))}
	keys := []string{fmt.Sprintf("ТипЦен_Key=guid'%s' ", url.PathEscape(string(entity.TipTsenKey))), fmt.Sprintf("Номенклатура_Key=guid'%s' ", url.PathEscape(string(entity.ItemKey))), fmt.Sprintf("СерияНоменклатуры_Key=guid'%s' ", url.PathEscape(string(entity.InstanceKey))), fmt.Sprintf("ХарактеристикаНоменклатуры_Key=guid'%s' ", url.PathEscape(string(entity.KharakteristikaNomenklaturyKey))), fmt.Sprintf("Размер_Key=guid'%s' ", url.PathEscape(string(entity.SizeKey)))}
	raw, err := client.executeEntityMethod("InformationRegister_ЦеныНоменклатурыКонтрагентов_RecordType", keys, "SliceLast", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity InformationRegisterTsenyNomenklaturyKontragentovRecordType) SliceFirst(client Client, Condition String, Period Time) ([]InformationRegisterTsenyNomenklaturyKontragentovRecordType, error) {
	var result []InformationRegisterTsenyNomenklaturyKontragentovRecordType
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition)))}
	keys := []string{fmt.Sprintf("ТипЦен_Key=guid'%s' ", url.PathEscape(string(entity.TipTsenKey))), fmt.Sprintf("Номенклатура_Key=guid'%s' ", url.PathEscape(string(entity.ItemKey))), fmt.Sprintf("СерияНоменклатуры_Key=guid'%s' ", url.PathEscape(string(entity.InstanceKey))), fmt.Sprintf("ХарактеристикаНоменклатуры_Key=guid'%s' ", url.PathEscape(string(entity.KharakteristikaNomenklaturyKey))), fmt.Sprintf("Размер_Key=guid'%s' ", url.PathEscape(string(entity.SizeKey)))}
	raw, err := client.executeEntityMethod("InformationRegister_ЦеныНоменклатурыКонтрагентов_RecordType", keys, "SliceFirst", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

type AccumulationRegisterVzaimoraschetySKontragentami struct {
	Recorder     String                                                    `xml:"Recorder" json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterVzaimoraschetySKontragentamiRowType `xml:"RecordSet" json:"RecordSet,omitempty"`
	RecorderType String                                                    `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

func (entity AccumulationRegisterVzaimoraschetySKontragentami) Balance(client Client, Condition String, Dimensions String, Period Time) ([]AccumulationRegisterVzaimoraschetySKontragentamiBalance, error) {
	var result []AccumulationRegisterVzaimoraschetySKontragentamiBalance
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ВзаиморасчетыСКонтрагентами", keys, "Balance", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterVzaimoraschetySKontragentami) Turnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterVzaimoraschetySKontragentamiTurnover, error) {
	var result []AccumulationRegisterVzaimoraschetySKontragentamiTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ВзаиморасчетыСКонтрагентами", keys, "Turnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterVzaimoraschetySKontragentami) BalanceAndTurnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterVzaimoraschetySKontragentamiBalanceAndTurnover, error) {
	var result []AccumulationRegisterVzaimoraschetySKontragentamiBalanceAndTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ВзаиморасчетыСКонтрагентами", keys, "BalanceAndTurnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

type AccumulationRegisterVzaimoraschetySKontragentamiRecordType struct {
	Recorder              String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber            Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType            *String  `xml:"RecordType" json:"RecordType,omitempty"`
	DogovorKontragentaKey *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	Sdelka                *String  `xml:"Сделка" json:"Сделка,omitempty"`
	SummaVzaimoraschetov  *Float   `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	SummaUpr              *Float   `xml:"СуммаУпр" json:"СуммаУпр,omitempty"`
	RecorderType          String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	SdelkaType            *String  `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type AccumulationRegisterSummyPokupokPoDiskontnymKartam struct {
	Recorder     String                                                      `xml:"Recorder" json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterSummyPokupokPoDiskontnymKartamRowType `xml:"RecordSet" json:"RecordSet,omitempty"`
	RecorderType String                                                      `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

func (entity AccumulationRegisterSummyPokupokPoDiskontnymKartam) Balance(client Client, Condition String, Dimensions String, Period Time) ([]AccumulationRegisterSummyPokupokPoDiskontnymKartamBalance, error) {
	var result []AccumulationRegisterSummyPokupokPoDiskontnymKartamBalance
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_СуммыПокупокПоДисконтнымКартам", keys, "Balance", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterSummyPokupokPoDiskontnymKartam) Turnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterSummyPokupokPoDiskontnymKartamTurnover, error) {
	var result []AccumulationRegisterSummyPokupokPoDiskontnymKartamTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_СуммыПокупокПоДисконтнымКартам", keys, "Turnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterSummyPokupokPoDiskontnymKartam) BalanceAndTurnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterSummyPokupokPoDiskontnymKartamBalanceAndTurnover, error) {
	var result []AccumulationRegisterSummyPokupokPoDiskontnymKartamBalanceAndTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_СуммыПокупокПоДисконтнымКартам", keys, "BalanceAndTurnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

type AccumulationRegisterSummyPokupokPoDiskontnymKartamRecordType struct {
	Recorder               String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                 *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber             Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                 *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType             *String  `xml:"RecordType" json:"RecordType,omitempty"`
	MemberCardKey          *Guid    `xml:"ДисконтнаяКарта_Key" json:"ДисконтнаяКарта_Key,omitempty"`
	DataSpisaniia          *Time    `xml:"ДатаСписания" json:"ДатаСписания,omitempty"`
	Sum                    *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	SummaBonusov           *Float   `xml:"СуммаБонусов" json:"СуммаБонусов,omitempty"`
	SummaVremennykhBonusov *Float   `xml:"СуммаВременныхБонусов" json:"СуммаВременныхБонусов,omitempty"`
	RecorderType           String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterVypolneniePlanaProdazh struct {
	Recorder     String                                              `xml:"Recorder" json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterVypolneniePlanaProdazhRowType `xml:"RecordSet" json:"RecordSet,omitempty"`
	RecorderType String                                              `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

func (entity AccumulationRegisterVypolneniePlanaProdazh) Turnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterVypolneniePlanaProdazhTurnover, error) {
	var result []AccumulationRegisterVypolneniePlanaProdazhTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ВыполнениеПланаПродаж", keys, "Turnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

type AccumulationRegisterVypolneniePlanaProdazhRecordType struct {
	Recorder      String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period        *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber    Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active        *Boolean `xml:"Active" json:"Active,omitempty"`
	DepartmentKey *Guid    `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	SummaPlan     *Float   `xml:"СуммаПлан" json:"СуммаПлан,omitempty"`
	SummaFakt     *Float   `xml:"СуммаФакт" json:"СуммаФакт,omitempty"`
	RecorderType  String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterDavalcheskiiMetall struct {
	Recorder     String                                          `xml:"Recorder" json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterDavalcheskiiMetallRowType `xml:"RecordSet" json:"RecordSet,omitempty"`
	RecorderType String                                          `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

func (entity AccumulationRegisterDavalcheskiiMetall) Balance(client Client, Condition String, Dimensions String, Period Time) ([]AccumulationRegisterDavalcheskiiMetallBalance, error) {
	var result []AccumulationRegisterDavalcheskiiMetallBalance
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ДавальческийМеталл", keys, "Balance", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterDavalcheskiiMetall) Turnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterDavalcheskiiMetallTurnover, error) {
	var result []AccumulationRegisterDavalcheskiiMetallTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ДавальческийМеталл", keys, "Turnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterDavalcheskiiMetall) BalanceAndTurnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterDavalcheskiiMetallBalanceAndTurnover, error) {
	var result []AccumulationRegisterDavalcheskiiMetallBalanceAndTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ДавальческийМеталл", keys, "BalanceAndTurnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

type AccumulationRegisterDavalcheskiiMetallRecordType struct {
	Recorder              String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber            Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType            *String  `xml:"RecordType" json:"RecordType,omitempty"`
	OrganizatsiiaKey      *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DogovorKontragentaKey *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	MetallKey             *Guid    `xml:"Металл_Key" json:"Металл_Key,omitempty"`
	Weight                *Float   `xml:"Вес" json:"Вес,omitempty"`
	RecorderType          String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

type AccumulationRegisterDenezhnyeSredstva struct {
	Recorder     String                                         `xml:"Recorder" json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterDenezhnyeSredstvaRowType `xml:"RecordSet" json:"RecordSet,omitempty"`
	RecorderType String                                         `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

func (entity AccumulationRegisterDenezhnyeSredstva) Balance(client Client, Condition String, Dimensions String, Period Time) ([]AccumulationRegisterDenezhnyeSredstvaBalance, error) {
	var result []AccumulationRegisterDenezhnyeSredstvaBalance
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ДенежныеСредства", keys, "Balance", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterDenezhnyeSredstva) Turnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterDenezhnyeSredstvaTurnover, error) {
	var result []AccumulationRegisterDenezhnyeSredstvaTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ДенежныеСредства", keys, "Turnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterDenezhnyeSredstva) BalanceAndTurnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterDenezhnyeSredstvaBalanceAndTurnover, error) {
	var result []AccumulationRegisterDenezhnyeSredstvaBalanceAndTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ДенежныеСредства", keys, "BalanceAndTurnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

type AccumulationRegisterDenezhnyeSredstvaRecordType struct {
	Recorder                 String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                   *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber               Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                   *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType               *String  `xml:"RecordType" json:"RecordType,omitempty"`
	OrganizatsiiaKey         *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	VidDenezhnykhSredstv     *String  `xml:"ВидДенежныхСредств" json:"ВидДенежныхСредств,omitempty"`
	BankovskiiSchetKassa     *String  `xml:"БанковскийСчетКасса" json:"БанковскийСчетКасса,omitempty"`
	Sum                      *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	SummaUpr                 *Float   `xml:"СуммаУпр" json:"СуммаУпр,omitempty"`
	RecorderType             String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	BankovskiiSchetKassaType *String  `xml:"БанковскийСчетКасса_Type" json:"БанковскийСчетКасса_Type,omitempty"`
}

type AccumulationRegisterTovaryPeredannye struct {
	Recorder     String                                        `xml:"Recorder" json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterTovaryPeredannyeRowType `xml:"RecordSet" json:"RecordSet,omitempty"`
	RecorderType String                                        `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

func (entity AccumulationRegisterTovaryPeredannye) Balance(client Client, Condition String, Dimensions String, Period Time) ([]AccumulationRegisterTovaryPeredannyeBalance, error) {
	var result []AccumulationRegisterTovaryPeredannyeBalance
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ТоварыПереданные", keys, "Balance", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterTovaryPeredannye) Turnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterTovaryPeredannyeTurnover, error) {
	var result []AccumulationRegisterTovaryPeredannyeTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ТоварыПереданные", keys, "Turnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterTovaryPeredannye) BalanceAndTurnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterTovaryPeredannyeBalanceAndTurnover, error) {
	var result []AccumulationRegisterTovaryPeredannyeBalanceAndTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ТоварыПереданные", keys, "BalanceAndTurnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

type AccumulationRegisterTovaryPeredannyeRecordType struct {
	Recorder                       String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                         *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber                     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                         *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType                     *String  `xml:"RecordType" json:"RecordType,omitempty"`
	ItemKey                        *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid    `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid    `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	DogovorKontragentaKey          *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	Sdelka                         *String  `xml:"Сделка" json:"Сделка,omitempty"`
	Quantity                       *Int     `xml:"Количество" json:"Количество,omitempty"`
	Weight                         *Float   `xml:"Вес" json:"Вес,omitempty"`
	SummaVzaimoraschetov           *Float   `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	RecorderType                   String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	SdelkaType                     *String  `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type AccumulationRegisterDenezhnyeSredstvaKSpisaniiu struct {
	Recorder     String                                                   `xml:"Recorder" json:"Recorder,omitempty"`
	RecordSet    []AccumulationRegisterDenezhnyeSredstvaKSpisaniiuRowType `xml:"RecordSet" json:"RecordSet,omitempty"`
	RecorderType String                                                   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
}

func (entity AccumulationRegisterDenezhnyeSredstvaKSpisaniiu) Balance(client Client, Condition String, Dimensions String, Period Time) ([]AccumulationRegisterDenezhnyeSredstvaKSpisaniiuBalance, error) {
	var result []AccumulationRegisterDenezhnyeSredstvaKSpisaniiuBalance
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ДенежныеСредстваКСписанию", keys, "Balance", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterDenezhnyeSredstvaKSpisaniiu) Turnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterDenezhnyeSredstvaKSpisaniiuTurnover, error) {
	var result []AccumulationRegisterDenezhnyeSredstvaKSpisaniiuTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ДенежныеСредстваКСписанию", keys, "Turnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

func (entity AccumulationRegisterDenezhnyeSredstvaKSpisaniiu) BalanceAndTurnovers(client Client, Condition String, Dimensions String, EndPeriod Time, StartPeriod Time) ([]AccumulationRegisterDenezhnyeSredstvaKSpisaniiuBalanceAndTurnover, error) {
	var result []AccumulationRegisterDenezhnyeSredstvaKSpisaniiuBalanceAndTurnover
	args := map[string]string{"Condition": fmt.Sprintf("'%s'", url.PathEscape(string(Condition))), "Dimensions": fmt.Sprintf("'%s'", url.PathEscape(string(Dimensions)))}
	keys := []string{fmt.Sprintf("Recorder='%s' ", url.PathEscape(string(entity.Recorder))), fmt.Sprintf("Recorder_Type='%s' ", url.PathEscape(string(entity.RecorderType)))}
	raw, err := client.executeEntityMethod("AccumulationRegister_ДенежныеСредстваКСписанию", keys, "BalanceAndTurnovers", args)
	if err != nil {
		return result, err
	}
	err = json.Unmarshal([]byte(raw), &result)
	if err != nil {
		return result, err
	}
	return result, nil
}

type AccumulationRegisterDenezhnyeSredstvaKSpisaniiuRecordType struct {
	Recorder                 String   `xml:"Recorder" json:"Recorder,omitempty"`
	Period                   *Time    `xml:"Period" json:"Period,omitempty"`
	LineNumber               Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Active                   *Boolean `xml:"Active" json:"Active,omitempty"`
	RecordType               *String  `xml:"RecordType" json:"RecordType,omitempty"`
	VidDenezhnykhSredstv     *String  `xml:"ВидДенежныхСредств" json:"ВидДенежныхСредств,omitempty"`
	BankovskiiSchetKassa     *String  `xml:"БанковскийСчетКасса" json:"БанковскийСчетКасса,omitempty"`
	DokumentSpisaniia        *String  `xml:"ДокументСписания" json:"ДокументСписания,omitempty"`
	TypeOfMovingMoneyKey     *Guid    `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	Sum                      *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	RecorderType             String   `xml:"Recorder_Type" json:"Recorder_Type,omitempty"`
	BankovskiiSchetKassaType *String  `xml:"БанковскийСчетКасса_Type" json:"БанковскийСчетКасса_Type,omitempty"`
	DokumentSpisaniiaType    *String  `xml:"ДокументСписания_Type" json:"ДокументСписания_Type,omitempty"`
}

type CatalogDogovoryKontragentov struct {
	Key                                                     Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                                             *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                                             *String  `xml:"Description" json:"Description,omitempty"`
	Code                                                    *String  `xml:"Code" json:"Code,omitempty"`
	OwnerKey                                                *Guid    `xml:"Owner_Key" json:"Owner_Key,omitempty"`
	ParentKey                                               *Guid    `xml:"Parent_Key" json:"Parent_Key,omitempty"`
	IsFolder                                                *Boolean `xml:"IsFolder" json:"IsFolder,omitempty"`
	DeletionMark                                            *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	ValiutaVzaimoraschetovKey                               *Guid    `xml:"ВалютаВзаиморасчетов_Key" json:"ВалютаВзаиморасчетов_Key,omitempty"`
	VedenieVzaimoraschetov                                  *String  `xml:"ВедениеВзаиморасчетов" json:"ВедениеВзаиморасчетов,omitempty"`
	VidAgentskogoDogovora                                   *String  `xml:"ВидАгентскогоДоговора" json:"ВидАгентскогоДоговора,omitempty"`
	VidVzaimoraschetovKey                                   *Guid    `xml:"ВидВзаиморасчетов_Key" json:"ВидВзаиморасчетов_Key,omitempty"`
	VidDogovora                                             *String  `xml:"ВидДоговора" json:"ВидДоговора,omitempty"`
	Date                                                    *Time    `xml:"Дата" json:"Дата,omitempty"`
	DerzhatRezervBezOplatyOgranichennoeVremia               *Boolean `xml:"ДержатьРезервБезОплатыОграниченноеВремя" json:"ДержатьРезервБезОплатыОграниченноеВремя,omitempty"`
	DopustimaiaSummaZadolzhennosti                          *Float   `xml:"ДопустимаяСуммаЗадолженности" json:"ДопустимаяСуммаЗадолженности,omitempty"`
	DopustimoeChisloDneiZadolzhennosti                      *Int     `xml:"ДопустимоеЧислоДнейЗадолженности" json:"ДопустимоеЧислоДнейЗадолженности,omitempty"`
	Comment                                                 *String  `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontrolirovatDenezhnyeSredstvaKomitenta                 *Boolean `xml:"КонтролироватьДенежныеСредстваКомитента" json:"КонтролироватьДенежныеСредстваКомитента,omitempty"`
	KontrolirovatOtritsatelnyeOstatkiPoDavalcheskomuMetallu *Boolean `xml:"КонтролироватьОтрицательныеОстаткиПоДавальческомуМеталлу" json:"КонтролироватьОтрицательныеОстаткиПоДавальческомуМеталлу,omitempty"`
	KontrolirovatSummuZadolzhennosti                        *Boolean `xml:"КонтролироватьСуммуЗадолженности" json:"КонтролироватьСуммуЗадолженности,omitempty"`
	KontrolirovatChisloDneiZadolzhennosti                   *Boolean `xml:"КонтролироватьЧислоДнейЗадолженности" json:"КонтролироватьЧислоДнейЗадолженности,omitempty"`
	Number                                                  *String  `xml:"Номер" json:"Номер,omitempty"`
	OrganizatsiiaKey                                        *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiMenedzherKey                               *Guid    `xml:"ОтветственныйМенеджер_Key" json:"ОтветственныйМенеджер_Key,omitempty"`
	OtrazhatSummuRealizatsii                                *Boolean `xml:"ОтражатьСуммуРеализации" json:"ОтражатьСуммуРеализации,omitempty"`
	PredostavliatDannyeVFinMonitoring                       *Boolean `xml:"ПредоставлятьДанныеВФинМониторинг" json:"ПредоставлятьДанныеВФинМониторинг,omitempty"`
	PriemNaKomissiiuOtFizicheskogoLitsa                     *Boolean `xml:"ПриемНаКомиссиюОтФизическогоЛица" json:"ПриемНаКомиссиюОтФизическогоЛица,omitempty"`
	ProtsentKomissionnogoVoznagrazhdeniia                   *Float   `xml:"ПроцентКомиссионногоВознаграждения" json:"ПроцентКомиссионногоВознаграждения,omitempty"`
	ProtsentPredoplaty                                      *Float   `xml:"ПроцентПредоплаты" json:"ПроцентПредоплаты,omitempty"`
	RaschetyVUslovnykhEdinitsakh                            *Boolean `xml:"РасчетыВУсловныхЕдиницах" json:"РасчетыВУсловныхЕдиницах,omitempty"`
	SposobRaschetaKomissionnogoVoznagrazhdeniia             *String  `xml:"СпособРасчетаКомиссионногоВознаграждения" json:"СпособРасчетаКомиссионногоВознаграждения,omitempty"`
	TipTsen                                                 *String  `xml:"ТипЦен" json:"ТипЦен,omitempty"`
	UdalitPerekhodPravaSobstvennostiDliaFinMonitoringa      *String  `xml:"УдалитьПереходПраваСобственностиДляФинМониторинга" json:"УдалитьПереходПраваСобственностиДляФинМониторинга,omitempty"`
	UsloviiaOplatyKey                                       *Guid    `xml:"УсловияОплаты_Key" json:"УсловияОплаты_Key,omitempty"`
	UchetAgentskogoNDS                                      *Boolean `xml:"УчетАгентскогоНДС" json:"УчетАгентскогоНДС,omitempty"`
	ChisloDneiRezervaBezOplaty                              *Int     `xml:"ЧислоДнейРезерваБезОплаты" json:"ЧислоДнейРезерваБезОплаты,omitempty"`
	UsloviiaPriemaIzdeliiNaKomissiiuKey                     *Guid    `xml:"УсловияПриемаИзделийНаКомиссию_Key" json:"УсловияПриемаИзделийНаКомиссию_Key,omitempty"`
	DavalcheskiiMetall                                      *Boolean `xml:"ДавальческийМеталл" json:"ДавальческийМеталл,omitempty"`
	OtsenkaMaterialovVProizvodstvePoSrednei                 *Boolean `xml:"ОценкаМатериаловВПроизводствеПоСредней" json:"ОценкаМатериаловВПроизводствеПоСредней,omitempty"`
	OtsenkaMaterialovVProizvodstveFIFO                      *Boolean `xml:"ОценкаМатериаловВПроизводствеФИФО" json:"ОценкаМатериаловВПроизводствеФИФО,omitempty"`
	BIdentifikator                                          *String  `xml:"Б_Идентификатор" json:"Б_Идентификатор,omitempty"`
	TipTsenType                                             *String  `xml:"ТипЦен_Type" json:"ТипЦен_Type,omitempty"`
}

type Order struct {
	Key                        Guid                                                `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                *String                                             `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                     *String                                             `xml:"Number" json:"Number,omitempty"`
	Date                       *Time                                               `xml:"Date" json:"Date,omitempty"`
	DeletionMark               *Boolean                                            `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                     *Boolean                                            `xml:"Posted" json:"Posted,omitempty"`
	Weight                     *Float                                              `xml:"ВесДокумента" json:"ВесДокумента,omitempty"`
	OperationType              *String                                             `xml:"ВидОперации" json:"ВидОперации,omitempty"`
	Zaarkhivirovan             *Boolean                                            `xml:"Заархивирован" json:"Заархивирован,omitempty"`
	KassaKKMKey                *Guid                                               `xml:"КассаККМ_Key" json:"КассаККМ_Key,omitempty"`
	KassirKey                  *Guid                                               `xml:"Кассир_Key" json:"Кассир_Key,omitempty"`
	KolichestvoDokumenta       *Int                                                `xml:"КоличествоДокумента" json:"КоличествоДокумента,omitempty"`
	Comment                    *String                                             `xml:"Комментарий" json:"Комментарий,omitempty"`
	GungNumber                 *Int                                                `xml:"НомерСменыККМ" json:"НомерСменыККМ,omitempty"`
	NumberKKT                  *Int                                                `xml:"НомерЧекаККМ" json:"НомерЧекаККМ,omitempty"`
	OrganizatsiiaKey           *Guid                                               `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey           *Guid                                               `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	DepartmentKey              *Guid                                               `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	SumOfDocument              *Float                                              `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	SummaOplatyBonusom         *Float                                              `xml:"СуммаОплатыБонусом" json:"СуммаОплатыБонусом,omitempty"`
	TipDokumenta               *String                                             `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	ChekKKMKey                 *Guid                                               `xml:"ЧекККМ_Key" json:"ЧекККМ_Key,omitempty"`
	ChekProbitNaKKM            *Boolean                                            `xml:"ЧекПробитНаККМ" json:"ЧекПробитНаККМ,omitempty"`
	TsenaVkliuchaetNDS         *Boolean                                            `xml:"ЦенаВключаетНДС" json:"ЦенаВключаетНДС,omitempty"`
	SkidkiRasschitany          *Boolean                                            `xml:"СкидкиРассчитаны" json:"СкидкиРассчитаны,omitempty"`
	DokumentOsnovanie          *String                                             `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	MemberCardKey              *Guid                                               `xml:"ДисконтнаяКарта_Key" json:"ДисконтнаяКарта_Key,omitempty"`
	OpisanieKarty              *String                                             `xml:"ОписаниеКарты" json:"ОписаниеКарты,omitempty"`
	Bonusnaia                  *Boolean                                            `xml:"Бонусная" json:"Бонусная,omitempty"`
	Pochta                     *String                                             `xml:"Почта" json:"Почта,omitempty"`
	Telefon                    *String                                             `xml:"Телефон" json:"Телефон,omitempty"`
	Payments                   *[]DocumentChekKKMOplataRowType                     `xml:"Оплата" json:"Оплата,omitempty"`
	OplataSertifikatami        *[]DocumentChekKKMOplataSertifikatamiRowType        `xml:"ОплатаСертификатами" json:"ОплатаСертификатами,omitempty"`
	ProdazhaSertifikatov       *[]DocumentChekKKMProdazhaSertifikatovRowType       `xml:"ПродажаСертификатов" json:"ПродажаСертификатов,omitempty"`
	Goods                      *[]DocumentChekKKMTovaryRowType                     `xml:"Товары" json:"Товары,omitempty"`
	DokumentyObmena            *[]DocumentChekKKMDokumentyObmenaRowType            `xml:"ДокументыОбмена" json:"ДокументыОбмена,omitempty"`
	DogovoraRassrochkiProdazha *[]DocumentChekKKMDogovoraRassrochkiProdazhaRowType `xml:"ДоговораРассрочкиПродажа" json:"ДоговораРассрочкиПродажа,omitempty"`
	DogovoraRassrochkiOplata   *[]DocumentChekKKMDogovoraRassrochkiOplataRowType   `xml:"ДоговораРассрочкиОплата" json:"ДоговораРассрочкиОплата,omitempty"`
	OplataBallami              *[]DocumentChekKKMOplataBallamiRowType              `xml:"ОплатаБаллами" json:"ОплатаБаллами,omitempty"`
	SkidkiNatsenki             *[]DocumentChekKKMSkidkiNatsenkiRowType             `xml:"СкидкиНаценки" json:"СкидкиНаценки,omitempty"`
	UpravliaemyeSkidki         *[]DocumentChekKKMUpravliaemyeSkidkiRowType         `xml:"УправляемыеСкидки" json:"УправляемыеСкидки,omitempty"`
	Podarki                    *[]DocumentChekKKMPodarkiRowType                    `xml:"Подарки" json:"Подарки,omitempty"`
	Kupony                     *[]DocumentChekKKMKuponyRowType                     `xml:"Купоны" json:"Купоны,omitempty"`
	DokumentOsnovanieType      *String                                             `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
}

func (entity Order) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity Order) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentChekKKMOplata struct {
	Key                     Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber              Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	VidOplatyKey            *Guid    `xml:"ВидОплаты_Key" json:"ВидОплаты_Key,omitempty"`
	NomerVidaOplaty         *Int     `xml:"НомерВидаОплаты" json:"НомерВидаОплаты,omitempty"`
	ProtsentTorgovoiUstupki *Float   `xml:"ПроцентТорговойУступки" json:"ПроцентТорговойУступки,omitempty"`
	Sum                     *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	SummaTorgovoiUstupki    *Float   `xml:"СуммаТорговойУступки" json:"СуммаТорговойУступки,omitempty"`
	Khesh                   *String  `xml:"Хэш" json:"Хэш,omitempty"`
	KartaSberbanka          *Boolean `xml:"КартаСбербанка" json:"КартаСбербанка,omitempty"`
	Poslednie4              *String  `xml:"Последние4" json:"Последние4,omitempty"`
	KodRRN                  *String  `xml:"КодRRN" json:"КодRRN,omitempty"`
	Identifikator           *String  `xml:"Идентификатор" json:"Идентификатор,omitempty"`
	TransactionId           *String  `xml:"TransactionId" json:"TransactionId,omitempty"`
}

type DocumentChekKKMOplataSertifikatami struct {
	Key                      Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber               Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	SertifikatKey            *Guid   `xml:"Сертификат_Key" json:"Сертификат_Key,omitempty"`
	NomerSertifikata         *String `xml:"НомерСертификата" json:"НомерСертификата,omitempty"`
	Sum                      *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaPokupkiPogashennaia *Float  `xml:"СуммаПокупкиПогашенная" json:"СуммаПокупкиПогашенная,omitempty"`
}

type DocumentChekKKMProdazhaSertifikatov struct {
	Key                                 Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                          Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	SertifikatKey                       *Guid    `xml:"Сертификат_Key" json:"Сертификат_Key,omitempty"`
	NomerSertifikata                    *String  `xml:"НомерСертификата" json:"НомерСертификата,omitempty"`
	Sum                                 *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	SrokDeistviiaSertifikataOgranichen  *Boolean `xml:"СрокДействияСертификатаОграничен" json:"СрокДействияСертификатаОграничен,omitempty"`
	KolichestvoDneiDeistviiaSertifikata *Int     `xml:"КоличествоДнейДействияСертификата" json:"КоличествоДнейДействияСертификата,omitempty"`
}

type DocumentChekKKMTovary struct {
	Key                                        Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                                 Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	MID                                        *String  `xml:"Артикул" json:"Артикул,omitempty"`
	Weight                                     *Float   `xml:"Вес" json:"Вес,omitempty"`
	ZnachenieUsloviiaAvtomaticheskoiSkidki     *String  `xml:"ЗначениеУсловияАвтоматическойСкидки" json:"ЗначениеУсловияАвтоматическойСкидки,omitempty"`
	Quantity                                   *Int     `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                                    *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	PercentAutoDiscount                        *Float   `xml:"ПроцентАвтоматическойСкидки" json:"ПроцентАвтоматическойСкидки,omitempty"`
	PercentManualDiscount                      *Float   `xml:"ПроцентРучнойСкидки" json:"ПроцентРучнойСкидки,omitempty"`
	SizeKey                                    *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	RegistratsiiaProdazhi                      *Boolean `xml:"РегистрацияПродажи" json:"РегистрацияПродажи,omitempty"`
	InstanceKey                                *Guid    `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	SumManualDiscount                          *Float   `xml:"СуммаРучнойСкидки" json:"СуммаРучнойСкидки,omitempty"`
	DepartmentKey                              *Guid    `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	StavkaNDS                                  *String  `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                                        *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                                   *Float   `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	UslovieAvtomaticheskoiSkidki               *String  `xml:"УсловиеАвтоматическойСкидки" json:"УсловиеАвтоматическойСкидки,omitempty"`
	KharakteristikaNomenklaturyKey             *Guid    `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                                       *Float   `xml:"Цена" json:"Цена,omitempty"`
	Shtrikhkod                                 *String  `xml:"Штрихкод" json:"Штрихкод,omitempty"`
	OrderKey                                   *Guid    `xml:"КлючПродажи_Key" json:"КлючПродажи_Key,omitempty"`
	KliuchSviazi                               *Int     `xml:"КлючСвязи" json:"КлючСвязи,omitempty"`
	ProdazhaPodarka                            *Boolean `xml:"ПродажаПодарка" json:"ПродажаПодарка,omitempty"`
	SumAutoDiscount                            *Float   `xml:"СуммаАвтоматическойСкидки" json:"СуммаАвтоматическойСкидки,omitempty"`
	SummaBonusov                               *Float   `xml:"СуммаБонусов" json:"СуммаБонусов,omitempty"`
	SostavStrokiDliaRassrochkiKey              *Guid    `xml:"СоставСтрокиДляРассрочки_Key" json:"СоставСтрокиДляРассрочки_Key,omitempty"`
	Komitent                                   *String  `xml:"Комитент" json:"Комитент,omitempty"`
	TelefonKomitenta                           *String  `xml:"ТелефонКомитента" json:"ТелефонКомитента,omitempty"`
	INNkomitenta                               *String  `xml:"ИННкомитента" json:"ИННкомитента,omitempty"`
	ZnachenieUsloviiaAvtomaticheskoiSkidkiType *String  `xml:"ЗначениеУсловияАвтоматическойСкидки_Type" json:"ЗначениеУсловияАвтоматическойСкидки_Type,omitempty"`
}

type DocumentChekKKMDokumentyObmena struct {
	Key         Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber  Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	DokumentKey *Guid  `xml:"Документ_Key" json:"Документ_Key,omitempty"`
	Sum         *Float `xml:"Сумма" json:"Сумма,omitempty"`
}

type DocumentChekKKMDogovoraRassrochkiProdazha struct {
	Key                  Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber           Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	DogovorRassrochkiKey *Guid  `xml:"ДоговорРассрочки_Key" json:"ДоговорРассрочки_Key,omitempty"`
	Sum                  *Float `xml:"Сумма" json:"Сумма,omitempty"`
}

type DocumentChekKKMDogovoraRassrochkiOplata struct {
	Key                  Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber           Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	DogovorRassrochkiKey *Guid  `xml:"ДоговорРассрочки_Key" json:"ДоговорРассрочки_Key,omitempty"`
	Sum                  *Float `xml:"Сумма" json:"Сумма,omitempty"`
}

type DocumentChekKKMOplataBallami struct {
	Key                    Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber             Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Khesh                  *String `xml:"Хэш" json:"Хэш,omitempty"`
	Poslednie4             *String `xml:"Последние4" json:"Последние4,omitempty"`
	Sum                    *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	Identifikator          *String `xml:"Идентификатор" json:"Идентификатор,omitempty"`
	TransactionId          *String `xml:"TransactionId" json:"TransactionId,omitempty"`
	TransactionIdSpisaniia *String `xml:"TransactionIdСписания" json:"TransactionIdСписания,omitempty"`
}

type DocumentChekKKMSkidkiNatsenki struct {
	Key               Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber        Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	KliuchSviazi      *Int   `xml:"КлючСвязи" json:"КлючСвязи,omitempty"`
	Sum               *Float `xml:"Сумма" json:"Сумма,omitempty"`
	SkidkaNatsenkaKey *Guid  `xml:"СкидкаНаценка_Key" json:"СкидкаНаценка_Key,omitempty"`
}

type DocumentChekKKMUpravliaemyeSkidki struct {
	Key               Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber        Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	SkidkaNatsenkaKey *Guid `xml:"СкидкаНаценка_Key" json:"СкидкаНаценка_Key,omitempty"`
}

type DocumentChekKKMPodarki struct {
	Key                            Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SkidkaNatsenkaKey              *Guid  `xml:"СкидкаНаценка_Key" json:"СкидкаНаценка_Key,omitempty"`
	ItemKey                        *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid  `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	InstanceKey                    *Guid  `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid  `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	Quantity                       *Float `xml:"Количество" json:"Количество,omitempty"`
	Weight                         *Float `xml:"Вес" json:"Вес,omitempty"`
	Cost                           *Float `xml:"Цена" json:"Цена,omitempty"`
	Sum                            *Float `xml:"Сумма" json:"Сумма,omitempty"`
	DepartmentKey                  *Guid  `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	KliuchSviazi                   *Int   `xml:"КлючСвязи" json:"КлючСвязи,omitempty"`
}

type DocumentChekKKMKupony struct {
	Key          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber   Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	KliuchSviazi *Int     `xml:"КлючСвязи" json:"КлючСвязи,omitempty"`
	KuponKey     *Guid    `xml:"Купон_Key" json:"Купон_Key,omitempty"`
	NomerKupona  *String  `xml:"НомерКупона" json:"НомерКупона,omitempty"`
	Spisyvat     *Boolean `xml:"Списывать" json:"Списывать,omitempty"`
}

type DocumentPereotsenkaValiutnykhSredstv struct {
	Key                                    Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                            *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                                 *String  `xml:"Number" json:"Number,omitempty"`
	Date                                   *Time    `xml:"Date" json:"Date,omitempty"`
	DeletionMark                           *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                                 *Boolean `xml:"Posted" json:"Posted,omitempty"`
	VzaimoraschetySKontragentami           *Boolean `xml:"ВзаиморасчетыСКонтрагентами" json:"ВзаиморасчетыСКонтрагентами,omitempty"`
	VzaimoraschetySPodotchetnymiLitsami    *Boolean `xml:"ВзаиморасчетыСПодотчетнымиЛицами" json:"ВзаиморасчетыСПодотчетнымиЛицами,omitempty"`
	DenezhnyeSredstvaVKassakh              *Boolean `xml:"ДенежныеСредстваВКассах" json:"ДенежныеСредстваВКассах,omitempty"`
	DenezhnyeSredstvaNaBankovskikhSchetakh *Boolean `xml:"ДенежныеСредстваНаБанковскихСчетах" json:"ДенежныеСредстваНаБанковскихСчетах,omitempty"`
	Comment                                *String  `xml:"Комментарий" json:"Комментарий,omitempty"`
	OrganizatsiiaKey                       *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                       *Guid    `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	PoVsemOrganizatsiiam                   *Boolean `xml:"ПоВсемОрганизациям" json:"ПоВсемОрганизациям,omitempty"`
	PodrazdelenieKey                       *Guid    `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	TipDokumenta                           *String  `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
}

func (entity DocumentPereotsenkaValiutnykhSredstv) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentPereotsenkaValiutnykhSredstv) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type CatalogTipySkidokNatsenok struct {
	Key                        Guid                                                   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                *String                                                `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                *String                                                `xml:"Description" json:"Description,omitempty"`
	Code                       *String                                                `xml:"Code" json:"Code,omitempty"`
	DeletionMark               *Boolean                                               `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	ValiutaKey                 *Guid                                                  `xml:"Валюта_Key" json:"Валюта_Key,omitempty"`
	VidSkidki                  *String                                                `xml:"ВидСкидки" json:"ВидСкидки,omitempty"`
	DliaVseiNomenklatury       *Boolean                                               `xml:"ДляВсейНоменклатуры" json:"ДляВсейНоменклатуры,omitempty"`
	DliaVsekhPoluchatelei      *Boolean                                               `xml:"ДляВсехПолучателей" json:"ДляВсехПолучателей,omitempty"`
	ZnachenieUsloviia          *String                                                `xml:"ЗначениеУсловия" json:"ЗначениеУсловия,omitempty"`
	ObshcheeVremiaNachala      *Time                                                  `xml:"ОбщееВремяНачала" json:"ОбщееВремяНачала,omitempty"`
	ObshcheeVremiaOkonchaniia  *Time                                                  `xml:"ОбщееВремяОкончания" json:"ОбщееВремяОкончания,omitempty"`
	OgranichenieSkidkiNatsenki *Float                                                 `xml:"ОграничениеСкидкиНаценки" json:"ОграничениеСкидкиНаценки,omitempty"`
	PoDniamNedeli              *Boolean                                               `xml:"ПоДнямНедели" json:"ПоДнямНедели,omitempty"`
	ProtsentSkidkiNatsenki     *Float                                                 `xml:"ПроцентСкидкиНаценки" json:"ПроцентСкидкиНаценки,omitempty"`
	Uslovie                    *String                                                `xml:"Условие" json:"Условие,omitempty"`
	VremiaPoDniamNedeli        *[]CatalogTipySkidokNatsenokVremiaPoDniamNedeliRowType `xml:"ВремяПоДнямНедели" json:"ВремяПоДнямНедели,omitempty"`
	ZnachenieUsloviiaType      *String                                                `xml:"ЗначениеУсловия_Type" json:"ЗначениеУсловия_Type,omitempty"`
}

type CatalogTipySkidokNatsenokVremiaPoDniamNedeli struct {
	Key               Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber        Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	VremiaNachala     *Time    `xml:"ВремяНачала" json:"ВремяНачала,omitempty"`
	VremiaOkonchaniia *Time    `xml:"ВремяОкончания" json:"ВремяОкончания,omitempty"`
	Vybran            *Boolean `xml:"Выбран" json:"Выбран,omitempty"`
	DenNedeli         *String  `xml:"ДеньНедели" json:"ДеньНедели,omitempty"`
}

type CatalogVidyKodirovokiTsepei struct {
	Key                                             Guid                                                                                 `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                                     *String                                                                              `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                                     *String                                                                              `xml:"Description" json:"Description,omitempty"`
	Code                                            *String                                                                              `xml:"Code" json:"Code,omitempty"`
	DeletionMark                                    *Boolean                                                                             `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	IspolzovatDopNastroiki                          *Boolean                                                                             `xml:"ИспользоватьДопНастройки" json:"ИспользоватьДопНастройки,omitempty"`
	PrimerArtikula                                  *String                                                                              `xml:"ПримерАртикула" json:"ПримерАртикула,omitempty"`
	NastroikiZapolneniiaBase64Data                  *Binary                                                                              `xml:"НастройкиЗаполнения_Base64Data" json:"НастройкиЗаполнения_Base64Data,omitempty"`
	ElementyKodirovki                               *[]CatalogVidyKodirovokiTsepeiElementyKodirovkiRowType                               `xml:"ЭлементыКодировки" json:"ЭлементыКодировки,omitempty"`
	SootvetstvieZnacheniiKodrovkiZnacheniiamSvoistv *[]CatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistvRowType `xml:"СоответствиеЗначенийКодровкиЗначениямСвойств" json:"СоответствиеЗначенийКодровкиЗначениямСвойств,omitempty"`
	NastroikiZapolneniiaType                        *String                                                                              `xml:"НастройкиЗаполнения_Type" json:"НастройкиЗаполнения_Type,omitempty"`
	NastroikiZapolneniia                            *Binary                                                                              `xml:"НастройкиЗаполнения" json:"НастройкиЗаполнения,omitempty"`
}

type CatalogVidyKodirovokiTsepeiElementyKodirovki struct {
	Key                            Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	NeObiazatelnyiElement          *Boolean `xml:"НеОбязательныйЭлемент" json:"НеОбязательныйЭлемент,omitempty"`
	Element                        *String  `xml:"Элемент" json:"Элемент,omitempty"`
	SvoistvoKey                    *Guid    `xml:"Свойство_Key" json:"Свойство_Key,omitempty"`
	DlinaElementa                  *Int     `xml:"ДлинаЭлемента" json:"ДлинаЭлемента,omitempty"`
	NomerStrokiTablChasti          *Int     `xml:"НомерСтрокиТаблЧасти" json:"НомерСтрокиТаблЧасти,omitempty"`
	PeremennaiaDlina               *Boolean `xml:"ПеременнаяДлина" json:"ПеременнаяДлина,omitempty"`
	ZapolniatSvoistvoVSootvetstvii *Boolean `xml:"ЗаполнятьСвойствоВСоответствии" json:"ЗаполнятьСвойствоВСоответствии,omitempty"`
}

type CatalogVidyKodirovokiTsepeiSootvetstvieZnacheniiKodrovkiZnacheniiamSvoistv struct {
	Key                   Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber            Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	ZnachenieKodirovki    *String `xml:"ЗначениеКодировки" json:"ЗначениеКодировки,omitempty"`
	ZnachenieSvoistvaKey  *Guid   `xml:"ЗначениеСвойства_Key" json:"ЗначениеСвойства_Key,omitempty"`
	NomerStrokiTablChasti *Int    `xml:"НомерСтрокиТаблЧасти" json:"НомерСтрокиТаблЧасти,omitempty"`
	SvoistvoKey           *Guid   `xml:"Свойство_Key" json:"Свойство_Key,omitempty"`
}

type DocumentOtchetKomitentuOProdazhakh struct {
	Key                                         Guid                                                          `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                                 *String                                                       `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                                      *String                                                       `xml:"Number" json:"Number,omitempty"`
	Date                                        *Time                                                         `xml:"Date" json:"Date,omitempty"`
	DeletionMark                                *Boolean                                                      `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                                      *Boolean                                                      `xml:"Posted" json:"Posted,omitempty"`
	ValiutaDokumentaKey                         *Guid                                                         `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	Weight                                      *Float                                                        `xml:"ВесДокумента" json:"ВесДокумента,omitempty"`
	DogovorKontragentaKey                       *Guid                                                         `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie                           *String                                                       `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	DokumentSozdanVIuTD                         *Boolean                                                      `xml:"ДокументСозданВЮТД" json:"ДокументСозданВЮТД,omitempty"`
	KolichestvoDokumenta                        *Int                                                          `xml:"КоличествоДокумента" json:"КоличествоДокумента,omitempty"`
	Comment                                     *String                                                       `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey                               *Guid                                                         `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	KratnostVzaimoraschetov                     *Int                                                          `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov                         *Float                                                        `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	OrganizatsiiaKey                            *Guid                                                         `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                            *Guid                                                         `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey                            *Guid                                                         `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	ProtsentKomissionnogoVoznagrazhdeniia       *Float                                                        `xml:"ПроцентКомиссионногоВознаграждения" json:"ПроцентКомиссионногоВознаграждения,omitempty"`
	Sdelka                                      *String                                                       `xml:"Сделка" json:"Сделка,omitempty"`
	SposobRaschetaKomissionnogoVoznagrazhdeniia *String                                                       `xml:"СпособРасчетаКомиссионногоВознаграждения" json:"СпособРасчетаКомиссионногоВознаграждения,omitempty"`
	StavkaNDSVoznagrazhdeniia                   *String                                                       `xml:"СтавкаНДСВознаграждения" json:"СтавкаНДСВознаграждения,omitempty"`
	SummaVoznagrazhdeniia                       *Float                                                        `xml:"СуммаВознаграждения" json:"СуммаВознаграждения,omitempty"`
	SumOfDocument                               *Float                                                        `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	TipDokumenta                                *String                                                       `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	TipTsenKey                                  *Guid                                                         `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
	UderzhatKomissionnoeVoznagrazhdenie         *Boolean                                                      `xml:"УдержатьКомиссионноеВознаграждение" json:"УдержатьКомиссионноеВознаграждение,omitempty"`
	UsloviiaOplatyKey                           *Guid                                                         `xml:"УсловияОплаты_Key" json:"УсловияОплаты_Key,omitempty"`
	KhoziaistvennaiaOperatsiiaKey               *Guid                                                         `xml:"ХозяйственнаяОперация_Key" json:"ХозяйственнаяОперация_Key,omitempty"`
	DenezhnyeSredstva                           *[]DocumentOtchetKomitentuOProdazhakhDenezhnyeSredstvaRowType `xml:"ДенежныеСредства" json:"ДенежныеСредства,omitempty"`
	Goods                                       *[]DocumentOtchetKomitentuOProdazhakhTovaryRowType            `xml:"Товары" json:"Товары,omitempty"`
	DokumentOsnovanieType                       *String                                                       `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
	SdelkaType                                  *String                                                       `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

func (entity DocumentOtchetKomitentuOProdazhakh) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentOtchetKomitentuOProdazhakh) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentOtchetKomitentuOProdazhakhDenezhnyeSredstva struct {
	Key                   Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber            Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	VidOtchetaPoPlatezham *String `xml:"ВидОтчетаПоПлатежам" json:"ВидОтчетаПоПлатежам,omitempty"`
	StavkaNDS             *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                   *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS              *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
}

type DocumentOtchetKomitentuOProdazhakhTovary struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	DokumentPostupleniia           *String `xml:"ДокументПоступления" json:"ДокументПоступления,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	OtchetKomitentuKey             *Guid   `xml:"ОтчетКомитенту_Key" json:"ОтчетКомитенту_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	Sum                            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaVoznagrazhdeniia          *Float  `xml:"СуммаВознаграждения" json:"СуммаВознаграждения,omitempty"`
	SummaNDSVoznagrazhdeniia       *Float  `xml:"СуммаНДСВознаграждения" json:"СуммаНДСВознаграждения,omitempty"`
	SummaPostupleniia              *Float  `xml:"СуммаПоступления" json:"СуммаПоступления,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float  `xml:"Цена" json:"Цена,omitempty"`
	TsenaPostupleniia              *Float  `xml:"ЦенаПоступления" json:"ЦенаПоступления,omitempty"`
	PokupatelKey                   *Guid   `xml:"Покупатель_Key" json:"Покупатель_Key,omitempty"`
	DataRealizatsii                *Time   `xml:"ДатаРеализации" json:"ДатаРеализации,omitempty"`
	DokumentProdazhi               *String `xml:"ДокументПродажи" json:"ДокументПродажи,omitempty"`
	SchetFakturaVystavlennyiKey    *Guid   `xml:"СчетФактураВыставленный_Key" json:"СчетФактураВыставленный_Key,omitempty"`
	DokumentPostupleniiaType       *String `xml:"ДокументПоступления_Type" json:"ДокументПоступления_Type,omitempty"`
	DokumentProdazhiType           *String `xml:"ДокументПродажи_Type" json:"ДокументПродажи_Type,omitempty"`
}

type CatalogKassy struct {
	Key                         Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                 *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                 *String  `xml:"Description" json:"Description,omitempty"`
	Code                        *String  `xml:"Code" json:"Code,omitempty"`
	ParentKey                   *Guid    `xml:"Parent_Key" json:"Parent_Key,omitempty"`
	IsFolder                    *Boolean `xml:"IsFolder" json:"IsFolder,omitempty"`
	DeletionMark                *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	ValiutaDenezhnykhSredstvKey *Guid    `xml:"ВалютаДенежныхСредств_Key" json:"ВалютаДенежныхСредств_Key,omitempty"`
}

type CatalogKassiry struct {
	Key          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion  *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description  *String  `xml:"Description" json:"Description,omitempty"`
	Code         *String  `xml:"Code" json:"Code,omitempty"`
	ParentKey    *Guid    `xml:"Parent_Key" json:"Parent_Key,omitempty"`
	IsFolder     *Boolean `xml:"IsFolder" json:"IsFolder,omitempty"`
	DeletionMark *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	NomerKarty   *String  `xml:"НомерКарты" json:"НомерКарты,omitempty"`
	Parol        *String  `xml:"Пароль" json:"Пароль,omitempty"`
	FizLitsoKey  *Guid    `xml:"ФизЛицо_Key" json:"ФизЛицо_Key,omitempty"`
	NeRabotaet   *Boolean `xml:"НеРаботает" json:"НеРаботает,omitempty"`
	KTU          *Float   `xml:"КТУ" json:"КТУ,omitempty"`
}

type DocumentZaiavkaNaPereotsenkuTovarov struct {
	Key                            Guid                                                `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                    *String                                             `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                         *String                                             `xml:"Number" json:"Number,omitempty"`
	Date                           *Time                                               `xml:"Date" json:"Date,omitempty"`
	DeletionMark                   *Boolean                                            `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                         *Boolean                                            `xml:"Posted" json:"Posted,omitempty"`
	Weight                         *Float                                              `xml:"ВесДокумента" json:"ВесДокумента,omitempty"`
	DokumentSozdanVIuTD            *Boolean                                            `xml:"ДокументСозданВЮТД" json:"ДокументСозданВЮТД,omitempty"`
	KolichestvoDokumenta           *Int                                                `xml:"КоличествоДокумента" json:"КоличествоДокумента,omitempty"`
	Comment                        *String                                             `xml:"Комментарий" json:"Комментарий,omitempty"`
	OrganizatsiiaKey               *Guid                                               `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey               *Guid                                               `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	ParametryOtboraBase64Data      *Binary                                             `xml:"ПараметрыОтбора_Base64Data" json:"ПараметрыОтбора_Base64Data,omitempty"`
	PodrazdelenieKey               *Guid                                               `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	DepartmentKey                  *Guid                                               `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	TipSkidkiNatsenkiKey           *Guid                                               `xml:"ТипСкидкиНаценки_Key" json:"ТипСкидкиНаценки_Key,omitempty"`
	TipTsenKey                     *Guid                                               `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
	KhoziaistvennaiaOperatsiiaKey  *Guid                                               `xml:"ХозяйственнаяОперация_Key" json:"ХозяйственнаяОперация_Key,omitempty"`
	NastroikiZapolneniiaBase64Data *Binary                                             `xml:"НастройкиЗаполнения_Base64Data" json:"НастройкиЗаполнения_Base64Data,omitempty"`
	Goods                          *[]DocumentZaiavkaNaPereotsenkuTovarovTovaryRowType `xml:"Товары" json:"Товары,omitempty"`
	ParametryOtboraType            *String                                             `xml:"ПараметрыОтбора_Type" json:"ПараметрыОтбора_Type,omitempty"`
	NastroikiZapolneniiaType       *String                                             `xml:"НастройкиЗаполнения_Type" json:"НастройкиЗаполнения_Type,omitempty"`
	ParametryOtbora                *Binary                                             `xml:"ПараметрыОтбора" json:"ПараметрыОтбора,omitempty"`
	NastroikiZapolneniia           *Binary                                             `xml:"НастройкиЗаполнения" json:"НастройкиЗаполнения,omitempty"`
}

func (entity DocumentZaiavkaNaPereotsenkuTovarov) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentZaiavkaNaPereotsenkuTovarov) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentZaiavkaNaPereotsenkuTovarovTovary struct {
	Key                            Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float `xml:"Вес" json:"Вес,omitempty"`
	Quantity                       *Int   `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid  `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid  `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid  `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	RetailCost                     *Float `xml:"ЦенаВРознице" json:"ЦенаВРознице,omitempty"`
	TsenaVRoznitseGr               *Float `xml:"ЦенаВРозницеГр" json:"ЦенаВРозницеГр,omitempty"`
	TsenaVRoznitseStaraia          *Float `xml:"ЦенаВРозницеСтарая" json:"ЦенаВРозницеСтарая,omitempty"`
}

type CatalogProizvodstvennyeUchastki struct {
	Key                     Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion             *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description             *String  `xml:"Description" json:"Description,omitempty"`
	Code                    *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark            *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	SobstvennoeProizvodstvo *Boolean `xml:"СобственноеПроизводство" json:"СобственноеПроизводство,omitempty"`
	PoizdelnyiUchet         *Boolean `xml:"ПоиздельныйУчет" json:"ПоиздельныйУчет,omitempty"`
	GIPN                    *Boolean `xml:"ГИПН" json:"ГИПН,omitempty"`
}

type DocumentZakrytieZakazovKlientov struct {
	Key              Guid                                            `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion      *String                                         `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number           *String                                         `xml:"Number" json:"Number,omitempty"`
	Date             *Time                                           `xml:"Date" json:"Date,omitempty"`
	DeletionMark     *Boolean                                        `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted           *Boolean                                        `xml:"Posted" json:"Posted,omitempty"`
	Comment          *String                                         `xml:"Комментарий" json:"Комментарий,omitempty"`
	OtvetstvennyiKey *Guid                                           `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey *Guid                                           `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	TipDokumenta     *String                                         `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	Zakazy           *[]DocumentZakrytieZakazovKlientovZakazyRowType `xml:"Заказы" json:"Заказы,omitempty"`
}

func (entity DocumentZakrytieZakazovKlientov) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentZakrytieZakazovKlientov) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentZakrytieZakazovKlientovZakazy struct {
	Key                        Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                 Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	ZakazKlientaKey            *Guid `xml:"ЗаказКлиента_Key" json:"ЗаказКлиента_Key,omitempty"`
	PrichinaZakrytiiaZakazaKey *Guid `xml:"ПричинаЗакрытияЗаказа_Key" json:"ПричинаЗакрытияЗаказа_Key,omitempty"`
}

type CatalogProekty struct {
	Key              Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion      *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description      *String  `xml:"Description" json:"Description,omitempty"`
	Code             *String  `xml:"Code" json:"Code,omitempty"`
	ParentKey        *Guid    `xml:"Parent_Key" json:"Parent_Key,omitempty"`
	IsFolder         *Boolean `xml:"IsFolder" json:"IsFolder,omitempty"`
	DeletionMark     *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	DataNachala      *Time    `xml:"ДатаНачала" json:"ДатаНачала,omitempty"`
	DataOkonchaniia  *Time    `xml:"ДатаОкончания" json:"ДатаОкончания,omitempty"`
	Opisanie         *String  `xml:"Описание" json:"Описание,omitempty"`
	OtvetstvennyiKey *Guid    `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	BIdentifikator   *String  `xml:"Б_Идентификатор" json:"Б_Идентификатор,omitempty"`
	BNomerVersii     *String  `xml:"Б_НомерВерсии" json:"Б_НомерВерсии,omitempty"`
}

type DocumentPlatezhnoePoruchenieVkhodiashchee struct {
	Key                          Guid                                                                    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                  *String                                                                 `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                       *String                                                                 `xml:"Number" json:"Number,omitempty"`
	Date                         *Time                                                                   `xml:"Date" json:"Date,omitempty"`
	DeletionMark                 *Boolean                                                                `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                       *Boolean                                                                `xml:"Posted" json:"Posted,omitempty"`
	ValiutaDokumentaKey          *Guid                                                                   `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	OperationType                *String                                                                 `xml:"ВидОперации" json:"ВидОперации,omitempty"`
	DataVkhodiashchegoDokumenta  *Time                                                                   `xml:"ДатаВходящегоДокумента" json:"ДатаВходящегоДокумента,omitempty"`
	DataOplaty                   *Time                                                                   `xml:"ДатаОплаты" json:"ДатаОплаты,omitempty"`
	DogovorKontragentaKey        *Guid                                                                   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie            *String                                                                 `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	Comment                      *String                                                                 `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey                *Guid                                                                   `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	NomerVkhodiashchegoDokumenta *String                                                                 `xml:"НомерВходящегоДокумента" json:"НомерВходящегоДокумента,omitempty"`
	Oplacheno                    *Boolean                                                                `xml:"Оплачено" json:"Оплачено,omitempty"`
	OrganizatsiiaKey             *Guid                                                                   `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey             *Guid                                                                   `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	OtrazhenoVOperUchete         *Boolean                                                                `xml:"ОтраженоВОперУчете" json:"ОтраженоВОперУчете,omitempty"`
	PodrazdelenieKey             *Guid                                                                   `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	TypeOfMovingMoneyKey         *Guid                                                                   `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SumOfDocument                *Float                                                                  `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	SchetKontragentaKey          *Guid                                                                   `xml:"СчетКонтрагента_Key" json:"СчетКонтрагента_Key,omitempty"`
	SchetOrganizatsiiKey         *Guid                                                                   `xml:"СчетОрганизации_Key" json:"СчетОрганизации_Key,omitempty"`
	TipDokumenta                 *String                                                                 `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	ChastichnaiaOplata           *Boolean                                                                `xml:"ЧастичнаяОплата" json:"ЧастичнаяОплата,omitempty"`
	DokumentSozdanVIuTD          *Boolean                                                                `xml:"ДокументСозданВЮТД" json:"ДокументСозданВЮТД,omitempty"`
	NaznacheniePlatezha          *String                                                                 `xml:"НазначениеПлатежа" json:"НазначениеПлатежа,omitempty"`
	BDataDokumenta               *Time                                                                   `xml:"Б_ДатаДокумента" json:"Б_ДатаДокумента,omitempty"`
	BIdentifikator               *String                                                                 `xml:"Б_Идентификатор" json:"Б_Идентификатор,omitempty"`
	ExtendedPayments             *[]DocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezhaRowType `xml:"РасшифровкаПлатежа" json:"РасшифровкаПлатежа,omitempty"`
	RekvizityKontragenta         *[]DocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragentaRowType `xml:"РеквизитыКонтрагента" json:"РеквизитыКонтрагента,omitempty"`
	DokumentOsnovanieType        *String                                                                 `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
}

func (entity DocumentPlatezhnoePoruchenieVkhodiashchee) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentPlatezhnoePoruchenieVkhodiashchee) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentPlatezhnoePoruchenieVkhodiashcheeRasshifrovkaPlatezha struct {
	Key                              Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                       Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	DogovorKontragentaKey            *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentPlanirovaniiaPlatezhaKey *Guid   `xml:"ДокументПланированияПлатежа_Key" json:"ДокументПланированияПлатежа_Key,omitempty"`
	KratnostVzaimoraschetov          *Int    `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov              *Float  `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	KursVzaimoraschetovPlan          *Float  `xml:"КурсВзаиморасчетовПлан" json:"КурсВзаиморасчетовПлан,omitempty"`
	ProektKey                        *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	Sdelka                           *String `xml:"Сделка" json:"Сделка,omitempty"`
	StavkaNDS                        *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	TypeOfMovingMoneyKey             *Guid   `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov             *Float  `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	SummaNDS                         *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	Sum                              *Float  `xml:"СуммаПлатежа" json:"СуммаПлатежа,omitempty"`
	SummaPlatezhaPlan                *Float  `xml:"СуммаПлатежаПлан" json:"СуммаПлатежаПлан,omitempty"`
	SdelkaType                       *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type DocumentPlatezhnoePoruchenieVkhodiashcheeRekvizityKontragenta struct {
	Key            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Znachenie      *String `xml:"Значение" json:"Значение,omitempty"`
	Predstavlenie  *String `xml:"Представление" json:"Представление,omitempty"`
	Rekvizit       *String `xml:"Реквизит" json:"Реквизит,omitempty"`
	TipKontragenta *String `xml:"ТипКонтрагента" json:"ТипКонтрагента,omitempty"`
}

type DocumentVydachaZakaza struct {
	Key                  Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion          *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number               *String  `xml:"Number" json:"Number,omitempty"`
	Date                 *Time    `xml:"Date" json:"Date,omitempty"`
	DeletionMark         *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted               *Boolean `xml:"Posted" json:"Posted,omitempty"`
	Weight               *Float   `xml:"ВесДокумента" json:"ВесДокумента,omitempty"`
	KolichestvoDokumenta *Int     `xml:"КоличествоДокумента" json:"КоличествоДокумента,omitempty"`
}

func (entity DocumentVydachaZakaza) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentVydachaZakaza) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type CatalogFormyOgranki struct {
	Key          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion  *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description  *String  `xml:"Description" json:"Description,omitempty"`
	Code         *String  `xml:"Code" json:"Code,omitempty"`
	OwnerKey     *Guid    `xml:"Owner_Key" json:"Owner_Key,omitempty"`
	DeletionMark *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
}

type CatalogFormatyMagazinov struct {
	Key          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion  *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description  *String  `xml:"Description" json:"Description,omitempty"`
	Code         *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
}

type CatalogRabochieMesta struct {
	Key            Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion    *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description    *String  `xml:"Description" json:"Description,omitempty"`
	Code           *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark   *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	ImiaKompiutera *String  `xml:"ИмяКомпьютера" json:"ИмяКомпьютера,omitempty"`
	SetevoiPort    *Int     `xml:"СетевойПорт" json:"СетевойПорт,omitempty"`
}

type CatalogNastroikiVypolneniiaObmena struct {
	Key                                               Guid                                                                                 `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                                       *String                                                                              `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                                       *String                                                                              `xml:"Description" json:"Description,omitempty"`
	Code                                              *String                                                                              `xml:"Code" json:"Code,omitempty"`
	DeletionMark                                      *Boolean                                                                             `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	AdresDliaOtpravkiSoobshcheniiObOshibke            *String                                                                              `xml:"АдресДляОтправкиСообщенийОбОшибке" json:"АдресДляОтправкиСообщенийОбОшибке,omitempty"`
	VypolniatDeistviiaPodPolnymiPravami               *Boolean                                                                             `xml:"ВыполнятьДействияПодПолнымиПравами" json:"ВыполнятьДействияПодПолнымиПравами,omitempty"`
	VypolniatObmenPriZakrytiiSmeny                    *Boolean                                                                             `xml:"ВыполнятьОбменПриЗакрытииСмены" json:"ВыполнятьОбменПриЗакрытииСмены,omitempty"`
	VypolniatObmenPriPoiavleniiFaila                  *String                                                                              `xml:"ВыполнятьОбменПриПоявленииФайла" json:"ВыполнятьОбменПриПоявленииФайла,omitempty"`
	DinamicheskiIzmeniatIntervalMezhduObmenami        *Boolean                                                                             `xml:"ДинамическиИзменятьИнтервалМеждуОбменами" json:"ДинамическиИзменятьИнтервалМеждуОбменами,omitempty"`
	IspolzovatReglamentnyeZadaniia                    *Boolean                                                                             `xml:"ИспользоватьРегламентныеЗадания" json:"ИспользоватьРегламентныеЗадания,omitempty"`
	KazhdoeZavershenieRabotySProgrammoi               *Boolean                                                                             `xml:"КаждоеЗавершениеРаботыСПрограммой" json:"КаждоеЗавершениеРаботыСПрограммой,omitempty"`
	KazhdyiZapuskProgrammy                            *Boolean                                                                             `xml:"КаждыйЗапускПрограммы" json:"КаждыйЗапускПрограммы,omitempty"`
	KatalogProverkiDostupnosti                        *String                                                                              `xml:"КаталогПроверкиДоступности" json:"КаталогПроверкиДоступности,omitempty"`
	KolichestvoElementovVTranzaktsiiNaVygruzkuDannykh *Int                                                                                 `xml:"КоличествоЭлементовВТранзакцииНаВыгрузкуДанных" json:"КоличествоЭлементовВТранзакцииНаВыгрузкуДанных,omitempty"`
	KolichestvoElementovVTranzaktsiiNaZagruzkuDannykh *Int                                                                                 `xml:"КоличествоЭлементовВТранзакцииНаЗагрузкуДанных" json:"КоличествоЭлементовВТранзакцииНаЗагрузкуДанных,omitempty"`
	Comment                                           *String                                                                              `xml:"Комментарий" json:"Комментарий,omitempty"`
	OtvetstvennyiKey                                  *Guid                                                                                `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	ProverkaSertifikatov                              *Boolean                                                                             `xml:"ПроверкаСертификатов" json:"ПроверкаСертификатов,omitempty"`
	ReglamentnoeZadanie                               *String                                                                              `xml:"РегламентноеЗадание" json:"РегламентноеЗадание,omitempty"`
	UchetnaiaZapisOtpravkiSoobshcheniiaObOshibkeKey   *Guid                                                                                `xml:"УчетнаяЗаписьОтправкиСообщенияОбОшибке_Key" json:"УчетнаяЗаписьОтправкиСообщенияОбОшибке_Key,omitempty"`
	NastroikiObmena                                   *[]CatalogNastroikiVypolneniiaObmenaNastroikiObmenaRowType                           `xml:"НастройкиОбмена" json:"НастройкиОбмена,omitempty"`
	SoobshcheniiaNeIavliaiushchiesiaOshibkami         *[]CatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkamiRowType `xml:"СообщенияНеЯвляющиесяОшибками" json:"СообщенияНеЯвляющиесяОшибками,omitempty"`
}

type CatalogNastroikiVypolneniiaObmenaNastroikiObmena struct {
	Key                      Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber               Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	VypolniaemoeDeistvie     *String `xml:"ВыполняемоеДействие" json:"ВыполняемоеДействие,omitempty"`
	NastroikaObmenaKey       *Guid   `xml:"НастройкаОбмена_Key" json:"НастройкаОбмена_Key,omitempty"`
	VypolniaemoeDeistvieType *String `xml:"ВыполняемоеДействие_Type" json:"ВыполняемоеДействие_Type,omitempty"`
}

type CatalogNastroikiVypolneniiaObmenaSoobshcheniiaNeIavliaiushchiesiaOshibkami struct {
	Key                Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber         Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	TekstSoobshcheniia *String `xml:"ТекстСообщения" json:"ТекстСообщения,omitempty"`
}

type CatalogZnacheniiaSvoistvObieektov struct {
	Key            Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion    *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description    *String  `xml:"Description" json:"Description,omitempty"`
	Code           *String  `xml:"Code" json:"Code,omitempty"`
	OwnerKey       *Guid    `xml:"Owner_Key" json:"Owner_Key,omitempty"`
	DeletionMark   *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	BIdentifikator *String  `xml:"Б_Идентификатор" json:"Б_Идентификатор,omitempty"`
	BNomerVersii   *String  `xml:"Б_НомерВерсии" json:"Б_НомерВерсии,omitempty"`
}

type DocumentRealizatsiiaTovarovUslug struct {
	Key                            Guid                                             `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                    *String                                          `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                         *String                                          `xml:"Number" json:"Number,omitempty"`
	Date                           *Time                                            `xml:"Date" json:"Date,omitempty"`
	DeletionMark                   *Boolean                                         `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                         *Boolean                                         `xml:"Posted" json:"Posted,omitempty"`
	AdresDostavki                  *String                                          `xml:"АдресДоставки" json:"АдресДоставки,omitempty"`
	BankovskiiSchetOrganizatsiiKey *Guid                                            `xml:"БанковскийСчетОрганизации_Key" json:"БанковскийСчетОрганизации_Key,omitempty"`
	ValiutaDokumentaKey            *Guid                                            `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	Weight                         *Float                                           `xml:"ВесДокумента" json:"ВесДокумента,omitempty"`
	GruzootpravitelKey             *Guid                                            `xml:"Грузоотправитель_Key" json:"Грузоотправитель_Key,omitempty"`
	GruzopoluchatelKey             *Guid                                            `xml:"Грузополучатель_Key" json:"Грузополучатель_Key,omitempty"`
	DataPolucheniia                *Time                                            `xml:"ДатаПолучения" json:"ДатаПолучения,omitempty"`
	DogovorKontragentaKey          *Guid                                            `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie              *String                                          `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	DokumentSozdanVIuTD            *Boolean                                         `xml:"ДокументСозданВЮТД" json:"ДокументСозданВЮТД,omitempty"`
	KolichestvoDokumenta           *Int                                             `xml:"КоличествоДокумента" json:"КоличествоДокумента,omitempty"`
	Comment                        *String                                          `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey                  *Guid                                            `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	KratnostVzaimoraschetov        *Int                                             `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov            *Float                                           `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	Natsenka                       *Float                                           `xml:"Наценка" json:"Наценка,omitempty"`
	OrganizatsiiaKey               *Guid                                            `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey               *Guid                                            `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey               *Guid                                            `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	ProektKey                      *Guid                                            `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	Sdelka                         *String                                          `xml:"Сделка" json:"Сделка,omitempty"`
	DepartmentKey                  *Guid                                            `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	SummaVkliuchaetNDS             *Boolean                                         `xml:"СуммаВключаетНДС" json:"СуммаВключаетНДС,omitempty"`
	SumOfDocument                  *Float                                           `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	TipDokumenta                   *String                                          `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	TipSkidkiNatsenkiKey           *Guid                                            `xml:"ТипСкидкиНаценки_Key" json:"ТипСкидкиНаценки_Key,omitempty"`
	TipTsenKey                     *Guid                                            `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
	UsloviiaOplatyKey              *Guid                                            `xml:"УсловияОплаты_Key" json:"УсловияОплаты_Key,omitempty"`
	UchityvatVesVstavok            *Boolean                                         `xml:"УчитыватьВесВставок" json:"УчитыватьВесВставок,omitempty"`
	UchityvatNDS                   *Boolean                                         `xml:"УчитыватьНДС" json:"УчитыватьНДС,omitempty"`
	KhoziaistvennaiaOperatsiiaKey  *Guid                                            `xml:"ХозяйственнаяОперация_Key" json:"ХозяйственнаяОперация_Key,omitempty"`
	OtpuskRazreshilKey             *Guid                                            `xml:"ОтпускРазрешил_Key" json:"ОтпускРазрешил_Key,omitempty"`
	OtpuskProizvelKey              *Guid                                            `xml:"ОтпускПроизвел_Key" json:"ОтпускПроизвел_Key,omitempty"`
	DoverennostNomer               *String                                          `xml:"ДоверенностьНомер" json:"ДоверенностьНомер,omitempty"`
	DoverennostData                *Time                                            `xml:"ДоверенностьДата" json:"ДоверенностьДата,omitempty"`
	DoverennostVydana              *String                                          `xml:"ДоверенностьВыдана" json:"ДоверенностьВыдана,omitempty"`
	DoverennostCherezKogo          *String                                          `xml:"ДоверенностьЧерезКого" json:"ДоверенностьЧерезКого,omitempty"`
	BDataDokumenta                 *Time                                            `xml:"Б_ДатаДокумента" json:"Б_ДатаДокумента,omitempty"`
	BIdentifikator                 *String                                          `xml:"Б_Идентификатор" json:"Б_Идентификатор,omitempty"`
	BNomerVersii                   *String                                          `xml:"Б_НомерВерсии" json:"Б_НомерВерсии,omitempty"`
	Goods                          *[]DocumentRealizatsiiaTovarovUslugTovaryRowType `xml:"Товары" json:"Товары,omitempty"`
	Uslugi                         *[]DocumentRealizatsiiaTovarovUslugUslugiRowType `xml:"Услуги" json:"Услуги,omitempty"`
	DokumentOsnovanieType          *String                                          `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
	SdelkaType                     *String                                          `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

func (entity DocumentRealizatsiiaTovarovUslug) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentRealizatsiiaTovarovUslug) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentRealizatsiiaTovarovUslugTovary struct {
	Key                                        Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                                 Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                                     *Float  `xml:"Вес" json:"Вес,omitempty"`
	ZnachenieUsloviiaAvtomaticheskoiSkidki     *String `xml:"ЗначениеУсловияАвтоматическойСкидки" json:"ЗначениеУсловияАвтоматическойСкидки,omitempty"`
	KachestvoKey                               *Guid   `xml:"Качество_Key" json:"Качество_Key,omitempty"`
	Quantity                                   *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                                    *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	PercentAutoDiscount                        *Float  `xml:"ПроцентАвтоматическойСкидки" json:"ПроцентАвтоматическойСкидки,omitempty"`
	PercentManualDiscount                      *Float  `xml:"ПроцентРучнойСкидки" json:"ПроцентРучнойСкидки,omitempty"`
	SizeKey                                    *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                                *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	DepartmentKey                              *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	StavkaNDS                                  *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                                        *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                                   *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	UslovieAvtomaticheskoiSkidki               *String `xml:"УсловиеАвтоматическойСкидки" json:"УсловиеАвтоматическойСкидки,omitempty"`
	KharakteristikaNomenklaturyKey             *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                                       *Float  `xml:"Цена" json:"Цена,omitempty"`
	SumManualDiscount                          *Float  `xml:"СуммаРучнойСкидки" json:"СуммаРучнойСкидки,omitempty"`
	SumAutoDiscount                            *Float  `xml:"СуммаАвтоматическойСкидки" json:"СуммаАвтоматическойСкидки,omitempty"`
	VesVstavok                                 *Float  `xml:"ВесВставок" json:"ВесВставок,omitempty"`
	ZnachenieUsloviiaAvtomaticheskoiSkidkiType *String `xml:"ЗначениеУсловияАвтоматическойСкидки_Type" json:"ЗначениеУсловияАвтоматическойСкидки_Type,omitempty"`
}

type DocumentRealizatsiiaTovarovUslugUslugi struct {
	Key                      Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber               Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Quantity                 *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                  *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	ProtsentOtSummyDokumenta *Float  `xml:"ПроцентОтСуммыДокумента" json:"ПроцентОтСуммыДокумента,omitempty"`
	PercentManualDiscount    *Float  `xml:"ПроцентРучнойСкидки" json:"ПроцентРучнойСкидки,omitempty"`
	Soderzhanie              *String `xml:"Содержание" json:"Содержание,omitempty"`
	StavkaNDS                *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                      *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                 *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	Cost                     *Float  `xml:"Цена" json:"Цена,omitempty"`
	SumManualDiscount        *Float  `xml:"СуммаРучнойСкидки" json:"СуммаРучнойСкидки,omitempty"`
}

type DocumentSobytie struct {
	Key                                    Guid                                    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                            *String                                 `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                                 *String                                 `xml:"Number" json:"Number,omitempty"`
	Date                                   *Time                                   `xml:"Date" json:"Date,omitempty"`
	DeletionMark                           *Boolean                                `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                                 *Boolean                                `xml:"Posted" json:"Posted,omitempty"`
	AdresElektronnoiPochty                 *String                                 `xml:"АдресЭлектроннойПочты" json:"АдресЭлектроннойПочты,omitempty"`
	Vazhnost                               *String                                 `xml:"Важность" json:"Важность,omitempty"`
	VidObieekta                            *String                                 `xml:"ВидОбъекта" json:"ВидОбъекта,omitempty"`
	VidSobytiia                            *String                                 `xml:"ВидСобытия" json:"ВидСобытия,omitempty"`
	VremiaNapominaniia                     *Time                                   `xml:"ВремяНапоминания" json:"ВремяНапоминания,omitempty"`
	IstochnikInformatsiiPriObrashcheniiKey *Guid                                   `xml:"ИсточникИнформацииПриОбращении_Key" json:"ИсточникИнформацииПриОбращении_Key,omitempty"`
	Comment                                *String                                 `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontaktnoeLitso                        *String                                 `xml:"КонтактноеЛицо" json:"КонтактноеЛицо,omitempty"`
	Kontragent                             *String                                 `xml:"Контрагент" json:"Контрагент,omitempty"`
	NapomnitOSobytii                       *Boolean                                `xml:"НапомнитьОСобытии" json:"НапомнитьОСобытии,omitempty"`
	NachaloSobytiia                        *Time                                   `xml:"НачалоСобытия" json:"НачалоСобытия,omitempty"`
	OkonchanieSobytiia                     *Time                                   `xml:"ОкончаниеСобытия" json:"ОкончаниеСобытия,omitempty"`
	OpisanieSobytiia                       *String                                 `xml:"ОписаниеСобытия" json:"ОписаниеСобытия,omitempty"`
	Osnovanie                              *String                                 `xml:"Основание" json:"Основание,omitempty"`
	OtvetstvennyiKey                       *Guid                                   `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	ProektKey                              *Guid                                   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	SoderzhanieSobytiia                    *String                                 `xml:"СодержаниеСобытия" json:"СодержаниеСобытия,omitempty"`
	SostoianieSobytiia                     *String                                 `xml:"СостояниеСобытия" json:"СостояниеСобытия,omitempty"`
	TipSobytiia                            *String                                 `xml:"ТипСобытия" json:"ТипСобытия,omitempty"`
	StoronnieLitsa                         *[]DocumentSobytieStoronnieLitsaRowType `xml:"СторонниеЛица" json:"СторонниеЛица,omitempty"`
	KontaktnoeLitsoType                    *String                                 `xml:"КонтактноеЛицо_Type" json:"КонтактноеЛицо_Type,omitempty"`
	KontragentType                         *String                                 `xml:"Контрагент_Type" json:"Контрагент_Type,omitempty"`
	OsnovanieType                          *String                                 `xml:"Основание_Type" json:"Основание_Type,omitempty"`
}

func (entity DocumentSobytie) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentSobytie) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentSobytieStoronnieLitsa struct {
	Key           Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber    Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	KontragentKey *Guid `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	LitsoKey      *Guid `xml:"Лицо_Key" json:"Лицо_Key,omitempty"`
}

type CatalogVariantyOtvetovOprosov struct {
	Key                     Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion             *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description             *String  `xml:"Description" json:"Description,omitempty"`
	Code                    *String  `xml:"Code" json:"Code,omitempty"`
	OwnerKey                *Guid    `xml:"Owner_Key" json:"Owner_Key,omitempty"`
	DeletionMark            *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	OtsenkaOtveta           *Float   `xml:"ОценкаОтвета" json:"ОценкаОтвета,omitempty"`
	TrebuetRazvernutyiOtvet *Boolean `xml:"ТребуетРазвернутыйОтвет" json:"ТребуетРазвернутыйОтвет,omitempty"`
}

type CatalogGruppyPisemElektronnoiPochty struct {
	Key                     Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion             *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description             *String  `xml:"Description" json:"Description,omitempty"`
	Code                    *String  `xml:"Code" json:"Code,omitempty"`
	OwnerKey                *Guid    `xml:"Owner_Key" json:"Owner_Key,omitempty"`
	ParentKey               *Guid    `xml:"Parent_Key" json:"Parent_Key,omitempty"`
	DeletionMark            *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	IspolzovatPredmetyPisem *Boolean `xml:"ИспользоватьПредметыПисем" json:"ИспользоватьПредметыПисем,omitempty"`
	Poriadok                *Int     `xml:"Порядок" json:"Порядок,omitempty"`
}

type CatalogGruppyPochtovoiRassylki struct {
	Key              Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion      *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description      *String  `xml:"Description" json:"Description,omitempty"`
	Code             *String  `xml:"Code" json:"Code,omitempty"`
	ParentKey        *Guid    `xml:"Parent_Key" json:"Parent_Key,omitempty"`
	IsFolder         *Boolean `xml:"IsFolder" json:"IsFolder,omitempty"`
	DeletionMark     *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	OtvetstvennyiKey *Guid    `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
}

type CatalogNastroikiOtchetov struct {
	Key                             Guid                                                         `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                     *String                                                      `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                     *String                                                      `xml:"Description" json:"Description,omitempty"`
	Code                            *String                                                      `xml:"Code" json:"Code,omitempty"`
	ParentKey                       *Guid                                                        `xml:"Parent_Key" json:"Parent_Key,omitempty"`
	IsFolder                        *Boolean                                                     `xml:"IsFolder" json:"IsFolder,omitempty"`
	DeletionMark                    *Boolean                                                     `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	NaimenovanieOtcheta             *String                                                      `xml:"НаименованиеОтчета" json:"НаименованиеОтчета,omitempty"`
	NastroikaDliaAvtosokhraneniia   *Boolean                                                     `xml:"НастройкаДляАвтосохранения" json:"НастройкаДляАвтосохранения,omitempty"`
	NastroikaPoUmolchaniiu          *Boolean                                                     `xml:"НастройкаПоУмолчанию" json:"НастройкаПоУмолчанию,omitempty"`
	NastroikiOtchetaBase64Data      *Binary                                                      `xml:"НастройкиОтчета_Base64Data" json:"НастройкиОтчета_Base64Data,omitempty"`
	NastroikiPostroiteliaBase64Data *Binary                                                      `xml:"НастройкиПостроителя_Base64Data" json:"НастройкиПостроителя_Base64Data,omitempty"`
	GruppyNastroekIPolzovateli      *[]CatalogNastroikiOtchetovGruppyNastroekIPolzovateliRowType `xml:"ГруппыНастроекИПользователи" json:"ГруппыНастроекИПользователи,omitempty"`
	NastroikiOtchetaType            *String                                                      `xml:"НастройкиОтчета_Type" json:"НастройкиОтчета_Type,omitempty"`
	NastroikiPostroiteliaType       *String                                                      `xml:"НастройкиПостроителя_Type" json:"НастройкиПостроителя_Type,omitempty"`
	NastroikiOtcheta                *Binary                                                      `xml:"НастройкиОтчета" json:"НастройкиОтчета,omitempty"`
	NastroikiPostroitelia           *Binary                                                      `xml:"НастройкиПостроителя" json:"НастройкиПостроителя,omitempty"`
}

type CatalogNastroikiOtchetovGruppyNastroekIPolzovateli struct {
	Key         Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber  Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Obieekt     *String `xml:"Объект" json:"Объект,omitempty"`
	ObieektType *String `xml:"Объект_Type" json:"Объект_Type,omitempty"`
}

type CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartam struct {
	Key                                    Guid                                                               `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                            *String                                                            `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                            *String                                                            `xml:"Description" json:"Description,omitempty"`
	Code                                   *String                                                            `xml:"Code" json:"Code,omitempty"`
	DeletionMark                           *Boolean                                                           `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Bonusnaia                              *Boolean                                                           `xml:"Бонусная" json:"Бонусная,omitempty"`
	SpisyvatBonusyPriVozvrateOtPokupatelia *Boolean                                                           `xml:"СписыватьБонусыПриВозвратеОтПокупателя" json:"СписыватьБонусыПриВозвратеОтПокупателя,omitempty"`
	Skidki                                 *[]CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidkiRowType `xml:"Скидки" json:"Скидки,omitempty"`
}

type CatalogSkhemyNakopitelnykhSkidokPoDiskontnymKartamSkidki struct {
	Key                                             Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                                      Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Kod                                             *Int    `xml:"Код" json:"Код,omitempty"`
	KonSumma                                        *Float  `xml:"КонСумма" json:"КонСумма,omitempty"`
	MaksimalnyiProtsentSummyPokupkiPriOplateBonusom *Float  `xml:"МаксимальныйПроцентСуммыПокупкиПриОплатеБонусом" json:"МаксимальныйПроцентСуммыПокупкиПриОплатеБонусом,omitempty"`
	Naimenovanie                                    *String `xml:"Наименование" json:"Наименование,omitempty"`
	NachSumma                                       *Float  `xml:"НачСумма" json:"НачСумма,omitempty"`
	ProtsentSkidki                                  *Float  `xml:"ПроцентСкидки" json:"ПроцентСкидки,omitempty"`
}

type Department struct {
	Key                                      Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                              *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                              *String  `xml:"Description" json:"Description,omitempty"`
	Code                                     *String  `xml:"Code" json:"Code,omitempty"`
	ParentKey                                *Guid    `xml:"Parent_Key" json:"Parent_Key,omitempty"`
	IsFolder                                 *Boolean `xml:"IsFolder" json:"IsFolder,omitempty"`
	DeletionMark                             *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	VidSklada                                *String  `xml:"ВидСклада" json:"ВидСклада,omitempty"`
	Comment                                  *String  `xml:"Комментарий" json:"Комментарий,omitempty"`
	PodrazdelenieKey                         *Guid    `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	RaschetRoznichnykhTsenPoTorgovoiNatsenke *Boolean `xml:"РасчетРозничныхЦенПоТорговойНаценке" json:"РасчетРозничныхЦенПоТорговойНаценке,omitempty"`
	TipTsenRoznichnoiTorgovliKey             *Guid    `xml:"ТипЦенРозничнойТорговли_Key" json:"ТипЦенРозничнойТорговли_Key,omitempty"`
	SegmentIskliuchaemoiNomenklaturyKey      *Guid    `xml:"СегментИсключаемойНоменклатуры_Key" json:"СегментИсключаемойНоменклатуры_Key,omitempty"`
	DataOtkrytiia                            *Time    `xml:"ДатаОткрытия" json:"ДатаОткрытия,omitempty"`
	KU                                       *Float   `xml:"КУ" json:"КУ,omitempty"`
	DirektorKey                              *Guid    `xml:"Директор_Key" json:"Директор_Key,omitempty"`
	RegionKey                                *Guid    `xml:"Регион_Key" json:"Регион_Key,omitempty"`
	KolichestvoVitrin                        *Int     `xml:"КоличествоВитрин" json:"КоличествоВитрин,omitempty"`
	PloshchadVitrin                          *Float   `xml:"ПлощадьВитрин" json:"ПлощадьВитрин,omitempty"`
	PloshchadTorgovaia                       *Float   `xml:"ПлощадьТорговая" json:"ПлощадьТорговая,omitempty"`
	NomerSektsii                             *Int     `xml:"НомерСекции" json:"НомерСекции,omitempty"`
	FormatMagazinaKey                        *Guid    `xml:"ФорматМагазина_Key" json:"ФорматМагазина_Key,omitempty"`
	BIdentifikator                           *String  `xml:"Б_Идентификатор" json:"Б_Идентификатор,omitempty"`
	BNomerVersii                             *String  `xml:"Б_НомерВерсии" json:"Б_НомерВерсии,omitempty"`
}

type CatalogKodyVidovTovarov struct {
	Key          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion  *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description  *String  `xml:"Description" json:"Description,omitempty"`
	Code         *String  `xml:"Code" json:"Code,omitempty"`
	ParentKey    *Guid    `xml:"Parent_Key" json:"Parent_Key,omitempty"`
	IsFolder     *Boolean `xml:"IsFolder" json:"IsFolder,omitempty"`
	DeletionMark *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	KodTNVED     *String  `xml:"КодТНВЭД" json:"КодТНВЭД,omitempty"`
	Opisanie     *String  `xml:"Описание" json:"Описание,omitempty"`
}

type CatalogRassevy struct {
	Key                         Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                 *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                 *String  `xml:"Description" json:"Description,omitempty"`
	Code                        *String  `xml:"Code" json:"Code,omitempty"`
	OwnerKey                    *Guid    `xml:"Owner_Key" json:"Owner_Key,omitempty"`
	DeletionMark                *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	KolichestvoKamneiV1KarateDo *Float   `xml:"КоличествоКамнейВ1КаратеДо" json:"КоличествоКамнейВ1КаратеДо,omitempty"`
	KolichestvoKamneiV1KarateOt *Float   `xml:"КоличествоКамнейВ1КаратеОт" json:"КоличествоКамнейВ1КаратеОт,omitempty"`
}

type CatalogPrichinyZakrytiiaZakazov struct {
	Key          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion  *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description  *String  `xml:"Description" json:"Description,omitempty"`
	Code         *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
}

type CatalogSegmentyNomenklatury struct {
	Key                               Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                       *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                       *String  `xml:"Description" json:"Description,omitempty"`
	Code                              *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark                      *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	SposobFormirovaniia               *String  `xml:"СпособФормирования" json:"СпособФормирования,omitempty"`
	SkhemaKomponovkiDannykhBase64Data *Binary  `xml:"СхемаКомпоновкиДанных_Base64Data" json:"СхемаКомпоновкиДанных_Base64Data,omitempty"`
	Opisanie                          *String  `xml:"Описание" json:"Описание,omitempty"`
	OtvetstvennyiKey                  *Guid    `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	DataSozdaniia                     *Time    `xml:"ДатаСоздания" json:"ДатаСоздания,omitempty"`
	DataOchistki                      *Time    `xml:"ДатаОчистки" json:"ДатаОчистки,omitempty"`
	ImiaShablonaSKD                   *String  `xml:"ИмяШаблонаСКД" json:"ИмяШаблонаСКД,omitempty"`
	BIdentifikator                    *String  `xml:"Б_Идентификатор" json:"Б_Идентификатор,omitempty"`
	BNomerVersii                      *String  `xml:"Б_НомерВерсии" json:"Б_НомерВерсии,omitempty"`
	SkhemaKomponovkiDannykhType       *String  `xml:"СхемаКомпоновкиДанных_Type" json:"СхемаКомпоновкиДанных_Type,omitempty"`
	SkhemaKomponovkiDannykh           *Binary  `xml:"СхемаКомпоновкиДанных" json:"СхемаКомпоновкиДанных,omitempty"`
}

type CatalogSostavStrokiCheka struct {
	Key                 Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion         *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description         *String  `xml:"Description" json:"Description,omitempty"`
	Code                *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark        *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	OpisanieDliaPechati *String  `xml:"ОписаниеДляПечати" json:"ОписаниеДляПечати,omitempty"`
	Quantity            *Float   `xml:"Количество" json:"Количество,omitempty"`
	Weight              *Float   `xml:"Вес" json:"Вес,omitempty"`
	SummaTovara         *Float   `xml:"СуммаТовара" json:"СуммаТовара,omitempty"`
	StavkaNDS           *String  `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	SummaNDS            *Float   `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
}

type CatalogUsloviiaPriemaIzdeliiNaKomissiiu struct {
	Key                                       Guid                                                           `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                               *String                                                        `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                               *String                                                        `xml:"Description" json:"Description,omitempty"`
	Code                                      *String                                                        `xml:"Code" json:"Code,omitempty"`
	DeletionMark                              *Boolean                                                       `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	ZaKhranenieUderzhivat                     *Boolean                                                       `xml:"ЗаХранениеУдерживать" json:"ЗаХранениеУдерживать,omitempty"`
	ZaKhranenieStavka                         *Float                                                         `xml:"ЗаХранениеСтавка" json:"ЗаХранениеСтавка,omitempty"`
	ZaKhranenieSposobRascheta                 *String                                                        `xml:"ЗаХранениеСпособРасчета" json:"ЗаХранениеСпособРасчета,omitempty"`
	ZaKhranenieDenNachala                     *Int                                                           `xml:"ЗаХранениеДеньНачала" json:"ЗаХранениеДеньНачала,omitempty"`
	ZaKhranenieRaschityvatSDniaNachala        *Boolean                                                       `xml:"ЗаХранениеРасчитыватьСДняНачала" json:"ЗаХранениеРасчитыватьСДняНачала,omitempty"`
	KomissionnoeVoznagrazhdenieSposobRascheta *String                                                        `xml:"КомиссионноеВознаграждениеСпособРасчета" json:"КомиссионноеВознаграждениеСпособРасчета,omitempty"`
	KomissionnoeVoznagrazhdenieProtsent       *Float                                                         `xml:"КомиссионноеВознаграждениеПроцент" json:"КомиссионноеВознаграждениеПроцент,omitempty"`
	GrafikUtsenkiRabochieDni                  *Boolean                                                       `xml:"ГрафикУценкиРабочиеДни" json:"ГрафикУценкиРабочиеДни,omitempty"`
	GrafikUtsenok                             *[]CatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenokRowType `xml:"ГрафикУценок" json:"ГрафикУценок,omitempty"`
}

type CatalogUsloviiaPriemaIzdeliiNaKomissiiuGrafikUtsenok struct {
	Key             Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber      Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	UtsenkaProtsent *Float `xml:"УценкаПроцент" json:"УценкаПроцент,omitempty"`
	UtsenkaDnei     *Int   `xml:"УценкаДней" json:"УценкаДней,omitempty"`
}

type CatalogIstochnikiInformatsiiPriObrashcheniiPokupatelei struct {
	Key          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion  *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description  *String  `xml:"Description" json:"Description,omitempty"`
	Code         *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
}

type DocumentKorrektirovkaDolga struct {
	Key                         Guid                                           `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                 *String                                        `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                      *String                                        `xml:"Number" json:"Number,omitempty"`
	Date                        *Time                                          `xml:"Date" json:"Date,omitempty"`
	DeletionMark                *Boolean                                       `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                      *Boolean                                       `xml:"Posted" json:"Posted,omitempty"`
	Comment                     *String                                        `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey               *Guid                                          `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	OrganizatsiiaKey            *Guid                                          `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey            *Guid                                          `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey            *Guid                                          `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	TipDokumenta                *String                                        `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	UvelichenieDolgaKontragenta *Float                                         `xml:"УвеличениеДолгаКонтрагента" json:"УвеличениеДолгаКонтрагента,omitempty"`
	UmenshenieDolgaKontragenta  *Float                                         `xml:"УменьшениеДолгаКонтрагента" json:"УменьшениеДолгаКонтрагента,omitempty"`
	SummyDolga                  *[]DocumentKorrektirovkaDolgaSummyDolgaRowType `xml:"СуммыДолга" json:"СуммыДолга,omitempty"`
}

func (entity DocumentKorrektirovkaDolga) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentKorrektirovkaDolga) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentKorrektirovkaDolgaSummyDolga struct {
	Key                         Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                  Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	DataDolga                   *Time   `xml:"ДатаДолга" json:"ДатаДолга,omitempty"`
	DogovorKontragentaKey       *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	KratnostVzaimoraschetov     *Int    `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov         *Float  `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	Sdelka                      *String `xml:"Сделка" json:"Сделка,omitempty"`
	UvelichenieDolgaKontragenta *Float  `xml:"УвеличениеДолгаКонтрагента" json:"УвеличениеДолгаКонтрагента,omitempty"`
	UmenshenieDolgaKontragenta  *Float  `xml:"УменьшениеДолгаКонтрагента" json:"УменьшениеДолгаКонтрагента,omitempty"`
	SdelkaType                  *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type PayType struct {
	Key                                     Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                             *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                             *String  `xml:"Description" json:"Description,omitempty"`
	Code                                    *String  `xml:"Code" json:"Code,omitempty"`
	ParentKey                               *Guid    `xml:"Parent_Key" json:"Parent_Key,omitempty"`
	IsFolder                                *Boolean `xml:"IsFolder" json:"IsFolder,omitempty"`
	DeletionMark                            *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	BankKreditorKey                         *Guid    `xml:"БанкКредитор_Key" json:"БанкКредитор_Key,omitempty"`
	DogovorVzaimoraschetovBankaKreditoraKey *Guid    `xml:"ДоговорВзаиморасчетовБанкаКредитора_Key" json:"ДоговорВзаиморасчетовБанкаКредитора_Key,omitempty"`
	DogovorEkvairingaKey                    *Guid    `xml:"ДоговорЭквайринга_Key" json:"ДоговорЭквайринга_Key,omitempty"`
	NomerKarty                              *String  `xml:"НомерКарты" json:"НомерКарты,omitempty"`
	ProtsentBankovskoiKomissii              *Float   `xml:"ПроцентБанковскойКомиссии" json:"ПроцентБанковскойКомиссии,omitempty"`
	TipOplaty                               *String  `xml:"ТипОплаты" json:"ТипОплаты,omitempty"`
	AvtomaticheskiVychitatSummuKomissii     *Boolean `xml:"АвтоматическиВычитатьСуммуКомиссии" json:"АвтоматическиВычитатьСуммуКомиссии,omitempty"`
}

type CatalogKhranilishcheShablonov struct {
	Key               Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion       *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description       *String  `xml:"Description" json:"Description,omitempty"`
	Code              *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark      *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Obieekt           *String  `xml:"Объект" json:"Объект,omitempty"`
	ShablonBase64Data *Binary  `xml:"Шаблон_Base64Data" json:"Шаблон_Base64Data,omitempty"`
	TipShablona       *String  `xml:"ТипШаблона" json:"ТипШаблона,omitempty"`
	ShablonType       *String  `xml:"Шаблон_Type" json:"Шаблон_Type,omitempty"`
	Shablon           *Binary  `xml:"Шаблон" json:"Шаблон,omitempty"`
}

type DocumentZaiavkaNaRaskhodovanieSredstv struct {
	Key                                    Guid                                                                `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                            *String                                                             `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                                 *String                                                             `xml:"Number" json:"Number,omitempty"`
	Date                                   *Time                                                               `xml:"Date" json:"Date,omitempty"`
	DeletionMark                           *Boolean                                                            `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                                 *Boolean                                                            `xml:"Posted" json:"Posted,omitempty"`
	AvtoRazmeshcheniePoZaiavke             *Boolean                                                            `xml:"АвтоРазмещениеПоЗаявке" json:"АвтоРазмещениеПоЗаявке,omitempty"`
	AvtoRezervirovaniePoZaiavke            *Boolean                                                            `xml:"АвтоРезервированиеПоЗаявке" json:"АвтоРезервированиеПоЗаявке,omitempty"`
	BankovskiiSchetKassa                   *String                                                             `xml:"БанковскийСчетКасса" json:"БанковскийСчетКасса,omitempty"`
	ValiutaVzaimoraschetovPodotchetnikaKey *Guid                                                               `xml:"ВалютаВзаиморасчетовПодотчетника_Key" json:"ВалютаВзаиморасчетовПодотчетника_Key,omitempty"`
	ValiutaDokumentaKey                    *Guid                                                               `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	VidVydachiDenezhnykhSredstv            *String                                                             `xml:"ВидВыдачиДенежныхСредств" json:"ВидВыдачиДенежныхСредств,omitempty"`
	OperationType                          *String                                                             `xml:"ВидОперации" json:"ВидОперации,omitempty"`
	VkliuchatVPlatezhnyiKalendar           *Boolean                                                            `xml:"ВключатьВПлатежныйКалендарь" json:"ВключатьВПлатежныйКалендарь,omitempty"`
	DataPogasheniiaAvansa                  *Time                                                               `xml:"ДатаПогашенияАванса" json:"ДатаПогашенияАванса,omitempty"`
	DataRaskhoda                           *Time                                                               `xml:"ДатаРасхода" json:"ДатаРасхода,omitempty"`
	DokumentOsnovanie                      *String                                                             `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	Comment                                *String                                                             `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey                          *Guid                                                               `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	KratnostDokumenta                      *Int                                                                `xml:"КратностьДокумента" json:"КратностьДокумента,omitempty"`
	KursDokumenta                          *Float                                                              `xml:"КурсДокумента" json:"КурсДокумента,omitempty"`
	Nomenklatura                           *String                                                             `xml:"Номенклатура" json:"Номенклатура,omitempty"`
	Opisanie                               *String                                                             `xml:"Описание" json:"Описание,omitempty"`
	OrganizatsiiaKey                       *Guid                                                               `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                       *Guid                                                               `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	Poluchatel                             *String                                                             `xml:"Получатель" json:"Получатель,omitempty"`
	RaschetnyiDokumentKey                  *Guid                                                               `xml:"РасчетныйДокумент_Key" json:"РасчетныйДокумент_Key,omitempty"`
	Sostoianie                             *String                                                             `xml:"Состояние" json:"Состояние,omitempty"`
	SumOfDocument                          *Float                                                              `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	TipDokumenta                           *String                                                             `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	FormaOplaty                            *String                                                             `xml:"ФормаОплаты" json:"ФормаОплаты,omitempty"`
	TsFOKey                                *Guid                                                               `xml:"ЦФО_Key" json:"ЦФО_Key,omitempty"`
	ExtendedPayments                       *[]DocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezhaRowType `xml:"РасшифровкаПлатежа" json:"РасшифровкаПлатежа,omitempty"`
	RazmeshchenieZaiavki                   *[]DocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavkiRowType `xml:"РазмещениеЗаявки" json:"РазмещениеЗаявки,omitempty"`
	BankovskiiSchetKassaType               *String                                                             `xml:"БанковскийСчетКасса_Type" json:"БанковскийСчетКасса_Type,omitempty"`
	DokumentOsnovanieType                  *String                                                             `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
	ItemType                               *String                                                             `xml:"Номенклатура_Type" json:"Номенклатура_Type,omitempty"`
	PoluchatelType                         *String                                                             `xml:"Получатель_Type" json:"Получатель_Type,omitempty"`
}

func (entity DocumentZaiavkaNaRaskhodovanieSredstv) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentZaiavkaNaRaskhodovanieSredstv) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentZaiavkaNaRaskhodovanieSredstvRasshifrovkaPlatezha struct {
	Key                     Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber              Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	DogovorKontragentaKey   *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	KratnostVzaimoraschetov *Int    `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov     *Float  `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	ProektKey               *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	Sdelka                  *String `xml:"Сделка" json:"Сделка,omitempty"`
	TypeOfMovingMoneyKey    *Guid   `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov    *Float  `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	Sum                     *Float  `xml:"СуммаПлатежа" json:"СуммаПлатежа,omitempty"`
	SdelkaType              *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type DocumentZaiavkaNaRaskhodovanieSredstvRazmeshchenieZaiavki struct {
	Key                     Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber              Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	MestoRazmeshcheniia     *String `xml:"МестоРазмещения" json:"МестоРазмещения,omitempty"`
	Sum                     *Float  `xml:"СуммаПлатежа" json:"СуммаПлатежа,omitempty"`
	MestoRazmeshcheniiaType *String `xml:"МестоРазмещения_Type" json:"МестоРазмещения_Type,omitempty"`
}

type DocumentZakrytieZakazovPostavshchikam struct {
	Key              Guid                                                  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion      *String                                               `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number           *String                                               `xml:"Number" json:"Number,omitempty"`
	Date             *Time                                                 `xml:"Date" json:"Date,omitempty"`
	DeletionMark     *Boolean                                              `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted           *Boolean                                              `xml:"Posted" json:"Posted,omitempty"`
	Comment          *String                                               `xml:"Комментарий" json:"Комментарий,omitempty"`
	OtvetstvennyiKey *Guid                                                 `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey *Guid                                                 `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	TipDokumenta     *String                                               `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	Zakazy           *[]DocumentZakrytieZakazovPostavshchikamZakazyRowType `xml:"Заказы" json:"Заказы,omitempty"`
}

func (entity DocumentZakrytieZakazovPostavshchikam) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentZakrytieZakazovPostavshchikam) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentZakrytieZakazovPostavshchikamZakazy struct {
	Key                        Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                 Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	ZakazPostavshchikuKey      *Guid `xml:"ЗаказПоставщику_Key" json:"ЗаказПоставщику_Key,omitempty"`
	PrichinaZakrytiiaZakazaKey *Guid `xml:"ПричинаЗакрытияЗаказа_Key" json:"ПричинаЗакрытияЗаказа_Key,omitempty"`
}

type CatalogVidyKamnei struct {
	Key          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion  *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description  *String  `xml:"Description" json:"Description,omitempty"`
	Code         *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
}

type DocumentAnketyKlientovDliaFinMonitoringa struct {
	Key                             Guid                                                     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                     *String                                                  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                          *String                                                  `xml:"Number" json:"Number,omitempty"`
	Date                            *Time                                                    `xml:"Date" json:"Date,omitempty"`
	DeletionMark                    *Boolean                                                 `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                          *Boolean                                                 `xml:"Posted" json:"Posted,omitempty"`
	OrganizatsiiaKey                *Guid                                                    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	StatusProverki                  *Boolean                                                 `xml:"СтатусПроверки" json:"СтатусПроверки,omitempty"`
	NomerSoobshcheniia              *Int                                                     `xml:"НомерСообщения" json:"НомерСообщения,omitempty"`
	DataSoobshcheniia               *Time                                                    `xml:"ДатаСообщения" json:"ДатаСообщения,omitempty"`
	DataPredydushcheiProverki       *Time                                                    `xml:"ДатаПредыдущейПроверки" json:"ДатаПредыдущейПроверки,omitempty"`
	DataNachalaPerioda              *Time                                                    `xml:"ДатаНачалаПериода" json:"ДатаНачалаПериода,omitempty"`
	DataOkonchaniiaPerioda          *Time                                                    `xml:"ДатаОкончанияПериода" json:"ДатаОкончанияПериода,omitempty"`
	ObshcheeKolichestvoProverennykh *Int                                                     `xml:"ОбщееКоличествоПроверенных" json:"ОбщееКоличествоПроверенных,omitempty"`
	KolichestvoProverennykhIurLits  *Int                                                     `xml:"КоличествоПроверенныхЮрЛиц" json:"КоличествоПроверенныхЮрЛиц,omitempty"`
	KolichestvoProverennykhFizLits  *Int                                                     `xml:"КоличествоПроверенныхФизЛиц" json:"КоличествоПроверенныхФизЛиц,omitempty"`
	ObshcheeKolichestvoNaidennykh   *Int                                                     `xml:"ОбщееКоличествоНайденных" json:"ОбщееКоличествоНайденных,omitempty"`
	KolichestvoNaidennykhIurLits    *Int                                                     `xml:"КоличествоНайденныхЮрЛиц" json:"КоличествоНайденныхЮрЛиц,omitempty"`
	KolichestvoNaidennykhFizLits    *Int                                                     `xml:"КоличествоНайденныхФизЛиц" json:"КоличествоНайденныхФизЛиц,omitempty"`
	VariantProverki                 *Int                                                     `xml:"ВариантПроверки" json:"ВариантПроверки,omitempty"`
	DataPerechnia                   *Time                                                    `xml:"ДатаПеречня" json:"ДатаПеречня,omitempty"`
	PlanovaiaProverka               *Boolean                                                 `xml:"ПлановаяПроверка" json:"ПлановаяПроверка,omitempty"`
	Ankety                          *[]DocumentAnketyKlientovDliaFinMonitoringaAnketyRowType `xml:"Анкеты" json:"Анкеты,omitempty"`
}

func (entity DocumentAnketyKlientovDliaFinMonitoringa) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentAnketyKlientovDliaFinMonitoringa) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentAnketyKlientovDliaFinMonitoringaAnkety struct {
	Key                        Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                 Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	KontragentKey              *Guid    `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	DogovorKontragentaKey      *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	VPerechne                  *Boolean `xml:"ВПеречне" json:"ВПеречне,omitempty"`
	InostrannoePublichnoeLitso *Boolean `xml:"ИностранноеПубличноеЛицо" json:"ИностранноеПубличноеЛицо,omitempty"`
	DokumentSeriia             *String  `xml:"ДокументСерия" json:"ДокументСерия,omitempty"`
	DokumentNomer              *String  `xml:"ДокументНомер" json:"ДокументНомер,omitempty"`
}

type CatalogDogovoryRassrochki struct {
	Key                          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                  *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                  *String  `xml:"Description" json:"Description,omitempty"`
	Code                         *String  `xml:"Code" json:"Code,omitempty"`
	OwnerKey                     *Guid    `xml:"Owner_Key" json:"Owner_Key,omitempty"`
	DeletionMark                 *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Date                         *Time    `xml:"Дата" json:"Дата,omitempty"`
	Number                       *String  `xml:"Номер" json:"Номер,omitempty"`
	MesiatsevRassrochki          *Int     `xml:"МесяцевРассрочки" json:"МесяцевРассрочки,omitempty"`
	SummaEzhemesiachnogoPlatezha *Float   `xml:"СуммаЕжемесячногоПлатежа" json:"СуммаЕжемесячногоПлатежа,omitempty"`
	SummaRassrochki              *Float   `xml:"СуммаРассрочки" json:"СуммаРассрочки,omitempty"`
	SummaPokupki                 *Float   `xml:"СуммаПокупки" json:"СуммаПокупки,omitempty"`
	SummaPervonachalnogoVznosa   *Float   `xml:"СуммаПервоначальногоВзноса" json:"СуммаПервоначальногоВзноса,omitempty"`
}

type CatalogSertifikaty struct {
	Key                                 Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                         *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                         *String  `xml:"Description" json:"Description,omitempty"`
	Code                                *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark                        *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	KolichestvoDneiDeistviiaSertifikata *Int     `xml:"КоличествоДнейДействияСертификата" json:"КоличествоДнейДействияСертификата,omitempty"`
	Comment                             *String  `xml:"Комментарий" json:"Комментарий,omitempty"`
	Number                              *String  `xml:"Номер" json:"Номер,omitempty"`
	ProdazhaPoSvobodnoiTsene            *Boolean `xml:"ПродажаПоСвободнойЦене" json:"ПродажаПоСвободнойЦене,omitempty"`
	SrokDeistviia                       *Time    `xml:"СрокДействия" json:"СрокДействия,omitempty"`
	SrokDeistviiaSertifikataOgranichen  *Boolean `xml:"СрокДействияСертификатаОграничен" json:"СрокДействияСертификатаОграничен,omitempty"`
	Sum                                 *Float   `xml:"Сумма" json:"Сумма,omitempty"`
}

type DocumentPostuplenieDavalcheskogoMetalla struct {
	Key                                   Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                           *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                                *String  `xml:"Number" json:"Number,omitempty"`
	Date                                  *Time    `xml:"Date" json:"Date,omitempty"`
	DeletionMark                          *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                                *Boolean `xml:"Posted" json:"Posted,omitempty"`
	Weight                                *Float   `xml:"Вес" json:"Вес,omitempty"`
	DataVkhodiashchegoDokumenta           *Time    `xml:"ДатаВходящегоДокумента" json:"ДатаВходящегоДокумента,omitempty"`
	DogovorKontragentaKey                 *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	Comment                               *String  `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey                         *Guid    `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	MetallKey                             *Guid    `xml:"Металл_Key" json:"Металл_Key,omitempty"`
	NomenklaturaOprikhodovaniiaMetallaKey *Guid    `xml:"НоменклатураОприходованияМеталла_Key" json:"НоменклатураОприходованияМеталла_Key,omitempty"`
	NomerVkhodiashchegoDokumenta          *String  `xml:"НомерВходящегоДокумента" json:"НомерВходящегоДокумента,omitempty"`
	OrganizatsiiaKey                      *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                      *Guid    `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	ProbaLoma                             *Float   `xml:"ПробаЛома" json:"ПробаЛома,omitempty"`
	DepartmentKey                         *Guid    `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	Chistota                              *Boolean `xml:"Чистота" json:"Чистота,omitempty"`
	PodrazdelenieKey                      *Guid    `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	Cost                                  *Float   `xml:"Стоимость" json:"Стоимость,omitempty"`
	SumOfDocument                         *Float   `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
}

func (entity DocumentPostuplenieDavalcheskogoMetalla) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentPostuplenieDavalcheskogoMetalla) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentInkassovoePorucheniePeredannoe struct {
	Key                                  Guid                                                                 `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                          *String                                                              `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                               *String                                                              `xml:"Number" json:"Number,omitempty"`
	Date                                 *Time                                                                `xml:"Date" json:"Date,omitempty"`
	DeletionMark                         *Boolean                                                             `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                               *Boolean                                                             `xml:"Posted" json:"Posted,omitempty"`
	ValiutaDokumentaKey                  *Guid                                                                `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	OperationType                        *String                                                              `xml:"ВидОперации" json:"ВидОперации,omitempty"`
	VidPlatezha                          *String                                                              `xml:"ВидПлатежа" json:"ВидПлатежа,omitempty"`
	DataOplaty                           *Time                                                                `xml:"ДатаОплаты" json:"ДатаОплаты,omitempty"`
	DogovorKontragentaKey                *Guid                                                                `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie                    *String                                                              `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	DokumentPlanirovaniiaPostupleniiaKey *Guid                                                                `xml:"ДокументПланированияПоступления_Key" json:"ДокументПланированияПоступления_Key,omitempty"`
	INNPlatelshchika                     *String                                                              `xml:"ИННПлательщика" json:"ИННПлательщика,omitempty"`
	INNPoluchatelia                      *String                                                              `xml:"ИННПолучателя" json:"ИННПолучателя,omitempty"`
	Comment                              *String                                                              `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey                        *Guid                                                                `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	KPPPlatelshchika                     *String                                                              `xml:"КПППлательщика" json:"КПППлательщика,omitempty"`
	KPPPoluchatelia                      *String                                                              `xml:"КПППолучателя" json:"КПППолучателя,omitempty"`
	NaznacheniePlatezha                  *String                                                              `xml:"НазначениеПлатежа" json:"НазначениеПлатежа,omitempty"`
	Oplacheno                            *Boolean                                                             `xml:"Оплачено" json:"Оплачено,omitempty"`
	OrganizatsiiaKey                     *Guid                                                                `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                     *Guid                                                                `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	OtrazhenoVOperUchete                 *Boolean                                                             `xml:"ОтраженоВОперУчете" json:"ОтраженоВОперУчете,omitempty"`
	OcherednostPlatezha                  *Int                                                                 `xml:"ОчередностьПлатежа" json:"ОчередностьПлатежа,omitempty"`
	TypeOfMovingMoneyKey                 *Guid                                                                `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SumOfDocument                        *Float                                                               `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	SchetKontragentaKey                  *Guid                                                                `xml:"СчетКонтрагента_Key" json:"СчетКонтрагента_Key,omitempty"`
	SchetOrganizatsiiKey                 *Guid                                                                `xml:"СчетОрганизации_Key" json:"СчетОрганизации_Key,omitempty"`
	TekstPlatelshchika                   *String                                                              `xml:"ТекстПлательщика" json:"ТекстПлательщика,omitempty"`
	TekstPoluchatelia                    *String                                                              `xml:"ТекстПолучателя" json:"ТекстПолучателя,omitempty"`
	TipDokumenta                         *String                                                              `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	ChastichnaiaOplata                   *Boolean                                                             `xml:"ЧастичнаяОплата" json:"ЧастичнаяОплата,omitempty"`
	ExtendedPayments                     *[]DocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezhaRowType `xml:"РасшифровкаПлатежа" json:"РасшифровкаПлатежа,omitempty"`
	RekvizityKontragenta                 *[]DocumentInkassovoePorucheniePeredannoeRekvizityKontragentaRowType `xml:"РеквизитыКонтрагента" json:"РеквизитыКонтрагента,omitempty"`
	DokumentOsnovanieType                *String                                                              `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
}

func (entity DocumentInkassovoePorucheniePeredannoe) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentInkassovoePorucheniePeredannoe) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentInkassovoePorucheniePeredannoeRasshifrovkaPlatezha struct {
	Key                              Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                       Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	DogovorKontragentaKey            *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentPlanirovaniiaPlatezhaKey *Guid   `xml:"ДокументПланированияПлатежа_Key" json:"ДокументПланированияПлатежа_Key,omitempty"`
	KratnostVzaimoraschetov          *Int    `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov              *Float  `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	KursVzaimoraschetovPlan          *Float  `xml:"КурсВзаиморасчетовПлан" json:"КурсВзаиморасчетовПлан,omitempty"`
	ProektKey                        *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	Sdelka                           *String `xml:"Сделка" json:"Сделка,omitempty"`
	StavkaNDS                        *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	TypeOfMovingMoneyKey             *Guid   `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov             *Float  `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	SummaNDS                         *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	Sum                              *Float  `xml:"СуммаПлатежа" json:"СуммаПлатежа,omitempty"`
	SummaPlatezhaPlan                *Float  `xml:"СуммаПлатежаПлан" json:"СуммаПлатежаПлан,omitempty"`
	SdelkaType                       *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type DocumentInkassovoePorucheniePeredannoeRekvizityKontragenta struct {
	Key            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Znachenie      *String `xml:"Значение" json:"Значение,omitempty"`
	Predstavlenie  *String `xml:"Представление" json:"Представление,omitempty"`
	Rekvizit       *String `xml:"Реквизит" json:"Реквизит,omitempty"`
	TipKontragenta *String `xml:"ТипКонтрагента" json:"ТипКонтрагента,omitempty"`
}

type CatalogFormulyDliaRascheta struct {
	Key                       Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion               *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description               *String  `xml:"Description" json:"Description,omitempty"`
	Code                      *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark              *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	FormulaRascheta           *String  `xml:"ФормулаРасчета" json:"ФормулаРасчета,omitempty"`
	ObieektPrimeneniiaFormuly *String  `xml:"ОбъектПримененияФормулы" json:"ОбъектПримененияФормулы,omitempty"`
}

type CatalogKupony struct {
	Key                                    Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                            *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                            *String  `xml:"Description" json:"Description,omitempty"`
	Code                                   *String  `xml:"Code" json:"Code,omitempty"`
	ParentKey                              *Guid    `xml:"Parent_Key" json:"Parent_Key,omitempty"`
	IsFolder                               *Boolean `xml:"IsFolder" json:"IsFolder,omitempty"`
	DeletionMark                           *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	ProtsentSkidki                         *Float   `xml:"ПроцентСкидки" json:"ПроцентСкидки,omitempty"`
	SummaSkidki                            *Float   `xml:"СуммаСкидки" json:"СуммаСкидки,omitempty"`
	Tirazh                                 *Int     `xml:"Тираж" json:"Тираж,omitempty"`
	SkidkaSummoi                           *Int     `xml:"СкидкаСуммой" json:"СкидкаСуммой,omitempty"`
	IdentifikatorDliaWeb                   *String  `xml:"ИдентификаторДляWeb" json:"ИдентификаторДляWeb,omitempty"`
	MaksimalnyiProtsentOtSummyPokupki      *Float   `xml:"МаксимальныйПроцентОтСуммыПокупки" json:"МаксимальныйПроцентОтСуммыПокупки,omitempty"`
	IspolzovanieNeskolkikhKuponovEtogoVida *Boolean `xml:"ИспользованиеНесколькихКупоновЭтогоВида" json:"ИспользованиеНесколькихКупоновЭтогоВида,omitempty"`
	IspolzovanieSDrugimiKuponami           *Boolean `xml:"ИспользованиеСДругимиКупонами" json:"ИспользованиеСДругимиКупонами,omitempty"`
}

type Correcting struct {
	Key                          Guid                                                                                   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                  *String                                                                                `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                       *String                                                                                `xml:"Number" json:"Number,omitempty"`
	Date                         *Time                                                                                  `xml:"Date" json:"Date,omitempty"`
	DeletionMark                 *Boolean                                                                               `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                       *Boolean                                                                               `xml:"Posted" json:"Posted,omitempty"`
	Comment                      *String                                                                                `xml:"Комментарий" json:"Комментарий,omitempty"`
	OtvetstvennyiKey             *Guid                                                                                  `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	TipDokumenta                 *String                                                                                `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	TablitsaRegistrovNakopleniia *[]DocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniiaRowType `xml:"ТаблицаРегистровНакопления" json:"ТаблицаРегистровНакопления,omitempty"`
}

func (entity Correcting) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity Correcting) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentKorrektirovkaZapiseiRegistrovNakopleniiaTablitsaRegistrovNakopleniia struct {
	Key           Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber    Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Imia          *String `xml:"Имя" json:"Имя,omitempty"`
	Predstavlenie *String `xml:"Представление" json:"Представление,omitempty"`
}

type DocumentInternetZakaz struct {
	Key                             Guid                                                `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                     *String                                             `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                          *String                                             `xml:"Number" json:"Number,omitempty"`
	Date                            *Time                                               `xml:"Date" json:"Date,omitempty"`
	DeletionMark                    *Boolean                                            `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                          *Boolean                                            `xml:"Posted" json:"Posted,omitempty"`
	OrganizatsiiaKey                *Guid                                               `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DepartmentKey                   *Guid                                               `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	AdresDostavki                   *String                                             `xml:"АдресДоставки" json:"АдресДоставки,omitempty"`
	OtvetstvennyiKey                *Guid                                               `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	SumOfDocument                   *Float                                              `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	NomerInternetDokumenta          *String                                             `xml:"НомерИнтернетДокумента" json:"НомерИнтернетДокумента,omitempty"`
	DataInternetDokumenta           *Time                                               `xml:"ДатаИнтернетДокумента" json:"ДатаИнтернетДокумента,omitempty"`
	StatusInternetDokumenta         *String                                             `xml:"СтатусИнтернетДокумента" json:"СтатусИнтернетДокумента,omitempty"`
	UnikalnyiNomerInternetDokumenta *String                                             `xml:"УникальныйНомерИнтернетДокумента" json:"УникальныйНомерИнтернетДокумента,omitempty"`
	Telefon                         *String                                             `xml:"Телефон" json:"Телефон,omitempty"`
	FIO                             *String                                             `xml:"ФИО" json:"ФИО,omitempty"`
	KurerKey                        *Guid                                               `xml:"Курьер_Key" json:"Курьер_Key,omitempty"`
	AdresDostavkiKLADR              *String                                             `xml:"АдресДоставкиКЛАДР" json:"АдресДоставкиКЛАДР,omitempty"`
	VremiaDostavki                  *String                                             `xml:"ВремяДоставки" json:"ВремяДоставки,omitempty"`
	Samovyvoz                       *Boolean                                            `xml:"Самовывоз" json:"Самовывоз,omitempty"`
	SposobOplaty                    *Boolean                                            `xml:"СпособОплаты" json:"СпособОплаты,omitempty"`
	Comment                         *String                                             `xml:"Комментарий" json:"Комментарий,omitempty"`
	Pochta                          *String                                             `xml:"Почта" json:"Почта,omitempty"`
	BDataDokumenta                  *Time                                               `xml:"Б_ДатаДокумента" json:"Б_ДатаДокумента,omitempty"`
	BIdentifikator                  *String                                             `xml:"Б_Идентификатор" json:"Б_Идентификатор,omitempty"`
	BNomerVersii                    *String                                             `xml:"Б_НомерВерсии" json:"Б_НомерВерсии,omitempty"`
	TovaryInternetZakaza            *[]DocumentInternetZakazTovaryInternetZakazaRowType `xml:"ТоварыИнтернетЗаказа" json:"ТоварыИнтернетЗаказа,omitempty"`
	Goods                           *[]DocumentInternetZakazTovaryRowType               `xml:"Товары" json:"Товары,omitempty"`
}

func (entity DocumentInternetZakaz) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentInternetZakaz) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentInternetZakazTovaryInternetZakaza struct {
	Key                            Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	ItemKey                        *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid    `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	InstanceKey                    *Guid    `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	Quantity                       *Int     `xml:"Количество" json:"Количество,omitempty"`
	Weight                         *Float   `xml:"Вес" json:"Вес,omitempty"`
	Cost                           *Float   `xml:"Цена" json:"Цена,omitempty"`
	Sum                            *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	StavkaNDS                      *String  `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	SummaNDS                       *Float   `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	PodobranPolnostiu              *Boolean `xml:"ПодобранПолностью" json:"ПодобранПолностью,omitempty"`
	Otkaz                          *Boolean `xml:"Отказ" json:"Отказ,omitempty"`
}

type DocumentInternetZakazTovary struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	Cost                           *Float  `xml:"Цена" json:"Цена,omitempty"`
	Sum                            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	StavkaNDS                      *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	SummaNDS                       *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	NomerStrokiZakaza              *Int    `xml:"НомерСтрокиЗаказа" json:"НомерСтрокиЗаказа,omitempty"`
	DepartmentKey                  *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
}

type CatalogRegiony struct {
	Key          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion  *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description  *String  `xml:"Description" json:"Description,omitempty"`
	Code         *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
}

type SaleJournal struct {
	Key                           Guid                                                                     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                   *String                                                                  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                        *String                                                                  `xml:"Number" json:"Number,omitempty"`
	Date                          *Time                                                                    `xml:"Date" json:"Date,omitempty"`
	DeletionMark                  *Boolean                                                                 `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                        *Boolean                                                                 `xml:"Posted" json:"Posted,omitempty"`
	Weight                        *Float                                                                   `xml:"ВесДокумента" json:"ВесДокумента,omitempty"`
	DokumentOsnovanie             *String                                                                  `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	DokumentSozdanVIuTD           *Boolean                                                                 `xml:"ДокументСозданВЮТД" json:"ДокументСозданВЮТД,omitempty"`
	KassaKKMKey                   *Guid                                                                    `xml:"КассаККМ_Key" json:"КассаККМ_Key,omitempty"`
	KolichestvoDokumenta          *Int                                                                     `xml:"КоличествоДокумента" json:"КоличествоДокумента,omitempty"`
	Comment                       *String                                                                  `xml:"Комментарий" json:"Комментарий,omitempty"`
	OrganizatsiiaKey              *Guid                                                                    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey              *Guid                                                                    `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey              *Guid                                                                    `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	ProektKey                     *Guid                                                                    `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	DepartmentKey                 *Guid                                                                    `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	TypeOfMovingMoneyKey          *Guid                                                                    `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVkliuchaetNDS            *Boolean                                                                 `xml:"СуммаВключаетНДС" json:"СуммаВключаетНДС,omitempty"`
	SumOfDocument                 *Float                                                                   `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	TipDokumenta                  *String                                                                  `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	UslovieProdazhKey             *Guid                                                                    `xml:"УсловиеПродаж_Key" json:"УсловиеПродаж_Key,omitempty"`
	UchityvatNDS                  *Boolean                                                                 `xml:"УчитыватьНДС" json:"УчитыватьНДС,omitempty"`
	KhoziaistvennaiaOperatsiiaKey *Guid                                                                    `xml:"ХозяйственнаяОперация_Key" json:"ХозяйственнаяОперация_Key,omitempty"`
	Bonusy                        *[]DocumentOtchetORoznichnykhProdazhakhBonusyRowType                     `xml:"Бонусы" json:"Бонусы,omitempty"`
	OplataBankovskimiKreditami    *[]DocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditamiRowType `xml:"ОплатаБанковскимиКредитами" json:"ОплатаБанковскимиКредитами,omitempty"`
	OplataPlatezhnymiKartami      *[]DocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartamiRowType   `xml:"ОплатаПлатежнымиКартами" json:"ОплатаПлатежнымиКартами,omitempty"`
	OplataSertifikatami           *[]DocumentOtchetORoznichnykhProdazhakhOplataSertifikatamiRowType        `xml:"ОплатаСертификатами" json:"ОплатаСертификатами,omitempty"`
	ProdazhaSertifikatov          *[]DocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatovRowType       `xml:"ПродажаСертификатов" json:"ПродажаСертификатов,omitempty"`
	Goods                         *[]DocumentOtchetORoznichnykhProdazhakhTovaryRowType                     `xml:"Товары" json:"Товары,omitempty"`
	DogovoraRassrochkiProdazha    *[]DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazhaRowType `xml:"ДоговораРассрочкиПродажа" json:"ДоговораРассрочкиПродажа,omitempty"`
	DokumentyObmena               *[]DocumentOtchetORoznichnykhProdazhakhDokumentyObmenaRowType            `xml:"ДокументыОбмена" json:"ДокументыОбмена,omitempty"`
	DogovoraRassrochkiOplata      *[]DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplataRowType   `xml:"ДоговораРассрочкиОплата" json:"ДоговораРассрочкиОплата,omitempty"`
	OplataBallami                 *[]DocumentOtchetORoznichnykhProdazhakhOplataBallamiRowType              `xml:"ОплатаБаллами" json:"ОплатаБаллами,omitempty"`
	SkidkiNatsenki                *[]DocumentOtchetORoznichnykhProdazhakhSkidkiNatsenkiRowType             `xml:"СкидкиНаценки" json:"СкидкиНаценки,omitempty"`
	Kupony                        *[]DocumentOtchetORoznichnykhProdazhakhKuponyRowType                     `xml:"Купоны" json:"Купоны,omitempty"`
	DokumentOsnovanieType         *String                                                                  `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
}

func (entity SaleJournal) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity SaleJournal) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentOtchetORoznichnykhProdazhakhBonusy struct {
	Key                                 Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                          Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	MemberCardKey                       *Guid    `xml:"ДисконтнаяКарта_Key" json:"ДисконтнаяКарта_Key,omitempty"`
	NomerCheka                          *String  `xml:"НомерЧека" json:"НомерЧека,omitempty"`
	SummaNachislennogoBonusa            *Float   `xml:"СуммаНачисленногоБонуса" json:"СуммаНачисленногоБонуса,omitempty"`
	SummaNachislennogoBonusaRasschitana *Boolean `xml:"СуммаНачисленногоБонусаРассчитана" json:"СуммаНачисленногоБонусаРассчитана,omitempty"`
	SummaOplaty                         *Float   `xml:"СуммаОплаты" json:"СуммаОплаты,omitempty"`
	SummaPokupki                        *Float   `xml:"СуммаПокупки" json:"СуммаПокупки,omitempty"`
	OrderKey                            *Guid    `xml:"КлючПродажи_Key" json:"КлючПродажи_Key,omitempty"`
	OpisanieKarty                       *String  `xml:"ОписаниеКарты" json:"ОписаниеКарты,omitempty"`
}

type DocumentOtchetORoznichnykhProdazhakhOplataBankovskimiKreditami struct {
	Key                                     Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                              Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	BankKreditorKey                         *Guid   `xml:"БанкКредитор_Key" json:"БанкКредитор_Key,omitempty"`
	VidOplatyKey                            *Guid   `xml:"ВидОплаты_Key" json:"ВидОплаты_Key,omitempty"`
	DogovorVzaimoraschetovBankaKreditoraKey *Guid   `xml:"ДоговорВзаиморасчетовБанкаКредитора_Key" json:"ДоговорВзаиморасчетовБанкаКредитора_Key,omitempty"`
	NomerCheka                              *String `xml:"НомерЧека" json:"НомерЧека,omitempty"`
	ProtsentBankovskoiKomissii              *Float  `xml:"ПроцентБанковскойКомиссии" json:"ПроцентБанковскойКомиссии,omitempty"`
	Sum                                     *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaBankovskoiKomissii                 *Float  `xml:"СуммаБанковскойКомиссии" json:"СуммаБанковскойКомиссии,omitempty"`
	OrderKey                                *Guid   `xml:"КлючПродажи_Key" json:"КлючПродажи_Key,omitempty"`
}

type DocumentOtchetORoznichnykhProdazhakhOplataPlatezhnymiKartami struct {
	Key                     Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber              Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	VidOplatyKey            *Guid   `xml:"ВидОплаты_Key" json:"ВидОплаты_Key,omitempty"`
	NomerCheka              *String `xml:"НомерЧека" json:"НомерЧека,omitempty"`
	ProtsentTorgovoiUstupki *Float  `xml:"ПроцентТорговойУступки" json:"ПроцентТорговойУступки,omitempty"`
	Sum                     *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaTorgovoiUstupki    *Float  `xml:"СуммаТорговойУступки" json:"СуммаТорговойУступки,omitempty"`
	OrderKey                *Guid   `xml:"КлючПродажи_Key" json:"КлючПродажи_Key,omitempty"`
}

type DocumentOtchetORoznichnykhProdazhakhOplataSertifikatami struct {
	Key                                Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                         Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	NomerCheka                         *String  `xml:"НомерЧека" json:"НомерЧека,omitempty"`
	SertifikatKey                      *Guid    `xml:"Сертификат_Key" json:"Сертификат_Key,omitempty"`
	SrokDeistviiaSertifikataOgranichen *Boolean `xml:"СрокДействияСертификатаОграничен" json:"СрокДействияСертификатаОграничен,omitempty"`
	SummaPokupkiPogashennaia           *Float   `xml:"СуммаПокупкиПогашенная" json:"СуммаПокупкиПогашенная,omitempty"`
	SummaSertifikata                   *Float   `xml:"СуммаСертификата" json:"СуммаСертификата,omitempty"`
	OrderKey                           *Guid    `xml:"КлючПродажи_Key" json:"КлючПродажи_Key,omitempty"`
	NomerSertifikata                   *String  `xml:"НомерСертификата" json:"НомерСертификата,omitempty"`
}

type DocumentOtchetORoznichnykhProdazhakhProdazhaSertifikatov struct {
	Key              Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber       Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	NomerCheka       *String `xml:"НомерЧека" json:"НомерЧека,omitempty"`
	SertifikatKey    *Guid   `xml:"Сертификат_Key" json:"Сертификат_Key,omitempty"`
	NomerSertifikata *String `xml:"НомерСертификата" json:"НомерСертификата,omitempty"`
	Sum              *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	OrderKey         *Guid   `xml:"КлючПродажи_Key" json:"КлючПродажи_Key,omitempty"`
}

type DocumentOtchetORoznichnykhProdazhakhTovary struct {
	Key                                        Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                                 Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                                     *Float  `xml:"Вес" json:"Вес,omitempty"`
	MemberCardKey                              *Guid   `xml:"ДисконтнаяКарта_Key" json:"ДисконтнаяКарта_Key,omitempty"`
	Kassir                                     *String `xml:"Кассир" json:"Кассир,omitempty"`
	Quantity                                   *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                                    *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	NomerCheka                                 *String `xml:"НомерЧека" json:"НомерЧека,omitempty"`
	PercentAutoDiscount                        *Float  `xml:"ПроцентАвтоматическойСкидки" json:"ПроцентАвтоматическойСкидки,omitempty"`
	PercentManualDiscount                      *Float  `xml:"ПроцентРучнойСкидки" json:"ПроцентРучнойСкидки,omitempty"`
	SizeKey                                    *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                                *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	SumManualDiscount                          *Float  `xml:"СуммаРучнойСкидки" json:"СуммаРучнойСкидки,omitempty"`
	DepartmentKey                              *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	StavkaNDS                                  *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                                        *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                                   *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	UslovieAvtomaticheskoiSkidki               *String `xml:"УсловиеАвтоматическойСкидки" json:"УсловиеАвтоматическойСкидки,omitempty"`
	KharakteristikaNomenklaturyKey             *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                                       *Float  `xml:"Цена" json:"Цена,omitempty"`
	OrderKey                                   *Guid   `xml:"КлючПродажи_Key" json:"КлючПродажи_Key,omitempty"`
	SumAutoDiscount                            *Float  `xml:"СуммаАвтоматическойСкидки" json:"СуммаАвтоматическойСкидки,omitempty"`
	KliuchSviazi                               *Int    `xml:"КлючСвязи" json:"КлючСвязи,omitempty"`
	ZnachenieUsloviiaAvtomaticheskoiSkidki     *String `xml:"ЗначениеУсловияАвтоматическойСкидки" json:"ЗначениеУсловияАвтоматическойСкидки,omitempty"`
	OpisanieKarty                              *String `xml:"ОписаниеКарты" json:"ОписаниеКарты,omitempty"`
	SostavStrokiDliaRassrochkiKey              *Guid   `xml:"СоставСтрокиДляРассрочки_Key" json:"СоставСтрокиДляРассрочки_Key,omitempty"`
	KassirType                                 *String `xml:"Кассир_Type" json:"Кассир_Type,omitempty"`
	ZnachenieUsloviiaAvtomaticheskoiSkidkiType *String `xml:"ЗначениеУсловияАвтоматическойСкидки_Type" json:"ЗначениеУсловияАвтоматическойСкидки_Type,omitempty"`
}

type DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiProdazha struct {
	Key                  Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber           Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	NomerCheka           *String `xml:"НомерЧека" json:"НомерЧека,omitempty"`
	Sum                  *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	DogovorRassrochkiKey *Guid   `xml:"ДоговорРассрочки_Key" json:"ДоговорРассрочки_Key,omitempty"`
	OrderKey             *Guid   `xml:"КлючПродажи_Key" json:"КлючПродажи_Key,omitempty"`
}

type DocumentOtchetORoznichnykhProdazhakhDokumentyObmena struct {
	Key         Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber  Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	DokumentKey *Guid   `xml:"Документ_Key" json:"Документ_Key,omitempty"`
	Sum         *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	NomerCheka  *String `xml:"НомерЧека" json:"НомерЧека,omitempty"`
	OrderKey    *Guid   `xml:"КлючПродажи_Key" json:"КлючПродажи_Key,omitempty"`
}

type DocumentOtchetORoznichnykhProdazhakhDogovoraRassrochkiOplata struct {
	Key                  Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber           Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Sum                  *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	NomerCheka           *String `xml:"НомерЧека" json:"НомерЧека,omitempty"`
	DogovorRassrochkiKey *Guid   `xml:"ДоговорРассрочки_Key" json:"ДоговорРассрочки_Key,omitempty"`
	OrderKey             *Guid   `xml:"КлючПродажи_Key" json:"КлючПродажи_Key,omitempty"`
}

type DocumentOtchetORoznichnykhProdazhakhOplataBallami struct {
	Key                    Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber             Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Khesh                  *String `xml:"Хэш" json:"Хэш,omitempty"`
	Poslednie4             *String `xml:"Последние4" json:"Последние4,omitempty"`
	Sum                    *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	Identifikator          *String `xml:"Идентификатор" json:"Идентификатор,omitempty"`
	TransactionId          *String `xml:"TransactionId" json:"TransactionId,omitempty"`
	TransactionIdSpisaniia *String `xml:"TransactionIdСписания" json:"TransactionIdСписания,omitempty"`
	NomerCheka             *String `xml:"НомерЧека" json:"НомерЧека,omitempty"`
	OrderKey               *Guid   `xml:"КлючПродажи_Key" json:"КлючПродажи_Key,omitempty"`
}

type DocumentOtchetORoznichnykhProdazhakhSkidkiNatsenki struct {
	Key               Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber        Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	KliuchSviazi      *Int   `xml:"КлючСвязи" json:"КлючСвязи,omitempty"`
	Sum               *Float `xml:"Сумма" json:"Сумма,omitempty"`
	SkidkaNatsenkaKey *Guid  `xml:"СкидкаНаценка_Key" json:"СкидкаНаценка_Key,omitempty"`
	OrderKey          *Guid  `xml:"КлючПродажи_Key" json:"КлючПродажи_Key,omitempty"`
}

type DocumentOtchetORoznichnykhProdazhakhKupony struct {
	Key          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber   Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	KliuchSviazi *Int     `xml:"КлючСвязи" json:"КлючСвязи,omitempty"`
	KuponKey     *Guid    `xml:"Купон_Key" json:"Купон_Key,omitempty"`
	NomerKupona  *String  `xml:"НомерКупона" json:"НомерКупона,omitempty"`
	Spisyvat     *Boolean `xml:"Списывать" json:"Списывать,omitempty"`
}

type DocumentOtmenaSkidokNomenklatury struct {
	Key                   Guid                                                `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion           *String                                             `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                *String                                             `xml:"Number" json:"Number,omitempty"`
	Date                  *Time                                               `xml:"Date" json:"Date,omitempty"`
	DeletionMark          *Boolean                                            `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                *Boolean                                            `xml:"Posted" json:"Posted,omitempty"`
	DokumentOsnovanie     *String                                             `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	Comment               *String                                             `xml:"Комментарий" json:"Комментарий,omitempty"`
	OtvetstvennyiKey      *Guid                                               `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	Dokumenty             *[]DocumentOtmenaSkidokNomenklaturyDokumentyRowType `xml:"Документы" json:"Документы,omitempty"`
	DokumentOsnovanieType *String                                             `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
}

func (entity DocumentOtmenaSkidokNomenklatury) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentOtmenaSkidokNomenklatury) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentOtmenaSkidokNomenklaturyDokumenty struct {
	Key                            Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	UstanovkaSkidokNomenklaturyKey *Guid `xml:"УстановкаСкидокНоменклатуры_Key" json:"УстановкаСкидокНоменклатуры_Key,omitempty"`
}

type CatalogTovarnyeGruppy struct {
	Key          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion  *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description  *String  `xml:"Description" json:"Description,omitempty"`
	DeletionMark *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
}

type DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstv struct {
	Key                                  Guid                                                                              `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                          *String                                                                           `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                               *String                                                                           `xml:"Number" json:"Number,omitempty"`
	Date                                 *Time                                                                             `xml:"Date" json:"Date,omitempty"`
	DeletionMark                         *Boolean                                                                          `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                               *Boolean                                                                          `xml:"Posted" json:"Posted,omitempty"`
	ValiutaDokumentaKey                  *Guid                                                                             `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	OperationType                        *String                                                                           `xml:"ВидОперации" json:"ВидОперации,omitempty"`
	DataOplaty                           *Time                                                                             `xml:"ДатаОплаты" json:"ДатаОплаты,omitempty"`
	DogovorKontragentaKey                *Guid                                                                             `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie                    *String                                                                           `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	DokumentPlanirovaniiaPostupleniiaKey *Guid                                                                             `xml:"ДокументПланированияПоступления_Key" json:"ДокументПланированияПоступления_Key,omitempty"`
	Comment                              *String                                                                           `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey                        *Guid                                                                             `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	Oplacheno                            *Boolean                                                                          `xml:"Оплачено" json:"Оплачено,omitempty"`
	OrganizatsiiaKey                     *Guid                                                                             `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                     *Guid                                                                             `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	OtrazhenoVOperUchete                 *Boolean                                                                          `xml:"ОтраженоВОперУчете" json:"ОтраженоВОперУчете,omitempty"`
	RaschetnyiDokument                   *String                                                                           `xml:"РасчетныйДокумент" json:"РасчетныйДокумент,omitempty"`
	TypeOfMovingMoneyKey                 *Guid                                                                             `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SumOfDocument                        *Float                                                                            `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	SchetKontragentaKey                  *Guid                                                                             `xml:"СчетКонтрагента_Key" json:"СчетКонтрагента_Key,omitempty"`
	SchetOrganizatsiiKey                 *Guid                                                                             `xml:"СчетОрганизации_Key" json:"СчетОрганизации_Key,omitempty"`
	TipDokumenta                         *String                                                                           `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	NomerVkhodiashchegoDokumenta         *String                                                                           `xml:"НомерВходящегоДокумента" json:"НомерВходящегоДокумента,omitempty"`
	DataVkhodiashchegoDokumenta          *Time                                                                             `xml:"ДатаВходящегоДокумента" json:"ДатаВходящегоДокумента,omitempty"`
	PodrazdelenieKey                     *Guid                                                                             `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	NaznacheniePlatezha                  *String                                                                           `xml:"НазначениеПлатежа" json:"НазначениеПлатежа,omitempty"`
	ExtendedPayments                     *[]DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezhaRowType `xml:"РасшифровкаПлатежа" json:"РасшифровкаПлатежа,omitempty"`
	RekvizityKontragenta                 *[]DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragentaRowType `xml:"РеквизитыКонтрагента" json:"РеквизитыКонтрагента,omitempty"`
	DokumentOsnovanieType                *String                                                                           `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
	RaschetnyiDokumentType               *String                                                                           `xml:"РасчетныйДокумент_Type" json:"РасчетныйДокумент_Type,omitempty"`
}

func (entity DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstv) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstv) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRasshifrovkaPlatezha struct {
	Key                              Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                       Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	DogovorKontragentaKey            *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentPlanirovaniiaPlatezhaKey *Guid   `xml:"ДокументПланированияПлатежа_Key" json:"ДокументПланированияПлатежа_Key,omitempty"`
	KratnostVzaimoraschetov          *Int    `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov              *Float  `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	KursVzaimoraschetovPlan          *Float  `xml:"КурсВзаиморасчетовПлан" json:"КурсВзаиморасчетовПлан,omitempty"`
	ProektKey                        *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	Sdelka                           *String `xml:"Сделка" json:"Сделка,omitempty"`
	StavkaNDS                        *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	TypeOfMovingMoneyKey             *Guid   `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov             *Float  `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	SummaNDS                         *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	Sum                              *Float  `xml:"СуммаПлатежа" json:"СуммаПлатежа,omitempty"`
	SummaPlatezhaPlan                *Float  `xml:"СуммаПлатежаПлан" json:"СуммаПлатежаПлан,omitempty"`
	SdelkaType                       *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type DocumentPlatezhnyiOrderPostuplenieDenezhnykhSredstvRekvizityKontragenta struct {
	Key            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Znachenie      *String `xml:"Значение" json:"Значение,omitempty"`
	Predstavlenie  *String `xml:"Представление" json:"Представление,omitempty"`
	Rekvizit       *String `xml:"Реквизит" json:"Реквизит,omitempty"`
	TipKontragenta *String `xml:"ТипКонтрагента" json:"ТипКонтрагента,omitempty"`
}

type CatalogOrderKey struct {
	Key                            Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                    *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                    *String  `xml:"Description" json:"Description,omitempty"`
	Code                           *Int     `xml:"Code" json:"Code,omitempty"`
	DeletionMark                   *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	UnikalnyiIdentifikatorProdazhi *Guid    `xml:"УникальныйИдентификаторПродажи" json:"УникальныйИдентификаторПродажи,omitempty"`
	TransactionIdSpisaniia         *String  `xml:"TransactionIdСписания" json:"TransactionIdСписания,omitempty"`
	TransactionIdNachisleniia      *String  `xml:"TransactionIdНачисления" json:"TransactionIdНачисления,omitempty"`
	OrganizatsiiaKey               *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DepartmentKey                  *Guid    `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	Number                         *String  `xml:"Номер" json:"Номер,omitempty"`
	Date                           *Time    `xml:"Дата" json:"Дата,omitempty"`
	OperationType                  *String  `xml:"ВидОперации" json:"ВидОперации,omitempty"`
	MemberCardKey                  *Guid    `xml:"ДисконтнаяКарта_Key" json:"ДисконтнаяКарта_Key,omitempty"`
}

type DocumentKassovyiChekKorrektsii struct {
	Key                            Guid                                           `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                    *String                                        `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                         *String                                        `xml:"Number" json:"Number,omitempty"`
	Date                           *Time                                          `xml:"Date" json:"Date,omitempty"`
	DeletionMark                   *Boolean                                       `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                         *Boolean                                       `xml:"Posted" json:"Posted,omitempty"`
	OrganizatsiiaKey               *Guid                                          `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	KassaKKMKey                    *Guid                                          `xml:"КассаККМ_Key" json:"КассаККМ_Key,omitempty"`
	SumOfDocument                  *Float                                         `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	StavkaNDS                      *String                                        `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	TipKorrektsii                  *Int                                           `xml:"ТипКоррекции" json:"ТипКоррекции,omitempty"`
	TipRascheta                    *String                                        `xml:"ТипРасчета" json:"ТипРасчета,omitempty"`
	OtvetstvennyiKey               *Guid                                          `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	Comment                        *String                                        `xml:"Комментарий" json:"Комментарий,omitempty"`
	NumberKKT                      *Int                                           `xml:"НомерЧекаККМ" json:"НомерЧекаККМ,omitempty"`
	Predpisanie                    *String                                        `xml:"Предписание" json:"Предписание,omitempty"`
	ProbitChekNaKKT                *Boolean                                       `xml:"ПробитЧекНаККТ" json:"ПробитЧекНаККТ,omitempty"`
	OsnovanieDliaKorrektsii        *String                                        `xml:"ОснованиеДляКоррекции" json:"ОснованиеДляКоррекции,omitempty"`
	DataDokumentaOsnovaniia        *Time                                          `xml:"ДатаДокументаОснования" json:"ДатаДокументаОснования,omitempty"`
	NomerDokumentaOsnovaniia       *String                                        `xml:"НомерДокументаОснования" json:"НомерДокументаОснования,omitempty"`
	PredstavlenieOsnovaniia        *String                                        `xml:"ПредставлениеОснования" json:"ПредставлениеОснования,omitempty"`
	SummaNDS                       *Float                                         `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	GungNumber                     *Int                                           `xml:"НомерСменыККМ" json:"НомерСменыККМ,omitempty"`
	TipSistemyNalogooblozheniiaKey *Guid                                          `xml:"ТипСистемыНалогообложения_Key" json:"ТипСистемыНалогообложения_Key,omitempty"`
	Payments                       *[]DocumentKassovyiChekKorrektsiiOplataRowType `xml:"Оплата" json:"Оплата,omitempty"`
	OsnovanieDliaKorrektsiiType    *String                                        `xml:"ОснованиеДляКоррекции_Type" json:"ОснованиеДляКоррекции_Type,omitempty"`
}

func (entity DocumentKassovyiChekKorrektsii) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentKassovyiChekKorrektsii) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentKassovyiChekKorrektsiiOplata struct {
	Key        Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	TipOplaty  *String `xml:"ТипОплаты" json:"ТипОплаты,omitempty"`
	Sum        *Float  `xml:"Сумма" json:"Сумма,omitempty"`
}

type DocumentSchetNaOplatuPokupateliu struct {
	Key                      Guid                                             `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion              *String                                          `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                   *String                                          `xml:"Number" json:"Number,omitempty"`
	Date                     *Time                                            `xml:"Date" json:"Date,omitempty"`
	DeletionMark             *Boolean                                         `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                   *Boolean                                         `xml:"Posted" json:"Posted,omitempty"`
	AdresDostavki            *String                                          `xml:"АдресДоставки" json:"АдресДоставки,omitempty"`
	ValiutaDokumentaKey      *Guid                                            `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	VremiaNapominaniia       *Time                                            `xml:"ВремяНапоминания" json:"ВремяНапоминания,omitempty"`
	DataOplaty               *Time                                            `xml:"ДатаОплаты" json:"ДатаОплаты,omitempty"`
	DataOtgruzki             *Time                                            `xml:"ДатаОтгрузки" json:"ДатаОтгрузки,omitempty"`
	DogovorKontragentaKey    *Guid                                            `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie        *String                                          `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	ZakazKlientaKey          *Guid                                            `xml:"ЗаказКлиента_Key" json:"ЗаказКлиента_Key,omitempty"`
	Comment                  *String                                          `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontaktnoeLitso          *String                                          `xml:"КонтактноеЛицо" json:"КонтактноеЛицо,omitempty"`
	Kontragent               *String                                          `xml:"Контрагент" json:"Контрагент,omitempty"`
	KratnostVzaimoraschetov  *Int                                             `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov      *Float                                           `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	NapomnitOSobytii         *Boolean                                         `xml:"НапомнитьОСобытии" json:"НапомнитьОСобытии,omitempty"`
	OrganizatsiiaKey         *Guid                                            `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey         *Guid                                            `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey         *Guid                                            `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	DepartmentKey            *Guid                                            `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	StrukturnaiaEdinitsa     *String                                          `xml:"СтруктурнаяЕдиница" json:"СтруктурнаяЕдиница,omitempty"`
	SummaVkliuchaetNDS       *Boolean                                         `xml:"СуммаВключаетНДС" json:"СуммаВключаетНДС,omitempty"`
	SumOfDocument            *Float                                           `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	TipDokumenta             *String                                          `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	TipTsenKey               *Guid                                            `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
	UchityvatNDS             *Boolean                                         `xml:"УчитыватьНДС" json:"УчитыватьНДС,omitempty"`
	Goods                    *[]DocumentSchetNaOplatuPokupateliuTovaryRowType `xml:"Товары" json:"Товары,omitempty"`
	Uslugi                   *[]DocumentSchetNaOplatuPokupateliuUslugiRowType `xml:"Услуги" json:"Услуги,omitempty"`
	DokumentOsnovanieType    *String                                          `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
	KontaktnoeLitsoType      *String                                          `xml:"КонтактноеЛицо_Type" json:"КонтактноеЛицо_Type,omitempty"`
	KontragentType           *String                                          `xml:"Контрагент_Type" json:"Контрагент_Type,omitempty"`
	StrukturnaiaEdinitsaType *String                                          `xml:"СтруктурнаяЕдиница_Type" json:"СтруктурнаяЕдиница_Type,omitempty"`
}

func (entity DocumentSchetNaOplatuPokupateliu) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentSchetNaOplatuPokupateliu) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentSchetNaOplatuPokupateliuTovary struct {
	Key                                        Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                                 Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                                     *Float  `xml:"Вес" json:"Вес,omitempty"`
	ZnachenieUsloviiaAvtomaticheskoiSkidki     *String `xml:"ЗначениеУсловияАвтоматическойСкидки" json:"ЗначениеУсловияАвтоматическойСкидки,omitempty"`
	Quantity                                   *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                                    *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	PercentAutoDiscount                        *Float  `xml:"ПроцентАвтоматическойСкидки" json:"ПроцентАвтоматическойСкидки,omitempty"`
	PercentManualDiscount                      *Float  `xml:"ПроцентРучнойСкидки" json:"ПроцентРучнойСкидки,omitempty"`
	SizeKey                                    *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                                *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	StavkaNDS                                  *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                                        *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                                   *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	UslovieAvtomaticheskoiSkidki               *String `xml:"УсловиеАвтоматическойСкидки" json:"УсловиеАвтоматическойСкидки,omitempty"`
	KharakteristikaNomenklaturyKey             *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                                       *Float  `xml:"Цена" json:"Цена,omitempty"`
	SumAutoDiscount                            *Float  `xml:"СуммаАвтоматическойСкидки" json:"СуммаАвтоматическойСкидки,omitempty"`
	SumManualDiscount                          *Float  `xml:"СуммаРучнойСкидки" json:"СуммаРучнойСкидки,omitempty"`
	ZnachenieUsloviiaAvtomaticheskoiSkidkiType *String `xml:"ЗначениеУсловияАвтоматическойСкидки_Type" json:"ЗначениеУсловияАвтоматическойСкидки_Type,omitempty"`
}

type DocumentSchetNaOplatuPokupateliuUslugi struct {
	Key                   Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber            Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Quantity              *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey               *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	PercentManualDiscount *Float  `xml:"ПроцентРучнойСкидки" json:"ПроцентРучнойСкидки,omitempty"`
	Soderzhanie           *String `xml:"Содержание" json:"Содержание,omitempty"`
	StavkaNDS             *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                   *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS              *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	Cost                  *Float  `xml:"Цена" json:"Цена,omitempty"`
	SumManualDiscount     *Float  `xml:"СуммаРучнойСкидки" json:"СуммаРучнойСкидки,omitempty"`
}

type CatalogNastroikiObmenaDannymi struct {
	Key                                                                   Guid                                                                             `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                                                           *String                                                                          `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                                                           *String                                                                          `xml:"Description" json:"Description,omitempty"`
	Code                                                                  *String                                                                          `xml:"Code" json:"Code,omitempty"`
	DeletionMark                                                          *Boolean                                                                         `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	FTPAdresObmena                                                        *String                                                                          `xml:"FTPАдресОбмена" json:"FTPАдресОбмена,omitempty"`
	OnLineObmen                                                           *Boolean                                                                         `xml:"OnLineОбмен" json:"OnLineОбмен,omitempty"`
	AvtomaticheskiZakachivatPochtuPriObmene                               *Boolean                                                                         `xml:"АвтоматическиЗакачиватьПочтуПриОбмене" json:"АвтоматическиЗакачиватьПочтуПриОбмене,omitempty"`
	AdresDliaOtpravkiSoobshcheniiObOshibke                                *String                                                                          `xml:"АдресДляОтправкиСообщенийОбОшибке" json:"АдресДляОтправкиСообщенийОбОшибке,omitempty"`
	AutentifikatsiiaWindowsInformatsionnoiBazyDliaPodkliucheniia          *Boolean                                                                         `xml:"АутентификацияWindowsИнформационнойБазыДляПодключения" json:"АутентификацияWindowsИнформационнойБазыДляПодключения,omitempty"`
	VersiiaPlatformyInformatsionnoiBazyDliaPodkliucheniia                 *String                                                                          `xml:"ВерсияПлатформыИнформационнойБазыДляПодключения" json:"ВерсияПлатформыИнформационнойБазыДляПодключения,omitempty"`
	VypolnitOtlozhennoeProvedenieDokumentovPoRaspisaniiu                  *Boolean                                                                         `xml:"ВыполнитьОтложенноеПроведениеДокументовПоРасписанию" json:"ВыполнитьОтложенноеПроведениеДокументовПоРасписанию,omitempty"`
	VypolniatArkhivatsiiuFailovObmena                                     *Boolean                                                                         `xml:"ВыполнятьАрхивациюФайловОбмена" json:"ВыполнятьАрхивациюФайловОбмена,omitempty"`
	VypolniatDeistviiaPodPolnymiPravami                                   *Boolean                                                                         `xml:"ВыполнятьДействияПодПолнымиПравами" json:"ВыполнятьДействияПодПолнымиПравами,omitempty"`
	DobavlenieObieektovIzFonovogoObmena                                   *Int                                                                             `xml:"ДобавлениеОбъектовИзФоновогоОбмена" json:"ДобавлениеОбъектовИзФоновогоОбмена,omitempty"`
	ImiaInformatsionnoiBazyNaServereDliaPodkliucheniia                    *String                                                                          `xml:"ИмяИнформационнойБазыНаСервереДляПодключения" json:"ИмяИнформационнойБазыНаСервереДляПодключения,omitempty"`
	ImiaServeraInformatsionnoiBazyDliaPodkliucheniia                      *String                                                                          `xml:"ИмяСервераИнформационнойБазыДляПодключения" json:"ИмяСервераИнформационнойБазыДляПодключения,omitempty"`
	ImiaFailaPravil                                                       *String                                                                          `xml:"ИмяФайлаПравил" json:"ИмяФайлаПравил,omitempty"`
	ImiaFailaProtokolaObmenaOnLineObmen                                   *String                                                                          `xml:"ИмяФайлаПротоколаОбменаOnLineОбмен" json:"ИмяФайлаПротоколаОбменаOnLineОбмен,omitempty"`
	KatalogInformatsionnoiBazyDliaPodkliucheniia                          *String                                                                          `xml:"КаталогИнформационнойБазыДляПодключения" json:"КаталогИнформационнойБазыДляПодключения,omitempty"`
	KatalogObmenaInformatsiei                                             *String                                                                          `xml:"КаталогОбменаИнформацией" json:"КаталогОбменаИнформацией,omitempty"`
	KolichestvoObieektovDliaFonovogoObmena                                *Int                                                                             `xml:"КоличествоОбъектовДляФоновогоОбмена" json:"КоличествоОбъектовДляФоновогоОбмена,omitempty"`
	KolichestvoOshibokOtlozhennogoProvedeniiaDliaPrekrashcheniiaOperatsii *Int                                                                             `xml:"КоличествоОшибокОтложенногоПроведенияДляПрекращенияОперации" json:"КоличествоОшибокОтложенногоПроведенияДляПрекращенияОперации,omitempty"`
	KolichestvoElementovVTranzaktsiiNaVygruzkuDannykh                     *Int                                                                             `xml:"КоличествоЭлементовВТранзакцииНаВыгрузкуДанных" json:"КоличествоЭлементовВТранзакцииНаВыгрузкуДанных,omitempty"`
	KolichestvoElementovVTranzaktsiiNaZagruzkuDannykh                     *Int                                                                             `xml:"КоличествоЭлементовВТранзакцииНаЗагрузкуДанных" json:"КоличествоЭлементовВТранзакцииНаЗагрузкуДанных,omitempty"`
	Comment                                                               *String                                                                          `xml:"Комментарий" json:"Комментарий,omitempty"`
	MaksimalnyiRazmerOtpravliaemogoPaketaCherezPochtu                     *Int                                                                             `xml:"МаксимальныйРазмерОтправляемогоПакетаЧерезПочту" json:"МаксимальныйРазмерОтправляемогоПакетаЧерезПочту,omitempty"`
	MaksimalnyiRazmerOtpravliaemogoPoluchaemogoPaketaCherezFTP            *Int                                                                             `xml:"МаксимальныйРазмерОтправляемогоПолучаемогоПакетаЧерезFTP" json:"МаксимальныйРазмерОтправляемогоПолучаемогоПакетаЧерезFTP,omitempty"`
	OtpravitPravilaObmenaPriemniku                                        *Boolean                                                                         `xml:"ОтправитьПравилаОбменаПриемнику" json:"ОтправитьПравилаОбменаПриемнику,omitempty"`
	ParolFTPSoedineniia                                                   *String                                                                          `xml:"ПарольFTPСоединения" json:"ПарольFTPСоединения,omitempty"`
	ParolInformatsionnoiBazyDliaPodkliucheniia                            *String                                                                          `xml:"ПарольИнформационнойБазыДляПодключения" json:"ПарольИнформационнойБазыДляПодключения,omitempty"`
	ParolNaOtpravku                                                       *String                                                                          `xml:"ПарольНаОтправку" json:"ПарольНаОтправку,omitempty"`
	ParolNaPriem                                                          *String                                                                          `xml:"ПарольНаПрием" json:"ПарольНаПрием,omitempty"`
	ParolProksiFTP                                                        *String                                                                          `xml:"ПарольПроксиFTP" json:"ПарольПроксиFTP,omitempty"`
	PassivnoeFTPSoedinenie                                                *Boolean                                                                         `xml:"ПассивноеFTPСоединение" json:"ПассивноеFTPСоединение,omitempty"`
	PolzovatelFTPSoedineniia                                              *String                                                                          `xml:"ПользовательFTPСоединения" json:"ПользовательFTPСоединения,omitempty"`
	PolzovatelInformatsionnoiBazyDliaPodkliucheniia                       *String                                                                          `xml:"ПользовательИнформационнойБазыДляПодключения" json:"ПользовательИнформационнойБазыДляПодключения,omitempty"`
	PolzovatelProksiFTP                                                   *String                                                                          `xml:"ПользовательПроксиFTP" json:"ПользовательПроксиFTP,omitempty"`
	PortFTPSoedineniia                                                    *Int                                                                             `xml:"ПортFTPСоединения" json:"ПортFTPСоединения,omitempty"`
	PortProksiFTP                                                         *Int                                                                             `xml:"ПортПроксиFTP" json:"ПортПроксиFTP,omitempty"`
	PosleOshibkiOtlozhennogoProvedeniiaPrekratitOperatsii                 *Boolean                                                                         `xml:"ПослеОшибкиОтложенногоПроведенияПрекратитьОперации" json:"ПослеОшибкиОтложенногоПроведенияПрекратитьОперации,omitempty"`
	PochtovyiAdresPoluchatelia                                            *String                                                                          `xml:"ПочтовыйАдресПолучателя" json:"ПочтовыйАдресПолучателя,omitempty"`
	PravilaObmenaBase64Data                                               *Binary                                                                          `xml:"ПравилаОбмена_Base64Data" json:"ПравилаОбмена_Base64Data,omitempty"`
	PravilaObmenaDliaPriemnikaBase64Data                                  *Binary                                                                          `xml:"ПравилаОбменаДляПриемника_Base64Data" json:"ПравилаОбменаДляПриемника_Base64Data,omitempty"`
	ProizvoditOtpravkuSoobshchenii                                        *Boolean                                                                         `xml:"ПроизводитьОтправкуСообщений" json:"ПроизводитьОтправкуСообщений,omitempty"`
	ProizvoditOtpravkuTolkoPriUspeshnomPrieme                             *Boolean                                                                         `xml:"ПроизводитьОтправкуТолькоПриУспешномПриеме" json:"ПроизводитьОтправкуТолькоПриУспешномПриеме,omitempty"`
	ProizvoditPriemSoobshchenii                                           *Boolean                                                                         `xml:"ПроизводитьПриемСообщений" json:"ПроизводитьПриемСообщений,omitempty"`
	ProtokolProksiFTP                                                     *String                                                                          `xml:"ПротоколПроксиFTP" json:"ПротоколПроксиFTP,omitempty"`
	RezhimOtladkiOnLineObmena                                             *Boolean                                                                         `xml:"РежимОтладкиOnLineОбмена" json:"РежимОтладкиOnLineОбмена,omitempty"`
	ServerProksiFTP                                                       *String                                                                          `xml:"СерверПроксиFTP" json:"СерверПроксиFTP,omitempty"`
	TipInformatsionnoiBazyDliaPodkliucheniia                              *Boolean                                                                         `xml:"ТипИнформационнойБазыДляПодключения" json:"ТипИнформационнойБазыДляПодключения,omitempty"`
	TipNastroiki                                                          *String                                                                          `xml:"ТипНастройки" json:"ТипНастройки,omitempty"`
	TipUzlaInformatsionnoiBazy                                            *String                                                                          `xml:"ТипУзлаИнформационнойБазы" json:"ТипУзлаИнформационнойБазы,omitempty"`
	UdalitIstochnikPravil                                                 *String                                                                          `xml:"УдалитьИсточникПравил" json:"УдалитьИсточникПравил,omitempty"`
	UdalitFailObmenaDannymi                                               *Boolean                                                                         `xml:"УдалитьФайлОбменаДанными" json:"УдалитьФайлОбменаДанными,omitempty"`
	UzelInformatsionnoiBazy                                               *String                                                                          `xml:"УзелИнформационнойБазы" json:"УзелИнформационнойБазы,omitempty"`
	UzelFonovogoObmena                                                    *String                                                                          `xml:"УзелФоновогоОбмена" json:"УзелФоновогоОбмена,omitempty"`
	UchetnaiaZapisOtpravkiSoobshcheniiaObOshibkeKey                       *Guid                                                                            `xml:"УчетнаяЗаписьОтправкиСообщенияОбОшибке_Key" json:"УчетнаяЗаписьОтправкиСообщенияОбОшибке_Key,omitempty"`
	UchetnaiaZapisPriemaOtpravkiSoobshcheniiKey                           *Guid                                                                            `xml:"УчетнаяЗаписьПриемаОтправкиСообщений_Key" json:"УчетнаяЗаписьПриемаОтправкиСообщений_Key,omitempty"`
	NastroikaVariantovPoiskaObieektov                                     *[]CatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektovRowType         `xml:"НастройкаВариантовПоискаОбъектов" json:"НастройкаВариантовПоискаОбъектов,omitempty"`
	NastroikaVygruzkiDannykh                                              *[]CatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykhRowType                  `xml:"НастройкаВыгрузкиДанных" json:"НастройкаВыгрузкиДанных,omitempty"`
	SoobshcheniiaNeIavliaiushchiesiaOshibkami                             *[]CatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkamiRowType `xml:"СообщенияНеЯвляющиесяОшибками" json:"СообщенияНеЯвляющиесяОшибками,omitempty"`
	PravilaObmenaType                                                     *String                                                                          `xml:"ПравилаОбмена_Type" json:"ПравилаОбмена_Type,omitempty"`
	PravilaObmenaDliaPriemnikaType                                        *String                                                                          `xml:"ПравилаОбменаДляПриемника_Type" json:"ПравилаОбменаДляПриемника_Type,omitempty"`
	TipUzlaInformatsionnoiBazyType                                        *String                                                                          `xml:"ТипУзлаИнформационнойБазы_Type" json:"ТипУзлаИнформационнойБазы_Type,omitempty"`
	UzelInformatsionnoiBazyType                                           *String                                                                          `xml:"УзелИнформационнойБазы_Type" json:"УзелИнформационнойБазы_Type,omitempty"`
	UzelFonovogoObmenaType                                                *String                                                                          `xml:"УзелФоновогоОбмена_Type" json:"УзелФоновогоОбмена_Type,omitempty"`
	PravilaObmena                                                         *Binary                                                                          `xml:"ПравилаОбмена" json:"ПравилаОбмена,omitempty"`
	PravilaObmenaDliaPriemnika                                            *Binary                                                                          `xml:"ПравилаОбменаДляПриемника" json:"ПравилаОбменаДляПриемника,omitempty"`
}

type CatalogNastroikiObmenaDannymiNastroikaVariantovPoiskaObieektov struct {
	Key                               Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                        Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	VariantPoiskaNePodderzhivaetsia   *Boolean `xml:"ВариантПоискаНеПоддерживается" json:"ВариантПоискаНеПоддерживается,omitempty"`
	ImiaNastroikiDliaAlgoritma        *String  `xml:"ИмяНастройкиДляАлгоритма" json:"ИмяНастройкиДляАлгоритма,omitempty"`
	ImiaNastroikiDliaPolzovatelia     *String  `xml:"ИмяНастройкиДляПользователя" json:"ИмяНастройкиДляПользователя,omitempty"`
	KodPravilaObmena                  *String  `xml:"КодПравилаОбмена" json:"КодПравилаОбмена,omitempty"`
	NaimenovaniePravilaObmena         *String  `xml:"НаименованиеПравилаОбмена" json:"НаименованиеПравилаОбмена,omitempty"`
	NastroikaNePodderzhivaetsia       *Boolean `xml:"НастройкаНеПоддерживается" json:"НастройкаНеПоддерживается,omitempty"`
	OpisanieNastroikiDliaPolzovatelia *String  `xml:"ОписаниеНастройкиДляПользователя" json:"ОписаниеНастройкиДляПользователя,omitempty"`
	EtoNastroikaDliaVygruzki          *Boolean `xml:"ЭтоНастройкаДляВыгрузки" json:"ЭтоНастройкаДляВыгрузки,omitempty"`
}

type CatalogNastroikiObmenaDannymiNastroikaVygruzkiDannykh struct {
	Key                         Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                  Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	VygruzhatDannye             *Boolean `xml:"ВыгружатьДанные" json:"ВыгружатьДанные,omitempty"`
	VygruzhatPoSsylke           *Boolean `xml:"ВыгружатьПоСсылке" json:"ВыгружатьПоСсылке,omitempty"`
	KodPravilaVygruzki          *String  `xml:"КодПравилаВыгрузки" json:"КодПравилаВыгрузки,omitempty"`
	KodPravilaObmena            *String  `xml:"КодПравилаОбмена" json:"КодПравилаОбмена,omitempty"`
	NaimenovaniePravilaVygruzki *String  `xml:"НаименованиеПравилаВыгрузки" json:"НаименованиеПравилаВыгрузки,omitempty"`
	NastroikaNePodderzhivaetsia *Boolean `xml:"НастройкаНеПоддерживается" json:"НастройкаНеПоддерживается,omitempty"`
	EtoNastroikaDliaVygruzki    *Boolean `xml:"ЭтоНастройкаДляВыгрузки" json:"ЭтоНастройкаДляВыгрузки,omitempty"`
}

type CatalogNastroikiObmenaDannymiSoobshcheniiaNeIavliaiushchiesiaOshibkami struct {
	Key                Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber         Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	TekstSoobshcheniia *String `xml:"ТекстСообщения" json:"ТекстСообщения,omitempty"`
}

type DocumentJournalBankovskieRaschetnyeDokumenty struct {
	Ref                  String   `xml:"Ref" json:"Ref,omitempty"`
	Type                 *String  `xml:"Type" json:"Type,omitempty"`
	Date                 *Time    `xml:"Date" json:"Date,omitempty"`
	DeletionMark         *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Number               *String  `xml:"Number" json:"Number,omitempty"`
	Posted               *Boolean `xml:"Posted" json:"Posted,omitempty"`
	ValiutaKey           *Guid    `xml:"Валюта_Key" json:"Валюта_Key,omitempty"`
	OperationType        *String  `xml:"ВидОперации" json:"ВидОперации,omitempty"`
	DataOplaty           *Time    `xml:"ДатаОплаты" json:"ДатаОплаты,omitempty"`
	InformatsiiaKey      *Guid    `xml:"Информация_Key" json:"Информация_Key,omitempty"`
	Comment              *String  `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey        *Guid    `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	Oplacheno            *Boolean `xml:"Оплачено" json:"Оплачено,omitempty"`
	OrganizatsiiaKey     *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey     *Guid    `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	TypeOfMovingMoneyKey *Guid    `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SumOfDocument        *Float   `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	SchetOrganizatsiiKey *Guid    `xml:"СчетОрганизации_Key" json:"СчетОрганизации_Key,omitempty"`
	ChastichnaiaOplata   *Boolean `xml:"ЧастичнаяОплата" json:"ЧастичнаяОплата,omitempty"`
	RefType              String   `xml:"Ref_Type" json:"Ref_Type,omitempty"`
	VidOperatsiiType     *String  `xml:"ВидОперации_Type" json:"ВидОперации_Type,omitempty"`
}

type DocumentZamenaDiskontnoiKarty struct {
	Key                        Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                     *String  `xml:"Number" json:"Number,omitempty"`
	Date                       *Time    `xml:"Date" json:"Date,omitempty"`
	DeletionMark               *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                     *Boolean `xml:"Posted" json:"Posted,omitempty"`
	OtvetstvennyiKey           *Guid    `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	StaraiaDiskontnaiaKartaKey *Guid    `xml:"СтараяДисконтнаяКарта_Key" json:"СтараяДисконтнаяКарта_Key,omitempty"`
	NovaiaDiskontnaiaKartaKey  *Guid    `xml:"НоваяДисконтнаяКарта_Key" json:"НоваяДисконтнаяКарта_Key,omitempty"`
	Comment                    *String  `xml:"Комментарий" json:"Комментарий,omitempty"`
	DokumentSozdanVIuTD        *Boolean `xml:"ДокументСозданВЮТД" json:"ДокументСозданВЮТД,omitempty"`
	NomerStaroiDiskontnoiKarty *String  `xml:"НомерСтаройДисконтнойКарты" json:"НомерСтаройДисконтнойКарты,omitempty"`
	NomerNovoiDiskontnoiKarty  *String  `xml:"НомерНовойДисконтнойКарты" json:"НомерНовойДисконтнойКарты,omitempty"`
	SummaNakoplenii            *Float   `xml:"СуммаНакоплений" json:"СуммаНакоплений,omitempty"`
	SummaBonusov               *Float   `xml:"СуммаБонусов" json:"СуммаБонусов,omitempty"`
}

func (entity DocumentZamenaDiskontnoiKarty) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentZamenaDiskontnoiKarty) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type ReturnToSupplier struct {
	Key                                              Guid                                                `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                                      *String                                             `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                                           *String                                             `xml:"Number" json:"Number,omitempty"`
	Date                                             *Time                                               `xml:"Date" json:"Date,omitempty"`
	DeletionMark                                     *Boolean                                            `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                                           *Boolean                                            `xml:"Posted" json:"Posted,omitempty"`
	BankovskiiSchetOrganizatsiiKey                   *Guid                                               `xml:"БанковскийСчетОрганизации_Key" json:"БанковскийСчетОрганизации_Key,omitempty"`
	ValiutaDokumentaKey                              *Guid                                               `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	Weight                                           *Float                                              `xml:"ВесДокумента" json:"ВесДокумента,omitempty"`
	GruzootpravitelKey                               *Guid                                               `xml:"Грузоотправитель_Key" json:"Грузоотправитель_Key,omitempty"`
	GruzopoluchatelKey                               *Guid                                               `xml:"Грузополучатель_Key" json:"Грузополучатель_Key,omitempty"`
	DogovorKontragentaKey                            *Guid                                               `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie                                *String                                             `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	DokumentSozdanVIuTD                              *Boolean                                            `xml:"ДокументСозданВЮТД" json:"ДокументСозданВЮТД,omitempty"`
	KolichestvoDokumenta                             *Int                                                `xml:"КоличествоДокумента" json:"КоличествоДокумента,omitempty"`
	Comment                                          *String                                             `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey                                    *Guid                                               `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	KratnostVzaimoraschetov                          *Int                                                `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov                              *Float                                              `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	NDSVkliuchenVStoimost                            *Boolean                                            `xml:"НДСВключенВСтоимость" json:"НДСВключенВСтоимость,omitempty"`
	OpisanieDefektov                                 *String                                             `xml:"ОписаниеДефектов" json:"ОписаниеДефектов,omitempty"`
	OrganizatsiiaKey                                 *Guid                                               `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                                 *Guid                                               `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey                                 *Guid                                               `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	Sdelka                                           *String                                             `xml:"Сделка" json:"Сделка,omitempty"`
	DepartmentKey                                    *Guid                                               `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	SummaVkliuchaetNDS                               *Boolean                                            `xml:"СуммаВключаетНДС" json:"СуммаВключаетНДС,omitempty"`
	SumOfDocument                                    *Float                                              `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	TipDokumenta                                     *String                                             `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	TipTsenKey                                       *Guid                                               `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
	UchityvatNDS                                     *Boolean                                            `xml:"УчитыватьНДС" json:"УчитыватьНДС,omitempty"`
	KhoziaistvennaiaOperatsiiaKey                    *Guid                                               `xml:"ХозяйственнаяОперация_Key" json:"ХозяйственнаяОперация_Key,omitempty"`
	PostavshchikuVystavliaetsiaSchetFakturaNaVozvrat *Boolean                                            `xml:"ПоставщикуВыставляетсяСчетФактураНаВозврат" json:"ПоставщикуВыставляетсяСчетФактураНаВозврат,omitempty"`
	Goods                                            *[]DocumentVozvratTovarovPostavshchikuTovaryRowType `xml:"Товары" json:"Товары,omitempty"`
	DokumentOsnovanieType                            *String                                             `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
	SdelkaType                                       *String                                             `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

func (entity ReturnToSupplier) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity ReturnToSupplier) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentVozvratTovarovPostavshchikuTovary struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	DefektKey                      *Guid   `xml:"Дефект_Key" json:"Дефект_Key,omitempty"`
	DokumentPostupleniia           *String `xml:"ДокументПоступления" json:"ДокументПоступления,omitempty"`
	ZakazKlientaKey                *Guid   `xml:"ЗаказКлиента_Key" json:"ЗаказКлиента_Key,omitempty"`
	KachestvoKey                   *Guid   `xml:"Качество_Key" json:"Качество_Key,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	ProektKey                      *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	DepartmentKey                  *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	StavkaNDS                      *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                       *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float  `xml:"Цена" json:"Цена,omitempty"`
	DokumentPostupleniiaType       *String `xml:"ДокументПоступления_Type" json:"ДокументПоступления_Type,omitempty"`
}

type DocumentInventarizatsiiaTovarovNaSklade struct {
	Key                                          Guid                                                                                `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                                  *String                                                                             `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                                       *String                                                                             `xml:"Number" json:"Number,omitempty"`
	Date                                         *Time                                                                               `xml:"Date" json:"Date,omitempty"`
	DeletionMark                                 *Boolean                                                                            `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                                       *Boolean                                                                            `xml:"Posted" json:"Posted,omitempty"`
	Weight                                       *Float                                                                              `xml:"ВесДокумента" json:"ВесДокумента,omitempty"`
	VPechatnykhFormakhTTPechatatRoznichnyeSummy  *Boolean                                                                            `xml:"ВПечатныхФормахТТПечататьРозничныеСуммы" json:"ВПечатныхФормахТТПечататьРозничныеСуммы,omitempty"`
	DokumentSozdanVIuTD                          *Boolean                                                                            `xml:"ДокументСозданВЮТД" json:"ДокументСозданВЮТД,omitempty"`
	KolichestvoDokumenta                         *Int                                                                                `xml:"КоличествоДокумента" json:"КоличествоДокумента,omitempty"`
	Comment                                      *String                                                                             `xml:"Комментарий" json:"Комментарий,omitempty"`
	OrganizatsiiaKey                             *Guid                                                                               `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                             *Guid                                                                               `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	DepartmentKey                                *Guid                                                                               `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	SumOfDocument                                *Float                                                                              `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	UsloviiaProvedeniiaInventarizatsiiBase64Data *Binary                                                                             `xml:"УсловияПроведенияИнвентаризаций_Base64Data" json:"УсловияПроведенияИнвентаризаций_Base64Data,omitempty"`
	KhoziaistvennaiaOperatsiiaKey                *Guid                                                                               `xml:"ХозяйственнаяОперация_Key" json:"ХозяйственнаяОперация_Key,omitempty"`
	PostroitelOtchetaBase64Data                  *Binary                                                                             `xml:"ПостроительОтчета_Base64Data" json:"ПостроительОтчета_Base64Data,omitempty"`
	NastroikiZapolneniiaBase64Data               *Binary                                                                             `xml:"НастройкиЗаполнения_Base64Data" json:"НастройкиЗаполнения_Base64Data,omitempty"`
	Goods                                        *[]DocumentInventarizatsiiaTovarovNaSkladeTovaryRowType                             `xml:"Товары" json:"Товары,omitempty"`
	UsloviiaProvedeniiaInventarizatsii           *[]DocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsiiRowType `xml:"УсловияПроведенияИнвентаризации" json:"УсловияПроведенияИнвентаризации,omitempty"`
	Sertifikaty                                  *[]DocumentInventarizatsiiaTovarovNaSkladeSertifikatyRowType                        `xml:"Сертификаты" json:"Сертификаты,omitempty"`
	TovaryVPuti                                  *[]DocumentInventarizatsiiaTovarovNaSkladeTovaryVPutiRowType                        `xml:"ТоварыВПути" json:"ТоварыВПути,omitempty"`
	UsloviiaProvedeniiaInventarizatsiiType       *String                                                                             `xml:"УсловияПроведенияИнвентаризаций_Type" json:"УсловияПроведенияИнвентаризаций_Type,omitempty"`
	PostroitelOtchetaType                        *String                                                                             `xml:"ПостроительОтчета_Type" json:"ПостроительОтчета_Type,omitempty"`
	NastroikiZapolneniiaType                     *String                                                                             `xml:"НастройкиЗаполнения_Type" json:"НастройкиЗаполнения_Type,omitempty"`
	InventoryTerms                               *Binary                                                                             `xml:"УсловияПроведенияИнвентаризаций" json:"УсловияПроведенияИнвентаризаций,omitempty"`
	PostroitelOtcheta                            *Binary                                                                             `xml:"ПостроительОтчета" json:"ПостроительОтчета,omitempty"`
	NastroikiZapolneniia                         *Binary                                                                             `xml:"НастройкиЗаполнения" json:"НастройкиЗаполнения,omitempty"`
}

func (entity DocumentInventarizatsiiaTovarovNaSklade) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentInventarizatsiiaTovarovNaSklade) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentInventarizatsiiaTovarovNaSkladeTovary struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	VesUchet                       *Float  `xml:"ВесУчет" json:"ВесУчет,omitempty"`
	KachestvoKey                   *Guid   `xml:"Качество_Key" json:"Качество_Key,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	KolichestvoUchet               *Int    `xml:"КоличествоУчет" json:"КоличествоУчет,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	NomerVed                       *String `xml:"НомерВед" json:"НомерВед,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	Sum                            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaRegl                      *Float  `xml:"СуммаРегл" json:"СуммаРегл,omitempty"`
	SummaUchet                     *Float  `xml:"СуммаУчет" json:"СуммаУчет,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float  `xml:"Цена" json:"Цена,omitempty"`
	RetailCost                     *Float  `xml:"ЦенаВРознице" json:"ЦенаВРознице,omitempty"`
	OtkloneniePoKolichestvu        *Int    `xml:"ОтклонениеПоКоличеству" json:"ОтклонениеПоКоличеству,omitempty"`
	OtkloneniePoVesu               *Float  `xml:"ОтклонениеПоВесу" json:"ОтклонениеПоВесу,omitempty"`
}

type DocumentInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii struct {
	Key           Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber    Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	VidSravneniia *String `xml:"ВидСравнения" json:"ВидСравнения,omitempty"`
	Znachenie     *String `xml:"Значение" json:"Значение,omitempty"`
	ImiaPolia     *String `xml:"ИмяПоля" json:"ИмяПоля,omitempty"`
	ZnachenieType *String `xml:"Значение_Type" json:"Значение_Type,omitempty"`
}

type DocumentInventarizatsiiaTovarovNaSkladeSertifikaty struct {
	Key                     Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber              Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SertifikatKey           *Guid  `xml:"Сертификат_Key" json:"Сертификат_Key,omitempty"`
	Sum                     *Float `xml:"Сумма" json:"Сумма,omitempty"`
	SummaUchet              *Float `xml:"СуммаУчет" json:"СуммаУчет,omitempty"`
	Quantity                *Float `xml:"Количество" json:"Количество,omitempty"`
	KolichestvoUchet        *Float `xml:"КоличествоУчет" json:"КоличествоУчет,omitempty"`
	OtkloneniePoKolichestvu *Int   `xml:"ОтклонениеПоКоличеству" json:"ОтклонениеПоКоличеству,omitempty"`
}

type DocumentInventarizatsiiaTovarovNaSkladeTovaryVPuti struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	Quantity                       *Float  `xml:"Количество" json:"Количество,omitempty"`
	DogovorKontragentaKey          *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOprikhodovaniia        *String `xml:"ДокументОприходования" json:"ДокументОприходования,omitempty"`
	KontragentKey                  *Guid   `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	DataOtpravki                   *Time   `xml:"ДатаОтправки" json:"ДатаОтправки,omitempty"`
	DokumentOprikhodovaniiaType    *String `xml:"ДокументОприходования_Type" json:"ДокументОприходования_Type,omitempty"`
}

type DocumentPrikhodnyiKassovyiOrder struct {
	Key                                    Guid                                                          `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                            *String                                                       `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                                 *String                                                       `xml:"Number" json:"Number,omitempty"`
	Date                                   *Time                                                         `xml:"Date" json:"Date,omitempty"`
	DeletionMark                           *Boolean                                                      `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                                 *Boolean                                                      `xml:"Posted" json:"Posted,omitempty"`
	ValiutaVzaimoraschetovPodotchetnikaKey *Guid                                                         `xml:"ВалютаВзаиморасчетовПодотчетника_Key" json:"ВалютаВзаиморасчетовПодотчетника_Key,omitempty"`
	ValiutaDokumentaKey                    *Guid                                                         `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	OperationType                          *String                                                       `xml:"ВидОперации" json:"ВидОперации,omitempty"`
	VidPriemaRoznichnoiVyruchki            *String                                                       `xml:"ВидПриемаРозничнойВыручки" json:"ВидПриемаРозничнойВыручки,omitempty"`
	DenezhnyiChekKey                       *Guid                                                         `xml:"ДенежныйЧек_Key" json:"ДенежныйЧек_Key,omitempty"`
	DogovorKontragentaKey                  *Guid                                                         `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie                      *String                                                       `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	DokumentPlanirovaniiaPostupleniiaKey   *Guid                                                         `xml:"ДокументПланированияПоступления_Key" json:"ДокументПланированияПоступления_Key,omitempty"`
	DokumentSozdanVIuTD                    *Boolean                                                      `xml:"ДокументСозданВЮТД" json:"ДокументСозданВЮТД,omitempty"`
	KassaKey                               *Guid                                                         `xml:"Касса_Key" json:"Касса_Key,omitempty"`
	Comment                                *String                                                       `xml:"Комментарий" json:"Комментарий,omitempty"`
	Kontragent                             *String                                                       `xml:"Контрагент" json:"Контрагент,omitempty"`
	NumberKKT                              *Int                                                          `xml:"НомерЧекаККМ" json:"НомерЧекаККМ,omitempty"`
	Oplacheno                              *Boolean                                                      `xml:"Оплачено" json:"Оплачено,omitempty"`
	OrganizatsiiaKey                       *Guid                                                         `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	Osnovanie                              *String                                                       `xml:"Основание" json:"Основание,omitempty"`
	OtvetstvennyiKey                       *Guid                                                         `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	OtrazhenoVOperUchete                   *Boolean                                                      `xml:"ОтраженоВОперУчете" json:"ОтраженоВОперУчете,omitempty"`
	PodrazdelenieKey                       *Guid                                                         `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	Prilozhenie                            *String                                                       `xml:"Приложение" json:"Приложение,omitempty"`
	PriniatoOt                             *String                                                       `xml:"ПринятоОт" json:"ПринятоОт,omitempty"`
	RaschetnyiDokumentKey                  *Guid                                                         `xml:"РасчетныйДокумент_Key" json:"РасчетныйДокумент_Key,omitempty"`
	StavkaNDS                              *String                                                       `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	TypeOfMovingMoneyKey                   *Guid                                                         `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SumOfDocument                          *Float                                                        `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	SchetOrganizatsiiKey                   *Guid                                                         `xml:"СчетОрганизации_Key" json:"СчетОрганизации_Key,omitempty"`
	TipDokumenta                           *String                                                       `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	KursDokumenta                          *Float                                                        `xml:"КурсДокумента" json:"КурсДокумента,omitempty"`
	KratnostDokumenta                      *Int                                                          `xml:"КратностьДокумента" json:"КратностьДокумента,omitempty"`
	Pochta                                 *String                                                       `xml:"Почта" json:"Почта,omitempty"`
	Telefon                                *String                                                       `xml:"Телефон" json:"Телефон,omitempty"`
	ProbitChekNaKKT                        *Boolean                                                      `xml:"ПробитЧекНаККТ" json:"ПробитЧекНаККТ,omitempty"`
	KassaKKMKey                            *Guid                                                         `xml:"КассаККМ_Key" json:"КассаККМ_Key,omitempty"`
	GungNumber                             *Int                                                          `xml:"НомерСменыККМ" json:"НомерСменыККМ,omitempty"`
	NastroikaRMKKey                        *Guid                                                         `xml:"НастройкаРМК_Key" json:"НастройкаРМК_Key,omitempty"`
	BDataDokumenta                         *Time                                                         `xml:"Б_ДатаДокумента" json:"Б_ДатаДокумента,omitempty"`
	BIdentifikator                         *String                                                       `xml:"Б_Идентификатор" json:"Б_Идентификатор,omitempty"`
	BNomerVersii                           *String                                                       `xml:"Б_НомерВерсии" json:"Б_НомерВерсии,omitempty"`
	ExtendedPayments                       *[]DocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezhaRowType `xml:"РасшифровкаПлатежа" json:"РасшифровкаПлатежа,omitempty"`
	Payments                               *[]DocumentPrikhodnyiKassovyiOrderOplataRowType               `xml:"Оплата" json:"Оплата,omitempty"`
	Goods                                  *[]DocumentPrikhodnyiKassovyiOrderTovaryRowType               `xml:"Товары" json:"Товары,omitempty"`
	DokumentOsnovanieType                  *String                                                       `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
	KontragentType                         *String                                                       `xml:"Контрагент_Type" json:"Контрагент_Type,omitempty"`
}

func (entity DocumentPrikhodnyiKassovyiOrder) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentPrikhodnyiKassovyiOrder) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentPrikhodnyiKassovyiOrderRasshifrovkaPlatezha struct {
	Key                              Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                       Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	DogovorKontragentaKey            *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentPlanirovaniiaPlatezhaKey *Guid   `xml:"ДокументПланированияПлатежа_Key" json:"ДокументПланированияПлатежа_Key,omitempty"`
	KratnostVzaimoraschetov          *Int    `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov              *Float  `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	KursVzaimoraschetovPlan          *Float  `xml:"КурсВзаиморасчетовПлан" json:"КурсВзаиморасчетовПлан,omitempty"`
	ProektKey                        *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	Sdelka                           *String `xml:"Сделка" json:"Сделка,omitempty"`
	StavkaNDS                        *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	TypeOfMovingMoneyKey             *Guid   `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov             *Float  `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	SummaNDS                         *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	Sum                              *Float  `xml:"СуммаПлатежа" json:"СуммаПлатежа,omitempty"`
	SummaPlatezhaPlan                *Float  `xml:"СуммаПлатежаПлан" json:"СуммаПлатежаПлан,omitempty"`
	SdelkaType                       *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type DocumentPrikhodnyiKassovyiOrderOplata struct {
	Key        Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	TipOplaty  *String `xml:"ТипОплаты" json:"ТипОплаты,omitempty"`
	Sum        *Float  `xml:"Сумма" json:"Сумма,omitempty"`
}

type DocumentPrikhodnyiKassovyiOrderTovary struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	StavkaNDS                      *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                       *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float  `xml:"Цена" json:"Цена,omitempty"`
	SummaSkidki                    *Float  `xml:"СуммаСкидки" json:"СуммаСкидки,omitempty"`
	VidTovaraKKT                   *String `xml:"ВидТовараККТ" json:"ВидТовараККТ,omitempty"`
	TipOplatyTovaraKKT             *String `xml:"ТипОплатыТовараККТ" json:"ТипОплатыТовараККТ,omitempty"`
	SummaOsn                       *Float  `xml:"СуммаОсн" json:"СуммаОсн,omitempty"`
	Komitent                       *String `xml:"Комитент" json:"Комитент,omitempty"`
	TelefonKomitenta               *String `xml:"ТелефонКомитента" json:"ТелефонКомитента,omitempty"`
	INNkomitenta                   *String `xml:"ИННкомитента" json:"ИННкомитента,omitempty"`
	SummaOpl                       *Float  `xml:"СуммаОпл" json:"СуммаОпл,omitempty"`
}

type CatalogPrichinyVozvrata struct {
	Key          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion  *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description  *String  `xml:"Description" json:"Description,omitempty"`
	Code         *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
}

type DocumentDenezhnyiChek struct {
	Key                  Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion          *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number               *String  `xml:"Number" json:"Number,omitempty"`
	Date                 *Time    `xml:"Date" json:"Date,omitempty"`
	DeletionMark         *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted               *Boolean `xml:"Posted" json:"Posted,omitempty"`
	ValiutaDokumentaKey  *Guid    `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	DataOplaty           *Time    `xml:"ДатаОплаты" json:"ДатаОплаты,omitempty"`
	KassaKey             *Guid    `xml:"Касса_Key" json:"Касса_Key,omitempty"`
	Comment              *String  `xml:"Комментарий" json:"Комментарий,omitempty"`
	Oplacheno            *Boolean `xml:"Оплачено" json:"Оплачено,omitempty"`
	OrganizatsiiaKey     *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey     *Guid    `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	TypeOfMovingMoneyKey *Guid    `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SumOfDocument        *Float   `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	SchetOrganizatsiiKey *Guid    `xml:"СчетОрганизации_Key" json:"СчетОрганизации_Key,omitempty"`
	TipDokumenta         *String  `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
}

func (entity DocumentDenezhnyiChek) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentDenezhnyiChek) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentVozvratMaterialovIzProizvodstva struct {
	Key                           Guid                                                    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                   *String                                                 `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                        *String                                                 `xml:"Number" json:"Number,omitempty"`
	Date                          *Time                                                   `xml:"Date" json:"Date,omitempty"`
	DeletionMark                  *Boolean                                                `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                        *Boolean                                                `xml:"Posted" json:"Posted,omitempty"`
	Weight                        *Float                                                  `xml:"ВесДокумента" json:"ВесДокумента,omitempty"`
	DataVkhodiashchegoDokumenta   *Time                                                   `xml:"ДатаВходящегоДокумента" json:"ДатаВходящегоДокумента,omitempty"`
	DogovorKontragentaKey         *Guid                                                   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie             *String                                                 `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	KolichestvoDokumenta          *Int                                                    `xml:"КоличествоДокумента" json:"КоличествоДокумента,omitempty"`
	Comment                       *String                                                 `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey                 *Guid                                                   `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	NomerVkhodiashchegoDokumenta  *String                                                 `xml:"НомерВходящегоДокумента" json:"НомерВходящегоДокумента,omitempty"`
	OrganizatsiiaKey              *Guid                                                   `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey              *Guid                                                   `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey              *Guid                                                   `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	ProektKey                     *Guid                                                   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	DepartmentKey                 *Guid                                                   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	TipDokumenta                  *String                                                 `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	KhoziaistvennaiaOperatsiiaKey *Guid                                                   `xml:"ХозяйственнаяОперация_Key" json:"ХозяйственнаяОперация_Key,omitempty"`
	ProizvodstvennyiUchastokKey   *Guid                                                   `xml:"ПроизводственныйУчасток_Key" json:"ПроизводственныйУчасток_Key,omitempty"`
	SobstvennoeProizvodstvo       *Boolean                                                `xml:"СобственноеПроизводство" json:"СобственноеПроизводство,omitempty"`
	Goods                         *[]DocumentVozvratMaterialovIzProizvodstvaTovaryRowType `xml:"Товары" json:"Товары,omitempty"`
	DokumentOsnovanieType         *String                                                 `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
}

func (entity DocumentVozvratMaterialovIzProizvodstva) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentVozvratMaterialovIzProizvodstva) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentVozvratMaterialovIzProizvodstvaTovary struct {
	Key                            Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float `xml:"Вес" json:"Вес,omitempty"`
	Quantity                       *Int   `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid  `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid  `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	DepartmentKey                  *Guid  `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid  `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
}

type DocumentPereotsenkaTovarovOtdannykhNaKomissiiu struct {
	Key                            Guid                                                           `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                    *String                                                        `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                         *String                                                        `xml:"Number" json:"Number,omitempty"`
	Date                           *Time                                                          `xml:"Date" json:"Date,omitempty"`
	DeletionMark                   *Boolean                                                       `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                         *Boolean                                                       `xml:"Posted" json:"Posted,omitempty"`
	ValiutaDokumentaKey            *Guid                                                          `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	DogovorKontragentaKey          *Guid                                                          `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie              *String                                                        `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	Comment                        *String                                                        `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey                  *Guid                                                          `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	KratnostVzaimoraschetov        *Int                                                           `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov            *Float                                                         `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	OrganizatsiiaKey               *Guid                                                          `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey               *Guid                                                          `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey               *Guid                                                          `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	Sdelka                         *String                                                        `xml:"Сделка" json:"Сделка,omitempty"`
	TipDokumenta                   *String                                                        `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	TipTsenKey                     *Guid                                                          `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
	KhoziaistvennaiaOperatsiiaKey  *Guid                                                          `xml:"ХозяйственнаяОперация_Key" json:"ХозяйственнаяОперация_Key,omitempty"`
	NastroikiZapolneniiaBase64Data *Binary                                                        `xml:"НастройкиЗаполнения_Base64Data" json:"НастройкиЗаполнения_Base64Data,omitempty"`
	Goods                          *[]DocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovaryRowType `xml:"Товары" json:"Товары,omitempty"`
	DokumentOsnovanieType          *String                                                        `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
	SdelkaType                     *String                                                        `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
	NastroikiZapolneniiaType       *String                                                        `xml:"НастройкиЗаполнения_Type" json:"НастройкиЗаполнения_Type,omitempty"`
	NastroikiZapolneniia           *Binary                                                        `xml:"НастройкиЗаполнения" json:"НастройкиЗаполнения,omitempty"`
}

func (entity DocumentPereotsenkaTovarovOtdannykhNaKomissiiu) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentPereotsenkaTovarovOtdannykhNaKomissiiu) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentPereotsenkaTovarovOtdannykhNaKomissiiuTovary struct {
	Key                            Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float `xml:"Вес" json:"Вес,omitempty"`
	Quantity                       *Int   `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid  `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid  `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	Sum                            *Float `xml:"Сумма" json:"Сумма,omitempty"`
	SummaStaraia                   *Float `xml:"СуммаСтарая" json:"СуммаСтарая,omitempty"`
	KharakteristikaNomenklaturyKey *Guid  `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float `xml:"Цена" json:"Цена,omitempty"`
	TsenaZaGramm                   *Float `xml:"ЦенаЗаГрамм" json:"ЦенаЗаГрамм,omitempty"`
}

type DocumentVvodNachalnykhOstatkovPoRaskhodamUSN struct {
	Key                            Guid                                                                                 `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                    *String                                                                              `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                         *String                                                                              `xml:"Number" json:"Number,omitempty"`
	Date                           *Time                                                                                `xml:"Date" json:"Date,omitempty"`
	DeletionMark                   *Boolean                                                                             `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                         *Boolean                                                                             `xml:"Posted" json:"Posted,omitempty"`
	OrganizatsiiaKey               *Guid                                                                                `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	Comment                        *String                                                                              `xml:"Комментарий" json:"Комментарий,omitempty"`
	OtvetstvennyiKey               *Guid                                                                                `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	VzaimoraschetySPokupateliami   *[]DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliamiRowType   `xml:"ВзаиморасчетыСПокупателями" json:"ВзаиморасчетыСПокупателями,omitempty"`
	TovaryProdannye                *[]DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannyeRowType                `xml:"ТоварыПроданные" json:"ТоварыПроданные,omitempty"`
	VzaimoraschetySPostavshchikami *[]DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikamiRowType `xml:"ВзаиморасчетыСПоставщиками" json:"ВзаиморасчетыСПоставщиками,omitempty"`
	TovaryNaOstatkakh              *[]DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakhRowType              `xml:"ТоварыНаОстатках" json:"ТоварыНаОстатках,omitempty"`
}

func (entity DocumentVvodNachalnykhOstatkovPoRaskhodamUSN) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentVvodNachalnykhOstatkovPoRaskhodamUSN) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPokupateliami struct {
	Key                       Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	PokupatelKey              *Guid  `xml:"Покупатель_Key" json:"Покупатель_Key,omitempty"`
	DogovorSPokupatelemKey    *Guid  `xml:"ДоговорСПокупателем_Key" json:"ДоговорСПокупателем_Key,omitempty"`
	SupplierKey               *Guid  `xml:"Поставщик_Key" json:"Поставщик_Key,omitempty"`
	DogovorSPostavshchikomKey *Guid  `xml:"ДоговорСПоставщиком_Key" json:"ДоговорСПоставщиком_Key,omitempty"`
	Sum                       *Float `xml:"Сумма" json:"Сумма,omitempty"`
	SummaSebestoimost         *Float `xml:"СуммаСебестоимость" json:"СуммаСебестоимость,omitempty"`
}

type DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryProdannye struct {
	Key                         Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                  Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	ItemKey                     *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                 *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	PokupatelKey                *Guid   `xml:"Покупатель_Key" json:"Покупатель_Key,omitempty"`
	DogovorSPokupatelemKey      *Guid   `xml:"ДоговорСПокупателем_Key" json:"ДоговорСПокупателем_Key,omitempty"`
	SupplierKey                 *Guid   `xml:"Поставщик_Key" json:"Поставщик_Key,omitempty"`
	DogovorSPostavshchikomKey   *Guid   `xml:"ДоговорСПоставщиком_Key" json:"ДоговорСПоставщиком_Key,omitempty"`
	Quantity                    *Int    `xml:"Количество" json:"Количество,omitempty"`
	Weight                      *Float  `xml:"Вес" json:"Вес,omitempty"`
	SummaPostupleniia           *Float  `xml:"СуммаПоступления" json:"СуммаПоступления,omitempty"`
	SummaProdazhi               *Float  `xml:"СуммаПродажи" json:"СуммаПродажи,omitempty"`
	StatusRaskhoda              *String `xml:"СтатусРасхода" json:"СтатусРасхода,omitempty"`
	DokumentProdazhi            *String `xml:"ДокументПродажи" json:"ДокументПродажи,omitempty"`
	DokumentOprikhodovaniia     *String `xml:"ДокументОприходования" json:"ДокументОприходования,omitempty"`
	DokumentProdazhiType        *String `xml:"ДокументПродажи_Type" json:"ДокументПродажи_Type,omitempty"`
	DokumentOprikhodovaniiaType *String `xml:"ДокументОприходования_Type" json:"ДокументОприходования_Type,omitempty"`
}

type DocumentVvodNachalnykhOstatkovPoRaskhodamUSNVzaimoraschetySPostavshchikami struct {
	Key                       Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SupplierKey               *Guid  `xml:"Поставщик_Key" json:"Поставщик_Key,omitempty"`
	DogovorSPostavshchikomKey *Guid  `xml:"ДоговорСПоставщиком_Key" json:"ДоговорСПоставщиком_Key,omitempty"`
	Sum                       *Float `xml:"Сумма" json:"Сумма,omitempty"`
	SummaSebestoimost         *Float `xml:"СуммаСебестоимость" json:"СуммаСебестоимость,omitempty"`
}

type DocumentVvodNachalnykhOstatkovPoRaskhodamUSNTovaryNaOstatkakh struct {
	Key                         Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                  Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	ItemKey                     *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	InstanceKey                 *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	SupplierKey                 *Guid   `xml:"Поставщик_Key" json:"Поставщик_Key,omitempty"`
	DogovorSPostavshchikomKey   *Guid   `xml:"ДоговорСПоставщиком_Key" json:"ДоговорСПоставщиком_Key,omitempty"`
	Quantity                    *Int    `xml:"Количество" json:"Количество,omitempty"`
	Weight                      *Float  `xml:"Вес" json:"Вес,omitempty"`
	SummaPostupleniia           *Float  `xml:"СуммаПоступления" json:"СуммаПоступления,omitempty"`
	StatusRaskhoda              *String `xml:"СтатусРасхода" json:"СтатусРасхода,omitempty"`
	DokumentOprikhodovaniia     *String `xml:"ДокументОприходования" json:"ДокументОприходования,omitempty"`
	SummaPostupleniiaBezNDS     *Float  `xml:"СуммаПоступленияБезНДС" json:"СуммаПоступленияБезНДС,omitempty"`
	DokumentOprikhodovaniiaType *String `xml:"ДокументОприходования_Type" json:"ДокументОприходования_Type,omitempty"`
}

type DocumentGTDImport struct {
	Key                       Guid                               `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion               *String                            `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                    *String                            `xml:"Number" json:"Number,omitempty"`
	Date                      *Time                              `xml:"Date" json:"Date,omitempty"`
	DeletionMark              *Boolean                           `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                    *Boolean                           `xml:"Posted" json:"Posted,omitempty"`
	ValiutaDokumentaKey       *Guid                              `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	DogovorKontragentaKey     *Guid                              `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DogovorKontragentaReglKey *Guid                              `xml:"ДоговорКонтрагентаРегл_Key" json:"ДоговорКонтрагентаРегл_Key,omitempty"`
	Comment                   *String                            `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey             *Guid                              `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	KratnostVzaimoraschetov   *Int                               `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KratnostDokumenta         *Int                               `xml:"КратностьДокумента" json:"КратностьДокумента,omitempty"`
	KursVzaimoraschetov       *Float                             `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	KursDokumenta             *Float                             `xml:"КурсДокумента" json:"КурсДокумента,omitempty"`
	NomerGTDKey               *Guid                              `xml:"НомерГТД_Key" json:"НомерГТД_Key,omitempty"`
	OrganizatsiiaKey          *Guid                              `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey          *Guid                              `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey          *Guid                              `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	TamozhennyiSbor           *Float                             `xml:"ТаможенныйСбор" json:"ТаможенныйСбор,omitempty"`
	TamozhennyiSborVal        *Float                             `xml:"ТаможенныйСборВал" json:"ТаможенныйСборВал,omitempty"`
	TamozhennyiShtraf         *Float                             `xml:"ТаможенныйШтраф" json:"ТаможенныйШтраф,omitempty"`
	TamozhennyiShtrafVal      *Float                             `xml:"ТаможенныйШтрафВал" json:"ТаможенныйШтрафВал,omitempty"`
	TipDokumenta              *String                            `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	Razdely                   *[]DocumentGTDImportRazdelyRowType `xml:"Разделы" json:"Разделы,omitempty"`
	Goods                     *[]DocumentGTDImportTovaryRowType  `xml:"Товары" json:"Товары,omitempty"`
}

func (entity DocumentGTDImport) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentGTDImport) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentGTDImportRazdely struct {
	Key                                    Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                             Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	NDSVValiute                            *Boolean `xml:"НДСВВалюте" json:"НДСВВалюте,omitempty"`
	PoshlinaVValiute                       *Boolean `xml:"ПошлинаВВалюте" json:"ПошлинаВВалюте,omitempty"`
	StavkaNDS                              *String  `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	StavkaPoshliny                         *Float   `xml:"СтавкаПошлины" json:"СтавкаПошлины,omitempty"`
	SummaNDS                               *Float   `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	SummaPoshliny                          *Float   `xml:"СуммаПошлины" json:"СуммаПошлины,omitempty"`
	TamozhennaiaStoimost                   *Float   `xml:"ТаможеннаяСтоимость" json:"ТаможеннаяСтоимость,omitempty"`
	TamozhennaiaStoimostVValiuteReglUcheta *Boolean `xml:"ТаможеннаяСтоимостьВВалютеРеглУчета" json:"ТаможеннаяСтоимостьВВалютеРеглУчета,omitempty"`
}

type DocumentGTDImportTovary struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	DokumentPartii                 *String `xml:"ДокументПартии" json:"ДокументПартии,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	NomerRazdela                   *Int    `xml:"НомерРаздела" json:"НомерРаздела,omitempty"`
	ProektKey                      *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	SummaNDS                       *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	SummaPoshliny                  *Float  `xml:"СуммаПошлины" json:"СуммаПошлины,omitempty"`
	FakturnaiaStoimost             *Float  `xml:"ФактурнаяСтоимость" json:"ФактурнаяСтоимость,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	DokumentPartiiType             *String `xml:"ДокументПартии_Type" json:"ДокументПартии_Type,omitempty"`
}

type DocumentAktSverki struct {
	Key                   Guid                              `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion           *String                           `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                *String                           `xml:"Number" json:"Number,omitempty"`
	Date                  *Time                             `xml:"Date" json:"Date,omitempty"`
	DeletionMark          *Boolean                          `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                *Boolean                          `xml:"Posted" json:"Posted,omitempty"`
	DokumentOsnovanie     *String                           `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	Komentarii            *String                           `xml:"Коментарий" json:"Коментарий,omitempty"`
	OtvetstvennyiKey      *Guid                             `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	Sveren                *Boolean                          `xml:"Сверен" json:"Сверен,omitempty"`
	SumOfDocument         *Float                            `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	Goods                 *[]DocumentAktSverkiTovaryRowType `xml:"Товары" json:"Товары,omitempty"`
	DokumentOsnovanieType *String                           `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
}

func (entity DocumentAktSverki) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentAktSverki) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentAktSverkiTovary struct {
	Key                            Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	MID                            *String  `xml:"Артикул" json:"Артикул,omitempty"`
	Weight                         *Float   `xml:"Вес" json:"Вес,omitempty"`
	ZakazKlientaKey                *Guid    `xml:"ЗаказКлиента_Key" json:"ЗаказКлиента_Key,omitempty"`
	Quantity                       *Int     `xml:"Количество" json:"Количество,omitempty"`
	Koef                           *Float   `xml:"Коэф" json:"Коэф,omitempty"`
	NaborKey                       *Guid    `xml:"Набор_Key" json:"Набор_Key,omitempty"`
	Naideno                        *Boolean `xml:"Найдено" json:"Найдено,omitempty"`
	ItemKey                        *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	NomerNabora                    *Int     `xml:"НомерНабора" json:"НомерНабора,omitempty"`
	Pasport                        *String  `xml:"Паспорт" json:"Паспорт,omitempty"`
	ProektKey                      *Guid    `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	SizeKey                        *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid    `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	DepartmentKey                  *Guid    `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	StavkaNDS                      *String  `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                            *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                       *Float   `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	KharakteristikaNomenklaturyKey *Guid    `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float   `xml:"Цена" json:"Цена,omitempty"`
	Period                         *Time    `xml:"Период" json:"Период,omitempty"`
}

type CatalogFaily struct {
	Key                                     Guid                                          `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                             *String                                       `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                             *String                                       `xml:"Description" json:"Description,omitempty"`
	Code                                    *String                                       `xml:"Code" json:"Code,omitempty"`
	DeletionMark                            *Boolean                                      `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	AvtorKey                                *Guid                                         `xml:"Автор_Key" json:"Автор_Key,omitempty"`
	VladeletsFaila                          *String                                       `xml:"ВладелецФайла" json:"ВладелецФайла,omitempty"`
	DataZaema                               *Time                                         `xml:"ДатаЗаема" json:"ДатаЗаема,omitempty"`
	DataSozdaniia                           *Time                                         `xml:"ДатаСоздания" json:"ДатаСоздания,omitempty"`
	Zashifrovan                             *Boolean                                      `xml:"Зашифрован" json:"Зашифрован,omitempty"`
	IndeksKartinki                          *Int                                          `xml:"ИндексКартинки" json:"ИндексКартинки,omitempty"`
	Opisanie                                *String                                       `xml:"Описание" json:"Описание,omitempty"`
	PodpisanEP                              *Boolean                                      `xml:"ПодписанЭП" json:"ПодписанЭП,omitempty"`
	PolnoeNaimenovanie                      *String                                       `xml:"ПолноеНаименование" json:"ПолноеНаименование,omitempty"`
	RedaktiruetKey                          *Guid                                         `xml:"Редактирует_Key" json:"Редактирует_Key,omitempty"`
	TekstKhranilishcheBase64Data            *Binary                                       `xml:"ТекстХранилище_Base64Data" json:"ТекстХранилище_Base64Data,omitempty"`
	TekushchaiaVersiiaKey                   *Guid                                         `xml:"ТекущаяВерсия_Key" json:"ТекущаяВерсия_Key,omitempty"`
	TekushchaiaVersiiaAvtorKey              *Guid                                         `xml:"ТекущаяВерсияАвтор_Key" json:"ТекущаяВерсияАвтор_Key,omitempty"`
	TekushchaiaVersiiaDataModifikatsiiFaila *Time                                         `xml:"ТекущаяВерсияДатаМодификацииФайла" json:"ТекущаяВерсияДатаМодификацииФайла,omitempty"`
	TekushchaiaVersiiaDataSozdaniia         *Time                                         `xml:"ТекущаяВерсияДатаСоздания" json:"ТекущаяВерсияДатаСоздания,omitempty"`
	TekushchaiaVersiiaKod                   *String                                       `xml:"ТекущаяВерсияКод" json:"ТекущаяВерсияКод,omitempty"`
	TekushchaiaVersiiaNomerVersii           *Int                                          `xml:"ТекущаяВерсияНомерВерсии" json:"ТекущаяВерсияНомерВерсии,omitempty"`
	TekushchaiaVersiiaPutKFailu             *String                                       `xml:"ТекущаяВерсияПутьКФайлу" json:"ТекущаяВерсияПутьКФайлу,omitempty"`
	TekushchaiaVersiiaRazmer                *Int                                          `xml:"ТекущаяВерсияРазмер" json:"ТекущаяВерсияРазмер,omitempty"`
	TekushchaiaVersiiaRasshirenie           *String                                       `xml:"ТекущаяВерсияРасширение" json:"ТекущаяВерсияРасширение,omitempty"`
	KhranitVersii                           *Boolean                                      `xml:"ХранитьВерсии" json:"ХранитьВерсии,omitempty"`
	DopolnitelnyeRekvizity                  *[]CatalogFailyDopolnitelnyeRekvizityRowType  `xml:"ДополнительныеРеквизиты" json:"ДополнительныеРеквизиты,omitempty"`
	SertifikatyShifrovaniia                 *[]CatalogFailySertifikatyShifrovaniiaRowType `xml:"СертификатыШифрования" json:"СертификатыШифрования,omitempty"`
	VladeletsFailaType                      *String                                       `xml:"ВладелецФайла_Type" json:"ВладелецФайла_Type,omitempty"`
	TekstKhranilishcheType                  *String                                       `xml:"ТекстХранилище_Type" json:"ТекстХранилище_Type,omitempty"`
	TekstKhranilishche                      *Binary                                       `xml:"ТекстХранилище" json:"ТекстХранилище,omitempty"`
}

type CatalogFailyDopolnitelnyeRekvizity struct {
	Key              Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber       Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	SvoistvoKey      *Guid   `xml:"Свойство_Key" json:"Свойство_Key,omitempty"`
	Znachenie        *String `xml:"Значение" json:"Значение,omitempty"`
	TekstovaiaStroka *String `xml:"ТекстоваяСтрока" json:"ТекстоваяСтрока,omitempty"`
	ZnachenieType    *String `xml:"Значение_Type" json:"Значение_Type,omitempty"`
}

type CatalogFailySertifikatyShifrovaniia struct {
	Key                  Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber           Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Otpechatok           *String `xml:"Отпечаток" json:"Отпечаток,omitempty"`
	Predstavlenie        *String `xml:"Представление" json:"Представление,omitempty"`
	SertifikatBase64Data *Binary `xml:"Сертификат_Base64Data" json:"Сертификат_Base64Data,omitempty"`
	SertifikatType       *String `xml:"Сертификат_Type" json:"Сертификат_Type,omitempty"`
	Sertifikat           *Binary `xml:"Сертификат" json:"Сертификат,omitempty"`
}

type CatalogUchetnyeZapisiElektronnoiPochty struct {
	Key                                                                                          Guid                                                                  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                                                                                  *String                                                               `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                                                                                  *String                                                               `xml:"Description" json:"Description,omitempty"`
	Code                                                                                         *String                                                               `xml:"Code" json:"Code,omitempty"`
	DeletionMark                                                                                 *Boolean                                                              `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	POP3Server                                                                                   *String                                                               `xml:"POP3Сервер" json:"POP3Сервер,omitempty"`
	SMTPServer                                                                                   *String                                                               `xml:"SMTPСервер" json:"SMTPСервер,omitempty"`
	AvtomaticheskaiaUstanovkaPometkiRassmotreno                                                  *Boolean                                                              `xml:"АвтоматическаяУстановкаПометкиРассмотрено" json:"АвтоматическаяУстановкаПометкиРассмотрено,omitempty"`
	AvtomaticheskaiaUstanovkaPometkiRassmotrenoPriOtvete                                         *Boolean                                                              `xml:"АвтоматическаяУстановкаПометкиРассмотреноПриОтвете" json:"АвтоматическаяУстановкаПометкиРассмотреноПриОтвете,omitempty"`
	AvtomaticheskaiaUstanovkaPometkiRassmotrenoPriPolucheniiOtveta                               *Boolean                                                              `xml:"АвтоматическаяУстановкаПометкиРассмотреноПриПолученииОтвета" json:"АвтоматическаяУстановкаПометкиРассмотреноПриПолученииОтвета,omitempty"`
	AvtoPoluchenieOtpravkaSoobshchenii                                                           *Boolean                                                              `xml:"АвтоПолучениеОтправкаСообщений" json:"АвтоПолучениеОтправкаСообщений,omitempty"`
	AvtosokhraneniePisem                                                                         *Boolean                                                              `xml:"АвтосохранениеПисем" json:"АвтосохранениеПисем,omitempty"`
	AdresElektronnoiPochty                                                                       *String                                                               `xml:"АдресЭлектроннойПочты" json:"АдресЭлектроннойПочты,omitempty"`
	VremiaOzhidaniiaServera                                                                      *Int                                                                  `xml:"ВремяОжиданияСервера" json:"ВремяОжиданияСервера,omitempty"`
	GruppaVkhodiashchieKey                                                                       *Guid                                                                 `xml:"ГруппаВходящие_Key" json:"ГруппаВходящие_Key,omitempty"`
	GruppaIskhodiashchieKey                                                                      *Guid                                                                 `xml:"ГруппаИсходящие_Key" json:"ГруппаИсходящие_Key,omitempty"`
	GruppaUdalennyeKey                                                                           *Guid                                                                 `xml:"ГруппаУдаленные_Key" json:"ГруппаУдаленные_Key,omitempty"`
	GruppaChernovikiKey                                                                          *Guid                                                                 `xml:"ГруппаЧерновики_Key" json:"ГруппаЧерновики_Key,omitempty"`
	DeistvieAvtopolucheniiaOtpravkiSoobshchenii                                                  *String                                                               `xml:"ДействиеАвтополученияОтправкиСообщений" json:"ДействиеАвтополученияОтправкиСообщений,omitempty"`
	DliaVkhodiashchikhOtvetovIPereadresatsiiIskatPismaOsnovaniiaIZapolniatGruppuPisemNovogoPisma *Boolean                                                              `xml:"ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьГруппуПисемНовогоПисьма" json:"ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьГруппуПисемНовогоПисьма,omitempty"`
	DliaVkhodiashchikhOtvetovIPereadresatsiiIskatPismaOsnovaniiaIZapolniatOsnovanieNovogoPisma   *Boolean                                                              `xml:"ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьОснованиеНовогоПисьма" json:"ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьОснованиеНовогоПисьма,omitempty"`
	DliaVkhodiashchikhOtvetovIPereadresatsiiIskatPismaOsnovaniiaIZapolniatPredmet                *Boolean                                                              `xml:"ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьПредмет" json:"ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьПредмет,omitempty"`
	DobavliatPodpisKIskhodiashchimPismam                                                         *Boolean                                                              `xml:"ДобавлятьПодписьКИсходящимПисьмам" json:"ДобавлятьПодписьКИсходящимПисьмам,omitempty"`
	DobavliatPodpisKOtvetamIPeresylkam                                                           *Boolean                                                              `xml:"ДобавлятьПодписьКОтветамИПересылкам" json:"ДобавлятьПодписьКОтветамИПересылкам,omitempty"`
	ZapolniatPustoiPredmetDliaNovykhPisemIzTemyPisma                                             *Boolean                                                              `xml:"ЗаполнятьПустойПредметДляНовыхПисемИзТемыПисьма" json:"ЗаполнятьПустойПредметДляНовыхПисемИзТемыПисьма,omitempty"`
	IntervalAvtomaticheskoiUstanovkiOtmetkiRassmotreno                                           *Int                                                                  `xml:"ИнтервалАвтоматическойУстановкиОтметкиРассмотрено" json:"ИнтервалАвтоматическойУстановкиОтметкиРассмотрено,omitempty"`
	IntervalAvtoPolucheniiaOtpravkiSoobshchenii                                                  *Int                                                                  `xml:"ИнтервалАвтоПолученияОтправкиСообщений" json:"ИнтервалАвтоПолученияОтправкиСообщений,omitempty"`
	IntervalAvtosokhraneniiaPisem                                                                *Int                                                                  `xml:"ИнтервалАвтосохраненияПисем" json:"ИнтервалАвтосохраненияПисем,omitempty"`
	IspolzovatKlassifikatsiiuPisemPoPredmetam                                                    *Boolean                                                              `xml:"ИспользоватьКлассификациюПисемПоПредметам" json:"ИспользоватьКлассификациюПисемПоПредметам,omitempty"`
	KolichestvoDneiUdaleniiaPisemSServera                                                        *Int                                                                  `xml:"КоличествоДнейУдаленияПисемССервера" json:"КоличествоДнейУдаленияПисемССервера,omitempty"`
	Login                                                                                        *String                                                               `xml:"Логин" json:"Логин,omitempty"`
	LoginSMTP                                                                                    *String                                                               `xml:"ЛогинSMTP" json:"ЛогинSMTP,omitempty"`
	OstavliatKopiiSoobshcheniiNaServere                                                          *Boolean                                                              `xml:"ОставлятьКопииСообщенийНаСервере" json:"ОставлятьКопииСообщенийНаСервере,omitempty"`
	OtvetstvennyiZaAvtoPoluchenieOtpravkuSoobshcheniiKey                                         *Guid                                                                 `xml:"ОтветственныйЗаАвтоПолучениеОтправкуСообщений_Key" json:"ОтветственныйЗаАвтоПолучениеОтправкуСообщений_Key,omitempty"`
	Parol                                                                                        *String                                                               `xml:"Пароль" json:"Пароль,omitempty"`
	ParolSMTP                                                                                    *String                                                               `xml:"ПарольSMTP" json:"ПарольSMTP,omitempty"`
	PomeshchatOtvetyIPereadresatsiiVTuzheGruppu                                                  *Boolean                                                              `xml:"ПомещатьОтветыИПереадресацииВТужеГруппу" json:"ПомещатьОтветыИПереадресацииВТужеГруппу,omitempty"`
	PortPOP3                                                                                     *Int                                                                  `xml:"ПортPOP3" json:"ПортPOP3,omitempty"`
	PortSMTP                                                                                     *Int                                                                  `xml:"ПортSMTP" json:"ПортSMTP,omitempty"`
	TekstPodpisi                                                                                 *String                                                               `xml:"ТекстПодписи" json:"ТекстПодписи,omitempty"`
	TrebuetsiaSMTPAutentifikatsiia                                                               *Boolean                                                              `xml:"ТребуетсяSMTPАутентификация" json:"ТребуетсяSMTPАутентификация,omitempty"`
	UdaliatPismaSServeraCherez                                                                   *Boolean                                                              `xml:"УдалятьПисьмаССервераЧерез" json:"УдалятьПисьмаССервераЧерез,omitempty"`
	FormatPismaDliaOtvetovIPereadresatsiiBratIzIskhodnogo                                        *Boolean                                                              `xml:"ФорматПисьмаДляОтветовИПереадресацийБратьИзИсходного" json:"ФорматПисьмаДляОтветовИПереадресацийБратьИзИсходного,omitempty"`
	FormatTekstaPismaPoUmolchaniiu                                                               *String                                                               `xml:"ФорматТекстаПисьмаПоУмолчанию" json:"ФорматТекстаПисьмаПоУмолчанию,omitempty"`
	IspolzovatZashchishchennoeSoedinenieDliaVkhodiashcheiPochty                                  *Boolean                                                              `xml:"ИспользоватьЗащищенноеСоединениеДляВходящейПочты" json:"ИспользоватьЗащищенноеСоединениеДляВходящейПочты,omitempty"`
	IspolzovatZashchishchennoeSoedinenieDliaIskhodiashcheiPochty                                 *Boolean                                                              `xml:"ИспользоватьЗащищенноеСоединениеДляИсходящейПочты" json:"ИспользоватьЗащищенноеСоединениеДляИсходящейПочты,omitempty"`
	ProtokolVkhodiashcheiPochty                                                                  *String                                                               `xml:"ПротоколВходящейПочты" json:"ПротоколВходящейПочты,omitempty"`
	ImiaPolzovatelia                                                                             *String                                                               `xml:"ИмяПользователя" json:"ИмяПользователя,omitempty"`
	IspolzovatDliaOtpravki                                                                       *Boolean                                                              `xml:"ИспользоватьДляОтправки" json:"ИспользоватьДляОтправки,omitempty"`
	IspolzovatDliaPolucheniia                                                                    *Boolean                                                              `xml:"ИспользоватьДляПолучения" json:"ИспользоватьДляПолучения,omitempty"`
	IspolzovatBezopasnyiVkhodNaServerVkhodiashcheiPochty                                         *Boolean                                                              `xml:"ИспользоватьБезопасныйВходНаСерверВходящейПочты" json:"ИспользоватьБезопасныйВходНаСерверВходящейПочты,omitempty"`
	IspolzovatBezopasnyiVkhodNaServerIskhodiashcheiPochty                                        *Boolean                                                              `xml:"ИспользоватьБезопасныйВходНаСерверИсходящейПочты" json:"ИспользоватьБезопасныйВходНаСерверИсходящейПочты,omitempty"`
	DostupKUchetnoiZapisi                                                                        *[]CatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisiRowType `xml:"ДоступКУчетнойЗаписи" json:"ДоступКУчетнойЗаписи,omitempty"`
}

type CatalogUchetnyeZapisiElektronnoiPochtyDostupKUchetnoiZapisi struct {
	Key               Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber        Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Administrirovanie *Boolean `xml:"Администрирование" json:"Администрирование,omitempty"`
	Otpravka          *Boolean `xml:"Отправка" json:"Отправка,omitempty"`
	PolzovatelKey     *Guid    `xml:"Пользователь_Key" json:"Пользователь_Key,omitempty"`
	Transport         *Boolean `xml:"Транспорт" json:"Транспорт,omitempty"`
}

type DocumentPlaniruemoePostuplenieDenezhnykhSredstv struct {
	Key                          Guid                                                                          `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                  *String                                                                       `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                       *String                                                                       `xml:"Number" json:"Number,omitempty"`
	Date                         *Time                                                                         `xml:"Date" json:"Date,omitempty"`
	DeletionMark                 *Boolean                                                                      `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                       *Boolean                                                                      `xml:"Posted" json:"Posted,omitempty"`
	BankovskiiSchetKassa         *String                                                                       `xml:"БанковскийСчетКасса" json:"БанковскийСчетКасса,omitempty"`
	ValiutaDokumentaKey          *Guid                                                                         `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	OperationType                *String                                                                       `xml:"ВидОперации" json:"ВидОперации,omitempty"`
	VidPriemaRoznichnoiVyruchki  *String                                                                       `xml:"ВидПриемаРозничнойВыручки" json:"ВидПриемаРозничнойВыручки,omitempty"`
	VkliuchatVPlatezhnyiKalendar *Boolean                                                                      `xml:"ВключатьВПлатежныйКалендарь" json:"ВключатьВПлатежныйКалендарь,omitempty"`
	DataPostupleniia             *Time                                                                         `xml:"ДатаПоступления" json:"ДатаПоступления,omitempty"`
	DokumentOsnovanie            *String                                                                       `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	KassaKKM                     *String                                                                       `xml:"КассаККМ" json:"КассаККМ,omitempty"`
	Comment                      *String                                                                       `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey                *Guid                                                                         `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	KratnostDokumenta            *Int                                                                          `xml:"КратностьДокумента" json:"КратностьДокумента,omitempty"`
	KursDokumenta                *Float                                                                        `xml:"КурсДокумента" json:"КурсДокумента,omitempty"`
	Opisanie                     *String                                                                       `xml:"Описание" json:"Описание,omitempty"`
	OrganizatsiiaKey             *Guid                                                                         `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey             *Guid                                                                         `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	Sostoianie                   *String                                                                       `xml:"Состояние" json:"Состояние,omitempty"`
	StatiaOborotov               *String                                                                       `xml:"СтатьяОборотов" json:"СтатьяОборотов,omitempty"`
	SumOfDocument                *Float                                                                        `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	TipDokumenta                 *String                                                                       `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	FormaOplaty                  *String                                                                       `xml:"ФормаОплаты" json:"ФормаОплаты,omitempty"`
	TsFOKey                      *Guid                                                                         `xml:"ЦФО_Key" json:"ЦФО_Key,omitempty"`
	ExtendedPayments             *[]DocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezhaRowType `xml:"РасшифровкаПлатежа" json:"РасшифровкаПлатежа,omitempty"`
	BankovskiiSchetKassaType     *String                                                                       `xml:"БанковскийСчетКасса_Type" json:"БанковскийСчетКасса_Type,omitempty"`
	DokumentOsnovanieType        *String                                                                       `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
	KassaKKMType                 *String                                                                       `xml:"КассаККМ_Type" json:"КассаККМ_Type,omitempty"`
}

func (entity DocumentPlaniruemoePostuplenieDenezhnykhSredstv) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentPlaniruemoePostuplenieDenezhnykhSredstv) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentPlaniruemoePostuplenieDenezhnykhSredstvRasshifrovkaPlatezha struct {
	Key                     Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber              Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	DogovorKontragentaKey   *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	KratnostVzaimoraschetov *Int    `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov     *Float  `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	ProektKey               *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	Sdelka                  *String `xml:"Сделка" json:"Сделка,omitempty"`
	TypeOfMovingMoneyKey    *Guid   `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov    *Float  `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	Sum                     *Float  `xml:"СуммаПлатежа" json:"СуммаПлатежа,omitempty"`
	SdelkaType              *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type DocumentPreiskurantTsenNaKamni struct {
	Key             Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion     *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number          *String  `xml:"Number" json:"Number,omitempty"`
	Date            *Time    `xml:"Date" json:"Date,omitempty"`
	DeletionMark    *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted          *Boolean `xml:"Posted" json:"Posted,omitempty"`
	KamenKey        *Guid    `xml:"Камень_Key" json:"Камень_Key,omitempty"`
	Comment         *String  `xml:"Комментарий" json:"Комментарий,omitempty"`
	RassevKey       *Guid    `xml:"Рассев_Key" json:"Рассев_Key,omitempty"`
	TipTsenKey      *Guid    `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
	FormaOgrankiKey *Guid    `xml:"ФормаОгранки_Key" json:"ФормаОгранки_Key,omitempty"`
}

func (entity DocumentPreiskurantTsenNaKamni) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentPreiskurantTsenNaKamni) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type Purchase struct {
	Key                       Guid                                  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion               *String                               `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                    *String                               `xml:"Number" json:"Number,omitempty"`
	Date                      *Time                                 `xml:"Date" json:"Date,omitempty"`
	DeletionMark              *Boolean                              `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                    *Boolean                              `xml:"Posted" json:"Posted,omitempty"`
	Adres                     *String                               `xml:"Адрес" json:"Адрес,omitempty"`
	Weight                    *Float                                `xml:"ВесДокумента" json:"ВесДокумента,omitempty"`
	DataRozhdeniia            *Time                                 `xml:"ДатаРождения" json:"ДатаРождения,omitempty"`
	DokumentSozdanVIuTD       *Boolean                              `xml:"ДокументСозданВЮТД" json:"ДокументСозданВЮТД,omitempty"`
	Comment                   *String                               `xml:"Комментарий" json:"Комментарий,omitempty"`
	OrganizatsiiaKey          *Guid                                 `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey          *Guid                                 `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	DepartmentKey             *Guid                                 `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	SumOfDocument             *Float                                `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	UdostoverenieLichnosti    *String                               `xml:"УдостоверениеЛичности" json:"УдостоверениеЛичности,omitempty"`
	FizicheskoeLitso          *String                               `xml:"ФизическоеЛицо" json:"ФизическоеЛицо,omitempty"`
	ObmenIzdelii              *Boolean                              `xml:"ОбменИзделий" json:"ОбменИзделий,omitempty"`
	KontragentKey             *Guid                                 `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	DokumentSeriia            *String                               `xml:"ДокументСерия" json:"ДокументСерия,omitempty"`
	DokumentNomer             *String                               `xml:"ДокументНомер" json:"ДокументНомер,omitempty"`
	DokumentVidKey            *Guid                                 `xml:"ДокументВид_Key" json:"ДокументВид_Key,omitempty"`
	DokumentKemVydan          *String                               `xml:"ДокументКемВыдан" json:"ДокументКемВыдан,omitempty"`
	DokumentDataVydachi       *Time                                 `xml:"ДокументДатаВыдачи" json:"ДокументДатаВыдачи,omitempty"`
	DokumentKodPodrazdeleniia *String                               `xml:"ДокументКодПодразделения" json:"ДокументКодПодразделения,omitempty"`
	VidProbitiiaSkupki        *String                               `xml:"ВидПробитияСкупки" json:"ВидПробитияСкупки,omitempty"`
	ProbitNaKKT               *Boolean                              `xml:"ПробитНаККТ" json:"ПробитНаККТ,omitempty"`
	Stornirovan               *Boolean                              `xml:"Сторнирован" json:"Сторнирован,omitempty"`
	Goods                     *[]DocumentSkupkaTovarovTovaryRowType `xml:"Товары" json:"Товары,omitempty"`
}

func (entity Purchase) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity Purchase) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentSkupkaTovarovTovary struct {
	Key         Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber  Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight      *Float  `xml:"Вес" json:"Вес,omitempty"`
	ItemKey     *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	ObshchiiVes *Float  `xml:"ОбщийВес" json:"ОбщийВес,omitempty"`
	Sum         *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	TsenaZaGr   *Float  `xml:"ЦенаЗаГр" json:"ЦенаЗаГр,omitempty"`
	Opisanie    *String `xml:"Описание" json:"Описание,omitempty"`
}

type DocumentSchetFakturaPoluchennyi struct {
	Key                                      Guid                                                                       `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                              *String                                                                    `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                                   *String                                                                    `xml:"Number" json:"Number,omitempty"`
	Date                                     *Time                                                                      `xml:"Date" json:"Date,omitempty"`
	DeletionMark                             *Boolean                                                                   `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                                   *Boolean                                                                   `xml:"Posted" json:"Posted,omitempty"`
	DataVkhodiashchegoDokumenta              *Time                                                                      `xml:"ДатаВходящегоДокумента" json:"ДатаВходящегоДокумента,omitempty"`
	DokumentOsnovanie                        *String                                                                    `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	DokumentSozdanVIuTD                      *Boolean                                                                   `xml:"ДокументСозданВЮТД" json:"ДокументСозданВЮТД,omitempty"`
	Comment                                  *String                                                                    `xml:"Комментарий" json:"Комментарий,omitempty"`
	NomerVkhodiashchegoDokumenta             *String                                                                    `xml:"НомерВходящегоДокумента" json:"НомерВходящегоДокумента,omitempty"`
	OrganizatsiiaKey                         *Guid                                                                      `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	SformirovanPriVvodeNachalnykhOstatkovNDS *Boolean                                                                   `xml:"СформированПриВводеНачальныхОстатковНДС" json:"СформированПриВводеНачальныхОстатковНДС,omitempty"`
	TipDokumenta                             *String                                                                    `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	NomerIskhodnogoDokumenta                 *String                                                                    `xml:"НомерИсходногоДокумента" json:"НомерИсходногоДокумента,omitempty"`
	DataIskhodnogoDokumenta                  *Time                                                                      `xml:"ДатаИсходногоДокумента" json:"ДатаИсходногоДокумента,omitempty"`
	IskhodnyiDokumentKey                     *Guid                                                                      `xml:"ИсходныйДокумент_Key" json:"ИсходныйДокумент_Key,omitempty"`
	Korrektirovochnyi                        *Boolean                                                                   `xml:"Корректировочный" json:"Корректировочный,omitempty"`
	SchetaFakturyVydannyePokupateliam        *[]DocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliamRowType `xml:"СчетаФактурыВыданныеПокупателям" json:"СчетаФактурыВыданныеПокупателям,omitempty"`
	DokumentOsnovanieType                    *String                                                                    `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
}

func (entity DocumentSchetFakturaPoluchennyi) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentSchetFakturaPoluchennyi) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentSchetFakturaPoluchennyiSchetaFakturyVydannyePokupateliam struct {
	Key                 Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber          Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	PokupatelKey        *Guid  `xml:"Покупатель_Key" json:"Покупатель_Key,omitempty"`
	SchetFakturaKey     *Guid  `xml:"СчетФактура_Key" json:"СчетФактура_Key,omitempty"`
	SubkomissionerKey   *Guid  `xml:"Субкомиссионер_Key" json:"Субкомиссионер_Key,omitempty"`
	Sum                 *Float `xml:"Сумма" json:"Сумма,omitempty"`
	NDS                 *Float `xml:"НДС" json:"НДС,omitempty"`
	SummaUvelichenie    *Float `xml:"СуммаУвеличение" json:"СуммаУвеличение,omitempty"`
	SummaUmenshenie     *Float `xml:"СуммаУменьшение" json:"СуммаУменьшение,omitempty"`
	SummaNDSUvelichenie *Float `xml:"СуммаНДСУвеличение" json:"СуммаНДСУвеличение,omitempty"`
	SummaNDSUmenshenie  *Float `xml:"СуммаНДСУменьшение" json:"СуммаНДСУменьшение,omitempty"`
}

type DocumentAktKhimicheskogoAnalizaMetalla struct {
	Key                                   Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                           *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                                *String  `xml:"Number" json:"Number,omitempty"`
	Date                                  *Time    `xml:"Date" json:"Date,omitempty"`
	DeletionMark                          *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                                *Boolean `xml:"Posted" json:"Posted,omitempty"`
	Weight                                *Float   `xml:"Вес" json:"Вес,omitempty"`
	DataVkhodiashchegoDokumenta           *Time    `xml:"ДатаВходящегоДокумента" json:"ДатаВходящегоДокумента,omitempty"`
	DogovorKontragentaKey                 *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie                     *String  `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	Comment                               *String  `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey                         *Guid    `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	NomenklaturaOprikhodovaniiaMetallaKey *Guid    `xml:"НоменклатураОприходованияМеталла_Key" json:"НоменклатураОприходованияМеталла_Key,omitempty"`
	NomerVkhodiashchegoDokumenta          *String  `xml:"НомерВходящегоДокумента" json:"НомерВходящегоДокумента,omitempty"`
	OrganizatsiiaKey                      *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                      *Guid    `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	ProbaLoma                             *Float   `xml:"ПробаЛома" json:"ПробаЛома,omitempty"`
	DepartmentKey                         *Guid    `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	UkazanVesChistoty                     *Boolean `xml:"УказанВесЧистоты" json:"УказанВесЧистоты,omitempty"`
	PodrazdelenieKey                      *Guid    `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	Cost                                  *Float   `xml:"Стоимость" json:"Стоимость,omitempty"`
	SumOfDocument                         *Float   `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	DokumentOsnovanieType                 *String  `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
}

func (entity DocumentAktKhimicheskogoAnalizaMetalla) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentAktKhimicheskogoAnalizaMetalla) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type CatalogfmKartochkaKontragenta struct {
	Key               Guid                                                     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion       *String                                                  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description       *String                                                  `xml:"Description" json:"Description,omitempty"`
	Code              *String                                                  `xml:"Code" json:"Code,omitempty"`
	Owner             *String                                                  `xml:"Owner" json:"Owner,omitempty"`
	DeletionMark      *Boolean                                                 `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	DannyeKontragenta *[]CatalogfmKartochkaKontragentaDannyeKontragentaRowType `xml:"ДанныеКонтрагента" json:"ДанныеКонтрагента,omitempty"`
	OwnerType         *String                                                  `xml:"Owner_Type" json:"Owner_Type,omitempty"`
}

type CatalogfmKartochkaKontragentaDannyeKontragenta struct {
	Key           Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber    Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Kliuch        *String `xml:"Ключ" json:"Ключ,omitempty"`
	Znachenie     *String `xml:"Значение" json:"Значение,omitempty"`
	ZnachenieType *String `xml:"Значение_Type" json:"Значение_Type,omitempty"`
}

type DocumentSpisanieProsrochennykhSertifikatov struct {
	Key                  Guid                                                            `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion          *String                                                         `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number               *String                                                         `xml:"Number" json:"Number,omitempty"`
	Date                 *Time                                                           `xml:"Date" json:"Date,omitempty"`
	DeletionMark         *Boolean                                                        `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted               *Boolean                                                        `xml:"Posted" json:"Posted,omitempty"`
	DokumentSozdanVIuTD  *Boolean                                                        `xml:"ДокументСозданВЮТД" json:"ДокументСозданВЮТД,omitempty"`
	KolichestvoDokumenta *Int                                                            `xml:"КоличествоДокумента" json:"КоличествоДокумента,omitempty"`
	Komentarii           *String                                                         `xml:"Коментарий" json:"Коментарий,omitempty"`
	OtvetstvennyiKey     *Guid                                                           `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	SumOfDocument        *Float                                                          `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	Sertifikaty          *[]DocumentSpisanieProsrochennykhSertifikatovSertifikatyRowType `xml:"Сертификаты" json:"Сертификаты,omitempty"`
}

func (entity DocumentSpisanieProsrochennykhSertifikatov) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentSpisanieProsrochennykhSertifikatov) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentSpisanieProsrochennykhSertifikatovSertifikaty struct {
	Key                  Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber           Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Quantity             *Int    `xml:"Количество" json:"Количество,omitempty"`
	SertifikatKey        *Guid   `xml:"Сертификат_Key" json:"Сертификат_Key,omitempty"`
	SrokDeistviiaDo      *Time   `xml:"СрокДействияДо" json:"СрокДействияДо,omitempty"`
	Sum                  *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	OrganizatsiiaKey     *Guid   `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DokumentProdazhi     *String `xml:"ДокументПродажи" json:"ДокументПродажи,omitempty"`
	DokumentProdazhiType *String `xml:"ДокументПродажи_Type" json:"ДокументПродажи_Type,omitempty"`
}

type DocumentZakrytieAvansovPoGrafikuPlatezhei struct {
	Key              Guid                                                           `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion      *String                                                        `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number           *String                                                        `xml:"Number" json:"Number,omitempty"`
	Date             *Time                                                          `xml:"Date" json:"Date,omitempty"`
	DeletionMark     *Boolean                                                       `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted           *Boolean                                                       `xml:"Posted" json:"Posted,omitempty"`
	OrganizatsiiaKey *Guid                                                          `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	Kontragenty      *[]DocumentZakrytieAvansovPoGrafikuPlatezheiKontragentyRowType `xml:"Контрагенты" json:"Контрагенты,omitempty"`
}

func (entity DocumentZakrytieAvansovPoGrafikuPlatezhei) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentZakrytieAvansovPoGrafikuPlatezhei) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentZakrytieAvansovPoGrafikuPlatezheiKontragenty struct {
	Key                   Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber            Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	DogovorKontragentaKey *Guid `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	KontragentKey         *Guid `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
}

type CatalogTipySistemNalogooblozheniiaKKT struct {
	Key                          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                  *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                  *String  `xml:"Description" json:"Description,omitempty"`
	Code                         *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark                 *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	ZnachenieKomandyDliaAtol     *Int     `xml:"ЗначениеКомандыДляАтол" json:"ЗначениеКомандыДляАтол,omitempty"`
	ZnachenieKomandyDliaShtrikh  *Int     `xml:"ЗначениеКомандыДляШтрих" json:"ЗначениеКомандыДляШтрих,omitempty"`
	FormatPF                     *String  `xml:"ФорматПФ" json:"ФорматПФ,omitempty"`
	ZnachenieKomandyDliaAtol10kh *String  `xml:"ЗначениеКомандыДляАтол10х" json:"ЗначениеКомандыДляАтол10х,omitempty"`
}

type DocumentAkkreditivPeredannyi struct {
	Key                              Guid                                                       `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                      *String                                                    `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                           *String                                                    `xml:"Number" json:"Number,omitempty"`
	Date                             *Time                                                      `xml:"Date" json:"Date,omitempty"`
	DeletionMark                     *Boolean                                                   `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                           *Boolean                                                   `xml:"Posted" json:"Posted,omitempty"`
	ValiutaDokumentaKey              *Guid                                                      `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	VidAkkreditiva                   *String                                                    `xml:"ВидАккредитива" json:"ВидАккредитива,omitempty"`
	OperationType                    *String                                                    `xml:"ВидОперации" json:"ВидОперации,omitempty"`
	VidPlatezha                      *String                                                    `xml:"ВидПлатежа" json:"ВидПлатежа,omitempty"`
	DataOplaty                       *Time                                                      `xml:"ДатаОплаты" json:"ДатаОплаты,omitempty"`
	DogovorKontragentaKey            *Guid                                                      `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie                *String                                                    `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	DokumentyKPredieiavleniiu        *String                                                    `xml:"ДокументыКПредъявлению" json:"ДокументыКПредъявлению,omitempty"`
	DopolnitelnyeUsloviia            *String                                                    `xml:"ДополнительныеУсловия" json:"ДополнительныеУсловия,omitempty"`
	ZaiavkaNaRaskhodovanieSredstvKey *Guid                                                      `xml:"ЗаявкаНаРасходованиеСредств_Key" json:"ЗаявкаНаРасходованиеСредств_Key,omitempty"`
	INNPlatelshchika                 *String                                                    `xml:"ИННПлательщика" json:"ИННПлательщика,omitempty"`
	INNPoluchatelia                  *String                                                    `xml:"ИННПолучателя" json:"ИННПолучателя,omitempty"`
	Comment                          *String                                                    `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey                    *Guid                                                      `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	KPPPlatelshchika                 *String                                                    `xml:"КПППлательщика" json:"КПППлательщика,omitempty"`
	KPPPoluchatelia                  *String                                                    `xml:"КПППолучателя" json:"КПППолучателя,omitempty"`
	NaznacheniePlatezha              *String                                                    `xml:"НазначениеПлатежа" json:"НазначениеПлатежа,omitempty"`
	Oplacheno                        *Boolean                                                   `xml:"Оплачено" json:"Оплачено,omitempty"`
	OrganizatsiiaKey                 *Guid                                                      `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                 *Guid                                                      `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	OtrazhenoVOperUchete             *Boolean                                                   `xml:"ОтраженоВОперУчете" json:"ОтраженоВОперУчете,omitempty"`
	SrokDeistviia                    *Time                                                      `xml:"СрокДействия" json:"СрокДействия,omitempty"`
	TypeOfMovingMoneyKey             *Guid                                                      `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SumOfDocument                    *Float                                                     `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	SchetDeponenta                   *String                                                    `xml:"СчетДепонента" json:"СчетДепонента,omitempty"`
	SchetKontragentaKey              *Guid                                                      `xml:"СчетКонтрагента_Key" json:"СчетКонтрагента_Key,omitempty"`
	SchetOrganizatsiiKey             *Guid                                                      `xml:"СчетОрганизации_Key" json:"СчетОрганизации_Key,omitempty"`
	TekstPlatelshchika               *String                                                    `xml:"ТекстПлательщика" json:"ТекстПлательщика,omitempty"`
	TekstPoluchatelia                *String                                                    `xml:"ТекстПолучателя" json:"ТекстПолучателя,omitempty"`
	TipDokumenta                     *String                                                    `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	UslovieOplaty                    *String                                                    `xml:"УсловиеОплаты" json:"УсловиеОплаты,omitempty"`
	ChastichnaiaOplata               *Boolean                                                   `xml:"ЧастичнаяОплата" json:"ЧастичнаяОплата,omitempty"`
	ExtendedPayments                 *[]DocumentAkkreditivPeredannyiRasshifrovkaPlatezhaRowType `xml:"РасшифровкаПлатежа" json:"РасшифровкаПлатежа,omitempty"`
	RekvizityKontragenta             *[]DocumentAkkreditivPeredannyiRekvizityKontragentaRowType `xml:"РеквизитыКонтрагента" json:"РеквизитыКонтрагента,omitempty"`
	DokumentOsnovanieType            *String                                                    `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
}

func (entity DocumentAkkreditivPeredannyi) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentAkkreditivPeredannyi) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentAkkreditivPeredannyiRasshifrovkaPlatezha struct {
	Key                              Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                       Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	DogovorKontragentaKey            *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentPlanirovaniiaPlatezhaKey *Guid   `xml:"ДокументПланированияПлатежа_Key" json:"ДокументПланированияПлатежа_Key,omitempty"`
	KratnostVzaimoraschetov          *Int    `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov              *Float  `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	KursVzaimoraschetovPlan          *Float  `xml:"КурсВзаиморасчетовПлан" json:"КурсВзаиморасчетовПлан,omitempty"`
	ProektKey                        *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	Sdelka                           *String `xml:"Сделка" json:"Сделка,omitempty"`
	StavkaNDS                        *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	TypeOfMovingMoneyKey             *Guid   `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov             *Float  `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	SummaNDS                         *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	Sum                              *Float  `xml:"СуммаПлатежа" json:"СуммаПлатежа,omitempty"`
	SummaPlatezhaPlan                *Float  `xml:"СуммаПлатежаПлан" json:"СуммаПлатежаПлан,omitempty"`
	SdelkaType                       *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type DocumentAkkreditivPeredannyiRekvizityKontragenta struct {
	Key            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Znachenie      *String `xml:"Значение" json:"Значение,omitempty"`
	Predstavlenie  *String `xml:"Представление" json:"Представление,omitempty"`
	Rekvizit       *String `xml:"Реквизит" json:"Реквизит,omitempty"`
	TipKontragenta *String `xml:"ТипКонтрагента" json:"ТипКонтрагента,omitempty"`
}

type Supplier struct {
	Key                                              Guid                                         `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                                      *String                                      `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                                      *String                                      `xml:"Description" json:"Description,omitempty"`
	Code                                             *String                                      `xml:"Code" json:"Code,omitempty"`
	ParentKey                                        *Guid                                        `xml:"Parent_Key" json:"Parent_Key,omitempty"`
	IsFolder                                         *Boolean                                     `xml:"IsFolder" json:"IsFolder,omitempty"`
	DeletionMark                                     *Boolean                                     `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	VidDostavki                                      *String                                      `xml:"ВидДоставки" json:"ВидДоставки,omitempty"`
	GolovnoiKontragentKey                            *Guid                                        `xml:"ГоловнойКонтрагент_Key" json:"ГоловнойКонтрагент_Key,omitempty"`
	DokumentUdostoveriaiushchiiLichnost              *String                                      `xml:"ДокументУдостоверяющийЛичность" json:"ДокументУдостоверяющийЛичность,omitempty"`
	DopolnitelnoeOpisanie                            *String                                      `xml:"ДополнительноеОписание" json:"ДополнительноеОписание,omitempty"`
	INN                                              *String                                      `xml:"ИНН" json:"ИНН,omitempty"`
	IstochnikInformatsiiPriObrashcheniiKey           *Guid                                        `xml:"ИсточникИнформацииПриОбращении_Key" json:"ИсточникИнформацииПриОбращении_Key,omitempty"`
	KodPoOKPO                                        *String                                      `xml:"КодПоОКПО" json:"КодПоОКПО,omitempty"`
	Comment                                          *String                                      `xml:"Комментарий" json:"Комментарий,omitempty"`
	KPP                                              *String                                      `xml:"КПП" json:"КПП,omitempty"`
	NaimenovaniePolnoe                               *String                                      `xml:"НаименованиеПолное" json:"НаименованиеПолное,omitempty"`
	OsnovnoeKontaktnoeLitsoKey                       *Guid                                        `xml:"ОсновноеКонтактноеЛицо_Key" json:"ОсновноеКонтактноеЛицо_Key,omitempty"`
	OsnovnoiBankovskiiSchetKey                       *Guid                                        `xml:"ОсновнойБанковскийСчет_Key" json:"ОсновнойБанковскийСчет_Key,omitempty"`
	OsnovnoiVidDeiatelnostiKey                       *Guid                                        `xml:"ОсновнойВидДеятельности_Key" json:"ОсновнойВидДеятельности_Key,omitempty"`
	OsnovnoiDogovorKontragentaKey                    *Guid                                        `xml:"ОсновнойДоговорКонтрагента_Key" json:"ОсновнойДоговорКонтрагента_Key,omitempty"`
	OsnovnoiMenedzherPokupateliaKey                  *Guid                                        `xml:"ОсновнойМенеджерПокупателя_Key" json:"ОсновнойМенеджерПокупателя_Key,omitempty"`
	Pokupatel                                        *Boolean                                     `xml:"Покупатель" json:"Покупатель,omitempty"`
	Postavshchik                                     *Boolean                                     `xml:"Поставщик" json:"Поставщик,omitempty"`
	RaspisanieRabotyStrokoi                          *String                                      `xml:"РасписаниеРаботыСтрокой" json:"РасписаниеРаботыСтрокой,omitempty"`
	SrokVypolneniiaZakazaPostavshchikom              *Int                                         `xml:"СрокВыполненияЗаказаПоставщиком" json:"СрокВыполненияЗаказаПоставщиком,omitempty"`
	SrokDeistviiaSvidetelstvaOPostanovkeNaSpetsUchet *Time                                        `xml:"СрокДействияСвидетельстваОПостановкеНаСпецУчет" json:"СрокДействияСвидетельстваОПостановкеНаСпецУчет,omitempty"`
	IurFizLitso                                      *String                                      `xml:"ЮрФизЛицо" json:"ЮрФизЛицо,omitempty"`
	LoginInternetSaita                               *String                                      `xml:"ЛогинИнтернетСайта" json:"ЛогинИнтернетСайта,omitempty"`
	SvidetelstvoDataVydachi                          *Time                                        `xml:"СвидетельствоДатаВыдачи" json:"СвидетельствоДатаВыдачи,omitempty"`
	SvidetelstvoSeriiaNomer                          *String                                      `xml:"СвидетельствоСерияНомер" json:"СвидетельствоСерияНомер,omitempty"`
	KodPoOKATO                                       *String                                      `xml:"КодПоОКАТО" json:"КодПоОКАТО,omitempty"`
	KodIMNS                                          *String                                      `xml:"КодИМНС" json:"КодИМНС,omitempty"`
	NaimenovanieIFNS                                 *String                                      `xml:"НаименованиеИФНС" json:"НаименованиеИФНС,omitempty"`
	KodPoOKVED                                       *String                                      `xml:"КодПоОКВЭД" json:"КодПоОКВЭД,omitempty"`
	OGRN                                             *String                                      `xml:"ОГРН" json:"ОГРН,omitempty"`
	NeRezident                                       *Boolean                                     `xml:"НеРезидент" json:"НеРезидент,omitempty"`
	DataRozhdeniia                                   *Time                                        `xml:"ДатаРождения" json:"ДатаРождения,omitempty"`
	OshibkaINN                                       *String                                      `xml:"ОшибкаИНН" json:"ОшибкаИНН,omitempty"`
	OshibkaKPP                                       *String                                      `xml:"ОшибкаКПП" json:"ОшибкаКПП,omitempty"`
	StranaRegistratsiiKey                            *Guid                                        `xml:"СтранаРегистрации_Key" json:"СтранаРегистрации_Key,omitempty"`
	BIdentifikator                                   *String                                      `xml:"Б_Идентификатор" json:"Б_Идентификатор,omitempty"`
	BNomerVersii                                     *String                                      `xml:"Б_НомерВерсии" json:"Б_НомерВерсии,omitempty"`
	VidyDeiatelnosti                                 *[]CatalogKontragentyVidyDeiatelnostiRowType `xml:"ВидыДеятельности" json:"ВидыДеятельности,omitempty"`
}

type CatalogKontragentyVidyDeiatelnosti struct {
	Key                Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber         Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	VidDeiatelnostiKey *Guid `xml:"ВидДеятельности_Key" json:"ВидДеятельности_Key,omitempty"`
}

type DocumentInformatsionnoeSoobshchenie struct {
	Key                                 Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                         *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                              *String  `xml:"Number" json:"Number,omitempty"`
	Date                                *Time    `xml:"Date" json:"Date,omitempty"`
	DeletionMark                        *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                              *Boolean `xml:"Posted" json:"Posted,omitempty"`
	Email                               *String  `xml:"Email" json:"Email,omitempty"`
	DataRozhdeniia                      *Time    `xml:"ДатаРождения" json:"ДатаРождения,omitempty"`
	KliuchProdazhKey                    *Guid    `xml:"КлючПродаж_Key" json:"КлючПродаж_Key,omitempty"`
	SumOfDocument                       *Float   `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	Telefon                             *String  `xml:"Телефон" json:"Телефон,omitempty"`
	FIO                                 *String  `xml:"ФИО" json:"ФИО,omitempty"`
	OtkazOtPredieiavleniiaUL            *Boolean `xml:"ОтказОтПредъявленияУЛ" json:"ОтказОтПредъявленияУЛ,omitempty"`
	Pol                                 *String  `xml:"Пол" json:"Пол,omitempty"`
	DokumentUdostoveriaiushchiiLichnost *String  `xml:"ДокументУдостоверяющийЛичность" json:"ДокументУдостоверяющийЛичность,omitempty"`
	MemberCardKey                       *Guid    `xml:"ДисконтнаяКарта_Key" json:"ДисконтнаяКарта_Key,omitempty"`
	DokumentSozdanVIuTD                 *Boolean `xml:"ДокументСозданВЮТД" json:"ДокументСозданВЮТД,omitempty"`
	DokumentVidKey                      *Guid    `xml:"ДокументВид_Key" json:"ДокументВид_Key,omitempty"`
	DokumentSeriia                      *String  `xml:"ДокументСерия" json:"ДокументСерия,omitempty"`
	DokumentNomer                       *String  `xml:"ДокументНомер" json:"ДокументНомер,omitempty"`
	DokumentDataVydachi                 *Time    `xml:"ДокументДатаВыдачи" json:"ДокументДатаВыдачи,omitempty"`
	DokumentKemVydan                    *String  `xml:"ДокументКемВыдан" json:"ДокументКемВыдан,omitempty"`
	DokumentKodPodrazdeleniia           *String  `xml:"ДокументКодПодразделения" json:"ДокументКодПодразделения,omitempty"`
	KontragentKey                       *Guid    `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	SummaDokumentaBezNal                *Float   `xml:"СуммаДокументаБезНал" json:"СуммаДокументаБезНал,omitempty"`
}

func (entity DocumentInformatsionnoeSoobshchenie) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentInformatsionnoeSoobshchenie) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type CatalogVlozheniiaElektronnykhPisem struct {
	Key                     Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion             *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description             *String  `xml:"Description" json:"Description,omitempty"`
	DeletionMark            *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	IDFailaPochtovogoPisma  *String  `xml:"ИДФайлаПочтовогоПисьма" json:"ИДФайлаПочтовогоПисьма,omitempty"`
	ImiaFaila               *String  `xml:"ИмяФайла" json:"ИмяФайла,omitempty"`
	ObieektKey              *Guid    `xml:"Объект_Key" json:"Объект_Key,omitempty"`
	Predmet                 *String  `xml:"Предмет" json:"Предмет,omitempty"`
	KhranilishcheBase64Data *Binary  `xml:"Хранилище_Base64Data" json:"Хранилище_Base64Data,omitempty"`
	PredmetType             *String  `xml:"Предмет_Type" json:"Предмет_Type,omitempty"`
	KhranilishcheType       *String  `xml:"Хранилище_Type" json:"Хранилище_Type,omitempty"`
	Khranilishche           *Binary  `xml:"Хранилище" json:"Хранилище,omitempty"`
}

type DocumentPlatezhnoeTrebovanieVystavlennoe struct {
	Key                                  Guid                                                                   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                          *String                                                                `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                               *String                                                                `xml:"Number" json:"Number,omitempty"`
	Date                                 *Time                                                                  `xml:"Date" json:"Date,omitempty"`
	DeletionMark                         *Boolean                                                               `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                               *Boolean                                                               `xml:"Posted" json:"Posted,omitempty"`
	ValiutaDokumentaKey                  *Guid                                                                  `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	OperationType                        *String                                                                `xml:"ВидОперации" json:"ВидОперации,omitempty"`
	VidPlatezha                          *String                                                                `xml:"ВидПлатежа" json:"ВидПлатежа,omitempty"`
	DataOplaty                           *Time                                                                  `xml:"ДатаОплаты" json:"ДатаОплаты,omitempty"`
	DataOtsylkiDokumentov                *Time                                                                  `xml:"ДатаОтсылкиДокументов" json:"ДатаОтсылкиДокументов,omitempty"`
	DogovorKontragentaKey                *Guid                                                                  `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie                    *String                                                                `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	DokumentPlanirovaniiaPostupleniiaKey *Guid                                                                  `xml:"ДокументПланированияПоступления_Key" json:"ДокументПланированияПоступления_Key,omitempty"`
	INNPlatelshchika                     *String                                                                `xml:"ИННПлательщика" json:"ИННПлательщика,omitempty"`
	INNPoluchatelia                      *String                                                                `xml:"ИННПолучателя" json:"ИННПолучателя,omitempty"`
	Comment                              *String                                                                `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey                        *Guid                                                                  `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	KPPPlatelshchika                     *String                                                                `xml:"КПППлательщика" json:"КПППлательщика,omitempty"`
	KPPPoluchatelia                      *String                                                                `xml:"КПППолучателя" json:"КПППолучателя,omitempty"`
	NaznacheniePlatezha                  *String                                                                `xml:"НазначениеПлатежа" json:"НазначениеПлатежа,omitempty"`
	Oplacheno                            *Boolean                                                               `xml:"Оплачено" json:"Оплачено,omitempty"`
	OrganizatsiiaKey                     *Guid                                                                  `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OsnovanieDliaBezaktseptnogoSpisaniia *String                                                                `xml:"ОснованиеДляБезакцептногоСписания" json:"ОснованиеДляБезакцептногоСписания,omitempty"`
	OtvetstvennyiKey                     *Guid                                                                  `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	OtrazhenoVOperUchete                 *Boolean                                                               `xml:"ОтраженоВОперУчете" json:"ОтраженоВОперУчете,omitempty"`
	OcherednostPlatezha                  *Int                                                                   `xml:"ОчередностьПлатежа" json:"ОчередностьПлатежа,omitempty"`
	SrokDliaAktsepta                     *Int                                                                   `xml:"СрокДляАкцепта" json:"СрокДляАкцепта,omitempty"`
	TypeOfMovingMoneyKey                 *Guid                                                                  `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SumOfDocument                        *Float                                                                 `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	SchetKontragentaKey                  *Guid                                                                  `xml:"СчетКонтрагента_Key" json:"СчетКонтрагента_Key,omitempty"`
	SchetOrganizatsiiKey                 *Guid                                                                  `xml:"СчетОрганизации_Key" json:"СчетОрганизации_Key,omitempty"`
	TekstPlatelshchika                   *String                                                                `xml:"ТекстПлательщика" json:"ТекстПлательщика,omitempty"`
	TekstPoluchatelia                    *String                                                                `xml:"ТекстПолучателя" json:"ТекстПолучателя,omitempty"`
	TipDokumenta                         *String                                                                `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	UslovieOplaty                        *String                                                                `xml:"УсловиеОплаты" json:"УсловиеОплаты,omitempty"`
	ChastichnaiaOplata                   *Boolean                                                               `xml:"ЧастичнаяОплата" json:"ЧастичнаяОплата,omitempty"`
	VidAktsepta                          *Int                                                                   `xml:"ВидАкцепта" json:"ВидАкцепта,omitempty"`
	ExtendedPayments                     *[]DocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezhaRowType `xml:"РасшифровкаПлатежа" json:"РасшифровкаПлатежа,omitempty"`
	RekvizityKontragenta                 *[]DocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragentaRowType `xml:"РеквизитыКонтрагента" json:"РеквизитыКонтрагента,omitempty"`
	DokumentOsnovanieType                *String                                                                `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
}

func (entity DocumentPlatezhnoeTrebovanieVystavlennoe) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentPlatezhnoeTrebovanieVystavlennoe) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentPlatezhnoeTrebovanieVystavlennoeRasshifrovkaPlatezha struct {
	Key                              Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                       Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	DogovorKontragentaKey            *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentPlanirovaniiaPlatezhaKey *Guid   `xml:"ДокументПланированияПлатежа_Key" json:"ДокументПланированияПлатежа_Key,omitempty"`
	KratnostVzaimoraschetov          *Int    `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov              *Float  `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	KursVzaimoraschetovPlan          *Float  `xml:"КурсВзаиморасчетовПлан" json:"КурсВзаиморасчетовПлан,omitempty"`
	ProektKey                        *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	Sdelka                           *String `xml:"Сделка" json:"Сделка,omitempty"`
	StavkaNDS                        *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	TypeOfMovingMoneyKey             *Guid   `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov             *Float  `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	SummaNDS                         *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	Sum                              *Float  `xml:"СуммаПлатежа" json:"СуммаПлатежа,omitempty"`
	SummaPlatezhaPlan                *Float  `xml:"СуммаПлатежаПлан" json:"СуммаПлатежаПлан,omitempty"`
	SdelkaType                       *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type DocumentPlatezhnoeTrebovanieVystavlennoeRekvizityKontragenta struct {
	Key            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Znachenie      *String `xml:"Значение" json:"Значение,omitempty"`
	Predstavlenie  *String `xml:"Представление" json:"Представление,omitempty"`
	Rekvizit       *String `xml:"Реквизит" json:"Реквизит,omitempty"`
	TipKontragenta *String `xml:"ТипКонтрагента" json:"ТипКонтрагента,omitempty"`
}

type DocumentMarketingovaiaAktsiia struct {
	Key                                    Guid                                                          `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                            *String                                                       `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                                 *String                                                       `xml:"Number" json:"Number,omitempty"`
	Date                                   *Time                                                         `xml:"Date" json:"Date,omitempty"`
	DeletionMark                           *Boolean                                                      `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                                 *Boolean                                                      `xml:"Posted" json:"Posted,omitempty"`
	NaimenovanieAktsii                     *String                                                       `xml:"НаименованиеАкции" json:"НаименованиеАкции,omitempty"`
	Opisanie                               *String                                                       `xml:"Описание" json:"Описание,omitempty"`
	DataNachalaDeistviia                   *Time                                                         `xml:"ДатаНачалаДействия" json:"ДатаНачалаДействия,omitempty"`
	DataOkonchaniiaDeistviia               *Time                                                         `xml:"ДатаОкончанияДействия" json:"ДатаОкончанияДействия,omitempty"`
	Comment                                *String                                                       `xml:"Комментарий" json:"Комментарий,omitempty"`
	OtvetstvennyiKey                       *Guid                                                         `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	DliaVsekhMagazinov                     *Boolean                                                      `xml:"ДляВсехМагазинов" json:"ДляВсехМагазинов,omitempty"`
	DliaVsekhMagazinovOdnoRaspisanieSkidok *Boolean                                                      `xml:"ДляВсехМагазиновОдноРасписаниеСкидок" json:"ДляВсехМагазиновОдноРасписаниеСкидок,omitempty"`
	Magaziny                               *[]DocumentMarketingovaiaAktsiiaMagazinyRowType               `xml:"Магазины" json:"Магазины,omitempty"`
	SkidkiNatsenki                         *[]DocumentMarketingovaiaAktsiiaSkidkiNatsenkiRowType         `xml:"СкидкиНаценки" json:"СкидкиНаценки,omitempty"`
	NaboryZnacheniiDostupa                 *[]DocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupaRowType `xml:"НаборыЗначенийДоступа" json:"НаборыЗначенийДоступа,omitempty"`
}

func (entity DocumentMarketingovaiaAktsiia) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentMarketingovaiaAktsiia) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentMarketingovaiaAktsiiaMagaziny struct {
	Key        Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	MagazinKey *Guid `xml:"Магазин_Key" json:"Магазин_Key,omitempty"`
}

type DocumentMarketingovaiaAktsiiaSkidkiNatsenki struct {
	Key               Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber        Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	DataNachala       *Time `xml:"ДатаНачала" json:"ДатаНачала,omitempty"`
	DataOkonchaniia   *Time `xml:"ДатаОкончания" json:"ДатаОкончания,omitempty"`
	MagazinKey        *Guid `xml:"Магазин_Key" json:"Магазин_Key,omitempty"`
	SkidkaNatsenkaKey *Guid `xml:"СкидкаНаценка_Key" json:"СкидкаНаценка_Key,omitempty"`
}

type DocumentMarketingovaiaAktsiiaNaboryZnacheniiDostupa struct {
	Key                  Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber           Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	NomerNabora          *Int     `xml:"НомерНабора" json:"НомерНабора,omitempty"`
	VidDostupa           *String  `xml:"ВидДоступа" json:"ВидДоступа,omitempty"`
	ZnachenieDostupa     *String  `xml:"ЗначениеДоступа" json:"ЗначениеДоступа,omitempty"`
	Chtenie              *Boolean `xml:"Чтение" json:"Чтение,omitempty"`
	Dobavlenie           *Boolean `xml:"Добавление" json:"Добавление,omitempty"`
	Izmenenie            *Boolean `xml:"Изменение" json:"Изменение,omitempty"`
	Udalenie             *Boolean `xml:"Удаление" json:"Удаление,omitempty"`
	ZnachenieDostupaType *String  `xml:"ЗначениеДоступа_Type" json:"ЗначениеДоступа_Type,omitempty"`
}

type CatalogStsenariiObmenovDannymi struct {
	Key                           Guid                                                    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                   *String                                                 `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                   *String                                                 `xml:"Description" json:"Description,omitempty"`
	Code                          *String                                                 `xml:"Code" json:"Code,omitempty"`
	DeletionMark                  *Boolean                                                `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	IspolzovatReglamentnoeZadanie *Boolean                                                `xml:"ИспользоватьРегламентноеЗадание" json:"ИспользоватьРегламентноеЗадание,omitempty"`
	Comment                       *String                                                 `xml:"Комментарий" json:"Комментарий,omitempty"`
	ReglamentnoeZadanieGUID       *String                                                 `xml:"РегламентноеЗаданиеGUID" json:"РегламентноеЗаданиеGUID,omitempty"`
	NastroikiObmena               *[]CatalogStsenariiObmenovDannymiNastroikiObmenaRowType `xml:"НастройкиОбмена" json:"НастройкиОбмена,omitempty"`
}

type CatalogStsenariiObmenovDannymiNastroikiObmena struct {
	Key                              Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                       Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	UzelInformatsionnoiBazy          *String `xml:"УзелИнформационнойБазы" json:"УзелИнформационнойБазы,omitempty"`
	VidTransportaObmena              *String `xml:"ВидТранспортаОбмена" json:"ВидТранспортаОбмена,omitempty"`
	VypolniaemoeDeistvie             *String `xml:"ВыполняемоеДействие" json:"ВыполняемоеДействие,omitempty"`
	KolichestvoElementovVTranzaktsii *Int    `xml:"КоличествоЭлементовВТранзакции" json:"КоличествоЭлементовВТранзакции,omitempty"`
	UzelInformatsionnoiBazyType      *String `xml:"УзелИнформационнойБазы_Type" json:"УзелИнформационнойБазы_Type,omitempty"`
}

type Item struct {
	Key                                         Guid                                        `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                                 *String                                     `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                                 *String                                     `xml:"Description" json:"Description,omitempty"`
	Code                                        *String                                     `xml:"Code" json:"Code,omitempty"`
	ParentKey                                   *Guid                                       `xml:"Parent_Key" json:"Parent_Key,omitempty"`
	IsFolder                                    *Boolean                                    `xml:"IsFolder" json:"IsFolder,omitempty"`
	DeletionMark                                *Boolean                                    `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	AnalitikaTipaIzdeliiaKey                    *Guid                                       `xml:"АналитикаТипаИзделия_Key" json:"АналитикаТипаИзделия_Key,omitempty"`
	MID                                         *String                                     `xml:"Артикул" json:"Артикул,omitempty"`
	BazovaiaEdinitsaIzmereniiaKey               *Guid                                       `xml:"БазоваяЕдиницаИзмерения_Key" json:"БазоваяЕдиницаИзмерения_Key,omitempty"`
	Vesovoi                                     *Boolean                                    `xml:"Весовой" json:"Весовой,omitempty"`
	VesovoiKoeffitsientVkhozhdeniia             *Int                                        `xml:"ВесовойКоэффициентВхождения" json:"ВесовойКоэффициентВхождения,omitempty"`
	VestiUchetPoKharakteristikam                *Boolean                                    `xml:"ВестиУчетПоХарактеристикам" json:"ВестиУчетПоХарактеристикам,omitempty"`
	Vstavka                                     *Boolean                                    `xml:"Вставка" json:"Вставка,omitempty"`
	GruppaDefektaKey                            *Guid                                       `xml:"ГруппаДефекта_Key" json:"ГруппаДефекта_Key,omitempty"`
	GruppaTsvetaKey                             *Guid                                       `xml:"ГруппаЦвета_Key" json:"ГруппаЦвета_Key,omitempty"`
	DliaZakaza                                  *Boolean                                    `xml:"ДляЗаказа" json:"ДляЗаказа,omitempty"`
	EdinitsaDliaOtchetovKey                     *Guid                                       `xml:"ЕдиницаДляОтчетов_Key" json:"ЕдиницаДляОтчетов_Key,omitempty"`
	EdinitsaKhraneniiaOstatkovKey               *Guid                                       `xml:"ЕдиницаХраненияОстатков_Key" json:"ЕдиницаХраненияОстатков_Key,omitempty"`
	KamenKey                                    *Guid                                       `xml:"Камень_Key" json:"Камень_Key,omitempty"`
	KodirovkaKey                                *Guid                                       `xml:"Кодировка_Key" json:"Кодировка_Key,omitempty"`
	Comment                                     *String                                     `xml:"Комментарий" json:"Комментарий,omitempty"`
	Ligatura                                    *Boolean                                    `xml:"Лигатура" json:"Лигатура,omitempty"`
	Metall                                      *Boolean                                    `xml:"Металл" json:"Металл,omitempty"`
	Nabor                                       *Boolean                                    `xml:"Набор" json:"Набор,omitempty"`
	NaimenovaniePolnoe                          *String                                     `xml:"НаименованиеПолное" json:"НаименованиеПолное,omitempty"`
	NomenklaturnaiaGruppaKey                    *Guid                                       `xml:"НоменклатурнаяГруппа_Key" json:"НоменклатурнаяГруппа_Key,omitempty"`
	NomenklaturnaiaGruppaZatratKey              *Guid                                       `xml:"НоменклатурнаяГруппаЗатрат_Key" json:"НоменклатурнаяГруппаЗатрат_Key,omitempty"`
	NomerGTDKey                                 *Guid                                       `xml:"НомерГТД_Key" json:"НомерГТД_Key,omitempty"`
	Opisanie                                    *String                                     `xml:"Описание" json:"Описание,omitempty"`
	OsnovnoeIzobrazhenieKey                     *Guid                                       `xml:"ОсновноеИзображение_Key" json:"ОсновноеИзображение_Key,omitempty"`
	OsnovnoeKachestvoKey                        *Guid                                       `xml:"ОсновноеКачество_Key" json:"ОсновноеКачество_Key,omitempty"`
	OsnovnoiPostavshchikKey                     *Guid                                       `xml:"ОсновнойПоставщик_Key" json:"ОсновнойПоставщик_Key,omitempty"`
	ManufacturerKey                             *Guid                                       `xml:"ОсновнойПроизводитель_Key" json:"ОсновнойПроизводитель_Key,omitempty"`
	OtvetstvennyiMenedzherZaPokupkiKey          *Guid                                       `xml:"ОтветственныйМенеджерЗаПокупки_Key" json:"ОтветственныйМенеджерЗаПокупки_Key,omitempty"`
	ProbeKey                                    *Guid                                       `xml:"Проба_Key" json:"Проба_Key,omitempty"`
	PutKataloga                                 *String                                     `xml:"ПутьКаталога" json:"ПутьКаталога,omitempty"`
	Razmer1                                     *Float                                      `xml:"Размер1" json:"Размер1,omitempty"`
	Razmer2                                     *Float                                      `xml:"Размер2" json:"Размер2,omitempty"`
	Razmer3                                     *Float                                      `xml:"Размер3" json:"Размер3,omitempty"`
	RassevKey                                   *Guid                                       `xml:"Рассев_Key" json:"Рассев_Key,omitempty"`
	SredniiVes                                  *Float                                      `xml:"СреднийВес" json:"СреднийВес,omitempty"`
	StavkaNDS                                   *String                                     `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	StatiaZatratKey                             *Guid                                       `xml:"СтатьяЗатрат_Key" json:"СтатьяЗатрат_Key,omitempty"`
	StranaProiskhozhdeniiaKey                   *Guid                                       `xml:"СтранаПроисхождения_Key" json:"СтранаПроисхождения_Key,omitempty"`
	TypeKey                                     *Guid                                       `xml:"ТипИзделия_Key" json:"ТипИзделия_Key,omitempty"`
	TipShtrikhkodaKey                           *Guid                                       `xml:"ТипШтрихкода_Key" json:"ТипШтрихкода_Key,omitempty"`
	TovarOtpuskaemyiPoSvobodnoiTseneBezOstatkov *Boolean                                    `xml:"ТоварОтпускаемыйПоСвободнойЦенеБезОстатков" json:"ТоварОтпускаемыйПоСвободнойЦенеБезОстатков,omitempty"`
	Usluga                                      *Boolean                                    `xml:"Услуга" json:"Услуга,omitempty"`
	FailOpisaniiaDliaSaitaKey                   *Guid                                       `xml:"ФайлОписанияДляСайта_Key" json:"ФайлОписанияДляСайта_Key,omitempty"`
	FormaOgrankiKey                             *Guid                                       `xml:"ФормаОгранки_Key" json:"ФормаОгранки_Key,omitempty"`
	TsvetKamniaKey                              *Guid                                       `xml:"ЦветКамня_Key" json:"ЦветКамня_Key,omitempty"`
	TsenovaiaGruppaKey                          *Guid                                       `xml:"ЦеноваяГруппа_Key" json:"ЦеноваяГруппа_Key,omitempty"`
	KomplektKey                                 *Guid                                       `xml:"Комплект_Key" json:"Комплект_Key,omitempty"`
	Novinka                                     *Boolean                                    `xml:"Новинка" json:"Новинка,omitempty"`
	KhitProdazh                                 *Boolean                                    `xml:"ХитПродаж" json:"ХитПродаж,omitempty"`
	Skidka                                      *Boolean                                    `xml:"Скидка" json:"Скидка,omitempty"`
	KodVidaTovaraKey                            *Guid                                       `xml:"КодВидаТовара_Key" json:"КодВидаТовара_Key,omitempty"`
	BIdentifikator                              *String                                     `xml:"Б_Идентификатор" json:"Б_Идентификатор,omitempty"`
	BNomerVersii                                *String                                     `xml:"Б_НомерВерсии" json:"Б_НомерВерсии,omitempty"`
	SostavLigatury                              *[]CatalogNomenklaturaSostavLigaturyRowType `xml:"СоставЛигатуры" json:"СоставЛигатуры,omitempty"`
}

type CatalogNomenklaturaSostavLigatury struct {
	Key        Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	Quantity   *Float `xml:"Количество" json:"Количество,omitempty"`
	ItemKey    *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
}

type DocumentOpros struct {
	Key                    Guid                                  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion            *String                               `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                 *String                               `xml:"Number" json:"Number,omitempty"`
	Date                   *Time                                 `xml:"Date" json:"Date,omitempty"`
	DeletionMark           *Boolean                              `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                 *Boolean                              `xml:"Posted" json:"Posted,omitempty"`
	Comment                *String                               `xml:"Комментарий" json:"Комментарий,omitempty"`
	OprashivaemoeLitso     *String                               `xml:"ОпрашиваемоеЛицо" json:"ОпрашиваемоеЛицо,omitempty"`
	OtvetstvennyiKey       *Guid                                 `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	RassylkaKey            *Guid                                 `xml:"Рассылка_Key" json:"Рассылка_Key,omitempty"`
	TipovaiaAnketaKey      *Guid                                 `xml:"ТиповаяАнкета_Key" json:"ТиповаяАнкета_Key,omitempty"`
	Voprosy                *[]DocumentOprosVoprosyRowType        `xml:"Вопросы" json:"Вопросы,omitempty"`
	SostavnoiOtvet         *[]DocumentOprosSostavnoiOtvetRowType `xml:"СоставнойОтвет" json:"СоставнойОтвет,omitempty"`
	OprashivaemoeLitsoType *String                               `xml:"ОпрашиваемоеЛицо_Type" json:"ОпрашиваемоеЛицо_Type,omitempty"`
}

func (entity DocumentOpros) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentOpros) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentOprosVoprosy struct {
	Key              Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber       Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	VoprosKey        *Guid   `xml:"Вопрос_Key" json:"Вопрос_Key,omitempty"`
	Otvet            *String `xml:"Ответ" json:"Ответ,omitempty"`
	TipovoiOtvet     *String `xml:"ТиповойОтвет" json:"ТиповойОтвет,omitempty"`
	TipovoiOtvetType *String `xml:"ТиповойОтвет_Type" json:"ТиповойОтвет_Type,omitempty"`
}

type DocumentOprosSostavnoiOtvet struct {
	Key                  Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber           Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	VoprosKey            *Guid   `xml:"Вопрос_Key" json:"Вопрос_Key,omitempty"`
	VoprosVladeletsKey   *Guid   `xml:"ВопросВладелец_Key" json:"ВопросВладелец_Key,omitempty"`
	NomerStrokiVTablitse *Int    `xml:"НомерСтрокиВТаблице" json:"НомерСтрокиВТаблице,omitempty"`
	Otvet                *String `xml:"Ответ" json:"Ответ,omitempty"`
	TipovoiOtvet         *String `xml:"ТиповойОтвет" json:"ТиповойОтвет,omitempty"`
	TipovoiOtvetType     *String `xml:"ТиповойОтвет_Type" json:"ТиповойОтвет_Type,omitempty"`
}

type CatalogGruppyPoluchateleiSkidki struct {
	Key                               Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                       *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                       *String  `xml:"Description" json:"Description,omitempty"`
	ParentKey                         *Guid    `xml:"Parent_Key" json:"Parent_Key,omitempty"`
	IsFolder                          *Boolean `xml:"IsFolder" json:"IsFolder,omitempty"`
	DeletionMark                      *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	SposobFormirovaniia               *String  `xml:"СпособФормирования" json:"СпособФормирования,omitempty"`
	SkhemaKomponovkiDannykhBase64Data *Binary  `xml:"СхемаКомпоновкиДанных_Base64Data" json:"СхемаКомпоновкиДанных_Base64Data,omitempty"`
	Opisanie                          *String  `xml:"Описание" json:"Описание,omitempty"`
	OtvetstvennyiKey                  *Guid    `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	DataSozdaniia                     *Time    `xml:"ДатаСоздания" json:"ДатаСоздания,omitempty"`
	ImiaShablonaSKD                   *String  `xml:"ИмяШаблонаСКД" json:"ИмяШаблонаСКД,omitempty"`
	TipPoluchatelei                   *String  `xml:"ТипПолучателей" json:"ТипПолучателей,omitempty"`
	SkhemaKomponovkiDannykhType       *String  `xml:"СхемаКомпоновкиДанных_Type" json:"СхемаКомпоновкиДанных_Type,omitempty"`
	SkhemaKomponovkiDannykh           *Binary  `xml:"СхемаКомпоновкиДанных" json:"СхемаКомпоновкиДанных,omitempty"`
}

type Reassessment struct {
	Key                            Guid                                           `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                    *String                                        `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                         *String                                        `xml:"Number" json:"Number,omitempty"`
	Date                           *Time                                          `xml:"Date" json:"Date,omitempty"`
	DeletionMark                   *Boolean                                       `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                         *Boolean                                       `xml:"Posted" json:"Posted,omitempty"`
	AvtoZapolnenieVIuvS            *Boolean                                       `xml:"АвтоЗаполнениеВЮвС" json:"АвтоЗаполнениеВЮвС,omitempty"`
	Weight                         *Float                                         `xml:"ВесДокумента" json:"ВесДокумента,omitempty"`
	DokumentOsnovanie              *String                                        `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	DokumentSozdanVIuTD            *Boolean                                       `xml:"ДокументСозданВЮТД" json:"ДокументСозданВЮТД,omitempty"`
	KolichestvoDokumenta           *Int                                           `xml:"КоличествоДокумента" json:"КоличествоДокумента,omitempty"`
	KolichestvoDokumentaSvereno    *Int                                           `xml:"КоличествоДокументаСверено" json:"КоличествоДокументаСверено,omitempty"`
	Comment                        *String                                        `xml:"Комментарий" json:"Комментарий,omitempty"`
	OrganizatsiiaKey               *Guid                                          `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey               *Guid                                          `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	ParametryOtboraBase64Data      *Binary                                        `xml:"ПараметрыОтбора_Base64Data" json:"ПараметрыОтбора_Base64Data,omitempty"`
	PodrazdelenieKey               *Guid                                          `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	PrikazNaPereotsenku            *Boolean                                       `xml:"ПриказНаПереоценку" json:"ПриказНаПереоценку,omitempty"`
	DepartmentKey                  *Guid                                          `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	TipDokumenta                   *String                                        `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	TipSkidkiNatsenkiKey           *Guid                                          `xml:"ТипСкидкиНаценки_Key" json:"ТипСкидкиНаценки_Key,omitempty"`
	TipTsenKey                     *Guid                                          `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
	KhoziaistvennaiaOperatsiiaKey  *Guid                                          `xml:"ХозяйственнаяОперация_Key" json:"ХозяйственнаяОперация_Key,omitempty"`
	KomiscionnyeTovaryFilLits      *Boolean                                       `xml:"КомисcионныеТоварыФилЛиц" json:"КомисcионныеТоварыФилЛиц,omitempty"`
	NastroikiZapolneniiaBase64Data *Binary                                        `xml:"НастройкиЗаполнения_Base64Data" json:"НастройкиЗаполнения_Base64Data,omitempty"`
	Goods                          *[]DocumentPereotsenkaTovarovVNTTTovaryRowType `xml:"Товары" json:"Товары,omitempty"`
	DokumentOsnovanieType          *String                                        `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
	ParametryOtboraType            *String                                        `xml:"ПараметрыОтбора_Type" json:"ПараметрыОтбора_Type,omitempty"`
	NastroikiZapolneniiaType       *String                                        `xml:"НастройкиЗаполнения_Type" json:"НастройкиЗаполнения_Type,omitempty"`
	ParametryOtbora                *Binary                                        `xml:"ПараметрыОтбора" json:"ПараметрыОтбора,omitempty"`
	NastroikiZapolneniia           *Binary                                        `xml:"НастройкиЗаполнения" json:"НастройкиЗаполнения,omitempty"`
}

func (entity Reassessment) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity Reassessment) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentPereotsenkaTovarovVNTTTovary struct {
	Key                            Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float   `xml:"Вес" json:"Вес,omitempty"`
	Quantity                       *Int     `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid    `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid    `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	RetailCost                     *Float   `xml:"ЦенаВРознице" json:"ЦенаВРознице,omitempty"`
	TsenaVRoznitseGr               *Float   `xml:"ЦенаВРозницеГр" json:"ЦенаВРозницеГр,omitempty"`
	TsenaVRoznitseStaraia          *Float   `xml:"ЦенаВРозницеСтарая" json:"ЦенаВРозницеСтарая,omitempty"`
	Naideno                        *Boolean `xml:"Найдено" json:"Найдено,omitempty"`
	Dnei                           *Int     `xml:"Дней" json:"Дней,omitempty"`
	DogovorKontragentaKey          *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	ProtsentUtsenki                *Float   `xml:"ПроцентУценки" json:"ПроцентУценки,omitempty"`
}

type CatalogTomaKhraneniiaFailov struct {
	Key                 Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion         *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description         *String  `xml:"Description" json:"Description,omitempty"`
	Code                *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark        *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Comment             *String  `xml:"Комментарий" json:"Комментарий,omitempty"`
	MaksimalnyiRazmer   *Int     `xml:"МаксимальныйРазмер" json:"МаксимальныйРазмер,omitempty"`
	PolnyiPutLinux      *String  `xml:"ПолныйПутьLinux" json:"ПолныйПутьLinux,omitempty"`
	PolnyiPutWindows    *String  `xml:"ПолныйПутьWindows" json:"ПолныйПутьWindows,omitempty"`
	PoriadokZapolneniia *Int     `xml:"ПорядокЗаполнения" json:"ПорядокЗаполнения,omitempty"`
}

type DocumentJournalProizvodstvennyeDokumenty struct {
	Ref                 String   `xml:"Ref" json:"Ref,omitempty"`
	Type                *String  `xml:"Type" json:"Type,omitempty"`
	Date                *Time    `xml:"Date" json:"Date,omitempty"`
	DeletionMark        *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Number              *String  `xml:"Number" json:"Number,omitempty"`
	Posted              *Boolean `xml:"Posted" json:"Posted,omitempty"`
	ValiutaDokumentaKey *Guid    `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	Weight              *Float   `xml:"Вес" json:"Вес,omitempty"`
	Quantity            *Int     `xml:"Количество" json:"Количество,omitempty"`
	Comment             *String  `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey       *Guid    `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	OrganizatsiiaKey    *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey    *Guid    `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	DepartmentKey       *Guid    `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	Sum                 *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	RefType             String   `xml:"Ref_Type" json:"Ref_Type,omitempty"`
}

type DocumentIzmeneniePravDostupa struct {
	Key                     Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion             *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                  *String  `xml:"Number" json:"Number,omitempty"`
	Date                    *Time    `xml:"Date" json:"Date,omitempty"`
	DeletionMark            *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                  *Boolean `xml:"Posted" json:"Posted,omitempty"`
	AdresElektronnoiPochty  *String  `xml:"АдресЭлектроннойПочты" json:"АдресЭлектроннойПочты,omitempty"`
	KontragentDoKey         *Guid    `xml:"КонтрагентДо_Key" json:"КонтрагентДо_Key,omitempty"`
	OrganizatsiiaDoKey      *Guid    `xml:"ОрганизацияДо_Key" json:"ОрганизацияДо_Key,omitempty"`
	DogovorKontragentaDoKey *Guid    `xml:"ДоговорКонтрагентаДо_Key" json:"ДоговорКонтрагентаДо_Key,omitempty"`
	PravoDostupaDo          *String  `xml:"ПравоДоступаДо" json:"ПравоДоступаДо,omitempty"`
	OrganizatsiiaKey        *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	KontragentKey           *Guid    `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	DogovorKontragentaKey   *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	PravoDostupa            *String  `xml:"ПравоДоступа" json:"ПравоДоступа,omitempty"`
}

func (entity DocumentIzmeneniePravDostupa) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentIzmeneniePravDostupa) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type CatalogNastroikaAssortimentnoiMatritsy struct {
	Key                                 Guid                                                                        `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                         *String                                                                     `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                         *String                                                                     `xml:"Description" json:"Description,omitempty"`
	DeletionMark                        *Boolean                                                                    `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	IspolzuetsiaAssortimentnaiaMatritsa *Boolean                                                                    `xml:"ИспользуетсяАссортиментнаяМатрица" json:"ИспользуетсяАссортиментнаяМатрица,omitempty"`
	NastroikaTovarnykhGrupp             *[]CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGruppRowType     `xml:"НастройкаТоварныхГрупп" json:"НастройкаТоварныхГрупп,omitempty"`
	NastroikaTovarnykhKategorii         *[]CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategoriiRowType `xml:"НастройкаТоварныхКатегорий" json:"НастройкаТоварныхКатегорий,omitempty"`
	NastroikaTovarnykhPozitsii          *[]CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsiiRowType  `xml:"НастройкаТоварныхПозиций" json:"НастройкаТоварныхПозиций,omitempty"`
}

type CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhGrupp struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	VstavkiBase64Data              *Binary `xml:"Вставки_Base64Data" json:"Вставки_Base64Data,omitempty"`
	MetallKey                      *Guid   `xml:"Металл_Key" json:"Металл_Key,omitempty"`
	Naimenovanie                   *String `xml:"Наименование" json:"Наименование,omitempty"`
	UsloviiaVkhozhdeniiaBase64Data *Binary `xml:"УсловияВхождения_Base64Data" json:"УсловияВхождения_Base64Data,omitempty"`
	VstavkiType                    *String `xml:"Вставки_Type" json:"Вставки_Type,omitempty"`
	UsloviiaVkhozhdeniiaType       *String `xml:"УсловияВхождения_Type" json:"УсловияВхождения_Type,omitempty"`
	Vstavki                        *Binary `xml:"Вставки" json:"Вставки,omitempty"`
	UsloviiaVkhozhdeniia           *Binary `xml:"УсловияВхождения" json:"УсловияВхождения,omitempty"`
}

type CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhKategorii struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	MiksyVstavokBase64Data         *Binary `xml:"МиксыВставок_Base64Data" json:"МиксыВставок_Base64Data,omitempty"`
	Naimenovanie                   *String `xml:"Наименование" json:"Наименование,omitempty"`
	NomenklaturnaiaGruppaKey       *Guid   `xml:"НоменклатурнаяГруппа_Key" json:"НоменклатурнаяГруппа_Key,omitempty"`
	UsloviiaVkhozhdeniiaBase64Data *Binary `xml:"УсловияВхождения_Base64Data" json:"УсловияВхождения_Base64Data,omitempty"`
	MiksyVstavokType               *String `xml:"МиксыВставок_Type" json:"МиксыВставок_Type,omitempty"`
	UsloviiaVkhozhdeniiaType       *String `xml:"УсловияВхождения_Type" json:"УсловияВхождения_Type,omitempty"`
	MiksyVstavok                   *Binary `xml:"МиксыВставок" json:"МиксыВставок,omitempty"`
	UsloviiaVkhozhdeniia           *Binary `xml:"УсловияВхождения" json:"УсловияВхождения,omitempty"`
}

type CatalogNastroikaAssortimentnoiMatritsyNastroikaTovarnykhPozitsii struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	SvoistvoTovara                 *String `xml:"СвойствоТовара" json:"СвойствоТовара,omitempty"`
	UsloviiaVkhozhdeniiaBase64Data *Binary `xml:"УсловияВхождения_Base64Data" json:"УсловияВхождения_Base64Data,omitempty"`
	Naimenovanie                   *String `xml:"Наименование" json:"Наименование,omitempty"`
	UsloviiaVkhozhdeniiaType       *String `xml:"УсловияВхождения_Type" json:"УсловияВхождения_Type,omitempty"`
	UsloviiaVkhozhdeniia           *Binary `xml:"УсловияВхождения" json:"УсловияВхождения,omitempty"`
}

type DocumentJournalDokumentyKontragentov struct {
	Ref              String   `xml:"Ref" json:"Ref,omitempty"`
	Type             *String  `xml:"Type" json:"Type,omitempty"`
	Date             *Time    `xml:"Date" json:"Date,omitempty"`
	DeletionMark     *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Number           *String  `xml:"Number" json:"Number,omitempty"`
	Posted           *Boolean `xml:"Posted" json:"Posted,omitempty"`
	ValiutaKey       *Guid    `xml:"Валюта_Key" json:"Валюта_Key,omitempty"`
	Weight           *Float   `xml:"Вес" json:"Вес,omitempty"`
	OperationType    *String  `xml:"ВидОперации" json:"ВидОперации,omitempty"`
	Informatsiia     *String  `xml:"Информация" json:"Информация,omitempty"`
	Quantity         *Int     `xml:"Количество" json:"Количество,omitempty"`
	Comment          *String  `xml:"Комментарий" json:"Комментарий,omitempty"`
	Kontragent       *String  `xml:"Контрагент" json:"Контрагент,omitempty"`
	OrganizatsiiaKey *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey *Guid    `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey *Guid    `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	Sum              *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	RefType          String   `xml:"Ref_Type" json:"Ref_Type,omitempty"`
	VidOperatsiiType *String  `xml:"ВидОперации_Type" json:"ВидОперации_Type,omitempty"`
	InformatsiiaType *String  `xml:"Информация_Type" json:"Информация_Type,omitempty"`
	KontragentType   *String  `xml:"Контрагент_Type" json:"Контрагент_Type,omitempty"`
}

type MoveInstance struct {
	Key                           Guid                                                 `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                   *String                                              `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                        *String                                              `xml:"Number" json:"Number,omitempty"`
	Date                          *Time                                                `xml:"Date" json:"Date,omitempty"`
	DeletionMark                  *Boolean                                             `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                        *Boolean                                             `xml:"Posted" json:"Posted,omitempty"`
	Weight                        *Float                                               `xml:"ВесДокумента" json:"ВесДокумента,omitempty"`
	OperationType                 *String                                              `xml:"ВидОперации" json:"ВидОперации,omitempty"`
	VnutrenniiZakazKey            *Guid                                                `xml:"ВнутреннийЗаказ_Key" json:"ВнутреннийЗаказ_Key,omitempty"`
	DliaKontroliaUnikalnosti      *String                                              `xml:"ДляКонтроляУникальности" json:"ДляКонтроляУникальности,omitempty"`
	DokumentOsnovanie             *String                                              `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	DokumentSozdanVIuTD           *Boolean                                             `xml:"ДокументСозданВЮТД" json:"ДокументСозданВЮТД,omitempty"`
	IspolzovatRezhimSverki        *Boolean                                             `xml:"ИспользоватьРежимСверки" json:"ИспользоватьРежимСверки,omitempty"`
	KolichestvoDokumenta          *Int                                                 `xml:"КоличествоДокумента" json:"КоличествоДокумента,omitempty"`
	KolichestvoDokumentaSvereno   *Int                                                 `xml:"КоличествоДокументаСверено" json:"КоличествоДокументаСверено,omitempty"`
	Comment                       *String                                              `xml:"Комментарий" json:"Комментарий,omitempty"`
	OrganizatsiiaKey              *Guid                                                `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey              *Guid                                                `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey              *Guid                                                `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	PrichinaVozvrataKey           *Guid                                                `xml:"ПричинаВозврата_Key" json:"ПричинаВозврата_Key,omitempty"`
	SkladOtpravitelKey            *Guid                                                `xml:"СкладОтправитель_Key" json:"СкладОтправитель_Key,omitempty"`
	SkladPoluchatelKey            *Guid                                                `xml:"СкладПолучатель_Key" json:"СкладПолучатель_Key,omitempty"`
	SumOfDocument                 *Float                                               `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	TipDokumenta                  *String                                              `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	TipSkidkiNatsenkiKey          *Guid                                                `xml:"ТипСкидкиНаценки_Key" json:"ТипСкидкиНаценки_Key,omitempty"`
	TipTsenKey                    *Guid                                                `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
	KhoziaistvennaiaOperatsiiaKey *Guid                                                `xml:"ХозяйственнаяОперация_Key" json:"ХозяйственнаяОперация_Key,omitempty"`
	KurerKey                      *Guid                                                `xml:"Курьер_Key" json:"Курьер_Key,omitempty"`
	Sertifikaty                   *[]DocumentPeremeshchenieTovarovSertifikatyRowType   `xml:"Сертификаты" json:"Сертификаты,omitempty"`
	Goods                         *[]DocumentPeremeshchenieTovarovTovaryRowType        `xml:"Товары" json:"Товары,omitempty"`
	SpisokZaiavok                 *[]DocumentPeremeshchenieTovarovSpisokZaiavokRowType `xml:"СписокЗаявок" json:"СписокЗаявок,omitempty"`
	DokumentOsnovanieType         *String                                              `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
}

func (entity MoveInstance) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity MoveInstance) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentPeremeshchenieTovarovSertifikaty struct {
	Key           Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber    Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SertifikatKey *Guid  `xml:"Сертификат_Key" json:"Сертификат_Key,omitempty"`
	Sum           *Float `xml:"Сумма" json:"Сумма,omitempty"`
}

type DocumentPeremeshchenieTovarovTovary struct {
	Key                            Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float   `xml:"Вес" json:"Вес,omitempty"`
	DokumentRezerva                *String  `xml:"ДокументРезерва" json:"ДокументРезерва,omitempty"`
	KachestvoKey                   *Guid    `xml:"Качество_Key" json:"Качество_Key,omitempty"`
	Quantity                       *Int     `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	ProtsentRoznichnoiNatsenki     *Float   `xml:"ПроцентРозничнойНаценки" json:"ПроцентРозничнойНаценки,omitempty"`
	SizeKey                        *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid    `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	StoimostBezNDS                 *Float   `xml:"СтоимостьБезНДС" json:"СтоимостьБезНДС,omitempty"`
	StoimostSNDS                   *Float   `xml:"СтоимостьСНДС" json:"СтоимостьСНДС,omitempty"`
	Sum                            *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	SummaPostupleniia              *Float   `xml:"СуммаПоступления" json:"СуммаПоступления,omitempty"`
	KharakteristikaNomenklaturyKey *Guid    `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float   `xml:"Цена" json:"Цена,omitempty"`
	TsenaVRoznitseGr               *Float   `xml:"ЦенаВРозницеГр" json:"ЦенаВРозницеГр,omitempty"`
	TsenaPostupleniia              *Float   `xml:"ЦенаПоступления" json:"ЦенаПоступления,omitempty"`
	Naideno                        *Boolean `xml:"Найдено" json:"Найдено,omitempty"`
	InternetZakazKey               *Guid    `xml:"ИнтернетЗаказ_Key" json:"ИнтернетЗаказ_Key,omitempty"`
	DokumentRezervaType            *String  `xml:"ДокументРезерва_Type" json:"ДокументРезерва_Type,omitempty"`
}

type DocumentPeremeshchenieTovarovSpisokZaiavok struct {
	Key                     Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber              Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	ZaiavkaNaPeremeshchenie *String `xml:"ЗаявкаНаПеремещение" json:"ЗаявкаНаПеремещение,omitempty"`
}

type DocumentZakrytieZaiavokNaRaskhodovanieSredstv struct {
	Key                           Guid                                                                                 `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                   *String                                                                              `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                        *String                                                                              `xml:"Number" json:"Number,omitempty"`
	Date                          *Time                                                                                `xml:"Date" json:"Date,omitempty"`
	DeletionMark                  *Boolean                                                                             `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                        *Boolean                                                                             `xml:"Posted" json:"Posted,omitempty"`
	Comment                       *String                                                                              `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey                 *Guid                                                                                `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	OtborDataKon                  *Time                                                                                `xml:"ОтборДатаКон" json:"ОтборДатаКон,omitempty"`
	OtborDataNach                 *Time                                                                                `xml:"ОтборДатаНач" json:"ОтборДатаНач,omitempty"`
	OtborKontragent               *Boolean                                                                             `xml:"ОтборКонтрагент" json:"ОтборКонтрагент,omitempty"`
	OtborOtvetstvennyi            *Boolean                                                                             `xml:"ОтборОтветственный" json:"ОтборОтветственный,omitempty"`
	OtborTsFO                     *Boolean                                                                             `xml:"ОтборЦФО" json:"ОтборЦФО,omitempty"`
	OtvetstvennyiKey              *Guid                                                                                `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	OtvetstvennyiZaiavkaKey       *Guid                                                                                `xml:"ОтветственныйЗаявка_Key" json:"ОтветственныйЗаявка_Key,omitempty"`
	Sostoianie                    *String                                                                              `xml:"Состояние" json:"Состояние,omitempty"`
	TipDokumenta                  *String                                                                              `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	TsFOKey                       *Guid                                                                                `xml:"ЦФО_Key" json:"ЦФО_Key,omitempty"`
	ZaiavkiNaRaskhodovanieSredstv *[]DocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstvRowType `xml:"ЗаявкиНаРасходованиеСредств" json:"ЗаявкиНаРасходованиеСредств,omitempty"`
}

func (entity DocumentZakrytieZaiavokNaRaskhodovanieSredstv) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentZakrytieZaiavokNaRaskhodovanieSredstv) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentZakrytieZaiavokNaRaskhodovanieSredstvZaiavkiNaRaskhodovanieSredstv struct {
	Key                  Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber           Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	ValiutaZaiavkaKey    *Guid  `xml:"ВалютаЗаявка_Key" json:"ВалютаЗаявка_Key,omitempty"`
	ZaiavkaKey           *Guid  `xml:"Заявка_Key" json:"Заявка_Key,omitempty"`
	KontragentKey        *Guid  `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	OstatokZaiavka       *Float `xml:"ОстатокЗаявка" json:"ОстатокЗаявка,omitempty"`
	OstatokRazmeshchenie *Float `xml:"ОстатокРазмещение" json:"ОстатокРазмещение,omitempty"`
	OstatokRezerv        *Float `xml:"ОстатокРезерв" json:"ОстатокРезерв,omitempty"`
	OtvetstvennyiKey     *Guid  `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
}

type MemberCard struct {
	Key                          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                  *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                  *String  `xml:"Description" json:"Description,omitempty"`
	Code                         *String  `xml:"Code" json:"Code,omitempty"`
	ParentKey                    *Guid    `xml:"Parent_Key" json:"Parent_Key,omitempty"`
	IsFolder                     *Boolean `xml:"IsFolder" json:"IsFolder,omitempty"`
	DeletionMark                 *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Email                        *String  `xml:"Email" json:"Email,omitempty"`
	Adres                        *String  `xml:"Адрес" json:"Адрес,omitempty"`
	Bonusnaia                    *Boolean `xml:"Бонусная" json:"Бонусная,omitempty"`
	MemberCardTypeKey            *Guid    `xml:"ВидДисконтнойКарты_Key" json:"ВидДисконтнойКарты_Key,omitempty"`
	DataRozhdeniia               *Time    `xml:"ДатаРождения" json:"ДатаРождения,omitempty"`
	Nakopitelnaia                *Boolean `xml:"Накопительная" json:"Накопительная,omitempty"`
	Number                       *String  `xml:"Номер" json:"Номер,omitempty"`
	Sum                          *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	SkhemaNakopitelnykhSkidokKey *Guid    `xml:"СхемаНакопительныхСкидок_Key" json:"СхемаНакопительныхСкидок_Key,omitempty"`
	Telefon                      *String  `xml:"Телефон" json:"Телефон,omitempty"`
	TipDiskontnoiKarty           *String  `xml:"ТипДисконтнойКарты" json:"ТипДисконтнойКарты,omitempty"`
	FIO                          *String  `xml:"ФИО" json:"ФИО,omitempty"`
	VladeletsKarty               *String  `xml:"ВладелецКарты" json:"ВладелецКарты,omitempty"`
	Pol                          *String  `xml:"Пол" json:"Пол,omitempty"`
	KontragentKey                *Guid    `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	DataAnkety                   *Time    `xml:"ДатаАнкеты" json:"ДатаАнкеты,omitempty"`
	SoglasieNaSMSRassylku        *Boolean `xml:"СогласиеНаСМСРассылку" json:"СогласиеНаСМСРассылку,omitempty"`
	SoglasieNaPochtovuiuRassylku *Boolean `xml:"СогласиеНаПочтовуюРассылку" json:"СогласиеНаПочтовуюРассылку,omitempty"`
	VladeletsKartyType           *String  `xml:"ВладелецКарты_Type" json:"ВладелецКарты_Type,omitempty"`
}

type DocumentABCKlassifikatsiiaPokupatelei struct {
	Key                                Guid                                                                              `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                        *String                                                                           `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                             *String                                                                           `xml:"Number" json:"Number,omitempty"`
	Date                               *Time                                                                             `xml:"Date" json:"Date,omitempty"`
	DeletionMark                       *Boolean                                                                          `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                             *Boolean                                                                          `xml:"Posted" json:"Posted,omitempty"`
	DataNachala                        *Time                                                                             `xml:"ДатаНачала" json:"ДатаНачала,omitempty"`
	DataOkonchaniia                    *Time                                                                             `xml:"ДатаОкончания" json:"ДатаОкончания,omitempty"`
	Comment                            *String                                                                           `xml:"Комментарий" json:"Комментарий,omitempty"`
	ProtsentAKlassa                    *Float                                                                            `xml:"ПроцентAКласса" json:"ПроцентAКласса,omitempty"`
	ProtsentBKlassa                    *Float                                                                            `xml:"ПроцентBКласса" json:"ПроцентBКласса,omitempty"`
	ProtsentCKlassa                    *Float                                                                            `xml:"ПроцентCКласса" json:"ПроцентCКласса,omitempty"`
	TablitsaRaspredeleniiaKontragentov *[]DocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentovRowType `xml:"ТаблицаРаспределенияКонтрагентов" json:"ТаблицаРаспределенияКонтрагентов,omitempty"`
}

func (entity DocumentABCKlassifikatsiiaPokupatelei) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentABCKlassifikatsiiaPokupatelei) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentABCKlassifikatsiiaPokupateleiTablitsaRaspredeleniiaKontragentov struct {
	Key                       Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	ABCKlassifikatsiia        *String `xml:"ABCКлассификация" json:"ABCКлассификация,omitempty"`
	ABCKlassifikatsiiaStaraia *String `xml:"ABCКлассификацияСтарая" json:"ABCКлассификацияСтарая,omitempty"`
	ZnachenieParametra        *Float  `xml:"ЗначениеПараметра" json:"ЗначениеПараметра,omitempty"`
	KontragentKey             *Guid   `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	MenedzherKontragentaKey   *Guid   `xml:"МенеджерКонтрагента_Key" json:"МенеджерКонтрагента_Key,omitempty"`
}

type CatalogIdentifikatoryObieektovMetadannykh struct {
	Key                                 Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                         *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                         *String  `xml:"Description" json:"Description,omitempty"`
	ParentKey                           *Guid    `xml:"Parent_Key" json:"Parent_Key,omitempty"`
	DeletionMark                        *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	PoriadokKollektsii                  *Int     `xml:"ПорядокКоллекции" json:"ПорядокКоллекции,omitempty"`
	Imia                                *String  `xml:"Имя" json:"Имя,omitempty"`
	Sinonim                             *String  `xml:"Синоним" json:"Синоним,omitempty"`
	PolnoeImia                          *String  `xml:"ПолноеИмя" json:"ПолноеИмя,omitempty"`
	PolnyiSinonim                       *String  `xml:"ПолныйСиноним" json:"ПолныйСиноним,omitempty"`
	BezDannykh                          *Boolean `xml:"БезДанных" json:"БезДанных,omitempty"`
	ZnacheniePustoiSsylki               *String  `xml:"ЗначениеПустойСсылки" json:"ЗначениеПустойСсылки,omitempty"`
	KliuchObieektaMetadannykhBase64Data *Binary  `xml:"КлючОбъектаМетаданных_Base64Data" json:"КлючОбъектаМетаданных_Base64Data,omitempty"`
	NovaiaSsylkaKey                     *Guid    `xml:"НоваяСсылка_Key" json:"НоваяСсылка_Key,omitempty"`
	ZnacheniePustoiSsylkiType           *String  `xml:"ЗначениеПустойСсылки_Type" json:"ЗначениеПустойСсылки_Type,omitempty"`
	KliuchObieektaMetadannykhType       *String  `xml:"КлючОбъектаМетаданных_Type" json:"КлючОбъектаМетаданных_Type,omitempty"`
	KliuchObieektaMetadannykh           *Binary  `xml:"КлючОбъектаМетаданных" json:"КлючОбъектаМетаданных,omitempty"`
}

type DocumentSvodnaiaInventarizatsiiaTovarovNaSklade struct {
	Key                                          Guid                                                                                        `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                                  *String                                                                                     `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                                       *String                                                                                     `xml:"Number" json:"Number,omitempty"`
	Date                                         *Time                                                                                       `xml:"Date" json:"Date,omitempty"`
	DeletionMark                                 *Boolean                                                                                    `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                                       *Boolean                                                                                    `xml:"Posted" json:"Posted,omitempty"`
	Weight                                       *Float                                                                                      `xml:"ВесДокумента" json:"ВесДокумента,omitempty"`
	VPechatnykhFormakhTTPechatatRoznichnyeSummy  *Boolean                                                                                    `xml:"ВПечатныхФормахТТПечататьРозничныеСуммы" json:"ВПечатныхФормахТТПечататьРозничныеСуммы,omitempty"`
	DokumentSozdanVIuTD                          *Boolean                                                                                    `xml:"ДокументСозданВЮТД" json:"ДокументСозданВЮТД,omitempty"`
	KolichestvoDokumenta                         *Int                                                                                        `xml:"КоличествоДокумента" json:"КоличествоДокумента,omitempty"`
	Comment                                      *String                                                                                     `xml:"Комментарий" json:"Комментарий,omitempty"`
	OrganizatsiiaKey                             *Guid                                                                                       `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                             *Guid                                                                                       `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	DepartmentKey                                *Guid                                                                                       `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	SumOfDocument                                *Float                                                                                      `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	UsloviiaProvedeniiaInventarizatsiiBase64Data *Binary                                                                                     `xml:"УсловияПроведенияИнвентаризаций_Base64Data" json:"УсловияПроведенияИнвентаризаций_Base64Data,omitempty"`
	KhoziaistvennaiaOperatsiiaKey                *Guid                                                                                       `xml:"ХозяйственнаяОперация_Key" json:"ХозяйственнаяОперация_Key,omitempty"`
	NastroikiZapolneniiaBase64Data               *Binary                                                                                     `xml:"НастройкиЗаполнения_Base64Data" json:"НастройкиЗаполнения_Base64Data,omitempty"`
	Sertifikaty                                  *[]DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikatyRowType                        `xml:"Сертификаты" json:"Сертификаты,omitempty"`
	UsloviiaProvedeniiaInventarizatsii           *[]DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsiiRowType `xml:"УсловияПроведенияИнвентаризации" json:"УсловияПроведенияИнвентаризации,omitempty"`
	UsloviiaProvedeniiaInventarizatsiiType       *String                                                                                     `xml:"УсловияПроведенияИнвентаризаций_Type" json:"УсловияПроведенияИнвентаризаций_Type,omitempty"`
	NastroikiZapolneniiaType                     *String                                                                                     `xml:"НастройкиЗаполнения_Type" json:"НастройкиЗаполнения_Type,omitempty"`
	InventoryTerms                               *Binary                                                                                     `xml:"УсловияПроведенияИнвентаризаций" json:"УсловияПроведенияИнвентаризаций,omitempty"`
	NastroikiZapolneniia                         *Binary                                                                                     `xml:"НастройкиЗаполнения" json:"НастройкиЗаполнения,omitempty"`
}

func (entity DocumentSvodnaiaInventarizatsiiaTovarovNaSklade) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentSvodnaiaInventarizatsiiaTovarovNaSklade) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeSertifikaty struct {
	Key              Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber       Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SertifikatKey    *Guid  `xml:"Сертификат_Key" json:"Сертификат_Key,omitempty"`
	Sum              *Float `xml:"Сумма" json:"Сумма,omitempty"`
	SummaUchet       *Float `xml:"СуммаУчет" json:"СуммаУчет,omitempty"`
	Quantity         *Float `xml:"Количество" json:"Количество,omitempty"`
	KolichestvoUchet *Float `xml:"КоличествоУчет" json:"КоличествоУчет,omitempty"`
}

type DocumentSvodnaiaInventarizatsiiaTovarovNaSkladeUsloviiaProvedeniiaInventarizatsii struct {
	Key           Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber    Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	VidSravneniia *String `xml:"ВидСравнения" json:"ВидСравнения,omitempty"`
	Znachenie     *String `xml:"Значение" json:"Значение,omitempty"`
	ImiaPolia     *String `xml:"ИмяПоля" json:"ИмяПоля,omitempty"`
	ZnachenieType *String `xml:"Значение_Type" json:"Значение_Type,omitempty"`
}

type DocumentKorrektirovkaRealizatsii struct {
	Key                                  Guid                                             `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                          *String                                          `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                               *String                                          `xml:"Number" json:"Number,omitempty"`
	Date                                 *Time                                            `xml:"Date" json:"Date,omitempty"`
	DeletionMark                         *Boolean                                         `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                               *Boolean                                         `xml:"Posted" json:"Posted,omitempty"`
	DokumentOsnovanieKey                 *Guid                                            `xml:"ДокументОснование_Key" json:"ДокументОснование_Key,omitempty"`
	OrganizatsiiaKey                     *Guid                                            `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DataVkhodiashchegoDokumenta          *Time                                            `xml:"ДатаВходящегоДокумента" json:"ДатаВходящегоДокумента,omitempty"`
	NomerVkhodiashchegoDokumenta         *String                                          `xml:"НомерВходящегоДокумента" json:"НомерВходящегоДокумента,omitempty"`
	GruzootpravitelKey                   *Guid                                            `xml:"Грузоотправитель_Key" json:"Грузоотправитель_Key,omitempty"`
	GruzopoluchatelKey                   *Guid                                            `xml:"Грузополучатель_Key" json:"Грузополучатель_Key,omitempty"`
	VosstanovitNDS                       *Boolean                                         `xml:"ВосстановитьНДС" json:"ВосстановитьНДС,omitempty"`
	NDSVkliuchenVStoimost                *Boolean                                         `xml:"НДСВключенВСтоимость" json:"НДСВключенВСтоимость,omitempty"`
	SummaVkliuchaetNDS                   *Boolean                                         `xml:"СуммаВключаетНДС" json:"СуммаВключаетНДС,omitempty"`
	OtvetstvennyiKey                     *Guid                                            `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	Comment                              *String                                          `xml:"Комментарий" json:"Комментарий,omitempty"`
	SumOfDocument                        *Float                                           `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	SummaNDSDokumenta                    *Float                                           `xml:"СуммаНДСДокумента" json:"СуммаНДСДокумента,omitempty"`
	KontragentKey                        *Guid                                            `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	DogovorKontragentaKey                *Guid                                            `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DepartmentKey                        *Guid                                            `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	ValiutaDokumentaKey                  *Guid                                            `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	PodrazdelenieKey                     *Guid                                            `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	NomerIspravleniia                    *Int                                             `xml:"НомерИсправления" json:"НомерИсправления,omitempty"`
	DataIspravleniia                     *Time                                            `xml:"ДатаИсправления" json:"ДатаИсправления,omitempty"`
	NomerIskhodnogoDokumenta             *String                                          `xml:"НомерИсходногоДокумента" json:"НомерИсходногоДокумента,omitempty"`
	DataIskhodnogoDokumenta              *Time                                            `xml:"ДатаИсходногоДокумента" json:"ДатаИсходногоДокумента,omitempty"`
	NomerIspravleniiaIskhodnogoDokumenta *Int                                             `xml:"НомерИсправленияИсходногоДокумента" json:"НомерИсправленияИсходногоДокумента,omitempty"`
	DataIspravleniiaIskhodnogoDokumenta  *Time                                            `xml:"ДатаИсправленияИсходногоДокумента" json:"ДатаИсправленияИсходногоДокумента,omitempty"`
	KorrektirovatNDS                     *Boolean                                         `xml:"КорректироватьНДС" json:"КорректироватьНДС,omitempty"`
	Goods                                *[]DocumentKorrektirovkaRealizatsiiTovaryRowType `xml:"Товары" json:"Товары,omitempty"`
	Uslugi                               *[]DocumentKorrektirovkaRealizatsiiUslugiRowType `xml:"Услуги" json:"Услуги,omitempty"`
}

func (entity DocumentKorrektirovkaRealizatsii) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentKorrektirovkaRealizatsii) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentKorrektirovkaRealizatsiiTovary struct {
	Key                                           Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                                    Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	VesDoKorrektirovki                            *Float  `xml:"ВесДоКорректировки" json:"ВесДоКорректировки,omitempty"`
	VesDoIzmeneniia                               *Float  `xml:"ВесДоИзменения" json:"ВесДоИзменения,omitempty"`
	Weight                                        *Float  `xml:"Вес" json:"Вес,omitempty"`
	KolichestvoDoKorrektirovki                    *Int    `xml:"КоличествоДоКорректировки" json:"КоличествоДоКорректировки,omitempty"`
	KolichestvoDoIzmeneniia                       *Int    `xml:"КоличествоДоИзменения" json:"КоличествоДоИзменения,omitempty"`
	Quantity                                      *Int    `xml:"Количество" json:"Количество,omitempty"`
	DokumentOprikhodovaniia                       *String `xml:"ДокументОприходования" json:"ДокументОприходования,omitempty"`
	DokumentPartii                                *String `xml:"ДокументПартии" json:"ДокументПартии,omitempty"`
	KachestvoKey                                  *Guid   `xml:"Качество_Key" json:"Качество_Key,omitempty"`
	ItemKey                                       *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	Pasport                                       *String `xml:"Паспорт" json:"Паспорт,omitempty"`
	RazmerDoKorrektirovkiKey                      *Guid   `xml:"РазмерДоКорректировки_Key" json:"РазмерДоКорректировки_Key,omitempty"`
	RazmerDoIzmeneniiaKey                         *Guid   `xml:"РазмерДоИзменения_Key" json:"РазмерДоИзменения_Key,omitempty"`
	SizeKey                                       *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	SeriiaNomenklaturyDoKorrektirovkiKey          *Guid   `xml:"СерияНоменклатурыДоКорректировки_Key" json:"СерияНоменклатурыДоКорректировки_Key,omitempty"`
	SeriiaNomenklaturyDoIzmeneniiaKey             *Guid   `xml:"СерияНоменклатурыДоИзменения_Key" json:"СерияНоменклатурыДоИзменения_Key,omitempty"`
	InstanceKey                                   *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	DepartmentKey                                 *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	StavkaNDSDoKorrektirovki                      *String `xml:"СтавкаНДСДоКорректировки" json:"СтавкаНДСДоКорректировки,omitempty"`
	StavkaNDSDoIzmeneniia                         *String `xml:"СтавкаНДСДоИзменения" json:"СтавкаНДСДоИзменения,omitempty"`
	StavkaNDS                                     *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	StatusPartii                                  *String `xml:"СтатусПартии" json:"СтатусПартии,omitempty"`
	SummaDoKorrektirovki                          *Float  `xml:"СуммаДоКорректировки" json:"СуммаДоКорректировки,omitempty"`
	SummaDoIzmeneniia                             *Float  `xml:"СуммаДоИзменения" json:"СуммаДоИзменения,omitempty"`
	Sum                                           *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDSDoKorrektirovki                       *Float  `xml:"СуммаНДСДоКорректировки" json:"СуммаНДСДоКорректировки,omitempty"`
	SummaNDSDoIzmeneniia                          *Float  `xml:"СуммаНДСДоИзменения" json:"СуммаНДСДоИзменения,omitempty"`
	SummaNDS                                      *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	KharakteristikaNomenklaturyDoKorrektirovkiKey *Guid   `xml:"ХарактеристикаНоменклатурыДоКорректировки_Key" json:"ХарактеристикаНоменклатурыДоКорректировки_Key,omitempty"`
	KharakteristikaNomenklaturyDoIzmeneniiaKey    *Guid   `xml:"ХарактеристикаНоменклатурыДоИзменения_Key" json:"ХарактеристикаНоменклатурыДоИзменения_Key,omitempty"`
	KharakteristikaNomenklaturyKey                *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	TsenaDoKorrektirovki                          *Float  `xml:"ЦенаДоКорректировки" json:"ЦенаДоКорректировки,omitempty"`
	TsenaDoIzmeneniia                             *Float  `xml:"ЦенаДоИзменения" json:"ЦенаДоИзменения,omitempty"`
	Cost                                          *Float  `xml:"Цена" json:"Цена,omitempty"`
	DokumentOprikhodovaniiaType                   *String `xml:"ДокументОприходования_Type" json:"ДокументОприходования_Type,omitempty"`
	DokumentPartiiType                            *String `xml:"ДокументПартии_Type" json:"ДокументПартии_Type,omitempty"`
}

type DocumentKorrektirovkaRealizatsiiUslugi struct {
	Key                        Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                 Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	KolichestvoDoKorrektirovki *Int    `xml:"КоличествоДоКорректировки" json:"КоличествоДоКорректировки,omitempty"`
	KolichestvoDoIzmeneniia    *Int    `xml:"КоличествоДоИзменения" json:"КоличествоДоИзменения,omitempty"`
	Quantity                   *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                    *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	Soderzhanie                *String `xml:"Содержание" json:"Содержание,omitempty"`
	StavkaNDSDoKorrektirovki   *String `xml:"СтавкаНДСДоКорректировки" json:"СтавкаНДСДоКорректировки,omitempty"`
	StavkaNDSDoIzmeneniia      *String `xml:"СтавкаНДСДоИзменения" json:"СтавкаНДСДоИзменения,omitempty"`
	StavkaNDS                  *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	SummaDoKorrektirovki       *Float  `xml:"СуммаДоКорректировки" json:"СуммаДоКорректировки,omitempty"`
	SummaDoIzmeneniia          *Float  `xml:"СуммаДоИзменения" json:"СуммаДоИзменения,omitempty"`
	Sum                        *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDSDoKorrektirovki    *Float  `xml:"СуммаНДСДоКорректировки" json:"СуммаНДСДоКорректировки,omitempty"`
	SummaNDSDoIzmeneniia       *Float  `xml:"СуммаНДСДоИзменения" json:"СуммаНДСДоИзменения,omitempty"`
	SummaNDS                   *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	TsenaDoKorrektirovki       *Float  `xml:"ЦенаДоКорректировки" json:"ЦенаДоКорректировки,omitempty"`
	TsenaDoIzmeneniia          *Float  `xml:"ЦенаДоИзменения" json:"ЦенаДоИзменения,omitempty"`
	Cost                       *Float  `xml:"Цена" json:"Цена,omitempty"`
}

type CatalogVidyDefektov struct {
	Key          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion  *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description  *String  `xml:"Description" json:"Description,omitempty"`
	Code         *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
}

type DocumentDoverennost struct {
	Key                     Guid                                `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion             *String                             `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                  *String                             `xml:"Number" json:"Number,omitempty"`
	Date                    *Time                               `xml:"Date" json:"Date,omitempty"`
	DeletionMark            *Boolean                            `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                  *Boolean                            `xml:"Posted" json:"Posted,omitempty"`
	DataDeistviia           *Time                               `xml:"ДатаДействия" json:"ДатаДействия,omitempty"`
	DogovorKontragentaKey   *Guid                               `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DolzhnostKey            *Guid                               `xml:"Должность_Key" json:"Должность_Key,omitempty"`
	Comment                 *String                             `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey           *Guid                               `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	NaPoluchenieOt          *String                             `xml:"НаПолучениеОт" json:"НаПолучениеОт,omitempty"`
	OrganizatsiiaKey        *Guid                               `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey        *Guid                               `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	PoDokumentu             *String                             `xml:"ПоДокументу" json:"ПоДокументу,omitempty"`
	PodrazdelenieKey        *Guid                               `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	Sdelka                  *String                             `xml:"Сделка" json:"Сделка,omitempty"`
	StrukturnaiaEdinitsaKey *Guid                               `xml:"СтруктурнаяЕдиница_Key" json:"СтруктурнаяЕдиница_Key,omitempty"`
	FizLitsoKey             *Guid                               `xml:"ФизЛицо_Key" json:"ФизЛицо_Key,omitempty"`
	Goods                   *[]DocumentDoverennostTovaryRowType `xml:"Товары" json:"Товары,omitempty"`
	SdelkaType              *String                             `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

func (entity DocumentDoverennost) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentDoverennost) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentDoverennostTovary struct {
	Key                         Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                  Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                      *Float  `xml:"Вес" json:"Вес,omitempty"`
	EdinitsaPoKlassifikatoruKey *Guid   `xml:"ЕдиницаПоКлассификатору_Key" json:"ЕдиницаПоКлассификатору_Key,omitempty"`
	Quantity                    *Int    `xml:"Количество" json:"Количество,omitempty"`
	NaimenovanieTovara          *String `xml:"НаименованиеТовара" json:"НаименованиеТовара,omitempty"`
	SizeKey                     *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
}

type CatalogShablonyZapolneniiaKU struct {
	Key                    Guid                                                  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion            *String                                               `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description            *String                                               `xml:"Description" json:"Description,omitempty"`
	Code                   *String                                               `xml:"Code" json:"Code,omitempty"`
	DeletionMark           *Boolean                                              `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	RuchnoeUkazaniePerioda *Boolean                                              `xml:"РучноеУказаниеПериода" json:"РучноеУказаниеПериода,omitempty"`
	DataNachBudni          *Time                                                 `xml:"ДатаНачБудни" json:"ДатаНачБудни,omitempty"`
	DataKonBudni           *Time                                                 `xml:"ДатаКонБудни" json:"ДатаКонБудни,omitempty"`
	RuchnoeUkazanieSalonov *Boolean                                              `xml:"РучноеУказаниеСалонов" json:"РучноеУказаниеСалонов,omitempty"`
	KUMin                  *Float                                                `xml:"КУМин" json:"КУМин,omitempty"`
	KUMaks                 *Float                                                `xml:"КУМакс" json:"КУМакс,omitempty"`
	PrazdnichnyeDni        *[]CatalogShablonyZapolneniiaKUPrazdnichnyeDniRowType `xml:"ПраздничныеДни" json:"ПраздничныеДни,omitempty"`
	KUNaNedeliu            *[]CatalogShablonyZapolneniiaKUKUNaNedeliuRowType     `xml:"КУНаНеделю" json:"КУНаНеделю,omitempty"`
	Salony                 *[]CatalogShablonyZapolneniiaKUSalonyRowType          `xml:"Салоны" json:"Салоны,omitempty"`
}

type CatalogShablonyZapolneniiaKUPrazdnichnyeDni struct {
	Key                       Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Den                       *Time   `xml:"День" json:"День,omitempty"`
	KU                        *Float  `xml:"КУ" json:"КУ,omitempty"`
	Opisanie                  *String `xml:"Описание" json:"Описание,omitempty"`
	TsvetFonaDliaKalendaria   *String `xml:"ЦветФонаДляКалендаря" json:"ЦветФонаДляКалендаря,omitempty"`
	TsvetTekstaDliaKalendaria *String `xml:"ЦветТекстаДляКалендаря" json:"ЦветТекстаДляКалендаря,omitempty"`
}

type CatalogShablonyZapolneniiaKUKUNaNedeliu struct {
	Key        Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	DenNedeli  *Int   `xml:"ДеньНедели" json:"ДеньНедели,omitempty"`
	KU         *Float `xml:"КУ" json:"КУ,omitempty"`
}

type CatalogShablonyZapolneniiaKUSalony struct {
	Key        Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	SalonKey   *Guid `xml:"Салон_Key" json:"Салон_Key,omitempty"`
}

type DocumentPlanZapolneniiaVitrin struct {
	Key                      Guid                                                            `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion              *String                                                         `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                   *String                                                         `xml:"Number" json:"Number,omitempty"`
	Date                     *Time                                                           `xml:"Date" json:"Date,omitempty"`
	DeletionMark             *Boolean                                                        `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                   *Boolean                                                        `xml:"Posted" json:"Posted,omitempty"`
	OrganizatsiiaKey         *Guid                                                           `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DepartmentKey            *Guid                                                           `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	PlanovoeZapolnenieVitrin *[]DocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrinRowType `xml:"ПлановоеЗаполнениеВитрин" json:"ПлановоеЗаполнениеВитрин,omitempty"`
}

func (entity DocumentPlanZapolneniiaVitrin) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentPlanZapolneniiaVitrin) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentPlanZapolneniiaVitrinPlanovoeZapolnenieVitrin struct {
	Key                           Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                    Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	TovarnaiaGruppaKey            *Guid  `xml:"ТоварнаяГруппа_Key" json:"ТоварнаяГруппа_Key,omitempty"`
	TovarnaiaKategoriiaKey        *Guid  `xml:"ТоварнаяКатегория_Key" json:"ТоварнаяКатегория_Key,omitempty"`
	TovarnaiaPozitsiiaKey         *Guid  `xml:"ТоварнаяПозиция_Key" json:"ТоварнаяПозиция_Key,omitempty"`
	TypeKey                       *Guid  `xml:"ТипИзделия_Key" json:"ТипИзделия_Key,omitempty"`
	AnalitikaTipaIzdeliiaKey      *Guid  `xml:"АналитикаТипаИзделия_Key" json:"АналитикаТипаИзделия_Key,omitempty"`
	PloshchadVykladki             *Float `xml:"ПлощадьВыкладки" json:"ПлощадьВыкладки,omitempty"`
	NormativnaiaPloshchadVykladki *Float `xml:"НормативнаяПлощадьВыкладки" json:"НормативнаяПлощадьВыкладки,omitempty"`
	KolichestvoIzdelii            *Int   `xml:"КоличествоИзделий" json:"КоличествоИзделий,omitempty"`
}

type Instance struct {
	Key                            Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                    *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                    *String  `xml:"Description" json:"Description,omitempty"`
	Code                           *String  `xml:"Code" json:"Code,omitempty"`
	OwnerKey                       *Guid    `xml:"Owner_Key" json:"Owner_Key,omitempty"`
	DeletionMark                   *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Weight                         *Float   `xml:"Вес" json:"Вес,omitempty"`
	DogovorPostavkiKey             *Guid    `xml:"ДоговорПоставки_Key" json:"ДоговорПоставки_Key,omitempty"`
	KachestvoKey                   *Guid    `xml:"Качество_Key" json:"Качество_Key,omitempty"`
	Quantity                       *Int     `xml:"Количество" json:"Количество,omitempty"`
	Comment                        *String  `xml:"Комментарий" json:"Комментарий,omitempty"`
	NaborKey                       *Guid    `xml:"Набор_Key" json:"Набор_Key,omitempty"`
	NomerGTDKey                    *Guid    `xml:"НомерГТД_Key" json:"НомерГТД_Key,omitempty"`
	NomerPasporta                  *String  `xml:"НомерПаспорта" json:"НомерПаспорта,omitempty"`
	OsnovnoeIzobrazhenieKey        *Guid    `xml:"ОсновноеИзображение_Key" json:"ОсновноеИзображение_Key,omitempty"`
	SupplierKey                    *Guid    `xml:"Поставщик_Key" json:"Поставщик_Key,omitempty"`
	SizeKey                        *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	Sebestoimost                   *Float   `xml:"Себестоимость" json:"Себестоимость,omitempty"`
	SeriinyiNomer                  *String  `xml:"СерийныйНомер" json:"СерийныйНомер,omitempty"`
	Sertifikat                     *String  `xml:"Сертификат" json:"Сертификат,omitempty"`
	SrokGodnosti                   *Time    `xml:"СрокГодности" json:"СрокГодности,omitempty"`
	StranaProiskhozhdeniiaKey      *Guid    `xml:"СтранаПроисхождения_Key" json:"СтранаПроисхождения_Key,omitempty"`
	TovarnaiaGruppaKey             *Guid    `xml:"ТоварнаяГруппа_Key" json:"ТоварнаяГруппа_Key,omitempty"`
	TovarnaiaKategoriiaKey         *Guid    `xml:"ТоварнаяКатегория_Key" json:"ТоварнаяКатегория_Key,omitempty"`
	TovarnaiaPozitsiiaKey          *Guid    `xml:"ТоварнаяПозиция_Key" json:"ТоварнаяПозиция_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid    `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	ObshchiiVesVstavok             *Float   `xml:"ОбщийВесВставок" json:"ОбщийВесВставок,omitempty"`
	DokumentPostupleniiaKey        *Guid    `xml:"ДокументПоступления_Key" json:"ДокументПоступления_Key,omitempty"`
	TsenaPostupleniia              *Float   `xml:"ЦенаПоступления" json:"ЦенаПоступления,omitempty"`
	SummaPostupleniia              *Float   `xml:"СуммаПоступления" json:"СуммаПоступления,omitempty"`
	RetailCost                     *Float   `xml:"РозничнаяЦена" json:"РозничнаяЦена,omitempty"`
}

type ReturnToManufacturing struct {
	Key                           Guid                                                   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                   *String                                                `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                        *String                                                `xml:"Number" json:"Number,omitempty"`
	Date                          *Time                                                  `xml:"Date" json:"Date,omitempty"`
	DeletionMark                  *Boolean                                               `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                        *Boolean                                               `xml:"Posted" json:"Posted,omitempty"`
	ValiutaDokumentaKey           *Guid                                                  `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	Weight                        *Float                                                 `xml:"ВесДокумента" json:"ВесДокумента,omitempty"`
	DogovorKontragentaKey         *Guid                                                  `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie             *String                                                `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	KolichestvoDokumenta          *Int                                                   `xml:"КоличествоДокумента" json:"КоличествоДокумента,omitempty"`
	Comment                       *String                                                `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey                 *Guid                                                  `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	KratnostVzaimoraschetov       *Int                                                   `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov           *Float                                                 `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	MaterialVProizvodstve         *String                                                `xml:"МатериалВПроизводстве" json:"МатериалВПроизводстве,omitempty"`
	OrganizatsiiaKey              *Guid                                                  `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey              *Guid                                                  `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey              *Guid                                                  `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	ProektKey                     *Guid                                                  `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	Sdelka                        *String                                                `xml:"Сделка" json:"Сделка,omitempty"`
	DepartmentKey                 *Guid                                                  `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	SummaVkliuchaetNDS            *Boolean                                               `xml:"СуммаВключаетНДС" json:"СуммаВключаетНДС,omitempty"`
	SumOfDocument                 *Float                                                 `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	TipDokumenta                  *String                                                `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	TipTsenKey                    *Guid                                                  `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
	UchityvatVesVstavok           *Boolean                                               `xml:"УчитыватьВесВставок" json:"УчитыватьВесВставок,omitempty"`
	UchityvatNDS                  *Boolean                                               `xml:"УчитыватьНДС" json:"УчитыватьНДС,omitempty"`
	KhoziaistvennaiaOperatsiiaKey *Guid                                                  `xml:"ХозяйственнаяОперация_Key" json:"ХозяйственнаяОперация_Key,omitempty"`
	SobstvennoeProizvodstvo       *Boolean                                               `xml:"СобственноеПроизводство" json:"СобственноеПроизводство,omitempty"`
	ProizvodstvennyiUchastokKey   *Guid                                                  `xml:"ПроизводственныйУчасток_Key" json:"ПроизводственныйУчасток_Key,omitempty"`
	OpisanieDefektov              *String                                                `xml:"ОписаниеДефектов" json:"ОписаниеДефектов,omitempty"`
	RuchnoiUchetVesaVstavok       *Boolean                                               `xml:"РучнойУчетВесаВставок" json:"РучнойУчетВесаВставок,omitempty"`
	Goods                         *[]DocumentVozvratProduktsiiVProizvodstvoTovaryRowType `xml:"Товары" json:"Товары,omitempty"`
	DokumentOsnovanieType         *String                                                `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
	SdelkaType                    *String                                                `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

func (entity ReturnToManufacturing) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity ReturnToManufacturing) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentVozvratProduktsiiVProizvodstvoTovary struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	ZakazKlientaKey                *Guid   `xml:"ЗаказКлиента_Key" json:"ЗаказКлиента_Key,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	DepartmentKey                  *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	StavkaNDS                      *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                       *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float  `xml:"Цена" json:"Цена,omitempty"`
	StoimostRabot                  *Float  `xml:"СтоимостьРабот" json:"СтоимостьРабот,omitempty"`
	StoimostVstavok                *Float  `xml:"СтоимостьВставок" json:"СтоимостьВставок,omitempty"`
	StoimostMetalla                *Float  `xml:"СтоимостьМеталла" json:"СтоимостьМеталла,omitempty"`
	SummaNDSVstavok                *Float  `xml:"СуммаНДСВставок" json:"СуммаНДСВставок,omitempty"`
	SummaNDSMetalla                *Float  `xml:"СуммаНДСМеталла" json:"СуммаНДСМеталла,omitempty"`
	SummaNDSRabot                  *Float  `xml:"СуммаНДСРабот" json:"СуммаНДСРабот,omitempty"`
	DefektKey                      *Guid   `xml:"Дефект_Key" json:"Дефект_Key,omitempty"`
	VesVstavok                     *Float  `xml:"ВесВставок" json:"ВесВставок,omitempty"`
}

type CatalogNomeraGTD struct {
	Key          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion  *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Code         *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Comment      *String  `xml:"Комментарий" json:"Комментарий,omitempty"`
}

type CatalogNastroikiRabochegoMestaPolzovatelia struct {
	Key          Guid                                                          `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion  *String                                                       `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description  *String                                                       `xml:"Description" json:"Description,omitempty"`
	Code         *String                                                       `xml:"Code" json:"Code,omitempty"`
	DeletionMark *Boolean                                                      `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Nastroiki    *[]CatalogNastroikiRabochegoMestaPolzovateliaNastroikiRowType `xml:"Настройки" json:"Настройки,omitempty"`
}

type CatalogNastroikiRabochegoMestaPolzovateliaNastroiki struct {
	Key                        Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                 Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Dostupnost                 *Boolean `xml:"Доступность" json:"Доступность,omitempty"`
	DostupnostPechati          *Boolean `xml:"ДоступностьПечати" json:"ДоступностьПечати,omitempty"`
	DostupnostRedaktirovaniia  *Boolean `xml:"ДоступностьРедактирования" json:"ДоступностьРедактирования,omitempty"`
	DostupnostVersionirovaniia *Boolean `xml:"ДоступностьВерсионирования" json:"ДоступностьВерсионирования,omitempty"`
	PutKElementuFormy          *String  `xml:"ПутьКЭлементуФормы" json:"ПутьКЭлементуФормы,omitempty"`
	TipObieekta                *String  `xml:"ТипОбъекта" json:"ТипОбъекта,omitempty"`
	ElementFormyRabochegoMesta *String  `xml:"ЭлементФормыРабочегоМеста" json:"ЭлементФормыРабочегоМеста,omitempty"`
}

type CatalogsmsShablony struct {
	Key          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion  *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description  *String  `xml:"Description" json:"Description,omitempty"`
	Code         *String  `xml:"Code" json:"Code,omitempty"`
	ParentKey    *Guid    `xml:"Parent_Key" json:"Parent_Key,omitempty"`
	IsFolder     *Boolean `xml:"IsFolder" json:"IsFolder,omitempty"`
	DeletionMark *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Soderzhanie  *String  `xml:"Содержание" json:"Содержание,omitempty"`
}

type WriteOff struct {
	Key                                Guid                                         `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                        *String                                      `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                             *String                                      `xml:"Number" json:"Number,omitempty"`
	Date                               *Time                                        `xml:"Date" json:"Date,omitempty"`
	DeletionMark                       *Boolean                                     `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                             *Boolean                                     `xml:"Posted" json:"Posted,omitempty"`
	Weight                             *Float                                       `xml:"ВесДокумента" json:"ВесДокумента,omitempty"`
	DokumentOsnovanie                  *String                                      `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	DokumentSozdanVIuTD                *Boolean                                     `xml:"ДокументСозданВЮТД" json:"ДокументСозданВЮТД,omitempty"`
	InventarizatsiiaTovarovNaSkladeKey *Guid                                        `xml:"ИнвентаризацияТоваровНаСкладе_Key" json:"ИнвентаризацияТоваровНаСкладе_Key,omitempty"`
	KolichestvoDokumenta               *Int                                         `xml:"КоличествоДокумента" json:"КоличествоДокумента,omitempty"`
	Comment                            *String                                      `xml:"Комментарий" json:"Комментарий,omitempty"`
	OrganizatsiiaKey                   *Guid                                        `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	Osnovanie                          *String                                      `xml:"Основание" json:"Основание,omitempty"`
	OtvetstvennyiKey                   *Guid                                        `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey                   *Guid                                        `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	DepartmentKey                      *Guid                                        `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	SumOfDocument                      *Float                                       `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	TipDokumenta                       *String                                      `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	KhoziaistvennaiaOperatsiiaKey      *Guid                                        `xml:"ХозяйственнаяОперация_Key" json:"ХозяйственнаяОперация_Key,omitempty"`
	Goods                              *[]DocumentSpisanieTovarovTovaryRowType      `xml:"Товары" json:"Товары,omitempty"`
	Sertifikaty                        *[]DocumentSpisanieTovarovSertifikatyRowType `xml:"Сертификаты" json:"Сертификаты,omitempty"`
	DokumentOsnovanieType              *String                                      `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
}

func (entity WriteOff) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity WriteOff) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentSpisanieTovarovTovary struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	DokumentRezerva                *String `xml:"ДокументРезерва" json:"ДокументРезерва,omitempty"`
	KachestvoKey                   *Guid   `xml:"Качество_Key" json:"Качество_Key,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	Sum                            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float  `xml:"Цена" json:"Цена,omitempty"`
	OrderKey                       *Guid   `xml:"КлючПродажи_Key" json:"КлючПродажи_Key,omitempty"`
	SkidkaNatsenkaKey              *Guid   `xml:"СкидкаНаценка_Key" json:"СкидкаНаценка_Key,omitempty"`
	DokumentRezervaType            *String `xml:"ДокументРезерва_Type" json:"ДокументРезерва_Type,omitempty"`
}

type DocumentSpisanieTovarovSertifikaty struct {
	Key           Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber    Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SertifikatKey *Guid  `xml:"Сертификат_Key" json:"Сертификат_Key,omitempty"`
	Sum           *Float `xml:"Сумма" json:"Сумма,omitempty"`
}

type DocumentsmsSoobshchenie struct {
	Key                            Guid                                         `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                    *String                                      `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                         *String                                      `xml:"Number" json:"Number,omitempty"`
	Date                           *Time                                        `xml:"Date" json:"Date,omitempty"`
	DeletionMark                   *Boolean                                     `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                         *Boolean                                     `xml:"Posted" json:"Posted,omitempty"`
	AvtorKey                       *Guid                                        `xml:"Автор_Key" json:"Автор_Key,omitempty"`
	AvtotekstBulevo                *Boolean                                     `xml:"АвтотекстБулево" json:"АвтотекстБулево,omitempty"`
	Aktualnost                     *Time                                        `xml:"Актуальность" json:"Актуальность,omitempty"`
	Comment                        *String                                      `xml:"Комментарий" json:"Комментарий,omitempty"`
	KonetsPeriodaZapreta           *Time                                        `xml:"КонецПериодаЗапрета" json:"КонецПериодаЗапрета,omitempty"`
	NachaloOtpravki                *Time                                        `xml:"НачалоОтправки" json:"НачалоОтправки,omitempty"`
	NachaloPeriodaZapreta          *Time                                        `xml:"НачалоПериодаЗапрета" json:"НачалоПериодаЗапрета,omitempty"`
	NeOtpravliatSMS                *Boolean                                     `xml:"НеОтправлятьSMS" json:"НеОтправлятьSMS,omitempty"`
	NomerOtpravitelia              *String                                      `xml:"НомерОтправителя" json:"НомерОтправителя,omitempty"`
	RavnomernaiaRassylka           *Boolean                                     `xml:"РавномернаяРассылка" json:"РавномернаяРассылка,omitempty"`
	SpisokPoluchatelei             *String                                      `xml:"СписокПолучателей" json:"СписокПолучателей,omitempty"`
	Status                         *String                                      `xml:"Статус" json:"Статус,omitempty"`
	StatusStrokoi                  *String                                      `xml:"СтатусСтрокой" json:"СтатусСтрокой,omitempty"`
	TekstSoobshcheniia             *String                                      `xml:"ТекстСообщения" json:"ТекстСообщения,omitempty"`
	TipSoobshcheniia               *String                                      `xml:"ТипСообщения" json:"ТипСообщения,omitempty"`
	Transliteratsiia               *Boolean                                     `xml:"Транслитерация" json:"Транслитерация,omitempty"`
	FlagAktualnost                 *Boolean                                     `xml:"ФлагАктуальность" json:"ФлагАктуальность,omitempty"`
	NastroikiZapolneniiaBase64Data *Binary                                      `xml:"НастройкиЗаполнения_Base64Data" json:"НастройкиЗаполнения_Base64Data,omitempty"`
	Poluchateli                    *[]DocumentsmsSoobshcheniePoluchateliRowType `xml:"Получатели" json:"Получатели,omitempty"`
	NastroikiZapolneniiaType       *String                                      `xml:"НастройкиЗаполнения_Type" json:"НастройкиЗаполнения_Type,omitempty"`
	NastroikiZapolneniia           *Binary                                      `xml:"НастройкиЗаполнения" json:"НастройкиЗаполнения,omitempty"`
}

func (entity DocumentsmsSoobshchenie) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentsmsSoobshchenie) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentsmsSoobshcheniePoluchateli struct {
	Key                Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber         Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Kontragent         *String `xml:"Контрагент" json:"Контрагент,omitempty"`
	NomerTelefona      *String `xml:"НомерТелефона" json:"НомерТелефона,omitempty"`
	GUID               *String `xml:"GUID" json:"GUID,omitempty"`
	TekstSoobshcheniia *String `xml:"ТекстСообщения" json:"ТекстСообщения,omitempty"`
	DataZaversheniia   *Time   `xml:"ДатаЗавершения" json:"ДатаЗавершения,omitempty"`
	Millisekunda       *Int    `xml:"Миллисекунда" json:"Миллисекунда,omitempty"`
	Status             *String `xml:"Статус" json:"Статус,omitempty"`
	OpisanieOshibki    *String `xml:"ОписаниеОшибки" json:"ОписаниеОшибки,omitempty"`
	MemberCardKey      *Guid   `xml:"ДисконтнаяКарта_Key" json:"ДисконтнаяКарта_Key,omitempty"`
}

type DocumentOplataOtPokupateliaPlatezhnoiKartoi struct {
	Key                            Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                    *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                         *String  `xml:"Number" json:"Number,omitempty"`
	Date                           *Time    `xml:"Date" json:"Date,omitempty"`
	DeletionMark                   *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                         *Boolean `xml:"Posted" json:"Posted,omitempty"`
	OrganizatsiiaKey               *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DokumentOsnovanie              *String  `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	KontragentKey                  *Guid    `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	DogovorKontragentaKey          *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	OtvetstvennyiKey               *Guid    `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	DokumentSozdanVIuTD            *Boolean `xml:"ДокументСозданВЮТД" json:"ДокументСозданВЮТД,omitempty"`
	KassaKKMKey                    *Guid    `xml:"КассаККМ_Key" json:"КассаККМ_Key,omitempty"`
	Comment                        *String  `xml:"Комментарий" json:"Комментарий,omitempty"`
	NumberKKT                      *Int     `xml:"НомерЧекаККМ" json:"НомерЧекаККМ,omitempty"`
	ProbitChekNaKKT                *Boolean `xml:"ПробитЧекНаККТ" json:"ПробитЧекНаККТ,omitempty"`
	GungNumber                     *Int     `xml:"НомерСменыККМ" json:"НомерСменыККМ,omitempty"`
	ProtsentTorgovoiUstupki        *Float   `xml:"ПроцентТорговойУступки" json:"ПроцентТорговойУступки,omitempty"`
	SumOfDocument                  *Float   `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	SummaTorgovoiUstupki           *Float   `xml:"СуммаТорговойУступки" json:"СуммаТорговойУступки,omitempty"`
	Khesh                          *String  `xml:"Хэш" json:"Хэш,omitempty"`
	Poslednie4                     *String  `xml:"Последние4" json:"Последние4,omitempty"`
	KodRRN                         *String  `xml:"КодRRN" json:"КодRRN,omitempty"`
	Identifikator                  *String  `xml:"Идентификатор" json:"Идентификатор,omitempty"`
	TransactionId                  *String  `xml:"TransactionId" json:"TransactionId,omitempty"`
	TipSistemyNalogooblozheniiaKey *Guid    `xml:"ТипСистемыНалогообложения_Key" json:"ТипСистемыНалогообложения_Key,omitempty"`
	VidOplatyKey                   *Guid    `xml:"ВидОплаты_Key" json:"ВидОплаты_Key,omitempty"`
	StavkaNDS                      *String  `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	SummaNDS                       *Float   `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	OperationType                  *String  `xml:"ВидОперации" json:"ВидОперации,omitempty"`
	Pochta                         *String  `xml:"Почта" json:"Почта,omitempty"`
	Telefon                        *String  `xml:"Телефон" json:"Телефон,omitempty"`
	TypeOfMovingMoneyKey           *Guid    `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	ProektKey                      *Guid    `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	NastroikaRMKKey                *Guid    `xml:"НастройкаРМК_Key" json:"НастройкаРМК_Key,omitempty"`
	BDataDokumenta                 *Time    `xml:"Б_ДатаДокумента" json:"Б_ДатаДокумента,omitempty"`
	BIdentifikator                 *String  `xml:"Б_Идентификатор" json:"Б_Идентификатор,omitempty"`
	BNomerVersii                   *String  `xml:"Б_НомерВерсии" json:"Б_НомерВерсии,omitempty"`
	DokumentOsnovanieType          *String  `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
}

func (entity DocumentOplataOtPokupateliaPlatezhnoiKartoi) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentOplataOtPokupateliaPlatezhnoiKartoi) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type CatalogDragotsennyeKamni struct {
	Key                 Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion         *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description         *String  `xml:"Description" json:"Description,omitempty"`
	Code                *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark        *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	VidKamniaKey        *Guid    `xml:"ВидКамня_Key" json:"ВидКамня_Key,omitempty"`
	GruppaDefekta       *Boolean `xml:"ГруппаДефекта" json:"ГруппаДефекта,omitempty"`
	GruppaTsveta        *Boolean `xml:"ГруппаЦвета" json:"ГруппаЦвета,omitempty"`
	KratkoeNaimenovanie *String  `xml:"КраткоеНаименование" json:"КраткоеНаименование,omitempty"`
	Rassev              *Boolean `xml:"Рассев" json:"Рассев,omitempty"`
	RaschetTsenyZaVes   *Boolean `xml:"РасчетЦеныЗаВес" json:"РасчетЦеныЗаВес,omitempty"`
	UchetVKaratakh      *Boolean `xml:"УчетВКаратах" json:"УчетВКаратах,omitempty"`
	Tsvet               *Boolean `xml:"Цвет" json:"Цвет,omitempty"`
	BIdentifikator      *String  `xml:"Б_Идентификатор" json:"Б_Идентификатор,omitempty"`
}

type CatalogKalendariPlanirovaniiaProdazh struct {
	Key                            Guid                                                    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                    *String                                                 `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                    *String                                                 `xml:"Description" json:"Description,omitempty"`
	Code                           *String                                                 `xml:"Code" json:"Code,omitempty"`
	DeletionMark                   *Boolean                                                `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	ShablonZapolneniiaKey          *Guid                                                   `xml:"ШаблонЗаполнения_Key" json:"ШаблонЗаполнения_Key,omitempty"`
	NomerGodaPlanirovaniia         *Int                                                    `xml:"НомерГодаПланирования" json:"НомерГодаПланирования,omitempty"`
	NastroikiZapolneniiaBase64Data *Binary                                                 `xml:"НастройкиЗаполнения_Base64Data" json:"НастройкиЗаполнения_Base64Data,omitempty"`
	KUPoDniam                      *[]CatalogKalendariPlanirovaniiaProdazhKUPoDniamRowType `xml:"КУПоДням" json:"КУПоДням,omitempty"`
	Salony                         *[]CatalogKalendariPlanirovaniiaProdazhSalonyRowType    `xml:"Салоны" json:"Салоны,omitempty"`
	NastroikiZapolneniiaType       *String                                                 `xml:"НастройкиЗаполнения_Type" json:"НастройкиЗаполнения_Type,omitempty"`
	NastroikiZapolneniia           *Binary                                                 `xml:"НастройкиЗаполнения" json:"НастройкиЗаполнения,omitempty"`
}

type CatalogKalendariPlanirovaniiaProdazhKUPoDniam struct {
	Key        Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	DenGoda    *Time  `xml:"ДеньГода" json:"ДеньГода,omitempty"`
	KU         *Float `xml:"КУ" json:"КУ,omitempty"`
}

type CatalogKalendariPlanirovaniiaProdazhSalony struct {
	Key        Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	SalonKey   *Guid `xml:"Салон_Key" json:"Салон_Key,omitempty"`
}

type CatalogKontaktnyeLitsa struct {
	Key                                       Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                               *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                               *String  `xml:"Description" json:"Description,omitempty"`
	Code                                      *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark                              *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	VidKontaktnogoLitsa                       *String  `xml:"ВидКонтактногоЛица" json:"ВидКонтактногоЛица,omitempty"`
	DataRozhdeniia                            *Time    `xml:"ДатаРождения" json:"ДатаРождения,omitempty"`
	Dolzhnost                                 *String  `xml:"Должность" json:"Должность,omitempty"`
	Imia                                      *String  `xml:"Имя" json:"Имя,omitempty"`
	KolichestvoDneiDoNapominaniia             *Int     `xml:"КоличествоДнейДоНапоминания" json:"КоличествоДнейДоНапоминания,omitempty"`
	KontragentDliaOgranicheniiaPravDostupaKey *Guid    `xml:"КонтрагентДляОграниченияПравДоступа_Key" json:"КонтрагентДляОграниченияПравДоступа_Key,omitempty"`
	NapominatODneRozhdeniia                   *Boolean `xml:"НапоминатьОДнеРождения" json:"НапоминатьОДнеРождения,omitempty"`
	ObieektVladelets                          *String  `xml:"ОбъектВладелец" json:"ОбъектВладелец,omitempty"`
	Opisanie                                  *String  `xml:"Описание" json:"Описание,omitempty"`
	Otchestvo                                 *String  `xml:"Отчество" json:"Отчество,omitempty"`
	PolzovatelDliaOgranicheniiaPravDostupaKey *Guid    `xml:"ПользовательДляОграниченияПравДоступа_Key" json:"ПользовательДляОграниченияПравДоступа_Key,omitempty"`
	RolKey                                    *Guid    `xml:"Роль_Key" json:"Роль_Key,omitempty"`
	Familiia                                  *String  `xml:"Фамилия" json:"Фамилия,omitempty"`
	ObieektVladeletsType                      *String  `xml:"ОбъектВладелец_Type" json:"ОбъектВладелец_Type,omitempty"`
}

type CatalogFizicheskieLitsa struct {
	Key                     Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion             *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description             *String  `xml:"Description" json:"Description,omitempty"`
	Code                    *String  `xml:"Code" json:"Code,omitempty"`
	ParentKey               *Guid    `xml:"Parent_Key" json:"Parent_Key,omitempty"`
	IsFolder                *Boolean `xml:"IsFolder" json:"IsFolder,omitempty"`
	DeletionMark            *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	DataRozhdeniia          *Time    `xml:"ДатаРождения" json:"ДатаРождения,omitempty"`
	Comment                 *String  `xml:"Комментарий" json:"Комментарий,omitempty"`
	OsnovnoeIzobrazhenieKey *Guid    `xml:"ОсновноеИзображение_Key" json:"ОсновноеИзображение_Key,omitempty"`
	Pol                     *String  `xml:"Пол" json:"Пол,omitempty"`
	Sotrudnik               *Boolean `xml:"Сотрудник" json:"Сотрудник,omitempty"`
	MagazinKey              *Guid    `xml:"Магазин_Key" json:"Магазин_Key,omitempty"`
	Kurer                   *Boolean `xml:"Курьер" json:"Курьер,omitempty"`
	NastroikaDliaRabotyKey  *Guid    `xml:"НастройкаДляРаботы_Key" json:"НастройкаДляРаботы_Key,omitempty"`
	INN                     *String  `xml:"ИНН" json:"ИНН,omitempty"`
	BIdentifikator          *String  `xml:"Б_Идентификатор" json:"Б_Идентификатор,omitempty"`
	BNomerVersii            *String  `xml:"Б_НомерВерсии" json:"Б_НомерВерсии,omitempty"`
}

type CatalogTipovyeAnkety struct {
	Key                         Guid                                        `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                 *String                                     `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                 *String                                     `xml:"Description" json:"Description,omitempty"`
	Code                        *String                                     `xml:"Code" json:"Code,omitempty"`
	ParentKey                   *Guid                                       `xml:"Parent_Key" json:"Parent_Key,omitempty"`
	IsFolder                    *Boolean                                    `xml:"IsFolder" json:"IsFolder,omitempty"`
	DeletionMark                *Boolean                                    `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Adresnaia                   *Boolean                                    `xml:"Адресная" json:"Адресная,omitempty"`
	VidSpravochnikaDliaZagruzki *String                                     `xml:"ВидСправочникаДляЗагрузки" json:"ВидСправочникаДляЗагрузки,omitempty"`
	Vstuplenie                  *String                                     `xml:"Вступление" json:"Вступление,omitempty"`
	ZagruzhatObieekty           *Boolean                                    `xml:"ЗагружатьОбъекты" json:"ЗагружатьОбъекты,omitempty"`
	MaketAnketyBase64Data       *Binary                                     `xml:"МакетАнкеты_Base64Data" json:"МакетАнкеты_Base64Data,omitempty"`
	NaimenovanieAnkety          *String                                     `xml:"НаименованиеАнкеты" json:"НаименованиеАнкеты,omitempty"`
	VoprosyAnkety               *[]CatalogTipovyeAnketyVoprosyAnketyRowType `xml:"ВопросыАнкеты" json:"ВопросыАнкеты,omitempty"`
	MaketAnketyType             *String                                     `xml:"МакетАнкеты_Type" json:"МакетАнкеты_Type,omitempty"`
	MaketAnkety                 *Binary                                     `xml:"МакетАнкеты" json:"МакетАнкеты,omitempty"`
}

type CatalogTipovyeAnketyVoprosyAnkety struct {
	Key        Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	VoprosKey  *Guid `xml:"Вопрос_Key" json:"Вопрос_Key,omitempty"`
	RazdelKey  *Guid `xml:"Раздел_Key" json:"Раздел_Key,omitempty"`
}

type DocumentNachislenieSpisanieBonusov struct {
	Key                            Guid                                                        `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                    *String                                                     `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                         *String                                                     `xml:"Number" json:"Number,omitempty"`
	Date                           *Time                                                       `xml:"Date" json:"Date,omitempty"`
	DeletionMark                   *Boolean                                                    `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                         *Boolean                                                    `xml:"Posted" json:"Posted,omitempty"`
	Comment                        *String                                                     `xml:"Комментарий" json:"Комментарий,omitempty"`
	OtvetstvennyiKey               *Guid                                                       `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	NastroikiZapolneniiaBase64Data *Binary                                                     `xml:"НастройкиЗаполнения_Base64Data" json:"НастройкиЗаполнения_Base64Data,omitempty"`
	DataNachisleniiaBonusov        *Time                                                       `xml:"ДатаНачисленияБонусов" json:"ДатаНачисленияБонусов,omitempty"`
	VremmennyeBonusy               *Boolean                                                    `xml:"ВремменныеБонусы" json:"ВремменныеБонусы,omitempty"`
	DataSpisaniiaBonusov           *Time                                                       `xml:"ДатаСписанияБонусов" json:"ДатаСписанияБонусов,omitempty"`
	DokumentSozdanVIuTD            *Boolean                                                    `xml:"ДокументСозданВЮТД" json:"ДокументСозданВЮТД,omitempty"`
	DiskontnyeKarty                *[]DocumentNachislenieSpisanieBonusovDiskontnyeKartyRowType `xml:"ДисконтныеКарты" json:"ДисконтныеКарты,omitempty"`
	NastroikiZapolneniiaType       *String                                                     `xml:"НастройкиЗаполнения_Type" json:"НастройкиЗаполнения_Type,omitempty"`
	NastroikiZapolneniia           *Binary                                                     `xml:"НастройкиЗаполнения" json:"НастройкиЗаполнения,omitempty"`
}

func (entity DocumentNachislenieSpisanieBonusov) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentNachislenieSpisanieBonusov) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentNachislenieSpisanieBonusovDiskontnyeKarty struct {
	Key                     Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber              Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	MemberCardKey           *Guid `xml:"ДисконтнаяКарта_Key" json:"ДисконтнаяКарта_Key,omitempty"`
	SummaBonusov            *Int  `xml:"СуммаБонусов" json:"СуммаБонусов,omitempty"`
	TekushchaiaSummaBonusov *Int  `xml:"ТекущаяСуммаБонусов" json:"ТекущаяСуммаБонусов,omitempty"`
}

type Type struct {
	Key               Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion       *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description       *String  `xml:"Description" json:"Description,omitempty"`
	Code              *String  `xml:"Code" json:"Code,omitempty"`
	ParentKey         *Guid    `xml:"Parent_Key" json:"Parent_Key,omitempty"`
	IsFolder          *Boolean `xml:"IsFolder" json:"IsFolder,omitempty"`
	DeletionMark      *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	EstRazmer         *Boolean `xml:"ЕстьРазмер" json:"ЕстьРазмер,omitempty"`
	NeUchityvatVes    *Boolean `xml:"НеУчитыватьВес" json:"НеУчитыватьВес,omitempty"`
	ProtsentTekhPoter *Float   `xml:"ПроцентТехПотерь" json:"ПроцентТехПотерь,omitempty"`
	BIdentifikator    *String  `xml:"Б_Идентификатор" json:"Б_Идентификатор,omitempty"`
}

type CatalogfmKodyVidovDokumentov struct {
	Key                    Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion            *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description            *String  `xml:"Description" json:"Description,omitempty"`
	Code                   *Int     `xml:"Code" json:"Code,omitempty"`
	DeletionMark           *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	KodTipaDokumenta       *String  `xml:"КодТипаДокумента" json:"КодТипаДокумента,omitempty"`
	TipDokumenta           *String  `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	TipDokumentaVProgramme *String  `xml:"ТипДокументаВПрограмме" json:"ТипДокументаВПрограмме,omitempty"`
}

type DocumentPlatezhnoeTrebovaniePoluchennoe struct {
	Key                              Guid                                                                  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                      *String                                                               `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                           *String                                                               `xml:"Number" json:"Number,omitempty"`
	Date                             *Time                                                                 `xml:"Date" json:"Date,omitempty"`
	DeletionMark                     *Boolean                                                              `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                           *Boolean                                                              `xml:"Posted" json:"Posted,omitempty"`
	ValiutaDokumentaKey              *Guid                                                                 `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	OperationType                    *String                                                               `xml:"ВидОперации" json:"ВидОперации,omitempty"`
	VidPlatezha                      *String                                                               `xml:"ВидПлатежа" json:"ВидПлатежа,omitempty"`
	DataVkhodiashchegoDokumenta      *Time                                                                 `xml:"ДатаВходящегоДокумента" json:"ДатаВходящегоДокумента,omitempty"`
	DataOplaty                       *Time                                                                 `xml:"ДатаОплаты" json:"ДатаОплаты,omitempty"`
	DogovorKontragentaKey            *Guid                                                                 `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie                *String                                                               `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	ZaiavkaNaRaskhodovanieSredstvKey *Guid                                                                 `xml:"ЗаявкаНаРасходованиеСредств_Key" json:"ЗаявкаНаРасходованиеСредств_Key,omitempty"`
	Comment                          *String                                                               `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey                    *Guid                                                                 `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	NaznacheniePlatezha              *String                                                               `xml:"НазначениеПлатежа" json:"НазначениеПлатежа,omitempty"`
	NomerVkhodiashchegoDokumenta     *String                                                               `xml:"НомерВходящегоДокумента" json:"НомерВходящегоДокумента,omitempty"`
	Oplacheno                        *Boolean                                                              `xml:"Оплачено" json:"Оплачено,omitempty"`
	OrganizatsiiaKey                 *Guid                                                                 `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                 *Guid                                                                 `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	OtrazhenoVOperUchete             *Boolean                                                              `xml:"ОтраженоВОперУчете" json:"ОтраженоВОперУчете,omitempty"`
	OcherednostPlatezha              *Int                                                                  `xml:"ОчередностьПлатежа" json:"ОчередностьПлатежа,omitempty"`
	TypeOfMovingMoneyKey             *Guid                                                                 `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SumOfDocument                    *Float                                                                `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	SchetKontragentaKey              *Guid                                                                 `xml:"СчетКонтрагента_Key" json:"СчетКонтрагента_Key,omitempty"`
	SchetOrganizatsiiKey             *Guid                                                                 `xml:"СчетОрганизации_Key" json:"СчетОрганизации_Key,omitempty"`
	TipDokumenta                     *String                                                               `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	ChastichnaiaOplata               *Boolean                                                              `xml:"ЧастичнаяОплата" json:"ЧастичнаяОплата,omitempty"`
	ExtendedPayments                 *[]DocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezhaRowType `xml:"РасшифровкаПлатежа" json:"РасшифровкаПлатежа,omitempty"`
	RekvizityKontragenta             *[]DocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragentaRowType `xml:"РеквизитыКонтрагента" json:"РеквизитыКонтрагента,omitempty"`
	DokumentOsnovanieType            *String                                                               `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
}

func (entity DocumentPlatezhnoeTrebovaniePoluchennoe) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentPlatezhnoeTrebovaniePoluchennoe) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentPlatezhnoeTrebovaniePoluchennoeRasshifrovkaPlatezha struct {
	Key                              Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                       Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	DogovorKontragentaKey            *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentPlanirovaniiaPlatezhaKey *Guid   `xml:"ДокументПланированияПлатежа_Key" json:"ДокументПланированияПлатежа_Key,omitempty"`
	KratnostVzaimoraschetov          *Int    `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov              *Float  `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	KursVzaimoraschetovPlan          *Float  `xml:"КурсВзаиморасчетовПлан" json:"КурсВзаиморасчетовПлан,omitempty"`
	NomerPlatezha                    *Int    `xml:"НомерПлатежа" json:"НомерПлатежа,omitempty"`
	ProektKey                        *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	Sdelka                           *String `xml:"Сделка" json:"Сделка,omitempty"`
	StavkaNDS                        *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	TypeOfMovingMoneyKey             *Guid   `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov             *Float  `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	SummaNDS                         *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	Sum                              *Float  `xml:"СуммаПлатежа" json:"СуммаПлатежа,omitempty"`
	SummaPlatezhaPlan                *Float  `xml:"СуммаПлатежаПлан" json:"СуммаПлатежаПлан,omitempty"`
	SdelkaType                       *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type DocumentPlatezhnoeTrebovaniePoluchennoeRekvizityKontragenta struct {
	Key            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Znachenie      *String `xml:"Значение" json:"Значение,omitempty"`
	Predstavlenie  *String `xml:"Представление" json:"Представление,omitempty"`
	Rekvizit       *String `xml:"Реквизит" json:"Реквизит,omitempty"`
	TipKontragenta *String `xml:"ТипКонтрагента" json:"ТипКонтрагента,omitempty"`
}

type DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstv struct {
	Key                         Guid                                                                                        `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                 *String                                                                                     `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                      *String                                                                                     `xml:"Number" json:"Number,omitempty"`
	Date                        *Time                                                                                       `xml:"Date" json:"Date,omitempty"`
	DeletionMark                *Boolean                                                                                    `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                      *Boolean                                                                                    `xml:"Posted" json:"Posted,omitempty"`
	Comment                     *String                                                                                     `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey               *Guid                                                                                       `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	OtborDataKon                *Time                                                                                       `xml:"ОтборДатаКон" json:"ОтборДатаКон,omitempty"`
	OtborDataNach               *Time                                                                                       `xml:"ОтборДатаНач" json:"ОтборДатаНач,omitempty"`
	OtborKontragent             *Boolean                                                                                    `xml:"ОтборКонтрагент" json:"ОтборКонтрагент,omitempty"`
	OtborOtvetstvennyi          *Boolean                                                                                    `xml:"ОтборОтветственный" json:"ОтборОтветственный,omitempty"`
	OtborTsFO                   *Boolean                                                                                    `xml:"ОтборЦФО" json:"ОтборЦФО,omitempty"`
	OtvetstvennyiKey            *Guid                                                                                       `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	OtvetstvennyiPostuplenieKey *Guid                                                                                       `xml:"ОтветственныйПоступление_Key" json:"ОтветственныйПоступление_Key,omitempty"`
	Sostoianie                  *String                                                                                     `xml:"Состояние" json:"Состояние,omitempty"`
	TipDokumenta                *String                                                                                     `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	TsFOKey                     *Guid                                                                                       `xml:"ЦФО_Key" json:"ЦФО_Key,omitempty"`
	PlaniruemyePostupleniiaDS   *[]DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDSRowType `xml:"ПланируемыеПоступленияДС" json:"ПланируемыеПоступленияДС,omitempty"`
}

func (entity DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstv) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstv) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentZakrytiePlaniruemykhPostupleniiDenezhnykhSredstvPlaniruemyePostupleniiaDS struct {
	Key                      Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber               Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	ValiutaPostuplenieKey    *Guid  `xml:"ВалютаПоступление_Key" json:"ВалютаПоступление_Key,omitempty"`
	DokumentPlanirovaniiaKey *Guid  `xml:"ДокументПланирования_Key" json:"ДокументПланирования_Key,omitempty"`
	KontragentKey            *Guid  `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	OstatokPostuplenie       *Float `xml:"ОстатокПоступление" json:"ОстатокПоступление,omitempty"`
	OstatokRazmeshchenie     *Float `xml:"ОстатокРазмещение" json:"ОстатокРазмещение,omitempty"`
	OtvetstvennyiKey         *Guid  `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
}

type CatalogRazdelyAnkety struct {
	Key          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion  *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description  *String  `xml:"Description" json:"Description,omitempty"`
	Code         *String  `xml:"Code" json:"Code,omitempty"`
	OwnerKey     *Guid    `xml:"Owner_Key" json:"Owner_Key,omitempty"`
	DeletionMark *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
}

type DocumentOtchetPoFinMonitoringu struct {
	Key                             Guid                                                            `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                     *String                                                         `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                          *String                                                         `xml:"Number" json:"Number,omitempty"`
	Date                            *Time                                                           `xml:"Date" json:"Date,omitempty"`
	DeletionMark                    *Boolean                                                        `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                          *Boolean                                                        `xml:"Posted" json:"Posted,omitempty"`
	OrganizatsiiaKey                *Guid                                                           `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	NomerSoobshcheniia              *Int                                                            `xml:"НомерСообщения" json:"НомерСообщения,omitempty"`
	DataSoobshcheniia               *Time                                                           `xml:"ДатаСообщения" json:"ДатаСообщения,omitempty"`
	VidDokumenta                    *String                                                         `xml:"ВидДокумента" json:"ВидДокумента,omitempty"`
	DokumentOsnovanieKey            *Guid                                                           `xml:"ДокументОснование_Key" json:"ДокументОснование_Key,omitempty"`
	DogovorKontragentaKey           *Guid                                                           `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	KontragentKey                   *Guid                                                           `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	KartochkaKontragentaKey         *Guid                                                           `xml:"КарточкаКонтрагента_Key" json:"КарточкаКонтрагента_Key,omitempty"`
	KartochkaOrganizatsiiKey        *Guid                                                           `xml:"КарточкаОрганизации_Key" json:"КарточкаОрганизации_Key,omitempty"`
	DannyePoOplate                  *Boolean                                                        `xml:"ДанныеПоОплате" json:"ДанныеПоОплате,omitempty"`
	RaschetnyiSchetOrganizatsiiKey  *Guid                                                           `xml:"РасчетныйСчетОрганизации_Key" json:"РасчетныйСчетОрганизации_Key,omitempty"`
	RaschetnyiSchetKontragentaKey   *Guid                                                           `xml:"РасчетныйСчетКонтрагента_Key" json:"РасчетныйСчетКонтрагента_Key,omitempty"`
	DannyePoVozvratam               *Boolean                                                        `xml:"ДанныеПоВозвратам" json:"ДанныеПоВозвратам,omitempty"`
	NomerSoobshcheniiaVTecheniiDnia *String                                                         `xml:"НомерСообщенияВТеченииДня" json:"НомерСообщенияВТеченииДня,omitempty"`
	DokumentyFinMonitoringa         *[]DocumentOtchetPoFinMonitoringuDokumentyFinMonitoringaRowType `xml:"ДокументыФинМониторинга" json:"ДокументыФинМониторинга,omitempty"`
	DannyeDokumenta                 *[]DocumentOtchetPoFinMonitoringuDannyeDokumentaRowType         `xml:"ДанныеДокумента" json:"ДанныеДокумента,omitempty"`
}

func (entity DocumentOtchetPoFinMonitoringu) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentOtchetPoFinMonitoringu) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentOtchetPoFinMonitoringuDokumentyFinMonitoringa struct {
	Key                 Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber          Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	DokumentUcheta      *String `xml:"ДокументУчета" json:"ДокументУчета,omitempty"`
	SummaOtgruzki       *Float  `xml:"СуммаОтгрузки" json:"СуммаОтгрузки,omitempty"`
	SummaOplaty         *Float  `xml:"СуммаОплаты" json:"СуммаОплаты,omitempty"`
	Sum                 *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaVozvrata       *Float  `xml:"СуммаВозврата" json:"СуммаВозврата,omitempty"`
	Comment             *String `xml:"Комментарий" json:"Комментарий,omitempty"`
	KodVidaDokumentaKey *Guid   `xml:"КодВидаДокумента_Key" json:"КодВидаДокумента_Key,omitempty"`
	DokumentUchetaType  *String `xml:"ДокументУчета_Type" json:"ДокументУчета_Type,omitempty"`
}

type DocumentOtchetPoFinMonitoringuDannyeDokumenta struct {
	Key           Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber    Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Kliuch        *String `xml:"Ключ" json:"Ключ,omitempty"`
	Znachenie     *String `xml:"Значение" json:"Значение,omitempty"`
	ZnachenieType *String `xml:"Значение_Type" json:"Значение_Type,omitempty"`
}

type CatalogKliuchiAnalitikiUchetaNomenklatury struct {
	Key              Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion      *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description      *String  `xml:"Description" json:"Description,omitempty"`
	Code             *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark     *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	TipNomenklatury  *String  `xml:"ТипНоменклатуры" json:"ТипНоменклатуры,omitempty"`
	ProbeKey         *Guid    `xml:"Проба_Key" json:"Проба_Key,omitempty"`
	TypeKey          *Guid    `xml:"ТипИзделия_Key" json:"ТипИзделия_Key,omitempty"`
	SizeKey          *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	KamenKey         *Guid    `xml:"Камень_Key" json:"Камень_Key,omitempty"`
	RassevKey        *Guid    `xml:"Рассев_Key" json:"Рассев_Key,omitempty"`
	FormaOgrankiKey  *Guid    `xml:"ФормаОгранки_Key" json:"ФормаОгранки_Key,omitempty"`
	TsvetKamniaKey   *Guid    `xml:"ЦветКамня_Key" json:"ЦветКамня_Key,omitempty"`
	GruppaTsvetaKey  *Guid    `xml:"ГруппаЦвета_Key" json:"ГруппаЦвета_Key,omitempty"`
	GruppaDefektaKey *Guid    `xml:"ГруппаДефекта_Key" json:"ГруппаДефекта_Key,omitempty"`
	Razmer1          *Float   `xml:"Размер1" json:"Размер1,omitempty"`
	Razmer2          *Float   `xml:"Размер2" json:"Размер2,omitempty"`
	Razmer3          *Float   `xml:"Размер3" json:"Размер3,omitempty"`
	MID              *String  `xml:"Артикул" json:"Артикул,omitempty"`
}

type CatalogVersiiFailov struct {
	Key                           Guid                                            `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                   *String                                         `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                   *String                                         `xml:"Description" json:"Description,omitempty"`
	Code                          *String                                         `xml:"Code" json:"Code,omitempty"`
	OwnerKey                      *Guid                                           `xml:"Owner_Key" json:"Owner_Key,omitempty"`
	DeletionMark                  *Boolean                                        `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	AvtorKey                      *Guid                                           `xml:"Автор_Key" json:"Автор_Key,omitempty"`
	DataModifikatsiiUniversalnaia *Time                                           `xml:"ДатаМодификацииУниверсальная" json:"ДатаМодификацииУниверсальная,omitempty"`
	DataModifikatsiiFaila         *Time                                           `xml:"ДатаМодификацииФайла" json:"ДатаМодификацииФайла,omitempty"`
	DataSozdaniia                 *Time                                           `xml:"ДатаСоздания" json:"ДатаСоздания,omitempty"`
	Zashifrovan                   *Boolean                                        `xml:"Зашифрован" json:"Зашифрован,omitempty"`
	IndeksKartinki                *Int                                            `xml:"ИндексКартинки" json:"ИндексКартинки,omitempty"`
	Comment                       *String                                         `xml:"Комментарий" json:"Комментарий,omitempty"`
	NomerVersii                   *Int                                            `xml:"НомерВерсии" json:"НомерВерсии,omitempty"`
	PodpisanEP                    *Boolean                                        `xml:"ПодписанЭП" json:"ПодписанЭП,omitempty"`
	PolnoeNaimenovanie            *String                                         `xml:"ПолноеНаименование" json:"ПолноеНаименование,omitempty"`
	PutKFailu                     *String                                         `xml:"ПутьКФайлу" json:"ПутьКФайлу,omitempty"`
	Razmer                        *Int                                            `xml:"Размер" json:"Размер,omitempty"`
	Rasshirenie                   *String                                         `xml:"Расширение" json:"Расширение,omitempty"`
	RoditelskaiaVersiiaKey        *Guid                                           `xml:"РодительскаяВерсия_Key" json:"РодительскаяВерсия_Key,omitempty"`
	StatusIzvlecheniiaTeksta      *String                                         `xml:"СтатусИзвлеченияТекста" json:"СтатусИзвлеченияТекста,omitempty"`
	TekstKhranilishcheBase64Data  *Binary                                         `xml:"ТекстХранилище_Base64Data" json:"ТекстХранилище_Base64Data,omitempty"`
	FailKhranilishcheBase64Data   *Binary                                         `xml:"ФайлХранилище_Base64Data" json:"ФайлХранилище_Base64Data,omitempty"`
	TipKhraneniiaFaila            *String                                         `xml:"ТипХраненияФайла" json:"ТипХраненияФайла,omitempty"`
	TomKey                        *Guid                                           `xml:"Том_Key" json:"Том_Key,omitempty"`
	ElektronnyePodpisi            *[]CatalogVersiiFailovElektronnyePodpisiRowType `xml:"ЭлектронныеПодписи" json:"ЭлектронныеПодписи,omitempty"`
	TekstKhranilishcheType        *String                                         `xml:"ТекстХранилище_Type" json:"ТекстХранилище_Type,omitempty"`
	FailKhranilishcheType         *String                                         `xml:"ФайлХранилище_Type" json:"ФайлХранилище_Type,omitempty"`
	TekstKhranilishche            *Binary                                         `xml:"ТекстХранилище" json:"ТекстХранилище,omitempty"`
	FailKhranilishche             *Binary                                         `xml:"ФайлХранилище" json:"ФайлХранилище,omitempty"`
}

type CatalogVersiiFailovElektronnyePodpisi struct {
	Key                    Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber             Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	DataPodpisi            *Time   `xml:"ДатаПодписи" json:"ДатаПодписи,omitempty"`
	ImiaFailaPodpisi       *String `xml:"ИмяФайлаПодписи" json:"ИмяФайлаПодписи,omitempty"`
	Comment                *String `xml:"Комментарий" json:"Комментарий,omitempty"`
	KomuVydanSertifikat    *String `xml:"КомуВыданСертификат" json:"КомуВыданСертификат,omitempty"`
	Otpechatok             *String `xml:"Отпечаток" json:"Отпечаток,omitempty"`
	PodpisBase64Data       *Binary `xml:"Подпись_Base64Data" json:"Подпись_Base64Data,omitempty"`
	UstanovivshiiPodpisKey *Guid   `xml:"УстановившийПодпись_Key" json:"УстановившийПодпись_Key,omitempty"`
	SertifikatBase64Data   *Binary `xml:"Сертификат_Base64Data" json:"Сертификат_Base64Data,omitempty"`
	PodpisType             *String `xml:"Подпись_Type" json:"Подпись_Type,omitempty"`
	SertifikatType         *String `xml:"Сертификат_Type" json:"Сертификат_Type,omitempty"`
	Podpis                 *Binary `xml:"Подпись" json:"Подпись,omitempty"`
	Sertifikat             *Binary `xml:"Сертификат" json:"Сертификат,omitempty"`
}

type DocumentUstanovkaTsenNomenklatury struct {
	Key                                      Guid                                                `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                              *String                                             `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                                   *String                                             `xml:"Number" json:"Number,omitempty"`
	Date                                     *Time                                               `xml:"Date" json:"Date,omitempty"`
	DeletionMark                             *Boolean                                            `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                                   *Boolean                                            `xml:"Posted" json:"Posted,omitempty"`
	VybGruppaKey                             *Guid                                               `xml:"ВыбГруппа_Key" json:"ВыбГруппа_Key,omitempty"`
	DokumentOsnovanie                        *String                                             `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	DokumentSozdanVIuTD                      *Boolean                                            `xml:"ДокументСозданВЮТД" json:"ДокументСозданВЮТД,omitempty"`
	Informatsiia                             *String                                             `xml:"Информация" json:"Информация,omitempty"`
	Comment                                  *String                                             `xml:"Комментарий" json:"Комментарий,omitempty"`
	NeProvoditNulevyeZnacheniia              *Boolean                                            `xml:"НеПроводитьНулевыеЗначения" json:"НеПроводитьНулевыеЗначения,omitempty"`
	OtvetstvennyiKey                         *Guid                                               `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	ParametryOtboraBase64Data                *Binary                                             `xml:"ПараметрыОтбора_Base64Data" json:"ПараметрыОтбора_Base64Data,omitempty"`
	RegistratsiiaTsenPoSegmentamNomenklatury *Boolean                                            `xml:"РегистрацияЦенПоСегментамНоменклатуры" json:"РегистрацияЦенПоСегментамНоменклатуры,omitempty"`
	NastroikiZapolneniiaBase64Data           *Binary                                             `xml:"НастройкиЗаполнения_Base64Data" json:"НастройкиЗаполнения_Base64Data,omitempty"`
	TipyTsen                                 *[]DocumentUstanovkaTsenNomenklaturyTipyTsenRowType `xml:"ТипыЦен" json:"ТипыЦен,omitempty"`
	Goods                                    *[]DocumentUstanovkaTsenNomenklaturyTovaryRowType   `xml:"Товары" json:"Товары,omitempty"`
	DokumentOsnovanieType                    *String                                             `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
	ParametryOtboraType                      *String                                             `xml:"ПараметрыОтбора_Type" json:"ПараметрыОтбора_Type,omitempty"`
	NastroikiZapolneniiaType                 *String                                             `xml:"НастройкиЗаполнения_Type" json:"НастройкиЗаполнения_Type,omitempty"`
	ParametryOtbora                          *Binary                                             `xml:"ПараметрыОтбора" json:"ПараметрыОтбора,omitempty"`
	NastroikiZapolneniia                     *Binary                                             `xml:"НастройкиЗаполнения" json:"НастройкиЗаполнения,omitempty"`
}

func (entity DocumentUstanovkaTsenNomenklatury) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentUstanovkaTsenNomenklatury) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentUstanovkaTsenNomenklaturyTipyTsen struct {
	Key        Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	TipTsenKey *Guid `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
}

type DocumentUstanovkaTsenNomenklaturyTovary struct {
	Key                            Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	ValiutaKey                     *Guid  `xml:"Валюта_Key" json:"Валюта_Key,omitempty"`
	IndeksStrokiTablitsyTsen       *Int   `xml:"ИндексСтрокиТаблицыЦен" json:"ИндексСтрокиТаблицыЦен,omitempty"`
	ItemKey                        *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	ProtsentSkidkiNatsenki         *Float `xml:"ПроцентСкидкиНаценки" json:"ПроцентСкидкиНаценки,omitempty"`
	SizeKey                        *Guid  `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid  `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	TipTsenKey                     *Guid  `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid  `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float `xml:"Цена" json:"Цена,omitempty"`
	SegmentNomenklaturyKey         *Guid  `xml:"СегментНоменклатуры_Key" json:"СегментНоменклатуры_Key,omitempty"`
}

type DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstv struct {
	Key                              Guid                                                                           `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                      *String                                                                        `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                           *String                                                                        `xml:"Number" json:"Number,omitempty"`
	Date                             *Time                                                                          `xml:"Date" json:"Date,omitempty"`
	DeletionMark                     *Boolean                                                                       `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                           *Boolean                                                                       `xml:"Posted" json:"Posted,omitempty"`
	ValiutaDokumentaKey              *Guid                                                                          `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	OperationType                    *String                                                                        `xml:"ВидОперации" json:"ВидОперации,omitempty"`
	DataOplaty                       *Time                                                                          `xml:"ДатаОплаты" json:"ДатаОплаты,omitempty"`
	DogovorKontragentaKey            *Guid                                                                          `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie                *String                                                                        `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	ZaiavkaNaRaskhodovanieSredstvKey *Guid                                                                          `xml:"ЗаявкаНаРасходованиеСредств_Key" json:"ЗаявкаНаРасходованиеСредств_Key,omitempty"`
	Comment                          *String                                                                        `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey                    *Guid                                                                          `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	Oplacheno                        *Boolean                                                                       `xml:"Оплачено" json:"Оплачено,omitempty"`
	OrganizatsiiaKey                 *Guid                                                                          `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                 *Guid                                                                          `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	OtrazhenoVOperUchete             *Boolean                                                                       `xml:"ОтраженоВОперУчете" json:"ОтраженоВОперУчете,omitempty"`
	RaschetnyiDokument               *String                                                                        `xml:"РасчетныйДокумент" json:"РасчетныйДокумент,omitempty"`
	TypeOfMovingMoneyKey             *Guid                                                                          `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SumOfDocument                    *Float                                                                         `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	SchetKontragentaKey              *Guid                                                                          `xml:"СчетКонтрагента_Key" json:"СчетКонтрагента_Key,omitempty"`
	SchetOrganizatsiiKey             *Guid                                                                          `xml:"СчетОрганизации_Key" json:"СчетОрганизации_Key,omitempty"`
	TipDokumenta                     *String                                                                        `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	NomerVkhodiashchegoDokumenta     *String                                                                        `xml:"НомерВходящегоДокумента" json:"НомерВходящегоДокумента,omitempty"`
	DataVkhodiashchegoDokumenta      *Time                                                                          `xml:"ДатаВходящегоДокумента" json:"ДатаВходящегоДокумента,omitempty"`
	PodrazdelenieKey                 *Guid                                                                          `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	ExtendedPayments                 *[]DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezhaRowType `xml:"РасшифровкаПлатежа" json:"РасшифровкаПлатежа,omitempty"`
	RekvizityKontragenta             *[]DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragentaRowType `xml:"РеквизитыКонтрагента" json:"РеквизитыКонтрагента,omitempty"`
	DokumentOsnovanieType            *String                                                                        `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
	RaschetnyiDokumentType           *String                                                                        `xml:"РасчетныйДокумент_Type" json:"РасчетныйДокумент_Type,omitempty"`
}

func (entity DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstv) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstv) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRasshifrovkaPlatezha struct {
	Key                              Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                       Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	DogovorKontragentaKey            *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentPlanirovaniiaPlatezhaKey *Guid   `xml:"ДокументПланированияПлатежа_Key" json:"ДокументПланированияПлатежа_Key,omitempty"`
	KratnostVzaimoraschetov          *Int    `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov              *Float  `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	KursVzaimoraschetovPlan          *Float  `xml:"КурсВзаиморасчетовПлан" json:"КурсВзаиморасчетовПлан,omitempty"`
	ProektKey                        *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	Sdelka                           *String `xml:"Сделка" json:"Сделка,omitempty"`
	StavkaNDS                        *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	TypeOfMovingMoneyKey             *Guid   `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov             *Float  `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	SummaNDS                         *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	Sum                              *Float  `xml:"СуммаПлатежа" json:"СуммаПлатежа,omitempty"`
	SummaPlatezhaPlan                *Float  `xml:"СуммаПлатежаПлан" json:"СуммаПлатежаПлан,omitempty"`
	SdelkaType                       *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type DocumentPlatezhnyiOrderSpisanieDenezhnykhSredstvRekvizityKontragenta struct {
	Key            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Znachenie      *String `xml:"Значение" json:"Значение,omitempty"`
	Predstavlenie  *String `xml:"Представление" json:"Представление,omitempty"`
	Rekvizit       *String `xml:"Реквизит" json:"Реквизит,omitempty"`
	TipKontragenta *String `xml:"ТипКонтрагента" json:"ТипКонтрагента,omitempty"`
}

type DocumentPreiskurantNaSkupku struct {
	Key                         Guid                                       `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                 *String                                    `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                      *String                                    `xml:"Number" json:"Number,omitempty"`
	Date                        *Time                                      `xml:"Date" json:"Date,omitempty"`
	DeletionMark                *Boolean                                   `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                      *Boolean                                   `xml:"Posted" json:"Posted,omitempty"`
	NeProvoditNulevyeZnacheniia *Boolean                                   `xml:"НеПроводитьНулевыеЗначения" json:"НеПроводитьНулевыеЗначения,omitempty"`
	OtvetstvennyiKey            *Guid                                      `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	IspolzovatPriObmene         *Boolean                                   `xml:"ИспользоватьПриОбмене" json:"ИспользоватьПриОбмене,omitempty"`
	Comment                     *String                                    `xml:"Комментарий" json:"Комментарий,omitempty"`
	DokumentSozdanVIuTD         *Boolean                                   `xml:"ДокументСозданВЮТД" json:"ДокументСозданВЮТД,omitempty"`
	DepartmentKey               *Guid                                      `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	Proby                       *[]DocumentPreiskurantNaSkupkuProbyRowType `xml:"Пробы" json:"Пробы,omitempty"`
}

func (entity DocumentPreiskurantNaSkupku) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentPreiskurantNaSkupku) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentPreiskurantNaSkupkuProby struct {
	Key          Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber   Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	ProbeKey     *Guid  `xml:"Проба_Key" json:"Проба_Key,omitempty"`
	TsenaZaGramm *Float `xml:"ЦенаЗаГрамм" json:"ЦенаЗаГрамм,omitempty"`
}

type DocumentPeredachaMaterialovVProizvodstvo struct {
	Key                           Guid                                                     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                   *String                                                  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                        *String                                                  `xml:"Number" json:"Number,omitempty"`
	Date                          *Time                                                    `xml:"Date" json:"Date,omitempty"`
	DeletionMark                  *Boolean                                                 `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                        *Boolean                                                 `xml:"Posted" json:"Posted,omitempty"`
	Weight                        *Float                                                   `xml:"ВесДокумента" json:"ВесДокумента,omitempty"`
	DogovorKontragentaKey         *Guid                                                    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie             *String                                                  `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	KolichestvoDokumenta          *Int                                                     `xml:"КоличествоДокумента" json:"КоличествоДокумента,omitempty"`
	Comment                       *String                                                  `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey                 *Guid                                                    `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	OrganizatsiiaKey              *Guid                                                    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey              *Guid                                                    `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey              *Guid                                                    `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	PoluchaemaiaLigaturaKey       *Guid                                                    `xml:"ПолучаемаяЛигатура_Key" json:"ПолучаемаяЛигатура_Key,omitempty"`
	PoluchaemyiVes                *Float                                                   `xml:"ПолучаемыйВес" json:"ПолучаемыйВес,omitempty"`
	ProektKey                     *Guid                                                    `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	SobstvennoeProizvodstvo       *Boolean                                                 `xml:"СобственноеПроизводство" json:"СобственноеПроизводство,omitempty"`
	DepartmentKey                 *Guid                                                    `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	TipDokumenta                  *String                                                  `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	KhoziaistvennaiaOperatsiiaKey *Guid                                                    `xml:"ХозяйственнаяОперация_Key" json:"ХозяйственнаяОперация_Key,omitempty"`
	ProizvodstvennyiUchastokKey   *Guid                                                    `xml:"ПроизводственныйУчасток_Key" json:"ПроизводственныйУчасток_Key,omitempty"`
	ZagruzhenIzUIuP               *Boolean                                                 `xml:"ЗагруженИзУЮП" json:"ЗагруженИзУЮП,omitempty"`
	Goods                         *[]DocumentPeredachaMaterialovVProizvodstvoTovaryRowType `xml:"Товары" json:"Товары,omitempty"`
	DokumentOsnovanieType         *String                                                  `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
}

func (entity DocumentPeredachaMaterialovVProizvodstvo) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentPeredachaMaterialovVProizvodstvo) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentPeredachaMaterialovVProizvodstvoTovary struct {
	Key                            Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float `xml:"Вес" json:"Вес,omitempty"`
	Quantity                       *Int   `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid  `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid  `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	DepartmentKey                  *Guid  `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid  `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
}

type DocumentVnutrenniiZakaz struct {
	Key                   Guid                                    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion           *String                                 `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                *String                                 `xml:"Number" json:"Number,omitempty"`
	Date                  *Time                                   `xml:"Date" json:"Date,omitempty"`
	DeletionMark          *Boolean                                `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                *Boolean                                `xml:"Posted" json:"Posted,omitempty"`
	AvtoRazmeshchenie     *Boolean                                `xml:"АвтоРазмещение" json:"АвтоРазмещение,omitempty"`
	AvtoRezervirovanie    *Boolean                                `xml:"АвтоРезервирование" json:"АвтоРезервирование,omitempty"`
	VidZakaza             *String                                 `xml:"ВидЗаказа" json:"ВидЗаказа,omitempty"`
	VremiaNapominaniia    *Time                                   `xml:"ВремяНапоминания" json:"ВремяНапоминания,omitempty"`
	DataOtgruzki          *Time                                   `xml:"ДатаОтгрузки" json:"ДатаОтгрузки,omitempty"`
	DokumentOsnovanie     *String                                 `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	Zakazchik             *String                                 `xml:"Заказчик" json:"Заказчик,omitempty"`
	Comment               *String                                 `xml:"Комментарий" json:"Комментарий,omitempty"`
	NapomnitOSobytii      *Boolean                                `xml:"НапомнитьОСобытии" json:"НапомнитьОСобытии,omitempty"`
	OrganizatsiiaKey      *Guid                                   `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey      *Guid                                   `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey      *Guid                                   `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	TipDokumenta          *String                                 `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	Goods                 *[]DocumentVnutrenniiZakazTovaryRowType `xml:"Товары" json:"Товары,omitempty"`
	DokumentOsnovanieType *String                                 `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
	ZakazchikType         *String                                 `xml:"Заказчик_Type" json:"Заказчик_Type,omitempty"`
}

func (entity DocumentVnutrenniiZakaz) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentVnutrenniiZakaz) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentVnutrenniiZakazTovary struct {
	Key                            Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float `xml:"Вес" json:"Вес,omitempty"`
	KachestvoKey                   *Guid  `xml:"Качество_Key" json:"Качество_Key,omitempty"`
	Quantity                       *Int   `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid  `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	RazmeshchenieKey               *Guid  `xml:"Размещение_Key" json:"Размещение_Key,omitempty"`
	InstanceKey                    *Guid  `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid  `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
}

type CatalogKhranilishcheDopolnitelnoiInformatsii struct {
	Key                            Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                    *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                    *String  `xml:"Description" json:"Description,omitempty"`
	DeletionMark                   *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	VidDannykh                     *String  `xml:"ВидДанных" json:"ВидДанных,omitempty"`
	ZnachenieRazdeleniiaDostupaKey *Guid    `xml:"ЗначениеРазделенияДоступа_Key" json:"ЗначениеРазделенияДоступа_Key,omitempty"`
	IDFailaPochtovogoPisma         *String  `xml:"ИДФайлаПочтовогоПисьма" json:"ИДФайлаПочтовогоПисьма,omitempty"`
	ImiaFaila                      *String  `xml:"ИмяФайла" json:"ИмяФайла,omitempty"`
	Obieekt                        *String  `xml:"Объект" json:"Объект,omitempty"`
	KhranilishcheBase64Data        *Binary  `xml:"Хранилище_Base64Data" json:"Хранилище_Base64Data,omitempty"`
	VygruzhatNaSait                *Boolean `xml:"ВыгружатьНаСайт" json:"ВыгружатьНаСайт,omitempty"`
	ObieektType                    *String  `xml:"Объект_Type" json:"Объект_Type,omitempty"`
	KhranilishcheType              *String  `xml:"Хранилище_Type" json:"Хранилище_Type,omitempty"`
	Khranilishche                  *Binary  `xml:"Хранилище" json:"Хранилище,omitempty"`
}

type CatalogDopolnitelnyeVneshnieObrabotki struct {
	Key                                      Guid                                                          `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                              *String                                                       `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                              *String                                                       `xml:"Description" json:"Description,omitempty"`
	ParentKey                                *Guid                                                         `xml:"Parent_Key" json:"Parent_Key,omitempty"`
	IsFolder                                 *Boolean                                                      `xml:"IsFolder" json:"IsFolder,omitempty"`
	DeletionMark                             *Boolean                                                      `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	VidObrabotki                             *String                                                       `xml:"ВидОбработки" json:"ВидОбработки,omitempty"`
	Comment                                  *String                                                       `xml:"Комментарий" json:"Комментарий,omitempty"`
	KommentariiKFailuIstochniku              *String                                                       `xml:"КомментарийКФайлуИсточнику" json:"КомментарийКФайлуИсточнику,omitempty"`
	KhranilishcheVneshneiObrabotkiBase64Data *Binary                                                       `xml:"ХранилищеВнешнейОбработки_Base64Data" json:"ХранилищеВнешнейОбработки_Base64Data,omitempty"`
	BezopasnyiRezhim                         *Boolean                                                      `xml:"БезопасныйРежим" json:"БезопасныйРежим,omitempty"`
	Versiia                                  *String                                                       `xml:"Версия" json:"Версия,omitempty"`
	ImiaObieekta                             *String                                                       `xml:"ИмяОбъекта" json:"ИмяОбъекта,omitempty"`
	ImiaFaila                                *String                                                       `xml:"ИмяФайла" json:"ИмяФайла,omitempty"`
	Informatsiia                             *String                                                       `xml:"Информация" json:"Информация,omitempty"`
	IspolzovatDliaFormyObieekta              *Boolean                                                      `xml:"ИспользоватьДляФормыОбъекта" json:"ИспользоватьДляФормыОбъекта,omitempty"`
	IspolzovatDliaFormySpiska                *Boolean                                                      `xml:"ИспользоватьДляФормыСписка" json:"ИспользоватьДляФормыСписка,omitempty"`
	Publikatsiia                             *String                                                       `xml:"Публикация" json:"Публикация,omitempty"`
	KhranilishcheNastroekBase64Data          *Binary                                                       `xml:"ХранилищеНастроек_Base64Data" json:"ХранилищеНастроек_Base64Data,omitempty"`
	OtvetstvennyiKey                         *Guid                                                         `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	IspolzuetKhranilishcheVariantov          *Boolean                                                      `xml:"ИспользуетХранилищеВариантов" json:"ИспользуетХранилищеВариантов,omitempty"`
	Prinadlezhnost                           *[]CatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnostRowType `xml:"Принадлежность" json:"Принадлежность,omitempty"`
	Komandy                                  *[]CatalogDopolnitelnyeVneshnieObrabotkiKomandyRowType        `xml:"Команды" json:"Команды,omitempty"`
	Razdely                                  *[]CatalogDopolnitelnyeVneshnieObrabotkiRazdelyRowType        `xml:"Разделы" json:"Разделы,omitempty"`
	Naznachenie                              *[]CatalogDopolnitelnyeVneshnieObrabotkiNaznachenieRowType    `xml:"Назначение" json:"Назначение,omitempty"`
	Razresheniia                             *[]CatalogDopolnitelnyeVneshnieObrabotkiRazresheniiaRowType   `xml:"Разрешения" json:"Разрешения,omitempty"`
	KhranilishcheVneshneiObrabotkiType       *String                                                       `xml:"ХранилищеВнешнейОбработки_Type" json:"ХранилищеВнешнейОбработки_Type,omitempty"`
	KhranilishcheNastroekType                *String                                                       `xml:"ХранилищеНастроек_Type" json:"ХранилищеНастроек_Type,omitempty"`
	KhranilishcheVneshneiObrabotki           *Binary                                                       `xml:"ХранилищеВнешнейОбработки" json:"ХранилищеВнешнейОбработки,omitempty"`
	KhranilishcheNastroek                    *Binary                                                       `xml:"ХранилищеНастроек" json:"ХранилищеНастроек,omitempty"`
}

type CatalogDopolnitelnyeVneshnieObrabotkiPrinadlezhnost struct {
	Key                                       Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                                Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	DopolnitelnyeParametryObrabotkiBase64Data *Binary `xml:"ДополнительныеПараметрыОбработки_Base64Data" json:"ДополнительныеПараметрыОбработки_Base64Data,omitempty"`
	PredstavlenieKnopki                       *String `xml:"ПредставлениеКнопки" json:"ПредставлениеКнопки,omitempty"`
	PredstavlenieNastroekObrabotki            *String `xml:"ПредставлениеНастроекОбработки" json:"ПредставлениеНастроекОбработки,omitempty"`
	PredstavlenieObieekta                     *String `xml:"ПредставлениеОбъекта" json:"ПредставлениеОбъекта,omitempty"`
	SsylkaObieekta                            *String `xml:"СсылкаОбъекта" json:"СсылкаОбъекта,omitempty"`
	TablichnaiaChastImia                      *String `xml:"ТабличнаяЧастьИмя" json:"ТабличнаяЧастьИмя,omitempty"`
	TablichnaiaChastPredstavlenie             *String `xml:"ТабличнаяЧастьПредставление" json:"ТабличнаяЧастьПредставление,omitempty"`
	KhranilishcheVneshneiObrabotkiBase64Data  *Binary `xml:"ХранилищеВнешнейОбработки_Base64Data" json:"ХранилищеВнешнейОбработки_Base64Data,omitempty"`
	DopolnitelnyeParametryObrabotkiType       *String `xml:"ДополнительныеПараметрыОбработки_Type" json:"ДополнительныеПараметрыОбработки_Type,omitempty"`
	SsylkaObieektaType                        *String `xml:"СсылкаОбъекта_Type" json:"СсылкаОбъекта_Type,omitempty"`
	KhranilishcheVneshneiObrabotkiType        *String `xml:"ХранилищеВнешнейОбработки_Type" json:"ХранилищеВнешнейОбработки_Type,omitempty"`
	DopolnitelnyeParametryObrabotki           *Binary `xml:"ДополнительныеПараметрыОбработки" json:"ДополнительныеПараметрыОбработки,omitempty"`
	KhranilishcheVneshneiObrabotki            *Binary `xml:"ХранилищеВнешнейОбработки" json:"ХранилищеВнешнейОбработки,omitempty"`
}

type CatalogDopolnitelnyeVneshnieObrabotkiKomandy struct {
	Key                     Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber              Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Identifikator           *String  `xml:"Идентификатор" json:"Идентификатор,omitempty"`
	VariantZapuska          *String  `xml:"ВариантЗапуска" json:"ВариантЗапуска,omitempty"`
	Predstavlenie           *String  `xml:"Представление" json:"Представление,omitempty"`
	PokazyvatOpoveshchenie  *Boolean `xml:"ПоказыватьОповещение" json:"ПоказыватьОповещение,omitempty"`
	Modifikator             *String  `xml:"Модификатор" json:"Модификатор,omitempty"`
	ReglamentnoeZadanieGUID *Guid    `xml:"РегламентноеЗаданиеGUID" json:"РегламентноеЗаданиеGUID,omitempty"`
	Skryt                   *Boolean `xml:"Скрыть" json:"Скрыть,omitempty"`
	ZameniaemyeKomandy      *String  `xml:"ЗаменяемыеКоманды" json:"ЗаменяемыеКоманды,omitempty"`
}

type CatalogDopolnitelnyeVneshnieObrabotkiRazdely struct {
	Key               Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber        Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	RazdelKey         *Guid   `xml:"Раздел_Key" json:"Раздел_Key,omitempty"`
	UdalitImiaRazdela *String `xml:"УдалитьИмяРаздела" json:"УдалитьИмяРаздела,omitempty"`
}

type CatalogDopolnitelnyeVneshnieObrabotkiNaznachenie struct {
	Key                                 Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                          Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	ObieektNaznacheniiaKey              *Guid   `xml:"ОбъектНазначения_Key" json:"ОбъектНазначения_Key,omitempty"`
	UdalitPolnoeImiaObieektaMetadannykh *String `xml:"УдалитьПолноеИмяОбъектаМетаданных" json:"УдалитьПолноеИмяОбъектаМетаданных,omitempty"`
}

type CatalogDopolnitelnyeVneshnieObrabotkiRazresheniia struct {
	Key                 Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber          Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	VidRazresheniia     *String `xml:"ВидРазрешения" json:"ВидРазрешения,omitempty"`
	ParametryBase64Data *Binary `xml:"Параметры_Base64Data" json:"Параметры_Base64Data,omitempty"`
	ParametryType       *String `xml:"Параметры_Type" json:"Параметры_Type,omitempty"`
	Parametry           *Binary `xml:"Параметры" json:"Параметры,omitempty"`
}

type CatalogGruppyPolzovatelei struct {
	Key                    Guid                                                 `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion            *String                                              `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description            *String                                              `xml:"Description" json:"Description,omitempty"`
	Code                   *String                                              `xml:"Code" json:"Code,omitempty"`
	DeletionMark           *Boolean                                             `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	AdministratorGruppyKey *Guid                                                `xml:"АдминистраторГруппы_Key" json:"АдминистраторГруппы_Key,omitempty"`
	PolzovateliGruppy      *[]CatalogGruppyPolzovateleiPolzovateliGruppyRowType `xml:"ПользователиГруппы" json:"ПользователиГруппы,omitempty"`
}

type CatalogGruppyPolzovateleiPolzovateliGruppy struct {
	Key           Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber    Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	PolzovatelKey *Guid `xml:"Пользователь_Key" json:"Пользователь_Key,omitempty"`
}

type DocumentJournalZakazyKlientov struct {
	Ref              String   `xml:"Ref" json:"Ref,omitempty"`
	Type             *String  `xml:"Type" json:"Type,omitempty"`
	Date             *Time    `xml:"Date" json:"Date,omitempty"`
	DeletionMark     *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Number           *String  `xml:"Number" json:"Number,omitempty"`
	Posted           *Boolean `xml:"Posted" json:"Posted,omitempty"`
	ValiutaKey       *Guid    `xml:"Валюта_Key" json:"Валюта_Key,omitempty"`
	DataOplaty       *Time    `xml:"ДатаОплаты" json:"ДатаОплаты,omitempty"`
	DataOtgruzki     *Time    `xml:"ДатаОтгрузки" json:"ДатаОтгрузки,omitempty"`
	InformatsiiaKey  *Guid    `xml:"Информация_Key" json:"Информация_Key,omitempty"`
	Comment          *String  `xml:"Комментарий" json:"Комментарий,omitempty"`
	OrganizatsiiaKey *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey *Guid    `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey *Guid    `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	Sum              *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	RefType          String   `xml:"Ref_Type" json:"Ref_Type,omitempty"`
}

type DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochki struct {
	Key                                              Guid                                                                                    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                                      *String                                                                                 `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                                           *String                                                                                 `xml:"Number" json:"Number,omitempty"`
	Date                                             *Time                                                                                   `xml:"Date" json:"Date,omitempty"`
	DeletionMark                                     *Boolean                                                                                `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                                           *Boolean                                                                                `xml:"Posted" json:"Posted,omitempty"`
	BankovskiiSchetOrganizatsiiKey                   *Guid                                                                                   `xml:"БанковскийСчетОрганизации_Key" json:"БанковскийСчетОрганизации_Key,omitempty"`
	ValiutaDokumentaKey                              *Guid                                                                                   `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	Weight                                           *Float                                                                                  `xml:"ВесДокумента" json:"ВесДокумента,omitempty"`
	GruzootpravitelKey                               *Guid                                                                                   `xml:"Грузоотправитель_Key" json:"Грузоотправитель_Key,omitempty"`
	GruzopoluchatelKey                               *Guid                                                                                   `xml:"Грузополучатель_Key" json:"Грузополучатель_Key,omitempty"`
	DogovorKontragentaKey                            *Guid                                                                                   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie                                *String                                                                                 `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	DokumentSozdanVIuTD                              *Boolean                                                                                `xml:"ДокументСозданВЮТД" json:"ДокументСозданВЮТД,omitempty"`
	KolichestvoDokumenta                             *Int                                                                                    `xml:"КоличествоДокумента" json:"КоличествоДокумента,omitempty"`
	Comment                                          *String                                                                                 `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey                                    *Guid                                                                                   `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	KratnostVzaimoraschetov                          *Int                                                                                    `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov                              *Float                                                                                  `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	NDSVkliuchenVStoimost                            *Boolean                                                                                `xml:"НДСВключенВСтоимость" json:"НДСВключенВСтоимость,omitempty"`
	OpisanieDefektov                                 *String                                                                                 `xml:"ОписаниеДефектов" json:"ОписаниеДефектов,omitempty"`
	OrganizatsiiaKey                                 *Guid                                                                                   `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                                 *Guid                                                                                   `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey                                 *Guid                                                                                   `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	Sdelka                                           *String                                                                                 `xml:"Сделка" json:"Сделка,omitempty"`
	DepartmentKey                                    *Guid                                                                                   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	SummaVkliuchaetNDS                               *Boolean                                                                                `xml:"СуммаВключаетНДС" json:"СуммаВключаетНДС,omitempty"`
	SumOfDocument                                    *Float                                                                                  `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	TipDokumenta                                     *String                                                                                 `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	TipTsenKey                                       *Guid                                                                                   `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
	UchityvatNDS                                     *Boolean                                                                                `xml:"УчитыватьНДС" json:"УчитыватьНДС,omitempty"`
	KhoziaistvennaiaOperatsiiaKey                    *Guid                                                                                   `xml:"ХозяйственнаяОперация_Key" json:"ХозяйственнаяОперация_Key,omitempty"`
	PostavshchikuVystavliaetsiaSchetFakturaNaVozvrat *Boolean                                                                                `xml:"ПоставщикуВыставляетсяСчетФактураНаВозврат" json:"ПоставщикуВыставляетсяСчетФактураНаВозврат,omitempty"`
	Goods                                            *[]DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovaryRowType `xml:"Товары" json:"Товары,omitempty"`
	DokumentOsnovanieType                            *String                                                                                 `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
	SdelkaType                                       *String                                                                                 `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

func (entity DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochki) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochki) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentVozvratTovarovPostavshchikuIzNeavtomatizirovannoiTorgovoiTochkiTovary struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	DefektKey                      *Guid   `xml:"Дефект_Key" json:"Дефект_Key,omitempty"`
	DokumentPostupleniia           *String `xml:"ДокументПоступления" json:"ДокументПоступления,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	ProektKey                      *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	StavkaNDS                      *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                       *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float  `xml:"Цена" json:"Цена,omitempty"`
	RetailCost                     *Float  `xml:"ЦенаВРознице" json:"ЦенаВРознице,omitempty"`
	DokumentPostupleniiaType       *String `xml:"ДокументПоступления_Type" json:"ДокументПоступления_Type,omitempty"`
}

type DocumentZaiavkaNaPeremeshchenieTovarov struct {
	Key                    Guid                                                   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion            *String                                                `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                 *String                                                `xml:"Number" json:"Number,omitempty"`
	Date                   *Time                                                  `xml:"Date" json:"Date,omitempty"`
	DeletionMark           *Boolean                                               `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                 *Boolean                                               `xml:"Posted" json:"Posted,omitempty"`
	Weight                 *Float                                                 `xml:"ВесДокумента" json:"ВесДокумента,omitempty"`
	OperationType          *String                                                `xml:"ВидОперации" json:"ВидОперации,omitempty"`
	DokumentSozdanVIuTD    *Boolean                                               `xml:"ДокументСозданВЮТД" json:"ДокументСозданВЮТД,omitempty"`
	KolichestvoDokumenta   *Int                                                   `xml:"КоличествоДокумента" json:"КоличествоДокумента,omitempty"`
	Comment                *String                                                `xml:"Комментарий" json:"Комментарий,omitempty"`
	OrganizatsiiaKey       *Guid                                                  `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey       *Guid                                                  `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey       *Guid                                                  `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	SkladOtpravitelKey     *Guid                                                  `xml:"СкладОтправитель_Key" json:"СкладОтправитель_Key,omitempty"`
	SkladPoluchatelKey     *Guid                                                  `xml:"СкладПолучатель_Key" json:"СкладПолучатель_Key,omitempty"`
	SumOfDocument          *Float                                                 `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	TipSkidkiNatsenkiKey   *Guid                                                  `xml:"ТипСкидкиНаценки_Key" json:"ТипСкидкиНаценки_Key,omitempty"`
	TipTsenKey             *Guid                                                  `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
	SposobDostavkiKey      *Guid                                                  `xml:"СпособДоставки_Key" json:"СпособДоставки_Key,omitempty"`
	IspolzovatRezhimSverki *Boolean                                               `xml:"ИспользоватьРежимСверки" json:"ИспользоватьРежимСверки,omitempty"`
	Goods                  *[]DocumentZaiavkaNaPeremeshchenieTovarovTovaryRowType `xml:"Товары" json:"Товары,omitempty"`
}

func (entity DocumentZaiavkaNaPeremeshchenieTovarov) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentZaiavkaNaPeremeshchenieTovarov) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentZaiavkaNaPeremeshchenieTovarovTovary struct {
	Key                            Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float `xml:"Вес" json:"Вес,omitempty"`
	KachestvoKey                   *Guid  `xml:"Качество_Key" json:"Качество_Key,omitempty"`
	Quantity                       *Int   `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	ProtsentRoznichnoiNatsenki     *Float `xml:"ПроцентРозничнойНаценки" json:"ПроцентРозничнойНаценки,omitempty"`
	SizeKey                        *Guid  `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid  `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	StoimostBezNDS                 *Float `xml:"СтоимостьБезНДС" json:"СтоимостьБезНДС,omitempty"`
	StoimostSNDS                   *Float `xml:"СтоимостьСНДС" json:"СтоимостьСНДС,omitempty"`
	Sum                            *Float `xml:"Сумма" json:"Сумма,omitempty"`
	SummaPostupleniia              *Float `xml:"СуммаПоступления" json:"СуммаПоступления,omitempty"`
	KharakteristikaNomenklaturyKey *Guid  `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float `xml:"Цена" json:"Цена,omitempty"`
	TsenaVRoznitseGr               *Float `xml:"ЦенаВРозницеГр" json:"ЦенаВРозницеГр,omitempty"`
	TsenaPostupleniia              *Float `xml:"ЦенаПоступления" json:"ЦенаПоступления,omitempty"`
}

type CatalogUsloviiaProdazh struct {
	Key          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion  *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description  *String  `xml:"Description" json:"Description,omitempty"`
	Code         *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
}

type DocumentVvodNachalnykhOstatkovPoFinMonitoringu struct {
	Key                            Guid                                                             `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                    *String                                                          `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                         *String                                                          `xml:"Number" json:"Number,omitempty"`
	Date                           *Time                                                            `xml:"Date" json:"Date,omitempty"`
	DeletionMark                   *Boolean                                                         `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                         *Boolean                                                         `xml:"Posted" json:"Posted,omitempty"`
	OrganizatsiiaKey               *Guid                                                            `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	TipDokumentovUcheta            *Boolean                                                         `xml:"ТипДокументовУчета" json:"ТипДокументовУчета,omitempty"`
	NastroikiZapolneniiaBase64Data *Binary                                                          `xml:"НастройкиЗаполнения_Base64Data" json:"НастройкиЗаполнения_Base64Data,omitempty"`
	Dogovora                       *[]DocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovoraRowType `xml:"Договора" json:"Договора,omitempty"`
	NastroikiZapolneniiaType       *String                                                          `xml:"НастройкиЗаполнения_Type" json:"НастройкиЗаполнения_Type,omitempty"`
	NastroikiZapolneniia           *Binary                                                          `xml:"НастройкиЗаполнения" json:"НастройкиЗаполнения,omitempty"`
}

func (entity DocumentVvodNachalnykhOstatkovPoFinMonitoringu) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentVvodNachalnykhOstatkovPoFinMonitoringu) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentVvodNachalnykhOstatkovPoFinMonitoringuDogovora struct {
	Key                   Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber            Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	DogovorKontragentaKey *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentUcheta        *String  `xml:"ДокументУчета" json:"ДокументУчета,omitempty"`
	ItogovaiaStroka       *Boolean `xml:"ИтоговаяСтрока" json:"ИтоговаяСтрока,omitempty"`
	KontragentKey         *Guid    `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	RuchnaiaKorrektirovka *Boolean `xml:"РучнаяКорректировка" json:"РучнаяКорректировка,omitempty"`
	SummaOplaty           *Float   `xml:"СуммаОплаты" json:"СуммаОплаты,omitempty"`
	SummaOtgruzki         *Float   `xml:"СуммаОтгрузки" json:"СуммаОтгрузки,omitempty"`
	SummaVozvrata         *Float   `xml:"СуммаВозврата" json:"СуммаВозврата,omitempty"`
	DokumentUchetaType    *String  `xml:"ДокументУчета_Type" json:"ДокументУчета_Type,omitempty"`
}

type CatalogOrganizatsii struct {
	Key                                              Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                                      *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                                      *String  `xml:"Description" json:"Description,omitempty"`
	Code                                             *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark                                     *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	DataNachalaVedeniiaFinMonitoringa                *Time    `xml:"ДатаНачалаВеденияФинМониторинга" json:"ДатаНачалаВеденияФинМониторинга,omitempty"`
	INN                                              *String  `xml:"ИНН" json:"ИНН,omitempty"`
	IspolzovatFinMonitoring                          *Boolean `xml:"ИспользоватьФинМониторинг" json:"ИспользоватьФинМониторинг,omitempty"`
	KodIMNS                                          *String  `xml:"КодИМНС" json:"КодИМНС,omitempty"`
	KodPoOKATO                                       *String  `xml:"КодПоОКАТО" json:"КодПоОКАТО,omitempty"`
	KodPoOKVED                                       *String  `xml:"КодПоОКВЭД" json:"КодПоОКВЭД,omitempty"`
	KodPoOKPO                                        *String  `xml:"КодПоОКПО" json:"КодПоОКПО,omitempty"`
	KodPoOKTMO                                       *String  `xml:"КодПоОКТМО" json:"КодПоОКТМО,omitempty"`
	KPP                                              *String  `xml:"КПП" json:"КПП,omitempty"`
	NaimenovanieIFNS                                 *String  `xml:"НаименованиеИФНС" json:"НаименованиеИФНС,omitempty"`
	NaimenovaniePlatelshchikaPriPerechisleniiNalogov *String  `xml:"НаименованиеПлательщикаПриПеречисленииНалогов" json:"НаименованиеПлательщикаПриПеречисленииНалогов,omitempty"`
	NaimenovaniePolnoe                               *String  `xml:"НаименованиеПолное" json:"НаименованиеПолное,omitempty"`
	OGRN                                             *String  `xml:"ОГРН" json:"ОГРН,omitempty"`
	OsnovnoiBankovskiiSchetKey                       *Guid    `xml:"ОсновнойБанковскийСчет_Key" json:"ОсновнойБанковскийСчет_Key,omitempty"`
	Prefiks                                          *String  `xml:"Префикс" json:"Префикс,omitempty"`
	SvidetelstvoDataVydachi                          *Time    `xml:"СвидетельствоДатаВыдачи" json:"СвидетельствоДатаВыдачи,omitempty"`
	SvidetelstvoSeriiaNomer                          *String  `xml:"СвидетельствоСерияНомер" json:"СвидетельствоСерияНомер,omitempty"`
	UchetnyiNomer                                    *String  `xml:"УчетныйНомер" json:"УчетныйНомер,omitempty"`
	IurFizLitso                                      *String  `xml:"ЮрФизЛицо" json:"ЮрФизЛицо,omitempty"`
	KomissiiaKakKupliaProdazha                       *Boolean `xml:"КомиссияКакКупляПродажа" json:"КомиссияКакКупляПродажа,omitempty"`
	IDKorr                                           *String  `xml:"ИДКорр" json:"ИДКорр,omitempty"`
	DataPriniatiiaKDeistviiuPisma50                  *Time    `xml:"ДатаПринятияКДействиюПисьма50" json:"ДатаПринятияКДействиюПисьма50,omitempty"`
}

type CatalogUsloviiaOplaty struct {
	Key            Guid                                          `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion    *String                                       `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description    *String                                       `xml:"Description" json:"Description,omitempty"`
	Code           *String                                       `xml:"Code" json:"Code,omitempty"`
	DeletionMark   *Boolean                                      `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	VidOtsrochki   *Boolean                                      `xml:"ВидОтсрочки" json:"ВидОтсрочки,omitempty"`
	TablitsaVyplat *[]CatalogUsloviiaOplatyTablitsaVyplatRowType `xml:"ТаблицаВыплат" json:"ТаблицаВыплат,omitempty"`
}

type CatalogUsloviiaOplatyTablitsaVyplat struct {
	Key             Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber      Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	PeriodOtsrochki *Int   `xml:"ПериодОтсрочки" json:"ПериодОтсрочки,omitempty"`
	ProtsentVyplaty *Float `xml:"ПроцентВыплаты" json:"ПроцентВыплаты,omitempty"`
}

type CatalogKategoriiObieektov struct {
	Key                     Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion             *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description             *String  `xml:"Description" json:"Description,omitempty"`
	Code                    *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark            *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	NaznachenieKategoriiKey *Guid    `xml:"НазначениеКатегории_Key" json:"НазначениеКатегории_Key,omitempty"`
}

type CatalogfmZnacheniiaDliaZapolneniia struct {
	Key          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion  *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Code         *String  `xml:"Code" json:"Code,omitempty"`
	ParentKey    *Guid    `xml:"Parent_Key" json:"Parent_Key,omitempty"`
	IsFolder     *Boolean `xml:"IsFolder" json:"IsFolder,omitempty"`
	DeletionMark *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Opisanie     *String  `xml:"Описание" json:"Описание,omitempty"`
}

type DocumentUdalitNariadZakaz struct {
	Key                   Guid                                               `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion           *String                                            `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                *String                                            `xml:"Number" json:"Number,omitempty"`
	Date                  *Time                                              `xml:"Date" json:"Date,omitempty"`
	DeletionMark          *Boolean                                           `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                *Boolean                                           `xml:"Posted" json:"Posted,omitempty"`
	OrganizatsiiaKey      *Guid                                              `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	KontragentKey         *Guid                                              `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	DogovorKontragentaKey *Guid                                              `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	OtvetstvennyiKey      *Guid                                              `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	Comment               *String                                            `xml:"Комментарий" json:"Комментарий,omitempty"`
	Opisanie              *String                                            `xml:"Описание" json:"Описание,omitempty"`
	PriemIzdelii          *Boolean                                           `xml:"ПриемИзделий" json:"ПриемИзделий,omitempty"`
	PriemMetallaVstavok   *Boolean                                           `xml:"ПриемМеталлаВставок" json:"ПриемМеталлаВставок,omitempty"`
	DepartmentKey         *Guid                                              `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	KolichestvoDokumenta  *Int                                               `xml:"КоличествоДокумента" json:"КоличествоДокумента,omitempty"`
	Weight                *Float                                             `xml:"ВесДокумента" json:"ВесДокумента,omitempty"`
	Izdeliia              *[]DocumentUdalitNariadZakazIzdeliiaRowType        `xml:"Изделия" json:"Изделия,omitempty"`
	Uslugi                *[]DocumentUdalitNariadZakazUslugiRowType          `xml:"Услуги" json:"Услуги,omitempty"`
	Spetsifikatsiia       *[]DocumentUdalitNariadZakazSpetsifikatsiiaRowType `xml:"Спецификация" json:"Спецификация,omitempty"`
	Metally               *[]DocumentUdalitNariadZakazMetallyRowType         `xml:"Металлы" json:"Металлы,omitempty"`
	Vstavki               *[]DocumentUdalitNariadZakazVstavkiRowType         `xml:"Вставки" json:"Вставки,omitempty"`
}

func (entity DocumentUdalitNariadZakaz) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentUdalitNariadZakaz) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentUdalitNariadZakazIzdeliia struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	Quantity                       *Float  `xml:"Количество" json:"Количество,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	TypeKey                        *Guid   `xml:"ТипИзделия_Key" json:"ТипИзделия_Key,omitempty"`
	ProbeKey                       *Guid   `xml:"Проба_Key" json:"Проба_Key,omitempty"`
	Kommentarii                    *String `xml:"Комментарии" json:"Комментарии,omitempty"`
	VesBezVstavok                  *Float  `xml:"ВесБезВставок" json:"ВесБезВставок,omitempty"`
	NomerStrokiTCh                 *Int    `xml:"НомерСтрокиТЧ" json:"НомерСтрокиТЧ,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
}

type DocumentUdalitNariadZakazUslugi struct {
	Key         Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber  Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Quantity    *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey     *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	Soderzhanie *String `xml:"Содержание" json:"Содержание,omitempty"`
	StavkaNDS   *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum         *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS    *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	Cost        *Float  `xml:"Цена" json:"Цена,omitempty"`
}

type DocumentUdalitNariadZakazSpetsifikatsiia struct {
	Key              Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber       Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight           *Float `xml:"Вес" json:"Вес,omitempty"`
	GruppaDefektaKey *Guid  `xml:"ГруппаДефекта_Key" json:"ГруппаДефекта_Key,omitempty"`
	GruppaTsvetaKey  *Guid  `xml:"ГруппаЦвета_Key" json:"ГруппаЦвета_Key,omitempty"`
	KamenKey         *Guid  `xml:"Камень_Key" json:"Камень_Key,omitempty"`
	Quantity         *Float `xml:"Количество" json:"Количество,omitempty"`
	ItemKey          *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	Razmer1          *Float `xml:"Размер1" json:"Размер1,omitempty"`
	Razmer2          *Float `xml:"Размер2" json:"Размер2,omitempty"`
	Razmer3          *Float `xml:"Размер3" json:"Размер3,omitempty"`
	RassevKey        *Guid  `xml:"Рассев_Key" json:"Рассев_Key,omitempty"`
	FormaOgrankiKey  *Guid  `xml:"ФормаОгранки_Key" json:"ФормаОгранки_Key,omitempty"`
	TsvetKamniaKey   *Guid  `xml:"ЦветКамня_Key" json:"ЦветКамня_Key,omitempty"`
	NomerStrokiTCh   *Int   `xml:"НомерСтрокиТЧ" json:"НомерСтрокиТЧ,omitempty"`
}

type DocumentUdalitNariadZakazMetally struct {
	Key        Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	ItemKey    *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	ProbeKey   *Guid   `xml:"Проба_Key" json:"Проба_Key,omitempty"`
	Weight     *String `xml:"Вес" json:"Вес,omitempty"`
}

type DocumentUdalitNariadZakazVstavki struct {
	Key              Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber       Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight           *Float `xml:"Вес" json:"Вес,omitempty"`
	GruppaDefektaKey *Guid  `xml:"ГруппаДефекта_Key" json:"ГруппаДефекта_Key,omitempty"`
	GruppaTsvetaKey  *Guid  `xml:"ГруппаЦвета_Key" json:"ГруппаЦвета_Key,omitempty"`
	KamenKey         *Guid  `xml:"Камень_Key" json:"Камень_Key,omitempty"`
	Quantity         *Float `xml:"Количество" json:"Количество,omitempty"`
	ItemKey          *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	Razmer1          *Float `xml:"Размер1" json:"Размер1,omitempty"`
	Razmer2          *Float `xml:"Размер2" json:"Размер2,omitempty"`
	Razmer3          *Float `xml:"Размер3" json:"Размер3,omitempty"`
	RassevKey        *Guid  `xml:"Рассев_Key" json:"Рассев_Key,omitempty"`
	FormaOgrankiKey  *Guid  `xml:"ФормаОгранки_Key" json:"ФормаОгранки_Key,omitempty"`
	TsvetKamniaKey   *Guid  `xml:"ЦветКамня_Key" json:"ЦветКамня_Key,omitempty"`
}

type CatalogBanki struct {
	Key          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion  *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description  *String  `xml:"Description" json:"Description,omitempty"`
	Code         *String  `xml:"Code" json:"Code,omitempty"`
	ParentKey    *Guid    `xml:"Parent_Key" json:"Parent_Key,omitempty"`
	IsFolder     *Boolean `xml:"IsFolder" json:"IsFolder,omitempty"`
	DeletionMark *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Adres        *String  `xml:"Адрес" json:"Адрес,omitempty"`
	Gorod        *String  `xml:"Город" json:"Город,omitempty"`
	KorrSchet    *String  `xml:"КоррСчет" json:"КоррСчет,omitempty"`
	Telefony     *String  `xml:"Телефоны" json:"Телефоны,omitempty"`
}

type CatalogRoliKontaktnykhLits struct {
	Key          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion  *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description  *String  `xml:"Description" json:"Description,omitempty"`
	Code         *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
}

type DocumentRestrukturizatsiiaDolga struct {
	Key                        Guid                                                                `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                *String                                                             `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                     *String                                                             `xml:"Number" json:"Number,omitempty"`
	Date                       *Time                                                               `xml:"Date" json:"Date,omitempty"`
	DeletionMark               *Boolean                                                            `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                     *Boolean                                                            `xml:"Posted" json:"Posted,omitempty"`
	DogovorKontragentaKey      *Guid                                                               `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	KontragentKey              *Guid                                                               `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	OrganizatsiiaKey           *Guid                                                               `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	RasshifrovkaZadolzhennosti *[]DocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennostiRowType `xml:"РасшифровкаЗадолженности" json:"РасшифровкаЗадолженности,omitempty"`
}

func (entity DocumentRestrukturizatsiiaDolga) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentRestrukturizatsiiaDolga) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentRestrukturizatsiiaDolgaRasshifrovkaZadolzhennosti struct {
	Key                 Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber          Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	DataDolga           *Time  `xml:"ДатаДолга" json:"ДатаДолга,omitempty"`
	NovaiaDataDolga     *Time  `xml:"НоваяДатаДолга" json:"НоваяДатаДолга,omitempty"`
	NovaiaSummaDolga    *Float `xml:"НоваяСуммаДолга" json:"НоваяСуммаДолга,omitempty"`
	NovaiaSummaDolgaUpr *Float `xml:"НоваяСуммаДолгаУпр" json:"НоваяСуммаДолгаУпр,omitempty"`
	SummaDolga          *Float `xml:"СуммаДолга" json:"СуммаДолга,omitempty"`
	SummaDolgaUpr       *Float `xml:"СуммаДолгаУпр" json:"СуммаДолгаУпр,omitempty"`
}

type DocumentAkkreditivPoluchennyi struct {
	Key                                  Guid                                                        `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                          *String                                                     `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                               *String                                                     `xml:"Number" json:"Number,omitempty"`
	Date                                 *Time                                                       `xml:"Date" json:"Date,omitempty"`
	DeletionMark                         *Boolean                                                    `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                               *Boolean                                                    `xml:"Posted" json:"Posted,omitempty"`
	ValiutaDokumentaKey                  *Guid                                                       `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	OperationType                        *String                                                     `xml:"ВидОперации" json:"ВидОперации,omitempty"`
	DataVkhodiashchegoDokumenta          *Time                                                       `xml:"ДатаВходящегоДокумента" json:"ДатаВходящегоДокумента,omitempty"`
	DataOplaty                           *Time                                                       `xml:"ДатаОплаты" json:"ДатаОплаты,omitempty"`
	DogovorKontragentaKey                *Guid                                                       `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie                    *String                                                     `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	DokumentPlanirovaniiaPostupleniiaKey *Guid                                                       `xml:"ДокументПланированияПоступления_Key" json:"ДокументПланированияПоступления_Key,omitempty"`
	Comment                              *String                                                     `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey                        *Guid                                                       `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	NomerVkhodiashchegoDokumenta         *String                                                     `xml:"НомерВходящегоДокумента" json:"НомерВходящегоДокумента,omitempty"`
	Oplacheno                            *Boolean                                                    `xml:"Оплачено" json:"Оплачено,omitempty"`
	OrganizatsiiaKey                     *Guid                                                       `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                     *Guid                                                       `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	OtrazhenoVOperUchete                 *Boolean                                                    `xml:"ОтраженоВОперУчете" json:"ОтраженоВОперУчете,omitempty"`
	TypeOfMovingMoneyKey                 *Guid                                                       `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SumOfDocument                        *Float                                                      `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	SchetKontragentaKey                  *Guid                                                       `xml:"СчетКонтрагента_Key" json:"СчетКонтрагента_Key,omitempty"`
	SchetOrganizatsiiKey                 *Guid                                                       `xml:"СчетОрганизации_Key" json:"СчетОрганизации_Key,omitempty"`
	TipDokumenta                         *String                                                     `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	ChastichnaiaOplata                   *Boolean                                                    `xml:"ЧастичнаяОплата" json:"ЧастичнаяОплата,omitempty"`
	ExtendedPayments                     *[]DocumentAkkreditivPoluchennyiRasshifrovkaPlatezhaRowType `xml:"РасшифровкаПлатежа" json:"РасшифровкаПлатежа,omitempty"`
	RekvizityKontragenta                 *[]DocumentAkkreditivPoluchennyiRekvizityKontragentaRowType `xml:"РеквизитыКонтрагента" json:"РеквизитыКонтрагента,omitempty"`
	DokumentOsnovanieType                *String                                                     `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
}

func (entity DocumentAkkreditivPoluchennyi) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentAkkreditivPoluchennyi) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentAkkreditivPoluchennyiRasshifrovkaPlatezha struct {
	Key                              Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                       Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	DogovorKontragentaKey            *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentPlanirovaniiaPlatezhaKey *Guid   `xml:"ДокументПланированияПлатежа_Key" json:"ДокументПланированияПлатежа_Key,omitempty"`
	KratnostVzaimoraschetov          *Int    `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov              *Float  `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	KursVzaimoraschetovPlan          *Float  `xml:"КурсВзаиморасчетовПлан" json:"КурсВзаиморасчетовПлан,omitempty"`
	ProektKey                        *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	Sdelka                           *String `xml:"Сделка" json:"Сделка,omitempty"`
	StavkaNDS                        *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	TypeOfMovingMoneyKey             *Guid   `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov             *Float  `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	SummaNDS                         *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	Sum                              *Float  `xml:"СуммаПлатежа" json:"СуммаПлатежа,omitempty"`
	SummaPlatezhaPlan                *Float  `xml:"СуммаПлатежаПлан" json:"СуммаПлатежаПлан,omitempty"`
	SdelkaType                       *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type DocumentAkkreditivPoluchennyiRekvizityKontragenta struct {
	Key            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Znachenie      *String `xml:"Значение" json:"Значение,omitempty"`
	Predstavlenie  *String `xml:"Представление" json:"Представление,omitempty"`
	Rekvizit       *String `xml:"Реквизит" json:"Реквизит,omitempty"`
	TipKontragenta *String `xml:"ТипКонтрагента" json:"ТипКонтрагента,omitempty"`
}

type DocumentPriemIzRemonta struct {
	Key                     Guid                                      `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion             *String                                   `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                  *String                                   `xml:"Number" json:"Number,omitempty"`
	Date                    *Time                                     `xml:"Date" json:"Date,omitempty"`
	DeletionMark            *Boolean                                  `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                  *Boolean                                  `xml:"Posted" json:"Posted,omitempty"`
	Weight                  *Float                                    `xml:"ВесДокумента" json:"ВесДокумента,omitempty"`
	DogovorKontragentaKey   *Guid                                     `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	KolichestvoDokumenta    *Int                                      `xml:"КоличествоДокумента" json:"КоличествоДокумента,omitempty"`
	KontragentKey           *Guid                                     `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	OrganizatsiiaKey        *Guid                                     `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DepartmentKey           *Guid                                     `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	SobstvennaiaMasterskaia *Boolean                                  `xml:"СобственнаяМастерская" json:"СобственнаяМастерская,omitempty"`
	Izdeliia                *[]DocumentPriemIzRemontaIzdeliiaRowType  `xml:"Изделия" json:"Изделия,omitempty"`
	Materialy               *[]DocumentPriemIzRemontaMaterialyRowType `xml:"Материалы" json:"Материалы,omitempty"`
}

func (entity DocumentPriemIzRemonta) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentPriemIzRemonta) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentPriemIzRemontaIzdeliia struct {
	Key                            Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	ItemKey                        *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	Quantity                       *Float `xml:"Количество" json:"Количество,omitempty"`
	Weight                         *Float `xml:"Вес" json:"Вес,omitempty"`
	SizeKey                        *Guid  `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid  `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	TypeKey                        *Guid  `xml:"ТипИзделия_Key" json:"ТипИзделия_Key,omitempty"`
	ProbeKey                       *Guid  `xml:"Проба_Key" json:"Проба_Key,omitempty"`
	InstanceKey                    *Guid  `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
}

type DocumentPriemIzRemontaMaterialy struct {
	Key                            Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	KliuchNomenklaturyKey          *Guid  `xml:"КлючНоменклатуры_Key" json:"КлючНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid  `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid  `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	InstanceKey                    *Guid  `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	DokumentOprikhodovaniiaKey     *Guid  `xml:"ДокументОприходования_Key" json:"ДокументОприходования_Key,omitempty"`
	Weight                         *Float `xml:"Вес" json:"Вес,omitempty"`
	Quantity                       *Int   `xml:"Количество" json:"Количество,omitempty"`
}

type CatalogTsveta struct {
	Key              Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion      *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description      *String  `xml:"Description" json:"Description,omitempty"`
	Code             *String  `xml:"Code" json:"Code,omitempty"`
	OwnerKey         *Guid    `xml:"Owner_Key" json:"Owner_Key,omitempty"`
	DeletionMark     *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Vyvodit          *Boolean `xml:"Выводить" json:"Выводить,omitempty"`
	EstGruppaDefekta *Boolean `xml:"ЕстьГруппаДефекта" json:"ЕстьГруппаДефекта,omitempty"`
	EstGruppaTsveta  *Boolean `xml:"ЕстьГруппаЦвета" json:"ЕстьГруппаЦвета,omitempty"`
}

type DocumentStornirovanieOtchetaKomissioneraOProdazhakh struct {
	Key                                         Guid                                                                           `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                                 *String                                                                        `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                                      *String                                                                        `xml:"Number" json:"Number,omitempty"`
	Date                                        *Time                                                                          `xml:"Date" json:"Date,omitempty"`
	DeletionMark                                *Boolean                                                                       `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                                      *Boolean                                                                       `xml:"Posted" json:"Posted,omitempty"`
	ValiutaDokumentaKey                         *Guid                                                                          `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	Weight                                      *Float                                                                         `xml:"ВесДокумента" json:"ВесДокумента,omitempty"`
	DataVkhodiashchegoDokumenta                 *Time                                                                          `xml:"ДатаВходящегоДокумента" json:"ДатаВходящегоДокумента,omitempty"`
	DogovorKontragentaKey                       *Guid                                                                          `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie                           *String                                                                        `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	KolichestvoDokumenta                        *Int                                                                           `xml:"КоличествоДокумента" json:"КоличествоДокумента,omitempty"`
	Comment                                     *String                                                                        `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey                               *Guid                                                                          `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	KratnostVzaimoraschetov                     *Int                                                                           `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov                         *Float                                                                         `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	NomenklaturnaiaGruppaKey                    *Guid                                                                          `xml:"НоменклатурнаяГруппа_Key" json:"НоменклатурнаяГруппа_Key,omitempty"`
	NomerVkhodiashchegoDokumenta                *String                                                                        `xml:"НомерВходящегоДокумента" json:"НомерВходящегоДокумента,omitempty"`
	OrganizatsiiaKey                            *Guid                                                                          `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                            *Guid                                                                          `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey                            *Guid                                                                          `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	ProektKey                                   *Guid                                                                          `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	ProtsentKomissionnogoVoznagrazhdeniia       *Float                                                                         `xml:"ПроцентКомиссионногоВознаграждения" json:"ПроцентКомиссионногоВознаграждения,omitempty"`
	Sdelka                                      *String                                                                        `xml:"Сделка" json:"Сделка,omitempty"`
	SposobRaschetaKomissionnogoVoznagrazhdeniia *String                                                                        `xml:"СпособРасчетаКомиссионногоВознаграждения" json:"СпособРасчетаКомиссионногоВознаграждения,omitempty"`
	StavkaNDSVoznagrazhdeniia                   *String                                                                        `xml:"СтавкаНДСВознаграждения" json:"СтавкаНДСВознаграждения,omitempty"`
	StatiaZatratKey                             *Guid                                                                          `xml:"СтатьяЗатрат_Key" json:"СтатьяЗатрат_Key,omitempty"`
	SummaVkliuchaetNDS                          *Boolean                                                                       `xml:"СуммаВключаетНДС" json:"СуммаВключаетНДС,omitempty"`
	SummaVoznagrazhdeniia                       *Float                                                                         `xml:"СуммаВознаграждения" json:"СуммаВознаграждения,omitempty"`
	SumOfDocument                               *Float                                                                         `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	TipDokumenta                                *String                                                                        `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	TipTsenKey                                  *Guid                                                                          `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
	UderzhatKomissionnoeVoznagrazhdenie         *Boolean                                                                       `xml:"УдержатьКомиссионноеВознаграждение" json:"УдержатьКомиссионноеВознаграждение,omitempty"`
	UchityvatNDS                                *Boolean                                                                       `xml:"УчитыватьНДС" json:"УчитыватьНДС,omitempty"`
	DenezhnyeSredstva                           *[]DocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstvaRowType `xml:"ДенежныеСредства" json:"ДенежныеСредства,omitempty"`
	Goods                                       *[]DocumentStornirovanieOtchetaKomissioneraOProdazhakhTovaryRowType            `xml:"Товары" json:"Товары,omitempty"`
	DokumentOsnovanieType                       *String                                                                        `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
	SdelkaType                                  *String                                                                        `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

func (entity DocumentStornirovanieOtchetaKomissioneraOProdazhakh) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentStornirovanieOtchetaKomissioneraOProdazhakh) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentStornirovanieOtchetaKomissioneraOProdazhakhDenezhnyeSredstva struct {
	Key                   Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber            Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	VidOtchetaPoPlatezham *String `xml:"ВидОтчетаПоПлатежам" json:"ВидОтчетаПоПлатежам,omitempty"`
	StavkaNDS             *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                   *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS              *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
}

type DocumentStornirovanieOtchetaKomissioneraOProdazhakhTovary struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	DokumentPartiiKey              *Guid   `xml:"ДокументПартии_Key" json:"ДокументПартии_Key,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	StavkaNDS                      *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaVoznagrazhdeniia          *Float  `xml:"СуммаВознаграждения" json:"СуммаВознаграждения,omitempty"`
	SummaNDS                       *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	SummaNDSVoznagrazhdeniia       *Float  `xml:"СуммаНДСВознаграждения" json:"СуммаНДСВознаграждения,omitempty"`
	SummaNDSPeredachi              *Float  `xml:"СуммаНДСПередачи" json:"СуммаНДСПередачи,omitempty"`
	SummaPeredachi                 *Float  `xml:"СуммаПередачи" json:"СуммаПередачи,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float  `xml:"Цена" json:"Цена,omitempty"`
	TsenaPeredachi                 *Float  `xml:"ЦенаПередачи" json:"ЦенаПередачи,omitempty"`
}

type DocumentJournalDavalcheskieDokumenty struct {
	Ref              String   `xml:"Ref" json:"Ref,omitempty"`
	Type             *String  `xml:"Type" json:"Type,omitempty"`
	Date             *Time    `xml:"Date" json:"Date,omitempty"`
	DeletionMark     *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Number           *String  `xml:"Number" json:"Number,omitempty"`
	Posted           *Boolean `xml:"Posted" json:"Posted,omitempty"`
	Weight           *Float   `xml:"Вес" json:"Вес,omitempty"`
	DataVkh          *Time    `xml:"ДатаВх" json:"ДатаВх,omitempty"`
	Comment          *String  `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey    *Guid    `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	Metall           *String  `xml:"Металл" json:"Металл,omitempty"`
	NomerVkh         *String  `xml:"НомерВх" json:"НомерВх,omitempty"`
	OrganizatsiiaKey *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey *Guid    `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	RefType          String   `xml:"Ref_Type" json:"Ref_Type,omitempty"`
	MetallType       *String  `xml:"Металл_Type" json:"Металл_Type,omitempty"`
}

type CatalogfmAnketaKlienta struct {
	Key               Guid                                              `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion       *String                                           `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description       *String                                           `xml:"Description" json:"Description,omitempty"`
	Code              *String                                           `xml:"Code" json:"Code,omitempty"`
	OwnerKey          *Guid                                             `xml:"Owner_Key" json:"Owner_Key,omitempty"`
	DeletionMark      *Boolean                                          `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	DannyeKontragenta *[]CatalogfmAnketaKlientaDannyeKontragentaRowType `xml:"ДанныеКонтрагента" json:"ДанныеКонтрагента,omitempty"`
}

type CatalogfmAnketaKlientaDannyeKontragenta struct {
	Key           Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber    Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Kliuch        *String `xml:"Ключ" json:"Ключ,omitempty"`
	Znachenie     *String `xml:"Значение" json:"Значение,omitempty"`
	ZnachenieType *String `xml:"Значение_Type" json:"Значение_Type,omitempty"`
}

type CatalogVidyVzaimoraschetov struct {
	Key          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion  *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description  *String  `xml:"Description" json:"Description,omitempty"`
	Code         *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
}

type DocumentUstanovkaZnacheniiTochkiZakaza struct {
	Key              Guid                                                   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion      *String                                                `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number           *String                                                `xml:"Number" json:"Number,omitempty"`
	Date             *Time                                                  `xml:"Date" json:"Date,omitempty"`
	DeletionMark     *Boolean                                               `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted           *Boolean                                               `xml:"Posted" json:"Posted,omitempty"`
	Comment          *String                                                `xml:"Комментарий" json:"Комментарий,omitempty"`
	OtvetstvennyiKey *Guid                                                  `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey *Guid                                                  `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	DepartmentKey    *Guid                                                  `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	Goods            *[]DocumentUstanovkaZnacheniiTochkiZakazaTovaryRowType `xml:"Товары" json:"Товары,omitempty"`
}

func (entity DocumentUstanovkaZnacheniiTochkiZakaza) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentUstanovkaZnacheniiTochkiZakaza) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentUstanovkaZnacheniiTochkiZakazaTovary struct {
	Key                                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	DataKon                                        *Time   `xml:"ДатаКон" json:"ДатаКон,omitempty"`
	DataNach                                       *Time   `xml:"ДатаНач" json:"ДатаНач,omitempty"`
	ZnachenieTochkiZakaza                          *Int    `xml:"ЗначениеТочкиЗаказа" json:"ЗначениеТочкиЗаказа,omitempty"`
	MinimalnyiStrakhovoiZapas                      *Int    `xml:"МинимальныйСтраховойЗапас" json:"МинимальныйСтраховойЗапас,omitempty"`
	ItemKey                                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	ProtsentnaiaStavkaZnacheniiaTochkiZakaza       *Int    `xml:"ПроцентнаяСтавкаЗначенияТочкиЗаказа" json:"ПроцентнаяСтавкаЗначенияТочкиЗаказа,omitempty"`
	ProtsentnaiaStavkaMinimalnogoStrakhovogoZapasa *Int    `xml:"ПроцентнаяСтавкаМинимальногоСтраховогоЗапаса" json:"ПроцентнаяСтавкаМинимальногоСтраховогоЗапаса,omitempty"`
	SizeKey                                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	DepartmentKey                                  *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	SposobOpredeleniiaZnacheniiaTochkiZakaza       *String `xml:"СпособОпределенияЗначенияТочкиЗаказа" json:"СпособОпределенияЗначенияТочкиЗаказа,omitempty"`
}

type CatalogZnacheniiaKodirovki struct {
	Key          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion  *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description  *String  `xml:"Description" json:"Description,omitempty"`
	Code         *String  `xml:"Code" json:"Code,omitempty"`
	OwnerKey     *Guid    `xml:"Owner_Key" json:"Owner_Key,omitempty"`
	DeletionMark *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
}

type CatalogPravilaProdazh struct {
	Key                 Guid                                  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion         *String                               `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description         *String                               `xml:"Description" json:"Description,omitempty"`
	Code                *String                               `xml:"Code" json:"Code,omitempty"`
	DeletionMark        *Boolean                              `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	NalogooblozhenieNDS *String                               `xml:"НалогообложениеНДС" json:"НалогообложениеНДС,omitempty"`
	VidTsenKey          *Guid                                 `xml:"ВидЦен_Key" json:"ВидЦен_Key,omitempty"`
	Deistvuet           *Boolean                              `xml:"Действует" json:"Действует,omitempty"`
	Goods               *[]CatalogPravilaProdazhTovaryRowType `xml:"Товары" json:"Товары,omitempty"`
}

type CatalogPravilaProdazhTovary struct {
	Key                            Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	ItemKey                        *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	KharakteristikiNomenklaturyKey *Guid  `xml:"ХарактеристикиНоменклатуры_Key" json:"ХарактеристикиНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid  `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid  `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	Cost                           *Float `xml:"Цена" json:"Цена,omitempty"`
	Quantity                       *Int   `xml:"Количество" json:"Количество,omitempty"`
	Weight                         *Float `xml:"Вес" json:"Вес,omitempty"`
}

type DocumentPostuplenieDopRaskhodov struct {
	Key                           Guid                                            `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                   *String                                         `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                        *String                                         `xml:"Number" json:"Number,omitempty"`
	Date                          *Time                                           `xml:"Date" json:"Date,omitempty"`
	DeletionMark                  *Boolean                                        `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                        *Boolean                                        `xml:"Posted" json:"Posted,omitempty"`
	ValiutaDokumentaKey           *Guid                                           `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	Weight                        *Float                                          `xml:"ВесДокумента" json:"ВесДокумента,omitempty"`
	OperationType                 *String                                         `xml:"ВидОперации" json:"ВидОперации,omitempty"`
	DataVkhodiashchegoDokumenta   *Time                                           `xml:"ДатаВходящегоДокумента" json:"ДатаВходящегоДокумента,omitempty"`
	DogovorKontragentaKey         *Guid                                           `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie             *String                                         `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	DokumentSozdanVIuTD           *Boolean                                        `xml:"ДокументСозданВЮТД" json:"ДокументСозданВЮТД,omitempty"`
	KolichestvoDokumenta          *Int                                            `xml:"КоличествоДокумента" json:"КоличествоДокумента,omitempty"`
	Comment                       *String                                         `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey                 *Guid                                           `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	KratnostVzaimoraschetov       *Int                                            `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov           *Float                                          `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	NDSVkliuchenVStoimost         *Boolean                                        `xml:"НДСВключенВСтоимость" json:"НДСВключенВСтоимость,omitempty"`
	NomerVkhodiashchegoDokumenta  *String                                         `xml:"НомерВходящегоДокумента" json:"НомерВходящегоДокумента,omitempty"`
	OrganizatsiiaKey              *Guid                                           `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey              *Guid                                           `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey              *Guid                                           `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	Sdelka                        *String                                         `xml:"Сделка" json:"Сделка,omitempty"`
	Soderzhanie                   *String                                         `xml:"Содержание" json:"Содержание,omitempty"`
	SposobRaspredeleniia          *String                                         `xml:"СпособРаспределения" json:"СпособРаспределения,omitempty"`
	StavkaNDS                     *String                                         `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                           *Float                                          `xml:"Сумма" json:"Сумма,omitempty"`
	SummaVkliuchaetNDS            *Boolean                                        `xml:"СуммаВключаетНДС" json:"СуммаВключаетНДС,omitempty"`
	SumOfDocument                 *Float                                          `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	SummaNDS                      *Float                                          `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	TipDokumenta                  *String                                         `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	UchityvatNDS                  *Boolean                                        `xml:"УчитыватьНДС" json:"УчитыватьНДС,omitempty"`
	KhoziaistvennaiaOperatsiiaKey *Guid                                           `xml:"ХозяйственнаяОперация_Key" json:"ХозяйственнаяОперация_Key,omitempty"`
	Goods                         *[]DocumentPostuplenieDopRaskhodovTovaryRowType `xml:"Товары" json:"Товары,omitempty"`
	DokumentOsnovanieType         *String                                         `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
	SdelkaType                    *String                                         `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

func (entity DocumentPostuplenieDopRaskhodov) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentPostuplenieDopRaskhodov) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentPostuplenieDopRaskhodovTovary struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	DokumentPartii                 *String `xml:"ДокументПартии" json:"ДокументПартии,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	ProektKey                      *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	StavkaNDS                      *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                       *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	SummaRaspredeleniia            *Float  `xml:"СуммаРаспределения" json:"СуммаРаспределения,omitempty"`
	SummaTovara                    *Float  `xml:"СуммаТовара" json:"СуммаТовара,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	DokumentPartiiType             *String `xml:"ДокументПартии_Type" json:"ДокументПартии_Type,omitempty"`
}

type CatalogKhoziaistvennyeOperatsii struct {
	Key              Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion      *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description      *String  `xml:"Description" json:"Description,omitempty"`
	Code             *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark     *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	KodKhozOperatsii *String  `xml:"КодХозОперации" json:"КодХозОперации,omitempty"`
}

type DocumentAvansovyiOtchet struct {
	Key                   Guid                                                  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion           *String                                               `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                *String                                               `xml:"Number" json:"Number,omitempty"`
	Date                  *Time                                                 `xml:"Date" json:"Date,omitempty"`
	DeletionMark          *Boolean                                              `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                *Boolean                                              `xml:"Posted" json:"Posted,omitempty"`
	ValiutaDokumentaKey   *Guid                                                 `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	DokumentOsnovanie     *String                                               `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	Comment               *String                                               `xml:"Комментарий" json:"Комментарий,omitempty"`
	KratnostDokumenta     *Int                                                  `xml:"КратностьДокумента" json:"КратностьДокумента,omitempty"`
	KursDokumenta         *Float                                                `xml:"КурсДокумента" json:"КурсДокумента,omitempty"`
	NaznachenieAvansa     *String                                               `xml:"НазначениеАванса" json:"НазначениеАванса,omitempty"`
	NDSVkliuchenVStoimost *Boolean                                              `xml:"НДСВключенВСтоимость" json:"НДСВключенВСтоимость,omitempty"`
	OrganizatsiiaKey      *Guid                                                 `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey      *Guid                                                 `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey      *Guid                                                 `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	SkladOrderKey         *Guid                                                 `xml:"СкладОрдер_Key" json:"СкладОрдер_Key,omitempty"`
	SummaVkliuchaetNDS    *Boolean                                              `xml:"СуммаВключаетНДС" json:"СуммаВключаетНДС,omitempty"`
	SumOfDocument         *Float                                                `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	TipDokumenta          *String                                               `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	TipTsenKey            *Guid                                                 `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
	UchityvatNDS          *Boolean                                              `xml:"УчитыватьНДС" json:"УчитыватьНДС,omitempty"`
	FizLitsoKey           *Guid                                                 `xml:"ФизЛицо_Key" json:"ФизЛицо_Key,omitempty"`
	VydannyeAvansy        *[]DocumentAvansovyiOtchetVydannyeAvansyRowType       `xml:"ВыданныеАвансы" json:"ВыданныеАвансы,omitempty"`
	Goods                 *[]DocumentAvansovyiOtchetTovaryRowType               `xml:"Товары" json:"Товары,omitempty"`
	OplataPostavshchikam  *[]DocumentAvansovyiOtchetOplataPostavshchikamRowType `xml:"ОплатаПоставщикам" json:"ОплатаПоставщикам,omitempty"`
	Prochee               *[]DocumentAvansovyiOtchetProcheeRowType              `xml:"Прочее" json:"Прочее,omitempty"`
	DokumentOsnovanieType *String                                               `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
}

func (entity DocumentAvansovyiOtchet) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentAvansovyiOtchet) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentAvansovyiOtchetVydannyeAvansy struct {
	Key                        Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                 Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	RaskhodnyiKassovyiOrderKey *Guid  `xml:"РасходныйКассовыйОрдер_Key" json:"РасходныйКассовыйОрдер_Key,omitempty"`
	Sum                        *Float `xml:"Сумма" json:"Сумма,omitempty"`
}

type DocumentAvansovyiOtchetTovary struct {
	Key                            Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float   `xml:"Вес" json:"Вес,omitempty"`
	VidDokVkhodiashchii            *String  `xml:"ВидДокВходящий" json:"ВидДокВходящий,omitempty"`
	DataVkhodiashchegoDokumenta    *Time    `xml:"ДатаВходящегоДокумента" json:"ДатаВходящегоДокумента,omitempty"`
	DataSF                         *Time    `xml:"ДатаСФ" json:"ДатаСФ,omitempty"`
	ZakazKlientaKey                *Guid    `xml:"ЗаказКлиента_Key" json:"ЗаказКлиента_Key,omitempty"`
	KachestvoKey                   *Guid    `xml:"Качество_Key" json:"Качество_Key,omitempty"`
	Quantity                       *Int     `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	NomerVkhodiashchegoDokumenta   *String  `xml:"НомерВходящегоДокумента" json:"НомерВходящегоДокумента,omitempty"`
	NomerSF                        *String  `xml:"НомерСФ" json:"НомерСФ,omitempty"`
	SupplierKey                    *Guid    `xml:"Поставщик_Key" json:"Поставщик_Key,omitempty"`
	PredieiavlenSF                 *Boolean `xml:"ПредъявленСФ" json:"ПредъявленСФ,omitempty"`
	ProektKey                      *Guid    `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	ProtsentRoznichnoiNatsenki     *Float   `xml:"ПроцентРозничнойНаценки" json:"ПроцентРозничнойНаценки,omitempty"`
	SizeKey                        *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid    `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	DepartmentKey                  *Guid    `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	StavkaNDS                      *String  `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                            *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                       *Float   `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	SchetFakturaKey                *Guid    `xml:"СчетФактура_Key" json:"СчетФактура_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid    `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float   `xml:"Цена" json:"Цена,omitempty"`
	RetailCost                     *Float   `xml:"ЦенаВРознице" json:"ЦенаВРознице,omitempty"`
}

type DocumentAvansovyiOtchetOplataPostavshchikam struct {
	Key                          Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                   Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	VidDokVkhodiashchii          *String `xml:"ВидДокВходящий" json:"ВидДокВходящий,omitempty"`
	DataVkhodiashchegoDokumenta  *Time   `xml:"ДатаВходящегоДокумента" json:"ДатаВходящегоДокумента,omitempty"`
	DogovorKontragentaKey        *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	KontragentKey                *Guid   `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	KratnostVzaimoraschetov      *Int    `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov          *Float  `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	NomerVkhodiashchegoDokumenta *String `xml:"НомерВходящегоДокумента" json:"НомерВходящегоДокумента,omitempty"`
	Sdelka                       *String `xml:"Сделка" json:"Сделка,omitempty"`
	Soderzhanie                  *String `xml:"Содержание" json:"Содержание,omitempty"`
	Sum                          *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaVzaimoraschetov         *Float  `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	SdelkaType                   *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type DocumentAvansovyiOtchetProchee struct {
	Key                          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                   Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	VidDokVkhodiashchii          *String  `xml:"ВидДокВходящий" json:"ВидДокВходящий,omitempty"`
	DataVkhodiashchegoDokumenta  *Time    `xml:"ДатаВходящегоДокумента" json:"ДатаВходящегоДокумента,omitempty"`
	DataSF                       *Time    `xml:"ДатаСФ" json:"ДатаСФ,omitempty"`
	Zakaz                        *String  `xml:"Заказ" json:"Заказ,omitempty"`
	ItemKey                      *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	NomenklaturnaiaGruppaKey     *Guid    `xml:"НоменклатурнаяГруппа_Key" json:"НоменклатурнаяГруппа_Key,omitempty"`
	NomerVkhodiashchegoDokumenta *String  `xml:"НомерВходящегоДокумента" json:"НомерВходящегоДокумента,omitempty"`
	NomerSF                      *String  `xml:"НомерСФ" json:"НомерСФ,omitempty"`
	PodrazdelenieKey             *Guid    `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	SupplierKey                  *Guid    `xml:"Поставщик_Key" json:"Поставщик_Key,omitempty"`
	PredieiavlenSF               *Boolean `xml:"ПредъявленСФ" json:"ПредъявленСФ,omitempty"`
	ProektKey                    *Guid    `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	Soderzhanie                  *String  `xml:"Содержание" json:"Содержание,omitempty"`
	StavkaNDS                    *String  `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	StatiaZatratKey              *Guid    `xml:"СтатьяЗатрат_Key" json:"СтатьяЗатрат_Key,omitempty"`
	Sum                          *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                     *Float   `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	SchetFakturaKey              *Guid    `xml:"СчетФактура_Key" json:"СчетФактура_Key,omitempty"`
	ZakazType                    *String  `xml:"Заказ_Type" json:"Заказ_Type,omitempty"`
}

type CatalogDolzhnostiOrganizatsii struct {
	Key          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion  *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description  *String  `xml:"Description" json:"Description,omitempty"`
	Code         *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
}

type CatalogAnalitikaTipaIzdeliia struct {
	Key            Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion    *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description    *String  `xml:"Description" json:"Description,omitempty"`
	Code           *String  `xml:"Code" json:"Code,omitempty"`
	OwnerKey       *Guid    `xml:"Owner_Key" json:"Owner_Key,omitempty"`
	ParentKey      *Guid    `xml:"Parent_Key" json:"Parent_Key,omitempty"`
	IsFolder       *Boolean `xml:"IsFolder" json:"IsFolder,omitempty"`
	DeletionMark   *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	BIdentifikator *String  `xml:"Б_Идентификатор" json:"Б_Идентификатор,omitempty"`
}

type CatalogDopolnitelnyePechatnyeFormy struct {
	Key                                      Guid                                                       `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                              *String                                                    `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                              *String                                                    `xml:"Description" json:"Description,omitempty"`
	DeletionMark                             *Boolean                                                   `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	KhranilishcheVneshneiObrabotkiBase64Data *Binary                                                    `xml:"ХранилищеВнешнейОбработки_Base64Data" json:"ХранилищеВнешнейОбработки_Base64Data,omitempty"`
	Publikatsiia                             *String                                                    `xml:"Публикация" json:"Публикация,omitempty"`
	Prinadlezhnost                           *[]CatalogDopolnitelnyePechatnyeFormyPrinadlezhnostRowType `xml:"Принадлежность" json:"Принадлежность,omitempty"`
	KhranilishcheVneshneiObrabotkiType       *String                                                    `xml:"ХранилищеВнешнейОбработки_Type" json:"ХранилищеВнешнейОбработки_Type,omitempty"`
	KhranilishcheVneshneiObrabotki           *Binary                                                    `xml:"ХранилищеВнешнейОбработки" json:"ХранилищеВнешнейОбработки,omitempty"`
}

type CatalogDopolnitelnyePechatnyeFormyPrinadlezhnost struct {
	Key                   Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber            Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	PredstavlenieObieekta *String `xml:"ПредставлениеОбъекта" json:"ПредставлениеОбъекта,omitempty"`
	SsylkaObieekta        *String `xml:"СсылкаОбъекта" json:"СсылкаОбъекта,omitempty"`
	SsylkaObieektaType    *String `xml:"СсылкаОбъекта_Type" json:"СсылкаОбъекта_Type,omitempty"`
}

type MemberCardsType struct {
	Key          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion  *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description  *String  `xml:"Description" json:"Description,omitempty"`
	Code         *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
}

type DocumentRegistratsiiaNaSaite struct {
	Key                    Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion            *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                 *String  `xml:"Number" json:"Number,omitempty"`
	Date                   *Time    `xml:"Date" json:"Date,omitempty"`
	DeletionMark           *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                 *Boolean `xml:"Posted" json:"Posted,omitempty"`
	Naimenovanie           *String  `xml:"Наименование" json:"Наименование,omitempty"`
	NaimenovaniePolnoe     *String  `xml:"НаименованиеПолное" json:"НаименованиеПолное,omitempty"`
	INN                    *String  `xml:"ИНН" json:"ИНН,omitempty"`
	KPP                    *String  `xml:"КПП" json:"КПП,omitempty"`
	FIO                    *String  `xml:"ФИО" json:"ФИО,omitempty"`
	Telefon                *String  `xml:"Телефон" json:"Телефон,omitempty"`
	AdresElektronnoiPochty *String  `xml:"АдресЭлектроннойПочты" json:"АдресЭлектроннойПочты,omitempty"`
	Comment                *String  `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey          *Guid    `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	Registratsiia          *Boolean `xml:"Регистрация" json:"Регистрация,omitempty"`
	OrganizatsiiaKey       *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DogovorKontragentaKey  *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	PravoDostupa           *String  `xml:"ПравоДоступа" json:"ПравоДоступа,omitempty"`
}

func (entity DocumentRegistratsiiaNaSaite) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentRegistratsiiaNaSaite) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type CatalogObrabotkiObsluzhivaniiaTO struct {
	Key                 Guid                                             `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion         *String                                          `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description         *String                                          `xml:"Description" json:"Description,omitempty"`
	Code                *String                                          `xml:"Code" json:"Code,omitempty"`
	DeletionMark        *Boolean                                         `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Versiia             *Float                                           `xml:"Версия" json:"Версия,omitempty"`
	VersiiaAPI          *Float                                           `xml:"ВерсияAPI" json:"ВерсияAPI,omitempty"`
	Vid                 *String                                          `xml:"Вид" json:"Вид,omitempty"`
	Identifikator       *String                                          `xml:"Идентификатор" json:"Идентификатор,omitempty"`
	ImiaFaila           *String                                          `xml:"ИмяФайла" json:"ИмяФайла,omitempty"`
	ObrabotkaBase64Data *Binary                                          `xml:"Обработка_Base64Data" json:"Обработка_Base64Data,omitempty"`
	Opisanie            *String                                          `xml:"Описание" json:"Описание,omitempty"`
	Modeli              *[]CatalogObrabotkiObsluzhivaniiaTOModeliRowType `xml:"Модели" json:"Модели,omitempty"`
	ObrabotkaType       *String                                          `xml:"Обработка_Type" json:"Обработка_Type,omitempty"`
	Obrabotka           *Binary                                          `xml:"Обработка" json:"Обработка,omitempty"`
}

type CatalogObrabotkiObsluzhivaniiaTOModeli struct {
	Key        Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Model      *String `xml:"Модель" json:"Модель,omitempty"`
}

type CatalogNastroikaIntervalov struct {
	Key              Guid                                                 `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion      *String                                              `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description      *String                                              `xml:"Description" json:"Description,omitempty"`
	DeletionMark     *Boolean                                             `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	TablichnaiaChast *[]CatalogNastroikaIntervalovTablichnaiaChastRowType `xml:"ТабличнаяЧасть" json:"ТабличнаяЧасть,omitempty"`
}

type CatalogNastroikaIntervalovTablichnaiaChast struct {
	Key              Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber       Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	KonetsIntervala  *Int    `xml:"КонецИнтервала" json:"КонецИнтервала,omitempty"`
	NachaloIntervala *Int    `xml:"НачалоИнтервала" json:"НачалоИнтервала,omitempty"`
	Podpis           *String `xml:"Подпись" json:"Подпись,omitempty"`
}

type CatalogProfiliGruppDostupa struct {
	Key                                Guid                                                    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                        *String                                                 `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                        *String                                                 `xml:"Description" json:"Description,omitempty"`
	Code                               *String                                                 `xml:"Code" json:"Code,omitempty"`
	DeletionMark                       *Boolean                                                `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Comment                            *String                                                 `xml:"Комментарий" json:"Комментарий,omitempty"`
	IdentifikatorPostavliaemykhDannykh *Guid                                                   `xml:"ИдентификаторПоставляемыхДанных" json:"ИдентификаторПоставляемыхДанных,omitempty"`
	Roli                               *[]CatalogProfiliGruppDostupaRoliRowType                `xml:"Роли" json:"Роли,omitempty"`
	VidyDostupa                        *[]CatalogProfiliGruppDostupaVidyDostupaRowType         `xml:"ВидыДоступа" json:"ВидыДоступа,omitempty"`
	ZnacheniiaDostupa                  *[]CatalogProfiliGruppDostupaZnacheniiaDostupaRowType   `xml:"ЗначенияДоступа" json:"ЗначенияДоступа,omitempty"`
	DostupPoPodsistemam                *[]CatalogProfiliGruppDostupaDostupPoPodsistemamRowType `xml:"ДоступПоПодсистемам" json:"ДоступПоПодсистемам,omitempty"`
}

type CatalogProfiliGruppDostupaRoli struct {
	Key        Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	RolKey     *Guid `xml:"Роль_Key" json:"Роль_Key,omitempty"`
}

type CatalogProfiliGruppDostupaVidyDostupa struct {
	Key               Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber        Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	VidDostupa        *String  `xml:"ВидДоступа" json:"ВидДоступа,omitempty"`
	Predustanovlennyi *Boolean `xml:"Предустановленный" json:"Предустановленный,omitempty"`
	VseRazresheny     *Boolean `xml:"ВсеРазрешены" json:"ВсеРазрешены,omitempty"`
	VidDostupaType    *String  `xml:"ВидДоступа_Type" json:"ВидДоступа_Type,omitempty"`
}

type CatalogProfiliGruppDostupaZnacheniiaDostupa struct {
	Key                  Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber           Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	VidDostupa           *String `xml:"ВидДоступа" json:"ВидДоступа,omitempty"`
	ZnachenieDostupa     *String `xml:"ЗначениеДоступа" json:"ЗначениеДоступа,omitempty"`
	VidDostupaType       *String `xml:"ВидДоступа_Type" json:"ВидДоступа_Type,omitempty"`
	ZnachenieDostupaType *String `xml:"ЗначениеДоступа_Type" json:"ЗначениеДоступа_Type,omitempty"`
}

type CatalogProfiliGruppDostupaDostupPoPodsistemam struct {
	Key            Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	ImiaPodsistemy *String  `xml:"ИмяПодсистемы" json:"ИмяПодсистемы,omitempty"`
	ImiaObieekta   *String  `xml:"ИмяОбъекта" json:"ИмяОбъекта,omitempty"`
	Prosmotr       *Boolean `xml:"Просмотр" json:"Просмотр,omitempty"`
	Redaktirovanie *Boolean `xml:"Редактирование" json:"Редактирование,omitempty"`
	Pechat         *Boolean `xml:"Печать" json:"Печать,omitempty"`
	PokazVersii    *Boolean `xml:"ПоказВерсии" json:"ПоказВерсии,omitempty"`
}

type CatalogNastroikiDliaKurera struct {
	Key                                         Guid                                                    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                                 *String                                                 `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                                 *String                                                 `xml:"Description" json:"Description,omitempty"`
	Code                                        *String                                                 `xml:"Code" json:"Code,omitempty"`
	DeletionMark                                *Boolean                                                `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	OrganizatsiiaKey                            *Guid                                                   `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DepartmentKey                               *Guid                                                   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	KassaKKMKey                                 *Guid                                                   `xml:"КассаККМ_Key" json:"КассаККМ_Key,omitempty"`
	VidOplaty2                                  *String                                                 `xml:"ВидОплаты2" json:"ВидОплаты2,omitempty"`
	VidOplaty2PoUmolchaniiuKey                  *Guid                                                   `xml:"ВидОплаты2ПоУмолчанию_Key" json:"ВидОплаты2ПоУмолчанию_Key,omitempty"`
	IspolzovatVidOplaty2                        *Boolean                                                `xml:"ИспользоватьВидОплаты2" json:"ИспользоватьВидОплаты2,omitempty"`
	PechatatVtoroiEkzempliarTovarnogoCheka      *Boolean                                                `xml:"ПечататьВторойЭкземплярТоварногоЧека" json:"ПечататьВторойЭкземплярТоварногоЧека,omitempty"`
	PechatatImiaKassira                         *Boolean                                                `xml:"ПечататьИмяКассира" json:"ПечататьИмяКассира,omitempty"`
	PechatatNazvaniePlatezhnoiKarty             *Boolean                                                `xml:"ПечататьНазваниеПлатежнойКарты" json:"ПечататьНазваниеПлатежнойКарты,omitempty"`
	PechatatNumeratsiiuPozitsii                 *Boolean                                                `xml:"ПечататьНумерациюПозиций" json:"ПечататьНумерациюПозиций,omitempty"`
	PechatatTovarnyiChekPriRegistratsiiProdazhi *Boolean                                                `xml:"ПечататьТоварныйЧекПриРегистрацииПродажи" json:"ПечататьТоварныйЧекПриРегистрацииПродажи,omitempty"`
	PechatatShtrikhkodPriRegistratsiiProdazhi   *Boolean                                                `xml:"ПечататьШтрихкодПриРегистрацииПродажи" json:"ПечататьШтрихкодПриРегистрацииПродажи,omitempty"`
	TrebovatVvodPasportnykhDannykh              *Boolean                                                `xml:"ТребоватьВводПаспортныхДанных" json:"ТребоватьВводПаспортныхДанных,omitempty"`
	ZapolniatAnketuKlientaPriProdazhe           *Boolean                                                `xml:"ЗаполнятьАнкетуКлиентаПриПродаже" json:"ЗаполнятьАнкетуКлиентаПриПродаже,omitempty"`
	PrefiksDokumentov                           *String                                                 `xml:"ПрефиксДокументов" json:"ПрефиксДокументов,omitempty"`
	SostavNaimenovaniia                         *[]CatalogNastroikiDliaKureraSostavNaimenovaniiaRowType `xml:"СоставНаименования" json:"СоставНаименования,omitempty"`
}

type CatalogNastroikiDliaKureraSostavNaimenovaniia struct {
	Key                  Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber           Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	SimvolyDo            *String `xml:"СимволыДо" json:"СимволыДо,omitempty"`
	SimvolyPosle         *String `xml:"СимволыПосле" json:"СимволыПосле,omitempty"`
	ElementNaimenovaniia *String `xml:"ЭлементНаименования" json:"ЭлементНаименования,omitempty"`
}

type CatalogTipyTsenNomenklaturyKontragentov struct {
	Key                                      Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                              *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                              *String  `xml:"Description" json:"Description,omitempty"`
	Code                                     *String  `xml:"Code" json:"Code,omitempty"`
	OwnerKey                                 *Guid    `xml:"Owner_Key" json:"Owner_Key,omitempty"`
	DeletionMark                             *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	ValiutaTsenyKey                          *Guid    `xml:"ВалютаЦены_Key" json:"ВалютаЦены_Key,omitempty"`
	Comment                                  *String  `xml:"Комментарий" json:"Комментарий,omitempty"`
	OpisanieTipaTsenyNomenklaturyKontragenta *String  `xml:"ОписаниеТипаЦеныНоменклатурыКонтрагента" json:"ОписаниеТипаЦеныНоменклатурыКонтрагента,omitempty"`
	TipTsenyNomenklaturyKey                  *Guid    `xml:"ТипЦеныНоменклатуры_Key" json:"ТипЦеныНоменклатуры_Key,omitempty"`
	TsenaVkliuchaetNDS                       *Boolean `xml:"ЦенаВключаетНДС" json:"ЦенаВключаетНДС,omitempty"`
}

type DocumentJournalTsenoobrazovanie struct {
	Ref              String   `xml:"Ref" json:"Ref,omitempty"`
	Type             *String  `xml:"Type" json:"Type,omitempty"`
	Date             *Time    `xml:"Date" json:"Date,omitempty"`
	DeletionMark     *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Number           *String  `xml:"Number" json:"Number,omitempty"`
	Posted           *Boolean `xml:"Posted" json:"Posted,omitempty"`
	Informatsiia     *String  `xml:"Информация" json:"Информация,omitempty"`
	Comment          *String  `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey    *Guid    `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	OtvetstvennyiKey *Guid    `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	RefType          String   `xml:"Ref_Type" json:"Ref_Type,omitempty"`
	InformatsiiaType *String  `xml:"Информация_Type" json:"Информация_Type,omitempty"`
}

type CatalogEdinitsyIzmereniia struct {
	Key                         Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                 *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                 *String  `xml:"Description" json:"Description,omitempty"`
	Code                        *String  `xml:"Code" json:"Code,omitempty"`
	Owner                       *String  `xml:"Owner" json:"Owner,omitempty"`
	DeletionMark                *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Weight                      *Float   `xml:"Вес" json:"Вес,omitempty"`
	EdinitsaPoKlassifikatoruKey *Guid    `xml:"ЕдиницаПоКлассификатору_Key" json:"ЕдиницаПоКлассификатору_Key,omitempty"`
	Koeffitsient                *Float   `xml:"Коэффициент" json:"Коэффициент,omitempty"`
	Obieem                      *Float   `xml:"Объем" json:"Объем,omitempty"`
	BIdentifikator              *String  `xml:"Б_Идентификатор" json:"Б_Идентификатор,omitempty"`
	BNomerVersii                *String  `xml:"Б_НомерВерсии" json:"Б_НомерВерсии,omitempty"`
	OwnerType                   *String  `xml:"Owner_Type" json:"Owner_Type,omitempty"`
}

type CatalogStatiDvizheniiaDenezhnykhSredstv struct {
	Key                        Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                *String  `xml:"Description" json:"Description,omitempty"`
	Code                       *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark               *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	KorrespondiruiushchiiSchet *String  `xml:"КорреспондирующийСчет" json:"КорреспондирующийСчет,omitempty"`
}

type DocumentInkassovoePorucheniePoluchennoe struct {
	Key                              Guid                                                                  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                      *String                                                               `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                           *String                                                               `xml:"Number" json:"Number,omitempty"`
	Date                             *Time                                                                 `xml:"Date" json:"Date,omitempty"`
	DeletionMark                     *Boolean                                                              `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                           *Boolean                                                              `xml:"Posted" json:"Posted,omitempty"`
	ValiutaDokumentaKey              *Guid                                                                 `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	OperationType                    *String                                                               `xml:"ВидОперации" json:"ВидОперации,omitempty"`
	VidPlatezha                      *String                                                               `xml:"ВидПлатежа" json:"ВидПлатежа,omitempty"`
	DataVkhodiashchegoDokumenta      *Time                                                                 `xml:"ДатаВходящегоДокумента" json:"ДатаВходящегоДокумента,omitempty"`
	DataOplaty                       *Time                                                                 `xml:"ДатаОплаты" json:"ДатаОплаты,omitempty"`
	DogovorKontragentaKey            *Guid                                                                 `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie                *String                                                               `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	ZaiavkaNaRaskhodovanieSredstvKey *Guid                                                                 `xml:"ЗаявкаНаРасходованиеСредств_Key" json:"ЗаявкаНаРасходованиеСредств_Key,omitempty"`
	Comment                          *String                                                               `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey                    *Guid                                                                 `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	NaznacheniePlatezha              *String                                                               `xml:"НазначениеПлатежа" json:"НазначениеПлатежа,omitempty"`
	NomerVkhodiashchegoDokumenta     *String                                                               `xml:"НомерВходящегоДокумента" json:"НомерВходящегоДокумента,omitempty"`
	Oplacheno                        *Boolean                                                              `xml:"Оплачено" json:"Оплачено,omitempty"`
	OrganizatsiiaKey                 *Guid                                                                 `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                 *Guid                                                                 `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	OtrazhenoVOperUchete             *Boolean                                                              `xml:"ОтраженоВОперУчете" json:"ОтраженоВОперУчете,omitempty"`
	OcherednostPlatezha              *Int                                                                  `xml:"ОчередностьПлатежа" json:"ОчередностьПлатежа,omitempty"`
	TypeOfMovingMoneyKey             *Guid                                                                 `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SumOfDocument                    *Float                                                                `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	SchetKontragentaKey              *Guid                                                                 `xml:"СчетКонтрагента_Key" json:"СчетКонтрагента_Key,omitempty"`
	SchetOrganizatsiiKey             *Guid                                                                 `xml:"СчетОрганизации_Key" json:"СчетОрганизации_Key,omitempty"`
	TipDokumenta                     *String                                                               `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	ChastichnaiaOplata               *Boolean                                                              `xml:"ЧастичнаяОплата" json:"ЧастичнаяОплата,omitempty"`
	PodrazdelenieKey                 *Guid                                                                 `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	ExtendedPayments                 *[]DocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezhaRowType `xml:"РасшифровкаПлатежа" json:"РасшифровкаПлатежа,omitempty"`
	RekvizityKontragenta             *[]DocumentInkassovoePorucheniePoluchennoeRekvizityKontragentaRowType `xml:"РеквизитыКонтрагента" json:"РеквизитыКонтрагента,omitempty"`
	DokumentOsnovanieType            *String                                                               `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
}

func (entity DocumentInkassovoePorucheniePoluchennoe) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentInkassovoePorucheniePoluchennoe) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentInkassovoePorucheniePoluchennoeRasshifrovkaPlatezha struct {
	Key                              Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                       Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	DogovorKontragentaKey            *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentPlanirovaniiaPlatezhaKey *Guid   `xml:"ДокументПланированияПлатежа_Key" json:"ДокументПланированияПлатежа_Key,omitempty"`
	KratnostVzaimoraschetov          *Int    `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov              *Float  `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	KursVzaimoraschetovPlan          *Float  `xml:"КурсВзаиморасчетовПлан" json:"КурсВзаиморасчетовПлан,omitempty"`
	NomerPlatezha                    *Int    `xml:"НомерПлатежа" json:"НомерПлатежа,omitempty"`
	ProektKey                        *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	Sdelka                           *String `xml:"Сделка" json:"Сделка,omitempty"`
	StavkaNDS                        *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	TypeOfMovingMoneyKey             *Guid   `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov             *Float  `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	SummaNDS                         *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	Sum                              *Float  `xml:"СуммаПлатежа" json:"СуммаПлатежа,omitempty"`
	SummaPlatezhaPlan                *Float  `xml:"СуммаПлатежаПлан" json:"СуммаПлатежаПлан,omitempty"`
	SdelkaType                       *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type DocumentInkassovoePorucheniePoluchennoeRekvizityKontragenta struct {
	Key            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Znachenie      *String `xml:"Значение" json:"Значение,omitempty"`
	Predstavlenie  *String `xml:"Представление" json:"Представление,omitempty"`
	Rekvizit       *String `xml:"Реквизит" json:"Реквизит,omitempty"`
	TipKontragenta *String `xml:"ТипКонтрагента" json:"ТипКонтрагента,omitempty"`
}

type CatalogNastroikiObmenaDannymiShtrikhM struct {
	Key                        Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                *String  `xml:"Description" json:"Description,omitempty"`
	Code                       *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark               *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	VidZagruzkiOtchetov        *String  `xml:"ВидЗагрузкиОтчетов" json:"ВидЗагрузкиОтчетов,omitempty"`
	VidOplaty2Key              *Guid    `xml:"ВидОплаты2_Key" json:"ВидОплаты2_Key,omitempty"`
	VidOplaty3Key              *Guid    `xml:"ВидОплаты3_Key" json:"ВидОплаты3_Key,omitempty"`
	VidOplaty4Key              *Guid    `xml:"ВидОплаты4_Key" json:"ВидОплаты4_Key,omitempty"`
	VygruzhatSkhemyNakopleniia *Boolean `xml:"ВыгружатьСхемыНакопления" json:"ВыгружатьСхемыНакопления,omitempty"`
	ImiaFailaVygruzki          *String  `xml:"ИмяФайлаВыгрузки" json:"ИмяФайлаВыгрузки,omitempty"`
	ImiaFailaZagruzki          *String  `xml:"ИмяФайлаЗагрузки" json:"ИмяФайлаЗагрузки,omitempty"`
	OrganizatsiiaKey           *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DepartmentKey              *Guid    `xml:"Склад_Key" json:"Склад_Key,omitempty"`
}

type CatalogStatiZatrat struct {
	Key                                 Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                         *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                         *String  `xml:"Description" json:"Description,omitempty"`
	Code                                *String  `xml:"Code" json:"Code,omitempty"`
	ParentKey                           *Guid    `xml:"Parent_Key" json:"Parent_Key,omitempty"`
	IsFolder                            *Boolean `xml:"IsFolder" json:"IsFolder,omitempty"`
	DeletionMark                        *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	VidZatrat                           *String  `xml:"ВидЗатрат" json:"ВидЗатрат,omitempty"`
	VidRaskhodovNU                      *String  `xml:"ВидРасходовНУ" json:"ВидРасходовНУ,omitempty"`
	OtnesenieRaskhodovKDeiatelnostiENVD *String  `xml:"ОтнесениеРасходовКДеятельностиЕНВД" json:"ОтнесениеРасходовКДеятельностиЕНВД,omitempty"`
	KharakterZatrat                     *String  `xml:"ХарактерЗатрат" json:"ХарактерЗатрат,omitempty"`
	KorrespondiruiushchiiSchet          *String  `xml:"КорреспондирующийСчет" json:"КорреспондирующийСчет,omitempty"`
}

type DocumentVozvratTovarovOtPokupatelia struct {
	Key                           Guid                                                `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                   *String                                             `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                        *String                                             `xml:"Number" json:"Number,omitempty"`
	Date                          *Time                                               `xml:"Date" json:"Date,omitempty"`
	DeletionMark                  *Boolean                                            `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                        *Boolean                                            `xml:"Posted" json:"Posted,omitempty"`
	BankovskiiSchetKontragentaKey *Guid                                               `xml:"БанковскийСчетКонтрагента_Key" json:"БанковскийСчетКонтрагента_Key,omitempty"`
	ValiutaDokumentaKey           *Guid                                               `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	Weight                        *Float                                              `xml:"ВесДокумента" json:"ВесДокумента,omitempty"`
	GruzootpravitelKey            *Guid                                               `xml:"Грузоотправитель_Key" json:"Грузоотправитель_Key,omitempty"`
	GruzopoluchatelKey            *Guid                                               `xml:"Грузополучатель_Key" json:"Грузополучатель_Key,omitempty"`
	DataVkhodiashchegoDokumenta   *Time                                               `xml:"ДатаВходящегоДокумента" json:"ДатаВходящегоДокумента,omitempty"`
	DogovorKontragentaKey         *Guid                                               `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie             *String                                             `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	DokumentSozdanVIuTD           *Boolean                                            `xml:"ДокументСозданВЮТД" json:"ДокументСозданВЮТД,omitempty"`
	ZakrytieDnia                  *Boolean                                            `xml:"ЗакрытиеДня" json:"ЗакрытиеДня,omitempty"`
	KolichestvoDokumenta          *Int                                                `xml:"КоличествоДокумента" json:"КоличествоДокумента,omitempty"`
	Comment                       *String                                             `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey                 *Guid                                               `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	KratnostVzaimoraschetov       *Int                                                `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov           *Float                                              `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	Metall                        *String                                             `xml:"Металл" json:"Металл,omitempty"`
	NomerVkhodiashchegoDokumenta  *String                                             `xml:"НомерВходящегоДокумента" json:"НомерВходящегоДокумента,omitempty"`
	OrganizatsiiaKey              *Guid                                               `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey              *Guid                                               `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey              *Guid                                               `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	ProektKey                     *Guid                                               `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	Sdelka                        *String                                             `xml:"Сделка" json:"Сделка,omitempty"`
	SkladOrderKey                 *Guid                                               `xml:"СкладОрдер_Key" json:"СкладОрдер_Key,omitempty"`
	SummaVkliuchaetNDS            *Boolean                                            `xml:"СуммаВключаетНДС" json:"СуммаВключаетНДС,omitempty"`
	SumOfDocument                 *Float                                              `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	TipDokumenta                  *String                                             `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	TipTsenKey                    *Guid                                               `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
	UchityvatVesVstavok           *Boolean                                            `xml:"УчитыватьВесВставок" json:"УчитыватьВесВставок,omitempty"`
	UchityvatNDS                  *Boolean                                            `xml:"УчитыватьНДС" json:"УчитыватьНДС,omitempty"`
	KhoziaistvennaiaOperatsiiaKey *Guid                                               `xml:"ХозяйственнаяОперация_Key" json:"ХозяйственнаяОперация_Key,omitempty"`
	Goods                         *[]DocumentVozvratTovarovOtPokupateliaTovaryRowType `xml:"Товары" json:"Товары,omitempty"`
	Uslugi                        *[]DocumentVozvratTovarovOtPokupateliaUslugiRowType `xml:"Услуги" json:"Услуги,omitempty"`
	DokumentOsnovanieType         *String                                             `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
	SdelkaType                    *String                                             `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

func (entity DocumentVozvratTovarovOtPokupatelia) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentVozvratTovarovOtPokupatelia) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentVozvratTovarovOtPokupateliaTovary struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	DokumentOprikhodovaniia        *String `xml:"ДокументОприходования" json:"ДокументОприходования,omitempty"`
	DokumentPartii                 *String `xml:"ДокументПартии" json:"ДокументПартии,omitempty"`
	KachestvoKey                   *Guid   `xml:"Качество_Key" json:"Качество_Key,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	Pasport                        *String `xml:"Паспорт" json:"Паспорт,omitempty"`
	PercentManualDiscount          *Float  `xml:"ПроцентРучнойСкидки" json:"ПроцентРучнойСкидки,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	Sebestoimost                   *Float  `xml:"Себестоимость" json:"Себестоимость,omitempty"`
	SebestoimostBezNDS             *Float  `xml:"СебестоимостьБезНДС" json:"СебестоимостьБезНДС,omitempty"`
	SebestoimostUpr                *Float  `xml:"СебестоимостьУпр" json:"СебестоимостьУпр,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	SumManualDiscount              *Float  `xml:"СуммаРучнойСкидки" json:"СуммаРучнойСкидки,omitempty"`
	DepartmentKey                  *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	StavkaNDS                      *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	StatusPartii                   *String `xml:"СтатусПартии" json:"СтатусПартии,omitempty"`
	Sum                            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                       *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float  `xml:"Цена" json:"Цена,omitempty"`
	OrderKey                       *Guid   `xml:"КлючПродажи_Key" json:"КлючПродажи_Key,omitempty"`
	DokumentOprikhodovaniiaType    *String `xml:"ДокументОприходования_Type" json:"ДокументОприходования_Type,omitempty"`
	DokumentPartiiType             *String `xml:"ДокументПартии_Type" json:"ДокументПартии_Type,omitempty"`
}

type DocumentVozvratTovarovOtPokupateliaUslugi struct {
	Key                      Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber               Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Quantity                 *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                  *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	ProtsentOtSummuDokumenta *Float  `xml:"ПроцентОтСуммуДокумента" json:"ПроцентОтСуммуДокумента,omitempty"`
	ProtsentOtSummyDokumenta *Float  `xml:"ПроцентОтСуммыДокумента" json:"ПроцентОтСуммыДокумента,omitempty"`
	ProtsentSkidkiNatsenki   *Float  `xml:"ПроцентСкидкиНаценки" json:"ПроцентСкидкиНаценки,omitempty"`
	Soderzhanie              *String `xml:"Содержание" json:"Содержание,omitempty"`
	StavkaNDS                *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                      *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                 *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	Cost                     *Float  `xml:"Цена" json:"Цена,omitempty"`
}

type DocumentZakazPostavshchiku struct {
	Key                           Guid                                       `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                   *String                                    `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                        *String                                    `xml:"Number" json:"Number,omitempty"`
	Date                          *Time                                      `xml:"Date" json:"Date,omitempty"`
	DeletionMark                  *Boolean                                   `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                        *Boolean                                   `xml:"Posted" json:"Posted,omitempty"`
	ValiutaDokumentaKey           *Guid                                      `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	Weight                        *Float                                     `xml:"ВесДокумента" json:"ВесДокумента,omitempty"`
	VremiaNapominaniia            *Time                                      `xml:"ВремяНапоминания" json:"ВремяНапоминания,omitempty"`
	DataOplaty                    *Time                                      `xml:"ДатаОплаты" json:"ДатаОплаты,omitempty"`
	DataPostupleniia              *Time                                      `xml:"ДатаПоступления" json:"ДатаПоступления,omitempty"`
	DogovorKontragentaKey         *Guid                                      `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie             *String                                    `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	KolichestvoDokumenta          *Int                                       `xml:"КоличествоДокумента" json:"КоличествоДокумента,omitempty"`
	Comment                       *String                                    `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontaktnoeLitsoKey            *Guid                                      `xml:"КонтактноеЛицо_Key" json:"КонтактноеЛицо_Key,omitempty"`
	KontragentKey                 *Guid                                      `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	KratnostVzaimoraschetov       *Int                                       `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov           *Float                                     `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	NapomnitOSobytii              *Boolean                                   `xml:"НапомнитьОСобытии" json:"НапомнитьОСобытии,omitempty"`
	OrganizatsiiaKey              *Guid                                      `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey              *Guid                                      `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	ParametryOtboraBase64Data     *Binary                                    `xml:"ПараметрыОтбора_Base64Data" json:"ПараметрыОтбора_Base64Data,omitempty"`
	PodrazdelenieKey              *Guid                                      `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	DepartmentKey                 *Guid                                      `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	Soglasovano                   *Boolean                                   `xml:"Согласовано" json:"Согласовано,omitempty"`
	StrukturnaiaEdinitsa          *String                                    `xml:"СтруктурнаяЕдиница" json:"СтруктурнаяЕдиница,omitempty"`
	SummaVkliuchaetNDS            *Boolean                                   `xml:"СуммаВключаетНДС" json:"СуммаВключаетНДС,omitempty"`
	SumOfDocument                 *Float                                     `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	TipDokumenta                  *String                                    `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	TipTsenKey                    *Guid                                      `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
	UchityvatNDS                  *Boolean                                   `xml:"УчитыватьНДС" json:"УчитыватьНДС,omitempty"`
	KhoziaistvennaiaOperatsiiaKey *Guid                                      `xml:"ХозяйственнаяОперация_Key" json:"ХозяйственнаяОперация_Key,omitempty"`
	Goods                         *[]DocumentZakazPostavshchikuTovaryRowType `xml:"Товары" json:"Товары,omitempty"`
	DokumentOsnovanieType         *String                                    `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
	ParametryOtboraType           *String                                    `xml:"ПараметрыОтбора_Type" json:"ПараметрыОтбора_Type,omitempty"`
	StrukturnaiaEdinitsaType      *String                                    `xml:"СтруктурнаяЕдиница_Type" json:"СтруктурнаяЕдиница_Type,omitempty"`
	ParametryOtbora               *Binary                                    `xml:"ПараметрыОтбора" json:"ПараметрыОтбора,omitempty"`
}

func (entity DocumentZakazPostavshchiku) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentZakazPostavshchiku) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentZakazPostavshchikuTovary struct {
	Key             Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber      Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight          *Float  `xml:"Вес" json:"Вес,omitempty"`
	ZakazKlientaKey *Guid   `xml:"ЗаказКлиента_Key" json:"ЗаказКлиента_Key,omitempty"`
	Quantity        *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey         *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey         *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	StavkaNDS       *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum             *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS        *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	Cost            *Float  `xml:"Цена" json:"Цена,omitempty"`
}

type CatalogSkidkiNatsenki struct {
	Key                                                          Guid                                                   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                                                  *String                                                `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                                                  *String                                                `xml:"Description" json:"Description,omitempty"`
	ParentKey                                                    *Guid                                                  `xml:"Parent_Key" json:"Parent_Key,omitempty"`
	IsFolder                                                     *Boolean                                               `xml:"IsFolder" json:"IsFolder,omitempty"`
	DeletionMark                                                 *Boolean                                               `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	ValiutaPredostavleniiaKey                                    *Guid                                                  `xml:"ВалютаПредоставления_Key" json:"ВалютаПредоставления_Key,omitempty"`
	VariantSovmestnogoPrimeneniia                                *String                                                `xml:"ВариантСовместногоПрименения" json:"ВариантСовместногоПрименения,omitempty"`
	ZnachenieSkidkiNatsenki                                      *Float                                                 `xml:"ЗначениеСкидкиНаценки" json:"ЗначениеСкидкиНаценки,omitempty"`
	MomentVydachiSoobshcheniia                                   *String                                                `xml:"МоментВыдачиСообщения" json:"МоментВыдачиСообщения,omitempty"`
	OblastPredostavleniia                                        *String                                                `xml:"ОбластьПредоставления" json:"ОбластьПредоставления,omitempty"`
	PodarokIzKorzinyPokupatelia                                  *Boolean                                               `xml:"ПодарокИзКорзиныПокупателя" json:"ПодарокИзКорзиныПокупателя,omitempty"`
	PodarokIzSpiska                                              *Boolean                                               `xml:"ПодарокИзСписка" json:"ПодарокИзСписка,omitempty"`
	RekvizitDopUporiadochivaniia                                 *Int                                                   `xml:"РеквизитДопУпорядочивания" json:"РеквизитДопУпорядочивания,omitempty"`
	SegmentNomenklaturyPredostavleniiaKey                        *Guid                                                  `xml:"СегментНоменклатурыПредоставления_Key" json:"СегментНоменклатурыПредоставления_Key,omitempty"`
	SposobPredostavleniia                                        *String                                                `xml:"СпособПредоставления" json:"СпособПредоставления,omitempty"`
	StatusDeistviia                                              *String                                                `xml:"СтатусДействия" json:"СтатусДействия,omitempty"`
	TekstSoobshcheniia                                           *String                                                `xml:"ТекстСообщения" json:"ТекстСообщения,omitempty"`
	Upravliaemaia                                                *Boolean                                               `xml:"Управляемая" json:"Управляемая,omitempty"`
	UchityvatPodarokKakProdazhu                                  *Boolean                                               `xml:"УчитыватьПодарокКакПродажу" json:"УчитыватьПодарокКакПродажу,omitempty"`
	KuponKey                                                     *Guid                                                  `xml:"Купон_Key" json:"Купон_Key,omitempty"`
	DataSpisaniia                                                *Boolean                                               `xml:"ДатаСписания" json:"ДатаСписания,omitempty"`
	VariantOtboraNomenklatury                                    *String                                                `xml:"ВариантОтбораНоменклатуры" json:"ВариантОтбораНоменклатуры,omitempty"`
	SegmentNomenklaturyIskliucheniiaKey                          *Guid                                                  `xml:"СегментНоменклатурыИсключения_Key" json:"СегментНоменклатурыИсключения_Key,omitempty"`
	VariantOtboraIskliucheniiNomenklatury                        *String                                                `xml:"ВариантОтбораИсключенийНоменклатуры" json:"ВариантОтбораИсключенийНоменклатуры,omitempty"`
	KhranilishcheNastroekKomponovkiDannykhBase64Data             *Binary                                                `xml:"ХранилищеНастроекКомпоновкиДанных_Base64Data" json:"ХранилищеНастроекКомпоновкиДанных_Base64Data,omitempty"`
	KhranilishcheNastroekKomponovkiDannykhIskliuchenieBase64Data *Binary                                                `xml:"ХранилищеНастроекКомпоновкиДанныхИсключение_Base64Data" json:"ХранилищеНастроекКомпоновкиДанныхИсключение_Base64Data,omitempty"`
	VidTsenyKey                                                  *Guid                                                  `xml:"ВидЦены_Key" json:"ВидЦены_Key,omitempty"`
	KolichestvoPodarkovIzKorzinyPokupatelia                      *Int                                                   `xml:"КоличествоПодарковИзКорзиныПокупателя" json:"КоличествоПодарковИзКорзиныПокупателя,omitempty"`
	KratnoKolichestvuUslovii                                     *Boolean                                               `xml:"КратноКоличествуУсловий" json:"КратноКоличествуУсловий,omitempty"`
	OgranichenieRazmeraPodchinennykhSkidok                       *Boolean                                               `xml:"ОграничениеРазмераПодчиненныхСкидок" json:"ОграничениеРазмераПодчиненныхСкидок,omitempty"`
	UsloviiaPredostavleniia                                      *[]CatalogSkidkiNatsenkiUsloviiaPredostavleniiaRowType `xml:"УсловияПредоставления" json:"УсловияПредоставления,omitempty"`
	TsenovyeGruppy                                               *[]CatalogSkidkiNatsenkiTsenovyeGruppyRowType          `xml:"ЦеновыеГруппы" json:"ЦеновыеГруппы,omitempty"`
	NaborPodarkov                                                *[]CatalogSkidkiNatsenkiNaborPodarkovRowType           `xml:"НаборПодарков" json:"НаборПодарков,omitempty"`
	KhranilishcheNastroekKomponovkiDannykhType                   *String                                                `xml:"ХранилищеНастроекКомпоновкиДанных_Type" json:"ХранилищеНастроекКомпоновкиДанных_Type,omitempty"`
	KhranilishcheNastroekKomponovkiDannykhIskliuchenieType       *String                                                `xml:"ХранилищеНастроекКомпоновкиДанныхИсключение_Type" json:"ХранилищеНастроекКомпоновкиДанныхИсключение_Type,omitempty"`
	KhranilishcheNastroekKomponovkiDannykh                       *Binary                                                `xml:"ХранилищеНастроекКомпоновкиДанных" json:"ХранилищеНастроекКомпоновкиДанных,omitempty"`
	KhranilishcheNastroekKomponovkiDannykhIskliuchenie           *Binary                                                `xml:"ХранилищеНастроекКомпоновкиДанныхИсключение" json:"ХранилищеНастроекКомпоновкиДанныхИсключение,omitempty"`
}

type CatalogSkidkiNatsenkiUsloviiaPredostavleniia struct {
	Key                       Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	UsloviePredostavleniiaKey *Guid `xml:"УсловиеПредоставления_Key" json:"УсловиеПредоставления_Key,omitempty"`
}

type CatalogSkidkiNatsenkiTsenovyeGruppy struct {
	Key                     Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber              Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	TsenovaiaGruppaKey      *Guid  `xml:"ЦеноваяГруппа_Key" json:"ЦеноваяГруппа_Key,omitempty"`
	ZnachenieSkidkiNatsenki *Float `xml:"ЗначениеСкидкиНаценки" json:"ЗначениеСкидкиНаценки,omitempty"`
}

type CatalogSkidkiNatsenkiNaborPodarkov struct {
	Key                            Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	ItemKey                        *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid  `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Quantity                       *Float `xml:"Количество" json:"Количество,omitempty"`
	SizeKey                        *Guid  `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid  `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
}

type CatalogGruppyTsvetov struct {
	Key          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion  *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description  *String  `xml:"Description" json:"Description,omitempty"`
	Code         *String  `xml:"Code" json:"Code,omitempty"`
	OwnerKey     *Guid    `xml:"Owner_Key" json:"Owner_Key,omitempty"`
	DeletionMark *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
}

type DocumentDokumentRaschetovSKontragentom struct {
	Key                          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                  *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                       *String  `xml:"Number" json:"Number,omitempty"`
	Date                         *Time    `xml:"Date" json:"Date,omitempty"`
	DeletionMark                 *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                       *Boolean `xml:"Posted" json:"Posted,omitempty"`
	DataVkhodiashchegoDokumenta  *Time    `xml:"ДатаВходящегоДокумента" json:"ДатаВходящегоДокумента,omitempty"`
	DogovorKontragentaKey        *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanieKey         *Guid    `xml:"ДокументОснование_Key" json:"ДокументОснование_Key,omitempty"`
	Comment                      *String  `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey                *Guid    `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	NomerVkhodiashchegoDokumenta *String  `xml:"НомерВходящегоДокумента" json:"НомерВходящегоДокумента,omitempty"`
	OrganizatsiiaKey             *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DepartmentKey                *Guid    `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	OperationType                *String  `xml:"ВидОперации" json:"ВидОперации,omitempty"`
	SumOfDocument                *Float   `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
}

func (entity DocumentDokumentRaschetovSKontragentom) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentDokumentRaschetovSKontragentom) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type CatalogDogovoryEkvairinga struct {
	Key                                        Guid                                                               `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                                *String                                                            `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                                *String                                                            `xml:"Description" json:"Description,omitempty"`
	Code                                       *String                                                            `xml:"Code" json:"Code,omitempty"`
	DeletionMark                               *Boolean                                                           `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	AvtomaticheskiVychitatSummuTorgovoiUstupki *Boolean                                                           `xml:"АвтоматическиВычитатьСуммуТорговойУступки" json:"АвтоматическиВычитатьСуммуТорговойУступки,omitempty"`
	DogovorVzaimoraschetovKey                  *Guid                                                              `xml:"ДоговорВзаиморасчетов_Key" json:"ДоговорВзаиморасчетов_Key,omitempty"`
	EkvairerKey                                *Guid                                                              `xml:"Эквайрер_Key" json:"Эквайрер_Key,omitempty"`
	TarifyZaRaschetnoeObsluzhivanie            *[]CatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanieRowType `xml:"ТарифыЗаРасчетноеОбслуживание" json:"ТарифыЗаРасчетноеОбслуживание,omitempty"`
}

type CatalogDogovoryEkvairingaTarifyZaRaschetnoeObsluzhivanie struct {
	Key                     Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber              Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	VidOplatyKey            *Guid  `xml:"ВидОплаты_Key" json:"ВидОплаты_Key,omitempty"`
	ProtsentTorgovoiUstupki *Float `xml:"ПроцентТорговойУступки" json:"ПроцентТорговойУступки,omitempty"`
}

type CatalogKachestvo struct {
	Key          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion  *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description  *String  `xml:"Description" json:"Description,omitempty"`
	Code         *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
}

type DocumentUstanovkaTsenNomenklaturyKontragentov struct {
	Key                         Guid                                                            `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                 *String                                                         `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                      *String                                                         `xml:"Number" json:"Number,omitempty"`
	Date                        *Time                                                           `xml:"Date" json:"Date,omitempty"`
	DeletionMark                *Boolean                                                        `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                      *Boolean                                                        `xml:"Posted" json:"Posted,omitempty"`
	DokumentOsnovanie           *String                                                         `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	Informatsiia                *String                                                         `xml:"Информация" json:"Информация,omitempty"`
	Comment                     *String                                                         `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey               *Guid                                                           `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	NeProvoditNulevyeZnacheniia *Boolean                                                        `xml:"НеПроводитьНулевыеЗначения" json:"НеПроводитьНулевыеЗначения,omitempty"`
	OtvetstvennyiKey            *Guid                                                           `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	TipyTsen                    *[]DocumentUstanovkaTsenNomenklaturyKontragentovTipyTsenRowType `xml:"ТипыЦен" json:"ТипыЦен,omitempty"`
	Goods                       *[]DocumentUstanovkaTsenNomenklaturyKontragentovTovaryRowType   `xml:"Товары" json:"Товары,omitempty"`
	DokumentOsnovanieType       *String                                                         `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
}

func (entity DocumentUstanovkaTsenNomenklaturyKontragentov) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentUstanovkaTsenNomenklaturyKontragentov) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentUstanovkaTsenNomenklaturyKontragentovTipyTsen struct {
	Key        Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	TipTsenKey *Guid `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
}

type DocumentUstanovkaTsenNomenklaturyKontragentovTovary struct {
	Key                            Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	ValiutaKey                     *Guid  `xml:"Валюта_Key" json:"Валюта_Key,omitempty"`
	IndeksStrokiTablitsyTsen       *Int   `xml:"ИндексСтрокиТаблицыЦен" json:"ИндексСтрокиТаблицыЦен,omitempty"`
	ItemKey                        *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid  `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	TipTsenKey                     *Guid  `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid  `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float `xml:"Цена" json:"Цена,omitempty"`
}

type DocumentProtsentPoterPoDavaltsam struct {
	Key                   Guid                                                `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion           *String                                             `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                *String                                             `xml:"Number" json:"Number,omitempty"`
	Date                  *Time                                               `xml:"Date" json:"Date,omitempty"`
	DeletionMark          *Boolean                                            `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                *Boolean                                            `xml:"Posted" json:"Posted,omitempty"`
	DogovorKontragentaKey *Guid                                               `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanieKey  *Guid                                               `xml:"ДокументОснование_Key" json:"ДокументОснование_Key,omitempty"`
	Comment               *String                                             `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey         *Guid                                               `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	OrganizatsiiaKey      *Guid                                               `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey      *Guid                                               `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	Protsenty             *[]DocumentProtsentPoterPoDavaltsamProtsentyRowType `xml:"Проценты" json:"Проценты,omitempty"`
}

func (entity DocumentProtsentPoterPoDavaltsam) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentProtsentPoterPoDavaltsam) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentProtsentPoterPoDavaltsamProtsenty struct {
	Key        Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	ItemKey    *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	Protsent   *Float `xml:"Процент" json:"Процент,omitempty"`
}

type CatalogTovarnyePozitsii struct {
	Key            Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion    *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description    *String  `xml:"Description" json:"Description,omitempty"`
	DeletionMark   *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Pozitsiia1     *String  `xml:"Позиция1" json:"Позиция1,omitempty"`
	Pozitsiia2     *String  `xml:"Позиция2" json:"Позиция2,omitempty"`
	Pozitsiia3     *String  `xml:"Позиция3" json:"Позиция3,omitempty"`
	Pozitsiia4     *String  `xml:"Позиция4" json:"Позиция4,omitempty"`
	Pozitsiia5     *String  `xml:"Позиция5" json:"Позиция5,omitempty"`
	Pozitsiia6     *String  `xml:"Позиция6" json:"Позиция6,omitempty"`
	Pozitsiia7     *String  `xml:"Позиция7" json:"Позиция7,omitempty"`
	Pozitsiia1Type *String  `xml:"Позиция1_Type" json:"Позиция1_Type,omitempty"`
	Pozitsiia2Type *String  `xml:"Позиция2_Type" json:"Позиция2_Type,omitempty"`
	Pozitsiia3Type *String  `xml:"Позиция3_Type" json:"Позиция3_Type,omitempty"`
	Pozitsiia4Type *String  `xml:"Позиция4_Type" json:"Позиция4_Type,omitempty"`
	Pozitsiia5Type *String  `xml:"Позиция5_Type" json:"Позиция5_Type,omitempty"`
	Pozitsiia6Type *String  `xml:"Позиция6_Type" json:"Позиция6_Type,omitempty"`
	Pozitsiia7Type *String  `xml:"Позиция7_Type" json:"Позиция7_Type,omitempty"`
}

type DocumentPlatezhnoePoruchenieIskhodiashchee struct {
	Key                        Guid                                                                     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                *String                                                                  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                     *String                                                                  `xml:"Number" json:"Number,omitempty"`
	Date                       *Time                                                                    `xml:"Date" json:"Date,omitempty"`
	DeletionMark               *Boolean                                                                 `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                     *Boolean                                                                 `xml:"Posted" json:"Posted,omitempty"`
	ValiutaDokumentaKey        *Guid                                                                    `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	OperationType              *String                                                                  `xml:"ВидОперации" json:"ВидОперации,omitempty"`
	VidPerechisleniiaVBiudzhet *String                                                                  `xml:"ВидПеречисленияВБюджет" json:"ВидПеречисленияВБюджет,omitempty"`
	VidPlatezha                *String                                                                  `xml:"ВидПлатежа" json:"ВидПлатежа,omitempty"`
	DataOplaty                 *Time                                                                    `xml:"ДатаОплаты" json:"ДатаОплаты,omitempty"`
	DogovorKontragentaKey      *Guid                                                                    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie          *String                                                                  `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	DokumentSozdanVIuTD        *Boolean                                                                 `xml:"ДокументСозданВЮТД" json:"ДокументСозданВЮТД,omitempty"`
	IdentifikatorPlatezha      *String                                                                  `xml:"ИдентификаторПлатежа" json:"ИдентификаторПлатежа,omitempty"`
	INNPlatelshchika           *String                                                                  `xml:"ИННПлательщика" json:"ИННПлательщика,omitempty"`
	INNPoluchatelia            *String                                                                  `xml:"ИННПолучателя" json:"ИННПолучателя,omitempty"`
	KodBK                      *String                                                                  `xml:"КодБК" json:"КодБК,omitempty"`
	KodOKATO                   *String                                                                  `xml:"КодОКАТО" json:"КодОКАТО,omitempty"`
	Comment                    *String                                                                  `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey              *Guid                                                                    `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	KPPPlatelshchika           *String                                                                  `xml:"КПППлательщика" json:"КПППлательщика,omitempty"`
	KPPPoluchatelia            *String                                                                  `xml:"КПППолучателя" json:"КПППолучателя,omitempty"`
	NaznacheniePlatezha        *String                                                                  `xml:"НазначениеПлатежа" json:"НазначениеПлатежа,omitempty"`
	Oplacheno                  *Boolean                                                                 `xml:"Оплачено" json:"Оплачено,omitempty"`
	OrganizatsiiaKey           *Guid                                                                    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey           *Guid                                                                    `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	OtrazhenoVOperUchete       *Boolean                                                                 `xml:"ОтраженоВОперУчете" json:"ОтраженоВОперУчете,omitempty"`
	OcherednostPlatezha        *Int                                                                     `xml:"ОчередностьПлатежа" json:"ОчередностьПлатежа,omitempty"`
	PerechislenieVBiudzhet     *Boolean                                                                 `xml:"ПеречислениеВБюджет" json:"ПеречислениеВБюджет,omitempty"`
	PodrazdelenieKey           *Guid                                                                    `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	PokazatelDaty              *Time                                                                    `xml:"ПоказательДаты" json:"ПоказательДаты,omitempty"`
	PokazatelNomera            *String                                                                  `xml:"ПоказательНомера" json:"ПоказательНомера,omitempty"`
	PokazatelOsnovaniia        *String                                                                  `xml:"ПоказательОснования" json:"ПоказательОснования,omitempty"`
	PokazatelPerioda           *String                                                                  `xml:"ПоказательПериода" json:"ПоказательПериода,omitempty"`
	PokazatelTipa              *String                                                                  `xml:"ПоказательТипа" json:"ПоказательТипа,omitempty"`
	StatusSostavitelia         *String                                                                  `xml:"СтатусСоставителя" json:"СтатусСоставителя,omitempty"`
	TypeOfMovingMoneyKey       *Guid                                                                    `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SumOfDocument              *Float                                                                   `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	SchetKontragentaKey        *Guid                                                                    `xml:"СчетКонтрагента_Key" json:"СчетКонтрагента_Key,omitempty"`
	SchetOrganizatsiiKey       *Guid                                                                    `xml:"СчетОрганизации_Key" json:"СчетОрганизации_Key,omitempty"`
	TekstPlatelshchika         *String                                                                  `xml:"ТекстПлательщика" json:"ТекстПлательщика,omitempty"`
	TekstPoluchatelia          *String                                                                  `xml:"ТекстПолучателя" json:"ТекстПолучателя,omitempty"`
	TipDokumenta               *String                                                                  `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	ChastichnaiaOplata         *Boolean                                                                 `xml:"ЧастичнаяОплата" json:"ЧастичнаяОплата,omitempty"`
	ExtendedPayments           *[]DocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezhaRowType `xml:"РасшифровкаПлатежа" json:"РасшифровкаПлатежа,omitempty"`
	RekvizityKontragenta       *[]DocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragentaRowType `xml:"РеквизитыКонтрагента" json:"РеквизитыКонтрагента,omitempty"`
	DokumentOsnovanieType      *String                                                                  `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
}

func (entity DocumentPlatezhnoePoruchenieIskhodiashchee) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentPlatezhnoePoruchenieIskhodiashchee) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentPlatezhnoePoruchenieIskhodiashcheeRasshifrovkaPlatezha struct {
	Key                              Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                       Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	DogovorKontragentaKey            *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentPlanirovaniiaPlatezhaKey *Guid   `xml:"ДокументПланированияПлатежа_Key" json:"ДокументПланированияПлатежа_Key,omitempty"`
	KratnostVzaimoraschetov          *Int    `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov              *Float  `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	KursVzaimoraschetovPlan          *Float  `xml:"КурсВзаиморасчетовПлан" json:"КурсВзаиморасчетовПлан,omitempty"`
	ProektKey                        *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	Sdelka                           *String `xml:"Сделка" json:"Сделка,omitempty"`
	StavkaNDS                        *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	TypeOfMovingMoneyKey             *Guid   `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov             *Float  `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	SummaNDS                         *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	Sum                              *Float  `xml:"СуммаПлатежа" json:"СуммаПлатежа,omitempty"`
	SummaPlatezhaPlan                *Float  `xml:"СуммаПлатежаПлан" json:"СуммаПлатежаПлан,omitempty"`
	SdelkaType                       *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type DocumentPlatezhnoePoruchenieIskhodiashcheeRekvizityKontragenta struct {
	Key            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Znachenie      *String `xml:"Значение" json:"Значение,omitempty"`
	Predstavlenie  *String `xml:"Представление" json:"Представление,omitempty"`
	Rekvizit       *String `xml:"Реквизит" json:"Реквизит,omitempty"`
	TipKontragenta *String `xml:"ТипКонтрагента" json:"ТипКонтрагента,omitempty"`
}

type CatalogfmOrganizatsionnoPravovyeFormy struct {
	Key                Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion        *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description        *String  `xml:"Description" json:"Description,omitempty"`
	Code               *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark       *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	PolnoeNaimenovanie *String  `xml:"ПолноеНаименование" json:"ПолноеНаименование,omitempty"`
}

type CatalogTipyTsenNomenklatury struct {
	Key                       Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion               *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description               *String  `xml:"Description" json:"Description,omitempty"`
	Code                      *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark              *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	BazovyiTipTsenKey         *Guid    `xml:"БазовыйТипЦен_Key" json:"БазовыйТипЦен_Key,omitempty"`
	ValiutaTsenyKey           *Guid    `xml:"ВалютаЦены_Key" json:"ВалютаЦены_Key,omitempty"`
	VidSkidkiNatsenki         *String  `xml:"ВидСкидкиНаценки" json:"ВидСкидкиНаценки,omitempty"`
	VygruzhatTsenyNaSait      *Boolean `xml:"ВыгружатьЦеныНаСайт" json:"ВыгружатьЦеныНаСайт,omitempty"`
	Comment                   *String  `xml:"Комментарий" json:"Комментарий,omitempty"`
	NatsenkaNaSebestoimost    *Int     `xml:"НаценкаНаСебестоимость" json:"НаценкаНаСебестоимость,omitempty"`
	OkrugliatVBolshuiuStoronu *Boolean `xml:"ОкруглятьВБольшуюСторону" json:"ОкруглятьВБольшуюСторону,omitempty"`
	OkrugliatSummu            *Boolean `xml:"ОкруглятьСумму" json:"ОкруглятьСумму,omitempty"`
	PoriadokOkrugleniia       *String  `xml:"ПорядокОкругления" json:"ПорядокОкругления,omitempty"`
	ProtsentSkidkiNatsenki    *Float   `xml:"ПроцентСкидкиНаценки" json:"ПроцентСкидкиНаценки,omitempty"`
	Rasschityvaetsia          *Boolean `xml:"Рассчитывается" json:"Рассчитывается,omitempty"`
	TsenaVkliuchaetNDS        *Boolean `xml:"ЦенаВключаетНДС" json:"ЦенаВключаетНДС,omitempty"`
	DliaSegmentov             *Boolean `xml:"ДляСегментов" json:"ДляСегментов,omitempty"`
	BIdentifikator            *String  `xml:"Б_Идентификатор" json:"Б_Идентификатор,omitempty"`
}

type CatalogStatiOtchetaPoProdazham struct {
	Key          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion  *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description  *String  `xml:"Description" json:"Description,omitempty"`
	Code         *String  `xml:"Code" json:"Code,omitempty"`
	ParentKey    *Guid    `xml:"Parent_Key" json:"Parent_Key,omitempty"`
	IsFolder     *Boolean `xml:"IsFolder" json:"IsFolder,omitempty"`
	DeletionMark *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
}

type CatalogVidyKodirovokiIzdelii struct {
	Key               Guid                                                    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion       *String                                                 `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description       *String                                                 `xml:"Description" json:"Description,omitempty"`
	Code              *String                                                 `xml:"Code" json:"Code,omitempty"`
	DeletionMark      *Boolean                                                `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	ElementyKodirovki *[]CatalogVidyKodirovokiIzdeliiElementyKodirovkiRowType `xml:"ЭлементыКодировки" json:"ЭлементыКодировки,omitempty"`
}

type CatalogVidyKodirovokiIzdeliiElementyKodirovki struct {
	Key        Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Poriadok   *Int     `xml:"Порядок" json:"Порядок,omitempty"`
	Poteri     *Boolean `xml:"Потери" json:"Потери,omitempty"`
	Prais      *Boolean `xml:"Прайс" json:"Прайс,omitempty"`
	ElementKey *Guid    `xml:"Элемент_Key" json:"Элемент_Key,omitempty"`
}

type DocumentUstanovkaSkidokNomenklatury struct {
	Key                            Guid                                                             `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                    *String                                                          `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                         *String                                                          `xml:"Number" json:"Number,omitempty"`
	Date                           *Time                                                            `xml:"Date" json:"Date,omitempty"`
	DeletionMark                   *Boolean                                                         `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                         *Boolean                                                         `xml:"Posted" json:"Posted,omitempty"`
	ValiutaKey                     *Guid                                                            `xml:"Валюта_Key" json:"Валюта_Key,omitempty"`
	VidSkidki                      *String                                                          `xml:"ВидСкидки" json:"ВидСкидки,omitempty"`
	DataNachala                    *Time                                                            `xml:"ДатаНачала" json:"ДатаНачала,omitempty"`
	DataOkonchaniia                *Time                                                            `xml:"ДатаОкончания" json:"ДатаОкончания,omitempty"`
	DliaVseiNomenklatury           *Boolean                                                         `xml:"ДляВсейНоменклатуры" json:"ДляВсейНоменклатуры,omitempty"`
	DliaVsekhPoluchatelei          *Boolean                                                         `xml:"ДляВсехПолучателей" json:"ДляВсехПолучателей,omitempty"`
	DokumentSozdanVIuTD            *Boolean                                                         `xml:"ДокументСозданВЮТД" json:"ДокументСозданВЮТД,omitempty"`
	ZnachenieUsloviia              *String                                                          `xml:"ЗначениеУсловия" json:"ЗначениеУсловия,omitempty"`
	Comment                        *String                                                          `xml:"Комментарий" json:"Комментарий,omitempty"`
	ObshcheeVremiaNachala          *Time                                                            `xml:"ОбщееВремяНачала" json:"ОбщееВремяНачала,omitempty"`
	ObshcheeVremiaOkonchaniia      *Time                                                            `xml:"ОбщееВремяОкончания" json:"ОбщееВремяОкончания,omitempty"`
	OgranichenieSkidkiNatsenki     *Float                                                           `xml:"ОграничениеСкидкиНаценки" json:"ОграничениеСкидкиНаценки,omitempty"`
	OtvetstvennyiKey               *Guid                                                            `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	ParametryZapolneniiaBase64Data *Binary                                                          `xml:"ПараметрыЗаполнения_Base64Data" json:"ПараметрыЗаполнения_Base64Data,omitempty"`
	PoDniamNedeli                  *Boolean                                                         `xml:"ПоДнямНедели" json:"ПоДнямНедели,omitempty"`
	ProtsentSkidkiNatsenki         *Float                                                           `xml:"ПроцентСкидкиНаценки" json:"ПроцентСкидкиНаценки,omitempty"`
	TipSkidkiNatsenkiKey           *Guid                                                            `xml:"ТипСкидкиНаценки_Key" json:"ТипСкидкиНаценки_Key,omitempty"`
	Uslovie                        *String                                                          `xml:"Условие" json:"Условие,omitempty"`
	VremiaPoDniamNedeli            *[]DocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedeliRowType `xml:"ВремяПоДнямНедели" json:"ВремяПоДнямНедели,omitempty"`
	DiskontnyeKarty                *[]DocumentUstanovkaSkidokNomenklaturyDiskontnyeKartyRowType     `xml:"ДисконтныеКарты" json:"ДисконтныеКарты,omitempty"`
	PoluchateliSkidki              *[]DocumentUstanovkaSkidokNomenklaturyPoluchateliSkidkiRowType   `xml:"ПолучателиСкидки" json:"ПолучателиСкидки,omitempty"`
	Goods                          *[]DocumentUstanovkaSkidokNomenklaturyTovaryRowType              `xml:"Товары" json:"Товары,omitempty"`
	ZnachenieUsloviiaType          *String                                                          `xml:"ЗначениеУсловия_Type" json:"ЗначениеУсловия_Type,omitempty"`
	ParametryZapolneniiaType       *String                                                          `xml:"ПараметрыЗаполнения_Type" json:"ПараметрыЗаполнения_Type,omitempty"`
	ParametryZapolneniia           *Binary                                                          `xml:"ПараметрыЗаполнения" json:"ПараметрыЗаполнения,omitempty"`
}

func (entity DocumentUstanovkaSkidokNomenklatury) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentUstanovkaSkidokNomenklatury) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentUstanovkaSkidokNomenklaturyVremiaPoDniamNedeli struct {
	Key               Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber        Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	VremiaNachala     *Time    `xml:"ВремяНачала" json:"ВремяНачала,omitempty"`
	VremiaOkonchaniia *Time    `xml:"ВремяОкончания" json:"ВремяОкончания,omitempty"`
	Vybran            *Boolean `xml:"Выбран" json:"Выбран,omitempty"`
	DenNedeli         *String  `xml:"ДеньНедели" json:"ДеньНедели,omitempty"`
}

type DocumentUstanovkaSkidokNomenklaturyDiskontnyeKarty struct {
	Key           Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber    Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	MemberCardKey *Guid `xml:"ДисконтнаяКарта_Key" json:"ДисконтнаяКарта_Key,omitempty"`
}

type DocumentUstanovkaSkidokNomenklaturyPoluchateliSkidki struct {
	Key            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Poluchatel     *String `xml:"Получатель" json:"Получатель,omitempty"`
	PoluchatelType *String `xml:"Получатель_Type" json:"Получатель_Type,omitempty"`
}

type DocumentUstanovkaSkidokNomenklaturyTovary struct {
	Key                        Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                 Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	ItemKey                    *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	OgranichenieSkidkiNatsenki *Float `xml:"ОграничениеСкидкиНаценки" json:"ОграничениеСкидкиНаценки,omitempty"`
	ProtsentSkidkiNatsenki     *Float `xml:"ПроцентСкидкиНаценки" json:"ПроцентСкидкиНаценки,omitempty"`
}

type CatalogUsloviiaPredostavleniiaSkidokNatsenok struct {
	Key                                                           Guid                                                                  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                                                   *String                                                               `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                                                   *String                                                               `xml:"Description" json:"Description,omitempty"`
	Code                                                          *String                                                               `xml:"Code" json:"Code,omitempty"`
	ParentKey                                                     *Guid                                                                 `xml:"Parent_Key" json:"Parent_Key,omitempty"`
	IsFolder                                                      *Boolean                                                              `xml:"IsFolder" json:"IsFolder,omitempty"`
	DeletionMark                                                  *Boolean                                                              `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	UsloviePredostavleniia                                        *String                                                               `xml:"УсловиеПредоставления" json:"УсловиеПредоставления,omitempty"`
	VariantOpredeleniiaPeriodaNakopitelnoiSkidki                  *String                                                               `xml:"ВариантОпределенияПериодаНакопительнойСкидки" json:"ВариантОпределенияПериодаНакопительнойСкидки,omitempty"`
	VariantNakopleniia                                            *String                                                               `xml:"ВариантНакопления" json:"ВариантНакопления,omitempty"`
	KriteriiOgranicheniiaPrimeneniiaZaObieemProdazh               *String                                                               `xml:"КритерийОграниченияПримененияЗаОбъемПродаж" json:"КритерийОграниченияПримененияЗаОбъемПродаж,omitempty"`
	OblastOgranicheniia                                           *String                                                               `xml:"ОбластьОграничения" json:"ОбластьОграничения,omitempty"`
	ValiutaOgranicheniiaKey                                       *Guid                                                                 `xml:"ВалютаОграничения_Key" json:"ВалютаОграничения_Key,omitempty"`
	GrafikOplaty                                                  *String                                                               `xml:"ГрафикОплаты" json:"ГрафикОплаты,omitempty"`
	FormaOplaty                                                   *String                                                               `xml:"ФормаОплаты" json:"ФормаОплаты,omitempty"`
	ZnachenieUsloviiaOgranicheniia                                *Float                                                                `xml:"ЗначениеУсловияОграничения" json:"ЗначениеУсловияОграничения,omitempty"`
	SegmentNomenklaturyOgranicheniiaKey                           *Guid                                                                 `xml:"СегментНоменклатурыОграничения_Key" json:"СегментНоменклатурыОграничения_Key,omitempty"`
	PeriodNakopleniia                                             *String                                                               `xml:"ПериодНакопления" json:"ПериодНакопления,omitempty"`
	TipSravneniia                                                 *String                                                               `xml:"ТипСравнения" json:"ТипСравнения,omitempty"`
	GruppaPolzovateleiKey                                         *Guid                                                                 `xml:"ГруппаПользователей_Key" json:"ГруппаПользователей_Key,omitempty"`
	DneiDoDniaRozhdeniia                                          *Int                                                                  `xml:"ДнейДоДняРождения" json:"ДнейДоДняРождения,omitempty"`
	DneiPosleDniaRozhdeniia                                       *Int                                                                  `xml:"ДнейПослеДняРождения" json:"ДнейПослеДняРождения,omitempty"`
	PoriadkovyiNomerProdazhiKraten                                *Int                                                                  `xml:"ПорядковыйНомерПродажиКратен" json:"ПорядковыйНомерПродажиКратен,omitempty"`
	UchityvatPrimenennyeSkidkiVRamkakhPosledovatelnogoPrimeneniia *Boolean                                                              `xml:"УчитыватьПримененныеСкидкиВРамкахПоследовательногоПрименения" json:"УчитыватьПримененныеСкидкиВРамкахПоследовательногоПрименения,omitempty"`
	UchityvatTekushchiiChekVNakopleniiakh                         *Boolean                                                              `xml:"УчитыватьТекущийЧекВНакоплениях" json:"УчитыватьТекущийЧекВНакоплениях,omitempty"`
	VremiaDeistviia                                               *[]CatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviiaRowType `xml:"ВремяДействия" json:"ВремяДействия,omitempty"`
	Poluchateli                                                   *[]CatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchateliRowType     `xml:"Получатели" json:"Получатели,omitempty"`
	KomplektPokupki                                               *[]CatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupkiRowType `xml:"КомплектПокупки" json:"КомплектПокупки,omitempty"`
}

type CatalogUsloviiaPredostavleniiaSkidokNatsenokVremiaDeistviia struct {
	Key               Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber        Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	DenNedeli         *String `xml:"ДеньНедели" json:"ДеньНедели,omitempty"`
	VremiaNachala     *Time   `xml:"ВремяНачала" json:"ВремяНачала,omitempty"`
	VremiaOkonchaniia *Time   `xml:"ВремяОкончания" json:"ВремяОкончания,omitempty"`
}

type CatalogUsloviiaPredostavleniiaSkidokNatsenokPoluchateli struct {
	Key            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Poluchatel     *String `xml:"Получатель" json:"Получатель,omitempty"`
	PoluchatelType *String `xml:"Получатель_Type" json:"Получатель_Type,omitempty"`
}

type CatalogUsloviiaPredostavleniiaSkidokNatsenokKomplektPokupki struct {
	Key             Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber      Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	ItemKey         *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	Quantity        *Float `xml:"Количество" json:"Количество,omitempty"`
	TypeKey         *Guid  `xml:"ТипИзделия_Key" json:"ТипИзделия_Key,omitempty"`
	SupplierKey     *Guid  `xml:"Поставщик_Key" json:"Поставщик_Key,omitempty"`
	ProizvoditelKey *Guid  `xml:"Производитель_Key" json:"Производитель_Key,omitempty"`
}

type OutPay struct {
	Key                                    Guid                                                          `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                            *String                                                       `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                                 *String                                                       `xml:"Number" json:"Number,omitempty"`
	Date                                   *Time                                                         `xml:"Date" json:"Date,omitempty"`
	DeletionMark                           *Boolean                                                      `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                                 *Boolean                                                      `xml:"Posted" json:"Posted,omitempty"`
	ValiutaVzaimoraschetovPodotchetnikaKey *Guid                                                         `xml:"ВалютаВзаиморасчетовПодотчетника_Key" json:"ВалютаВзаиморасчетовПодотчетника_Key,omitempty"`
	ValiutaDokumentaKey                    *Guid                                                         `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	VidVydachiDenezhnykhSredstv            *String                                                       `xml:"ВидВыдачиДенежныхСредств" json:"ВидВыдачиДенежныхСредств,omitempty"`
	OperationType                          *String                                                       `xml:"ВидОперации" json:"ВидОперации,omitempty"`
	Vydat                                  *String                                                       `xml:"Выдать" json:"Выдать,omitempty"`
	DataPogasheniiaAvansa                  *Time                                                         `xml:"ДатаПогашенияАванса" json:"ДатаПогашенияАванса,omitempty"`
	DogovorKontragentaKey                  *Guid                                                         `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie                      *String                                                       `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	DokumentSozdanVIuTD                    *Boolean                                                      `xml:"ДокументСозданВЮТД" json:"ДокументСозданВЮТД,omitempty"`
	ZaiavkaNaRaskhodovanieSredstvKey       *Guid                                                         `xml:"ЗаявкаНаРасходованиеСредств_Key" json:"ЗаявкаНаРасходованиеСредств_Key,omitempty"`
	KassaKey                               *Guid                                                         `xml:"Касса_Key" json:"Касса_Key,omitempty"`
	Comment                                *String                                                       `xml:"Комментарий" json:"Комментарий,omitempty"`
	Kontragent                             *String                                                       `xml:"Контрагент" json:"Контрагент,omitempty"`
	NumberKKT                              *Int                                                          `xml:"НомерЧекаККМ" json:"НомерЧекаККМ,omitempty"`
	ObieiavlenieNaVznosNalichnymiKey       *Guid                                                         `xml:"ОбъявлениеНаВзносНаличными_Key" json:"ОбъявлениеНаВзносНаличными_Key,omitempty"`
	Oplacheno                              *Boolean                                                      `xml:"Оплачено" json:"Оплачено,omitempty"`
	OrganizatsiiaKey                       *Guid                                                         `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	Osnovanie                              *String                                                       `xml:"Основание" json:"Основание,omitempty"`
	OtvetstvennyiKey                       *Guid                                                         `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	OtrazhenoVOperUchete                   *Boolean                                                      `xml:"ОтраженоВОперУчете" json:"ОтраженоВОперУчете,omitempty"`
	PoDokumentu                            *String                                                       `xml:"ПоДокументу" json:"ПоДокументу,omitempty"`
	PodrazdelenieKey                       *Guid                                                         `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	Prilozhenie                            *String                                                       `xml:"Приложение" json:"Приложение,omitempty"`
	RaschetnyiDokumentKey                  *Guid                                                         `xml:"РасчетныйДокумент_Key" json:"РасчетныйДокумент_Key,omitempty"`
	TypeOfMovingMoneyKey                   *Guid                                                         `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SumOfDocument                          *Float                                                        `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	SchetOrganizatsiiKey                   *Guid                                                         `xml:"СчетОрганизации_Key" json:"СчетОрганизации_Key,omitempty"`
	TipDokumenta                           *String                                                       `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	Pochta                                 *String                                                       `xml:"Почта" json:"Почта,omitempty"`
	Telefon                                *String                                                       `xml:"Телефон" json:"Телефон,omitempty"`
	ProbitChekNaKKT                        *Boolean                                                      `xml:"ПробитЧекНаККТ" json:"ПробитЧекНаККТ,omitempty"`
	KassaKKMKey                            *Guid                                                         `xml:"КассаККМ_Key" json:"КассаККМ_Key,omitempty"`
	GungNumber                             *Int                                                          `xml:"НомерСменыККМ" json:"НомерСменыККМ,omitempty"`
	NastroikaRMKKey                        *Guid                                                         `xml:"НастройкаРМК_Key" json:"НастройкаРМК_Key,omitempty"`
	ExtendedPayments                       *[]DocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezhaRowType `xml:"РасшифровкаПлатежа" json:"РасшифровкаПлатежа,omitempty"`
	Payments                               *[]DocumentRaskhodnyiKassovyiOrderOplataRowType               `xml:"Оплата" json:"Оплата,omitempty"`
	Goods                                  *[]DocumentRaskhodnyiKassovyiOrderTovaryRowType               `xml:"Товары" json:"Товары,omitempty"`
	DokumentOsnovanieType                  *String                                                       `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
	KontragentType                         *String                                                       `xml:"Контрагент_Type" json:"Контрагент_Type,omitempty"`
}

func (entity OutPay) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity OutPay) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentRaskhodnyiKassovyiOrderRasshifrovkaPlatezha struct {
	Key                              Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                       Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	DogovorKontragentaKey            *Guid   `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentPlanirovaniiaPlatezhaKey *Guid   `xml:"ДокументПланированияПлатежа_Key" json:"ДокументПланированияПлатежа_Key,omitempty"`
	KratnostVzaimoraschetov          *Int    `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov              *Float  `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	KursVzaimoraschetovPlan          *Float  `xml:"КурсВзаиморасчетовПлан" json:"КурсВзаиморасчетовПлан,omitempty"`
	ProektKey                        *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	Sdelka                           *String `xml:"Сделка" json:"Сделка,omitempty"`
	StavkaNDS                        *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	TypeOfMovingMoneyKey             *Guid   `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SummaVzaimoraschetov             *Float  `xml:"СуммаВзаиморасчетов" json:"СуммаВзаиморасчетов,omitempty"`
	SummaNDS                         *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	Sum                              *Float  `xml:"СуммаПлатежа" json:"СуммаПлатежа,omitempty"`
	SummaPlatezhaPlan                *Float  `xml:"СуммаПлатежаПлан" json:"СуммаПлатежаПлан,omitempty"`
	SdelkaType                       *String `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

type DocumentRaskhodnyiKassovyiOrderOplata struct {
	Key        Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	TipOplaty  *String `xml:"ТипОплаты" json:"ТипОплаты,omitempty"`
	Sum        *Float  `xml:"Сумма" json:"Сумма,omitempty"`
}

type DocumentRaskhodnyiKassovyiOrderTovary struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	StavkaNDS                      *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                       *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float  `xml:"Цена" json:"Цена,omitempty"`
	SummaSkidki                    *Float  `xml:"СуммаСкидки" json:"СуммаСкидки,omitempty"`
	VidTovaraKKT                   *String `xml:"ВидТовараККТ" json:"ВидТовараККТ,omitempty"`
	TipOplatyTovaraKKT             *String `xml:"ТипОплатыТовараККТ" json:"ТипОплатыТовараККТ,omitempty"`
	SummaOsn                       *Float  `xml:"СуммаОсн" json:"СуммаОсн,omitempty"`
	Komitent                       *String `xml:"Комитент" json:"Комитент,omitempty"`
	TelefonKomitenta               *String `xml:"ТелефонКомитента" json:"ТелефонКомитента,omitempty"`
	INNkomitenta                   *String `xml:"ИННкомитента" json:"ИННкомитента,omitempty"`
	SummaOpl                       *Float  `xml:"СуммаОпл" json:"СуммаОпл,omitempty"`
}

type DocumentSchetNaOplatuPostavshchika struct {
	Key                          Guid                                               `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                  *String                                            `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                       *String                                            `xml:"Number" json:"Number,omitempty"`
	Date                         *Time                                              `xml:"Date" json:"Date,omitempty"`
	DeletionMark                 *Boolean                                           `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                       *Boolean                                           `xml:"Posted" json:"Posted,omitempty"`
	ValiutaDokumentaKey          *Guid                                              `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	VremiaNapominaniia           *Time                                              `xml:"ВремяНапоминания" json:"ВремяНапоминания,omitempty"`
	DataVkhodiashchegoDokumenta  *Time                                              `xml:"ДатаВходящегоДокумента" json:"ДатаВходящегоДокумента,omitempty"`
	DataOplaty                   *Time                                              `xml:"ДатаОплаты" json:"ДатаОплаты,omitempty"`
	DataPostupleniia             *Time                                              `xml:"ДатаПоступления" json:"ДатаПоступления,omitempty"`
	DogovorKontragentaKey        *Guid                                              `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie            *String                                            `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	Comment                      *String                                            `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontaktnoeLitsoKey           *Guid                                              `xml:"КонтактноеЛицо_Key" json:"КонтактноеЛицо_Key,omitempty"`
	KontragentKey                *Guid                                              `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	KratnostVzaimoraschetov      *Int                                               `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov          *Float                                             `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	NapomnitOSobytii             *Boolean                                           `xml:"НапомнитьОСобытии" json:"НапомнитьОСобытии,omitempty"`
	NomerVkhodiashchegoDokumenta *String                                            `xml:"НомерВходящегоДокумента" json:"НомерВходящегоДокумента,omitempty"`
	OrganizatsiiaKey             *Guid                                              `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey             *Guid                                              `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey             *Guid                                              `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	DepartmentKey                *Guid                                              `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	StrukturnaiaEdinitsa         *String                                            `xml:"СтруктурнаяЕдиница" json:"СтруктурнаяЕдиница,omitempty"`
	SummaVkliuchaetNDS           *Boolean                                           `xml:"СуммаВключаетНДС" json:"СуммаВключаетНДС,omitempty"`
	SumOfDocument                *Float                                             `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	TipDokumenta                 *String                                            `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	TipTsenKey                   *Guid                                              `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
	UchityvatNDS                 *Boolean                                           `xml:"УчитыватьНДС" json:"УчитыватьНДС,omitempty"`
	Goods                        *[]DocumentSchetNaOplatuPostavshchikaTovaryRowType `xml:"Товары" json:"Товары,omitempty"`
	Uslugi                       *[]DocumentSchetNaOplatuPostavshchikaUslugiRowType `xml:"Услуги" json:"Услуги,omitempty"`
	DokumentOsnovanieType        *String                                            `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
	StrukturnaiaEdinitsaType     *String                                            `xml:"СтруктурнаяЕдиница_Type" json:"СтруктурнаяЕдиница_Type,omitempty"`
}

func (entity DocumentSchetNaOplatuPostavshchika) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentSchetNaOplatuPostavshchika) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentSchetNaOplatuPostavshchikaTovary struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	StavkaNDS                      *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                       *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float  `xml:"Цена" json:"Цена,omitempty"`
}

type DocumentSchetNaOplatuPostavshchikaUslugi struct {
	Key         Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber  Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Quantity    *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey     *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	Soderzhanie *String `xml:"Содержание" json:"Содержание,omitempty"`
	StavkaNDS   *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum         *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS    *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	Cost        *Float  `xml:"Цена" json:"Цена,omitempty"`
}

type DocumentReestrSpetssviaz struct {
	Key                   Guid                                      `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion           *String                                   `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                *String                                   `xml:"Number" json:"Number,omitempty"`
	Date                  *Time                                     `xml:"Date" json:"Date,omitempty"`
	DeletionMark          *Boolean                                  `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                *Boolean                                  `xml:"Posted" json:"Posted,omitempty"`
	Comment               *String                                   `xml:"Комментарий" json:"Комментарий,omitempty"`
	OtpravitelKey         *Guid                                     `xml:"Отправитель_Key" json:"Отправитель_Key,omitempty"`
	OrganizatsiiaKey      *Guid                                     `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	KontragentKey         *Guid                                     `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	DogovorKontragentaKey *Guid                                     `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	Klienty               *[]DocumentReestrSpetssviazKlientyRowType `xml:"Клиенты" json:"Клиенты,omitempty"`
}

func (entity DocumentReestrSpetssviaz) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentReestrSpetssviaz) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentReestrSpetssviazKlienty struct {
	Key           Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber    Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	KontragentKey *Guid   `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	Adres         *String `xml:"Адрес" json:"Адрес,omitempty"`
	Telefon       *String `xml:"Телефон" json:"Телефон,omitempty"`
	Weight        *Float  `xml:"Вес" json:"Вес,omitempty"`
	Sum           *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	Paket         *String `xml:"Пакет" json:"Пакет,omitempty"`
	SummaPropisiu *String `xml:"СуммаПрописью" json:"СуммаПрописью,omitempty"`
	GabarityKey   *Guid   `xml:"Габариты_Key" json:"Габариты_Key,omitempty"`
}

type DocumentJournalKassovyeDokumenty struct {
	Ref                  String   `xml:"Ref" json:"Ref,omitempty"`
	Type                 *String  `xml:"Type" json:"Type,omitempty"`
	Date                 *Time    `xml:"Date" json:"Date,omitempty"`
	DeletionMark         *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Number               *String  `xml:"Number" json:"Number,omitempty"`
	Posted               *Boolean `xml:"Posted" json:"Posted,omitempty"`
	ValiutaKey           *Guid    `xml:"Валюта_Key" json:"Валюта_Key,omitempty"`
	OperationType        *String  `xml:"ВидОперации" json:"ВидОперации,omitempty"`
	Informatsiia         *String  `xml:"Информация" json:"Информация,omitempty"`
	KassaKey             *Guid    `xml:"Касса_Key" json:"Касса_Key,omitempty"`
	Comment              *String  `xml:"Комментарий" json:"Комментарий,omitempty"`
	Kontragent           *String  `xml:"Контрагент" json:"Контрагент,omitempty"`
	Oplacheno            *Boolean `xml:"Оплачено" json:"Оплачено,omitempty"`
	OrganizatsiiaKey     *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey     *Guid    `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey     *Guid    `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	TypeOfMovingMoneyKey *Guid    `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SumOfDocument        *Float   `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	RefType              String   `xml:"Ref_Type" json:"Ref_Type,omitempty"`
	VidOperatsiiType     *String  `xml:"ВидОперации_Type" json:"ВидОперации_Type,omitempty"`
	InformatsiiaType     *String  `xml:"Информация_Type" json:"Информация_Type,omitempty"`
	KontragentType       *String  `xml:"Контрагент_Type" json:"Контрагент_Type,omitempty"`
}

type InitialInstance struct {
	Key                                   Guid                                                   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                           *String                                                `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                                *String                                                `xml:"Number" json:"Number,omitempty"`
	Date                                  *Time                                                  `xml:"Date" json:"Date,omitempty"`
	DeletionMark                          *Boolean                                               `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                                *Boolean                                               `xml:"Posted" json:"Posted,omitempty"`
	OperationType                         *String                                                `xml:"ВидОперации" json:"ВидОперации,omitempty"`
	DataVkhodiashchegoDokumenta           *Time                                                  `xml:"ДатаВходящегоДокумента" json:"ДатаВходящегоДокумента,omitempty"`
	Comment                               *String                                                `xml:"Комментарий" json:"Комментарий,omitempty"`
	NomerVkhodiashchegoDokumenta          *String                                                `xml:"НомерВходящегоДокумента" json:"НомерВходящегоДокумента,omitempty"`
	OrganizatsiiaKey                      *Guid                                                  `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                      *Guid                                                  `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	DepartmentKey                         *Guid                                                  `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	SummaVkliuchaetNDS                    *Boolean                                               `xml:"СуммаВключаетНДС" json:"СуммаВключаетНДС,omitempty"`
	OformitProdazhiDatoiDokumentaProdazhi *Boolean                                               `xml:"ОформитьПродажиДатойДокументаПродажи" json:"ОформитьПродажиДатойДокументаПродажи,omitempty"`
	Vzaimoraschety                        *[]DocumentVvodNachalnykhOstatkovVzaimoraschetyRowType `xml:"Взаиморасчеты" json:"Взаиморасчеты,omitempty"`
	Goods                                 *[]DocumentVvodNachalnykhOstatkovTovaryRowType         `xml:"Товары" json:"Товары,omitempty"`
}

func (entity InitialInstance) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity InitialInstance) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentVvodNachalnykhOstatkovVzaimoraschety struct {
	Key                   Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber            Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	DogovorKontragentaKey *Guid  `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	KontragentKey         *Guid  `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	Sum                   *Float `xml:"Сумма" json:"Сумма,omitempty"`
}

type DocumentVvodNachalnykhOstatkovTovary struct {
	Key                            Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float   `xml:"Вес" json:"Вес,omitempty"`
	DokumentOprikhodovaniiaKey     *Guid    `xml:"ДокументОприходования_Key" json:"ДокументОприходования_Key,omitempty"`
	DokumentProdazhiKey            *Guid    `xml:"ДокументПродажи_Key" json:"ДокументПродажи_Key,omitempty"`
	KachestvoKey                   *Guid    `xml:"Качество_Key" json:"Качество_Key,omitempty"`
	Quantity                       *Float   `xml:"Количество" json:"Количество,omitempty"`
	Comment                        *String  `xml:"Комментарий" json:"Комментарий,omitempty"`
	NDSVkliuchenVStoimost          *Boolean `xml:"НДСВключенВСтоимость" json:"НДСВключенВСтоимость,omitempty"`
	ItemKey                        *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	NomerGTDKey                    *Guid    `xml:"НомерГТД_Key" json:"НомерГТД_Key,omitempty"`
	Pasport                        *String  `xml:"Паспорт" json:"Паспорт,omitempty"`
	ProtsentRoznichnoiNatsenki     *Float   `xml:"ПроцентРозничнойНаценки" json:"ПроцентРозничнойНаценки,omitempty"`
	ProtsentSkidkiNatsenki         *Float   `xml:"ПроцентСкидкиНаценки" json:"ПроцентСкидкиНаценки,omitempty"`
	SizeKey                        *Guid    `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid    `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	StavkaNDS                      *String  `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	StavkaNDSProdazhi              *String  `xml:"СтавкаНДСПродажи" json:"СтавкаНДСПродажи,omitempty"`
	StatusPartii                   *String  `xml:"СтатусПартии" json:"СтатусПартии,omitempty"`
	StranaProiskhozhdeniiaKey      *Guid    `xml:"СтранаПроисхождения_Key" json:"СтранаПроисхождения_Key,omitempty"`
	Sum                            *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                       *Float   `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	SummaNDSProdazhi               *Float   `xml:"СуммаНДСПродажи" json:"СуммаНДСПродажи,omitempty"`
	SummaProdazhi                  *Float   `xml:"СуммаПродажи" json:"СуммаПродажи,omitempty"`
	SummaProdazhiBezSkidok         *Float   `xml:"СуммаПродажиБезСкидок" json:"СуммаПродажиБезСкидок,omitempty"`
	KharakteristikaNomenklaturyKey *Guid    `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float   `xml:"Цена" json:"Цена,omitempty"`
	RetailCost                     *Float   `xml:"ЦенаВРознице" json:"ЦенаВРознице,omitempty"`
	TsenaVRoznitseGr               *Float   `xml:"ЦенаВРозницеГр" json:"ЦенаВРозницеГр,omitempty"`
	TsenaProdazhi                  *Float   `xml:"ЦенаПродажи" json:"ЦенаПродажи,omitempty"`
	StatusRaskhoda                 *String  `xml:"СтатусРасхода" json:"СтатусРасхода,omitempty"`
}

type Posting struct {
	Key                                Guid                                               `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                        *String                                            `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                             *String                                            `xml:"Number" json:"Number,omitempty"`
	Date                               *Time                                              `xml:"Date" json:"Date,omitempty"`
	DeletionMark                       *Boolean                                           `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                             *Boolean                                           `xml:"Posted" json:"Posted,omitempty"`
	Weight                             *Float                                             `xml:"ВесДокумента" json:"ВесДокумента,omitempty"`
	DokumentOsnovanie                  *String                                            `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	DokumentSozdanVIuTD                *Boolean                                           `xml:"ДокументСозданВЮТД" json:"ДокументСозданВЮТД,omitempty"`
	InventarizatsiiaTovarovNaSkladeKey *Guid                                              `xml:"ИнвентаризацияТоваровНаСкладе_Key" json:"ИнвентаризацияТоваровНаСкладе_Key,omitempty"`
	KolichestvoDokumenta               *Int                                               `xml:"КоличествоДокумента" json:"КоличествоДокумента,omitempty"`
	Comment                            *String                                            `xml:"Комментарий" json:"Комментарий,omitempty"`
	OrganizatsiiaKey                   *Guid                                              `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	Osnovanie                          *String                                            `xml:"Основание" json:"Основание,omitempty"`
	OtvetstvennyiKey                   *Guid                                              `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey                   *Guid                                              `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	DepartmentKey                      *Guid                                              `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	SumOfDocument                      *Float                                             `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	SummaDokumentaRegl                 *Float                                             `xml:"СуммаДокументаРегл" json:"СуммаДокументаРегл,omitempty"`
	TipDokumenta                       *String                                            `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	TipTsenKey                         *Guid                                              `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
	KhoziaistvennaiaOperatsiiaKey      *Guid                                              `xml:"ХозяйственнаяОперация_Key" json:"ХозяйственнаяОперация_Key,omitempty"`
	VystavkaOstatki                    *Boolean                                           `xml:"ВыставкаОстатки" json:"ВыставкаОстатки,omitempty"`
	Goods                              *[]DocumentOprikhodovanieTovarovTovaryRowType      `xml:"Товары" json:"Товары,omitempty"`
	Sertifikaty                        *[]DocumentOprikhodovanieTovarovSertifikatyRowType `xml:"Сертификаты" json:"Сертификаты,omitempty"`
	DokumentOsnovanieType              *String                                            `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
}

func (entity Posting) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity Posting) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentOprikhodovanieTovarovTovary struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	KachestvoKey                   *Guid   `xml:"Качество_Key" json:"Качество_Key,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	Pasport                        *String `xml:"Паспорт" json:"Паспорт,omitempty"`
	ProtsentRoznichnoiNatsenki     *Float  `xml:"ПроцентРозничнойНаценки" json:"ПроцентРозничнойНаценки,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	Sum                            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaRegl                      *Float  `xml:"СуммаРегл" json:"СуммаРегл,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float  `xml:"Цена" json:"Цена,omitempty"`
	RetailCost                     *Float  `xml:"ЦенаВРознице" json:"ЦенаВРознице,omitempty"`
	TsenaVRoznitseGr               *Float  `xml:"ЦенаВРозницеГр" json:"ЦенаВРозницеГр,omitempty"`
}

type DocumentOprikhodovanieTovarovSertifikaty struct {
	Key           Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber    Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	SertifikatKey *Guid  `xml:"Сертификат_Key" json:"Сертификат_Key,omitempty"`
	Sum           *Float `xml:"Сумма" json:"Сумма,omitempty"`
}

type CatalogKomplekty struct {
	Key          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion  *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description  *String  `xml:"Description" json:"Description,omitempty"`
	Code         *String  `xml:"Code" json:"Code,omitempty"`
	ParentKey    *Guid    `xml:"Parent_Key" json:"Parent_Key,omitempty"`
	IsFolder     *Boolean `xml:"IsFolder" json:"IsFolder,omitempty"`
	DeletionMark *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
}

type DocumentPereotsenkaTovarovPriniatykhNaKomissiiu struct {
	Key                            Guid                                                            `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                    *String                                                         `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                         *String                                                         `xml:"Number" json:"Number,omitempty"`
	Date                           *Time                                                           `xml:"Date" json:"Date,omitempty"`
	DeletionMark                   *Boolean                                                        `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                         *Boolean                                                        `xml:"Posted" json:"Posted,omitempty"`
	ValiutaDokumentaKey            *Guid                                                           `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	DogovorKontragentaKey          *Guid                                                           `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie              *String                                                         `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	Comment                        *String                                                         `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey                  *Guid                                                           `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	KratnostVzaimoraschetov        *Int                                                            `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov            *Float                                                          `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	NDSVkliuchenVStoimost          *Boolean                                                        `xml:"НДСВключенВСтоимость" json:"НДСВключенВСтоимость,omitempty"`
	OrganizatsiiaKey               *Guid                                                           `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey               *Guid                                                           `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey               *Guid                                                           `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	Sdelka                         *String                                                         `xml:"Сделка" json:"Сделка,omitempty"`
	DepartmentKey                  *Guid                                                           `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	SummaVkliuchaetNDS             *Boolean                                                        `xml:"СуммаВключаетНДС" json:"СуммаВключаетНДС,omitempty"`
	TipDokumenta                   *String                                                         `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	TipTsenKey                     *Guid                                                           `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
	UchityvatNDS                   *Boolean                                                        `xml:"УчитыватьНДС" json:"УчитыватьНДС,omitempty"`
	KhoziaistvennaiaOperatsiiaKey  *Guid                                                           `xml:"ХозяйственнаяОперация_Key" json:"ХозяйственнаяОперация_Key,omitempty"`
	NastroikiZapolneniiaBase64Data *Binary                                                         `xml:"НастройкиЗаполнения_Base64Data" json:"НастройкиЗаполнения_Base64Data,omitempty"`
	Goods                          *[]DocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovaryRowType `xml:"Товары" json:"Товары,omitempty"`
	DokumentOsnovanieType          *String                                                         `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
	SdelkaType                     *String                                                         `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
	NastroikiZapolneniiaType       *String                                                         `xml:"НастройкиЗаполнения_Type" json:"НастройкиЗаполнения_Type,omitempty"`
	NastroikiZapolneniia           *Binary                                                         `xml:"НастройкиЗаполнения" json:"НастройкиЗаполнения,omitempty"`
}

func (entity DocumentPereotsenkaTovarovPriniatykhNaKomissiiu) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentPereotsenkaTovarovPriniatykhNaKomissiiu) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentPereotsenkaTovarovPriniatykhNaKomissiiuTovary struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	StavkaNDS                      *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                       *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	SummaStaraia                   *Float  `xml:"СуммаСтарая" json:"СуммаСтарая,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float  `xml:"Цена" json:"Цена,omitempty"`
	TsenaZaGramm                   *Float  `xml:"ЦенаЗаГрамм" json:"ЦенаЗаГрамм,omitempty"`
}

type DocumentElektronnoePismo struct {
	Key                                      Guid                                              `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                              *String                                           `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                                   *String                                           `xml:"Number" json:"Number,omitempty"`
	Date                                     *Time                                             `xml:"Date" json:"Date,omitempty"`
	DeletionMark                             *Boolean                                          `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                                   *Boolean                                          `xml:"Posted" json:"Posted,omitempty"`
	VidTekstaPisma                           *String                                           `xml:"ВидТекстаПисьма" json:"ВидТекстаПисьма,omitempty"`
	GruppaUchetnoiZapisiKey                  *Guid                                             `xml:"ГруппаУчетнойЗаписи_Key" json:"ГруппаУчетнойЗаписи_Key,omitempty"`
	DataOtpravleniia                         *Time                                             `xml:"ДатаОтправления" json:"ДатаОтправления,omitempty"`
	DataTransporta                           *Time                                             `xml:"ДатаТранспорта" json:"ДатаТранспорта,omitempty"`
	EstVlozheniia                            *Boolean                                          `xml:"ЕстьВложения" json:"ЕстьВложения,omitempty"`
	IdentifikatorPisma                       *String                                           `xml:"ИдентификаторПисьма" json:"ИдентификаторПисьма,omitempty"`
	ImiaKompiuteraRedaktirovaniiaKhTMLTeksta *String                                           `xml:"ИмяКомпьютераРедактированияХТМЛТекста" json:"ИмяКомпьютераРедактированияХТМЛТекста,omitempty"`
	ImiaFailaRedaktirovaniiaKhTMLTeksta      *String                                           `xml:"ИмяФайлаРедактированияХТМЛТекста" json:"ИмяФайлаРедактированияХТМЛТекста,omitempty"`
	Comment                                  *String                                           `xml:"Комментарий" json:"Комментарий,omitempty"`
	Komu                                     *String                                           `xml:"Кому" json:"Кому,omitempty"`
	KomuPredstavlenie                        *String                                           `xml:"КомуПредставление" json:"КомуПредставление,omitempty"`
	Kopii                                    *String                                           `xml:"Копии" json:"Копии,omitempty"`
	KopiiPredstavlenie                       *String                                           `xml:"КопииПредставление" json:"КопииПредставление,omitempty"`
	NeRassmotreno                            *Boolean                                          `xml:"НеРассмотрено" json:"НеРассмотрено,omitempty"`
	Osnovanie                                *String                                           `xml:"Основание" json:"Основание,omitempty"`
	Otvet                                    *Boolean                                          `xml:"Ответ" json:"Ответ,omitempty"`
	OtvetstvennyiKey                         *Guid                                             `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	OtpravitelAdresElektronnoiPochty         *String                                           `xml:"ОтправительАдресЭлектроннойПочты" json:"ОтправительАдресЭлектроннойПочты,omitempty"`
	OtpravitelImia                           *String                                           `xml:"ОтправительИмя" json:"ОтправительИмя,omitempty"`
	OtpravitelPredstavlenie                  *String                                           `xml:"ОтправительПредставление" json:"ОтправительПредставление,omitempty"`
	Pereadresatsiia                          *Boolean                                          `xml:"Переадресация" json:"Переадресация,omitempty"`
	PochtovoeSoobshchenieBase64Data          *Binary                                           `xml:"ПочтовоеСообщение_Base64Data" json:"ПочтовоеСообщение_Base64Data,omitempty"`
	Predmet                                  *String                                           `xml:"Предмет" json:"Предмет,omitempty"`
	RassmotretPosle                          *Time                                             `xml:"РассмотретьПосле" json:"РассмотретьПосле,omitempty"`
	SkrytyeKopii                             *String                                           `xml:"СкрытыеКопии" json:"СкрытыеКопии,omitempty"`
	SostoianiePotomkaPisma                   *String                                           `xml:"СостояниеПотомкаПисьма" json:"СостояниеПотомкаПисьма,omitempty"`
	StatusPisma                              *String                                           `xml:"СтатусПисьма" json:"СтатусПисьма,omitempty"`
	TekstPisma                               *String                                           `xml:"ТекстПисьма" json:"ТекстПисьма,omitempty"`
	Tema                                     *String                                           `xml:"Тема" json:"Тема,omitempty"`
	UchetnaiaZapisKey                        *Guid                                             `xml:"УчетнаяЗапись_Key" json:"УчетнаяЗапись_Key,omitempty"`
	KomuTCh                                  *[]DocumentElektronnoePismoKomuTChRowType         `xml:"КомуТЧ" json:"КомуТЧ,omitempty"`
	KopiiTCh                                 *[]DocumentElektronnoePismoKopiiTChRowType        `xml:"КопииТЧ" json:"КопииТЧ,omitempty"`
	SkrytyeKopiiTCh                          *[]DocumentElektronnoePismoSkrytyeKopiiTChRowType `xml:"СкрытыеКопииТЧ" json:"СкрытыеКопииТЧ,omitempty"`
	OsnovanieType                            *String                                           `xml:"Основание_Type" json:"Основание_Type,omitempty"`
	PochtovoeSoobshchenieType                *String                                           `xml:"ПочтовоеСообщение_Type" json:"ПочтовоеСообщение_Type,omitempty"`
	PredmetType                              *String                                           `xml:"Предмет_Type" json:"Предмет_Type,omitempty"`
	PochtovoeSoobshchenie                    *Binary                                           `xml:"ПочтовоеСообщение" json:"ПочтовоеСообщение,omitempty"`
}

func (entity DocumentElektronnoePismo) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentElektronnoePismo) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentElektronnoePismoKomuTCh struct {
	Key                    Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber             Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	AdresElektronnoiPochty *String `xml:"АдресЭлектроннойПочты" json:"АдресЭлектроннойПочты,omitempty"`
	Predstavlenie          *String `xml:"Представление" json:"Представление,omitempty"`
}

type DocumentElektronnoePismoKopiiTCh struct {
	Key                    Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber             Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	AdresElektronnoiPochty *String `xml:"АдресЭлектроннойПочты" json:"АдресЭлектроннойПочты,omitempty"`
	Predstavlenie          *String `xml:"Представление" json:"Представление,omitempty"`
}

type DocumentElektronnoePismoSkrytyeKopiiTCh struct {
	Key                    Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber             Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	AdresElektronnoiPochty *String `xml:"АдресЭлектроннойПочты" json:"АдресЭлектроннойПочты,omitempty"`
	Predstavlenie          *String `xml:"Представление" json:"Представление,omitempty"`
}

type CatalogGruppyDefektov struct {
	Key          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion  *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description  *String  `xml:"Description" json:"Description,omitempty"`
	Code         *String  `xml:"Code" json:"Code,omitempty"`
	OwnerKey     *Guid    `xml:"Owner_Key" json:"Owner_Key,omitempty"`
	DeletionMark *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
}

type CatalogfmAnketaKlientaBenefitsariia struct {
	Key                     Guid                                                           `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion             *String                                                        `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description             *String                                                        `xml:"Description" json:"Description,omitempty"`
	Code                    *String                                                        `xml:"Code" json:"Code,omitempty"`
	OwnerKey                *Guid                                                          `xml:"Owner_Key" json:"Owner_Key,omitempty"`
	DeletionMark            *Boolean                                                       `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Familiia                *String                                                        `xml:"Фамилия" json:"Фамилия,omitempty"`
	Imia                    *String                                                        `xml:"Имя" json:"Имя,omitempty"`
	Otchestvo               *String                                                        `xml:"Отчество" json:"Отчество,omitempty"`
	KartochkaKontragentaKey *Guid                                                          `xml:"КарточкаКонтрагента_Key" json:"КарточкаКонтрагента_Key,omitempty"`
	Deistvuiushchii         *Boolean                                                       `xml:"Действующий" json:"Действующий,omitempty"`
	DannyeKontragenta       *[]CatalogfmAnketaKlientaBenefitsariiaDannyeKontragentaRowType `xml:"ДанныеКонтрагента" json:"ДанныеКонтрагента,omitempty"`
}

type CatalogfmAnketaKlientaBenefitsariiaDannyeKontragenta struct {
	Key           Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber    Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Kliuch        *String `xml:"Ключ" json:"Ключ,omitempty"`
	Znachenie     *String `xml:"Значение" json:"Значение,omitempty"`
	ZnachenieType *String `xml:"Значение_Type" json:"Значение_Type,omitempty"`
}

type CatalogTsenovyeGruppy struct {
	Key          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion  *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description  *String  `xml:"Description" json:"Description,omitempty"`
	DeletionMark *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
}

type CatalogPravilaTsenoobrazovaniia struct {
	Key                Guid                                                    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion        *String                                                 `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description        *String                                                 `xml:"Description" json:"Description,omitempty"`
	DeletionMark       *Boolean                                                `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	VidTsenKey         *Guid                                                   `xml:"ВидЦен_Key" json:"ВидЦен_Key,omitempty"`
	TsenaVkliuchaetNDS *Boolean                                                `xml:"ЦенаВключаетНДС" json:"ЦенаВключаетНДС,omitempty"`
	Status             *String                                                 `xml:"Статус" json:"Статус,omitempty"`
	TsenovyeGruppy     *[]CatalogPravilaTsenoobrazovaniiaTsenovyeGruppyRowType `xml:"ЦеновыеГруппы" json:"ЦеновыеГруппы,omitempty"`
}

type CatalogPravilaTsenoobrazovaniiaTsenovyeGruppy struct {
	Key                Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber         Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	TsenovaiaGruppaKey *Guid `xml:"ЦеноваяГруппа_Key" json:"ЦеноваяГруппа_Key,omitempty"`
	VidTsenKey         *Guid `xml:"ВидЦен_Key" json:"ВидЦен_Key,omitempty"`
}

type DocumentObieiavlenieNaVznosNalichnymi struct {
	Key                   Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion           *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                *String  `xml:"Number" json:"Number,omitempty"`
	Date                  *Time    `xml:"Date" json:"Date,omitempty"`
	DeletionMark          *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                *Boolean `xml:"Posted" json:"Posted,omitempty"`
	ValiutaDokumentaKey   *Guid    `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	DataOplaty            *Time    `xml:"ДатаОплаты" json:"ДатаОплаты,omitempty"`
	DokumentOsnovanie     *String  `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	KassaKey              *Guid    `xml:"Касса_Key" json:"Касса_Key,omitempty"`
	Comment               *String  `xml:"Комментарий" json:"Комментарий,omitempty"`
	Oplacheno             *Boolean `xml:"Оплачено" json:"Оплачено,omitempty"`
	OrganizatsiiaKey      *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey      *Guid    `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	TypeOfMovingMoneyKey  *Guid    `xml:"СтатьяДвиженияДенежныхСредств_Key" json:"СтатьяДвиженияДенежныхСредств_Key,omitempty"`
	SumOfDocument         *Float   `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	SchetOrganizatsiiKey  *Guid    `xml:"СчетОрганизации_Key" json:"СчетОрганизации_Key,omitempty"`
	TipDokumenta          *String  `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	DokumentOsnovanieType *String  `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
}

func (entity DocumentObieiavlenieNaVznosNalichnymi) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentObieiavlenieNaVznosNalichnymi) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type CatalogValiuty struct {
	Key                       Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion               *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description               *String  `xml:"Description" json:"Description,omitempty"`
	Code                      *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark              *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	NaimenovaniePolnoe        *String  `xml:"НаименованиеПолное" json:"НаименованиеПолное,omitempty"`
	ParametryPropisiNaRusskom *String  `xml:"ПараметрыПрописиНаРусском" json:"ПараметрыПрописиНаРусском,omitempty"`
	SposobUstanovkiKursa      *String  `xml:"СпособУстановкиКурса" json:"СпособУстановкиКурса,omitempty"`
	BIdentifikator            *String  `xml:"Б_Идентификатор" json:"Б_Идентификатор,omitempty"`
	BNomerVersii              *String  `xml:"Б_НомерВерсии" json:"Б_НомерВерсии,omitempty"`
}

type DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochku struct {
	Key                             Guid                                                                                 `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                     *String                                                                              `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                          *String                                                                              `xml:"Number" json:"Number,omitempty"`
	Date                            *Time                                                                                `xml:"Date" json:"Date,omitempty"`
	DeletionMark                    *Boolean                                                                             `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                          *Boolean                                                                             `xml:"Posted" json:"Posted,omitempty"`
	BankovskiiSchetKontragentaKey   *Guid                                                                                `xml:"БанковскийСчетКонтрагента_Key" json:"БанковскийСчетКонтрагента_Key,omitempty"`
	ValiutaDokumentaKey             *Guid                                                                                `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	Weight                          *Float                                                                               `xml:"ВесДокумента" json:"ВесДокумента,omitempty"`
	GruzootpravitelKey              *Guid                                                                                `xml:"Грузоотправитель_Key" json:"Грузоотправитель_Key,omitempty"`
	GruzopoluchatelKey              *Guid                                                                                `xml:"Грузополучатель_Key" json:"Грузополучатель_Key,omitempty"`
	DataVkhodiashchegoDokumenta     *Time                                                                                `xml:"ДатаВходящегоДокумента" json:"ДатаВходящегоДокумента,omitempty"`
	DliaKontroliaUnikalnosti        *String                                                                              `xml:"ДляКонтроляУникальности" json:"ДляКонтроляУникальности,omitempty"`
	DogovorKontragentaKey           *Guid                                                                                `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie               *String                                                                              `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	DokumentPeremeshcheniiaKey      *Guid                                                                                `xml:"ДокументПеремещения_Key" json:"ДокументПеремещения_Key,omitempty"`
	DokumentSozdanVIuTD             *Boolean                                                                             `xml:"ДокументСозданВЮТД" json:"ДокументСозданВЮТД,omitempty"`
	KolichestvoDokumenta            *Int                                                                                 `xml:"КоличествоДокумента" json:"КоличествоДокумента,omitempty"`
	Comment                         *String                                                                              `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey                   *Guid                                                                                `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	Koef                            *Float                                                                               `xml:"Коэф" json:"Коэф,omitempty"`
	KratnostVzaimoraschetov         *Int                                                                                 `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov             *Float                                                                               `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	NDSVkliuchenVStoimost           *Boolean                                                                             `xml:"НДСВключенВСтоимость" json:"НДСВключенВСтоимость,omitempty"`
	NomerVkhodiashchegoDokumenta    *String                                                                              `xml:"НомерВходящегоДокумента" json:"НомерВходящегоДокумента,omitempty"`
	OrganizatsiiaKey                *Guid                                                                                `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                *Guid                                                                                `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey                *Guid                                                                                `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	RegistrirovatTseny              *Boolean                                                                             `xml:"РегистрироватьЦены" json:"РегистрироватьЦены,omitempty"`
	RegistrirovatTsenyPostavshchika *Boolean                                                                             `xml:"РегистрироватьЦеныПоставщика" json:"РегистрироватьЦеныПоставщика,omitempty"`
	Sdelka                          *String                                                                              `xml:"Сделка" json:"Сделка,omitempty"`
	DepartmentKey                   *Guid                                                                                `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	SummaVkliuchaetNDS              *Boolean                                                                             `xml:"СуммаВключаетНДС" json:"СуммаВключаетНДС,omitempty"`
	SumOfDocument                   *Float                                                                               `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	TipDokumenta                    *String                                                                              `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	TipSkidkiNatsenkiKey            *Guid                                                                                `xml:"ТипСкидкиНаценки_Key" json:"ТипСкидкиНаценки_Key,omitempty"`
	TipTsenKey                      *Guid                                                                                `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
	UsloviiaOplatyKey               *Guid                                                                                `xml:"УсловияОплаты_Key" json:"УсловияОплаты_Key,omitempty"`
	UchityvatNDS                    *Boolean                                                                             `xml:"УчитыватьНДС" json:"УчитыватьНДС,omitempty"`
	KhoziaistvennaiaOperatsiiaKey   *Guid                                                                                `xml:"ХозяйственнаяОперация_Key" json:"ХозяйственнаяОперация_Key,omitempty"`
	VystavkaOstatki                 *Boolean                                                                             `xml:"ВыставкаОстатки" json:"ВыставкаОстатки,omitempty"`
	Goods                           *[]DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovaryRowType `xml:"Товары" json:"Товары,omitempty"`
	Uslugi                          *[]DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugiRowType `xml:"Услуги" json:"Услуги,omitempty"`
	DokumentOsnovanieType           *String                                                                              `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
	SdelkaType                      *String                                                                              `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

func (entity DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochku) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochku) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuTovary struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	EdinitsaIzmereniiaKey          *Guid   `xml:"ЕдиницаИзмерения_Key" json:"ЕдиницаИзмерения_Key,omitempty"`
	KachestvoKey                   *Guid   `xml:"Качество_Key" json:"Качество_Key,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	Koef                           *Float  `xml:"Коэф" json:"Коэф,omitempty"`
	Koeffitsient                   *Float  `xml:"Коэффициент" json:"Коэффициент,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	Pasport                        *String `xml:"Паспорт" json:"Паспорт,omitempty"`
	ProektKey                      *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	ProtsentRoznichnoiNatsenki     *Float  `xml:"ПроцентРозничнойНаценки" json:"ПроцентРозничнойНаценки,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	StavkaNDS                      *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                       *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float  `xml:"Цена" json:"Цена,omitempty"`
	RetailCost                     *Float  `xml:"ЦенаВРознице" json:"ЦенаВРознице,omitempty"`
	TsenaVRoznitseGr               *Float  `xml:"ЦенаВРозницеГр" json:"ЦенаВРозницеГр,omitempty"`
}

type DocumentPostuplenieTovarovUslugVNeavtomatizirovannuiuTorgovuiuTochkuUslugi struct {
	Key                      Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber               Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Quantity                 *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                  *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	NomenklaturnaiaGruppaKey *Guid   `xml:"НоменклатурнаяГруппа_Key" json:"НоменклатурнаяГруппа_Key,omitempty"`
	PodrazdelenieKey         *Guid   `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	ProektKey                *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	Soderzhanie              *String `xml:"Содержание" json:"Содержание,omitempty"`
	StavkaNDS                *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	StatiaZatratKey          *Guid   `xml:"СтатьяЗатрат_Key" json:"СтатьяЗатрат_Key,omitempty"`
	Sum                      *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                 *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	Cost                     *Float  `xml:"Цена" json:"Цена,omitempty"`
}

type CatalogKassyKKM struct {
	Key                        Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                *String  `xml:"Description" json:"Description,omitempty"`
	Code                       *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark               *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	KorrespondiruiushchiiSchet *String  `xml:"КорреспондирующийСчет" json:"КорреспондирующийСчет,omitempty"`
}

type Probe struct {
	Key            Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion    *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description    *String  `xml:"Description" json:"Description,omitempty"`
	Code           *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark   *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	MetallKey      *Guid    `xml:"Металл_Key" json:"Металл_Key,omitempty"`
	Proba          *Float   `xml:"Проба" json:"Проба,omitempty"`
	BIdentifikator *String  `xml:"Б_Идентификатор" json:"Б_Идентификатор,omitempty"`
}

type CatalogGruppyDostupa struct {
	Key                                          Guid                                              `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                                  *String                                           `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                                  *String                                           `xml:"Description" json:"Description,omitempty"`
	ParentKey                                    *Guid                                             `xml:"Parent_Key" json:"Parent_Key,omitempty"`
	IsFolder                                     *Boolean                                          `xml:"IsFolder" json:"IsFolder,omitempty"`
	DeletionMark                                 *Boolean                                          `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	ProfilKey                                    *Guid                                             `xml:"Профиль_Key" json:"Профиль_Key,omitempty"`
	PolzovatelKey                                *Guid                                             `xml:"Пользователь_Key" json:"Пользователь_Key,omitempty"`
	Opisanie                                     *String                                           `xml:"Описание" json:"Описание,omitempty"`
	OtvetstvennyiKey                             *Guid                                             `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	OsnovnaiaGruppaDostupaPostavliaemogoProfilia *Boolean                                          `xml:"ОсновнаяГруппаДоступаПоставляемогоПрофиля" json:"ОсновнаяГруппаДоступаПоставляемогоПрофиля,omitempty"`
	RazreshenieNaProsmotrZakupochnoiTseny        *Boolean                                          `xml:"РазрешениеНаПросмотрЗакупочнойЦены" json:"РазрешениеНаПросмотрЗакупочнойЦены,omitempty"`
	Polzovateli                                  *[]CatalogGruppyDostupaPolzovateliRowType         `xml:"Пользователи" json:"Пользователи,omitempty"`
	VidyDostupa                                  *[]CatalogGruppyDostupaVidyDostupaRowType         `xml:"ВидыДоступа" json:"ВидыДоступа,omitempty"`
	ZnacheniiaDostupa                            *[]CatalogGruppyDostupaZnacheniiaDostupaRowType   `xml:"ЗначенияДоступа" json:"ЗначенияДоступа,omitempty"`
	DostupPoPodsistemam                          *[]CatalogGruppyDostupaDostupPoPodsistemamRowType `xml:"ДоступПоПодсистемам" json:"ДоступПоПодсистемам,omitempty"`
}

type CatalogGruppyDostupaPolzovateli struct {
	Key            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Polzovatel     *String `xml:"Пользователь" json:"Пользователь,omitempty"`
	PolzovatelType *String `xml:"Пользователь_Type" json:"Пользователь_Type,omitempty"`
}

type CatalogGruppyDostupaVidyDostupa struct {
	Key            Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	VidDostupa     *String  `xml:"ВидДоступа" json:"ВидДоступа,omitempty"`
	VseRazresheny  *Boolean `xml:"ВсеРазрешены" json:"ВсеРазрешены,omitempty"`
	VidDostupaType *String  `xml:"ВидДоступа_Type" json:"ВидДоступа_Type,omitempty"`
}

type CatalogGruppyDostupaZnacheniiaDostupa struct {
	Key                  Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber           Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	VidDostupa           *String `xml:"ВидДоступа" json:"ВидДоступа,omitempty"`
	ZnachenieDostupa     *String `xml:"ЗначениеДоступа" json:"ЗначениеДоступа,omitempty"`
	VidDostupaType       *String `xml:"ВидДоступа_Type" json:"ВидДоступа_Type,omitempty"`
	ZnachenieDostupaType *String `xml:"ЗначениеДоступа_Type" json:"ЗначениеДоступа_Type,omitempty"`
}

type CatalogGruppyDostupaDostupPoPodsistemam struct {
	Key            Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber     Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	ImiaPodsistemy *String  `xml:"ИмяПодсистемы" json:"ИмяПодсистемы,omitempty"`
	ImiaObieekta   *String  `xml:"ИмяОбъекта" json:"ИмяОбъекта,omitempty"`
	Prosmotr       *Boolean `xml:"Просмотр" json:"Просмотр,omitempty"`
	Redaktirovanie *Boolean `xml:"Редактирование" json:"Редактирование,omitempty"`
	Pechat         *Boolean `xml:"Печать" json:"Печать,omitempty"`
	PokazVersii    *Boolean `xml:"ПоказВерсии" json:"ПоказВерсии,omitempty"`
}

type CatalogVidyKontaktnoiInformatsii struct {
	Key                              Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                      *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                      *String  `xml:"Description" json:"Description,omitempty"`
	Code                             *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark                     *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	VidObieektaKontaktnoiInformatsii *String  `xml:"ВидОбъектаКонтактнойИнформации" json:"ВидОбъектаКонтактнойИнформации,omitempty"`
	Tip                              *String  `xml:"Тип" json:"Тип,omitempty"`
}

type CatalogNomenklaturnyeGruppy struct {
	Key                           Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                   *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                   *String  `xml:"Description" json:"Description,omitempty"`
	Code                          *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark                  *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	BazovaiaEdinitsaIzmereniiaKey *Guid    `xml:"БазоваяЕдиницаИзмерения_Key" json:"БазоваяЕдиницаИзмерения_Key,omitempty"`
	StavkaNDS                     *String  `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
}

type DocumentReestrSchetov struct {
	Key                     Guid                                  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion             *String                               `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                  *String                               `xml:"Number" json:"Number,omitempty"`
	Date                    *Time                                 `xml:"Date" json:"Date,omitempty"`
	DeletionMark            *Boolean                              `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                  *Boolean                              `xml:"Posted" json:"Posted,omitempty"`
	DataAkkreditiva         *Time                                 `xml:"ДатаАккредитива" json:"ДатаАккредитива,omitempty"`
	DataZakrytiia           *Time                                 `xml:"ДатаЗакрытия" json:"ДатаЗакрытия,omitempty"`
	DokumentOsnovanieKey    *Guid                                 `xml:"ДокументОснование_Key" json:"ДокументОснование_Key,omitempty"`
	IspolniaiushchiiBankKey *Guid                                 `xml:"ИсполняющийБанк_Key" json:"ИсполняющийБанк_Key,omitempty"`
	Comment                 *String                               `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey           *Guid                                 `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	NomerAkkreditiva        *String                               `xml:"НомерАккредитива" json:"НомерАккредитива,omitempty"`
	OrganizatsiiaKey        *Guid                                 `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey        *Guid                                 `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	SummaAkkreditiva        *Float                                `xml:"СуммаАккредитива" json:"СуммаАккредитива,omitempty"`
	SchetKontragentaKey     *Guid                                 `xml:"СчетКонтрагента_Key" json:"СчетКонтрагента_Key,omitempty"`
	SchetOrganizatsiiKey    *Guid                                 `xml:"СчетОрганизации_Key" json:"СчетОрганизации_Key,omitempty"`
	Reestr                  *[]DocumentReestrSchetovReestrRowType `xml:"Реестр" json:"Реестр,omitempty"`
}

func (entity DocumentReestrSchetov) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentReestrSchetov) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentReestrSchetovReestr struct {
	Key            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	VidTransporta  *String `xml:"ВидТранспорта" json:"ВидТранспорта,omitempty"`
	DataOtgruzki   *Time   `xml:"ДатаОтгрузки" json:"ДатаОтгрузки,omitempty"`
	NomerDokumenta *String `xml:"НомерДокумента" json:"НомерДокумента,omitempty"`
	Sum            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
}

type DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiu struct {
	Key                   Guid                                                                `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion           *String                                                             `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                *String                                                             `xml:"Number" json:"Number,omitempty"`
	Date                  *Time                                                               `xml:"Date" json:"Date,omitempty"`
	DeletionMark          *Boolean                                                            `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                *Boolean                                                            `xml:"Posted" json:"Posted,omitempty"`
	DogovorKontragentaKey *Guid                                                               `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	Comment               *String                                                             `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey         *Guid                                                               `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	OrganizatsiiaKey      *Guid                                                               `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey      *Guid                                                               `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey      *Guid                                                               `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	Sdelka                *String                                                             `xml:"Сделка" json:"Сделка,omitempty"`
	Goods                 *[]DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovaryRowType `xml:"Товары" json:"Товары,omitempty"`
	SdelkaType            *String                                                             `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

func (entity DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiu) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiu) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentInventarizatsiiaTovarovOtdannykhNaKomissiiuTovary struct {
	Key                            Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float `xml:"Вес" json:"Вес,omitempty"`
	VesUchet                       *Float `xml:"ВесУчет" json:"ВесУчет,omitempty"`
	Quantity                       *Int   `xml:"Количество" json:"Количество,omitempty"`
	KolichestvoUchet               *Int   `xml:"КоличествоУчет" json:"КоличествоУчет,omitempty"`
	ItemKey                        *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid  `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid  `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid  `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
}

type CatalogKlassifikatorStranMira struct {
	Key                Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion        *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description        *String  `xml:"Description" json:"Description,omitempty"`
	Code               *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark       *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	NaimenovaniePolnoe *String  `xml:"НаименованиеПолное" json:"НаименованиеПолное,omitempty"`
	KodAlfa2           *String  `xml:"КодАльфа2" json:"КодАльфа2,omitempty"`
}

type CatalogKlassifikatorEdinitsIzmereniia struct {
	Key                         Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                 *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                 *String  `xml:"Description" json:"Description,omitempty"`
	Code                        *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark                *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	NaimenovaniePolnoe          *String  `xml:"НаименованиеПолное" json:"НаименованиеПолное,omitempty"`
	MezhdunarodnoeSokrashchenie *String  `xml:"МеждународноеСокращение" json:"МеждународноеСокращение,omitempty"`
	TipEdinitsyIzmereniia       *String  `xml:"ТипЕдиницыИзмерения" json:"ТипЕдиницыИзмерения,omitempty"`
	BIdentifikator              *String  `xml:"Б_Идентификатор" json:"Б_Идентификатор,omitempty"`
}

type CatalogNastroikiRMK struct {
	Key                                                          Guid                                                   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                                                  *String                                                `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                                                  *String                                                `xml:"Description" json:"Description,omitempty"`
	Code                                                         *String                                                `xml:"Code" json:"Code,omitempty"`
	DeletionMark                                                 *Boolean                                               `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	VidAvtorizatsii                                              *String                                                `xml:"ВидАвторизации" json:"ВидАвторизации,omitempty"`
	VidOplaty2                                                   *String                                                `xml:"ВидОплаты2" json:"ВидОплаты2,omitempty"`
	VidOplaty2PoUmolchaniiuKey                                   *Guid                                                  `xml:"ВидОплаты2ПоУмолчанию_Key" json:"ВидОплаты2ПоУмолчанию_Key,omitempty"`
	VidOplaty3                                                   *String                                                `xml:"ВидОплаты3" json:"ВидОплаты3,omitempty"`
	VidOplaty3PoUmolchaniiuKey                                   *Guid                                                  `xml:"ВидОплаты3ПоУмолчанию_Key" json:"ВидОплаты3ПоУмолчанию_Key,omitempty"`
	VidOplaty4                                                   *String                                                `xml:"ВидОплаты4" json:"ВидОплаты4,omitempty"`
	VidOplaty4PoUmolchaniiuKey                                   *Guid                                                  `xml:"ВидОплаты4ПоУмолчанию_Key" json:"ВидОплаты4ПоУмолчанию_Key,omitempty"`
	VyvoditSpisokSertifikatovPriOplate                           *Boolean                                               `xml:"ВыводитьСписокСертификатовПриОплате" json:"ВыводитьСписокСертификатовПриОплате,omitempty"`
	ZakryvatPodborPriVyboreTovara                                *Boolean                                               `xml:"ЗакрыватьПодборПриВыбореТовара" json:"ЗакрыватьПодборПриВыбореТовара,omitempty"`
	ZapretitProdazhuNizheSebestoimosti                           *Boolean                                               `xml:"ЗапретитьПродажуНижеСебестоимости" json:"ЗапретитьПродажуНижеСебестоимости,omitempty"`
	IntervalProverkiOtvetaNaZaprosProverkiSertifikata            *Int                                                   `xml:"ИнтервалПроверкиОтветаНаЗапросПроверкиСертификата" json:"ИнтервалПроверкиОтветаНаЗапросПроверкиСертификата,omitempty"`
	IspolzovatAvtomaticheskieSkidki                              *Boolean                                               `xml:"ИспользоватьАвтоматическиеСкидки" json:"ИспользоватьАвтоматическиеСкидки,omitempty"`
	IspolzovatVidOplaty2                                         *Boolean                                               `xml:"ИспользоватьВидОплаты2" json:"ИспользоватьВидОплаты2,omitempty"`
	IspolzovatVidOplaty3                                         *Boolean                                               `xml:"ИспользоватьВидОплаты3" json:"ИспользоватьВидОплаты3,omitempty"`
	IspolzovatVidOplaty4                                         *Boolean                                               `xml:"ИспользоватьВидОплаты4" json:"ИспользоватьВидОплаты4,omitempty"`
	IspolzovatVidOplatySertifikatom                              *Boolean                                               `xml:"ИспользоватьВидОплатыСертификатом" json:"ИспользоватьВидОплатыСертификатом,omitempty"`
	IspolzovatObmenStarykhIzdeliiNaNovye                         *Boolean                                               `xml:"ИспользоватьОбменСтарыхИзделийНаНовые" json:"ИспользоватьОбменСтарыхИзделийНаНовые,omitempty"`
	IspolzovatOplatuSertifikatami                                *Boolean                                               `xml:"ИспользоватьОплатуСертификатами" json:"ИспользоватьОплатуСертификатами,omitempty"`
	IspolzovatRuchnyeSkidki                                      *Boolean                                               `xml:"ИспользоватьРучныеСкидки" json:"ИспользоватьРучныеСкидки,omitempty"`
	KontrolirovatOstatokPriProvedenii                            *Boolean                                               `xml:"КонтролироватьОстатокПриПроведении" json:"КонтролироватьОстатокПриПроведении,omitempty"`
	MaksimalnoeVremiaOzhidaniiaOtvetaNaZaprosProverkiSertifikata *Int                                                   `xml:"МаксимальноеВремяОжиданияОтветаНаЗапросПроверкиСертификата" json:"МаксимальноеВремяОжиданияОтветаНаЗапросПроверкиСертификата,omitempty"`
	NaimenovanieSummyDoplatyZaTovaryPoSertifikatam               *String                                                `xml:"НаименованиеСуммыДоплатыЗаТоварыПоСертификатам" json:"НаименованиеСуммыДоплатыЗаТоварыПоСертификатам,omitempty"`
	NastroikiObmenaDannymiKey                                    *Guid                                                  `xml:"НастройкиОбменаДанными_Key" json:"НастройкиОбменаДанными_Key,omitempty"`
	OrganizatsiiaKey                                             *Guid                                                  `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtobrazhatKlaviaturuPriZapuske                               *Boolean                                               `xml:"ОтображатьКлавиатуруПриЗапуске" json:"ОтображатьКлавиатуруПриЗапуске,omitempty"`
	PechatatVtoroiEkzempliarTovarnogoCheka                       *Boolean                                               `xml:"ПечататьВторойЭкземплярТоварногоЧека" json:"ПечататьВторойЭкземплярТоварногоЧека,omitempty"`
	PechatatVtoroiEkzempliarTovarnogoChekaNaPrintere             *Boolean                                               `xml:"ПечататьВторойЭкземплярТоварногоЧекаНаПринтере" json:"ПечататьВторойЭкземплярТоварногоЧекаНаПринтере,omitempty"`
	PechatatImiaKassira                                          *Boolean                                               `xml:"ПечататьИмяКассира" json:"ПечататьИмяКассира,omitempty"`
	PechatatNazvanieDiskontnoiKarty                              *Boolean                                               `xml:"ПечататьНазваниеДисконтнойКарты" json:"ПечататьНазваниеДисконтнойКарты,omitempty"`
	PechatatNazvaniePlatezhnoiKarty                              *Boolean                                               `xml:"ПечататьНазваниеПлатежнойКарты" json:"ПечататьНазваниеПлатежнойКарты,omitempty"`
	PechatatNumeratsiiuPozitsii                                  *Boolean                                               `xml:"ПечататьНумерациюПозиций" json:"ПечататьНумерациюПозиций,omitempty"`
	PechatatSummuNachislennogoBonusa                             *Boolean                                               `xml:"ПечататьСуммуНачисленногоБонуса" json:"ПечататьСуммуНачисленногоБонуса,omitempty"`
	PechatatTovarnyiChekNaPrintere                               *Boolean                                               `xml:"ПечататьТоварныйЧекНаПринтере" json:"ПечататьТоварныйЧекНаПринтере,omitempty"`
	PechatatTovarnyiChekPriRegistratsiiProdazhi                  *Boolean                                               `xml:"ПечататьТоварныйЧекПриРегистрацииПродажи" json:"ПечататьТоварныйЧекПриРегистрацииПродажи,omitempty"`
	PechatatShtrikhkodPriRegistratsiiProdazhi                    *Boolean                                               `xml:"ПечататьШтрихкодПриРегистрацииПродажи" json:"ПечататьШтрихкодПриРегистрацииПродажи,omitempty"`
	PoriadokOkrugleniiaSumm                                      *String                                                `xml:"ПорядокОкругленияСумм" json:"ПорядокОкругленияСумм,omitempty"`
	PriVozvrateRaspechatyvatPaketDokumentov                      *Boolean                                               `xml:"ПриВозвратеРаспечатыватьПакетДокументов" json:"ПриВозвратеРаспечатыватьПакетДокументов,omitempty"`
	PriVozvrateRaspechatyvatPaketDokumentovNaPrintere            *Boolean                                               `xml:"ПриВозвратеРаспечатыватьПакетДокументовНаПринтере" json:"ПриВозвратеРаспечатыватьПакетДокументовНаПринтере,omitempty"`
	ProtsentOgranicheniiaSummySkidki                             *Float                                                 `xml:"ПроцентОграниченияСуммыСкидки" json:"ПроцентОграниченияСуммыСкидки,omitempty"`
	RezhimProverkiSertifikatov                                   *Int                                                   `xml:"РежимПроверкиСертификатов" json:"РежимПроверкиСертификатов,omitempty"`
	DepartmentKey                                                *Guid                                                  `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	SposobPrimeneniiaNeskolkikhSkidok                            *String                                                `xml:"СпособПримененияНесколькихСкидок" json:"СпособПримененияНесколькихСкидок,omitempty"`
	ShablonChekaKey                                              *Guid                                                  `xml:"ШаблонЧека_Key" json:"ШаблонЧека_Key,omitempty"`
	IspolzovatAvtomaticheskieSkidkiMarketing                     *Boolean                                               `xml:"ИспользоватьАвтоматическиеСкидкиМаркетинг" json:"ИспользоватьАвтоматическиеСкидкиМаркетинг,omitempty"`
	KassaKKMKey                                                  *Guid                                                  `xml:"КассаККМ_Key" json:"КассаККМ_Key,omitempty"`
	IspolzovatProdazhuUslug                                      *Boolean                                               `xml:"ИспользоватьПродажуУслуг" json:"ИспользоватьПродажуУслуг,omitempty"`
	TrebovatVvodPasportnykhDannykh                               *Boolean                                               `xml:"ТребоватьВводПаспортныхДанных" json:"ТребоватьВводПаспортныхДанных,omitempty"`
	ZapolniatAnketuKlientaPriProdazhe                            *Boolean                                               `xml:"ЗаполнятьАнкетуКлиентаПриПродаже" json:"ЗаполнятьАнкетуКлиентаПриПродаже,omitempty"`
	ZapolniatAnketuKlientaPriSkupke                              *Boolean                                               `xml:"ЗаполнятьАнкетуКлиентаПриСкупке" json:"ЗаполнятьАнкетуКлиентаПриСкупке,omitempty"`
	PechatatTovarnyiChekPriSkupke                                *Boolean                                               `xml:"ПечататьТоварныйЧекПриСкупке" json:"ПечататьТоварныйЧекПриСкупке,omitempty"`
	PechatatSkupochnuiuKvitantsiiuPriSkupke                      *Boolean                                               `xml:"ПечататьСкупочнуюКвитанциюПриСкупке" json:"ПечататьСкупочнуюКвитанциюПриСкупке,omitempty"`
	KolichestvoEkzempliarovTovarnogoChekaPriSkupke               *Int                                                   `xml:"КоличествоЭкземпляровТоварногоЧекаПриСкупке" json:"КоличествоЭкземпляровТоварногоЧекаПриСкупке,omitempty"`
	KolichestvoEkzempliarovSkupochnoiKvitantsiiPriSkupke         *Int                                                   `xml:"КоличествоЭкземпляровСкупочнойКвитанцииПриСкупке" json:"КоличествоЭкземпляровСкупочнойКвитанцииПриСкупке,omitempty"`
	VidProbitiiaSkupki                                           *String                                                `xml:"ВидПробитияСкупки" json:"ВидПробитияСкупки,omitempty"`
	RazreshitZamenuKarty                                         *Boolean                                               `xml:"РазрешитьЗаменуКарты" json:"РазрешитьЗаменуКарты,omitempty"`
	RazreshitVozvratNeDenVDenPoCheku                             *Boolean                                               `xml:"РазрешитьВозвратНеДеньВДеньПоЧеку" json:"РазрешитьВозвратНеДеньВДеньПоЧеку,omitempty"`
	PeredachaNomenklaturyKlientuPriPolnomPogasheniiRassrochki    *Boolean                                               `xml:"ПередачаНоменклатурыКлиентуПриПолномПогашенииРассрочки" json:"ПередачаНоменклатурыКлиентуПриПолномПогашенииРассрочки,omitempty"`
	NeVyvoditInformatsiiuOKomitenteVChek                         *Boolean                                               `xml:"НеВыводитьИнформациюОКомитентеВЧек" json:"НеВыводитьИнформациюОКомитентеВЧек,omitempty"`
	RazreshitVozvratNalichnymiPriProdazhePoBeznalichnomuRaschetu *Boolean                                               `xml:"РазрешитьВозвратНаличнымиПриПродажеПоБезналичномуРасчету" json:"РазрешитьВозвратНаличнымиПриПродажеПоБезналичномуРасчету,omitempty"`
	PoriadokPrimeneniiaSkidok                                    *[]CatalogNastroikiRMKPoriadokPrimeneniiaSkidokRowType `xml:"ПорядокПримененияСкидок" json:"ПорядокПримененияСкидок,omitempty"`
	SostavNaimenovaniia                                          *[]CatalogNastroikiRMKSostavNaimenovaniiaRowType       `xml:"СоставНаименования" json:"СоставНаименования,omitempty"`
}

type CatalogNastroikiRMKPoriadokPrimeneniiaSkidok struct {
	Key           Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber    Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	UslovieSkidki *String `xml:"УсловиеСкидки" json:"УсловиеСкидки,omitempty"`
}

type CatalogNastroikiRMKSostavNaimenovaniia struct {
	Key                  Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber           Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	SimvolyDo            *String `xml:"СимволыДо" json:"СимволыДо,omitempty"`
	SimvolyPosle         *String `xml:"СимволыПосле" json:"СимволыПосле,omitempty"`
	ElementNaimenovaniia *String `xml:"ЭлементНаименования" json:"ЭлементНаименования,omitempty"`
}

type CatalogKharakteristikiNomenklatury struct {
	Key                    Guid                                                        `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion            *String                                                     `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description            *String                                                     `xml:"Description" json:"Description,omitempty"`
	Code                   *String                                                     `xml:"Code" json:"Code,omitempty"`
	OwnerKey               *Guid                                                       `xml:"Owner_Key" json:"Owner_Key,omitempty"`
	DeletionMark           *Boolean                                                    `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	PolnoeNaimenovanie     *String                                                     `xml:"ПолноеНаименование" json:"ПолноеНаименование,omitempty"`
	PerechenKamnei         *String                                                     `xml:"ПереченьКамней" json:"ПереченьКамней,omitempty"`
	PerechenKamneiTranslit *String                                                     `xml:"ПереченьКамнейТранслит" json:"ПереченьКамнейТранслит,omitempty"`
	BIdentifikator         *String                                                     `xml:"Б_Идентификатор" json:"Б_Идентификатор,omitempty"`
	BNomerVersii           *String                                                     `xml:"Б_НомерВерсии" json:"Б_НомерВерсии,omitempty"`
	Spetsifikatsiia        *[]CatalogKharakteristikiNomenklaturySpetsifikatsiiaRowType `xml:"Спецификация" json:"Спецификация,omitempty"`
}

type CatalogKharakteristikiNomenklaturySpetsifikatsiia struct {
	Key              Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber       Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight           *Float `xml:"Вес" json:"Вес,omitempty"`
	GruppaDefektaKey *Guid  `xml:"ГруппаДефекта_Key" json:"ГруппаДефекта_Key,omitempty"`
	GruppaTsvetaKey  *Guid  `xml:"ГруппаЦвета_Key" json:"ГруппаЦвета_Key,omitempty"`
	KamenKey         *Guid  `xml:"Камень_Key" json:"Камень_Key,omitempty"`
	Quantity         *Float `xml:"Количество" json:"Количество,omitempty"`
	ItemKey          *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	Razmer1          *Float `xml:"Размер1" json:"Размер1,omitempty"`
	Razmer2          *Float `xml:"Размер2" json:"Размер2,omitempty"`
	Razmer3          *Float `xml:"Размер3" json:"Размер3,omitempty"`
	RassevKey        *Guid  `xml:"Рассев_Key" json:"Рассев_Key,omitempty"`
	FormaOgrankiKey  *Guid  `xml:"ФормаОгранки_Key" json:"ФормаОгранки_Key,omitempty"`
	TsvetKamniaKey   *Guid  `xml:"ЦветКамня_Key" json:"ЦветКамня_Key,omitempty"`
}

type DocumentOtborTovarov struct {
	Key                            Guid                                        `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                    *String                                     `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                         *String                                     `xml:"Number" json:"Number,omitempty"`
	Date                           *Time                                       `xml:"Date" json:"Date,omitempty"`
	DeletionMark                   *Boolean                                    `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                         *Boolean                                    `xml:"Posted" json:"Posted,omitempty"`
	BankovskiiSchetOrganizatsiiKey *Guid                                       `xml:"БанковскийСчетОрганизации_Key" json:"БанковскийСчетОрганизации_Key,omitempty"`
	ValiutaDokumentaKey            *Guid                                       `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	Weight                         *Float                                      `xml:"ВесДокумента" json:"ВесДокумента,omitempty"`
	DogovorKontragentaKey          *Guid                                       `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie              *String                                     `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	ZakazKlientaKey                *Guid                                       `xml:"ЗаказКлиента_Key" json:"ЗаказКлиента_Key,omitempty"`
	KolichestvoDokumenta           *Int                                        `xml:"КоличествоДокумента" json:"КоличествоДокумента,omitempty"`
	Comment                        *String                                     `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey                  *Guid                                       `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	KratnostVzaimoraschetov        *Int                                        `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov            *Float                                      `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	OrganizatsiiaKey               *Guid                                       `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey               *Guid                                       `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	DepartmentKey                  *Guid                                       `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	Soglasovano                    *Boolean                                    `xml:"Согласовано" json:"Согласовано,omitempty"`
	SummaVkliuchaetNDS             *Boolean                                    `xml:"СуммаВключаетНДС" json:"СуммаВключаетНДС,omitempty"`
	SumOfDocument                  *Float                                      `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	SkhemaRealizatsiiKey           *Guid                                       `xml:"СхемаРеализации_Key" json:"СхемаРеализации_Key,omitempty"`
	TipTsenKey                     *Guid                                       `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
	UchityvatNDS                   *Boolean                                    `xml:"УчитыватьНДС" json:"УчитыватьНДС,omitempty"`
	Goods                          *[]DocumentOtborTovarovTovaryRowType        `xml:"Товары" json:"Товары,omitempty"`
	TovaryKOtboru                  *[]DocumentOtborTovarovTovaryKOtboruRowType `xml:"ТоварыКОтбору" json:"ТоварыКОтбору,omitempty"`
	DokumentOsnovanieType          *String                                     `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
}

func (entity DocumentOtborTovarov) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentOtborTovarov) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentOtborTovarovTovary struct {
	Key                                        Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                                 Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                                     *Float  `xml:"Вес" json:"Вес,omitempty"`
	ZnachenieUsloviiaAvtomaticheskoiSkidki     *String `xml:"ЗначениеУсловияАвтоматическойСкидки" json:"ЗначениеУсловияАвтоматическойСкидки,omitempty"`
	Quantity                                   *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                                    *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	PercentAutoDiscount                        *Float  `xml:"ПроцентАвтоматическойСкидки" json:"ПроцентАвтоматическойСкидки,omitempty"`
	PercentManualDiscount                      *Float  `xml:"ПроцентРучнойСкидки" json:"ПроцентРучнойСкидки,omitempty"`
	SizeKey                                    *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                                *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	StavkaNDS                                  *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                                        *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                                   *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	UslovieAvtomaticheskoiSkidki               *String `xml:"УсловиеАвтоматическойСкидки" json:"УсловиеАвтоматическойСкидки,omitempty"`
	KharakteristikaNomenklaturyKey             *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                                       *Float  `xml:"Цена" json:"Цена,omitempty"`
	SumManualDiscount                          *Float  `xml:"СуммаРучнойСкидки" json:"СуммаРучнойСкидки,omitempty"`
	SumAutoDiscount                            *Float  `xml:"СуммаАвтоматическойСкидки" json:"СуммаАвтоматическойСкидки,omitempty"`
	ZnachenieUsloviiaAvtomaticheskoiSkidkiType *String `xml:"ЗначениеУсловияАвтоматическойСкидки_Type" json:"ЗначениеУсловияАвтоматическойСкидки_Type,omitempty"`
}

type DocumentOtborTovarovTovaryKOtboru struct {
	Key         Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber  Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight      *Float `xml:"Вес" json:"Вес,omitempty"`
	Quantity    *Int   `xml:"Количество" json:"Количество,omitempty"`
	ItemKey     *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey     *Guid  `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey *Guid  `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
}

type CatalogSposobyDostavkiTovara struct {
	Key          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion  *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description  *String  `xml:"Description" json:"Description,omitempty"`
	Code         *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
}

type CatalogPodrazdeleniia struct {
	Key          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion  *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description  *String  `xml:"Description" json:"Description,omitempty"`
	Code         *String  `xml:"Code" json:"Code,omitempty"`
	ParentKey    *Guid    `xml:"Parent_Key" json:"Parent_Key,omitempty"`
	DeletionMark *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
}

type DocumentJournalPreiskuranty struct {
	Ref             String   `xml:"Ref" json:"Ref,omitempty"`
	Type            *String  `xml:"Type" json:"Type,omitempty"`
	Date            *Time    `xml:"Date" json:"Date,omitempty"`
	DeletionMark    *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Number          *String  `xml:"Number" json:"Number,omitempty"`
	Posted          *Boolean `xml:"Posted" json:"Posted,omitempty"`
	KamenKey        *Guid    `xml:"Камень_Key" json:"Камень_Key,omitempty"`
	Komentarii      *String  `xml:"Коментарий" json:"Коментарий,omitempty"`
	RassevKey       *Guid    `xml:"Рассев_Key" json:"Рассев_Key,omitempty"`
	FormaOgrankiKey *Guid    `xml:"ФормаОгранки_Key" json:"ФормаОгранки_Key,omitempty"`
	RefType         String   `xml:"Ref_Type" json:"Ref_Type,omitempty"`
}

type CatalogRelizyIuvelirnykhSalonov struct {
	Key                                  Guid                                                        `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                          *String                                                     `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                          *String                                                     `xml:"Description" json:"Description,omitempty"`
	DeletionMark                         *Boolean                                                    `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	NomerVersiiKonfiguratsii             *String                                                     `xml:"НомерВерсииКонфигурации" json:"НомерВерсииКонфигурации,omitempty"`
	TipFailaPostavki                     *String                                                     `xml:"ТипФайлаПоставки" json:"ТипФайлаПоставки,omitempty"`
	KhranilishcheFailaPostavkiBase64Data *Binary                                                     `xml:"ХранилищеФайлаПоставки_Base64Data" json:"ХранилищеФайлаПоставки_Base64Data,omitempty"`
	ObnovliaemyeRelizy                   *[]CatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizyRowType `xml:"ОбновляемыеРелизы" json:"ОбновляемыеРелизы,omitempty"`
	KhranilishcheFailaPostavkiType       *String                                                     `xml:"ХранилищеФайлаПоставки_Type" json:"ХранилищеФайлаПоставки_Type,omitempty"`
	KhranilishcheFailaPostavki           *Binary                                                     `xml:"ХранилищеФайлаПоставки" json:"ХранилищеФайлаПоставки,omitempty"`
}

type CatalogRelizyIuvelirnykhSalonovObnovliaemyeRelizy struct {
	Key                       Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	RelizIuvelirnogoSalonaKey *Guid `xml:"РелизЮвелирногоСалона_Key" json:"РелизЮвелирногоСалона_Key,omitempty"`
}

type DocumentOtchetKomissioneraOProdazhakh struct {
	Key                                         Guid                                                             `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                                 *String                                                          `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                                      *String                                                          `xml:"Number" json:"Number,omitempty"`
	Date                                        *Time                                                            `xml:"Date" json:"Date,omitempty"`
	DeletionMark                                *Boolean                                                         `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                                      *Boolean                                                         `xml:"Posted" json:"Posted,omitempty"`
	ValiutaDokumentaKey                         *Guid                                                            `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	Weight                                      *Float                                                           `xml:"ВесДокумента" json:"ВесДокумента,omitempty"`
	DataVkhodiashchegoDokumenta                 *Time                                                            `xml:"ДатаВходящегоДокумента" json:"ДатаВходящегоДокумента,omitempty"`
	DogovorKontragentaKey                       *Guid                                                            `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie                           *String                                                          `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	DokumentSozdanVIuTD                         *Boolean                                                         `xml:"ДокументСозданВЮТД" json:"ДокументСозданВЮТД,omitempty"`
	KolichestvoDokumenta                        *Int                                                             `xml:"КоличествоДокумента" json:"КоличествоДокумента,omitempty"`
	Comment                                     *String                                                          `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey                               *Guid                                                            `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	KratnostVzaimoraschetov                     *Int                                                             `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov                         *Float                                                           `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	NomenklaturnaiaGruppaKey                    *Guid                                                            `xml:"НоменклатурнаяГруппа_Key" json:"НоменклатурнаяГруппа_Key,omitempty"`
	NomerVkhodiashchegoDokumenta                *String                                                          `xml:"НомерВходящегоДокумента" json:"НомерВходящегоДокумента,omitempty"`
	OrganizatsiiaKey                            *Guid                                                            `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                            *Guid                                                            `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey                            *Guid                                                            `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	ProektKey                                   *Guid                                                            `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	ProtsentKomissionnogoVoznagrazhdeniia       *Float                                                           `xml:"ПроцентКомиссионногоВознаграждения" json:"ПроцентКомиссионногоВознаграждения,omitempty"`
	Sdelka                                      *String                                                          `xml:"Сделка" json:"Сделка,omitempty"`
	SposobRaschetaKomissionnogoVoznagrazhdeniia *String                                                          `xml:"СпособРасчетаКомиссионногоВознаграждения" json:"СпособРасчетаКомиссионногоВознаграждения,omitempty"`
	StavkaNDSVoznagrazhdeniia                   *String                                                          `xml:"СтавкаНДСВознаграждения" json:"СтавкаНДСВознаграждения,omitempty"`
	StatiaZatratKey                             *Guid                                                            `xml:"СтатьяЗатрат_Key" json:"СтатьяЗатрат_Key,omitempty"`
	SummaVkliuchaetNDS                          *Boolean                                                         `xml:"СуммаВключаетНДС" json:"СуммаВключаетНДС,omitempty"`
	SummaVoznagrazhdeniia                       *Float                                                           `xml:"СуммаВознаграждения" json:"СуммаВознаграждения,omitempty"`
	SumOfDocument                               *Float                                                           `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	TipDokumenta                                *String                                                          `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	TipTsenKey                                  *Guid                                                            `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
	UderzhatKomissionnoeVoznagrazhdenie         *Boolean                                                         `xml:"УдержатьКомиссионноеВознаграждение" json:"УдержатьКомиссионноеВознаграждение,omitempty"`
	UsloviiaOplatyKey                           *Guid                                                            `xml:"УсловияОплаты_Key" json:"УсловияОплаты_Key,omitempty"`
	UchityvatNDS                                *Boolean                                                         `xml:"УчитыватьНДС" json:"УчитыватьНДС,omitempty"`
	KhoziaistvennaiaOperatsiiaKey               *Guid                                                            `xml:"ХозяйственнаяОперация_Key" json:"ХозяйственнаяОперация_Key,omitempty"`
	DenezhnyeSredstva                           *[]DocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstvaRowType `xml:"ДенежныеСредства" json:"ДенежныеСредства,omitempty"`
	Goods                                       *[]DocumentOtchetKomissioneraOProdazhakhTovaryRowType            `xml:"Товары" json:"Товары,omitempty"`
	DokumentOsnovanieType                       *String                                                          `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
	SdelkaType                                  *String                                                          `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

func (entity DocumentOtchetKomissioneraOProdazhakh) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentOtchetKomissioneraOProdazhakh) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentOtchetKomissioneraOProdazhakhDenezhnyeSredstva struct {
	Key                   Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber            Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	VidOtchetaPoPlatezham *String `xml:"ВидОтчетаПоПлатежам" json:"ВидОтчетаПоПлатежам,omitempty"`
	StavkaNDS             *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                   *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS              *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
}

type DocumentOtchetKomissioneraOProdazhakhTovary struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	StavkaNDS                      *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaVoznagrazhdeniia          *Float  `xml:"СуммаВознаграждения" json:"СуммаВознаграждения,omitempty"`
	SummaNDS                       *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	SummaNDSVoznagrazhdeniia       *Float  `xml:"СуммаНДСВознаграждения" json:"СуммаНДСВознаграждения,omitempty"`
	SummaNDSPeredachi              *Float  `xml:"СуммаНДСПередачи" json:"СуммаНДСПередачи,omitempty"`
	SummaPeredachi                 *Float  `xml:"СуммаПередачи" json:"СуммаПередачи,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float  `xml:"Цена" json:"Цена,omitempty"`
	TsenaPeredachi                 *Float  `xml:"ЦенаПередачи" json:"ЦенаПередачи,omitempty"`
	DataSchetaFakturyKomissionera  *Time   `xml:"ДатаСчетаФактурыКомиссионера" json:"ДатаСчетаФактурыКомиссионера,omitempty"`
	PokupatelKey                   *Guid   `xml:"Покупатель_Key" json:"Покупатель_Key,omitempty"`
	NomerSchetaFakturyKomissionera *String `xml:"НомерСчетаФактурыКомиссионера" json:"НомерСчетаФактурыКомиссионера,omitempty"`
}

type CatalogTovarnyeKategorii struct {
	Key                      Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion              *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description              *String  `xml:"Description" json:"Description,omitempty"`
	DeletionMark             *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	NomenklaturnaiaGruppaKey *Guid    `xml:"НоменклатурнаяГруппа_Key" json:"НоменклатурнаяГруппа_Key,omitempty"`
}

type CatalogDokumentyUdostoveriaiushchieLichnost struct {
	Key          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion  *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description  *String  `xml:"Description" json:"Description,omitempty"`
	DeletionMark *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	KodIMNS      *String  `xml:"КодИМНС" json:"КодИМНС,omitempty"`
	KodPFR       *String  `xml:"КодПФР" json:"КодПФР,omitempty"`
}

type CatalogFiltryDliaElektronnykhPisem struct {
	Key                Guid                                                        `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion        *String                                                     `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description        *String                                                     `xml:"Description" json:"Description,omitempty"`
	Code               *String                                                     `xml:"Code" json:"Code,omitempty"`
	OwnerKey           *Guid                                                       `xml:"Owner_Key" json:"Owner_Key,omitempty"`
	DeletionMark       *Boolean                                                    `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Ispolzovanie       *Boolean                                                    `xml:"Использование" json:"Использование,omitempty"`
	OperatsiiaUsloviia *Boolean                                                    `xml:"ОперацияУсловия" json:"ОперацияУсловия,omitempty"`
	Poriadok           *Int                                                        `xml:"Порядок" json:"Порядок,omitempty"`
	DeistviiaFiltra    *[]CatalogFiltryDliaElektronnykhPisemDeistviiaFiltraRowType `xml:"ДействияФильтра" json:"ДействияФильтра,omitempty"`
	UsloviiaFiltra     *[]CatalogFiltryDliaElektronnykhPisemUsloviiaFiltraRowType  `xml:"УсловияФильтра" json:"УсловияФильтра,omitempty"`
}

type CatalogFiltryDliaElektronnykhPisemDeistviiaFiltra struct {
	Key            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	GruppaPisemKey *Guid   `xml:"ГруппаПисем_Key" json:"ГруппаПисем_Key,omitempty"`
	DeistvieFiltra *String `xml:"ДействиеФильтра" json:"ДействиеФильтра,omitempty"`
}

type CatalogFiltryDliaElektronnykhPisemUsloviiaFiltra struct {
	Key                Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber         Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	ZnachenieUsloviia  *String  `xml:"ЗначениеУсловия" json:"ЗначениеУсловия,omitempty"`
	OtritsanieUsloviia *Boolean `xml:"ОтрицаниеУсловия" json:"ОтрицаниеУсловия,omitempty"`
	Uslovie            *String  `xml:"Условие" json:"Условие,omitempty"`
}

type DocumentPreiskurantTsenNaTsvKamni struct {
	Key             Guid                                                `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion     *String                                             `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number          *String                                             `xml:"Number" json:"Number,omitempty"`
	Date            *Time                                               `xml:"Date" json:"Date,omitempty"`
	DeletionMark    *Boolean                                            `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted          *Boolean                                            `xml:"Posted" json:"Posted,omitempty"`
	KamenKey        *Guid                                               `xml:"Камень_Key" json:"Камень_Key,omitempty"`
	Comment         *String                                             `xml:"Комментарий" json:"Комментарий,omitempty"`
	RassevKey       *Guid                                               `xml:"Рассев_Key" json:"Рассев_Key,omitempty"`
	TipTsenKey      *Guid                                               `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
	FormaOgrankiKey *Guid                                               `xml:"ФормаОгранки_Key" json:"ФормаОгранки_Key,omitempty"`
	TsvetKamniaKey  *Guid                                               `xml:"ЦветКамня_Key" json:"ЦветКамня_Key,omitempty"`
	Tablitsa        *[]DocumentPreiskurantTsenNaTsvKamniTablitsaRowType `xml:"Таблица" json:"Таблица,omitempty"`
}

func (entity DocumentPreiskurantTsenNaTsvKamni) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentPreiskurantTsenNaTsvKamni) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentPreiskurantTsenNaTsvKamniTablitsa struct {
	Key             Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber      Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	Razmer1Do       *Float `xml:"Размер1До" json:"Размер1До,omitempty"`
	Razmer1Ot       *Float `xml:"Размер1От" json:"Размер1От,omitempty"`
	RassevKey       *Guid  `xml:"Рассев_Key" json:"Рассев_Key,omitempty"`
	FormaOgrankiKey *Guid  `xml:"ФормаОгранки_Key" json:"ФормаОгранки_Key,omitempty"`
	TsvetKamniaKey  *Guid  `xml:"ЦветКамня_Key" json:"ЦветКамня_Key,omitempty"`
	Cost            *Int   `xml:"Цена" json:"Цена,omitempty"`
}

type Size struct {
	Key            Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion    *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description    *String  `xml:"Description" json:"Description,omitempty"`
	Code           *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark   *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	BIdentifikator *String  `xml:"Б_Идентификатор" json:"Б_Идентификатор,omitempty"`
}

type CatalogTipyDragotsennykhMetallov struct {
	Key            Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion    *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Code           *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark   *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	ProbaChistoty  *Float   `xml:"ПробаЧистоты" json:"ПробаЧистоты,omitempty"`
	BIdentifikator *String  `xml:"Б_Идентификатор" json:"Б_Идентификатор,omitempty"`
}

type DocumentTelemarketing struct {
	Key                Guid                                      `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion        *String                                   `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number             *String                                   `xml:"Number" json:"Number,omitempty"`
	Date               *Time                                     `xml:"Date" json:"Date,omitempty"`
	DeletionMark       *Boolean                                  `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted             *Boolean                                  `xml:"Posted" json:"Posted,omitempty"`
	AvtorKey           *Guid                                     `xml:"Автор_Key" json:"Автор_Key,omitempty"`
	Osnovanie          *String                                   `xml:"Основание" json:"Основание,omitempty"`
	Comment            *String                                   `xml:"Комментарий" json:"Комментарий,omitempty"`
	Vazhnost           *String                                   `xml:"Важность" json:"Важность,omitempty"`
	ProektKey          *Guid                                     `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	SostoianieSobytiia *String                                   `xml:"СостояниеСобытия" json:"СостояниеСобытия,omitempty"`
	OtvetstvennyiKey   *Guid                                     `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	Tema               *String                                   `xml:"Тема" json:"Тема,omitempty"`
	TipovaiaAnketaKey  *Guid                                     `xml:"ТиповаяАнкета_Key" json:"ТиповаяАнкета_Key,omitempty"`
	VremiaNapominaniia *Time                                     `xml:"ВремяНапоминания" json:"ВремяНапоминания,omitempty"`
	NapomnitOSobytii   *Boolean                                  `xml:"НапомнитьОСобытии" json:"НапомнитьОСобытии,omitempty"`
	Uchastniki         *[]DocumentTelemarketingUchastnikiRowType `xml:"Участники" json:"Участники,omitempty"`
	OsnovanieType      *String                                   `xml:"Основание_Type" json:"Основание_Type,omitempty"`
}

func (entity DocumentTelemarketing) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentTelemarketing) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentTelemarketingUchastniki struct {
	Key                     Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber              Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	KontragentKey           *Guid    `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	NaimenovaniePolnoe      *String  `xml:"НаименованиеПолное" json:"НаименованиеПолное,omitempty"`
	KontaktnoeLitsoKey      *Guid    `xml:"КонтактноеЛицо_Key" json:"КонтактноеЛицо_Key,omitempty"`
	Telefon                 *String  `xml:"Телефон" json:"Телефон,omitempty"`
	RezultatObrabotkiZvonka *String  `xml:"РезультатОбработкиЗвонка" json:"РезультатОбработкиЗвонка,omitempty"`
	EstInteres              *Boolean `xml:"ЕстьИнтерес" json:"ЕстьИнтерес,omitempty"`
	SobytieKey              *Guid    `xml:"Событие_Key" json:"Событие_Key,omitempty"`
	OprosKey                *Guid    `xml:"Опрос_Key" json:"Опрос_Key,omitempty"`
	Opisanie                *String  `xml:"Описание" json:"Описание,omitempty"`
}

type DocumentVozvratDavalcheskogoMetalla struct {
	Key                   Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion           *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                *String  `xml:"Number" json:"Number,omitempty"`
	Date                  *Time    `xml:"Date" json:"Date,omitempty"`
	DeletionMark          *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                *Boolean `xml:"Posted" json:"Posted,omitempty"`
	Weight                *Float   `xml:"Вес" json:"Вес,omitempty"`
	DogovorKontragentaKey *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanieKey  *Guid    `xml:"ДокументОснование_Key" json:"ДокументОснование_Key,omitempty"`
	Comment               *String  `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey         *Guid    `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	ItemKey               *Guid    `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	OrganizatsiiaKey      *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey      *Guid    `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	DepartmentKey         *Guid    `xml:"Склад_Key" json:"Склад_Key,omitempty"`
}

func (entity DocumentVozvratDavalcheskogoMetalla) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentVozvratDavalcheskogoMetalla) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type CatalogAdresnyeSokrashcheniia struct {
	Key           Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion   *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description   *String  `xml:"Description" json:"Description,omitempty"`
	Code          *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark  *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Sokrashchenie *String  `xml:"Сокращение" json:"Сокращение,omitempty"`
	Uroven        *Int     `xml:"Уровень" json:"Уровень,omitempty"`
}

type DocumentRassylkaAnket struct {
	Key                                                 Guid                                       `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                                         *String                                    `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                                              *String                                    `xml:"Number" json:"Number,omitempty"`
	Date                                                *Time                                      `xml:"Date" json:"Date,omitempty"`
	DeletionMark                                        *Boolean                                   `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                                              *Boolean                                   `xml:"Posted" json:"Posted,omitempty"`
	AnketaKey                                           *Guid                                      `xml:"Анкета_Key" json:"Анкета_Key,omitempty"`
	PervichnaiaRassylkaKey                              *Guid                                      `xml:"ПервичнаяРассылка_Key" json:"ПервичнаяРассылка_Key,omitempty"`
	SUvedomleniemOPoluchenii                            *Boolean                                   `xml:"СУведомлениемОПолучении" json:"СУведомлениемОПолучении,omitempty"`
	TekstPisma                                          *String                                    `xml:"ТекстПисьма" json:"ТекстПисьма,omitempty"`
	UchetnaiaZapisDliaOtpravki                          *String                                    `xml:"УчетнаяЗаписьДляОтправки" json:"УчетнаяЗаписьДляОтправки,omitempty"`
	ElektronnyiAdresOtvetov                             *String                                    `xml:"ЭлектронныйАдресОтветов" json:"ЭлектронныйАдресОтветов,omitempty"`
	ElektronnyiAdresOtvetovVstroennyiPochtovyiKlientKey *Guid                                      `xml:"ЭлектронныйАдресОтветовВстроенныйПочтовыйКлиент_Key" json:"ЭлектронныйАдресОтветовВстроенныйПочтовыйКлиент_Key,omitempty"`
	Vlozheniia                                          *[]DocumentRassylkaAnketVlozheniiaRowType  `xml:"Вложения" json:"Вложения,omitempty"`
	Poluchateli                                         *[]DocumentRassylkaAnketPoluchateliRowType `xml:"Получатели" json:"Получатели,omitempty"`
	UchetnaiaZapisDliaOtpravkiType                      *String                                    `xml:"УчетнаяЗаписьДляОтправки_Type" json:"УчетнаяЗаписьДляОтправки_Type,omitempty"`
	ElektronnyiAdresOtvetovType                         *String                                    `xml:"ЭлектронныйАдресОтветов_Type" json:"ЭлектронныйАдресОтветов_Type,omitempty"`
}

func (entity DocumentRassylkaAnket) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentRassylkaAnket) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentRassylkaAnketVlozheniia struct {
	Key                 Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber          Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	VlozhenieBase64Data *Binary `xml:"Вложение_Base64Data" json:"Вложение_Base64Data,omitempty"`
	ImiaFaila           *String `xml:"ИмяФайла" json:"ИмяФайла,omitempty"`
	VlozhenieType       *String `xml:"Вложение_Type" json:"Вложение_Type,omitempty"`
	Vlozhenie           *Binary `xml:"Вложение" json:"Вложение,omitempty"`
}

type DocumentRassylkaAnketPoluchateli struct {
	Key         Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber  Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Obieekt     *String `xml:"Объект" json:"Объект,omitempty"`
	Poluchatel  *String `xml:"Получатель" json:"Получатель,omitempty"`
	ObieektType *String `xml:"Объект_Type" json:"Объект_Type,omitempty"`
}

type CatalogVidyDeiatelnostiKontragentov struct {
	Key          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion  *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description  *String  `xml:"Description" json:"Description,omitempty"`
	Code         *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
}

type CatalogTorgovoeOborudovanie struct {
	Key                        Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                *String  `xml:"Description" json:"Description,omitempty"`
	Code                       *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark               *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Vid                        *String  `xml:"Вид" json:"Вид,omitempty"`
	Model                      *String  `xml:"Модель" json:"Модель,omitempty"`
	ObrabotkaObsluzhivaniiaKey *Guid    `xml:"ОбработкаОбслуживания_Key" json:"ОбработкаОбслуживания_Key,omitempty"`
}

type CatalogSkhemyRealizatsii struct {
	Key                       Guid                                          `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion               *String                                       `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description               *String                                       `xml:"Description" json:"Description,omitempty"`
	Code                      *String                                       `xml:"Code" json:"Code,omitempty"`
	DeletionMark              *Boolean                                      `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	OrganizatsiiaKey          *Guid                                         `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OrganizatsiiaProdavetsKey *Guid                                         `xml:"ОрганизацияПродавец_Key" json:"ОрганизацияПродавец_Key,omitempty"`
	EtapySkhemy               *[]CatalogSkhemyRealizatsiiEtapySkhemyRowType `xml:"ЭтапыСхемы" json:"ЭтапыСхемы,omitempty"`
}

type CatalogSkhemyRealizatsiiEtapySkhemy struct {
	Key                       Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	DogovorPokupkiKey         *Guid    `xml:"ДоговорПокупки_Key" json:"ДоговорПокупки_Key,omitempty"`
	DogovorProdazhiKey        *Guid    `xml:"ДоговорПродажи_Key" json:"ДоговорПродажи_Key,omitempty"`
	ZnachenieNatsenki         *String  `xml:"ЗначениеНаценки" json:"ЗначениеНаценки,omitempty"`
	KontragentPokupatelKey    *Guid    `xml:"КонтрагентПокупатель_Key" json:"КонтрагентПокупатель_Key,omitempty"`
	KontragentProdavetsKey    *Guid    `xml:"КонтрагентПродавец_Key" json:"КонтрагентПродавец_Key,omitempty"`
	OkrugliatVBolshuiuStoronu *Boolean `xml:"ОкруглятьВБольшуюСторону" json:"ОкруглятьВБольшуюСторону,omitempty"`
	OrganizatsiiaPokupatelKey *Guid    `xml:"ОрганизацияПокупатель_Key" json:"ОрганизацияПокупатель_Key,omitempty"`
	OrganizatsiiaProdavetsKey *Guid    `xml:"ОрганизацияПродавец_Key" json:"ОрганизацияПродавец_Key,omitempty"`
	PoriadokOkrugleniia       *String  `xml:"ПорядокОкругления" json:"ПорядокОкругления,omitempty"`
	SposobNatsenki            *Int     `xml:"СпособНаценки" json:"СпособНаценки,omitempty"`
	TipNatsenki               *Int     `xml:"ТипНаценки" json:"ТипНаценки,omitempty"`
	ZnachenieNatsenkiType     *String  `xml:"ЗначениеНаценки_Type" json:"ЗначениеНаценки_Type,omitempty"`
}

type CatalogPodkliuchaemoeOborudovanie struct {
	Key                     Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion             *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description             *String  `xml:"Description" json:"Description,omitempty"`
	DeletionMark            *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	VersiiaKomponenty       *String  `xml:"ВерсияКомпоненты" json:"ВерсияКомпоненты,omitempty"`
	IdentifikatorUstroistva *String  `xml:"ИдентификаторУстройства" json:"ИдентификаторУстройства,omitempty"`
	UstroistvoOtkliucheno   *Boolean `xml:"УстройствоОтключено" json:"УстройствоОтключено,omitempty"`
	UstroistvoIspolzuetsia  *Boolean `xml:"УстройствоИспользуется" json:"УстройствоИспользуется,omitempty"`
	ObrabotchikDraivera     *String  `xml:"ОбработчикДрайвера" json:"ОбработчикДрайвера,omitempty"`
	ParametryBase64Data     *Binary  `xml:"Параметры_Base64Data" json:"Параметры_Base64Data,omitempty"`
	RabocheeMestoKey        *Guid    `xml:"РабочееМесто_Key" json:"РабочееМесто_Key,omitempty"`
	TipOborudovaniia        *String  `xml:"ТипОборудования" json:"ТипОборудования,omitempty"`
	TrebuetsiaPereustanovka *Boolean `xml:"ТребуетсяПереустановка" json:"ТребуетсяПереустановка,omitempty"`
	ParametryType           *String  `xml:"Параметры_Type" json:"Параметры_Type,omitempty"`
	Parametry               *Binary  `xml:"Параметры" json:"Параметры,omitempty"`
}

type DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnoshenii struct {
	Key                                Guid                                                                                                     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                        *String                                                                                                  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                             *String                                                                                                  `xml:"Number" json:"Number,omitempty"`
	Date                               *Time                                                                                                    `xml:"Date" json:"Date,omitempty"`
	DeletionMark                       *Boolean                                                                                                 `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                             *Boolean                                                                                                 `xml:"Posted" json:"Posted,omitempty"`
	XKlassKon                          *Float                                                                                                   `xml:"XКлассКон" json:"XКлассКон,omitempty"`
	XKlassNach                         *Float                                                                                                   `xml:"XКлассНач" json:"XКлассНач,omitempty"`
	YKlassKon                          *Float                                                                                                   `xml:"YКлассКон" json:"YКлассКон,omitempty"`
	YKlassNach                         *Float                                                                                                   `xml:"YКлассНач" json:"YКлассНач,omitempty"`
	ZKlassKon                          *Float                                                                                                   `xml:"ZКлассКон" json:"ZКлассКон,omitempty"`
	ZKlassNach                         *Float                                                                                                   `xml:"ZКлассНач" json:"ZКлассНач,omitempty"`
	DataOkonchaniia                    *Time                                                                                                    `xml:"ДатаОкончания" json:"ДатаОкончания,omitempty"`
	KolichestvoPeriodovAnaliza         *Int                                                                                                     `xml:"КоличествоПериодовАнализа" json:"КоличествоПериодовАнализа,omitempty"`
	Comment                            *String                                                                                                  `xml:"Комментарий" json:"Комментарий,omitempty"`
	Periodichnost                      *String                                                                                                  `xml:"Периодичность" json:"Периодичность,omitempty"`
	RazovyiPokupatelKon                *Int                                                                                                     `xml:"РазовыйПокупательКон" json:"РазовыйПокупательКон,omitempty"`
	RazovyiPokupatelNach               *Int                                                                                                     `xml:"РазовыйПокупательНач" json:"РазовыйПокупательНач,omitempty"`
	TablitsaRaspredeleniiaKontragentov *[]DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentovRowType `xml:"ТаблицаРаспределенияКонтрагентов" json:"ТаблицаРаспределенияКонтрагентов,omitempty"`
}

func (entity DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnoshenii) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnoshenii) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentKlassifikatsiiaPokupateleiPoStadiiamVzaimootnosheniiTablitsaRaspredeleniiaKontragentov struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	XYZKlassifikatsiia             *String `xml:"XYZКлассификация" json:"XYZКлассификация,omitempty"`
	XYZKlassifikatsiiaStaraia      *String `xml:"XYZКлассификацияСтарая" json:"XYZКлассификацияСтарая,omitempty"`
	ZnachenieParametra             *Float  `xml:"ЗначениеПараметра" json:"ЗначениеПараметра,omitempty"`
	IndeksSortirovki               *Int    `xml:"ИндексСортировки" json:"ИндексСортировки,omitempty"`
	KolichestvoDokumentov          *Int    `xml:"КоличествоДокументов" json:"КоличествоДокументов,omitempty"`
	KontragentKey                  *Guid   `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	KoeffitsientVariatsii          *Float  `xml:"КоэффициентВариации" json:"КоэффициентВариации,omitempty"`
	MenedzherKontragentaKey        *Guid   `xml:"МенеджерКонтрагента_Key" json:"МенеджерКонтрагента_Key,omitempty"`
	StadiiaVzaimootnoshenii        *String `xml:"СтадияВзаимоотношений" json:"СтадияВзаимоотношений,omitempty"`
	StadiiaVzaimootnosheniiStaraia *String `xml:"СтадияВзаимоотношенийСтарая" json:"СтадияВзаимоотношенийСтарая,omitempty"`
}

type CatalogGabarity struct {
	Key          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion  *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description  *String  `xml:"Description" json:"Description,omitempty"`
	Code         *String  `xml:"Code" json:"Code,omitempty"`
	DeletionMark *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
}

type DocumentZakazKlienta struct {
	Key                             Guid                                 `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                     *String                              `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                          *String                              `xml:"Number" json:"Number,omitempty"`
	Date                            *Time                                `xml:"Date" json:"Date,omitempty"`
	DeletionMark                    *Boolean                             `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                          *Boolean                             `xml:"Posted" json:"Posted,omitempty"`
	AvtoRezervirovanie              *Boolean                             `xml:"АвтоРезервирование" json:"АвтоРезервирование,omitempty"`
	AdresDostavki                   *String                              `xml:"АдресДоставки" json:"АдресДоставки,omitempty"`
	ValiutaDokumentaKey             *Guid                                `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	Weight                          *Float                               `xml:"ВесДокумента" json:"ВесДокумента,omitempty"`
	VremiaNapominaniia              *Time                                `xml:"ВремяНапоминания" json:"ВремяНапоминания,omitempty"`
	DataOplaty                      *Time                                `xml:"ДатаОплаты" json:"ДатаОплаты,omitempty"`
	DataOtgruzki                    *Time                                `xml:"ДатаОтгрузки" json:"ДатаОтгрузки,omitempty"`
	DogovorKontragentaKey           *Guid                                `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie               *String                              `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	KolichestvoDokumenta            *Int                                 `xml:"КоличествоДокумента" json:"КоличествоДокумента,omitempty"`
	Comment                         *String                              `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontaktnoeLitsoKey              *Guid                                `xml:"КонтактноеЛицо_Key" json:"КонтактноеЛицо_Key,omitempty"`
	KontragentKey                   *Guid                                `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	KratnostVzaimoraschetov         *Int                                 `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov             *Float                               `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	NapomnitOSobytii                *Boolean                             `xml:"НапомнитьОСобытии" json:"НапомнитьОСобытии,omitempty"`
	OrganizatsiiaKey                *Guid                                `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                *Guid                                `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey                *Guid                                `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	DepartmentKey                   *Guid                                `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	Soglasovano                     *Boolean                             `xml:"Согласовано" json:"Согласовано,omitempty"`
	StrukturnaiaEdinitsa            *String                              `xml:"СтруктурнаяЕдиница" json:"СтруктурнаяЕдиница,omitempty"`
	SummaVkliuchaetNDS              *Boolean                             `xml:"СуммаВключаетНДС" json:"СуммаВключаетНДС,omitempty"`
	SumOfDocument                   *Float                               `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	SkhemaRealizatsiiKey            *Guid                                `xml:"СхемаРеализации_Key" json:"СхемаРеализации_Key,omitempty"`
	TipDokumenta                    *String                              `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	TipTsenKey                      *Guid                                `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
	UchityvatNDS                    *Boolean                             `xml:"УчитыватьНДС" json:"УчитыватьНДС,omitempty"`
	KhoziaistvennaiaOperatsiiaKey   *Guid                                `xml:"ХозяйственнаяОперация_Key" json:"ХозяйственнаяОперация_Key,omitempty"`
	NomerInternetDokumenta          *String                              `xml:"НомерИнтернетДокумента" json:"НомерИнтернетДокумента,omitempty"`
	DataInternetDokumenta           *Time                                `xml:"ДатаИнтернетДокумента" json:"ДатаИнтернетДокумента,omitempty"`
	StatusInternetDokumenta         *String                              `xml:"СтатусИнтернетДокумента" json:"СтатусИнтернетДокумента,omitempty"`
	UnikalnyiNomerInternetDokumenta *String                              `xml:"УникальныйНомерИнтернетДокумента" json:"УникальныйНомерИнтернетДокумента,omitempty"`
	InternetZakaz                   *Boolean                             `xml:"ИнтернетЗаказ" json:"ИнтернетЗаказ,omitempty"`
	AdresElektronnoiPochty          *String                              `xml:"АдресЭлектроннойПочты" json:"АдресЭлектроннойПочты,omitempty"`
	UsloviiaOplatyKey               *Guid                                `xml:"УсловияОплаты_Key" json:"УсловияОплаты_Key,omitempty"`
	BDataDokumenta                  *Time                                `xml:"Б_ДатаДокумента" json:"Б_ДатаДокумента,omitempty"`
	BIdentifikator                  *String                              `xml:"Б_Идентификатор" json:"Б_Идентификатор,omitempty"`
	BNomerVersii                    *String                              `xml:"Б_НомерВерсии" json:"Б_НомерВерсии,omitempty"`
	Goods                           *[]DocumentZakazKlientaTovaryRowType `xml:"Товары" json:"Товары,omitempty"`
	DokumentOsnovanieType           *String                              `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
	StrukturnaiaEdinitsaType        *String                              `xml:"СтруктурнаяЕдиница_Type" json:"СтруктурнаяЕдиница_Type,omitempty"`
}

func (entity DocumentZakazKlienta) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentZakazKlienta) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentZakazKlientaTovary struct {
	Key                                        Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                                 Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                                     *Float  `xml:"Вес" json:"Вес,omitempty"`
	ZnachenieUsloviiaAvtomaticheskoiSkidki     *String `xml:"ЗначениеУсловияАвтоматическойСкидки" json:"ЗначениеУсловияАвтоматическойСкидки,omitempty"`
	Quantity                                   *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                                    *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	PercentAutoDiscount                        *Float  `xml:"ПроцентАвтоматическойСкидки" json:"ПроцентАвтоматическойСкидки,omitempty"`
	PercentManualDiscount                      *Float  `xml:"ПроцентРучнойСкидки" json:"ПроцентРучнойСкидки,omitempty"`
	SizeKey                                    *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	Razmestit                                  *Int    `xml:"Разместить" json:"Разместить,omitempty"`
	Rezervirovat                               *Int    `xml:"Резервировать" json:"Резервировать,omitempty"`
	StavkaNDS                                  *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                                        *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                                   *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	UslovieAvtomaticheskoiSkidki               *String `xml:"УсловиеАвтоматическойСкидки" json:"УсловиеАвтоматическойСкидки,omitempty"`
	Cost                                       *Float  `xml:"Цена" json:"Цена,omitempty"`
	InstanceKey                                *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	SumAutoDiscount                            *Float  `xml:"СуммаАвтоматическойСкидки" json:"СуммаАвтоматическойСкидки,omitempty"`
	SumManualDiscount                          *Float  `xml:"СуммаРучнойСкидки" json:"СуммаРучнойСкидки,omitempty"`
	KharakteristikaNomenklaturyKey             *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	ZnachenieUsloviiaAvtomaticheskoiSkidkiType *String `xml:"ЗначениеУсловияАвтоматическойСкидки_Type" json:"ЗначениеУсловияАвтоматическойСкидки_Type,omitempty"`
}

type ArriveFromManufacturing struct {
	Key                                          Guid                                                           `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                                  *String                                                        `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                                       *String                                                        `xml:"Number" json:"Number,omitempty"`
	Date                                         *Time                                                          `xml:"Date" json:"Date,omitempty"`
	DeletionMark                                 *Boolean                                                       `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                                       *Boolean                                                       `xml:"Posted" json:"Posted,omitempty"`
	ValiutaDokumentaKey                          *Guid                                                          `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	Weight                                       *Float                                                         `xml:"ВесДокумента" json:"ВесДокумента,omitempty"`
	DataVkhodiashchegoDokumenta                  *Time                                                          `xml:"ДатаВходящегоДокумента" json:"ДатаВходящегоДокумента,omitempty"`
	DogovorKontragentaKey                        *Guid                                                          `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie                            *String                                                        `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	IspolzovatSebestoimostSNDS                   *Boolean                                                       `xml:"ИспользоватьСебестоимостьСНДС" json:"ИспользоватьСебестоимостьСНДС,omitempty"`
	KolichestvoDokumenta                         *Int                                                           `xml:"КоличествоДокумента" json:"КоличествоДокумента,omitempty"`
	Comment                                      *String                                                        `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey                                *Guid                                                          `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	KratnostVzaimoraschetov                      *Int                                                           `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov                          *Float                                                         `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	MaterialVProizvodstve                        *String                                                        `xml:"МатериалВПроизводстве" json:"МатериалВПроизводстве,omitempty"`
	NomerVkhodiashchegoDokumenta                 *String                                                        `xml:"НомерВходящегоДокумента" json:"НомерВходящегоДокумента,omitempty"`
	OrganizatsiiaKey                             *Guid                                                          `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                             *Guid                                                          `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey                             *Guid                                                          `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	Poteri                                       *Float                                                         `xml:"Потери" json:"Потери,omitempty"`
	PoteriVProtsentakh                           *Boolean                                                       `xml:"ПотериВПроцентах" json:"ПотериВПроцентах,omitempty"`
	PoteriPostrochno                             *Boolean                                                       `xml:"ПотериПострочно" json:"ПотериПострочно,omitempty"`
	ProektKey                                    *Guid                                                          `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	RegistrirovatTseny                           *Boolean                                                       `xml:"РегистрироватьЦены" json:"РегистрироватьЦены,omitempty"`
	RegistrirovatTsenyPostavshchika              *Boolean                                                       `xml:"РегистрироватьЦеныПоставщика" json:"РегистрироватьЦеныПоставщика,omitempty"`
	Sdelka                                       *String                                                        `xml:"Сделка" json:"Сделка,omitempty"`
	DepartmentKey                                *Guid                                                          `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	SobstvennoeProizvodstvo                      *Boolean                                                       `xml:"СобственноеПроизводство" json:"СобственноеПроизводство,omitempty"`
	SummaVkliuchaetNDS                           *Boolean                                                       `xml:"СуммаВключаетНДС" json:"СуммаВключаетНДС,omitempty"`
	SumOfDocument                                *Float                                                         `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	TipDokumenta                                 *String                                                        `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	TipTsenKey                                   *Guid                                                          `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
	UsloviiaOplatyKey                            *Guid                                                          `xml:"УсловияОплаты_Key" json:"УсловияОплаты_Key,omitempty"`
	UchityvatVesVstavok                          *Boolean                                                       `xml:"УчитыватьВесВставок" json:"УчитыватьВесВставок,omitempty"`
	UchityvatNDS                                 *Boolean                                                       `xml:"УчитыватьНДС" json:"УчитыватьНДС,omitempty"`
	KhoziaistvennaiaOperatsiiaKey                *Guid                                                          `xml:"ХозяйственнаяОперация_Key" json:"ХозяйственнаяОперация_Key,omitempty"`
	RuchnoeZapolnenieIzraskhodovannykhMaterialov *Boolean                                                       `xml:"РучноеЗаполнениеИзрасходованныхМатериалов" json:"РучноеЗаполнениеИзрасходованныхМатериалов,omitempty"`
	ProizvodstvennyiUchastokKey                  *Guid                                                          `xml:"ПроизводственныйУчасток_Key" json:"ПроизводственныйУчасток_Key,omitempty"`
	UslugaDliaVyvodaVPechatnyeFormyKey           *Guid                                                          `xml:"УслугаДляВыводаВПечатныеФормы_Key" json:"УслугаДляВыводаВПечатныеФормы_Key,omitempty"`
	RuchnoiUchetVesaVstavok                      *Boolean                                                       `xml:"РучнойУчетВесаВставок" json:"РучнойУчетВесаВставок,omitempty"`
	Goods                                        *[]DocumentPostuplenieProduktsiiIzProizvodstvaTovaryRowType    `xml:"Товары" json:"Товары,omitempty"`
	Materialy                                    *[]DocumentPostuplenieProduktsiiIzProizvodstvaMaterialyRowType `xml:"Материалы" json:"Материалы,omitempty"`
	DokumentOsnovanieType                        *String                                                        `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
	SdelkaType                                   *String                                                        `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

func (entity ArriveFromManufacturing) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity ArriveFromManufacturing) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type ArriveFromManufacturingInstance struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	VesPoter                       *Float  `xml:"ВесПотерь" json:"ВесПотерь,omitempty"`
	ZakazKlientaKey                *Guid   `xml:"ЗаказКлиента_Key" json:"ЗаказКлиента_Key,omitempty"`
	KachestvoKey                   *Guid   `xml:"Качество_Key" json:"Качество_Key,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	Pasport                        *String `xml:"Паспорт" json:"Паспорт,omitempty"`
	ProtsentPoter                  *Float  `xml:"ПроцентПотерь" json:"ПроцентПотерь,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	DepartmentKey                  *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	StavkaNDS                      *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	StoimostVstavok                *Float  `xml:"СтоимостьВставок" json:"СтоимостьВставок,omitempty"`
	StoimostMetalla                *Float  `xml:"СтоимостьМеталла" json:"СтоимостьМеталла,omitempty"`
	StoimostRabot                  *Float  `xml:"СтоимостьРабот" json:"СтоимостьРабот,omitempty"`
	Sum                            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                       *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float  `xml:"Цена" json:"Цена,omitempty"`
	CostOfWork                     *Float  `xml:"ЦенаРабот" json:"ЦенаРабот,omitempty"`
	SummaNDSVstavok                *Float  `xml:"СуммаНДСВставок" json:"СуммаНДСВставок,omitempty"`
	SummaNDSMetalla                *Float  `xml:"СуммаНДСМеталла" json:"СуммаНДСМеталла,omitempty"`
	SummaNDSRabot                  *Float  `xml:"СуммаНДСРабот" json:"СуммаНДСРабот,omitempty"`
	VesVstavok                     *Float  `xml:"ВесВставок" json:"ВесВставок,omitempty"`
}

type DocumentPostuplenieProduktsiiIzProizvodstvaMaterialy struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	Nomenklatura                   *String `xml:"Номенклатура" json:"Номенклатура,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	ItemType                       *String `xml:"Номенклатура_Type" json:"Номенклатура_Type,omitempty"`
}

type DocumentJournalZakazyPostavshchikam struct {
	Ref              String   `xml:"Ref" json:"Ref,omitempty"`
	Type             *String  `xml:"Type" json:"Type,omitempty"`
	Date             *Time    `xml:"Date" json:"Date,omitempty"`
	DeletionMark     *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Number           *String  `xml:"Number" json:"Number,omitempty"`
	Posted           *Boolean `xml:"Posted" json:"Posted,omitempty"`
	ValiutaKey       *Guid    `xml:"Валюта_Key" json:"Валюта_Key,omitempty"`
	DataOplaty       *Time    `xml:"ДатаОплаты" json:"ДатаОплаты,omitempty"`
	DataPostupleniia *Time    `xml:"ДатаПоступления" json:"ДатаПоступления,omitempty"`
	InformatsiiaKey  *Guid    `xml:"Информация_Key" json:"Информация_Key,omitempty"`
	Comment          *String  `xml:"Комментарий" json:"Комментарий,omitempty"`
	OrganizatsiiaKey *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey *Guid    `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey *Guid    `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	Sum              *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	RefType          String   `xml:"Ref_Type" json:"Ref_Type,omitempty"`
}

type DocumentJournalSkladskieDokumenty struct {
	Ref               String   `xml:"Ref" json:"Ref,omitempty"`
	Type              *String  `xml:"Type" json:"Type,omitempty"`
	Date              *Time    `xml:"Date" json:"Date,omitempty"`
	DeletionMark      *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Number            *String  `xml:"Number" json:"Number,omitempty"`
	Posted            *Boolean `xml:"Posted" json:"Posted,omitempty"`
	ValiutaKey        *Guid    `xml:"Валюта_Key" json:"Валюта_Key,omitempty"`
	Comment           *String  `xml:"Комментарий" json:"Комментарий,omitempty"`
	Kontragent        *String  `xml:"Контрагент" json:"Контрагент,omitempty"`
	OrganizatsiiaKey  *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey  *Guid    `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	Podrazdelenie     *String  `xml:"Подразделение" json:"Подразделение,omitempty"`
	Sklad             *String  `xml:"Склад" json:"Склад,omitempty"`
	Sum               *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	RefType           String   `xml:"Ref_Type" json:"Ref_Type,omitempty"`
	KontragentType    *String  `xml:"Контрагент_Type" json:"Контрагент_Type,omitempty"`
	PodrazdelenieType *String  `xml:"Подразделение_Type" json:"Подразделение_Type,omitempty"`
	SkladType         *String  `xml:"Склад_Type" json:"Склад_Type,omitempty"`
}

type CatalogsmsUsloviiaOtboraDiskontnykhKart struct {
	Key           Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion   *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description   *String  `xml:"Description" json:"Description,omitempty"`
	Code          *Int     `xml:"Code" json:"Code,omitempty"`
	DeletionMark  *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Deistvie      *String  `xml:"Действие" json:"Действие,omitempty"`
	Comment       *String  `xml:"Комментарий" json:"Комментарий,omitempty"`
	Predstavlenie *String  `xml:"Представление" json:"Представление,omitempty"`
}

type Arrive struct {
	Key                             Guid                                            `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                     *String                                         `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                          *String                                         `xml:"Number" json:"Number,omitempty"`
	Date                            *Time                                           `xml:"Date" json:"Date,omitempty"`
	DeletionMark                    *Boolean                                        `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                          *Boolean                                        `xml:"Posted" json:"Posted,omitempty"`
	BankovskiiSchetKontragentaKey   *Guid                                           `xml:"БанковскийСчетКонтрагента_Key" json:"БанковскийСчетКонтрагента_Key,omitempty"`
	ValiutaDokumentaKey             *Guid                                           `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	Weight                          *Float                                          `xml:"ВесДокумента" json:"ВесДокумента,omitempty"`
	GruzootpravitelKey              *Guid                                           `xml:"Грузоотправитель_Key" json:"Грузоотправитель_Key,omitempty"`
	GruzopoluchatelKey              *Guid                                           `xml:"Грузополучатель_Key" json:"Грузополучатель_Key,omitempty"`
	DataVkhodiashchegoDokumenta     *Time                                           `xml:"ДатаВходящегоДокумента" json:"ДатаВходящегоДокумента,omitempty"`
	DogovorKontragentaKey           *Guid                                           `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie               *String                                         `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	DokumentSozdanVIuTD             *Boolean                                        `xml:"ДокументСозданВЮТД" json:"ДокументСозданВЮТД,omitempty"`
	KolichestvoDokumenta            *Int                                            `xml:"КоличествоДокумента" json:"КоличествоДокумента,omitempty"`
	Comment                         *String                                         `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey                   *Guid                                           `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	Koef                            *Float                                          `xml:"Коэф" json:"Коэф,omitempty"`
	KratnostVzaimoraschetov         *Int                                            `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov             *Float                                          `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	NDSVkliuchenVStoimost           *Boolean                                        `xml:"НДСВключенВСтоимость" json:"НДСВключенВСтоимость,omitempty"`
	NomerVkhodiashchegoDokumenta    *String                                         `xml:"НомерВходящегоДокумента" json:"НомерВходящегоДокумента,omitempty"`
	OrganizatsiiaKey                *Guid                                           `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                *Guid                                           `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey                *Guid                                           `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	RegistrirovatTseny              *Boolean                                        `xml:"РегистрироватьЦены" json:"РегистрироватьЦены,omitempty"`
	RegistrirovatTsenyPostavshchika *Boolean                                        `xml:"РегистрироватьЦеныПоставщика" json:"РегистрироватьЦеныПоставщика,omitempty"`
	Sdelka                          *String                                         `xml:"Сделка" json:"Сделка,omitempty"`
	SkladOrderKey                   *Guid                                           `xml:"СкладОрдер_Key" json:"СкладОрдер_Key,omitempty"`
	SummaVkliuchaetNDS              *Boolean                                        `xml:"СуммаВключаетНДС" json:"СуммаВключаетНДС,omitempty"`
	SumOfDocument                   *Float                                          `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	TipDokumenta                    *String                                         `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	TipTsenKey                      *Guid                                           `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
	UsloviiaOplatyKey               *Guid                                           `xml:"УсловияОплаты_Key" json:"УсловияОплаты_Key,omitempty"`
	UchityvatNDS                    *Boolean                                        `xml:"УчитыватьНДС" json:"УчитыватьНДС,omitempty"`
	KhoziaistvennaiaOperatsiiaKey   *Guid                                           `xml:"ХозяйственнаяОперация_Key" json:"ХозяйственнаяОперация_Key,omitempty"`
	ZagruzhenIzUIuP                 *Boolean                                        `xml:"ЗагруженИзУЮП" json:"ЗагруженИзУЮП,omitempty"`
	VystavkaOstatki                 *Boolean                                        `xml:"ВыставкаОстатки" json:"ВыставкаОстатки,omitempty"`
	Goods                           *[]DocumentPostuplenieTovarovUslugTovaryRowType `xml:"Товары" json:"Товары,omitempty"`
	Uslugi                          *[]DocumentPostuplenieTovarovUslugUslugiRowType `xml:"Услуги" json:"Услуги,omitempty"`
	DokumentOsnovanieType           *String                                         `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
	SdelkaType                      *String                                         `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

func (entity Arrive) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity Arrive) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentPostuplenieTovarovUslugTovary struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	EdinitsaIzmereniiaKey          *Guid   `xml:"ЕдиницаИзмерения_Key" json:"ЕдиницаИзмерения_Key,omitempty"`
	ZakazKlientaKey                *Guid   `xml:"ЗаказКлиента_Key" json:"ЗаказКлиента_Key,omitempty"`
	KachestvoKey                   *Guid   `xml:"Качество_Key" json:"Качество_Key,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	Koef                           *Float  `xml:"Коэф" json:"Коэф,omitempty"`
	Koeffitsient                   *Float  `xml:"Коэффициент" json:"Коэффициент,omitempty"`
	NaborKey                       *Guid   `xml:"Набор_Key" json:"Набор_Key,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	NomerGTDKey                    *Guid   `xml:"НомерГТД_Key" json:"НомерГТД_Key,omitempty"`
	NomerNabora                    *Int    `xml:"НомерНабора" json:"НомерНабора,omitempty"`
	Pasport                        *String `xml:"Паспорт" json:"Паспорт,omitempty"`
	ProektKey                      *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	DepartmentKey                  *Guid   `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	StavkaNDS                      *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	StranaProiskhozhdeniiaKey      *Guid   `xml:"СтранаПроисхождения_Key" json:"СтранаПроисхождения_Key,omitempty"`
	Sum                            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                       *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float  `xml:"Цена" json:"Цена,omitempty"`
}

type DocumentPostuplenieTovarovUslugUslugi struct {
	Key                      Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber               Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Quantity                 *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                  *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	NomenklaturnaiaGruppaKey *Guid   `xml:"НоменклатурнаяГруппа_Key" json:"НоменклатурнаяГруппа_Key,omitempty"`
	PodrazdelenieKey         *Guid   `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	ProektKey                *Guid   `xml:"Проект_Key" json:"Проект_Key,omitempty"`
	Soderzhanie              *String `xml:"Содержание" json:"Содержание,omitempty"`
	StavkaNDS                *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	StatiaZatratKey          *Guid   `xml:"СтатьяЗатрат_Key" json:"СтатьяЗатрат_Key,omitempty"`
	Sum                      *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS                 *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	Cost                     *Float  `xml:"Цена" json:"Цена,omitempty"`
}

type DocumentSchetFakturaVydannyi struct {
	Key                                                   Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                                           *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                                                *String  `xml:"Number" json:"Number,omitempty"`
	Date                                                  *Time    `xml:"Date" json:"Date,omitempty"`
	DeletionMark                                          *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                                                *Boolean `xml:"Posted" json:"Posted,omitempty"`
	ValiutaDokumentaKey                                   *Guid    `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	ValiutnaiaSumma                                       *Float   `xml:"ВалютнаяСумма" json:"ВалютнаяСумма,omitempty"`
	DataPlatezhnoRaschetnogoDokumenta                     *Time    `xml:"ДатаПлатежноРасчетногоДокумента" json:"ДатаПлатежноРасчетногоДокумента,omitempty"`
	DogovorKontragentaKey                                 *Guid    `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie                                     *String  `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	DokumentSozdanVIuTD                                   *Boolean `xml:"ДокументСозданВЮТД" json:"ДокументСозданВЮТД,omitempty"`
	Comment                                               *String  `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey                                         *Guid    `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	NaAvans                                               *Boolean `xml:"НаАванс" json:"НаАванс,omitempty"`
	NomerPlatezhnoRaschetnogoDokumenta                    *String  `xml:"НомерПлатежноРасчетногоДокумента" json:"НомерПлатежноРасчетногоДокумента,omitempty"`
	OrganizatsiiaKey                                      *Guid    `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                                      *Guid    `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	Pod0                                                  *Boolean `xml:"Под0" json:"Под0,omitempty"`
	StavkaNDS                                             *String  `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                                                   *Float   `xml:"Сумма" json:"Сумма,omitempty"`
	SumOfDocument                                         *Float   `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	SummaNDS                                              *Float   `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
	SformirovanPriVvodeNachalnykhOstatkovNDS              *Boolean `xml:"СформированПриВводеНачальныхОстатковНДС" json:"СформированПриВводеНачальныхОстатковНДС,omitempty"`
	TipDokumenta                                          *String  `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	SchetFakturaOsnovanieKey                              *Guid    `xml:"СчетФактураОснование_Key" json:"СчетФактураОснование_Key,omitempty"`
	Ispravlenie                                           *Boolean `xml:"Исправление" json:"Исправление,omitempty"`
	NomerIspravleniia                                     *String  `xml:"НомерИсправления" json:"НомерИсправления,omitempty"`
	Korrektirovochnyi                                     *Boolean `xml:"Корректировочный" json:"Корректировочный,omitempty"`
	IskhodnyiDokumentKey                                  *Guid    `xml:"ИсходныйДокумент_Key" json:"ИсходныйДокумент_Key,omitempty"`
	NomerIskhodnogoDokumenta                              *String  `xml:"НомерИсходногоДокумента" json:"НомерИсходногоДокумента,omitempty"`
	DataIskhodnogoDokumenta                               *Time    `xml:"ДатаИсходногоДокумента" json:"ДатаИсходногоДокумента,omitempty"`
	NomerIspravleniiaIskhodnogoDokumenta                  *String  `xml:"НомерИсправленияИсходногоДокумента" json:"НомерИсправленияИсходногоДокумента,omitempty"`
	DataIspravleniiaIskhodnogoDokumenta                   *Time    `xml:"ДатаИсправленияИсходногоДокумента" json:"ДатаИсправленияИсходногоДокумента,omitempty"`
	VystavlenVElektronnomVide                             *Boolean `xml:"ВыставленВЭлектронномВиде" json:"ВыставленВЭлектронномВиде,omitempty"`
	DataVystavleniia                                      *Time    `xml:"ДатаВыставления" json:"ДатаВыставления,omitempty"`
	SummaDokumentaKomissiia                               *Float   `xml:"СуммаДокументаКомиссия" json:"СуммаДокументаКомиссия,omitempty"`
	SummaNDSDokumentaKomissiia                            *Float   `xml:"СуммаНДСДокументаКомиссия" json:"СуммаНДСДокументаКомиссия,omitempty"`
	NaimenovanieTovaraUslugiDliaPechatiKorrektirovkiPoNDS *String  `xml:"НаименованиеТовараУслугиДляПечатиКорректировкиПоНДС" json:"НаименованиеТовараУслугиДляПечатиКорректировкиПоНДС,omitempty"`
	DokumentOsnovanieType                                 *String  `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
}

func (entity DocumentSchetFakturaVydannyi) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentSchetFakturaVydannyi) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentPlanProdazhPoSalonam struct {
	Key                Guid                                               `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion        *String                                            `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number             *String                                            `xml:"Number" json:"Number,omitempty"`
	Date               *Time                                              `xml:"Date" json:"Date,omitempty"`
	DeletionMark       *Boolean                                           `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted             *Boolean                                           `xml:"Posted" json:"Posted,omitempty"`
	PlanovyiPeriod     *Time                                              `xml:"ПлановыйПериод" json:"ПлановыйПериод,omitempty"`
	SummaPlana         *Float                                             `xml:"СуммаПлана" json:"СуммаПлана,omitempty"`
	Comment            *String                                            `xml:"Комментарий" json:"Комментарий,omitempty"`
	PoDniam            *Boolean                                           `xml:"ПоДням" json:"ПоДням,omitempty"`
	DetalizatsiiaPlana *Boolean                                           `xml:"ДетализацияПлана" json:"ДетализацияПлана,omitempty"`
	KalendarPlanaKey   *Guid                                              `xml:"КалендарьПлана_Key" json:"КалендарьПлана_Key,omitempty"`
	Salony             *[]DocumentPlanProdazhPoSalonamSalonyRowType       `xml:"Салоны" json:"Салоны,omitempty"`
	DniPoGrafiku       *[]DocumentPlanProdazhPoSalonamDniPoGrafikuRowType `xml:"ДниПоГрафику" json:"ДниПоГрафику,omitempty"`
}

func (entity DocumentPlanProdazhPoSalonam) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentPlanProdazhPoSalonam) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentPlanProdazhPoSalonamSalony struct {
	Key                        Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                 Int      `xml:"LineNumber" json:"LineNumber,omitempty"`
	SalonKey                   *Guid    `xml:"Салон_Key" json:"Салон_Key,omitempty"`
	SummaPlana                 *Float   `xml:"СуммаПлана" json:"СуммаПлана,omitempty"`
	Primechanie                *String  `xml:"Примечание" json:"Примечание,omitempty"`
	IndeksStrokiIzTablitsyDnei *Int     `xml:"ИндексСтрокиИзТаблицыДней" json:"ИндексСтрокиИзТаблицыДней,omitempty"`
	SummaPlanaDnevnaia         *Float   `xml:"СуммаПланаДневная" json:"СуммаПланаДневная,omitempty"`
	DenPoGrafiku               *Time    `xml:"ДеньПоГрафику" json:"ДеньПоГрафику,omitempty"`
	SummaPlanaFakt             *Float   `xml:"СуммаПланаФакт" json:"СуммаПланаФакт,omitempty"`
	PlanEst                    *Boolean `xml:"ПланЕсть" json:"ПланЕсть,omitempty"`
	KU                         *Float   `xml:"КУ" json:"КУ,omitempty"`
	FormulaDliaRasschetaKey    *Guid    `xml:"ФормулаДляРассчета_Key" json:"ФормулаДляРассчета_Key,omitempty"`
	RasshifrovkaFormuly        *String  `xml:"РасшифровкаФормулы" json:"РасшифровкаФормулы,omitempty"`
}

type DocumentPlanProdazhPoSalonamDniPoGrafiku struct {
	Key          Guid `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber   Int  `xml:"LineNumber" json:"LineNumber,omitempty"`
	DenPoGrafiku *Int `xml:"ДеньПоГрафику" json:"ДеньПоГрафику,omitempty"`
}

type CatalogBankovskieScheta struct {
	Key                                          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                                  *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                                  *String  `xml:"Description" json:"Description,omitempty"`
	Code                                         *String  `xml:"Code" json:"Code,omitempty"`
	Owner                                        *String  `xml:"Owner" json:"Owner,omitempty"`
	DeletionMark                                 *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	BankKey                                      *Guid    `xml:"Банк_Key" json:"Банк_Key,omitempty"`
	BankDliaRaschetovKey                         *Guid    `xml:"БанкДляРасчетов_Key" json:"БанкДляРасчетов_Key,omitempty"`
	ValiutaDenezhnykhSredstvKey                  *Guid    `xml:"ВалютаДенежныхСредств_Key" json:"ВалютаДенежныхСредств_Key,omitempty"`
	VidScheta                                    *String  `xml:"ВидСчета" json:"ВидСчета,omitempty"`
	DataZakrytiia                                *Time    `xml:"ДатаЗакрытия" json:"ДатаЗакрытия,omitempty"`
	DataOtkrytiia                                *Time    `xml:"ДатаОткрытия" json:"ДатаОткрытия,omitempty"`
	KontragentDliaOgranicheniiaPravDostupaKey    *Guid    `xml:"КонтрагентДляОграниченияПравДоступа_Key" json:"КонтрагентДляОграниченияПравДоступа_Key,omitempty"`
	MesiatsPropisiu                              *Boolean `xml:"МесяцПрописью" json:"МесяцПрописью,omitempty"`
	NomerIDataRazresheniia                       *String  `xml:"НомерИДатаРазрешения" json:"НомерИДатаРазрешения,omitempty"`
	NomerScheta                                  *String  `xml:"НомерСчета" json:"НомерСчета,omitempty"`
	OrganizatsiiaDliaOgranicheniiaPravDostupaKey *Guid    `xml:"ОрганизацияДляОграниченияПравДоступа_Key" json:"ОрганизацияДляОграниченияПравДоступа_Key,omitempty"`
	SummaBezKopeek                               *Boolean `xml:"СуммаБезКопеек" json:"СуммаБезКопеек,omitempty"`
	TekstKorrespondenta                          *String  `xml:"ТекстКорреспондента" json:"ТекстКорреспондента,omitempty"`
	TekstNaznacheniia                            *String  `xml:"ТекстНазначения" json:"ТекстНазначения,omitempty"`
	OwnerType                                    *String  `xml:"Owner_Type" json:"Owner_Type,omitempty"`
}

type DocumentStornirovanieOtchetaKomitentuOProdazhakh struct {
	Key                                         Guid                                                                        `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                                 *String                                                                     `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                                      *String                                                                     `xml:"Number" json:"Number,omitempty"`
	Date                                        *Time                                                                       `xml:"Date" json:"Date,omitempty"`
	DeletionMark                                *Boolean                                                                    `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                                      *Boolean                                                                    `xml:"Posted" json:"Posted,omitempty"`
	ValiutaDokumentaKey                         *Guid                                                                       `xml:"ВалютаДокумента_Key" json:"ВалютаДокумента_Key,omitempty"`
	Weight                                      *Float                                                                      `xml:"ВесДокумента" json:"ВесДокумента,omitempty"`
	DogovorKontragentaKey                       *Guid                                                                       `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	DokumentOsnovanie                           *String                                                                     `xml:"ДокументОснование" json:"ДокументОснование,omitempty"`
	KolichestvoDokumenta                        *Int                                                                        `xml:"КоличествоДокумента" json:"КоличествоДокумента,omitempty"`
	Comment                                     *String                                                                     `xml:"Комментарий" json:"Комментарий,omitempty"`
	KontragentKey                               *Guid                                                                       `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	KratnostVzaimoraschetov                     *Int                                                                        `xml:"КратностьВзаиморасчетов" json:"КратностьВзаиморасчетов,omitempty"`
	KursVzaimoraschetov                         *Float                                                                      `xml:"КурсВзаиморасчетов" json:"КурсВзаиморасчетов,omitempty"`
	OrganizatsiiaKey                            *Guid                                                                       `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	OtvetstvennyiKey                            *Guid                                                                       `xml:"Ответственный_Key" json:"Ответственный_Key,omitempty"`
	PodrazdelenieKey                            *Guid                                                                       `xml:"Подразделение_Key" json:"Подразделение_Key,omitempty"`
	ProtsentKomissionnogoVoznagrazhdeniia       *Float                                                                      `xml:"ПроцентКомиссионногоВознаграждения" json:"ПроцентКомиссионногоВознаграждения,omitempty"`
	Sdelka                                      *String                                                                     `xml:"Сделка" json:"Сделка,omitempty"`
	SposobRaschetaKomissionnogoVoznagrazhdeniia *String                                                                     `xml:"СпособРасчетаКомиссионногоВознаграждения" json:"СпособРасчетаКомиссионногоВознаграждения,omitempty"`
	StavkaNDSVoznagrazhdeniia                   *String                                                                     `xml:"СтавкаНДСВознаграждения" json:"СтавкаНДСВознаграждения,omitempty"`
	SummaVoznagrazhdeniia                       *Float                                                                      `xml:"СуммаВознаграждения" json:"СуммаВознаграждения,omitempty"`
	SumOfDocument                               *Float                                                                      `xml:"СуммаДокумента" json:"СуммаДокумента,omitempty"`
	TipDokumenta                                *String                                                                     `xml:"ТипДокумента" json:"ТипДокумента,omitempty"`
	TipTsenKey                                  *Guid                                                                       `xml:"ТипЦен_Key" json:"ТипЦен_Key,omitempty"`
	UderzhatKomissionnoeVoznagrazhdenie         *Boolean                                                                    `xml:"УдержатьКомиссионноеВознаграждение" json:"УдержатьКомиссионноеВознаграждение,omitempty"`
	UsloviiaOplatyKey                           *Guid                                                                       `xml:"УсловияОплаты_Key" json:"УсловияОплаты_Key,omitempty"`
	KhoziaistvennaiaOperatsiiaKey               *Guid                                                                       `xml:"ХозяйственнаяОперация_Key" json:"ХозяйственнаяОперация_Key,omitempty"`
	DenezhnyeSredstva                           *[]DocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstvaRowType `xml:"ДенежныеСредства" json:"ДенежныеСредства,omitempty"`
	Goods                                       *[]DocumentStornirovanieOtchetaKomitentuOProdazhakhTovaryRowType            `xml:"Товары" json:"Товары,omitempty"`
	DokumentOsnovanieType                       *String                                                                     `xml:"ДокументОснование_Type" json:"ДокументОснование_Type,omitempty"`
	SdelkaType                                  *String                                                                     `xml:"Сделка_Type" json:"Сделка_Type,omitempty"`
}

func (entity DocumentStornirovanieOtchetaKomitentuOProdazhakh) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentStornirovanieOtchetaKomitentuOProdazhakh) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentStornirovanieOtchetaKomitentuOProdazhakhDenezhnyeSredstva struct {
	Key                   Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber            Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	VidOtchetaPoPlatezham *String `xml:"ВидОтчетаПоПлатежам" json:"ВидОтчетаПоПлатежам,omitempty"`
	StavkaNDS             *String `xml:"СтавкаНДС" json:"СтавкаНДС,omitempty"`
	Sum                   *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaNDS              *Float  `xml:"СуммаНДС" json:"СуммаНДС,omitempty"`
}

type DocumentStornirovanieOtchetaKomitentuOProdazhakhTovary struct {
	Key                            Guid    `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int     `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float  `xml:"Вес" json:"Вес,omitempty"`
	DokumentPostupleniia           *String `xml:"ДокументПоступления" json:"ДокументПоступления,omitempty"`
	Quantity                       *Int    `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid   `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	OtchetKomitentuKey             *Guid   `xml:"ОтчетКомитенту_Key" json:"ОтчетКомитенту_Key,omitempty"`
	SizeKey                        *Guid   `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid   `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	Sum                            *Float  `xml:"Сумма" json:"Сумма,omitempty"`
	SummaVoznagrazhdeniia          *Float  `xml:"СуммаВознаграждения" json:"СуммаВознаграждения,omitempty"`
	SummaNDSVoznagrazhdeniia       *Float  `xml:"СуммаНДСВознаграждения" json:"СуммаНДСВознаграждения,omitempty"`
	SummaPostupleniia              *Float  `xml:"СуммаПоступления" json:"СуммаПоступления,omitempty"`
	KharakteristikaNomenklaturyKey *Guid   `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	Cost                           *Float  `xml:"Цена" json:"Цена,omitempty"`
	TsenaPostupleniia              *Float  `xml:"ЦенаПоступления" json:"ЦенаПоступления,omitempty"`
	DokumentPostupleniiaType       *String `xml:"ДокументПоступления_Type" json:"ДокументПоступления_Type,omitempty"`
}

type DocumentPeredachaVRemont struct {
	Key                      Guid                                                       `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion              *String                                                    `xml:"DataVersion" json:"DataVersion,omitempty"`
	Number                   *String                                                    `xml:"Number" json:"Number,omitempty"`
	Date                     *Time                                                      `xml:"Date" json:"Date,omitempty"`
	DeletionMark             *Boolean                                                   `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Posted                   *Boolean                                                   `xml:"Posted" json:"Posted,omitempty"`
	OrganizatsiiaKey         *Guid                                                      `xml:"Организация_Key" json:"Организация_Key,omitempty"`
	DepartmentKey            *Guid                                                      `xml:"Склад_Key" json:"Склад_Key,omitempty"`
	KontragentKey            *Guid                                                      `xml:"Контрагент_Key" json:"Контрагент_Key,omitempty"`
	DogovorKontragentaKey    *Guid                                                      `xml:"ДоговорКонтрагента_Key" json:"ДоговорКонтрагента_Key,omitempty"`
	SobstvennaiaMasterskaia  *Boolean                                                   `xml:"СобственнаяМастерская" json:"СобственнаяМастерская,omitempty"`
	KolichestvoDokumenta     *Int                                                       `xml:"КоличествоДокумента" json:"КоличествоДокумента,omitempty"`
	Weight                   *Float                                                     `xml:"ВесДокумента" json:"ВесДокумента,omitempty"`
	IzdeliiaPriniatyeVRemont *[]DocumentPeredachaVRemontIzdeliiaPriniatyeVRemontRowType `xml:"ИзделияПринятыеВРемонт" json:"ИзделияПринятыеВРемонт,omitempty"`
	Goods                    *[]DocumentPeredachaVRemontTovaryRowType                   `xml:"Товары" json:"Товары,omitempty"`
}

func (entity DocumentPeredachaVRemont) Post(PostingModeOperational Boolean) error {
	return nil
}

func (entity DocumentPeredachaVRemont) Unpost(PostingModeOperational Boolean) error {
	return nil
}

type DocumentPeredachaVRemontIzdeliiaPriniatyeVRemont struct {
	Key                            Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	KliuchNomenklaturyKey          *Guid  `xml:"КлючНоменклатуры_Key" json:"КлючНоменклатуры_Key,omitempty"`
	SizeKey                        *Guid  `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid  `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
	InstanceKey                    *Guid  `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	DokumentOprikhodovaniiaKey     *Guid  `xml:"ДокументОприходования_Key" json:"ДокументОприходования_Key,omitempty"`
	Weight                         *Float `xml:"Вес" json:"Вес,omitempty"`
	Quantity                       *Int   `xml:"Количество" json:"Количество,omitempty"`
}

type DocumentPeredachaVRemontTovary struct {
	Key                            Guid   `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber                     Int    `xml:"LineNumber" json:"LineNumber,omitempty"`
	Weight                         *Float `xml:"Вес" json:"Вес,omitempty"`
	KachestvoKey                   *Guid  `xml:"Качество_Key" json:"Качество_Key,omitempty"`
	Quantity                       *Int   `xml:"Количество" json:"Количество,omitempty"`
	ItemKey                        *Guid  `xml:"Номенклатура_Key" json:"Номенклатура_Key,omitempty"`
	SizeKey                        *Guid  `xml:"Размер_Key" json:"Размер_Key,omitempty"`
	InstanceKey                    *Guid  `xml:"СерияНоменклатуры_Key" json:"СерияНоменклатуры_Key,omitempty"`
	KharakteristikaNomenklaturyKey *Guid  `xml:"ХарактеристикаНоменклатуры_Key" json:"ХарактеристикаНоменклатуры_Key,omitempty"`
}

type CatalogPolzovateli struct {
	Key                        Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion                *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description                *String  `xml:"Description" json:"Description,omitempty"`
	Code                       *String  `xml:"Code" json:"Code,omitempty"`
	ParentKey                  *Guid    `xml:"Parent_Key" json:"Parent_Key,omitempty"`
	IsFolder                   *Boolean `xml:"IsFolder" json:"IsFolder,omitempty"`
	DeletionMark               *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Number                     *String  `xml:"Номер" json:"Номер,omitempty"`
	StrategiiaDostupaKZapisiam *String  `xml:"СтратегияДоступаКЗаписям" json:"СтратегияДоступаКЗаписям,omitempty"`
	FizLitsoKey                *Guid    `xml:"ФизЛицо_Key" json:"ФизЛицо_Key,omitempty"`
	ProfilKey                  *Guid    `xml:"Профиль_Key" json:"Профиль_Key,omitempty"`
}

type CatalogTsenovyeKoridory struct {
	Key          Guid     `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion  *String  `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description  *String  `xml:"Description" json:"Description,omitempty"`
	Code         *String  `xml:"Code" json:"Code,omitempty"`
	ParentKey    *Guid    `xml:"Parent_Key" json:"Parent_Key,omitempty"`
	IsFolder     *Boolean `xml:"IsFolder" json:"IsFolder,omitempty"`
	DeletionMark *Boolean `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	TsenaOt      *Int     `xml:"ЦенаОт" json:"ЦенаОт,omitempty"`
	TsenaDo      *Int     `xml:"ЦенаДо" json:"ЦенаДо,omitempty"`
}

type CatalogGruppySkladov struct {
	Key          Guid                                 `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	DataVersion  *String                              `xml:"DataVersion" json:"DataVersion,omitempty"`
	Description  *String                              `xml:"Description" json:"Description,omitempty"`
	Code         *String                              `xml:"Code" json:"Code,omitempty"`
	DeletionMark *Boolean                             `xml:"DeletionMark" json:"DeletionMark,omitempty"`
	Sklady       *[]CatalogGruppySkladovSkladyRowType `xml:"Склады" json:"Склады,omitempty"`
}

type CatalogGruppySkladovSklady struct {
	Key           Guid  `xml:"Ref_Key" json:"Ref_Key,omitempty"`
	LineNumber    Int   `xml:"LineNumber" json:"LineNumber,omitempty"`
	DepartmentKey *Guid `xml:"Склад_Key" json:"Склад_Key,omitempty"`
}
